<Type Name="SecurityTokenResolver" FullName="System.IdentityModel.Selectors.SecurityTokenResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7a9f1909ecc5cbcee826670141ca59c0644e0e92" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46639006" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SecurityTokenResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityTokenResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Selectors.SecurityTokenResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityTokenResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityTokenResolver abstract" />
  <TypeSignature Language="F#" Value="type SecurityTokenResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Docs>
    <summary>Représente une classe d'utilitaire qui peut récupérer des jetons ou des clés de sécurité lorsque vous avez un identificateur de clé ou une clause d'identificateur de clé.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe <xref:System.IdentityModel.Selectors.SecurityTokenResolver> permet de récupérer une clé ou un jeton de sécurité lorsque vous avez un identificateur de clé ou une clause d'identificateur de clé. Les méthodes <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> et <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> récupèrent un jeton à condition qu'il y ait un identificateur de clé ou une clause d'identificateur de clé. <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A> et <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A> récupèrent une clé à condition qu'il y ait une clause d'identificateur de clé. Les méthodes avec le préfixe `Try` retournent `false` lorsque la récupération échoue, alors que les méthodes sans préfixe `Try` lèvent une exception.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityTokenResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityTokenResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultSecurityTokenResolver">
      <MemberSignature Language="C#" Value="public static System.IdentityModel.Selectors.SecurityTokenResolver CreateDefaultSecurityTokenResolver (System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityToken&gt; tokens, bool canMatchLocalId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IdentityModel.Selectors.SecurityTokenResolver CreateDefaultSecurityTokenResolver(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Tokens.SecurityToken&gt; tokens, bool canMatchLocalId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDefaultSecurityTokenResolver (tokens As ReadOnlyCollection(Of SecurityToken), canMatchLocalId As Boolean) As SecurityTokenResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IdentityModel::Selectors::SecurityTokenResolver ^ CreateDefaultSecurityTokenResolver(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Tokens::SecurityToken ^&gt; ^ tokens, bool canMatchLocalId);" />
      <MemberSignature Language="F#" Value="static member CreateDefaultSecurityTokenResolver : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityToken&gt; * bool -&gt; System.IdentityModel.Selectors.SecurityTokenResolver" Usage="System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver (tokens, canMatchLocalId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.SecurityTokenResolver</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokens" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityToken&gt;" />
        <Parameter Name="canMatchLocalId" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tokens">
          <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> de type <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> qui contient le jeu de jetons de sécurité pour lesquels ce programme de résolution de jeton de sécurité peut résoudre les identificateurs de clé et les clauses d'identificateur de clé.</param>
        <param name="canMatchLocalId">
          <see langword="true" /> pour résoudre les clauses d'identificateur de clé <see langword="&lt;SecurityTokenReference&gt;" /> qui référencent une clé de sécurité localisée ailleurs dans le message SOAP ; <see langword="false" /> dans le cas contraire.</param>
        <summary>Crée un programme de résolution de jeton de sécurité par défaut pour les jetons de sécurité spécifiés.</summary>
        <returns>
          <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> qui résout les identificateurs de clé et les clauses qui correspondent aux jetons de sécurité spécifiés dans le paramètre <paramref name="tokens" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le programme de résolution de jeton de sécurité retourné par cette méthode, utilise les méthodes <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A> et <xref:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause%2A> sur les jetons de sécurité spécifiés pour résoudre des identificateurs de clé et des clauses d'identificateur de clé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="securityTokenResolver.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Éléments de configuration personnalisée.</param>
        <summary>Après substitution dans une classe dérivée, charge la configuration personnalisée à partir de XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, lève un <xref:System.NotImplementedException>. Vous pouvez substituer cette méthode pour fournir des fonctionnalités dans une classe dérivée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveSecurityKey">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityKey ResolveSecurityKey (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IdentityModel.Tokens.SecurityKey ResolveSecurityKey(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveSecurityKey (keyIdentifierClause As SecurityKeyIdentifierClause) As SecurityKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IdentityModel::Tokens::SecurityKey ^ ResolveSecurityKey(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ keyIdentifierClause);" />
      <MemberSignature Language="F#" Value="member this.ResolveSecurityKey : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; System.IdentityModel.Tokens.SecurityKey" Usage="securityTokenResolver.ResolveSecurityKey keyIdentifierClause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="keyIdentifierClause">La <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> pour laquelle récupérer la clé.</param>
        <summary>Obtient la clé référencée dans la clause d'identificateur de clé spécifiée.</summary>
        <returns>
          <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> qui est la clé référencée dans la clause d'identificateur de clé spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce qui se passe lorsque la clause d'identificateur de clé ne peut pas être résolue en une clé diffère entre les méthodes <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A> et  <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A>. La méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A> retourne `false`, alors que la méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A> lève une exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keyIdentifierClause" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une clé n'a pas pu être récupérée pour la clause d'identificateur de clé spécifiée dans le paramètre <paramref name="keyIdentifierClause" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResolveToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Récupère un jeton de sécurité qui correspond à l'identificateur de clé spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResolveToken">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityToken ResolveToken (System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IdentityModel.Tokens.SecurityToken ResolveToken(class System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveToken (keyIdentifier As SecurityKeyIdentifier) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IdentityModel::Tokens::SecurityToken ^ ResolveToken(System::IdentityModel::Tokens::SecurityKeyIdentifier ^ keyIdentifier);" />
      <MemberSignature Language="F#" Value="member this.ResolveToken : System.IdentityModel.Tokens.SecurityKeyIdentifier -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenResolver.ResolveToken keyIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifier" Type="System.IdentityModel.Tokens.SecurityKeyIdentifier" />
      </Parameters>
      <Docs>
        <param name="keyIdentifier">
          <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> pour lequel créer un jeton de sécurité.</param>
        <summary>Récupère un jeton de sécurité qui correspond à l'une des clauses de l'identificateur de clé de sécurité contenues dans l'identificateur de clé spécifié.</summary>
        <returns>
          <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> qui représente l'identificateur de clé spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce qui se passe lorsque l'identificateur de clé ne peut pas être résolu en un jeton de sécurité diffère entre les méthodes <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> et  <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>. La méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> retourne `false`, alors que la méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> lève une exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keyIdentifier" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Un jeton de sécurité ne peut pas être créé pour l'identificateur de clé spécifié.</exception>
      </Docs>
    </Member>
    <Member MemberName="ResolveToken">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityToken ResolveToken (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IdentityModel.Tokens.SecurityToken ResolveToken(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveToken (keyIdentifierClause As SecurityKeyIdentifierClause) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IdentityModel::Tokens::SecurityToken ^ ResolveToken(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ keyIdentifierClause);" />
      <MemberSignature Language="F#" Value="member this.ResolveToken : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenResolver.ResolveToken keyIdentifierClause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="keyIdentifierClause">
          <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> pour lequel créer un jeton de sécurité.</param>
        <summary>Récupère le jeton de sécurité qui correspond à la clause d'identificateur de clé spécifiée.</summary>
        <returns>
          <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> qui représente la clause d'identificateur de clé spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce qui se passe lorsque la clause d'identificateur de clé ne peut pas être résolue en un jeton de sécurité diffère entre les méthodes <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> et  <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>. La méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> retourne `false`, alors que la méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> lève une exception.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryResolveSecurityKey">
      <MemberSignature Language="C#" Value="public bool TryResolveSecurityKey (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryResolveSecurityKey(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, [out] class System.IdentityModel.Tokens.SecurityKey&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryResolveSecurityKey (keyIdentifierClause As SecurityKeyIdentifierClause, ByRef key As SecurityKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryResolveSecurityKey(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ keyIdentifierClause, [Runtime::InteropServices::Out] System::IdentityModel::Tokens::SecurityKey ^ % key);" />
      <MemberSignature Language="F#" Value="member this.TryResolveSecurityKey : System.IdentityModel.Tokens.SecurityKeyIdentifierClause *  -&gt; bool" Usage="securityTokenResolver.TryResolveSecurityKey (keyIdentifierClause, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
        <Parameter Name="key" Type="System.IdentityModel.Tokens.SecurityKey" RefType="out" />
      </Parameters>
      <Docs>
        <param name="keyIdentifierClause">La <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> pour laquelle récupérer la clé.</param>
        <param name="key">Cette méthode retourne une <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> qui contient la clé référencée dans la clause d'identificateur de clé spécifiée. Ce paramètre est passé sans être initialisé.</param>
        <summary>Tente de récupérer la clé référencée dans la clause d'identificateur de clé spécifiée.</summary>
        <returns>
          <see langword="true" /> lorsqu'une clé peut être récupérée pour la clause d'identificateur de clé spécifiée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce qui se passe lorsque la clause d'identificateur de clé ne peut pas être résolue en une clé diffère entre les méthodes <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A> et  <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A>. La méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A> retourne `false`, alors que la méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A> lève une exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keyIdentifierClause" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryResolveSecurityKeyCore">
      <MemberSignature Language="C#" Value="protected abstract bool TryResolveSecurityKeyCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryResolveSecurityKeyCore(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, [out] class System.IdentityModel.Tokens.SecurityKey&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TryResolveSecurityKeyCore (keyIdentifierClause As SecurityKeyIdentifierClause, ByRef key As SecurityKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool TryResolveSecurityKeyCore(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ keyIdentifierClause, [Runtime::InteropServices::Out] System::IdentityModel::Tokens::SecurityKey ^ % key);" />
      <MemberSignature Language="F#" Value="abstract member TryResolveSecurityKeyCore : System.IdentityModel.Tokens.SecurityKeyIdentifierClause *  -&gt; bool" Usage="securityTokenResolver.TryResolveSecurityKeyCore (keyIdentifierClause, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
        <Parameter Name="key" Type="System.IdentityModel.Tokens.SecurityKey" RefType="out" />
      </Parameters>
      <Docs>
        <param name="keyIdentifierClause">La <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> pour laquelle récupérer la clé.</param>
        <param name="key">Cette méthode retourne une <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> qui contient la clé référencée dans la clause d'identificateur de clé spécifiée. Ce paramètre est passé sans être initialisé.</param>
        <summary>Tente de récupérer la clé référencée dans la clause d'identificateur de clé spécifiée.</summary>
        <returns>
          <see langword="true" /> lorsqu'une clé peut être récupérée pour la clause d'identificateur de clé spécifiée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore%2A> est appelée par les méthodes <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A> et <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryResolveToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tente de récupérer le jeton de sécurité référencé dans l'objet spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryResolveToken">
      <MemberSignature Language="C#" Value="public bool TryResolveToken (System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier, out System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryResolveToken(class System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier, [out] class System.IdentityModel.Tokens.SecurityToken&amp; token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryResolveToken (keyIdentifier As SecurityKeyIdentifier, ByRef token As SecurityToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryResolveToken(System::IdentityModel::Tokens::SecurityKeyIdentifier ^ keyIdentifier, [Runtime::InteropServices::Out] System::IdentityModel::Tokens::SecurityToken ^ % token);" />
      <MemberSignature Language="F#" Value="member this.TryResolveToken : System.IdentityModel.Tokens.SecurityKeyIdentifier *  -&gt; bool" Usage="securityTokenResolver.TryResolveToken (keyIdentifier, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifier" Type="System.IdentityModel.Tokens.SecurityKeyIdentifier" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" RefType="out" />
      </Parameters>
      <Docs>
        <param name="keyIdentifier">
          <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> pour lequel créer un jeton de sécurité.</param>
        <param name="token">Cette méthode retourne un <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> qui représente l'identificateur de clé spécifié. Ce paramètre est passé sans être initialisé.</param>
        <summary>Tente de récupérer le jeton de sécurité qui correspond à l'une des clauses d'identificateur de clé contenues dans l'identificateur de clé spécifié.</summary>
        <returns>
          <see langword="true" /> lorsqu'un jeton de sécurité peut être récupéré pour l'identificateur de clé spécifié ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce qui se passe lorsque l'identificateur de clé ne peut pas être résolu en un jeton de sécurité diffère entre les méthodes <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> et  <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>. La méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> retourne `false`, alors que la méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> lève une exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keyIdentifier" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryResolveToken">
      <MemberSignature Language="C#" Value="public bool TryResolveToken (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryResolveToken(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, [out] class System.IdentityModel.Tokens.SecurityToken&amp; token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryResolveToken (keyIdentifierClause As SecurityKeyIdentifierClause, ByRef token As SecurityToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryResolveToken(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ keyIdentifierClause, [Runtime::InteropServices::Out] System::IdentityModel::Tokens::SecurityToken ^ % token);" />
      <MemberSignature Language="F#" Value="member this.TryResolveToken : System.IdentityModel.Tokens.SecurityKeyIdentifierClause *  -&gt; bool" Usage="securityTokenResolver.TryResolveToken (keyIdentifierClause, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" RefType="out" />
      </Parameters>
      <Docs>
        <param name="keyIdentifierClause">
          <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> pour lequel créer un jeton de sécurité.</param>
        <param name="token">Cette méthode retourne un <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> qui représente la clause d'identificateur de clé spécifiée. Ce paramètre est passé sans être initialisé.</param>
        <summary>Tente de récupérer le jeton de sécurité qui correspond à la clause d'identificateur de clé spécifiée.</summary>
        <returns>
          <see langword="true" /> lorsqu'un jeton de sécurité peut être récupéré pour la clause d'identificateur de clé spécifiée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce qui se passe lorsque la clause d'identificateur de clé ne peut pas être résolue en un jeton de sécurité diffère entre les méthodes <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> et  <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>. La méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> retourne `false`, alors que la méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> lève une exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keyIdentifierClause" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryResolveTokenCore">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tente de récupérer la clé référencée dans l'objet spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryResolveTokenCore">
      <MemberSignature Language="C#" Value="protected abstract bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier, out System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryResolveTokenCore(class System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier, [out] class System.IdentityModel.Tokens.SecurityToken&amp; token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TryResolveTokenCore (keyIdentifier As SecurityKeyIdentifier, ByRef token As SecurityToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool TryResolveTokenCore(System::IdentityModel::Tokens::SecurityKeyIdentifier ^ keyIdentifier, [Runtime::InteropServices::Out] System::IdentityModel::Tokens::SecurityToken ^ % token);" />
      <MemberSignature Language="F#" Value="abstract member TryResolveTokenCore : System.IdentityModel.Tokens.SecurityKeyIdentifier *  -&gt; bool" Usage="securityTokenResolver.TryResolveTokenCore (keyIdentifier, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifier" Type="System.IdentityModel.Tokens.SecurityKeyIdentifier" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" RefType="out" />
      </Parameters>
      <Docs>
        <param name="keyIdentifier">
          <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> pour lequel créer un jeton de sécurité.</param>
        <param name="token">Cette méthode retourne un <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> qui représente l'identificateur de clé spécifié. Ce paramètre est passé sans être initialisé.</param>
        <summary>En cas de substitution dans une classe dérivée, tente de récupérer le jeton de sécurité qui correspond à au moins une des clauses d'identificateur de clé contenues dans l'identificateur clé spécifié.</summary>
        <returns>
          <see langword="true" /> lorsqu'un jeton de sécurité peut être récupéré pour l'identificateur de clé spécifié ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore%2A> est appelée par les méthodes <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> et <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryResolveTokenCore">
      <MemberSignature Language="C#" Value="protected abstract bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryResolveTokenCore(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, [out] class System.IdentityModel.Tokens.SecurityToken&amp; token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TryResolveTokenCore (keyIdentifierClause As SecurityKeyIdentifierClause, ByRef token As SecurityToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool TryResolveTokenCore(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ keyIdentifierClause, [Runtime::InteropServices::Out] System::IdentityModel::Tokens::SecurityToken ^ % token);" />
      <MemberSignature Language="F#" Value="abstract member TryResolveTokenCore : System.IdentityModel.Tokens.SecurityKeyIdentifierClause *  -&gt; bool" Usage="securityTokenResolver.TryResolveTokenCore (keyIdentifierClause, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" RefType="out" />
      </Parameters>
      <Docs>
        <param name="keyIdentifierClause">
          <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> pour lequel créer un jeton de sécurité.</param>
        <param name="token">Cette méthode retourne un <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> qui représente la clause d'identificateur de clé spécifiée. Ce paramètre est passé sans être initialisé.</param>
        <summary>En cas de substitution dans une classe dérivée, tente de résoudre le jeton de sécurité qui correspond à la clause d'identificateur de clé spécifiée.</summary>
        <returns>
          <see langword="true" /> lorsqu'un jeton de sécurité peut être récupéré pour la clause d'identificateur de clé spécifiée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore%2A> est appelée par les méthodes <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> et <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>