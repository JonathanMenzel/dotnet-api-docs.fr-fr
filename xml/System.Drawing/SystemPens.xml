<Type Name="SystemPens" FullName="System.Drawing.SystemPens">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7b11ab50bc45ca20f92db8309e820bd50d428a9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410443" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SystemPens" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SystemPens extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.SystemPens" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SystemPens" />
  <TypeSignature Language="C++ CLI" Value="public ref class SystemPens sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Chaque propriété de la classe <see cref="T:System.Drawing.SystemPens" /> est un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur d'un élément d'affichage Windows et dont la largeur est 1 pixel.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant crée des points et des tailles à l’aide de plusieurs opérateurs surchargés définis pour ces types. Il montre également comment utiliser la <xref:System.Drawing.SystemPens> classe.  
  
 Cet exemple est conçu pour être utilisé avec Windows Forms. Créer un formulaire qui contient un <xref:System.Windows.Forms.Button> nommé `subtractButton`. Collez le code dans le formulaire et appelez le `CreatePointsAndSizes` méthode à partir du formulaire `Paint` méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PointsAndSizes#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PointsAndSizes/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PointsAndSizes#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PointsAndSizes/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PointsAndSizes#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PointsAndSizes/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ActiveBorder">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ActiveBorder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ActiveBorder" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ActiveBorder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ActiveBorder As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ActiveBorder { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui est la couleur de la bordure de la fenêtre active.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur de la bordure de la fenêtre active.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.ActiveBorder%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithActiveBorderPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#13)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveCaption">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ActiveCaption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ActiveCaption" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ActiveCaption" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ActiveCaption As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ActiveCaption { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui est la couleur de l’arrière-plan de la barre de titre de la fenêtre active.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de l'arrière-plan de la barre de titre de la fenêtre active.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.ActiveCaption%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithActiveCaptionPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#14)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveCaptionText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ActiveCaptionText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ActiveCaptionText" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ActiveCaptionText" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ActiveCaptionText As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ActiveCaptionText { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du texte dans la barre de titre de la fenêtre inactive.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du texte figurant dans la barre de titre de la fenêtre active.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppWorkspace">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen AppWorkspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen AppWorkspace" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.AppWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AppWorkspace As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ AppWorkspace { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de l’espace de travail de l’application.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur de l'espace de travail de l'application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’espace de travail est la zone dans un affichage à plusieurs documents qui n’est pas occupée par des documents.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.AppWorkspace%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithActiveAppWorkspacePen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#14)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ButtonFace">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ButtonFace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ButtonFace" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ButtonFace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ButtonFace As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ButtonFace { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de face d'un élément 3D.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de face d'un élément 3D.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.ButtonFace%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithButtonSpacePen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#16)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ButtonHighlight">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ButtonHighlight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ButtonHighlight" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ButtonHighlight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ButtonHighlight As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ButtonHighlight { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de surbrillance d'un élément 3D.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de surbrillance d'un élément 3D.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette couleur est appliquée aux parties d'un élément 3D qui font face à la source de lumière.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.ButtonHighlight%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithButtonHighlightPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#17)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ButtonShadow">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ButtonShadow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ButtonShadow" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ButtonShadow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ButtonShadow As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ButtonShadow { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de l'ombre d'un élément 3D.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur de l'ombre d'un élément 3D.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette couleur est appliquée aux parties d'un élément 3D qui ne font pas face à la source de lumière.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.ButtonShadow%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithButtonShadowPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#18)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Control" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.Control" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Control As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ Control { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de face d'un élément 3D.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de face d'un élément 3D.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.Control%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithControlPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#19)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlDark">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ControlDark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ControlDark" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ControlDark" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ControlDark As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ControlDark { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de l'ombre d'un élément 3D.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur de l'ombre d'un élément 3D.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette couleur est appliquée aux parties d'un élément 3D qui ne font pas face à la source de lumière.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.ControlDark%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithControlDarkPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#20)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlDarkDark">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ControlDarkDark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ControlDarkDark" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ControlDarkDark" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ControlDarkDark As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ControlDarkDark { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de l'ombre foncée d'un élément 3D.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur de l'ombre foncée d'un élément 3D.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette couleur est appliquée aux parties d’un élément 3D dont la couleur la plus sombre.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.ControlDarkDark%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithControlDarkDarkPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#21)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlLight">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ControlLight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ControlLight" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ControlLight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ControlLight As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ControlLight { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur claire d'un élément 3D.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur claire d'un élément 3D.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette couleur est appliquée aux parties d'un élément 3D qui font face à la source de lumière.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.ControlLight%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithControlLightPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#22)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlLightLight">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ControlLightLight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ControlLightLight" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ControlLightLight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ControlLightLight As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ControlLightLight { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de surbrillance d'un élément 3D.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de surbrillance d'un élément 3D.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette couleur est appliquée aux parties d’un élément 3D dont la couleur plus claire.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.ControlLightLight%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithControlLightLightPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#23)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ControlText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ControlText" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ControlText" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ControlText As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ControlText { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du texte d'un élément 3D.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du texte d'un élément 3D.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.ControlText%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithControlTextPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#24)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Desktop">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Desktop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Desktop" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.Desktop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Desktop As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ Desktop { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du Bureau Windows.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du Bureau Windows.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.Desktop%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithControlDesktopPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#25)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromSystemColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen FromSystemColor (System.Drawing.Color c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Pen FromSystemColor(valuetype System.Drawing.Color c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.SystemPens.FromSystemColor(System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSystemColor (c As Color) As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Pen ^ FromSystemColor(System::Drawing::Color c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="c">
          <see cref="T:System.Drawing.Color" /> du nouveau <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Crée <see cref="T:System.Drawing.Pen" /> à partir du <see cref="T:System.Drawing.Color" /> spécifié.</summary>
        <returns>
          <see cref="T:System.Drawing.Pen" /> créé par cette méthode.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GradientActiveCaption">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen GradientActiveCaption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen GradientActiveCaption" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.GradientActiveCaption" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property GradientActiveCaption As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ GradientActiveCaption { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur la plus claire du dégradé de couleur de la barre de titre d'une fenêtre active.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur la plus claire du dégradé de couleur de la barre de titre d'une fenêtre active.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.GradientActiveCaption%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithGradientActiveCaptionPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#26)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GradientInactiveCaption">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen GradientInactiveCaption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen GradientInactiveCaption" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.GradientInactiveCaption" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property GradientInactiveCaption As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ GradientInactiveCaption { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur la plus claire du dégradé de couleur de la barre de titre d'une fenêtre inactive.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur la plus claire du dégradé de couleur de la barre de titre d'une fenêtre inactive.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.GradientInactiveCaption%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithGradientInactiveCaptionPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#27)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GrayText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen GrayText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen GrayText" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.GrayText" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property GrayText As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ GrayText { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du texte estompé.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur du texte estompé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les éléments désactivés dans une liste sont affichés sous forme de texte estompé.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.GrayText%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithGrayTextPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#28)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Highlight">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Highlight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Highlight" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.Highlight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Highlight As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ Highlight { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de l'arrière-plan des éléments sélectionnés.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur de l'arrière-plan des éléments sélectionnés.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les éléments sélectionnés peuvent inclure des éléments de menu ainsi que le texte sélectionné. Par exemple, le stylet peut être la couleur utilisée pour l’arrière-plan des éléments sélectionnés dans une zone de liste.  
  
   
  
## Examples  
 L’exemple de code suivant crée des points et des tailles à l’aide de plusieurs opérateurs surchargés définis pour ces types. Il montre également comment utiliser le <xref:System.Drawing.SystemPens.Highlight%2A> propriété.  
  
 Cet exemple est conçu pour être utilisé avec Windows Forms. Créer un formulaire qui contient un <xref:System.Windows.Forms.Button> nommé `subtractButton`. Collez le code dans le formulaire et appelez le `CreatePointsAndSizes` méthode à partir du formulaire <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PointsAndSizes#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PointsAndSizes/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PointsAndSizes#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PointsAndSizes/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PointsAndSizes#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PointsAndSizes/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HighlightText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen HighlightText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen HighlightText" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.HighlightText" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property HighlightText As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ HighlightText { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du texte des éléments sélectionnés.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur du texte des éléments sélectionnés.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les éléments sélectionnés peuvent inclure des éléments de menu ainsi que le texte sélectionné. Par exemple, le stylet peut être la couleur utilisée pour le texte des éléments sélectionnés dans une zone de liste.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.HighlightText%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithHighlightTextPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#30)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HotTrack">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen HotTrack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen HotTrack" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.HotTrack" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property HotTrack As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ HotTrack { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui est la couleur utilisée pour désigner un élément suivi attentivement.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur utilisée pour désigner un élément qui est « hot-tracked ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.HotTrack%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithHotTrackPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#31)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InactiveBorder">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen InactiveBorder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen InactiveBorder" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.InactiveBorder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InactiveBorder As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ InactiveBorder { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de la bordure d'une fenêtre inactive.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de la bordure d'une fenêtre inactive.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.InactiveBorder%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithInactiveBorderPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#32)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InactiveCaption">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen InactiveCaption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen InactiveCaption" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.InactiveCaption" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InactiveCaption As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ InactiveCaption { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de la légende de barre de titre d'une fenêtre inactive.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de la légende de barre de titre d'une fenêtre inactive.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.InactiveCaption%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithInactiveCaptionPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#33)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InactiveCaptionText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen InactiveCaptionText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen InactiveCaptionText" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.InactiveCaptionText" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InactiveCaptionText As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ InactiveCaptionText { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du texte dans la barre de titre d'une fenêtre inactive.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur du texte dans la barre de titre d'une fenêtre inactive.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.InactiveCaptionText%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithInactiveCaptionTextPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#34)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Info" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.Info" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Info As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ Info { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de l'arrière-plan d'une info-bulle.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur de l'arrière-plan d'une info-bulle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.Info%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithInfoPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#35)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InfoText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen InfoText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen InfoText" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.InfoText" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InfoText As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ InfoText { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du texte d'une info-bulle.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur du texte d'une info-bulle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.InfoText%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithInfoTextPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#36)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Menu">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Menu { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Menu" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.Menu" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Menu As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ Menu { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de l'arrière-plan d'un menu.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur de l'arrière-plan d'un menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.Menu%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithMenuPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#37)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#37)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MenuBar">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen MenuBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen MenuBar" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.MenuBar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MenuBar As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ MenuBar { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de l'arrière-plan d'une barre de menus.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur de l'arrière-plan d'une barre de menus.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.MenuBar%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithMenuBarPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#38)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MenuHighlight">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen MenuHighlight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen MenuHighlight" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.MenuHighlight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MenuHighlight As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ MenuHighlight { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur utilisée pour mettre en surbrillance les éléments de menu lorsque ce dernier s'affiche en 2D.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur utilisée pour mettre en surbrillance les éléments de menu lorsque ce dernier s'affiche en 2D.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.MenuHighlight%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithMenuHighlightPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#39)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MenuText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen MenuText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen MenuText" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.MenuText" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MenuText As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ MenuText { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du texte d'un menu.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur du texte d'un menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.MenuText%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithMenuTextPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#40)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollBar">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ScrollBar" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.ScrollBar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ScrollBar As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ ScrollBar { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de l'arrière-plan d'une barre de défilement.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur de l'arrière-plan d'une barre de défilement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.ScrollBar%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithScrollBarPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#41)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Window { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Window" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.Window" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Window As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ Window { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur de l'arrière-plan de la zone client d'une fenêtre.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur de l'arrière-plan de la zone cliente d'une fenêtre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.Window%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithWindowPen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#42)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrame">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen WindowFrame { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen WindowFrame" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.WindowFrame" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property WindowFrame As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ WindowFrame { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur d'un frame de fenêtre.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur d'un frame de fenêtre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.WindowFrame%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithWindowFramePen` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#44)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen WindowText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen WindowText" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.SystemPens.WindowText" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property WindowText As Pen" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Pen ^ WindowText { System::Drawing::Pen ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Pen" /> qui correspond à la couleur du texte dans la zone client d'une fenêtre.</summary>
        <value>
          <see cref="T:System.Drawing.Pen" /> qui est la couleur du texte de la zone cliente d'une fenêtre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.SystemPens.WindowText%2A> propriété. Pour exécuter cet exemple, collez-le dans un Windows Form. Gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawWithWindowText` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#45)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>