<Type Name="BufferedGraphicsContext" FullName="System.Drawing.BufferedGraphicsContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3cd33420e3c9ab1872718713285569f6c1365879" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52908914" /></Metadata><TypeSignature Language="C#" Value="public sealed class BufferedGraphicsContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphicsContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphicsContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphicsContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphicsContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphicsContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fournit des méthodes pour créer des mémoires tampons de graphiques qui peuvent être utilisées pour la double mise en tampon.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.BufferedGraphicsContext> classe vous permet d’implémenter le mécanisme de double tampon personnalisé pour vos graphiques. Les graphiques qui utilisent le mécanisme de double tampon peuvent réduire ou éliminer le scintillement provoqué par le rafraîchissement du dessin une surface d’affichage.  
  
> [!NOTE]
>  La façon la plus simple d’utiliser la double mise en tampon consiste à définir le <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> contrôler l’indicateur de style sur un contrôle en utilisant le <xref:System.Windows.Forms.Control.SetStyle%2A> (méthode). Définition de la <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> indicateur de styles de contrôle pour un contrôle redirige toute la peinture du contrôle via une mémoire tampon de graphiques par défaut, sans requérir de code supplémentaire. Cet indicateur est défini `true` par défaut.  
  
 Le <xref:System.Drawing.BufferedGraphicsContext> classe fournit des méthodes pour créer et configurer une mémoire tampon de graphiques. Le <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> méthode crée un <xref:System.Drawing.BufferedGraphics>, qui est un wrapper pour une mémoire tampon de graphiques qui fournit également des méthodes que vous pouvez utiliser pour écrire dans la mémoire tampon et afficher son contenu sur un périphérique de sortie.  
  
 Vous pouvez récupérer le <xref:System.Drawing.BufferedGraphicsContext> pour le domaine d’application actuel à partir de la méthode statique <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> propriété. Pour les applications gourmandes en ressources graphiques telles que l’animation, vous pouvez créer un dédié <xref:System.Drawing.BufferedGraphicsContext> l’aide du constructeur, mais pour la plupart des applications le <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> propriété sera suffisante.  
  
 Pour plus d’informations sur le dessin des graphiques mis en mémoire tampon et mise en mémoire tampon des implémentations personnalisées, consultez [des graphiques mis en mémoire tampon Double](~/docs/framework/winforms/advanced/double-buffered-graphics.md) et [Comment : gérer manuellement mis en mémoire tampon des graphiques](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment obtenir le <xref:System.Drawing.BufferedGraphicsContext> pour le domaine d’application actuel. Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Drawing.BufferedGraphics> classe.  
  
 [!code-cpp[BufferingExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#1)]
 [!code-csharp[BufferingExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#1)]
 [!code-vb[BufferingExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.BufferedGraphics" />
    <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
    <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
    <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BufferedGraphicsContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Drawing.BufferedGraphicsContext" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour les applications gourmandes en ressources graphiques telles que l’animation, vous pouvez parfois améliorer les performances en utilisant un dédié <xref:System.Drawing.BufferedGraphicsContext> au lieu de l’instance par défaut fournie par le <xref:System.Drawing.BufferedGraphicsManager>. Cela vous permet de créer et gérer les mémoires tampons de graphiques individuellement.  
  
> [!NOTE]
>  Vous devez toujours appeler <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> lorsque vous avez terminé à l’aide d’un dédié <xref:System.Drawing.BufferedGraphicsContext>.  
  
 Pour plus d’informations sur les mémoires tampons de graphiques dédiées, consultez [Comment : gérer manuellement mis en mémoire tampon des graphiques](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
        <related type="Article" href="~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md">Comment : gérer manuellement des graphiques mis en mémoire tampon</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Allocate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crée une mémoire tampon de graphiques.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(class System.Drawing.Graphics targetGraphics, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetGraphics As Graphics, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(System::Drawing::Graphics ^ targetGraphics, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : System.Drawing.Graphics * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetGraphics, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetGraphics" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetGraphics">Le <see cref="T:System.Drawing.Graphics" /> pour correspondre au format de pixel de la nouvelle mémoire tampon.</param>
        <param name="targetRectangle">Un <see cref="T:System.Drawing.Rectangle" /> indiquant la taille de la mémoire tampon à créer.</param>
        <summary>Crée un mémoire tampon de graphiques de la taille spécifiée en utilisant le format de pixel spécifié <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Un <see cref="T:System.Drawing.BufferedGraphics" /> qui peut être utilisé pour dessiner dans une mémoire tampon des dimensions spécifiées.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous appelez le <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> méthode avec un rectangle dont la taille dépasse la valeur de la <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> propriété, une table temporaire <xref:System.Drawing.BufferedGraphicsContext> est créé pour allouer la mémoire tampon et fournir un contexte temporaire pour la mémoire tampon. La nouvelle <xref:System.Drawing.BufferedGraphicsContext> se distingue le <xref:System.Drawing.BufferedGraphicsContext> pour l’application de domaine et il est supprimé automatiquement lorsque le <xref:System.Drawing.BufferedGraphics> retourné par la <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> méthode est supprimée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la création d’une mémoire tampon de graphiques à l’aide de la <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> (méthode). Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Drawing.BufferedGraphics> classe.  
  
 [!code-cpp[BufferingExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#3)]
 [!code-csharp[BufferingExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#3)]
 [!code-vb[BufferingExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(native int targetDC, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetDC As IntPtr, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(IntPtr targetDC, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : nativeint * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetDC, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetDC">Un <see cref="T:System.IntPtr" /> à un contexte de périphérique pour correspondre au format de pixel de la nouvelle mémoire tampon.</param>
        <param name="targetRectangle">Un <see cref="T:System.Drawing.Rectangle" /> indiquant la taille de la mémoire tampon à créer.</param>
        <summary>Crée un mémoire tampon de graphiques de la taille spécifiée en utilisant le format de pixel spécifié <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Un <see cref="T:System.Drawing.BufferedGraphics" /> qui peut être utilisé pour dessiner dans une mémoire tampon des dimensions spécifiées.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous appelez le <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> méthode avec un rectangle dont la taille dépasse la valeur de la <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> propriété, une table temporaire <xref:System.Drawing.BufferedGraphicsContext> est créé pour allouer la mémoire tampon et fournir un contexte temporaire pour la mémoire tampon. La nouvelle <xref:System.Drawing.BufferedGraphicsContext> se distingue le <xref:System.Drawing.BufferedGraphicsContext> pour l’application de domaine et il est supprimé automatiquement lorsque le <xref:System.Drawing.BufferedGraphics> retourné par la <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> méthode est supprimée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la création d’une mémoire tampon de graphiques à l’aide de la <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> (méthode). Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Drawing.BufferedGraphics> classe.  
  
 [!code-cpp[BufferingExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#4)]
 [!code-csharp[BufferingExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#4)]
 [!code-vb[BufferingExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour accéder au code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.IntPtr" />
        <altmember cref="T:System.Drawing.Rectangle" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphicsContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par <see cref="T:System.Drawing.BufferedGraphicsContext" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez la méthode <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> une fois que vous avez terminé d'utiliser <xref:System.Drawing.BufferedGraphicsContext>. La méthode <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> rend le <xref:System.Drawing.BufferedGraphicsContext> inutilisable. Après avoir appelé <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>, vous devez libérer toutes les références à la <xref:System.Drawing.BufferedGraphicsContext> pour que le garbage collector puisse récupérer la mémoire qui le <xref:System.Drawing.BufferedGraphicsContext> occupée. Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Appelez toujours <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> avant de libérer votre dernière référence à <xref:System.Drawing.BufferedGraphicsContext>. Sinon, les ressources qu’il utilise ne seront pas libérées jusqu'à ce que le garbage collector appelle la <xref:System.Object.Finalize%2A> méthode de la <xref:System.Drawing.BufferedGraphicsContext>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphicsContext ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphicsContext.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Autorise un objet à tenter de libérer des ressources et à exécuter d'autres opérations de nettoyage avant qu'il ne soit récupéré par une opération garbage collection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberSignature Language="F#" Value="member this.Invalidate : unit -&gt; unit" Usage="bufferedGraphicsContext.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime de la mémoire tampon de graphiques en cours, si une mémoire tampon a été allouée et n’a pas encore été supprimée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la mémoire tampon de graphiques est en cours d’utilisation, elle sera marquée pour suppression dès que c’est gratuit ; Sinon, il est supprimé immédiatement.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
      </Docs>
    </Member>
    <Member MemberName="MaximumBuffer">
      <MemberSignature Language="C#" Value="public System.Drawing.Size MaximumBuffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumBuffer As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size MaximumBuffer { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumBuffer : System.Drawing.Size with get, set" Usage="System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la taille maximale de la mémoire tampon à utiliser.</summary>
        <value>Un <see cref="T:System.Drawing.Size" /> indiquant la taille maximale des dimensions de la mémoire tampon.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété vous permet à obtenir ou définir les dimensions maximales pour une mémoire tampon qui doit être conservée en mémoire. Vous pouvez allouer une mémoire tampon de n’importe quelle taille, toutefois, les mettre en mémoire tampon avec des dimensions supérieures à la <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> taille sera utilisé de façon temporaire, puis est supprimée lorsque la <xref:System.Drawing.BufferedGraphics> objet est libéré.  
  
   
  
## Examples  
 L’exemple suivant illustre la définition de la taille maximale pour la mémoire tampon pour un <xref:System.Drawing.BufferedGraphicsContext>. Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Drawing.BufferedGraphics> classe.  
  
 [!code-cpp[BufferingExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#2)]
 [!code-csharp[BufferingExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#2)]
 [!code-vb[BufferingExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La hauteur ou la largeur de la taille est inférieure ou égale à zéro.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Pour autoriser l’accès utilisateur à toutes les fenêtres. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
      </Docs>
    </Member>
  </Members>
</Type>