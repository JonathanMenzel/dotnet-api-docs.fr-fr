<Type Name="ImageFormatConverter" FullName="System.Drawing.ImageFormatConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bb40f91651c7c1b510d718bfedc1c92f22aec91d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30409663" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ImageFormatConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ImageFormatConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.ImageFormatConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class ImageFormatConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImageFormatConverter : System::ComponentModel::TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Drawing.ImageFormatConverter" /> est une classe qui peut être utilisée pour convertir des objets <see cref="T:System.Drawing.Imaging.ImageFormat" /> d'un type de données à un autre. Accédez à cette classe via l'objet <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un convertisseur de type est utilisé pour convertir des valeurs entre des types de données. Un convertisseur de type prend également en charge la configuration de la propriété au moment du design en fournissant une conversion de texte en valeur ou une liste de valeurs que les utilisateurs peuvent sélectionner. Accès le <xref:System.Drawing.ImageFormatConverter> par le biais du <xref:System.ComponentModel.TypeDescriptor> classe en appelant le <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> (méthode).  
  
 Le <xref:System.Drawing.ImageFormatConverter> convertit vers et à partir des formats d’image connus, comme spécifié dans le <xref:System.Drawing.Imaging.ImageFormat> classe.  
  
> [!NOTE]
>  Si vous souhaitez effectuer une conversion entre des formats d’image, telles que la conversion entre BMP et JPEG, utilisez une de la <xref:System.Drawing.Image.Save%2A?displayProperty=nameWithType> méthodes acceptant une <xref:System.Drawing.Imaging.ImageFormat> objet en tant que paramètre.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.TypeConverter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImageFormatConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ImageFormatConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Drawing.ImageFormatConverter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ne créez pas un <xref:System.Drawing.ImageFormatConverter> directement l’objet. Accès le <xref:System.Drawing.ImageFormatConverter> par le biais du <xref:System.ComponentModel.TypeDescriptor> classe en appelant le <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertFrom (context As ITypeDescriptorContext, sourceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ sourceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
        <param name="sourceType">Type à partir duquel vous souhaitez convertir.</param>
        <summary>Indique si ce convertisseur peut convertir un objet du type source spécifié en objet du type natif du convertisseur.</summary>
        <returns>Cette méthode retourne <see langword="true" /> si cet objet peut effectuer la conversion.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.ImageFormatConverter> convertit vers et à partir des formats d’image connus, comme spécifié dans le <xref:System.Drawing.Imaging.ImageFormat> classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui spécifie le contexte pour cette conversion de type.</param>
        <param name="destinationType">
          <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez convertir cet objet <see cref="T:System.Drawing.Imaging.ImageFormat" />.</param>
        <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination spécifié en utilisant le contexte.</summary>
        <returns>Cette méthode retourne <see langword="true" /> si cet objet peut effectuer la conversion.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.ImageFormatConverter> convertit vers et à partir des formats d’image connus, comme spécifié dans le <xref:System.Drawing.Imaging.ImageFormat> classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertFrom (context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
        <param name="culture">Objet <see cref="T:System.Globalization.CultureInfo" /> qui spécifie des conventions de mise en forme pour une culture particulière.</param>
        <param name="value">Objet à convertir.</param>
        <summary>Convertit l'objet spécifié en objet <see cref="T:System.Drawing.Imaging.ImageFormat" />.</summary>
        <returns>Objet converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.ImageFormatConverter> convertit vers et à partir des formats d’image connus, comme spécifié dans le <xref:System.Drawing.Imaging.ImageFormat> classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
        <param name="culture">Objet <see cref="T:System.Globalization.CultureInfo" /> qui spécifie des conventions de mise en forme pour une culture particulière.</param>
        <param name="value">Objet à convertir.</param>
        <param name="destinationType">Type dans lequel convertir l'objet.</param>
        <summary>Convertit l'objet spécifié dans le type spécifié.</summary>
        <returns>Objet converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.ImageFormatConverter> convertit vers et à partir des formats d’image connus, comme spécifié dans le <xref:System.Drawing.Imaging.ImageFormat> classe.  
  
 La conversion de type plus courante est vers et à partir d’un type de chaîne. L’implémentation par défaut appelle la <xref:System.Object.ToString%2A> méthode de l’objet si l’objet est valide et si le type de destination est `string`. Si cette méthode ne peut pas convertir l’objet spécifié pour le type de destination spécifié, elle lève une <xref:System.NotSupportedException> exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationType" /> a la valeur <see langword="null." />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetStandardValues">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.TypeConverter/StandardValuesCollection GetStandardValues(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetStandardValues (context As ITypeDescriptorContext) As TypeConverter.StandardValuesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ComponentModel::TypeConverter::StandardValuesCollection ^ GetStandardValues(System::ComponentModel::ITypeDescriptorContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter+StandardValuesCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
        <summary>Obtient une collection qui contient un ensemble de valeurs standard pour le type de données pour lequel ce validateur a été conçu. Retourne <see langword="null" /> si le type de données ne prend pas en charge un ensemble de valeurs standard.</summary>
        <returns>Collection qui contient un ensemble standard de valeurs valides ou <see langword="null" />. L'implémentation par défaut retourne toujours <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStandardValuesSupported">
      <MemberSignature Language="C#" Value="public override bool GetStandardValuesSupported (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetStandardValuesSupported(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetStandardValuesSupported (context As ITypeDescriptorContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool GetStandardValuesSupported(System::ComponentModel::ITypeDescriptorContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">Descripteur de type par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
        <summary>Indique si cet objet prend en charge un jeu standard de valeurs qui peuvent être sélectionnées dans une liste.</summary>
        <returns>Cette méthode retourne <see langword="true" /> si la méthode <see cref="Overload:System.Drawing.ImageFormatConverter.GetStandardValues" /> doit être appelée pour trouver un ensemble de valeurs courant pris en charge par l'objet.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>