<Type Name="BufferedGraphics" FullName="System.Drawing.BufferedGraphics">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d81edbe985ef55b5b69b4aa7ea69e5b2ea525423" />
    <Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="12/05/2018" />
    <Meta Name="ms.locfileid" Value="52908488" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphics : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphics extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphics&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphics sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphics = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fournit une mémoire tampon de graphiques pour la double mise en mémoire tampon.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.BufferedGraphics> classe vous permet d’implémenter le mécanisme de double tampon personnalisé pour vos graphiques. Il fournit un wrapper pour une mémoire tampon de graphiques, ainsi que les méthodes que vous pouvez utiliser pour écrire dans la mémoire tampon et afficher son contenu sur un périphérique de sortie.  
  
 Les graphiques qui utilisent le mécanisme de double tampon peuvent réduire ou éliminer le scintillement provoqué par le rafraîchissement du dessin une surface d’affichage. Lorsque vous utilisez la double mise en tampon, graphiques mis à jour sont tout d’abord dessinés dans une mémoire tampon en mémoire, et le contenu de cette mémoire tampon est ensuite rapidement écrit dans tout ou partie de la surface affichée. En général, cette substitution relativement brève des graphiques affichés réduit ou élimine le scintillement qui se produit parfois lorsque le graphique est mis à jour.  
  
> [!NOTE]
>  La façon la plus simple d’utiliser la double mise en tampon consiste à définir le <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> contrôler l’indicateur de style sur un contrôle en utilisant le <xref:System.Windows.Forms.Control.SetStyle%2A> (méthode). Définition de la <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> indicateur pour un contrôle redirige toute la peinture du contrôle via une mémoire tampon de graphiques par défaut, sans requérir de code supplémentaire. Cet indicateur est défini `true` par défaut.  
  
 Le <xref:System.Drawing.BufferedGraphics> classe n’a aucun constructeur public et doit être créé par le <xref:System.Drawing.BufferedGraphicsContext> pour un domaine d’application en utilisant son <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> (méthode). Vous pouvez récupérer le <xref:System.Drawing.BufferedGraphicsContext> pour le domaine d’application actuel à partir de la méthode statique <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> propriété.  
  
 Le <xref:System.Drawing.BufferedGraphics.Graphics%2A> propriété peut être utilisée pour le dessin de la mémoire tampon de graphiques. Cette propriété fournit l’accès à la <xref:System.Drawing.Graphics> objet qui dessine dans la mémoire tampon de graphiques allouée à cet <xref:System.Drawing.BufferedGraphics> objet.  
  
 Le <xref:System.Drawing.BufferedGraphics.Render%2A> méthode sans argument dessine le contenu de la carte graphique de mémoire tampon vers la surface spécifiée lorsque la mémoire tampon a été allouée. Autres surcharges de la <xref:System.Drawing.BufferedGraphics.Render%2A> méthode permettent de spécifier un <xref:System.Drawing.Graphics> objet ou un <xref:System.IntPtr> objet qui pointe vers un contexte de périphérique dans lequel dessiner le contenu de la mémoire tampon de graphiques.  
  
 Pour plus d’informations sur le dessin de double tampon de graphiques, consultez [Double graphiques mis en mémoire tampon](~/docs/framework/winforms/advanced/double-buffered-graphics.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Drawing.BufferedGraphics> objet pour dessiner des graphiques à l’aide de plusieurs types d’implémentations de mise en mémoire tampon. En cliquant sur le formulaire ou démarre et arrête une minuterie qui provoque des dessins mises à jour. Les mises à jour de dessin permettent d’observer l’effet de double tampon. Clic droit sur les cycles de formulaire via les modes de dessins suivants :  
  
-   Dessiner directement à la <xref:System.Windows.Forms.Control.Handle%2A> pour un <xref:System.Windows.Forms.Form>.  
  
-   Dessiner en substituant la <xref:System.Windows.Forms.Form.OnPaint%2A> à l’aide de la méthode le <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> contrôler le style.  
  
-   Dessiner en substituant la <xref:System.Windows.Forms.Form.OnPaint%2A> méthode pour la méthode de formulaire sans utiliser le <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> contrôler le style.  
  
 Dans chaque mode, le texte dessiné identifie le mode actif et décrit le comportement qui se produit lorsque chaque bouton de la souris est enfoncé.  
  
 [!code-cpp[BufferedGraphicsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferedGraphicsExample/CPP/bufferingtest.cpp#1)]
 [!code-csharp[BufferedGraphicsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferedGraphicsExample/CS/bufferingtest.cs#1)]
 [!code-vb[BufferedGraphicsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferedGraphicsExample/VB/bufferingtest.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>La classe <see cref="T:System.Drawing.BufferedGraphics" /> n'est pas thread-safe. Lors de l’accès à une mémoire tampon de graphiques à partir de threads séparés, il est important d’utiliser un mécanisme de contrôle d’accès de thread pour éviter les conflits.</threadsafe>
    <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par l'objet <see cref="T:System.Drawing.BufferedGraphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez <xref:System.Drawing.BufferedGraphics.Dispose%2A> lorsque vous avez terminé à l’aide de la <xref:System.Drawing.BufferedGraphics> objet. Le <xref:System.Drawing.BufferedGraphics.Dispose%2A> méthode laisse le <xref:System.Drawing.BufferedGraphics> objet dans un état inutilisable. Après avoir appelé <xref:System.Drawing.BufferedGraphics.Dispose%2A>, vous devez libérer toutes les références à la <xref:System.Drawing.BufferedGraphics> pour que le garbage collector puisse récupérer la mémoire de l’objet qui le <xref:System.Drawing.BufferedGraphics> occupée. Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Appelez toujours <xref:System.Drawing.BufferedGraphics.Dispose%2A> avant de libérer votre dernière référence à la <xref:System.Drawing.BufferedGraphics> objet. Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <xref:System.Drawing.BufferedGraphics> de l'objet `Finalize`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Autorise un objet à tenter de libérer des ressources et à exécuter d'autres opérations de nettoyage avant qu'il ne soit récupéré par une opération garbage collection.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphics.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Graphics : System.Drawing.Graphics" Usage="System.Drawing.BufferedGraphics.Graphics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Drawing.Graphics" /> qui est dirigé vers la mémoire tampon de graphiques.</summary>
        <value>Objet <see cref="T:System.Drawing.Graphics" /> qui est dirigé vers la mémoire tampon de graphiques.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété fournit un <xref:System.Drawing.Graphics> objet qui dessine dans la mémoire tampon de graphiques allouée à cet <xref:System.Drawing.BufferedGraphics> objet.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Render">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit le contenu de la mémoire tampon de graphiques.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render();" />
      <MemberSignature Language="F#" Value="member this.Render : unit -&gt; unit" Usage="bufferedGraphics.Render " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit le contenu de la mémoire tampon de graphiques dans l'appareil par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode écrit le contenu de la mémoire tampon de graphiques dans le périphérique spécifié en appelant le <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> méthode de la <xref:System.Drawing.BufferedGraphicsContext> utilisé pour créer ce <xref:System.Drawing.BufferedGraphics> objet.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Drawing.Graphics target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Drawing.Graphics target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (target As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(System::Drawing::Graphics ^ target);" />
      <MemberSignature Language="F#" Value="member this.Render : System.Drawing.Graphics -&gt; unit" Usage="bufferedGraphics.Render target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="target">Objet <see cref="T:System.Drawing.Graphics" /> dans lequel écrire le contenu de la mémoire tampon de graphiques.</param>
        <summary>Écrit le contenu de la mémoire tampon de graphiques dans l'objet <see cref="T:System.Drawing.Graphics" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode écrit le contenu de la mémoire tampon de graphiques spécifié <xref:System.Drawing.Graphics> objet.  
  
   
  
## Examples  
 L’exemple de code suivant montre le rendu du contenu de la mémoire tampon de graphiques à une certaine <xref:System.Drawing.Graphics> objet. Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Drawing.BufferedGraphics> classe.  
  
 [!code-cpp[BufferingExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#5)]
 [!code-csharp[BufferingExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#5)]
 [!code-vb[BufferingExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (IntPtr targetDC);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(native int targetDC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (targetDC As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(IntPtr targetDC);" />
      <MemberSignature Language="F#" Value="member this.Render : nativeint -&gt; unit" Usage="bufferedGraphics.Render targetDC" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="targetDC">
          <see cref="T:System.IntPtr" /> qui pointe vers le contexte de périphérique dans lequel écrire le contenu de la mémoire tampon de graphiques.</param>
        <summary>Écrit le contenu de la mémoire tampon de graphiques dans le contexte de périphérique associé au handle <see cref="T:System.IntPtr" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode écrit le contenu de la mémoire tampon de graphiques dans le contexte de périphérique associé au <xref:System.IntPtr> gérer.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment rendre le contenu de la mémoire tampon de graphiques `grafx` à un contexte de périphérique spécifié. Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Drawing.BufferedGraphics> classe.  
  
 [!code-cpp[BufferingExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#6)]
 [!code-csharp[BufferingExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#6)]
 [!code-vb[BufferingExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour accéder au code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.IntPtr" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Graphiques mis deux fois en mémoire tampon</related>
      </Docs>
    </Member>
  </Members>
</Type>