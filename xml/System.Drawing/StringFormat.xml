<Type Name="StringFormat" FullName="System.Drawing.StringFormat">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4061f1bd21979a83de32da6fb45e0f2b72b5bffe" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410263" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class StringFormat : MarshalByRefObject, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StringFormat extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.StringFormat" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StringFormat&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringFormat sealed : MarshalByRefObject, ICloneable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Encapsule les informations relatives à la mise en page du texte (telles que l’alignement, l’orientation et les taquets de tabulation), les manipulations d’affichage (telles que l’insertion de points de sélection et la substitution des formes nationales de chiffres) et les fonctionnalités OpenType. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nombreux formats communs sont fournis via le <xref:System.Drawing.StringFormatFlags> énumération. <xref:System.Drawing.StringFormat> les objets peuvent être modifiés.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise un nouvel objet <see cref="T:System.Drawing.StringFormat" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringFormat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringFormat();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise un nouvel objet <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant indique les valeurs de propriétés initiales d'une instance de la classe <xref:System.Drawing.StringFormat>.  
  
|Property|Valeur initiale|  
|--------------|-------------------|  
|FormatFlags|0 (aucun indicateur est défini)|  
|<xref:System.Drawing.StringFormat.HotkeyPrefix%2A>|<xref:System.Drawing.Text.HotkeyPrefix.None>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringFormat (System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.#ctor(System.Drawing.StringFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (format As StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringFormat(System::Drawing::StringFormat ^ format);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="format">Objet <see cref="T:System.Drawing.StringFormat" /> à partir duquel le nouvel objet <see cref="T:System.Drawing.StringFormat" /> doit être initialisé.</param>
        <summary>Initialise un nouvel objet <see cref="T:System.Drawing.StringFormat" /> à partir de l'objet <see cref="T:System.Drawing.StringFormat" /> existant spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre les membres suivants :  
  
-   <xref:System.Drawing.Rectangle.%23ctor%2A>  
  
-   <xref:System.Drawing.StringFormat.%23ctor%2A>  
  
-   <xref:System.Drawing.StringFormat.%23ctor%2A>  
  
-   <xref:System.Drawing.StringFormat.Alignment%2A>  
  
-   <xref:System.Drawing.StringFormat.LineAlignment%2A>  
  
-   <xref:System.Drawing.StringAlignment>  
  
-   <xref:System.Drawing.StringFormatFlags>  
  
 Cet exemple est conçu pour être utilisé avec Windows Forms. Collez le code dans un formulaire et appelez le `ShowLineAndAlignment` méthode lors du traitement du formulaire <xref:System.Windows.Forms.Control.Paint> événement, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.Misc2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Misc2/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Misc2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc2/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Misc2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringFormat (System.Drawing.StringFormatFlags options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.StringFormatFlags options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.#ctor(System.Drawing.StringFormatFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As StringFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringFormat(System::Drawing::StringFormatFlags options);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Drawing.StringFormatFlags" />
      </Parameters>
      <Docs>
        <param name="options">Énumération <see cref="T:System.Drawing.StringFormatFlags" /> pour le nouvel objet <see cref="T:System.Drawing.StringFormat" />.</param>
        <summary>Initialise un nouvel objet <see cref="T:System.Drawing.StringFormat" /> avec l'énumération <see cref="T:System.Drawing.StringFormatFlags" /> spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre les membres suivants :  
  
-   <xref:System.Drawing.Rectangle.%23ctor%2A>  
  
-   <xref:System.Drawing.StringFormat.%23ctor%2A>  
  
-   <xref:System.Drawing.StringFormat.%23ctor%2A>  
  
-   <xref:System.Drawing.StringFormat.Alignment%2A>  
  
-   <xref:System.Drawing.StringFormat.LineAlignment%2A>  
  
-   <xref:System.Drawing.StringAlignment>  
  
-   <xref:System.Drawing.StringFormatFlags>  
  
 Cet exemple est conçu pour être utilisé avec Windows Forms. Collez le code dans un formulaire et appelez le `ShowLineAndAlignment` méthode lors du traitement du formulaire <xref:System.Windows.Forms.Control.Paint> événement, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.Misc2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Misc2/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Misc2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc2/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Misc2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringFormat (System.Drawing.StringFormatFlags options, int language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.StringFormatFlags options, int32 language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.#ctor(System.Drawing.StringFormatFlags,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As StringFormatFlags, language As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringFormat(System::Drawing::StringFormatFlags options, int language);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Drawing.StringFormatFlags" />
        <Parameter Name="language" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="options">Énumération <see cref="T:System.Drawing.StringFormatFlags" /> pour le nouvel objet <see cref="T:System.Drawing.StringFormat" />.</param>
        <param name="language">Valeur qui indique la langue du texte.</param>
        <summary>Initialise un nouvel objet <see cref="T:System.Drawing.StringFormat" /> avec l'énumération <see cref="T:System.Drawing.StringFormatFlags" /> et la langue spécifiées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Drawing.StringAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.StringFormat.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As StringAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::StringAlignment Alignment { System::Drawing::StringAlignment get(); void set(System::Drawing::StringAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.StringAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'alignement horizontal de la chaîne.</summary>
        <value>Énumération <see cref="T:System.Drawing.StringAlignment" /> qui spécifie l'alignement horizontal de la chaîne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez <xref:System.Drawing.StringFormat.LineAlignment%2A> pour spécifier l’alignement vertical de la chaîne.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.StringFormat.LineAlignment%2A> et <xref:System.Drawing.StringFormat.Alignment%2A> propriétés et le <xref:System.Drawing.StringAlignment> énumération pour aligner les chaînes. Cet exemple est conçu pour être utilisé avec Windows Forms. Collez le code dans un formulaire et appelez le `ShowLineAndAlignment` méthode lors du traitement du formulaire <xref:System.Windows.Forms.Control.Paint> événement, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.Misc2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Misc2/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Misc2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc2/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Misc2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une copie exacte de cet objet <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Objet <see cref="T:System.Drawing.StringFormat" /> créé par cette méthode.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DigitSubstitutionLanguage">
      <MemberSignature Language="C#" Value="public int DigitSubstitutionLanguage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DigitSubstitutionLanguage" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.StringFormat.DigitSubstitutionLanguage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DigitSubstitutionLanguage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DigitSubstitutionLanguage { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la langue utilisée quand les chiffres locaux sont remplacés par les chiffres occidentaux.</summary>
        <value>Identificateur de langue NLS (National Language Support) qui identifie la langue utilisée quand les chiffres locaux sont remplacés par les chiffres occidentaux. Vous pouvez passer la propriété <see cref="P:System.Globalization.CultureInfo.LCID" /> d'un objet <see cref="T:System.Globalization.CultureInfo" /> en tant qu'identificateur de langue NLS. Par exemple, supposons que vous créiez un objet <see cref="T:System.Globalization.CultureInfo" /> en passant la chaîne "ar-EG" à un constructeur <see cref="T:System.Globalization.CultureInfo" />. Si vous passez la propriété <see cref="P:System.Globalization.CultureInfo.LCID" /> de cet objet <see cref="T:System.Globalization.CultureInfo" /> ainsi que <see cref="F:System.Drawing.StringDigitSubstitute.Traditional" /> à la méthode <see cref="M:System.Drawing.StringFormat.SetDigitSubstitution(System.Int32,System.Drawing.StringDigitSubstitute)" />, les chiffres de type arabe-hindi remplacent les chiffres occidentaux au moment de l'affichage.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DigitSubstitutionMethod">
      <MemberSignature Language="C#" Value="public System.Drawing.StringDigitSubstitute DigitSubstitutionMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringDigitSubstitute DigitSubstitutionMethod" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.StringFormat.DigitSubstitutionMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DigitSubstitutionMethod As StringDigitSubstitute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::StringDigitSubstitute DigitSubstitutionMethod { System::Drawing::StringDigitSubstitute get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.StringDigitSubstitute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la méthode à utiliser pour la substitution de chiffres.</summary>
        <value>Valeur d'énumération <see cref="T:System.Drawing.StringDigitSubstitute" /> qui spécifie comment substituer des caractères dans une chaîne qui ne peuvent être affichés parce qu'ils ne sont pas pris en charge par la police en cours.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par cet objet <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appel de <xref:System.Drawing.StringFormat.Dispose%2A> autorise les ressources utilisées par ce <xref:System.Drawing.StringFormat> objet à être réaffectés à d’autres fins.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~StringFormat ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!StringFormat ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Autorise un objet à tenter de libérer des ressources et à exécuter d'autres opérations de nettoyage avant qu'il ne soit récupéré par une opération garbage collection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatFlags">
      <MemberSignature Language="C#" Value="public System.Drawing.StringFormatFlags FormatFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringFormatFlags FormatFlags" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.StringFormat.FormatFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatFlags As StringFormatFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::StringFormatFlags FormatFlags { System::Drawing::StringFormatFlags get(); void set(System::Drawing::StringFormatFlags value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.StringFormatFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une énumération <see cref="T:System.Drawing.StringFormatFlags" /> qui contient des informations relatives à la mise en forme.</summary>
        <value>Énumération <see cref="T:System.Drawing.StringFormatFlags" /> qui contient des informations relatives à la mise en forme.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericDefault">
      <MemberSignature Language="C#" Value="public static System.Drawing.StringFormat GenericDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.StringFormat GenericDefault" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.StringFormat.GenericDefault" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property GenericDefault As StringFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::StringFormat ^ GenericDefault { System::Drawing::StringFormat ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.StringFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Drawing.StringFormat" /> générique par défaut.</summary>
        <value>Objet <see cref="T:System.Drawing.StringFormat" /> générique par défaut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant montre les valeurs initiales des propriétés pour une instance par défaut générique de la <xref:System.Drawing.StringFormat> classe.  
  
|Property|Valeur initiale|  
|--------------|-------------------|  
|<xref:System.Drawing.StringFormat.FormatFlags%2A>|0|  
|<xref:System.Drawing.StringFormat.Alignment%2A>|<xref:System.Drawing.StringAlignment.Near>|  
|<xref:System.Drawing.StringFormat.LineAlignment%2A>|<xref:System.Drawing.StringAlignment.Near>|  
|<xref:System.Drawing.StringFormat.Trimming%2A>|<xref:System.Drawing.StringTrimming.Character>|  
|<xref:System.Drawing.StringFormat.HotkeyPrefix%2A>|<xref:System.Drawing.Text.HotkeyPrefix.None>|  
|<xref:System.Drawing.StringFormat.DigitSubstitutionMethod%2A>|<xref:System.Drawing.StringDigitSubstitute.User>|  
|<xref:System.Drawing.StringFormat.DigitSubstitutionLanguage%2A>|0|  
  
 Si vous apportez des modifications à la <xref:System.Drawing.StringFormat> objet retourné à partir de la <xref:System.Drawing.StringFormat.GenericDefault%2A> propriété, ces modifications sont conservées et les futurs appels à la <xref:System.Drawing.StringFormat.GenericDefault%2A> propriété reflète ces modifications.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericTypographic">
      <MemberSignature Language="C#" Value="public static System.Drawing.StringFormat GenericTypographic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.StringFormat GenericTypographic" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.StringFormat.GenericTypographic" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property GenericTypographic As StringFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::StringFormat ^ GenericTypographic { System::Drawing::StringFormat ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.StringFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Drawing.StringFormat" /> typographique générique.</summary>
        <value>Objet <see cref="T:System.Drawing.StringFormat" /> typographique générique.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant montre les valeurs initiales des propriétés d’une instance typographique générique de la <xref:System.Drawing.StringFormat> classe.  
  
|Property|Valeur initiale|  
|--------------|-------------------|  
|<xref:System.Drawing.StringFormat.FormatFlags%2A>|24580 (<xref:System.Drawing.StringFormatFlags.NoClip>, <xref:System.Drawing.StringFormatFlags.FitBlackBox> et <xref:System.Drawing.StringFormatFlags.LineLimit>.)|  
|<xref:System.Drawing.StringFormat.Alignment%2A>|<xref:System.Drawing.StringAlignment.Near>|  
|<xref:System.Drawing.StringFormat.LineAlignment%2A>|<xref:System.Drawing.StringAlignment.Near>|  
|<xref:System.Drawing.StringFormat.Trimming%2A>|<xref:System.Drawing.StringTrimming.None>|  
|<xref:System.Drawing.StringFormat.HotkeyPrefix%2A>|<xref:System.Drawing.Text.HotkeyPrefix.None>|  
|<xref:System.Drawing.StringFormat.DigitSubstitutionMethod%2A>|<xref:System.Drawing.StringDigitSubstitute.User>|  
|<xref:System.Drawing.StringFormat.DigitSubstitutionLanguage%2A>|0|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTabStops">
      <MemberSignature Language="C#" Value="public float[] GetTabStops (out float firstTabOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32[] GetTabStops([out] float32&amp; firstTabOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.GetTabStops(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTabStops (ByRef firstTabOffset As Single) As Single()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;float&gt; ^ GetTabStops([Runtime::InteropServices::Out] float % firstTabOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstTabOffset" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="firstTabOffset">Nombre d'espaces entre le début d'une ligne de texte et le premier taquet de tabulation.</param>
        <summary>Obtient les taquets de tabulation de cet objet <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Tableau de distances (en nombre d'espaces) entre des taquets de tabulation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Définit les taquets de tabulation de la <xref:System.Drawing.StringFormat>.  
  
-   Dessine la chaîne et le rectangle de présentation. Notez que la chaîne contient des onglets. Les paramètres de tabulation de la <xref:System.Drawing.StringFormat> spécifient les offsets du texte avec onglets.  
  
-   Obtient les taquets de tabulation et utilise ou examine les valeurs.  
  
 [!code-cpp[System.Drawing.ClassicStringFormatExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicStringFormatExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicStringFormatExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HotkeyPrefix">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.HotkeyPrefix HotkeyPrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.HotkeyPrefix HotkeyPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.StringFormat.HotkeyPrefix" />
      <MemberSignature Language="VB.NET" Value="Public Property HotkeyPrefix As HotkeyPrefix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Text::HotkeyPrefix HotkeyPrefix { System::Drawing::Text::HotkeyPrefix get(); void set(System::Drawing::Text::HotkeyPrefix value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.HotkeyPrefix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet <see cref="T:System.Drawing.Text.HotkeyPrefix" /> pour cet objet <see cref="T:System.Drawing.StringFormat" />.</summary>
        <value>Objet <see cref="T:System.Drawing.Text.HotkeyPrefix" /> pour l'objet <see cref="T:System.Drawing.StringFormat" /> ; la valeur par défaut est <see cref="F:System.Drawing.Text.HotkeyPrefix.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans une interface utilisateur graphique, une touche d’accès rapide est la lettre soulignée dans un mot (généralement combiné avec une autre clé, telles que la touche Alt) que vous pouvez appuyer sur le clavier pour activer la fonctionnalité que le mot représente.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment définir un raccourci clavier à l’aide du <xref:System.Drawing.StringFormat.HotkeyPrefix%2A> propriété. Il montre également comment utiliser le <xref:System.Drawing.SystemBrushes.FromSystemColor%2A> (méthode). Pour exécuter cet exemple, collez le code dans un formulaire, gérer du formulaire <xref:System.Windows.Forms.Control.Paint> événement et appelez la méthode suivante, en passant e comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.MiscExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.MiscExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.MiscExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineAlignment">
      <MemberSignature Language="C#" Value="public System.Drawing.StringAlignment LineAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringAlignment LineAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.StringFormat.LineAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property LineAlignment As StringAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::StringAlignment LineAlignment { System::Drawing::StringAlignment get(); void set(System::Drawing::StringAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.StringAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'alignement vertical de la chaîne.</summary>
        <value>Énumération <see cref="T:System.Drawing.StringAlignment" /> qui représente l'alignement vertical de la ligne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez <xref:System.Drawing.StringFormat.Alignment%2A> pour spécifier l’alignement horizontal de la chaîne.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.StringFormat.LineAlignment%2A> et <xref:System.Drawing.StringFormat.Alignment%2A> propriétés et le <xref:System.Drawing.StringAlignment> énumération pour aligner les chaînes. Cet exemple est conçu pour être utilisé avec Windows Forms. Collez le code dans un formulaire et appelez le `ShowLineAndAlignment` méthode lors du traitement du formulaire <xref:System.Windows.Forms.Control.Paint> événement, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.Misc2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Misc2/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Misc2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc2/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Misc2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDigitSubstitution">
      <MemberSignature Language="C#" Value="public void SetDigitSubstitution (int language, System.Drawing.StringDigitSubstitute substitute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDigitSubstitution(int32 language, valuetype System.Drawing.StringDigitSubstitute substitute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.SetDigitSubstitution(System.Int32,System.Drawing.StringDigitSubstitute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDigitSubstitution (language As Integer, substitute As StringDigitSubstitute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDigitSubstitution(int language, System::Drawing::StringDigitSubstitute substitute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.Int32" />
        <Parameter Name="substitute" Type="System.Drawing.StringDigitSubstitute" />
      </Parameters>
      <Docs>
        <param name="language">Identificateur de langue NLS (National Language Support) qui identifie la langue utilisée quand les chiffres locaux sont remplacés par les chiffres occidentaux. Vous pouvez passer la propriété <see cref="P:System.Globalization.CultureInfo.LCID" /> d'un objet <see cref="T:System.Globalization.CultureInfo" /> en tant qu'identificateur de langue NLS. Par exemple, supposons que vous créiez un objet <see cref="T:System.Globalization.CultureInfo" /> en passant la chaîne "ar-EG" à un constructeur <see cref="T:System.Globalization.CultureInfo" />. Si vous passez la propriété <see cref="P:System.Globalization.CultureInfo.LCID" /> de cet objet <see cref="T:System.Globalization.CultureInfo" /> ainsi que <see cref="F:System.Drawing.StringDigitSubstitute.Traditional" /> à la méthode <see cref="M:System.Drawing.StringFormat.SetDigitSubstitution(System.Int32,System.Drawing.StringDigitSubstitute)" />, les chiffres de type arabe-hindi remplacent les chiffres occidentaux au moment de l'affichage.</param>
        <param name="substitute">Élément de l'énumération <see cref="T:System.Drawing.StringDigitSubstitute" /> qui spécifie comment les chiffres sont affichés.</param>
        <summary>Spécifie la langue et la méthode à utiliser lorsque les chiffres locaux sont remplacés par les chiffres occidentaux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Jeux, pour le <xref:System.Drawing.StringFormat>, la langue à utiliser et la méthode de substitution à utiliser.  
  
-   Dessine la chaîne.  
  
-   Répète les deux étapes précédentes pour deux langues différentes (arabe et thaï).  
  
 La méthode de substitution nationale et la méthode de substitution traditionnelle sont illustrées pour chacune de ces deux langues. La méthode nationale affiche les chiffres en fonction de la langue nationale officielle des paramètres régionaux de l’utilisateur. La méthode traditionnelle affiche les chiffres en fonction de script natif de l’utilisateur ou le langage, ce qui peut être différente de la langue nationale officielle.  
  
 [!code-cpp[System.Drawing.ClassicStringFormatExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicStringFormatExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicStringFormatExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMeasurableCharacterRanges">
      <MemberSignature Language="C#" Value="public void SetMeasurableCharacterRanges (System.Drawing.CharacterRange[] ranges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMeasurableCharacterRanges(valuetype System.Drawing.CharacterRange[] ranges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.SetMeasurableCharacterRanges(System.Drawing.CharacterRange[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetMeasurableCharacterRanges (ranges As CharacterRange())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetMeasurableCharacterRanges(cli::array &lt;System::Drawing::CharacterRange&gt; ^ ranges);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.Drawing.CharacterRange[]" />
      </Parameters>
      <Docs>
        <param name="ranges">Tableau de structures <see cref="T:System.Drawing.CharacterRange" /> qui spécifie les plages de caractères mesurées par un appel à la méthode <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />.</param>
        <summary>Spécifie un tableau de structures <see cref="T:System.Drawing.CharacterRange" /> qui représentent les plages de caractères mesurées par un appel à la méthode <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définition plus de 32 plages de caractères n’est pas autorisée et entraîne une <xref:System.OverflowException?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Définit les plages de caractères de la <xref:System.Drawing.StringFormat>.  
  
-   Mesure les plages de caractères pour un rectangle de chaîne et la disposition donné.  
  
-   Dessine le rectangle de chaîne et la disposition.  
  
-   Peint les régions. Chaque <xref:System.Drawing.Region> spécifie une zone occupée par une plage de caractères. Les valeurs dans les régions sont définies lorsque les plages de caractères sont mesurées par le <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> (méthode).  
  
-   Répète les quatre premières étapes, mais inclut des espaces de fin dans la mesure de chaque plage de caractères.  
  
-   Efface les indicateurs de format de la <xref:System.Drawing.StringFormat> afin que les espaces ne sont pas inclus dans la mesure de chaque plage de caractères.  
  
-   Répète les quatre premières étapes, mais utilise un rectangle de mise en page différente juste pour démontrer que le rectangle de disposition affecte les mesures des plages de caractères. La taille de la police affecte également la mesure.  
  
 [!code-cpp[System.Drawing.ClassicStringFormatExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicStringFormatExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicStringFormatExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Plus de 32 plages de caractères sont définies.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetTabStops">
      <MemberSignature Language="C#" Value="public void SetTabStops (float firstTabOffset, float[] tabStops);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTabStops(float32 firstTabOffset, float32[] tabStops) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.SetTabStops(System.Single,System.Single[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetTabStops (firstTabOffset As Single, tabStops As Single())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetTabStops(float firstTabOffset, cli::array &lt;float&gt; ^ tabStops);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstTabOffset" Type="System.Single" />
        <Parameter Name="tabStops" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="firstTabOffset">Nombre d'espaces entre le début d'une ligne de texte et le premier taquet de tabulation.</param>
        <param name="tabStops">Tableau des distances entre les taquets de tabulation dans les unités spécifiées par la propriété <see cref="P:System.Drawing.Graphics.PageUnit" />.</param>
        <summary>Définit des taquets de tabulation pour cet objet <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque offset de taquet de tabulation dans le `tabStops` tableau, à l’exception du premier, est relatif au précédent. Le premier taquet de tabulation de décalage est relatif à la position d’offset initiale spécifiée par `firstTabOffset`. Par exemple, si la position d’offset initiale est 8 et le premier taquet de tabulation de décalage est 50, le premier taquet de tabulation est à la position 58. Si la position d’offset initiale est zéro, le premier taquet de tabulation de décalage est par rapport à la position 0, l’origine de la chaîne.  
  
   
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Définit les taquets de tabulation de la <xref:System.Drawing.StringFormat>.  
  
-   Dessine la chaîne et le rectangle de présentation. Notez que la chaîne contient des onglets. Les paramètres de tabulation de la <xref:System.Drawing.StringFormat> spécifient les offsets du texte avec onglets.  
  
-   Obtient les taquets de tabulation et utilise ou examine les valeurs.  
  
 [!code-cpp[System.Drawing.ClassicStringFormatExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicStringFormatExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicStringFormatExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.StringFormat.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit cet objet <see cref="T:System.Drawing.StringFormat" /> en chaîne explicite.</summary>
        <returns>Représentation sous forme de chaîne de cet objet <see cref="T:System.Drawing.StringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seule la valeur de la <xref:System.Drawing.StringFormat.FormatFlags%2A> propriété est convertie.  
  
   
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Convertit un <xref:System.Drawing.StringFormat> objet en une chaîne.  
  
-   Dessine la chaîne.  
  
-   Modifie certaines propriétés dans le <xref:System.Drawing.StringFormat> objet.  
  
-   Dessine la chaîne. La chaîne sera différente, car les propriétés de la <xref:System.Drawing.StringFormat> objet ont été modifiés.  
  
 [!code-cpp[System.Drawing.ClassicStringFormatExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicStringFormatExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicStringFormatExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicStringFormatExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trimming">
      <MemberSignature Language="C#" Value="public System.Drawing.StringTrimming Trimming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringTrimming Trimming" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.StringFormat.Trimming" />
      <MemberSignature Language="VB.NET" Value="Public Property Trimming As StringTrimming" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::StringTrimming Trimming { System::Drawing::StringTrimming get(); void set(System::Drawing::StringTrimming value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.StringTrimming</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'énumération <see cref="T:System.Drawing.StringTrimming" /> pour cet objet <see cref="T:System.Drawing.StringFormat" />.</summary>
        <value>Énumération <see cref="T:System.Drawing.StringTrimming" /> qui indique comment le texte dessiné avec cet objet <see cref="T:System.Drawing.StringFormat" /> est rogné lorsqu'il dépasse les bords du rectangle de disposition.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment définir la <xref:System.Drawing.StringFormat.Trimming%2A> propriété et comment utiliser le <xref:System.Drawing.StringTrimming> énumération. Cet exemple est conçu pour être utilisé avec un Windows Form. Collez ce code dans un formulaire et appelez le `ShowStringTrimming` méthode lors du traitement du formulaire <xref:System.Windows.Forms.Control.Paint> événement, en passant e comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.Misc2#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Misc2/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Misc2#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc2/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Misc2#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc2/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>