<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7ad24c6e887f8ad28fea8fa06cc8f66b048a5402" /><Meta Name="ms.sourcegitcommit" Value="d8bd5d494445ce3fcad1321267cb87548d23a45b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/15/2018" /><Meta Name="ms.locfileid" Value="53450189" /></Metadata><TypeSignature Language="C#" Value="public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Graphics extends System.MarshalByRefObject implements class System.Drawing.IDeviceContext, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Graphics&#xA;Inherits MarshalByRefObject&#xA;Implements IDeviceContext, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Graphics sealed : MarshalByRefObject, IDisposable, System::Drawing::IDeviceContext" />
  <TypeSignature Language="F#" Value="type Graphics = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable&#xA;    interface IDeviceContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Encapsule une surface de dessin GDI+. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics> classe fournit des méthodes pour dessiner des objets sur le périphérique d’affichage. Un <xref:System.Drawing.Graphics> est associé à un contexte de périphérique spécifique.  
  
 Vous pouvez obtenir un <xref:System.Drawing.Graphics> objet en appelant le <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=nameWithType> méthode sur un objet qui hérite de <xref:System.Windows.Forms.Control?displayProperty=nameWithType>, ou en gérant d’un contrôle <xref:System.Windows.Forms.Control.Paint?displayProperty=nameWithType> événement et l’accès à la <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> propriété de la <xref:System.Windows.Forms.PaintEventArgs?displayProperty=nameWithType> classe. Vous pouvez également créer un <xref:System.Drawing.Graphics> objet à partir d’une image à l’aide de la <xref:System.Drawing.Graphics.FromImage%2A> (méthode). Pour plus d’informations sur la création d’un <xref:System.Drawing.Graphics> d’objets, consultez [Comment : Créer des objets graphiques pour le dessin](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md).  
  
 Vous pouvez dessiner différentes formes et lignes en utilisant un <xref:System.Drawing.Graphics> objet. Pour plus d’informations sur la façon de dessiner des lignes et des formes, consultez spécifiques `Draw` *GraphicalElement* méthode pour la ligne ou de la forme à dessiner. Ces méthodes incluent <xref:System.Drawing.Graphics.DrawLine%2A>, <xref:System.Drawing.Graphics.DrawArc%2A>, <xref:System.Drawing.Graphics.DrawClosedCurve%2A>, <xref:System.Drawing.Graphics.DrawPolygon%2A>, et <xref:System.Drawing.Graphics.DrawRectangle%2A>. Pour plus d’informations sur la façon de dessiner des lignes et des formes, consultez [à l’aide d’un stylet pour dessiner des lignes et des formes](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md) et [à l’aide d’un pinceau pour remplir des formes](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md).  
  
 Vous pouvez également dessiner des images et des icônes à l’aide de la <xref:System.Drawing.Graphics.DrawImage%2A> et <xref:System.Drawing.Graphics.DrawIcon%2A> méthodes, respectivement. Pour effectuer un transfert de bloc de bits des données de couleur à partir de l’écran à la surface de dessin de le <xref:System.Drawing.Graphics> d’objets, consultez <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Pour plus d’informations sur la façon de dessiner des images avec un <xref:System.Drawing.Graphics> d’objets, consultez [utilisation des Images, Bitmaps, icônes et métafichiers](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md).  
  
 En outre, vous pouvez manipuler le système de coordonnées utilisé par le <xref:System.Drawing.Graphics> objet. Pour plus d’informations sur le système de coordonnées et comment les manipuler, consultez [systèmes de coordonnées et Transformations](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md).  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite un <xref:System.Windows.Forms.PaintEventArgs> objet. Le <xref:System.Windows.Forms.PaintEventArgs> objet est nommé `e` et est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG. Le fichier est nommé SampImag.jpg et se trouve dans le dossier de l’exemple.  
  
-   Crée un point sur lequel dessiner le coin supérieur gauche de l’image.  
  
-   Dessine l’image non ajustée à l’écran en utilisant un <xref:System.Drawing.Graphics> objet.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">Comment : créer des objets graphiques pour le dessin</related>
    <related type="Article" href="https://msdn.microsoft.com/library/eb0f6d6f-9e52-4167-9592-ff4b82fb5869">Mise en route de la programmation graphique</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6207cad1-7a34-4bd6-bfc1-db823ca7a73e">Gestion de l'état d'un objet graphique</related>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetafileComment(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMetafileComment (data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMetafileComment(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.AddMetafileComment : byte[] -&gt; unit" Usage="graphics.AddMetafileComment data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">Tableau d'octets qui contient le commentaire.</param>
        <summary>Ajoute un commentaire au <see cref="T:System.Drawing.Imaging.Metafile" /> actuel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est valide uniquement si cette <xref:System.Drawing.Graphics> est associé un <xref:System.Drawing.Imaging.Metafile>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, ainsi que `thisForm`, le <xref:System.Windows.Forms.Form> pour l’exemple. Le code exécute les actions suivantes :  
  
-   Crée une table temporaire <xref:System.Drawing.Graphics> pour créer le métafichier et obtient un `hdc`, un handle vers son contexte de périphérique.  
  
-   Crée un métafichier en utilisant le `hdc`.  
  
-   Crée un <xref:System.Drawing.Graphics> pour afficher le métafichier à partir de la <xref:System.Drawing.Imaging.Metafile>.  
  
-   Dessine un rectangle dans le métafichier.  
  
-   Ajoute un commentaire au métafichier.  
  
-   Supprime le <xref:System.Drawing.Graphics> du métafichier qui fermeture du métafichier.  
  
-   Supprime le métafichier.  
  
-   Libère temporaire `hdc`.  
  
-   Supprime la fichier temporaire <xref:System.Drawing.Graphics>.  
  
-   Crée un deuxième métafichier à partir du fichier créé précédemment.  
  
-   Dessine le métafichier à l’écran.  
  
-   Supprime le métafichier.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginContainer">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Enregistre un conteneur graphique avec l'état actuel de ce <see cref="T:System.Drawing.Graphics" /> et ouvre et utilise un nouveau conteneur graphique.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer () As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer();" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : unit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enregistre un conteneur graphique avec l'état actuel de ce <see cref="T:System.Drawing.Graphics" /> et ouvre et utilise un nouveau conteneur graphique.</summary>
        <returns>Cette méthode retourne un <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> qui représente l'état de ce <see cref="T:System.Drawing.Graphics" /> au moment de l'appel de la méthode.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode avec le <xref:System.Drawing.Graphics.EndContainer%2A> méthode pour créer des conteneurs graphiques imbriqués. Conteneurs graphiques conservent l’état de graphiques, tels que les propriétés de rendu, de transformation et de zone de découpage.  
  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode d’un <xref:System.Drawing.Graphics>, un bloc d’informations qui conserve l’état de la <xref:System.Drawing.Graphics> est placé sur une pile. Le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode retourne un <xref:System.Drawing.Drawing2D.GraphicsContainer> qui identifie ce bloc d’informations. Lorsque vous passez l’objet d’identification pour le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), le bloc d’informations est supprimé de la pile et est utilisé pour restaurer le <xref:System.Drawing.Graphics> à l’état, il se trouvait au moment de le <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode.  
  
 Les conteneurs peuvent être imbriqués ; Autrement dit, vous pouvez appeler la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode plusieurs fois avant d’appeler le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode). Chaque fois que vous appelez le <xref:System.Drawing.Graphics.BeginContainer%2A> (méthode), un bloc d’informations est placé sur la pile, et vous recevez un <xref:System.Drawing.Drawing2D.GraphicsContainer> pour le bloc d’informations. Lorsque vous passez un de ces objets vers le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), le <xref:System.Drawing.Graphics> est retourné à l’état, il se trouvait au moment de la <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode qui a retourné cet particulier <xref:System.Drawing.Drawing2D.GraphicsContainer>. Le bloc d’informations placé sur la pile par qui <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode est supprimé de la pile, et tous les blocs d’informations placés sur cette pile après cela <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode sont également supprimés.  
  
 Les appels à la <xref:System.Drawing.Graphics.Save%2A> blocs d’informations sur place (méthode) sur la même pile d’appels à la <xref:System.Drawing.Graphics.BeginContainer%2A> (méthode). Tout comme un <xref:System.Drawing.Graphics.EndContainer%2A> appel de méthode est associée à un <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode, un <xref:System.Drawing.Graphics.Restore%2A> appel de méthode est associée à un <xref:System.Drawing.Graphics.Save%2A> appel de méthode.  
  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), tous les blocs d’informations placés sur la pile (par le <xref:System.Drawing.Graphics.Save%2A> (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode sont supprimés de la pile. De même, lorsque vous appelez le <xref:System.Drawing.Graphics.Restore%2A> (méthode), tous les blocs d’informations placés sur la pile (par le <xref:System.Drawing.Graphics.Save%2A> (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.Save%2A> méthode sont supprimés de la pile.  
  
 L’état des graphiques établi par la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode comprend les qualités de rendu de l’état des graphiques par défaut ; les modifications d’état de la qualité de rendu existant lorsque la méthode est appelée sont réinitialisées aux valeurs par défaut.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Ouvre un nouveau conteneur graphique et enregistre l’ancien conteneur.  
  
-   Convertit les coordonnées de monde dans le conteneur.  
  
-   Remplit un rectangle rouge le (traduit les coordonnées de la) nouveau conteneur.  
  
-   Ferme le nouveau conteneur et restaure le conteneur enregistré.  
  
-   Remplit un rectangle vert (pour les coordonnées non traduites) le conteneur enregistré.  
  
 Le résultat est un rectangle vert qui recouvre un rectangle rouge de la même taille.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.Rectangle dstrect, valuetype System.Drawing.Rectangle srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As Rectangle, srcrect As Rectangle, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::Rectangle dstrect, System::Drawing::Rectangle srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">Structure <see cref="T:System.Drawing.Rectangle" /> qui, associée au paramètre <paramref name="srcrect" />, spécifie une transformation d'échelle pour le conteneur.</param>
        <param name="srcrect">Structure <see cref="T:System.Drawing.Rectangle" /> qui, associée au paramètre <paramref name="dstrect" />, spécifie une transformation d'échelle pour le conteneur.</param>
        <param name="unit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure du conteneur.</param>
        <summary>Enregistre un conteneur graphique avec l'état actuel de ce <see cref="T:System.Drawing.Graphics" /> et ouvre et utilise un nouveau conteneur graphique avec la transformation d'échelle spécifiée.</summary>
        <returns>Cette méthode retourne un <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> qui représente l'état de ce <see cref="T:System.Drawing.Graphics" /> au moment de l'appel de la méthode.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode avec le <xref:System.Drawing.Graphics.EndContainer%2A> méthode pour créer des conteneurs graphiques imbriqués. Conteneurs graphiques conservent l’état de graphiques, tels que les propriétés de rendu, de transformation et de zone de découpage.  
  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode d’un <xref:System.Drawing.Graphics>, un bloc d’informations qui conserve l’état de la <xref:System.Drawing.Graphics> est placé sur une pile. Le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode retourne un <xref:System.Drawing.Drawing2D.GraphicsContainer> qui identifie ce bloc d’informations. Lorsque vous passez l’objet d’identification pour le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), le bloc d’informations est supprimé de la pile et est utilisé pour restaurer le <xref:System.Drawing.Graphics> à l’état, il se trouvait au moment de le <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode.  
  
 Les conteneurs peuvent être imbriqués ; Autrement dit, vous pouvez appeler la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode plusieurs fois avant d’appeler le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode). Chaque fois que vous appelez le <xref:System.Drawing.Graphics.BeginContainer%2A> (méthode), un bloc d’informations est placé sur la pile, et vous recevez un <xref:System.Drawing.Drawing2D.GraphicsContainer> pour le bloc d’informations. Lorsque vous passez un de ces objets vers le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), le <xref:System.Drawing.Graphics> est retourné à l’état, il se trouvait au moment de la <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode qui a retourné cet particulier <xref:System.Drawing.Drawing2D.GraphicsContainer>. Le bloc d’informations placé sur la pile par qui <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode est supprimé de la pile, et tous les blocs d’informations placés sur cette pile après cela <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode sont également supprimés.  
  
 Les appels à la <xref:System.Drawing.Graphics.Save%2A> blocs d’informations sur place (méthode) sur la même pile d’appels à la <xref:System.Drawing.Graphics.BeginContainer%2A> (méthode). Tout comme un <xref:System.Drawing.Graphics.EndContainer%2A> appel de méthode est associée à un <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode, un <xref:System.Drawing.Graphics.Restore%2A> appel de méthode est associée à un <xref:System.Drawing.Graphics.Save%2A> appel de méthode.  
  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), tous les blocs d’informations placés sur la pile (par le <xref:System.Drawing.Graphics.Save%2A> (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode sont supprimés de la pile. De même, lorsque vous appelez le <xref:System.Drawing.Graphics.Restore%2A> (méthode), tous les blocs d’informations placés sur la pile (par le <xref:System.Drawing.Graphics.Save%2A> (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.Save%2A> méthode sont supprimés de la pile.  
  
 Cette méthode spécifie une transformation d’échelle pour le nouveau conteneur graphique avec la `dstrect` et `srcrect` paramètres. La mise à l’échelle est égale à la transformation qui, lorsqu’il est appliqué à `srcrect`, entraîne `dstrect`.  
  
 L’état des graphiques établi par la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode comprend les qualités de rendu de l’état des graphiques par défaut ; les modifications d’état de la qualité de rendu existant lorsque la méthode est appelée sont réinitialisées aux valeurs par défaut.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée deux rectangles pour spécifier une transformation d’échelle pour le nouveau conteneur.  
  
-   Ouvre le nouveau conteneur graphique et enregistre l’ancien conteneur.  
  
-   Remplit un rectangle rouge le (mis à l’échelle de coordonnées de la) nouveau conteneur.  
  
-   Ferme le nouveau conteneur et restaure le conteneur enregistré.  
  
-   Remplit un rectangle vert (pour les coordonnées non ajustées) le conteneur enregistré.  
  
 Le résultat est un rectangle vert qui recouvre un rectangle rouge plus petits.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.RectangleF dstrect, valuetype System.Drawing.RectangleF srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As RectangleF, srcrect As RectangleF, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::RectangleF dstrect, System::Drawing::RectangleF srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">Structure <see cref="T:System.Drawing.RectangleF" /> qui, associée au paramètre <paramref name="srcrect" />, spécifie une transformation d'échelle pour le nouveau conteneur graphique.</param>
        <param name="srcrect">Structure <see cref="T:System.Drawing.RectangleF" /> qui, associée au paramètre <paramref name="dstrect" />, spécifie une transformation d'échelle pour le nouveau conteneur graphique.</param>
        <param name="unit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure du conteneur.</param>
        <summary>Enregistre un conteneur graphique avec l'état actuel de ce <see cref="T:System.Drawing.Graphics" /> et ouvre et utilise un nouveau conteneur graphique avec la transformation d'échelle spécifiée.</summary>
        <returns>Cette méthode retourne un <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> qui représente l'état de ce <see cref="T:System.Drawing.Graphics" /> au moment de l'appel de la méthode.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode avec le <xref:System.Drawing.Graphics.EndContainer%2A> méthode pour créer des conteneurs graphiques imbriqués. Conteneurs graphiques conservent l’état de graphiques, tels que les propriétés de rendu, de transformation et de zone de découpage.  
  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode d’un <xref:System.Drawing.Graphics>, un bloc d’informations qui conserve l’état de la <xref:System.Drawing.Graphics> est placé sur une pile. Le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode retourne un <xref:System.Drawing.Drawing2D.GraphicsContainer> qui identifie ce bloc d’informations. Lorsque vous passez l’objet d’identification pour le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), le bloc d’informations est supprimé de la pile et est utilisé pour restaurer le <xref:System.Drawing.Graphics> à l’état, il se trouvait au moment de le <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode.  
  
 Les conteneurs peuvent être imbriqués ; Autrement dit, vous pouvez appeler la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode plusieurs fois avant d’appeler le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode). Chaque fois que vous appelez le <xref:System.Drawing.Graphics.BeginContainer%2A> (méthode), un bloc d’informations est placé sur la pile, et vous recevez un <xref:System.Drawing.Drawing2D.GraphicsContainer> pour le bloc d’informations. Lorsque vous passez un de ces objets vers le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), le <xref:System.Drawing.Graphics> est retourné à l’état, il se trouvait au moment de la <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode qui a retourné cet particulier <xref:System.Drawing.Drawing2D.GraphicsContainer>. Le bloc d’informations placé sur la pile par qui <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode est supprimé de la pile, et tous les blocs d’informations placés sur cette pile après cela <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode sont également supprimés.  
  
 Les appels à la <xref:System.Drawing.Graphics.Save%2A> blocs d’informations sur place (méthode) sur la même pile d’appels à la <xref:System.Drawing.Graphics.BeginContainer%2A> (méthode). Tout comme un <xref:System.Drawing.Graphics.EndContainer%2A> appel de méthode est associée à un <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode, un <xref:System.Drawing.Graphics.Restore%2A> appel de méthode est associée à un <xref:System.Drawing.Graphics.Save%2A> appel de méthode.  
  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), tous les blocs d’informations placés sur la pile (par le `Save` (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode sont supprimés de la pile. De même, lorsque vous appelez le <xref:System.Drawing.Graphics.Restore%2A> (méthode), tous les blocs d’informations placés sur la pile (par le <xref:System.Drawing.Graphics.Save%2A> (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.Save%2A> méthode sont supprimés de la pile.  
  
 Cette méthode spécifie une transformation d’échelle pour le nouveau conteneur graphique avec la `dstrect` et `srcrect` paramètres. La mise à l’échelle est égale à la transformation qui, lorsqu’il est appliqué à `srcrect`, entraîne `dstrect`.  
  
 L’état des graphiques établi par la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode comprend les qualités de rendu de l’état des graphiques par défaut ; les modifications d’état de la qualité de rendu existant lorsque la méthode est appelée sont réinitialisées aux valeurs par défaut.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée deux rectangles pour spécifier une transformation d’échelle pour le nouveau conteneur.  
  
-   Ouvre le nouveau conteneur graphique et enregistre l’ancien conteneur.  
  
-   Remplit un rectangle rouge le (mis à l’échelle de coordonnées de la) nouveau conteneur.  
  
-   Ferme le nouveau conteneur et restaure le conteneur enregistré.  
  
-   Remplit un rectangle vert (pour les coordonnées non ajustées) le conteneur enregistré.  
  
 Le résultat est un rectangle vert qui recouvre un rectangle rouge plus petits.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.Clear : System.Drawing.Color -&gt; unit" Usage="graphics.Clear color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">Structure <see cref="T:System.Drawing.Color" /> qui représente la couleur d'arrière-plan de la surface de dessin.</param>
        <summary>Efface l'intégralité de la surface de dessin et la remplit avec la couleur d'arrière-plan spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics.Clear%2A> méthode efface l’état de l’objet graphics et ne doit pas être appelée lorsque l’objet graphics ne peut pas être mis à jour. Par exemple, si le <xref:System.Drawing.Graphics.Clear%2A> méthode est appelée sur un bureau sécurisé dans une session terminal server, un <xref:System.Runtime.InteropServices.ExternalException> peut se produire, en laissant le <xref:System.Drawing.Graphics> objet dans un état incohérent.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code efface la surface de dessin de le <xref:System.Drawing.Graphics> et définit la couleur d’arrière-plan de la couleur définie par le système de bleu-vert.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Clip" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Clip { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Drawing.Region with get, set" Usage="System.Drawing.Graphics.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un <see cref="T:System.Drawing.Region" /> qui limite la zone de dessin de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value><see cref="T:System.Drawing.Region" /> qui limite la partie de ce <see cref="T:System.Drawing.Graphics" /> qui est actuellement disponible pour le dessin.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modification de la <xref:System.Drawing.Region> objet retourné par la <xref:System.Drawing.Graphics.Clip%2A> propriété n’affecte pas les dessins suivants avec la <xref:System.Drawing.Graphics> objet. Pour modifier la zone de découpage, remplacez le <xref:System.Drawing.Graphics.Clip%2A> avec une nouvelle valeur de la propriété <xref:System.Drawing.Region> objet. Pour déterminer si la zone de découpage est infinie, récupérez le <xref:System.Drawing.Graphics.Clip%2A> propriété et appelez ses <xref:System.Drawing.Region.IsInfinite%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Drawing.Graphics.Clip%2A> propriété. Cet exemple est conçu pour être utilisé avec Windows Forms. Collez le code dans un formulaire et appelez le `SetAndFillClip` méthode lors du traitement du formulaire <xref:System.Windows.Forms.Control.Paint> événement, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.GraphicsProperties#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]
 [!code-vb[System.Drawing.GraphicsProperties#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.ClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF ClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.ClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une structure <see cref="T:System.Drawing.RectangleF" /> qui délimite la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Structure <see cref="T:System.Drawing.RectangleF" /> qui représente un rectangle englobant pour la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’unité du rectangle résultant est désignée par le <xref:System.Drawing.Graphics.PageUnit%2A> propriété. L’unité par défaut est de pixels. Un <xref:System.Drawing.Graphics> est généralement associé à un contrôle et l’origine du rectangle par rapport à la zone cliente de ce contrôle.  
  
 Si la zone de découpage est infinie, le <xref:System.Drawing.Graphics.ClipBounds%2A> propriété retourne un grand rectangle inutile. Pour déterminer si la zone de découpage est infinie, récupérez le <xref:System.Drawing.Graphics.Clip%2A> propriété et appelez ses <xref:System.Drawing.Region.IsInfinite%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingMode CompositingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingMode As CompositingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingMode CompositingMode { System::Drawing::Drawing2D::CompositingMode get(); void set(System::Drawing::Drawing2D::CompositingMode value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingMode : System.Drawing.Drawing2D.CompositingMode with get, set" Usage="System.Drawing.Graphics.CompositingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui spécifie la façon dont les images composées sont dessinées sur ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Cette propriété spécifie un membre de l'énumération <see cref="T:System.Drawing.Drawing2D.CompositingMode" />. La valeur par défaut est <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le mode de composition détermine si pixels à partir d’une image source remplacent ou sont combinés aux pixels de l’arrière-plan.  
  
> [!NOTE]
>  Vous ne devez pas utiliser un <xref:System.Drawing.Graphics.CompositingMode%2A> valeur de propriété de <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> lorsque le <xref:System.Drawing.Graphics.TextRenderingHint%2A> propriété est définie sur <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Une exception peut se produire ou l’image de ne pas s’afficher correctement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingQuality CompositingQuality" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingQuality" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingQuality As CompositingQuality" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingQuality CompositingQuality { System::Drawing::Drawing2D::CompositingQuality get(); void set(System::Drawing::Drawing2D::CompositingQuality value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingQuality : System.Drawing.Drawing2D.CompositingQuality with get, set" Usage="System.Drawing.Graphics.CompositingQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la qualité de rendu des images composées dessinées sur ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Cette propriété spécifie un membre de l'énumération <see cref="T:System.Drawing.Drawing2D.CompositingQuality" />. La valeur par défaut est <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La qualité de la composition détermine le niveau de qualité de rendu des images composées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFromScreen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Effectue le transfert de bloc de bits des données de couleur de l'écran à la surface de dessin de <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (upperLeftSource As Point, upperLeftDestination As Point, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Point situé dans l'angle supérieur gauche du rectangle source.</param>
        <param name="upperLeftDestination">Point situé dans l'angle supérieur gauche du rectangle de destination.</param>
        <param name="blockRegionSize">Taille de la zone à transférer.</param>
        <summary>Effectue le transfert de bloc de bits des données de couleur correspondant à un rectangle de pixels de l'écran à la surface de dessin de <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics.CopyFromScreen%2A> méthodes sont utiles pour superposer les images. Pour spécifier comment les couleurs source et de destination sont fusionnées, utilisez une de la <xref:System.Drawing.Graphics.CopyFromScreen%2A> méthodes acceptant un <xref:System.Drawing.CopyPixelOperation> paramètre.  
  
   
  
## Examples  
 L'exemple suivant décrit comment utiliser la méthode <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Pour exécuter cet exemple, collez-le dans un formulaire Windows. Gérer le formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `CopyPixels1` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">L'opération a échoué.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Pour accéder à toutes les fenêtres. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Comment : imprimer un Windows Form</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Procédure : Copier des Pixels pour réduire le scintillement dans les Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Point situé dans l'angle supérieur gauche du rectangle source.</param>
        <param name="upperLeftDestination">Point situé dans l'angle supérieur gauche du rectangle de destination.</param>
        <param name="blockRegionSize">Taille de la zone à transférer.</param>
        <param name="copyPixelOperation">Une des valeurs de <see cref="T:System.Drawing.CopyPixelOperation" />.</param>
        <summary>Effectue le transfert de bloc de bits des données de couleur correspondant à un rectangle de pixels de l'écran à la surface de dessin de <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics.CopyFromScreen%2A> méthodes sont utiles pour superposer les images. Le `copyPixelOperation` paramètre vous permet de spécifier si et comment les couleurs source doivent être fusionnées avec les couleurs dans la zone de destination.  
  
   
  
## Examples  
 L'exemple suivant décrit comment utiliser la méthode <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Pour exécuter cet exemple, collez-le dans un formulaire Windows. Gérer le formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `CopyPixels2` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" /> n’est pas membre de <see cref="T:System.Drawing.CopyPixelOperation" /></exception>
        <exception cref="T:System.ComponentModel.Win32Exception">L'opération a échoué.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Pour accéder à toutes les fenêtres. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Comment : imprimer un Windows Form</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Procédure : Copier des Pixels pour réduire le scintillement dans les Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (sourceX As Integer, sourceY As Integer, destinationX As Integer, destinationY As Integer, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sourceX">Coordonnée x du point situé dans l'angle supérieur gauche du rectangle source.</param>
        <param name="sourceY">Coordonnée y du point situé dans l'angle supérieur gauche du rectangle source.</param>
        <param name="destinationX">Coordonnée x du point situé dans l'angle supérieur gauche du rectangle de destination.</param>
        <param name="destinationY">Coordonnée y du point situé dans l'angle supérieur gauche du rectangle de destination.</param>
        <param name="blockRegionSize">Taille de la zone à transférer.</param>
        <summary>Effectue le transfert de bloc de bits des données de couleur correspondant à un rectangle de pixels de l'écran à la surface de dessin de <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics.CopyFromScreen%2A> méthodes sont utiles pour superposer les images. Pour spécifier comment les couleurs source et de destination sont fusionnées, utilisez une de la <xref:System.Drawing.Graphics.CopyFromScreen%2A> méthodes acceptant un <xref:System.Drawing.CopyPixelOperation> paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.Graphics.CopyFromScreen%2A> pour imprimer une copie de l’écran actuel.  
  
 [!code-csharp[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">L'opération a échoué.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Pour accéder à toutes les fenêtres. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Comment : imprimer un Windows Form</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Procédure : Copier des Pixels pour réduire le scintillement dans les Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="sourceX">Coordonnée x du point situé dans l'angle supérieur gauche du rectangle source.</param>
        <param name="sourceY">Coordonnée y du point situé dans l'angle supérieur gauche du rectangle source.</param>
        <param name="destinationX">Coordonnée x du point situé dans l'angle supérieur gauche du rectangle de destination.</param>
        <param name="destinationY">Coordonnée y du point situé dans l'angle supérieur gauche du rectangle de destination.</param>
        <param name="blockRegionSize">Taille de la zone à transférer.</param>
        <param name="copyPixelOperation">Une des valeurs de <see cref="T:System.Drawing.CopyPixelOperation" />.</param>
        <summary>Effectue le transfert de bloc de bits des données de couleur correspondant à un rectangle de pixels de l'écran à la surface de dessin de <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics.CopyFromScreen%2A> méthodes sont utiles pour superposer les images. Le `copyPixelOperation` paramètre vous permet de spécifier si et comment les couleurs source doivent être fusionnées avec les couleurs dans la zone de destination.  
  
   
  
## Examples  
 L'exemple suivant décrit comment utiliser la méthode <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Pour exécuter cet exemple, collez-le dans un formulaire Windows. Gérer le formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `CopyPixels4` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" /> n’est pas membre de <see cref="T:System.Drawing.CopyPixelOperation" /></exception>
        <exception cref="T:System.ComponentModel.Win32Exception">L'opération a échoué.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Pour accéder à toutes les fenêtres. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Comment : imprimer un Windows Form</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Procédure : Copier des Pixels pour réduire le scintillement dans les Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appel <xref:System.Drawing.Graphics.Dispose%2A> autorise les ressources utilisées par ce <xref:System.Drawing.Graphics> d’être réaffectées à d’autres fins.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un <xref:System.Drawing.Image> à partir d’un graphique de fichiers, SampImag.jpg, dans l’exemple de répertoire.  
  
-   Crée un <xref:System.Drawing.Graphics> à partir de la <xref:System.Drawing.Image>.  
  
-   Modifie l’image en remplissant un rectangle qu’il contient.  
  
-   Dessine le <xref:System.Drawing.Image> à l’écran.  
  
-   Libère le créé <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiX { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiX : single" Usage="System.Drawing.Graphics.DpiX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la résolution horizontale de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Valeur, en points par pouce, de la résolution horizontale prise en charge par ce <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la création d’applications haute résolution, consultez  
  
 [Haute résolution](https://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 La méthode suivante illustre l’utilisation de la <xref:System.Drawing.Graphics.DpiX%2A> et <xref:System.Drawing.Graphics.DpiY%2A> propriétés. Cet exemple est conçu pour une utilisation avec un formulaire Windows. Pour exécuter cet exemple, collez-le dans un formulaire qui contient un <xref:System.Windows.Forms.ListBox> nommé listBox1 et appelez cette méthode depuis le constructeur du formulaire.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">Haute résolution</related>
      </Docs>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiY { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiY : single" Usage="System.Drawing.Graphics.DpiY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la résolution verticale de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Valeur, en points par pouce, de la résolution verticale prise en charge par ce <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la création d’applications haute résolution, consultez  
  
 [Haute résolution](https://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 La méthode suivante illustre l’utilisation de la <xref:System.Drawing.Graphics.DpiX%2A> et <xref:System.Drawing.Graphics.DpiY%2A> propriétés. Cet exemple est conçu pour une utilisation avec un formulaire Windows. Pour exécuter cet exemple, collez-le dans un formulaire qui contient un <xref:System.Windows.Forms.ListBox> nommé listBox1 et appelez cette méthode depuis le constructeur du formulaire.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">Haute résolution</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un arc représentant une partie d'une ellipse spécifiée par une paire de coordonnées, une largeur et une hauteur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de l'arc.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.RectangleF" /> qui définit les limites de l'ellipse.</param>
        <param name="startAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir de l'axe x jusqu'au point de départ de l'arc.</param>
        <param name="sweepAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir du paramètre <paramref name="startAngle" /> jusqu'au point d'arrivée de l'arc.</param>
        <summary>Dessine un arc représentant la partie d'une ellipse spécifiée par une structure <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine un arc représentant une partie du périmètre d’une ellipse. L’ellipse est définie par les limites d’un rectangle. L’arc est la partie du périmètre de l’ellipse entre le `startAngle` paramètre et le `startAngle`  +  `sweepAngle` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un rectangle pour délimiter une ellipse.  
  
-   Définit le début (45 degrés) et l’angle de balayage (270 degrés).  
  
-   Dessine l’arc elliptique à l’écran.  
  
 Il en résulte une ellipse partielle manquante un segment entre + et - 45 degrés de l’axe x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de l'arc.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.RectangleF" /> qui définit les limites de l'ellipse.</param>
        <param name="startAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir de l'axe x jusqu'au point de départ de l'arc.</param>
        <param name="sweepAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir du paramètre <paramref name="startAngle" /> jusqu'au point d'arrivée de l'arc.</param>
        <summary>Dessine un arc représentant la partie d'une ellipse spécifiée par une structure <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine un arc représentant une partie du périmètre d’une ellipse. L’ellipse est définie par les limites d’un rectangle. L’arc est la partie du périmètre de l’ellipse entre le `startAngle` paramètre et le `startAngle`  +  `sweepAngle` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un rectangle pour délimiter une ellipse.  
  
-   Définit le début (45 degrés) et l’angle de balayage (270 degrés).  
  
-   Dessine l’arc elliptique à l’écran.  
  
 Il en résulte une ellipse partielle manquante un segment entre + et - 45 degrés de l’axe x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de l'arc.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle qui définit l'ellipse.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle qui définit l'ellipse.</param>
        <param name="width">Largeur du rectangle qui définit l'ellipse.</param>
        <param name="height">Hauteur du rectangle qui définit l'ellipse.</param>
        <param name="startAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir de l'axe x jusqu'au point de départ de l'arc.</param>
        <param name="sweepAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir du paramètre <paramref name="startAngle" /> jusqu'au point d'arrivée de l'arc.</param>
        <summary>Dessine un arc représentant une partie d'une ellipse spécifiée par une paire de coordonnées, une largeur et une hauteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine un arc représentant une partie du périmètre d’une ellipse. L’ellipse est définie par les limites d’un rectangle. L’arc est la partie du périmètre de l’ellipse entre le `startAngle` paramètre et le `startAngle`  +  `sweepAngle` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée la position et la taille d’un rectangle pour délimiter une ellipse.  
  
-   Définit le début (45 degrés) et l’angle de balayage (270 degrés).  
  
-   Dessine l’arc elliptique à l’écran.  
  
 Il en résulte une ellipse partielle manquante un segment entre + et - 45 degrés de l’axe x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de l'arc.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle qui définit l'ellipse.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle qui définit l'ellipse.</param>
        <param name="width">Largeur du rectangle qui définit l'ellipse.</param>
        <param name="height">Hauteur du rectangle qui définit l'ellipse.</param>
        <param name="startAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir de l'axe x jusqu'au point de départ de l'arc.</param>
        <param name="sweepAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir du paramètre <paramref name="startAngle" /> jusqu'au point d'arrivée de l'arc.</param>
        <summary>Dessine un arc représentant une partie d'une ellipse spécifiée par une paire de coordonnées, une largeur et une hauteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine un arc représentant une partie du périmètre d’une ellipse. L’ellipse est définie par les limites d’un rectangle. L’arc est la partie du périmètre de l’ellipse entre le `startAngle` paramètre et le `startAngle`  +  `sweepAngle` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée la position et la taille d’un rectangle pour délimiter une ellipse.  
  
-   Définit le début (45 degrés) et l’angle de balayage (270 degrés).  
  
-   Dessine l’arc elliptique à l’écran.  
  
 Il en résulte une ellipse partielle manquante un segment entre + et - 45 degrés de l’axe x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine une spline de Bézier définie par quatre structures <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2, System::Drawing::Point pt3, System::Drawing::Point pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">Structure <see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la courbe.</param>
        <param name="pt1">Structure <see cref="T:System.Drawing.Point" /> qui représente le point de début de la courbe.</param>
        <param name="pt2">Structure <see cref="T:System.Drawing.Point" /> qui représente le premier point de contrôle de la courbe.</param>
        <param name="pt3">Structure <see cref="T:System.Drawing.Point" /> qui représente le deuxième point de contrôle de la courbe.</param>
        <param name="pt4">Structure <see cref="T:System.Drawing.Point" /> qui représente le point de fin de la courbe.</param>
        <summary>Dessine une spline de Bézier définie par quatre structures <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La courbe de Bézier est dessinée à partir du premier point au quatrième point. Les deuxième et troisième points sont des points de contrôle qui détermine la forme de la courbe.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée le début, fin et deux points de contrôle de la courbe.  
  
-   Dessine la courbe de Bézier à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2, System::Drawing::PointF pt3, System::Drawing::PointF pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la courbe.</param>
        <param name="pt1">Structure <see cref="T:System.Drawing.PointF" /> qui représente le point de début de la courbe.</param>
        <param name="pt2">Structure <see cref="T:System.Drawing.PointF" /> qui représente le premier point de contrôle de la courbe.</param>
        <param name="pt3">Structure <see cref="T:System.Drawing.PointF" /> qui représente le deuxième point de contrôle de la courbe.</param>
        <param name="pt4">Structure <see cref="T:System.Drawing.PointF" /> qui représente le point de fin de la courbe.</param>
        <summary>Dessine une spline de Bézier définie par quatre structures <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La spline de Bézier est dessinée à partir du premier point au quatrième point. Les deuxième et troisième points sont des points de contrôle qui détermine la forme de la courbe.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée le début, fin et deux points de contrôle de la courbe.  
  
-   Dessine la courbe de Bézier à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * single * single * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawBezier (pen, x1, y1, x2, y2, x3, y3, x4, y4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la courbe.</param>
        <param name="x1">Coordonnée x du point de début de la courbe.</param>
        <param name="y1">Coordonnée y du point de début de la courbe.</param>
        <param name="x2">Coordonnée x du premier point de contrôle de la courbe.</param>
        <param name="y2">Coordonnée y du premier point de contrôle de la courbe.</param>
        <param name="x3">Coordonnée x du deuxième point de contrôle de la courbe.</param>
        <param name="y3">Coordonnée y du deuxième point de contrôle de la courbe.</param>
        <param name="x4">Coordonnée x du point de fin de la courbe.</param>
        <param name="y4">Coordonnée y du point de fin de la courbe.</param>
        <summary>Dessine une spline de Bézier définie par quatre paires de coordonnées ordonnées qui représentent les points.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La spline de Bézier est dessinée à partir du premier point au quatrième point. Les deuxième et troisième points sont des points de contrôle qui détermine la forme de la courbe.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée les coordonnées de début, fin et deux points de contrôle de la courbe.  
  
-   Dessine la courbe de Bézier à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine une série de splines de Bézier à partir d'un tableau de structures <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui représentent les points qui déterminent la courbe. Le nombre de points dans le tableau doit être un multiple de 3 plus 1, par exemple 4, 7 ou 10.</param>
        <summary>Dessine une série de splines de Bézier à partir d'un tableau de structures <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nombre de points dans le tableau doit être un multiple de 3 plus 1, car la première spline requiert 4 points et les autres splines requièrent 3 points. La première spline de Bézier est dessinée à partir du premier point au quatrième point dans le tableau de points. Les deuxième et troisième points sont des points de contrôle qui détermine la forme de la courbe. Chaque courbe subséquente nécessite exactement trois points supplémentaires : deux autres points de contrôle et un point de fin. Le point de fin de la courbe précédente est utilisé comme point de départ pour chaque autre courbe.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée le début, fin et deux points de contrôle pour une première courbe et le point de terminaison et deux points de contrôle pour une deuxième courbe.  
  
-   Dessine les courbes de Bézier successives à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui représentent les points qui déterminent la courbe. Le nombre de points dans le tableau doit être un multiple de 3 plus 1, par exemple 4, 7 ou 10.</param>
        <summary>Dessine une série de splines de Bézier à partir d'un tableau de structures <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nombre de points dans le tableau doit être un multiple de 3 plus 1, car la première spline requiert 4 points et les autres splines requièrent 3 points. La première courbe de Bézier est dessinée à partir du premier point au quatrième point dans le tableau de points. Les deuxième et troisième points sont des points de contrôle qui détermine la forme de la courbe. Chaque courbe subséquente nécessite exactement trois points supplémentaires : deux autres points de contrôle et un point de fin. Le point de fin de la courbe précédente est utilisé comme point de départ pour chaque autre courbe.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée le début, fin et deux points de contrôle pour une première courbe et le point de terminaison et deux points de contrôle pour une deuxième courbe.  
  
-   Dessine les courbes de Bézier successives à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et la hauteur de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui définissent la spline.</param>
        <summary>Dessine une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une spline cardinale fermée qui passe par chaque point dans le tableau. Si le dernier point ne correspond pas au premier point, un segment de courbe est ajouté entre le dernier point au premier point pour fermer la figure.  
  
 Le tableau de points doit contenir au moins quatre <xref:System.Drawing.Point> structures.  
  
 Cette méthode utilise une tension par défaut de 0,5.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée des stylets rouges et vertes.  
  
-   Crée sept points pour définir une courbe.  
  
-   Dessine sept lignes droites rouges entre les sept points pour former un polygone fermé.  
  
-   Dessine une courbe verte via les sept points.  
  
 La méthode utilise une tension par défaut de 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et la hauteur de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui définissent la spline.</param>
        <summary>Dessine une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une spline cardinale fermée qui passe par chaque point dans le tableau. Si le dernier point ne correspond pas au premier point, un segment de courbe est ajouté entre le dernier point au premier point pour la fermer.  
  
 Le tableau de points doit contenir au moins quatre <xref:System.Drawing.PointF> structures.  
  
 Cette méthode utilise une tension par défaut de 0,5.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée des stylets rouges et vertes.  
  
-   Crée sept points pour définir une courbe.  
  
-   Dessine sept lignes droites rouges entre les sept points pour former un polygone fermé.  
  
-   Dessine une courbe verte via les sept points.  
  
 La méthode utilise une tension par défaut de 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et la hauteur de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui définissent la spline.</param>
        <param name="tension">Valeur supérieure ou égale à 0,0 F qui spécifie la tension de la courbe.</param>
        <param name="fillmode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.FillMode" /> qui détermine le mode de remplissage de la courbe. Ce paramètre est requis, mais il est ignoré.</param>
        <summary>Dessine une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.Point" /> avec une tension spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une spline cardinale fermée qui passe par chaque point dans le tableau. Si le dernier point ne correspond pas au premier point, un segment de courbe est ajouté entre le dernier point au premier point pour la fermer.  
  
 Le tableau de points doit contenir au moins quatre <xref:System.Drawing.Point> structures.  
  
 Le `tension` paramètre détermine la forme de la spline. Si la valeur de la `tension` paramètre est 0.0f, cette méthode dessine des segments de ligne pour relier les points. En règle générale, le `tension` paramètre est inférieur ou égal à 1.0f. Valeurs sur 1.0f donnent des résultats.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée des stylets rouges et vertes.  
  
-   Crée sept points pour définir la courbe.  
  
-   Dessine sept lignes droites rouges entre les sept points pour former un polygone.  
  
-   Crée des paramètres de mode de tension et de remplissage.  
  
-   Dessine une courbe verte via les sept points.  
  
 La méthode utilise une tension de 1,0 et définit le mode de remplissage `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et la hauteur de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui définissent la spline.</param>
        <param name="tension">Valeur supérieure ou égale à 0,0 F qui spécifie la tension de la courbe.</param>
        <param name="fillmode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.FillMode" /> qui détermine le mode de remplissage de la courbe. Ce paramètre est requis, mais il est ignoré.</param>
        <summary>Dessine une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.PointF" /> avec une tension spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une spline cardinale fermée qui passe par chaque point dans le tableau. Si le dernier point ne correspond pas au premier point, un segment de courbe est ajouté entre le dernier point au premier point pour la fermer.  
  
 Le tableau de points doit contenir au moins quatre <xref:System.Drawing.PointF> structures.  
  
 Le `tension` paramètre détermine la forme de la spline. Si la valeur de la `tension` paramètre est 0.0f, cette méthode dessine des segments de ligne pour relier les points. En règle générale, le `tension` paramètre est inférieur ou égal à 1.0f. Valeurs sur 1.0f donnent des résultats.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée des stylets rouges et vertes.  
  
-   Crée sept points pour définir la courbe.  
  
-   Dessine sept lignes droites rouges entre les sept points pour former un polygone.  
  
-   Crée des paramètres de mode de tension et de remplissage.  
  
-   Dessine une courbe verte via les sept points.  
  
 La méthode utilise une tension de 1,0 et définit le mode de remplissage `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine une spline cardinale via un tableau de structures <see cref="T:System.Drawing.Point" /> spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et la hauteur de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui définissent la spline.</param>
        <summary>Dessine une spline cardinale via un tableau de structures <see cref="T:System.Drawing.Point" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une spline cardinale qui passe par chaque point dans le tableau.  
  
 Le tableau de points doit contenir au moins trois <xref:System.Drawing.Point> structures pour une courbe à dessiner.  
  
 Cette méthode utilise une tension par défaut de 0,5.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée des stylets rouges et vertes.  
  
-   Crée sept points pour définir une courbe.  
  
-   Dessine six lignes droites rouges entre les sept points pour former un polygone incomplet.  
  
-   Dessine une courbe verte ouverte via les sept points.  
  
 La méthode utilise une tension par défaut de 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui définissent la spline.</param>
        <summary>Dessine une spline cardinale via un tableau de structures <see cref="T:System.Drawing.PointF" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une spline cardinale qui passe par chaque point dans le tableau.  
  
 Le tableau de points doit contenir au moins trois <xref:System.Drawing.PointF> structures pour une courbe à dessiner.  
  
 Cette méthode utilise une tension par défaut de 0,5.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée des stylets rouges et vertes.  
  
-   Crée sept points pour définir une courbe.  
  
-   Dessine six lignes droites rouges entre les sept points pour former un polygone incomplet.  
  
-   Dessine une courbe verte ouverte via les sept points.  
  
 La méthode utilise une tension par défaut de 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui définissent la spline.</param>
        <param name="tension">Valeur supérieure ou égale à 0,0 F qui spécifie la tension de la courbe.</param>
        <summary>Dessine une spline cardinale via un tableau de structures <see cref="T:System.Drawing.Point" /> spécifié avec une tension indiquée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une spline cardinale qui passe par chaque point dans le tableau.  
  
 Le tableau de points doit contenir au moins trois <xref:System.Drawing.Point> structures pour une courbe à dessiner.  
  
 Le `tension` paramètre détermine la forme de la spline. Si la valeur de la `tension` paramètre est 0.0f, cette méthode dessine des segments de ligne pour relier les points. En règle générale, le `tension` paramètre est inférieur ou égal à 1.0f. Valeurs sur 1.0f donnent des résultats.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée des stylets rouges et vertes.  
  
-   Crée sept points pour définir la courbe.  
  
-   Dessine six lignes droites rouges entre les sept points pour former un polygone incomplet.  
  
-   Crée un paramètre de tension.  
  
-   Dessine une courbe verte ouverte via les sept points.  
  
 La méthode utilise une tension de 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui représentent les points qui définissent la courbe.</param>
        <param name="tension">Valeur supérieure ou égale à 0,0 F qui spécifie la tension de la courbe.</param>
        <summary>Dessine une spline cardinale via un tableau de structures <see cref="T:System.Drawing.PointF" /> spécifié avec une tension indiquée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une spline cardinale qui passe par chaque point dans le tableau.  
  
 Le tableau de points doit contenir au moins trois <xref:System.Drawing.PointF> structures pour une courbe à dessiner.  
  
 Le `tension` paramètre détermine la forme de la spline. Si la valeur de la `tension` paramètre est 0.0f, cette méthode dessine des segments de ligne pour relier les points. En règle générale, le `tension` paramètre est inférieur ou égal à 1.0f. Valeurs sur 1.0f donnent des résultats.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée des stylets rouges et vertes.  
  
-   Crée sept points pour définir la courbe.  
  
-   Dessine six lignes droites rouges entre les sept points pour former un polygone incomplet.  
  
-   Crée un paramètre de tension.  
  
-   Dessine une courbe verte ouverte via les sept points.  
  
 La méthode utilise une tension de 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui définissent la spline.</param>
        <param name="offset">Offset à partir du premier élément figurant dans le tableau du paramètre <paramref name="points" /> jusqu'au point de départ de la courbe.</param>
        <param name="numberOfSegments">Nombre de segments situés après le point de départ à inclure dans la courbe.</param>
        <summary>Dessine une spline cardinale via un tableau de structures <see cref="T:System.Drawing.PointF" /> spécifié. Le dessin commence l'offset au début du tableau.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une spline cardinale qui passe par chaque point dans le tableau.  
  
 Le tableau de points doit contenir au moins trois <xref:System.Drawing.PointF> structures pour une courbe à dessiner.  
  
 La valeur de la `offset` paramètre spécifie le nombre d’éléments à ignorer dans le tableau. Le premier élément après les éléments ignorés représente le point de départ de la courbe.  
  
 La valeur de la `numberOfSegments` paramètre spécifie le nombre de segments, après le point de départ à dessiner dans la courbe. La valeur de la `numberOfSegments` paramètre doit être au moins 1. La valeur de la `offset` paramètre ainsi que la valeur de la `numberOfSegments` paramètre doit être inférieur au nombre d’éléments dans le tableau de la `points` paramètre.  
  
 Cette méthode utilise une tension par défaut de 0,5.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée des stylets rouges et vertes.  
  
-   Crée sept points pour définir une courbe.  
  
-   Dessine six lignes droites rouges entre les sept points pour former un polygone incomplet.  
  
-   Définit le décalage de point de départ et le nombre de segments.  
  
-   Dessine une courbe verte ouverte (à partir du troisième point) via les cinq derniers points.  
  
 La méthode utilise une tension par défaut de 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui définissent la spline.</param>
        <param name="offset">Offset à partir du premier élément figurant dans le tableau du paramètre <paramref name="points" /> jusqu'au point de départ de la courbe.</param>
        <param name="numberOfSegments">Nombre de segments situés après le point de départ à inclure dans la courbe.</param>
        <param name="tension">Valeur supérieure ou égale à 0,0 F qui spécifie la tension de la courbe.</param>
        <summary>Dessine une spline cardinale via un tableau de structures <see cref="T:System.Drawing.Point" /> spécifié avec une tension indiquée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une spline cardinale qui passe par chaque point dans le tableau.  
  
 Le tableau de points doit contenir au moins trois <xref:System.Drawing.Point> structures pour une courbe à dessiner.  
  
 La valeur de la `offset` paramètre spécifie le nombre d’éléments à ignorer dans le tableau. Le premier élément après les éléments ignorés représente le point de départ de la courbe.  
  
 La valeur de la `numberOfSegments` paramètre spécifie le nombre de segments, après le point de départ à dessiner dans la courbe. La valeur de la `numberOfSegments` paramètre doit être au moins 1. La valeur de la `offset` paramètre ainsi que la valeur de la `numberOfSegments` paramètre doit être inférieur au nombre d’éléments dans le tableau de la `points` paramètre.  
  
 Le `tension` paramètre détermine la forme de la spline. Si la valeur de la `tension` paramètre est 0.0f, cette méthode dessine des segments de ligne pour relier les points. En règle générale, le `tension` paramètre est inférieur ou égal à 1.0f. Valeurs sur 1.0f donnent des résultats.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée des stylets rouges et vertes.  
  
-   Crée sept points pour définir une courbe.  
  
-   Dessine six lignes droites rouges entre les sept points pour former un polygone incomplet.  
  
-   Définit le décalage de point de départ et le nombre de segments.  
  
-   Définit la tension.  
  
-   Dessine une courbe verte ouverte (à partir du troisième point) via les cinq derniers points.  
  
 La méthode définit la tension à 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la courbe.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui définissent la spline.</param>
        <param name="offset">Offset à partir du premier élément figurant dans le tableau du paramètre <paramref name="points" /> jusqu'au point de départ de la courbe.</param>
        <param name="numberOfSegments">Nombre de segments situés après le point de départ à inclure dans la courbe.</param>
        <param name="tension">Valeur supérieure ou égale à 0,0 F qui spécifie la tension de la courbe.</param>
        <summary>Dessine une spline cardinale via un tableau de structures <see cref="T:System.Drawing.PointF" /> spécifié avec une tension indiquée. Le dessin commence l'offset au début du tableau.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une spline cardinale qui passe par chaque point dans le tableau.  
  
 Le tableau de points doit contenir au moins trois <xref:System.Drawing.PointF> structures de courbe à dessiner.  
  
 La valeur de la `offset` paramètre spécifie le nombre d’éléments à ignorer dans le tableau. Le premier élément après les éléments ignorés représente le point de départ de la courbe.  
  
 La valeur de la `numberOfSegments` paramètre spécifie le nombre de segments, après le point de départ à dessiner dans la courbe. La valeur de la `numberOfSegments` paramètre doit être au moins 1. La valeur de la `offset` paramètre ainsi que la valeur de la `numberOfSegments` paramètre doit être inférieur au nombre d’éléments dans le tableau de la `points` paramètre.  
  
 Le `tension` paramètre détermine la forme de la spline. Si la valeur de la `tension` paramètre est 0.0f, cette méthode dessine des segments de ligne pour relier les points. En règle générale, le `tension` paramètre est inférieur ou égal à 1.0f. Valeurs sur 1.0f donnent des résultats.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée des stylets rouges et vertes.  
  
-   Crée sept points pour définir une courbe.  
  
-   Dessine six lignes droites rouges entre les sept points pour former un polygone incomplet.  
  
-   Définit le décalage de point de départ et le nombre de segments.  
  
-   Définit la tension.  
  
-   Dessine une courbe verte ouverte (à partir du troisième point) via les cinq derniers points.  
  
 La méthode définit la tension à 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine une ellipse définie par un rectangle englobant spécifié par une paire de coordonnées, une hauteur et une largeur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de l'ellipse.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> qui définit les limites de l'ellipse.</param>
        <summary>Dessine une ellipse spécifiée par une structure <see cref="T:System.Drawing.Rectangle" /> englobante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une ellipse définie par le rectangle englobant spécifié par le `rect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un rectangle pour délimiter une ellipse.  
  
-   Dessine l’ellipse à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de l'ellipse.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.RectangleF" /> qui définit les limites de l'ellipse.</param>
        <summary>Dessine une ellipse définie par un <see cref="T:System.Drawing.RectangleF" /> englobant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une ellipse définie par le rectangle englobant spécifié par le `rect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un rectangle pour délimiter une ellipse.  
  
-   Dessine l’ellipse à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de l'ellipse.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse.</param>
        <param name="width">Largeur du rectangle englobant qui définit l'ellipse.</param>
        <param name="height">Hauteur du rectangle englobant qui définit l'ellipse.</param>
        <summary>Dessine une ellipse définie par un rectangle englobant spécifié par les coordonnées de l'angle supérieur gauche du rectangle, une largeur et une hauteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une ellipse définie par le rectangle englobant décrit par le `x`, `y`, `width`, et `height` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée la position et la taille d’un rectangle pour délimiter une ellipse.  
  
-   Dessine l’ellipse à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de l'ellipse.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse.</param>
        <param name="width">Largeur du rectangle englobant qui définit l'ellipse.</param>
        <param name="height">Hauteur du rectangle englobant qui définit l'ellipse.</param>
        <summary>Dessine une ellipse définie par un rectangle englobant spécifié par une paire de coordonnées, une hauteur et une largeur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une ellipse définie par le rectangle englobant décrit par le `x`, `y`, `width`, et `height` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée la position et la taille d’un rectangle pour délimiter une ellipse.  
  
-   Dessine l’ellipse à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawIcon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine l'image représentée par le <see cref="T:System.Drawing.Icon" /> spécifié aux coordonnées indiquées.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIcon (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon"><see cref="T:System.Drawing.Icon" /> à dessiner.</param>
        <param name="targetRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image résultante sur la surface d'affichage. L'image figurant dans le paramètre <paramref name="icon" /> est ajustée aux dimensions de cette zone rectangulaire.</param>
        <summary>Dessine l'image représentée par le <see cref="T:System.Drawing.Icon" /> spécifié dans la zone indiquée par une structure <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une icône à partir d’un fichier d’icône Windows standard, SampIcon.ico, dans le dossier example.  
  
-   Crée un rectangle dans lequel dessiner l’icône.  
  
-   Dessine l’icône à l’écran.  
  
 La position du rectangle situe l’icône à l’écran et la taille du rectangle détermine la mise à l’échelle de l’icône dessinée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * int * int -&gt; unit" Usage="graphics.DrawIcon (icon, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="icon"><see cref="T:System.Drawing.Icon" /> à dessiner.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche de l'image dessinée.</param>
        <summary>Dessine l'image représentée par le <see cref="T:System.Drawing.Icon" /> spécifié aux coordonnées indiquées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une icône à partir d’un fichier d’icône Windows standard, SampIcon.ico, dans le dossier example.  
  
-   Crée les coordonnées du coin supérieur gauche sur lequel dessiner l’icône.  
  
-   Dessine l’icône à l’écran.  
  
 L’icône dessinée n’est pas ajustée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIconUnstretched(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIconUnstretched(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIconUnstretched : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIconUnstretched (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon"><see cref="T:System.Drawing.Icon" /> à dessiner.</param>
        <param name="targetRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image résultante. L'image n'est pas ajustée de manière à tenir à l'intérieur de ce rectangle, mais conserve sa taille d'origine. Si l'image dépasse le rectangle, elle est alors découpée de manière à pouvoir tenir à l'intérieur.</param>
        <summary>Dessine l'image représentée par le <see cref="T:System.Drawing.Icon" /> spécifié sans mise à l'échelle de l'image.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une icône à partir d’un fichier d’icône Windows standard, SampIcon.ico, dans le dossier example.  
  
-   Crée un rectangle dans lequel dessiner l’icône.  
  
-   Dessine l’icône à l’écran.  
  
 La position du rectangle situe l’icône à l’écran, et l’icône dessinée est ni ajustée, ni découpée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine le <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille d'origine.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="point">Structure <see cref="T:System.Drawing.Point" /> qui représente l'emplacement de l'angle supérieur gauche de l'image dessinée.</param>
        <summary>Dessine le <see cref="T:System.Drawing.Image" /> spécifié, en utilisant sa taille physique d'origine, à l'emplacement indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> stocke une valeur pour la largeur en pixels et une valeur pour la résolution horizontale (points par pouce). La largeur physique, mesurée en pouces, d’une image est la largeur en pixels divisée par la résolution horizontale. Par exemple, une image avec une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce a une largeur physique de 3 pouces. Remarques similaires s’appliquent à la hauteur en pixels et une hauteur physique.  
  
 Cette méthode dessine une image en utilisant sa taille physique, donc l’image aura sa taille correcte en pouces, quelle que soit la résolution (points par pouce) du périphérique d’affichage. Par exemple, qu'une image a une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce. Si vous appelez cette méthode pour dessiner cette image sur un appareil qui a une résolution de 96 points par pouce, la largeur en pixels de l’image rendue sera de (216/72) * 96 = 288.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée un point sur lequel dessiner le coin supérieur gauche de l’image.  
  
-   Dessine l’image non ajustée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.Point" /> qui définissent un parallélogramme.</param>
        <summary>Dessine le <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille et la forme précisées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.Point> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme.  
  
 L’image représentée par le `image` paramètre est ajustée et inclinée pour s’ajuster à la forme du parallélogramme spécifié par le `destPoints` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un parallélogramme dans lequel dessiner l’image.  
  
-   Dessine l’image à l’écran.  
  
 La position du parallélogramme localise l’image sur l’écran et la taille de l’image d’origine et la taille et la forme du parallélogramme déterminent la mise à l’échelle et l’inclinaison de l’image dessinée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="point">Structure <see cref="T:System.Drawing.PointF" /> qui représente l'angle supérieur gauche de l'image dessinée.</param>
        <summary>Dessine le <see cref="T:System.Drawing.Image" /> spécifié, en utilisant sa taille physique d'origine, à l'emplacement indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> stocke une valeur pour la largeur en pixels et une valeur pour la résolution horizontale (points par pouce). La largeur physique, mesurée en pouces, d’une image est la largeur en pixels divisée par la résolution horizontale. Par exemple, une image avec une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce a une largeur physique de 3 pouces. Remarques similaires s’appliquent à la hauteur en pixels et une hauteur physique.  
  
 Cette méthode dessine une image en utilisant sa taille physique, donc l’image aura sa taille correcte en pouces, quelle que soit la résolution (points par pouce) du périphérique d’affichage. Par exemple, qu'une image a une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce. Si vous appelez cette méthode pour dessiner cette image sur un appareil qui a une résolution de 96 points par pouce, la largeur en pixels de l’image rendue sera de (216/72) * 96 = 288.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée un point sur lequel dessiner le coin supérieur gauche de l’image.  
  
-   Dessine l’image non ajustée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme.</param>
        <summary>Dessine le <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille et la forme précisées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme.  
  
 L’image représentée par le `image` objet est ajustée et inclinée pour s’ajuster à la forme du parallélogramme spécifié par le `destPoints` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un parallélogramme dans lequel dessiner l’image.  
  
-   Dessine l’image à l’écran.  
  
 La position du parallélogramme localise l’image sur l’écran et la taille de l’image d’origine et la taille et la forme du parallélogramme déterminent la mise à l’échelle et l’inclinaison de l’image dessinée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image dessinée.</param>
        <summary>Dessine le <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’image représentée par le `image` objet est ajusté aux dimensions de la `rect` rectangle.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée un rectangle dans lequel dessiner l’image.  
  
-   Dessine l’image à l’écran.  
  
 La position du rectangle localise l’image sur l’écran et la taille de l’image d’origine et la taille du rectangle déterminent la mise à l’échelle de l’image dessinée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie l'emplacement et la taille de l'image dessinée.</param>
        <summary>Dessine le <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’image représentée par le `image` objet est ajusté aux dimensions de la `rect` rectangle.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée un rectangle dans lequel dessiner l’image.  
  
-   Dessine l’image à l’écran.  
  
 La position du rectangle localise l’image sur l’écran et la taille d’origine de l’image et la taille du rectangle déterminent la mise à l’échelle de l’image dessinée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche de l'image dessinée.</param>
        <summary>Dessine l'image spécifiée, en utilisant sa taille physique d'origine, à l'emplacement indiqué par une paire de coordonnées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> stocke une valeur pour la largeur en pixels et une valeur pour la résolution horizontale (points par pouce). La largeur physique, mesurée en pouces, d’une image est la largeur en pixels divisée par la résolution horizontale. Par exemple, une image avec une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce a une largeur physique de 3 pouces. Remarques similaires s’appliquent à la hauteur en pixels et une hauteur physique.  
  
 Le <xref:System.Drawing.Graphics.DrawImage%2A> méthode dessine une image en utilisant sa taille physique, donc l’image aura sa taille correcte en pouces, quelle que soit la résolution (points par pouce) du périphérique d’affichage. Par exemple, qu'une image a une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce. Si vous appelez <xref:System.Drawing.Graphics.DrawImage%2A> pour dessiner cette image sur un appareil qui a une résolution de 96 points par pouce, la largeur en pixels de l’image rendue sera de (216/72) * 96 = 288.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple, SampImag.jpg, dans le dossier de l’exemple.  
  
-   Crée les coordonnées d’un point sur lequel dessiner le coin supérieur gauche de l’image.  
  
-   Dessine l’image non ajustée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche de l'image dessinée.</param>
        <summary>Dessine le <see cref="T:System.Drawing.Image" /> spécifié, en utilisant sa taille physique d'origine, à l'emplacement indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> stocke une valeur pour la largeur en pixels et une valeur pour la résolution horizontale (points par pouce). La largeur physique, mesurée en pouces, d’une image est la largeur en pixels divisée par la résolution horizontale. Par exemple, une image avec une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce a une largeur physique de 3 pouces. Remarques similaires s’appliquent à la hauteur en pixels et une hauteur physique.  
  
 Cette méthode dessine une image en utilisant sa taille physique, donc l’image aura sa taille correcte en pouces, quelle que soit la résolution (points par pouce) du périphérique d’affichage. Par exemple, qu'une image a une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce. Si vous appelez cette méthode pour dessiner cette image sur un appareil qui a une résolution de 96 points par pouce, la largeur en pixels de l’image rendue sera de (216/72) * 96 = 288.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée les coordonnées d’un point sur lequel dessiner le coin supérieur gauche de l’image.  
  
-   Dessine l’image non ajustée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.Point" /> qui définissent un parallélogramme.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie de l'objet <paramref name="image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.Point> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme.  
  
 Le `srcRect` paramètre spécifie une partie rectangulaire de la `image` objet sur lequel dessiner. Cette partie est ajustée et inclinée pour tenir à l’intérieur du parallélogramme spécifié par le `destPoints` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un parallélogramme dans lequel dessiner l’image.  
  
-   Crée un rectangle pour sélectionner la partie de l’image à dessiner.  
  
-   Définit les unités de dessin au pixel graphics.  
  
-   Dessine l’image à l’écran.  
  
 La position du parallélogramme localise l’image sur l’écran et la taille du rectangle et la taille et la forme du parallélogramme déterminent la mise à l’échelle et l’inclinaison de l’image dessinée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie de l'objet <paramref name="image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme.  
  
 Le `srcRect` paramètre spécifie une partie rectangulaire de la `image` objet sur lequel dessiner. Cette partie est ajustée et inclinée pour tenir à l’intérieur du parallélogramme spécifié par le `destPoints` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un parallélogramme de destination dans lequel dessiner l’image.  
  
-   Crée un rectangle source à partir duquel extraire une partie de l’image.  
  
-   Définit l’unité de mesure du rectangle source pixels.  
  
-   Dessine l’image à l’écran.  
  
 La position du parallélogramme destination localise l’image sur l’écran, la taille du rectangle source et la taille et la forme du parallélogramme de destination déterminent la mise à l’échelle et l’inclinaison de l’image dessinée, et détermine la taille du rectangle partie de l’image d’origine est dessinée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image dessinée. L'image est ajustée de manière à tenir à l'intérieur du rectangle.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie de l'objet <paramref name="image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `srcRect` paramètre spécifie une partie rectangulaire de la `image` objet sur lequel dessiner. Cette partie est étirée pour remplir l’intérieur du rectangle spécifié par le `destRect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée un rectangle de destination dans lequel dessiner l’image.  
  
-   Crée un rectangle source à partir duquel extraire une partie de l’image.  
  
-   Définit l’unité de mesure du rectangle source pixels.  
  
-   Dessine l’image à l’écran.  
  
 La position du rectangle de destination localise l’image sur l’écran, les tailles des rectangles source et destination déterminent la mise à l’échelle de l’image dessinée et la taille du rectangle source détermine la partie de l’image d’origine est dessinée à le écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie l'emplacement et la taille de l'image dessinée. L'image est ajustée de manière à tenir à l'intérieur du rectangle.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie de l'objet <paramref name="image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `srcRect` paramètre spécifie une partie rectangulaire de la `image` objet sur lequel dessiner. Cette partie est étirée pour remplir l’intérieur du rectangle spécifié par le `destRect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée un rectangle de destination dans lequel dessiner l’image.  
  
-   Crée un rectangle source à partir duquel extraire une partie de l’image.  
  
-   Définit l’unité de mesure du rectangle source pixels.  
  
-   Dessine l’image à l’écran.  
  
 La position du rectangle de destination localise l’image sur l’écran, les tailles des rectangles source et destination déterminent la mise à l’échelle de l’image dessinée et la taille du rectangle source détermine la partie de l’image d’origine est dessinée à le écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.Point" /> qui définissent un parallélogramme.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie de l'objet <paramref name="image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour l'objet <paramref name="image" />.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.Point> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme.  
  
 Le `srcRect` paramètre spécifie une partie rectangulaire de la`image` objet sur lequel dessiner. Cette partie est ajustée et inclinée pour tenir à l’intérieur du parallélogramme spécifié par le `destPoints` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un parallélogramme dans lequel dessiner l’image.  
  
-   Crée un rectangle pour sélectionner la partie de l’image à dessiner.  
  
-   Définit les unités de dessin au pixel graphics.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre parallélogramme dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour un parallélogramme d’origine, non ajusté, la position localise l’image sur l’écran et la taille du rectangle et la taille et la forme du parallélogramme déterminent la mise à l’échelle et l’inclinaison de l’image dessinée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie de l'objet <paramref name="image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour l'objet <paramref name="image" />.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme.  
  
 Le `srcRect` paramètre spécifie une partie rectangulaire de la `image` objet sur lequel dessiner. Cette partie est ajustée et inclinée pour tenir à l’intérieur du parallélogramme spécifié par le `destPoints` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un parallélogramme de destination dans lequel dessiner l’image.  
  
-   Crée un rectangle source à partir duquel extraire une partie de l’image.  
  
-   Définit l’unité de mesure du rectangle source pixels.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre parallélogramme dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour un parallélogramme de destination d’origine, non ajusté, la position localise l’image sur l’écran, la taille du rectangle source et la taille et la forme du parallélogramme destination détermine la mise à l’échelle et l’inclinaison de l’image dessinée et la taille de la rectangle détermine la partie de l’image d’origine est dessinée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie de l'objet <paramref name="image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <summary>Dessine une partie d'une image à un emplacement indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> stocke une valeur pour la largeur en pixels et une valeur pour la résolution horizontale (points par pouce). La largeur physique, mesurée en pouces, d’une image est la largeur en pixels divisée par la résolution horizontale. Par exemple, une image avec une largeur en pixels de 360 et une résolution horizontale de 72 points par pouce a une largeur physique de 5 pouces. Remarques similaires s’appliquent à la hauteur en pixels et une hauteur physique.  
  
 Cette méthode dessine une partie d’une image en utilisant sa taille physique, donc la partie de l’image aura sa taille correcte en pouces, quelle que soit la résolution (points par pouce) du périphérique d’affichage. Par exemple, qu'une partie de l’image a une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce. Si vous appelez cette méthode pour dessiner cette partie de l’image sur un appareil qui a une résolution de 96 points par pouce, la largeur en pixels de la partie de l’image rendue sera de (216/72) * 96 = 288.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée les coordonnées sur lequel dessiner le coin supérieur gauche de l’image.  
  
-   Crée un rectangle source à partir duquel extraire une partie de l’image.  
  
-   Définit l’unité de mesure du rectangle source pixels.  
  
-   Dessine l’image à l’écran.  
  
 La taille du rectangle source détermine la partie de l’image d’origine non ajustée est dessinée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="width">Largeur de l'image dessinée.</param>
        <param name="height">Hauteur de l'image dessinée.</param>
        <summary>Dessine le <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le rectangle défini par le `x`, `y`, `width`, et `height` paramètres détermine la position et la taille de l’image dessinée.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée la position et la taille d’un rectangle dans lequel dessiner l’image.  
  
-   Dessine l’image à l’écran.  
  
 La position du rectangle localise l’image sur l’écran et la taille de l’image d’origine et la taille du rectangle déterminent la mise à l’échelle de l’image dessinée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie de <see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <summary>Dessine une partie d'une image à un emplacement indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> stocke une valeur pour la largeur en pixels et une valeur pour la résolution horizontale (points par pouce). La largeur physique, mesurée en pouces, d’une image est la largeur en pixels divisée par la résolution horizontale. Par exemple, une image avec une largeur en pixels de 360 et une résolution horizontale de 72 points par pouce a une largeur physique de 5 pouces. Remarques similaires s’appliquent à la hauteur en pixels et une hauteur physique.  
  
 Cette méthode dessine une partie d’une image en utilisant sa taille physique, donc la partie de l’image aura sa taille correcte en pouces, quelle que soit la résolution (points par pouce) du périphérique d’affichage. Par exemple, qu'une partie de l’image a une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce. Si vous appelez cette méthode pour dessiner cette partie de l’image sur un appareil qui a une résolution de 96 points par pouce, la largeur en pixels de la partie de l’image rendue sera de (216/72) * 96 = 288.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée les coordonnées sur lequel dessiner le coin supérieur gauche de l’image.  
  
-   Crée un rectangle source à partir duquel extraire une partie de l’image.  
  
-   Définit l’unité de mesure du rectangle source pixels.  
  
-   Dessine l’image à l’écran.  
  
 La taille du rectangle source détermine la partie de l’image d’origine non ajustée est dessinée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="width">Largeur de l'image dessinée.</param>
        <param name="height">Hauteur de l'image dessinée.</param>
        <summary>Dessine le <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le rectangle défini par le `x`, `y`, `width`, et `height` paramètres détermine la position et la taille de l’image dessinée.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée la position et la taille d’un rectangle dans lequel dessiner l’image.  
  
-   Dessine l’image à l’écran.  
  
 La position du rectangle localise l’image sur l’écran et la taille de l’image d’origine et la taille du rectangle déterminent la mise à l’échelle de l’image dessinée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie de l'objet <paramref name="image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour l'objet <paramref name="image" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> qui spécifie une méthode à appeler lors du dessin de l'image. Cette méthode est fréquemment appelée pour vérifier si l'exécution de la méthode <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> doit être arrêtée selon des critères déterminés par l'application.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme.  
  
 Le `srcRect` paramètre spécifie une partie rectangulaire de la `image` objet sur lequel dessiner. Cette partie est ajustée et inclinée pour tenir à l’intérieur du parallélogramme spécifié par le `destPoints` paramètre.  
  
 Cette surcharge avec le `callback` paramètre offre la possibilité d’arrêter le dessin d’une image une fois qu’il démarre en fonction de critères déterminés par l’application. Par exemple, une application commence à dessiner une image de grande taille et l’utilisateur peut faire défiler l’image en dehors de l’écran, dans lequel cas l’application peut arrêter le dessin.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code définit tout d’abord la méthode de rappel pour le <xref:System.Drawing.Graphics.DrawImageAbort> délégué ; la définition est simpliste et se contente pour voir si le <xref:System.Drawing.Graphics.DrawImage%2A> méthode appelle avec une valeur null `callBackData` paramètre. Le corps principal de l’exemple effectue les actions suivantes :  
  
-   Crée une instance de la <xref:System.Drawing.Graphics.DrawImageAbort> méthode de rappel :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un parallélogramme dans lequel dessiner l’image.  
  
-   Crée un rectangle pour sélectionner la partie de l’image à dessiner.  
  
-   Définit les unités de dessin au pixel graphics.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre parallélogramme dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour un parallélogramme d’origine, non ajusté, la position localise l’image sur l’écran et la taille du rectangle et la taille et la forme du parallélogramme déterminent la mise à l’échelle et l’inclinaison de l’image dessinée.  
  
 Étant donné que cet exemple utilise une surcharge qui ne passe pas un `callBackData` paramètre, le <xref:System.Drawing.Graphics.DrawImageAbort> rappel retourne `true`, ce qui conduit le <xref:System.Drawing.Graphics.DrawImage%2A> méthode à la fin et le code de gestion des exceptions inclus dans l’exemple imprime le texte de l’exception au lieu de dessiner l’image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie de l'objet <paramref name="image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour l'objet <paramref name="image" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> qui spécifie une méthode à appeler lors du dessin de l'image. Cette méthode est fréquemment appelée pour vérifier si l'exécution de la méthode <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> doit être arrêtée selon des critères déterminés par l'application.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme.  
  
 Le `srcRect` paramètre spécifie une partie rectangulaire de la `image` objet sur lequel dessiner. Cette partie est ajustée et inclinée pour tenir à l’intérieur du parallélogramme spécifié par le `destPoints` paramètre.  
  
 Cette surcharge avec le `callback` paramètre offre la possibilité d’arrêter le dessin d’une image une fois qu’il démarre en fonction de critères déterminés par l’application. Par exemple, une application commence à dessiner une image de grande taille et l’utilisateur peut faire défiler l’image en dehors de l’écran, dans lequel cas l’application peut arrêter le dessin.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code définit tout d’abord la méthode de rappel pour le <xref:System.Drawing.Graphics.DrawImageAbort> délégué ; la définition est simpliste et se contente pour voir si le <xref:System.Drawing.Graphics.DrawImage%2A> méthode appelle avec une valeur null `callBackData` paramètre. Le corps principal de l’exemple effectue les actions suivantes :  
  
-   Crée une instance de la <xref:System.Drawing.Graphics.DrawImageAbort> méthode de rappel.  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un parallélogramme dans lequel dessiner l’image.  
  
-   Crée un rectangle pour sélectionner la partie de l’image à dessiner.  
  
-   Définit les unités de dessin au pixel graphics.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre parallélogramme dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour un parallélogramme d’origine, non ajusté, la position localise l’image sur l’écran et la taille du rectangle et la taille et la forme du parallélogramme déterminent la mise à l’échelle et l’inclinaison de l’image dessinée.  
  
 Étant donné que cet exemple utilise une surcharge qui ne passe pas un `callBackData` paramètre, le <xref:System.Drawing.Graphics.DrawImageAbort> rappel retourne `true`, ce qui conduit le <xref:System.Drawing.Graphics.DrawImage%2A> méthode à la fin et le code de gestion des exceptions inclus dans l’exemple imprime le texte de l’exception au lieu de dessiner l’image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie de l'objet <paramref name="image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour l'objet <paramref name="image" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> qui spécifie une méthode à appeler lors du dessin de l'image. Cette méthode est fréquemment appelée pour vérifier si l'exécution de la méthode <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> doit être arrêtée selon des critères déterminés par l'application.</param>
        <param name="callbackData">Valeur spécifiant d'autres données pour le délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> à utiliser pour vérifier si l'exécution de la méthode <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> doit être arrêtée.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme.  
  
 Le `srcRect` paramètre spécifie une partie rectangulaire de la `image` objet sur lequel dessiner. Cette partie est ajustée et inclinée pour tenir à l’intérieur du parallélogramme spécifié par le `destPoints` paramètre.  
  
 Cette surcharge avec le `callback` et `callbackData` paramètres offre la possibilité d’arrêter le dessin d’une image une fois qu’il démarre en fonction des critères et des données déterminés par l’application. Par exemple, une application commence à dessiner une image de grande taille et l’utilisateur peut faire défiler l’image en dehors de l’écran, dans lequel cas l’application peut arrêter le dessin.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code définit tout d’abord la méthode de rappel pour le <xref:System.Drawing.Graphics.DrawImageAbort> délégué ; la définition est simpliste et se contente pour voir si le <xref:System.Drawing.Graphics.DrawImage%2A> méthode appelle avec une valeur null `callBackData` paramètre. Le corps principal de l’exemple effectue les actions suivantes :  
  
-   Crée une instance de la <xref:System.Drawing.Graphics.DrawImageAbort> méthode de rappel.  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un parallélogramme dans lequel dessiner l’image.  
  
-   Crée un rectangle pour sélectionner la partie de l’image à dessiner.  
  
-   Définit les unités de dessin au pixel graphics.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre parallélogramme dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour un parallélogramme d’origine, non ajusté, la position localise l’image sur l’écran et la taille du rectangle et la taille et la forme du parallélogramme déterminent la mise à l’échelle et l’inclinaison de l’image dessinée.  
  
 Étant donné que cet exemple utilise une surcharge qui passe un `callBackData` paramètre, le <xref:System.Drawing.Graphics.DrawImageAbort> rappel retourne `false`, ce qui conduit le <xref:System.Drawing.Graphics.DrawImage%2A> méthode pour continuer et l’exemple dessine l’image ajustée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie de l'objet <paramref name="image" /> à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure utilisées par le paramètre <paramref name="srcRect" />.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour l'objet <paramref name="image" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> qui spécifie une méthode à appeler lors du dessin de l'image. Cette méthode est fréquemment appelée pour vérifier si l'exécution de la méthode <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> doit être arrêtée selon des critères déterminés par l'application.</param>
        <param name="callbackData">Valeur spécifiant d'autres données pour le délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> à utiliser pour vérifier si l'exécution de la méthode <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> doit être arrêtée.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme.  
  
 Le `srcRect` paramètre spécifie une partie rectangulaire de la `image` objet sur lequel dessiner. Cette partie est ajustée et inclinée pour tenir à l’intérieur du parallélogramme spécifié par le `destPoints` paramètre.  
  
 Cette surcharge avec le `callback` et `callbackData` paramètres offre la possibilité d’arrêter le dessin d’une image une fois qu’il démarre en fonction des critères et des données déterminés par l’application. Par exemple, une application commence à dessiner une image de grande taille et l’utilisateur peut faire défiler l’image en dehors de l’écran, dans lequel cas l’application peut arrêter le dessin.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la `Pa` <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code définit tout d’abord la méthode de rappel pour le <xref:System.Drawing.Graphics.DrawImageAbort> délégué ; la définition est simpliste et se contente pour voir si le <xref:System.Drawing.Graphics.DrawImage%2A> méthode appelle avec une valeur null `callBackData` paramètre. Le corps principal de l’exemple effectue les actions suivantes :  
  
-   Crée une instance de la <xref:System.Drawing.Graphics.DrawImageAbort> méthode de rappel.  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un parallélogramme dans lequel dessiner l’image.  
  
-   Crée un rectangle pour sélectionner la partie de l’image à dessiner.  
  
-   Définit les unités de dessin au pixel graphics.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre parallélogramme dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour un parallélogramme d’origine, non ajusté, la position localise l’image sur l’écran et la taille du rectangle et la taille et la forme du parallélogramme déterminent la mise à l’échelle et l’inclinaison de l’image dessinée.  
  
 Étant donné que cet exemple utilise une surcharge qui passe un `callBackData` paramètre, le <xref:System.Drawing.Graphics.DrawImageAbort> rappel retourne `false`, ce qui conduit le <xref:System.Drawing.Graphics.DrawImage%2A> méthode pour continuer et l’exemple dessine l’image ajustée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image dessinée. L'image est ajustée de manière à tenir à l'intérieur du rectangle.</param>
        <param name="srcX">Coordonnée x de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcY">Coordonnée y de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcWidth">Largeur de la partie de l'image source à dessiner.</param>
        <param name="srcHeight">Hauteur de la partie de l'image source à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure permettant de déterminer le rectangle source.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `srcX`, `srcY`, `srcWidth`, et `srcHeight` les paramètres spécifient une partie rectangulaire de la `image` objet sur lequel dessiner. Le rectangle est relatif à l’angle supérieur gauche de l’image source. Cette partie est étirée pour remplir l’intérieur du rectangle spécifié par le `destRect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée un rectangle de destination dans lequel dessiner l’image.  
  
-   Crée les coordonnées d’un rectangle source à partir duquel extraire une partie de l’image.  
  
-   Définit l’unité de mesure du rectangle source pixels.  
  
-   Dessine l’image à l’écran.  
  
 La position du rectangle de destination localise l’image sur l’écran et les tailles des rectangles source et destination déterminent la mise à l’échelle de l’image dessinée, et la taille du rectangle source détermine la partie de l’image d’origine est dessinée à le écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image dessinée. L'image est ajustée de manière à tenir à l'intérieur du rectangle.</param>
        <param name="srcX">Coordonnée x de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcY">Coordonnée y de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcWidth">Largeur de la partie de l'image source à dessiner.</param>
        <param name="srcHeight">Hauteur de la partie de l'image source à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure permettant de déterminer le rectangle source.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `srcX`, `srcY`, `srcWidth`, et `srcHeight` les paramètres spécifient une partie rectangulaire de la `image` objet sur lequel dessiner. Le rectangle est relatif à l’angle supérieur gauche de l’image source. Cette partie est étirée pour remplir l’intérieur du rectangle spécifié par le `destRect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée les coordonnées d’un rectangle de destination dans lequel dessiner l’image.  
  
-   Crée un rectangle source à partir duquel extraire une partie de l’image.  
  
-   Définit l’unité de mesure du rectangle source pixels.  
  
-   Dessine l’image à l’écran.  
  
 La position du rectangle de destination localise l’image sur l’écran, les tailles des rectangles source et destination déterminent la mise à l’échelle de l’image dessinée et la taille du rectangle source détermine la partie de l’image d’origine est dessinée à le écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image dessinée. L'image est ajustée de manière à tenir à l'intérieur du rectangle.</param>
        <param name="srcX">Coordonnée x de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcY">Coordonnée y de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcWidth">Largeur de la partie de l'image source à dessiner.</param>
        <param name="srcHeight">Hauteur de la partie de l'image source à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure permettant de déterminer le rectangle source.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour l'objet <paramref name="image" />.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `srcX`, `srcY`, `srcWidth`, et `srcHeight` les paramètres spécifient une partie rectangulaire de la `image` objet sur lequel dessiner. Le rectangle est relatif à l’angle supérieur gauche de l’image source. Cette partie est étirée pour remplir l’intérieur du rectangle spécifié par le `destRect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée un rectangle de destination dans lequel dessiner l’image.  
  
-   Crée les coordonnées d’un rectangle source à partir duquel extraire une partie de l’image.  
  
-   Définit l’unité de mesure du rectangle source pixels.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre rectangle dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour le rectangle de destination d’origine, non ajusté, la position localise l’image sur l’écran et les tailles des rectangles source et destination déterminent la mise à l’échelle de l’image dessinée, et la taille du rectangle source détermine quelle partie de la image d’origine est dessinée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image dessinée. L'image est ajustée de manière à tenir à l'intérieur du rectangle.</param>
        <param name="srcX">Coordonnée x de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcY">Coordonnée y de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcWidth">Largeur de la partie de l'image source à dessiner.</param>
        <param name="srcHeight">Hauteur de la partie de l'image source à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure permettant de déterminer le rectangle source.</param>
        <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour l'objet <paramref name="image" />.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `srcX`, `srcY`, `srcWidth`, et `srcHeight` les paramètres spécifient une partie rectangulaire de la `image` objet sur lequel dessiner. Le rectangle est relatif à l’angle supérieur gauche de l’image source. Cette partie est étirée pour remplir l’intérieur du rectangle spécifié par le `destRect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée un rectangle de destination dans lequel dessiner l’image.  
  
-   Crée les coordonnées d’un rectangle source à partir duquel extraire une partie de l’image.  
  
-   Définit l’unité de mesure du rectangle source pixels.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre rectangle dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour le rectangle de destination d’origine, non ajusté, la position localise l’image sur l’écran et les tailles des rectangles source et destination déterminent la mise à l’échelle de l’image dessinée, et la taille du rectangle source détermine quelle partie de la image d’origine est dessinée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image dessinée. L'image est ajustée de manière à tenir à l'intérieur du rectangle.</param>
        <param name="srcX">Coordonnée x de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcY">Coordonnée y de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcWidth">Largeur de la partie de l'image source à dessiner.</param>
        <param name="srcHeight">Hauteur de la partie de l'image source à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure permettant de déterminer le rectangle source.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour <paramref name="image" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> qui spécifie une méthode à appeler lors du dessin de l'image. Cette méthode est fréquemment appelée pour vérifier si l'exécution de la méthode <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> doit être arrêtée selon des critères déterminés par l'application.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `srcX`, `srcY`, `srcWidth`, et `srcHeight` les paramètres spécifient une partie rectangulaire de la `image` objet sur lequel dessiner. Le rectangle est relatif à l’angle supérieur gauche de l’image source. Cette partie est étirée pour remplir l’intérieur du rectangle spécifié par le `destRect` objet.  
  
 Cette surcharge avec le `callback` paramètre offre la possibilité d’arrêter le dessin d’une image une fois qu’il démarre en fonction de critères déterminés par l’application. Par exemple, une application commence à dessiner une image de grande taille et l’utilisateur peut faire défiler l’image en dehors de l’écran, dans lequel cas l’application peut arrêter le dessin.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code définit tout d’abord la méthode de rappel pour le <xref:System.Drawing.Graphics.DrawImageAbort> délégué ; la définition est simpliste et se contente pour voir si le <xref:System.Drawing.Graphics.DrawImage%2A> méthode appelle avec une valeur null `callBackData` paramètre. Le corps principal de l’exemple effectue les actions suivantes :  
  
-   Crée une instance de la <xref:System.Drawing.Graphics.DrawImageAbort> méthode de rappel.  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un rectangle de destination dans lequel dessiner l’image.  
  
-   Crée un rectangle source pour sélectionner la partie de l’image à dessiner.  
  
-   Définit les unités de dessin au pixel graphics.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre rectangle de destination dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour le rectangle de destination d’origine, non ajusté, la position localise l’image sur l’écran et la taille du rectangle source et la taille et la forme du rectangle de destination déterminent la mise à l’échelle de l’image dessinée.  
  
 Étant donné que cet exemple utilise une surcharge qui ne passe pas un `callBackData` paramètre, le <xref:System.Drawing.Graphics.DrawImageAbort> rappel retourne `true`, ce qui conduit le <xref:System.Drawing.Graphics.DrawImage%2A> méthode à la fin et le code de gestion des exceptions inclus dans l’exemple imprime le texte de l’exception au lieu de dessiner l’image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image dessinée. L'image est ajustée de manière à tenir à l'intérieur du rectangle.</param>
        <param name="srcX">Coordonnée x de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcY">Coordonnée y de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcWidth">Largeur de la partie de l'image source à dessiner.</param>
        <param name="srcHeight">Hauteur de la partie de l'image source à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure permettant de déterminer le rectangle source.</param>
        <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour l'objet <paramref name="image" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> qui spécifie une méthode à appeler lors du dessin de l'image. Cette méthode est fréquemment appelée pour vérifier si l'exécution de la méthode <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> doit être arrêtée selon des critères déterminés par l'application.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `srcX`, `srcY`, `srcWidth`, et `srcHeight` les paramètres spécifient une partie rectangulaire de la `image` objet sur lequel dessiner. Le rectangle est relatif à l’angle supérieur gauche de l’image source. Cette partie est étirée pour remplir l’intérieur du rectangle spécifié par le `destRect` paramètre.  
  
 Cette surcharge avec le `callback` paramètre offre la possibilité d’arrêter le dessin d’une image une fois qu’il démarre en fonction de critères déterminés par l’application. Par exemple, une application commence à dessiner une image de grande taille et l’utilisateur peut faire défiler l’image en dehors de l’écran, dans lequel cas l’application peut arrêter le dessin.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code définit tout d’abord la méthode de rappel pour le <xref:System.Drawing.Graphics.DrawImageAbort> délégué ; la définition est simpliste et se contente pour voir si le <xref:System.Drawing.Graphics.DrawImage%2A> méthode appelle avec une valeur null `callBackData` paramètre. Le corps principal de l’exemple effectue les actions suivantes :  
  
-   Crée une instance de la <xref:System.Drawing.Graphics.DrawImageAbort> méthode de rappel.  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un rectangle de destination dans lequel dessiner l’image.  
  
-   Crée un rectangle source pour sélectionner la partie de l’image à dessiner.  
  
-   Définit les unités de dessin au pixel graphics.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre rectangle de destination dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour le rectangle de destination d’origine, non ajusté, la position localise l’image sur l’écran et la taille du rectangle source et la taille et la forme du rectangle de destination déterminent la mise à l’échelle de l’image dessinée.  
  
 Étant donné que cet exemple utilise une surcharge qui ne passe pas un `callBackData` paramètre, le <xref:System.Drawing.Graphics.DrawImageAbort> rappel retourne `true`, ce qui conduit le <xref:System.Drawing.Graphics.DrawImage%2A> méthode à la fin et le code de gestion des exceptions inclus dans l’exemple imprime le texte de l’exception au lieu de dessiner l’image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image dessinée. L'image est ajustée de manière à tenir à l'intérieur du rectangle.</param>
        <param name="srcX">Coordonnée x de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcY">Coordonnée y de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcWidth">Largeur de la partie de l'image source à dessiner.</param>
        <param name="srcHeight">Hauteur de la partie de l'image source à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure permettant de déterminer le rectangle source.</param>
        <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour l'objet <paramref name="image" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> qui spécifie une méthode à appeler lors du dessin de l'image. Cette méthode est fréquemment appelée pour vérifier si l'exécution de la méthode <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> doit être arrêtée selon des critères déterminés par l'application.</param>
        <param name="callbackData">Valeur spécifiant d'autres données pour le délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> à utiliser pour vérifier si l'exécution de la méthode <see langword="DrawImage" /> doit être arrêtée.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `srcX`, `srcY`, `srcWidth`, et `srcHeight` les paramètres spécifient une partie rectangulaire de la `image` objet sur lequel dessiner. Le rectangle est relatif à l’angle supérieur gauche de l’image source. Cette partie est étirée pour remplir l’intérieur du rectangle spécifié par le `destRect` paramètre.  
  
 Cette surcharge avec le `callback` et `callbackData` paramètres offre la possibilité d’arrêter le dessin d’une image une fois qu’il démarre en fonction des critères et des données déterminés par l’application. Par exemple, une application commence à dessiner une image de grande taille et l’utilisateur peut faire défiler l’image en dehors de l’écran, dans lequel cas l’application peut arrêter le dessin.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code définit tout d’abord la méthode de rappel pour le <xref:System.Drawing.Graphics.DrawImageAbort> délégué ; la définition est simpliste et se contente pour voir si le <xref:System.Drawing.Graphics.DrawImage%2A> méthode appelle avec une valeur null `callBackData` paramètre. Le corps principal de l’exemple effectue les actions suivantes :  
  
-   Crée une instance de la <xref:System.Drawing.Graphics.DrawImageAbort> méthode de rappel.  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un rectangle de destination dans lequel dessiner l’image.  
  
-   Crée un rectangle source pour sélectionner la partie de l’image à dessiner.  
  
-   Définit les unités de dessin au pixel graphics.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre rectangle de destination dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour le rectangle de destination d’origine, non ajusté, la position localise l’image sur l’écran et la taille du rectangle source et la taille et la forme du rectangle de destination déterminent la mise à l’échelle de l’image dessinée.  
  
 Étant donné que cet exemple utilise une surcharge qui passe un `callBackData` paramètre, le <xref:System.Drawing.Graphics.DrawImageAbort> rappel retourne `false`, ce qui conduit le <xref:System.Drawing.Graphics.DrawImage%2A> méthode pour continuer et l’exemple dessine l’image ajustée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille de l'image dessinée. L'image est ajustée de manière à tenir à l'intérieur du rectangle.</param>
        <param name="srcX">Coordonnée x de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcY">Coordonnée y de l'angle supérieur gauche de la partie de l'image source à dessiner.</param>
        <param name="srcWidth">Largeur de la partie de l'image source à dessiner.</param>
        <param name="srcHeight">Hauteur de la partie de l'image source à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie les unités de mesure permettant de déterminer le rectangle source.</param>
        <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations de recoloriage et de gamma pour l'objet <paramref name="image" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> qui spécifie une méthode à appeler lors du dessin de l'image. Cette méthode est fréquemment appelée pour vérifier si l'exécution de la méthode <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> doit être arrêtée selon des critères déterminés par l'application.</param>
        <param name="callbackData">Valeur spécifiant d'autres données pour le délégué <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> à utiliser pour vérifier si l'exécution de la méthode <see langword="DrawImage" /> doit être arrêtée.</param>
        <summary>Dessine la partie mentionnée du <see cref="T:System.Drawing.Image" /> spécifié à l'emplacement indiqué avec la taille précisée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `srcX`, `srcY`, `srcWidth`, et `srcHeight` les paramètres spécifient une partie rectangulaire de la `image` objet sur lequel dessiner. Le rectangle est relatif à l’angle supérieur gauche de l’image source. Cette partie est étirée pour remplir l’intérieur du rectangle spécifié par le `destRect` paramètre.  
  
 Cette surcharge avec le `callback` et `callbackData` paramètres offre la possibilité d’arrêter le dessin d’une image une fois qu’il démarre en fonction des critères et des données déterminés par l’application. Par exemple, une application commence à dessiner une image de grande taille et l’utilisateur peut faire défiler l’image en dehors de l’écran, dans lequel cas l’application peut arrêter le dessin.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code définit tout d’abord la méthode de rappel pour le <xref:System.Drawing.Graphics.DrawImageAbort> délégué ; la définition est simpliste et se contente pour voir si le <xref:System.Drawing.Graphics.DrawImage%2A> méthode appelle avec une valeur null `callBackData` paramètre. Le corps principal de l’exemple effectue les actions suivantes :  
  
-   Crée une instance de la <xref:System.Drawing.Graphics.DrawImageAbort> méthode de rappel.  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée des points qui définissent un rectangle de destination dans lequel dessiner l’image.  
  
-   Crée un rectangle source pour sélectionner la partie de l’image à dessiner.  
  
-   Définit les unités de dessin au pixel graphics.  
  
-   Dessine l’image d’origine à l’écran.  
  
-   Crée un autre rectangle de destination dans lequel dessiner une image ajustée.  
  
-   Crée et définit les attributs de l’image ajustée à avoir une valeur de gamma plus grande que la normale.  
  
-   Dessine l’image ajustée à l’écran.  
  
 Pour le rectangle de destination d’origine, non ajusté, la position localise l’image sur l’écran et la taille du rectangle source et la taille et la forme du rectangle de destination déterminent la mise à l’échelle de l’image dessinée.  
  
 Étant donné que cet exemple utilise une surcharge qui passe un `callBackData` paramètre, le <xref:System.Drawing.Graphics.DrawImageAbort> rappel retourne `false`, ce qui conduit le <xref:System.Drawing.Graphics.DrawImage%2A> méthode pour continuer et l’exemple dessine l’image ajustée à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImageUnscaled">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine l'image spécifiée, en utilisant sa taille physique d'origine, à l'emplacement indiqué par une paire de coordonnées.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImageUnscaled (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="point">Structure <see cref="T:System.Drawing.Point" /> qui spécifie l'angle supérieur gauche de l'image dessinée.</param>
        <summary>Dessine une image spécifiée, en utilisant sa taille physique d'origine, à l'emplacement indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> stocke une valeur pour la largeur en pixels et une valeur pour la résolution horizontale (points par pouce). La largeur physique, mesurée en pouces, d’une image est la largeur en pixels divisée par la résolution horizontale. Par exemple, une image avec une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce a une largeur physique de 3 pouces. Remarques similaires s’appliquent à la hauteur en pixels et une hauteur physique.  
  
 Le <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> méthode dessine une image en utilisant sa taille physique, donc l’image aura sa taille correcte en pouces, quelle que soit la résolution (points par pouce) du périphérique d’affichage. Par exemple, qu'une image a une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce. Si vous appelez <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> pour dessiner cette image sur un appareil qui a une résolution de 96 points par pouce, la largeur en pixels de l’image rendue sera de (216/72) * 96 = 288.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG, le dossier de l’exemple.  
  
-   Crée un point sur lequel dessiner le coin supérieur gauche de l’image.  
  
-   Dessine l’image entière en utilisant sa taille physique.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaled (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" /> qui spécifie l'angle supérieur gauche de l'image dessinée. Les propriétés X et Y du rectangle spécifient l'angle supérieur gauche. Les propriétés Width et Height sont ignorées.</param>
        <summary>Dessine une image spécifiée, en utilisant sa taille physique d'origine, à l'emplacement indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> stocke une valeur pour la largeur en pixels et une valeur pour la résolution horizontale (points par pouce). La largeur physique, mesurée en pouces, d’une image est la largeur en pixels divisée par la résolution horizontale. Par exemple, une image avec une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce a une largeur physique de 3 pouces. Remarques similaires s’appliquent à la hauteur en pixels et une hauteur physique.  
  
 Le <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> méthode dessine une image en utilisant sa taille physique, donc l’image aura sa taille correcte en pouces, quelle que soit la résolution (points par pouce) du périphérique d’affichage. Par exemple, qu'une image a une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce. Si vous appelez <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> pour dessiner cette image sur un appareil qui a une résolution de 96 points par pouce, la largeur en pixels de l’image rendue sera de (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche de l'image dessinée.</param>
        <summary>Dessine l'image spécifiée, en utilisant sa taille physique d'origine, à l'emplacement indiqué par une paire de coordonnées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> stocke une valeur pour la largeur en pixels et une valeur pour la résolution horizontale (points par pouce). La largeur physique, mesurée en pouces, d’une image est la largeur en pixels divisée par la résolution horizontale. Par exemple, une image avec une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce a une largeur physique de 3 pouces. Remarques similaires s’appliquent à la hauteur en pixels et une hauteur physique.  
  
 Le <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> méthode dessine une image en utilisant sa taille physique, donc l’image aura sa taille correcte en pouces, quelle que soit la résolution (points par pouce) du périphérique d’affichage. Par exemple, qu'une image a une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce. Si vous appelez <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> pour dessiner cette image sur un appareil qui a une résolution de 96 points par pouce, la largeur en pixels de l’image rendue sera de (216/72) * 96 = 288.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une image à partir d’un fichier JPEG,, le dossier de l’exemple.  
  
-   Crée un point sur lequel dessiner le coin supérieur gauche de l’image.  
  
-   Dessine l’image entière en utilisant sa taille physique.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche de l'image dessinée.</param>
        <param name="width">Non utilisé.</param>
        <param name="height">Non utilisé.</param>
        <summary>Dessine une image spécifiée, en utilisant sa taille physique d'origine, à l'emplacement indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> stocke une valeur pour la largeur en pixels et une valeur pour la résolution horizontale (points par pouce). La largeur physique, mesurée en pouces, d’une image est la largeur en pixels divisée par la résolution horizontale. Par exemple, une image avec une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce a une largeur physique de 3 pouces. Remarques similaires s’appliquent à la hauteur en pixels et une hauteur physique.  
  
 Le <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> méthode dessine une image en utilisant sa taille physique, donc l’image aura sa taille correcte en pouces, quelle que soit la résolution (points par pouce) du périphérique d’affichage. Par exemple, qu'une image a une largeur en pixels de 216 et une résolution horizontale de 72 points par pouce. Si vous appelez <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> pour dessiner cette image sur un appareil qui a une résolution de 96 points par pouce, la largeur en pixels de l’image rendue sera de (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaledAndClipped(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaledAndClipped(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaledAndClipped : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaledAndClipped (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" /> dans lequel dessiner l'image.</param>
        <summary>Dessine l'image spécifiée sans la mettre à l'échelle et la découpe, si nécessaire, afin qu'elle tienne dans le rectangle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant décrit comment utiliser la méthode <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A>. Pour exécuter cet exemple, collez-le dans un formulaire Windows. Gérer le formulaire <xref:System.Windows.Forms.Control.Paint> événements et les appels le `DrawImageUnscaled` méthode à partir de la <xref:System.Windows.Forms.Control.Paint> méthode de gestion des événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine une ligne reliant les deux points spécifiés par les paires de coordonnées.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la ligne.</param>
        <param name="pt1">Structure <see cref="T:System.Drawing.Point" /> qui représente le premier point à relier.</param>
        <param name="pt2">Structure <see cref="T:System.Drawing.Point" /> qui représente le deuxième point à relier.</param>
        <summary>Dessine une ligne reliant deux structures <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée des points pour les points de terminaison de la ligne.  
  
-   Dessine la ligne à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Utilisation d'un stylet pour dessiner des lignes et des formes</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la ligne.</param>
        <param name="pt1">Structure <see cref="T:System.Drawing.PointF" /> qui représente le premier point à relier.</param>
        <param name="pt2">Structure <see cref="T:System.Drawing.PointF" /> qui représente le deuxième point à relier.</param>
        <summary>Dessine une ligne reliant deux structures <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une ligne reliant les deux points spécifiés par le `pt1` et p`2` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée des points pour les points de terminaison de la ligne.  
  
-   Dessine la ligne à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Utilisation d'un stylet pour dessiner des lignes et des formes</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la ligne.</param>
        <param name="x1">Coordonnée x du premier point.</param>
        <param name="y1">Coordonnée y du premier point.</param>
        <param name="x2">Coordonnée x du deuxième point.</param>
        <param name="y2">Coordonnée y du deuxième point.</param>
        <summary>Dessine une ligne reliant les deux points spécifiés par les paires de coordonnées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une ligne reliant les deux points spécifiés par le `x1`, `y1`, `x2`, et `y2` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée les coordonnées des points de terminaison de la ligne.  
  
-   Dessine la ligne à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Utilisation d'un stylet pour dessiner des lignes et des formes</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style de la ligne.</param>
        <param name="x1">Coordonnée x du premier point.</param>
        <param name="y1">Coordonnée y du premier point.</param>
        <param name="x2">Coordonnée x du deuxième point.</param>
        <param name="y2">Coordonnée y du deuxième point.</param>
        <summary>Dessine une ligne reliant les deux points spécifiés par les paires de coordonnées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une ligne reliant les deux points spécifiés par le `x1`, `y1`, `x2`, et `y2` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée les coordonnées des points de terminaison de la ligne.  
  
-   Dessine la ligne à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Utilisation d'un stylet pour dessiner des lignes et des formes</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine une série de segments de ligne qui relient les structures <see cref="T:System.Drawing.Point" /> d'un tableau.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style des segments de ligne.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui représentent les points à relier.</param>
        <summary>Dessine une série de segments de ligne qui relient les structures <see cref="T:System.Drawing.Point" /> d'un tableau.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une série de lignes qui connectent un tableau de points d’arrivée. Les deux premiers points dans le tableau de spécifient la première ligne. Chaque point supplémentaire indique la fin d’un segment de ligne dont le point de départ est le point de fin du segment précédent.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un tableau de points des segments de la ligne.  
  
-   Dessine les segments de ligne connectés à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style des segments de ligne.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui représentent les points à relier.</param>
        <summary>Dessine une série de segments de ligne qui relient les structures <see cref="T:System.Drawing.PointF" /> d'un tableau.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine une série de lignes qui connectent un tableau de points d’arrivée. Les deux premiers points dans le tableau de spécifient la première ligne. Chaque point supplémentaire indique la fin d’un segment de ligne dont le point de départ est le point de fin du segment précédent.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Code crée un stylet noir.  
  
-   Crée un tableau de points des segments de la ligne.  
  
-   Dessine les segments de ligne connectés à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPath(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.DrawPath : System.Drawing.Pen * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.DrawPath (pen, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style du tracé.</param>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> à dessiner.</param>
        <summary>Dessine un <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La transformation actuelle dans le contexte graphique est appliquée à la <xref:System.Drawing.Drawing2D.GraphicsPath> avant qu’elle est dessinée.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un objet de chemin d’accès de graphiques et ajoute une ellipse.  
  
-   Crée un stylet noir.  
  
-   Dessine le tracé graphique à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="path" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un secteur défini par une ellipse spécifiée par une paire de coordonnées, une largeur, une hauteur et deux lignes radiales.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style du secteur.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> qui représente le rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="startAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir de l'axe x jusqu'au premier coté du secteur.</param>
        <param name="sweepAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir du paramètre <paramref name="startAngle" /> jusqu'au deuxième coté du secteur.</param>
        <summary>Dessine un secteur défini par une ellipse spécifiée par une structure <see cref="T:System.Drawing.Rectangle" /> et deux lignes radiales.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine un secteur défini par l’arc d’une ellipse et deux lignes radiales qui croisent les points de terminaison de l’arc. L’ellipse est définie par le rectangle englobant. Le secteur est composé des deux lignes radiales définies par le `startAngle` et `sweepAngle` paramètres et l’arc entre les intersections de ces lignes radiales avec l’ellipse.  
  
 Si le `sweepAngle` paramètre est supérieur à 360 degrés ou inférieur à 360 degrés, il est traité comme s’il s’agissait de 360 degrés ou -360 degrés, respectivement.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un rectangle qui délimite une ellipse complète.  
  
-   Définit les angles à partir duquel commencer le dessin (par rapport à l’axe des x) et par le biais duquel (dans le sens horaire dans les deux cas).  
  
-   Dessine le segment sectoriel à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style du secteur.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.RectangleF" /> qui représente le rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="startAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir de l'axe x jusqu'au premier coté du secteur.</param>
        <param name="sweepAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir du paramètre <paramref name="startAngle" /> jusqu'au deuxième coté du secteur.</param>
        <summary>Dessine un secteur défini par une ellipse spécifiée par une structure <see cref="T:System.Drawing.RectangleF" /> et deux lignes radiales.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine un secteur défini par l’arc d’une ellipse et deux lignes radiales qui croisent les points de terminaison de l’arc. L’ellipse est définie par le rectangle englobant. Le secteur est composé des deux lignes radiales définies par le `startAngle` et `sweepAngle` paramètres et l’arc entre les intersections de ces lignes radiales avec l’ellipse.  
  
 Si le `sweepAngle` paramètre est supérieur à 360 degrés ou inférieur à 360 degrés, il est traité comme s’il s’agissait de 360 degrés ou -360 degrés, respectivement.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un rectangle qui délimite une ellipse complète.  
  
-   Définit les angles à partir duquel commencer le dessin (par rapport à l’axe des x) et par le biais duquel (dans le sens horaire dans les deux cas).  
  
-   Dessine le segment sectoriel à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style du secteur.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="y">Coordonnée x de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="width">Largeur du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="height">Hauteur du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="startAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir de l'axe x jusqu'au premier coté du secteur.</param>
        <param name="sweepAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir du paramètre <paramref name="startAngle" /> jusqu'au deuxième coté du secteur.</param>
        <summary>Dessine un secteur défini par une ellipse spécifiée par une paire de coordonnées, une largeur, une hauteur et deux lignes radiales.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine un secteur défini par l’arc d’une ellipse et deux lignes radiales qui croisent les points de terminaison de l’arc. L’ellipse est définie par le rectangle englobant décrit par le `x`, `y`, `width`, et `height` paramètres. Le secteur est composé des deux lignes radiales définies par le `startAngle` et `sweepAngle` paramètres et l’arc entre les intersections de ces lignes radiales avec l’ellipse.  
  
 Si le `sweepAngle` paramètre est supérieur à 360 degrés ou inférieur à 360 degrés, il est traité comme s’il s’agissait de 360 degrés ou -360 degrés, respectivement.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée la position et la taille d’un rectangle qui délimite une ellipse complète.  
  
-   Définit les angles à partir duquel commencer le dessin (par rapport à l’axe des x) et par le biais duquel (dans le sens horaire dans les deux cas).  
  
-   Dessine le secteur à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style du secteur.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="y">Coordonnée x de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="width">Largeur du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="height">Hauteur du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="startAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir de l'axe x jusqu'au premier coté du secteur.</param>
        <param name="sweepAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir du paramètre <paramref name="startAngle" /> jusqu'au deuxième coté du secteur.</param>
        <summary>Dessine un secteur défini par une ellipse spécifiée par une paire de coordonnées, une largeur, une hauteur et deux lignes radiales.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode dessine un secteur défini par l’arc d’une ellipse et deux lignes radiales qui croisent les points de terminaison de l’arc. L’ellipse est définie par le rectangle englobant décrit par le `x`, `y`, `width`, et `height` paramètres. Le secteur est composé des deux lignes radiales définies par le `startAngle` et `sweepAngle` paramètres et l’arc entre les intersections de ces lignes radiales avec l’ellipse.  
  
 Si le `sweepAngle` paramètre est supérieur à 360 degrés ou inférieur à 360 degrés, il est traité comme s’il s’agissait de 360 degrés ou -360 degrés, respectivement.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée la position et la taille d’un rectangle qui délimite une ellipse complète.  
  
-   Définit les angles à partir duquel commencer le dessin (par rapport à l’axe des x) et par le biais duquel (dans le sens horaire dans les deux cas).  
  
-   Dessine le segment sectoriel à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un polygone défini par un tableau de structures <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style du polygone.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui représentent les sommets du polygone.</param>
        <summary>Dessine un polygone défini par un tableau de structures <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque paire de points consécutifs dans le tableau spécifie un côté du polygone. En outre, si le dernier point et le premier point du tableau ne coïncident pas, elles spécifient le dernier côté du polygone.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un tableau de sept points pour les vertex du polygone.  
  
-   Dessine le polygone à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style du polygone.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui représentent les sommets du polygone.</param>
        <summary>Dessine un polygone défini par un tableau de structures <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque paire de points consécutifs dans le tableau spécifie un côté du polygone. En outre, si le dernier point et le premier point du tableau ne coïncident pas, elles spécifient le dernier côté du polygone.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un tableau de sept points pour les vertex du polygone.  
  
-   Dessine le polygone à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un rectangle spécifié par une paire de coordonnées, une largeur et une hauteur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawRectangle (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style du rectangle.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> qui représente le rectangle à dessiner.</param>
        <summary>Dessine un rectangle spécifié par une structure <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la façon de dessiner un <xref:System.Drawing.RectangleF>, consultez <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un rectangle.  
  
-   Dessine le rectangle à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style du rectangle.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle à dessiner.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle à dessiner.</param>
        <param name="width">Largeur du rectangle à dessiner.</param>
        <param name="height">Hauteur du rectangle à dessiner.</param>
        <summary>Dessine un rectangle spécifié par une paire de coordonnées, une largeur et une hauteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la façon de dessiner un <xref:System.Drawing.RectangleF>, consultez <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée la position et la taille d’un rectangle.  
  
-   Dessine le rectangle à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style du rectangle.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle à dessiner.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle à dessiner.</param>
        <param name="width">Largeur du rectangle à dessiner.</param>
        <param name="height">Hauteur du rectangle à dessiner.</param>
        <summary>Dessine un rectangle spécifié par une paire de coordonnées, une largeur et une hauteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la façon de dessiner un <xref:System.Drawing.RectangleF>, consultez <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée la position et la taille d’un rectangle.  
  
-   Dessine le rectangle à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine une série de rectangles spécifiés par des structures <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style des contours des rectangles.</param>
        <param name="rects">Tableau de structures <see cref="T:System.Drawing.Rectangle" /> qui représentent les rectangles à dessiner.</param>
        <summary>Dessine une série de rectangles spécifiés par des structures <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un tableau de trois rectangles.  
  
-   Dessine les rectangles à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="rects" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" /> est un tableau de longueur nulle.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> qui détermine la couleur, la largeur et le style des contours des rectangles.</param>
        <param name="rects">Tableau de structures <see cref="T:System.Drawing.RectangleF" /> qui représentent les rectangles à dessiner.</param>
        <summary>Dessine une série de rectangles spécifiés par des structures <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un stylet noir.  
  
-   Crée un tableau de trois rectangles.  
  
-   Dessine les rectangles à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="rects" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" /> est un tableau de longueur nulle.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine la chaîne de texte précisée à l'emplacement indiqué avec les objets <see cref="T:System.Drawing.Brush" /> et <see cref="T:System.Drawing.Font" /> spécifiés.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawString (s, font, brush, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne à dessiner.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine la couleur et la texture du texte dessiné.</param>
        <param name="point">Structure <see cref="T:System.Drawing.PointF" /> qui spécifie l'angle supérieur gauche du texte dessiné.</param>
        <summary>Dessine la chaîne de texte précisée à l'emplacement indiqué avec les objets <see cref="T:System.Drawing.Brush" /> et <see cref="T:System.Drawing.Font" /> spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne de texte à dessiner.  
  
-   Définit la police Arial (16 points).  
  
-   Crée un pinceau uni noir avec laquelle dessiner.  
  
-   Crée un point pour l’angle supérieur gauche sur lequel dessiner le texte.  
  
-   Dessine la chaîne à l’écran à l’aide de la police, le pinceau et le point de destination.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="s" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne à dessiner.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine la couleur et la texture du texte dessiné.</param>
        <param name="layoutRectangle">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie l'emplacement du texte dessiné.</param>
        <summary>Dessine la chaîne de texte précisée dans le rectangle indiqué avec les objets <see cref="T:System.Drawing.Brush" /> et <see cref="T:System.Drawing.Font" /> spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le texte représenté par le `s` paramètre est dessiné à l’intérieur du rectangle représenté par le `layoutRectangle` paramètre. Si le texte ne tient pas à l’intérieur du rectangle, il est tronqué au mot plus proche. Pour mieux manipuler le dessin de la chaîne à l’intérieur du rectangle, utilisez le <xref:System.Drawing.Graphics.DrawString%2A> surcharge qui accepte un <xref:System.Drawing.StringFormat>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne de texte à dessiner.  
  
-   Définit la police Arial (16 points).  
  
-   Crée un pinceau uni noir avec laquelle dessiner.  
  
-   Crée un rectangle dans lequel dessiner le texte.  
  
-   Dessine le rectangle à l’écran.  
  
-   Dessine la chaîne à l’écran à l’aide de la police, le pinceau et le rectangle de destination.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="s" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, point, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne à dessiner.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine la couleur et la texture du texte dessiné.</param>
        <param name="point">Structure <see cref="T:System.Drawing.PointF" /> qui spécifie l'angle supérieur gauche du texte dessiné.</param>
        <param name="format"><see cref="T:System.Drawing.StringFormat" /> qui spécifie les attributs de mise en forme, tels que l'interligne et l'alignement, qui sont appliqués au texte dessiné.</param>
        <summary>Dessine la chaîne de texte précisée à l'emplacement indiqué avec les objets <see cref="T:System.Drawing.Brush" /> et <see cref="T:System.Drawing.Font" /> spécifiés, à l'aide des attributs de mise en forme du <see cref="T:System.Drawing.StringFormat" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne de texte à dessiner.  
  
-   Définit la police Arial (16 points).  
  
-   Crée un pinceau uni noir avec laquelle dessiner.  
  
-   Crée un point pour l’angle supérieur gauche sur lequel dessiner le texte.  
  
-   Définit le format de la chaîne à dessiner verticalement.  
  
-   Dessine la chaîne à l’écran à l’aide de la police, pinceau, un point de destination et format.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="s" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne à dessiner.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine la couleur et la texture du texte dessiné.</param>
        <param name="layoutRectangle">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie l'emplacement du texte dessiné.</param>
        <param name="format"><see cref="T:System.Drawing.StringFormat" /> qui spécifie les attributs de mise en forme, tels que l'interligne et l'alignement, qui sont appliqués au texte dessiné.</param>
        <summary>Dessine la chaîne de texte précisée dans le rectangle indiqué avec les objets <see cref="T:System.Drawing.Brush" /> et <see cref="T:System.Drawing.Font" /> spécifiés, à l'aide des attributs de mise en forme du <see cref="T:System.Drawing.StringFormat" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le texte représenté par le `s` paramètre est dessiné à l’intérieur du rectangle représenté par le `layoutRectangle` paramètre. Si le texte ne tient pas à l’intérieur du rectangle, il est tronqué au mot plus proche, sauf indication contraire avec le `format` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne de texte à dessiner.  
  
-   Définit la police Arial (16 points).  
  
-   Crée un pinceau uni noir avec laquelle dessiner.  
  
-   Crée un rectangle dans lequel dessiner le texte.  
  
-   Dessine le rectangle à l’écran.  
  
-   Définit le format de la chaîne pour la centrer dans le rectangle.  
  
-   Dessine la chaîne à l’écran à l’aide de la police, le pinceau et le rectangle de destination.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="s" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne à dessiner.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine la couleur et la texture du texte dessiné.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du texte dessiné.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du texte dessiné.</param>
        <summary>Dessine la chaîne de texte précisée à l'emplacement indiqué avec les objets <see cref="T:System.Drawing.Brush" /> et <see cref="T:System.Drawing.Font" /> spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne de texte à dessiner.  
  
-   Définit la police Arial (16 points).  
  
-   Crée un pinceau uni noir avec laquelle dessiner.  
  
-   Crée un point pour l’angle supérieur gauche sur lequel dessiner le texte.  
  
-   Dessine la chaîne à l’écran à l’aide de la police, le pinceau et le point de destination.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="s" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne à dessiner.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine la couleur et la texture du texte dessiné.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du texte dessiné.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du texte dessiné.</param>
        <param name="format"><see cref="T:System.Drawing.StringFormat" /> qui spécifie les attributs de mise en forme, tels que l'interligne et l'alignement, qui sont appliqués au texte dessiné.</param>
        <summary>Dessine la chaîne de texte précisée à l'emplacement indiqué avec les objets <see cref="T:System.Drawing.Brush" /> et <see cref="T:System.Drawing.Font" /> spécifiés, à l'aide des attributs de mise en forme du <see cref="T:System.Drawing.StringFormat" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne de texte à dessiner.  
  
-   Définit la police Arial (16 points).  
  
-   Crée un pinceau uni noir avec laquelle dessiner.  
  
-   Crée les coordonnées d’un point pour l’angle supérieur gauche sur lequel dessiner le texte.  
  
-   Définit le format de la chaîne à dessiner verticalement  
  
-   Dessine la chaîne à l’écran à l’aide de la police, pinceau, un point de destination et format.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="s" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContainer(class System.Drawing.Drawing2D.GraphicsContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndContainer (container As GraphicsContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndContainer(System::Drawing::Drawing2D::GraphicsContainer ^ container);" />
      <MemberSignature Language="F#" Value="member this.EndContainer : System.Drawing.Drawing2D.GraphicsContainer -&gt; unit" Usage="graphics.EndContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <param name="container"><see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> qui représente le conteneur rétabli par cette méthode.</param>
        <summary>Ferme le conteneur graphique actif et rétablit l'état de ce <see cref="T:System.Drawing.Graphics" /> sur l'état enregistré par un appel à la méthode <see cref="M:System.Drawing.Graphics.BeginContainer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode avec le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode pour créer des conteneurs graphiques imbriqués. Conteneurs graphiques conservent l’état de graphiques, tels que les propriétés de rendu, de transformation et de zone de découpage.  
  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode d’un <xref:System.Drawing.Graphics>, un bloc d’informations qui conserve l’état de la <xref:System.Drawing.Graphics> est placé sur une pile. Le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode retourne un <xref:System.Drawing.Drawing2D.GraphicsContainer> qui identifie ce bloc d’informations. Lorsque vous passez l’objet d’identification pour le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), le bloc d’informations est supprimé de la pile et est utilisé pour restaurer le <xref:System.Drawing.Graphics> à l’état, il se trouvait au moment de le <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode.  
  
 Les conteneurs peuvent être imbriqués ; Autrement dit, vous pouvez appeler la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode plusieurs fois avant d’appeler le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode). Chaque fois que vous appelez le <xref:System.Drawing.Graphics.BeginContainer%2A> (méthode), un bloc d’informations est placé sur la pile, et vous recevez un <xref:System.Drawing.Drawing2D.GraphicsContainer> pour le bloc d’informations. Lorsque vous passez un de ces objets vers le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), le <xref:System.Drawing.Graphics> est retourné à l’état, il se trouvait au moment de la <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode qui a retourné cet particulier <xref:System.Drawing.Drawing2D.GraphicsContainer>. Le bloc d’informations placé sur la pile par qui <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode est supprimé de la pile, et tous les blocs d’informations placés sur cette pile après cela <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode sont également supprimés.  
  
 Les appels à la <xref:System.Drawing.Graphics.Save%2A> blocs d’informations sur place (méthode) sur la même pile d’appels à la <xref:System.Drawing.Graphics.BeginContainer%2A> (méthode). Tout comme un <xref:System.Drawing.Graphics.EndContainer%2A> appel de méthode est associée à un <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode, un <xref:System.Drawing.Graphics.Restore%2A> appel de méthode est associée à un <xref:System.Drawing.Graphics.Save%2A> appel de méthode.  
  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), tous les blocs d’informations placés sur la pile (par le <xref:System.Drawing.Graphics.Save%2A> (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode sont supprimés de la pile. De même, lorsque vous appelez le <xref:System.Drawing.Graphics.Restore%2A> (méthode), tous les blocs d’informations placés sur la pile (par le <xref:System.Drawing.Graphics.Save%2A> (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.Save%2A> méthode sont supprimés de la pile.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Ouvre un nouveau conteneur graphique et enregistre l’ancien conteneur.  
  
-   Convertit les coordonnées de monde dans le conteneur.  
  
-   Remplit un rectangle rouge le (traduit les coordonnées de la) nouveau conteneur.  
  
-   Ferme le nouveau conteneur et restaure le conteneur enregistré.  
  
-   Remplit un rectangle vert (pour les coordonnées non traduites) le conteneur enregistré.  
  
 Le résultat est un rectangle vert qui recouvre un rectangle rouge de la même taille.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateMetafile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage à un point indiqué.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.Point" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage à un point indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 L’exemple de code suivant crée un formulaire qui a un <xref:System.Drawing.Imaging.Metafile> comme l’un de ses membres privés. Le <xref:System.Windows.Forms.Control.OnPaint%2A> les appels de méthode <xref:System.Drawing.Graphics.EnumerateMetafile%2A>, qui appelle le formulaire `MetafileCallback` méthode pour chaque enregistrement dans le métafichier. La méthode `MetafileCallback` appelle la méthode <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>. Notez que le `MetafileCallback` méthode reçoit les données d’enregistrement en tant qu’un <xref:System.IntPtr>, mais la <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode attend que les données d’enregistrement doit être un tableau d’octets. L’appel à <xref:System.Runtime.InteropServices.Marshal.Copy%2A> copie les données d’enregistrement dans un tableau d’octets afin qu’elle puisse être passée à <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>.  
  
 [!code-csharp[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.Point" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un parallélogramme indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.PointF" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage à un point indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un parallélogramme indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme. Métafichier dessiné est ajustée et inclinée pour s’ajuster à parallélogramme.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un rectangle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un rectangle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.Point" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage à un point indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.Point" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un parallélogramme indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.PointF" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage à un point indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un parallélogramme indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme. Métafichier dessiné est ajustée et inclinée pour s’ajuster à parallélogramme.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un rectangle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un rectangle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.Point" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage à un point indiqué, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.Point" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage à un point spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.Point" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un parallélogramme indiqué, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.Point> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme. Métafichier dessiné est ajustée et inclinée pour s’ajuster à parallélogramme.  
  
 Les attributs d’image spécifiés par le `imageAttr` remplacement de paramètre celles spécifiées lorsque l’écriture du métafichier.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.Point" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un parallélogramme spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.Point> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme. Métafichier dessiné est ajustée et inclinée pour s’ajuster à parallélogramme.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.PointF" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage à un point indiqué, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant la méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Les attributs d’image spécifiés par le `imageAttr` remplacement de paramètre celles spécifiées lorsque l’écriture du métafichier.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.PointF" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage à un point spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans le <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un parallélogramme indiqué, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme. Métafichier dessiné est ajustée et inclinée pour s’ajuster à parallélogramme.  
  
 Les attributs d’image spécifiés par le `imageAttr` remplacement de paramètre celles spécifiées lorsque l’écriture du métafichier.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un parallélogramme spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.Point> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme. Métafichier dessiné est ajustée et inclinée pour s’ajuster à parallélogramme.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans l'objet <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un rectangle indiqué, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Les attributs d’image spécifiés par le `imageAttr` remplacement de paramètre celles spécifiées lorsque l’écriture du métafichier.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un rectangle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans l'objet <see cref="T:System.Drawing.Imaging.Metafile" /> spécifié à une méthode de rappel, en vue d'un affichage dans un rectangle indiqué, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Les attributs d’image spécifiés par le `imageAttr` remplacement de paramètre celles spécifiées lorsque l’écriture du métafichier.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un rectangle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.Point" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage à un point spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.Point" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un parallélogramme spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.Point> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme. Métafichier dessiné est ajustée et inclinée pour s’ajuster à parallélogramme.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.PointF" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage à un point spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un parallélogramme spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme. Métafichier dessiné est ajustée et inclinée pour s’ajuster à parallélogramme.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un rectangle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="srcUnit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir de <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un rectangle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le`callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.Point" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="unit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir d'un <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage à un point indiqué, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.Point" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="unit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir d'un <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un parallélogramme spécifié, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.Point> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme. Métafichier dessiné est ajustée et inclinée pour s’ajuster à parallélogramme.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
 Les attributs d’image spécifiés par le `imageAttr` remplacement de paramètre celles spécifiées lorsque l’écriture du métafichier.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoint">Structure <see cref="T:System.Drawing.PointF" /> qui spécifie l'emplacement de l'angle supérieur gauche du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="unit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir d'un <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage à un point indiqué, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
 Les attributs d’image spécifiés par le `imageAttr` remplacement de paramètre celles spécifiées lorsque l’écriture du métafichier.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destPoints">Tableau de trois structures <see cref="T:System.Drawing.PointF" /> qui définissent un parallélogramme qui détermine la taille et l'emplacement du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="unit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir d'un <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un parallélogramme spécifié, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Le `destPoints` paramètre spécifie trois points d’un parallélogramme. Les trois <xref:System.Drawing.PointF> structures représentent les angles supérieur gauche, supérieur droit et inférieur gauche du parallélogramme. Le quatrième point est extrapolé à partir des trois premiers pour former un parallélogramme. Métafichier dessiné est ajustée et inclinée pour s’ajuster à parallélogramme.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
 Les attributs d’image spécifiés par le `imageAttr` remplacement de paramètre celles spécifiées lorsque l’écriture du métafichier.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="unit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir d'un <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un rectangle spécifié, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
 Les attributs d’image spécifiés par le `imageAttr` remplacement de paramètre celles spécifiées lorsque l’écriture du métafichier.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" /> à énumérer.</param>
        <param name="destRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie l'emplacement et la taille du métafichier dessiné.</param>
        <param name="srcRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie la partie du métafichier, par rapport à son angle supérieur gauche, à dessiner.</param>
        <param name="unit">Membre de l'énumération <see cref="T:System.Drawing.GraphicsUnit" /> qui spécifie l'unité de mesure permettant de déterminer la partie du métafichier figurant dans le rectangle spécifié par le paramètre <paramref name="srcRect" />.</param>
        <param name="callback">Délégué <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> qui spécifie la méthode à laquelle les enregistrements du métafichier sont transmis.</param>
        <param name="callbackData">Pointeur interne requis, mais ignoré. Vous pouvez passer <see cref="F:System.IntPtr.Zero" /> à ce paramètre.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" /> qui spécifie des informations sur les attributs d'image de l'image dessinée.</param>
        <summary>Transmet successivement chaque enregistrement figurant dans un rectangle sélectionné à partir d'un <see cref="T:System.Drawing.Imaging.Metafile" /> à une méthode de rappel, en vue d'un affichage dans un rectangle spécifié, à l'aide des attributs d'images spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode énumère les enregistrements contenus dans le métafichier spécifié. Chaque enregistrement est individuellement transmis à une méthode de rappel spécifiée par le `callback` paramètre. En règle générale, les appels de méthode de rappel le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode « lire », ou de dessin, de l’enregistrement.  
  
 Si la méthode de rappel appelle <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, il doit le faire en appelant le <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> méthode spécifique <xref:System.Drawing.Imaging.Metafile> énuméré.  
  
 Dessin qui a lieu en dehors du rectangle spécifié par le `srcRect` paramètre est ignoré.  
  
 Les attributs d’image spécifiés par le `imageAttr` remplacement de paramètre celles spécifiées lorsque l’écriture du métafichier.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Images, bitmaps et métafichiers</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExcludeClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Met à jour la zone de découpage de ce <see cref="T:System.Drawing.Graphics" /> pour exclure la zone spécifiée par une structure <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExcludeClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.ExcludeClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> qui spécifie le rectangle à exclure de la zone de découpage.</param>
        <summary>Met à jour la zone de découpage de ce <see cref="T:System.Drawing.Graphics" /> pour exclure la zone spécifiée par une structure <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode exclut la zone spécifiée par le `rect` paramètre à partir de la zone de découpage active et assigne la zone résultante à la <xref:System.Drawing.Graphics.Clip%2A> propriété de ce <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pixel 100 par un rectangle de 100 pixels dont l’angle supérieur gauche se situe à la coordonnée (100, 100).  
  
-   Crée une région définie par le rectangle.  
  
-   Définit la zone de découpage pour exclure la zone rectangulaire.  
  
-   Remplit un pixel de 300 par 300 rectangle de pixels dont l’angle supérieur gauche se situe à la coordonnée (0, 0) avec un pinceau uni bleu.  
  
 Le résultat est un rectangle bleu avec une zone carrée vers son coin inférieur droit manquant.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Region -&gt; unit" Usage="graphics.ExcludeClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region"><see cref="T:System.Drawing.Region" /> qui spécifie la zone à exclure de la zone de découpage.</param>
        <summary>Met à jour la zone de découpage de ce <see cref="T:System.Drawing.Graphics" /> pour exclure la zone spécifiée par <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode exclut la zone spécifiée par le `region` paramètre à partir de la zone de découpage active et assigne la zone résultante à la <xref:System.Drawing.Graphics.Clip%2A> propriété de ce <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pixel 100 par un rectangle de 100 pixels dont l’angle supérieur gauche se situe à la coordonnée (100, 100).  
  
-   Définit la zone de découpage pour exclure le rectangle.  
  
-   Remplit un pixel de 300 par 300 rectangle de pixels dont l’angle supérieur gauche se situe à la coordonnée (0, 0) avec un pinceau uni bleu.  
  
 Le résultat est un rectangle bleu avec une zone carrée vers son coin inférieur droit manquant.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Remplit l'intérieur d'une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui définissent la spline.</param>
        <summary>Remplit l'intérieur d'une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’une spline cardinale fermée qui passe par chaque point dans le tableau. Si le dernier point ne correspond pas au premier point, un segment de courbe est ajouté entre le dernier point au premier point pour la fermer.  
  
 Le tableau de points doit contenir au moins quatre <xref:System.Drawing.Point> structures.  
  
 Cette méthode utilise une tension par défaut de 0,5.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée un tableau de quatre points pour définir une spline.  
  
-   Remplit la courbe à l’écran.  
  
 La courbe a une tension par défaut de 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui définissent la spline.</param>
        <summary>Remplit l'intérieur d'une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’une spline cardinale fermée qui passe par chaque point dans le tableau. Si le dernier point ne correspond pas au premier point, un segment de courbe est ajouté entre le dernier point au premier point pour la fermer.  
  
 Le tableau de points doit contenir au moins quatre <xref:System.Drawing.PointF> structures.  
  
 Cette méthode utilise une tension par défaut de 0,5.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée un tableau de quatre points pour définir une spline.  
  
-   Remplit la courbe à l’écran.  
  
 La courbe a une tension par défaut de 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui définissent la spline.</param>
        <param name="fillmode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.FillMode" /> qui détermine le mode de remplissage de la courbe.</param>
        <summary>Remplit l'intérieur d'une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.Point" />, en utilisant le mode de remplissage spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’une spline cardinale fermée qui passe par chaque point dans le tableau. Si le dernier point ne correspond pas au premier point, un segment de courbe est ajouté entre le dernier point au premier point pour la fermer.  
  
 Le tableau de points doit contenir au moins quatre <xref:System.Drawing.Point> structures.  
  
 Cette méthode utilise une tension par défaut de 0,5.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée un tableau de quatre points pour définir une spline.  
  
-   Définit le mode de remplissage <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Remplit la courbe à l’écran.  
  
 La courbe a une tension par défaut de 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui définissent la spline.</param>
        <param name="fillmode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.FillMode" /> qui détermine le mode de remplissage de la courbe.</param>
        <summary>Remplit l'intérieur d'une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.PointF" />, en utilisant le mode de remplissage spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’une spline cardinale fermée qui passe par chaque point dans le tableau. Si le dernier point ne correspond pas au premier point, un segment de courbe est ajouté entre le dernier point au premier point pour la fermer.  
  
 Le tableau de points doit contenir au moins quatre <xref:System.Drawing.Point> structures.  
  
 Cette méthode utilise une tension par défaut de 0,5.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée un tableau de quatre points pour définir une spline.  
  
-   Définit le mode de remplissage <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Remplit la courbe à l’écran.  
  
 La courbe a une tension par défaut de 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui définissent la spline.</param>
        <param name="fillmode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.FillMode" /> qui détermine le mode de remplissage de la courbe.</param>
        <param name="tension">Valeur supérieure ou égale à 0,0 F qui spécifie la tension de la courbe.</param>
        <summary>Remplit l'intérieur d'une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.Point" />, en utilisant le mode de remplissage et la tension spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’une spline cardinale fermée qui passe par chaque point dans le tableau. Si le dernier point ne correspond pas au premier point, un segment de courbe est ajouté entre le dernier point au premier point pour la fermer.  
  
 Le tableau de points doit contenir au moins quatre <xref:System.Drawing.Point> structures.  
  
 Le `tension` paramètre détermine la forme de la spline. Si la valeur de la `tension` paramètre est 0.0f, cette méthode dessine des segments de ligne pour relier les points. En règle générale, le `tension` paramètre est inférieur ou égal à 1.0f. Valeurs sur 1.0f donnent des résultats.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée un tableau de quatre points pour définir une spline.  
  
-   Définit le mode de remplissage <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Définit la tension à 1.0.  
  
-   Remplit la courbe à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui définissent la spline.</param>
        <param name="fillmode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.FillMode" /> qui détermine le mode de remplissage de la courbe.</param>
        <param name="tension">Valeur supérieure ou égale à 0,0 F qui spécifie la tension de la courbe.</param>
        <summary>Remplit l'intérieur d'une spline cardinale fermée définie par un tableau de structures <see cref="T:System.Drawing.PointF" />, en utilisant le mode de remplissage et la tension spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’une spline cardinale fermée qui passe par chaque point dans le tableau. Si le dernier point ne correspond pas au premier point, un segment de courbe est ajouté entre le dernier point au premier point pour la fermer.  
  
 Le tableau de points doit contenir au moins quatre <xref:System.Drawing.Point> structures.  
  
 Le `tension` paramètre détermine la forme de la spline. Si la valeur de la `tension` paramètre est 0.0f, cette méthode dessine des segments de ligne pour relier les points. En règle générale, le `tension` paramètre est inférieur ou égal à 1.0f. Valeurs sur 1.0f donnent des résultats.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée un tableau de quatre points pour définir une spline.  
  
-   Définit le mode de remplissage <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Définit la tension à 1.0.  
  
-   Remplit la courbe à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Remplit l'intérieur d'une ellipse définie par un rectangle englobant spécifié par une paire de coordonnées, une largeur et une hauteur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> qui représente le rectangle englobant qui définit l'ellipse.</param>
        <summary>Remplit l'intérieur d'une ellipse définie par un rectangle englobant spécifié par une structure <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’une ellipse avec un <xref:System.Drawing.Brush>. L’ellipse est définie par le rectangle englobant représenté par le `rect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée un rectangle qui délimite une ellipse.  
  
-   Remplit l’ellipse à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.RectangleF" /> qui représente le rectangle englobant qui définit l'ellipse.</param>
        <summary>Remplit l'intérieur d'une ellipse définie par un rectangle englobant spécifié par une structure <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’une ellipse avec un <xref:System.Drawing.Brush>. L’ellipse est définie par le rectangle englobant représenté par le `rect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée un rectangle qui délimite une ellipse.  
  
-   Remplit l’ellipse à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse.</param>
        <param name="width">Largeur du rectangle englobant qui définit l'ellipse.</param>
        <param name="height">Hauteur du rectangle englobant qui définit l'ellipse.</param>
        <summary>Remplit l'intérieur d'une ellipse définie par un rectangle englobant spécifié par une paire de coordonnées, une largeur et une hauteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’une ellipse avec un <xref:System.Drawing.Brush>. L’ellipse est définie par le rectangle englobant représenté par le `x`, `y`, `width`, et `height` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée l’emplacement et la taille d’un rectangle qui délimite une ellipse.  
  
-   Remplit l’ellipse à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse.</param>
        <param name="width">Largeur du rectangle englobant qui définit l'ellipse.</param>
        <param name="height">Hauteur du rectangle englobant qui définit l'ellipse.</param>
        <summary>Remplit l'intérieur d'une ellipse définie par un rectangle englobant spécifié par une paire de coordonnées, une largeur et une hauteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’une ellipse avec un <xref:System.Drawing.Brush>. L’ellipse est définie par le rectangle englobant représenté par le `x`, `y`, `width`, et `height` paramètres.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée l’emplacement et la taille d’un rectangle qui délimite une ellipse.  
  
-   Remplit l’ellipse à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath(class System.Drawing.Brush brush, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPath(System::Drawing::Brush ^ brush, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.FillPath : System.Drawing.Brush * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.FillPath (brush, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> qui représente le tracé à remplir.</param>
        <summary>Remplit l'intérieur d'un <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Drawing2D.GraphicsPath> se compose d’une série de segments de ligne et de courbe. Si le chemin d’accès représenté par le `path` paramètre n’est pas fermé, un segment est ajouté entre le dernier point au premier point pour fermer le chemin d’accès.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée un objet de tracé graphique.  
  
-   Ajoute une ellipse au tracé graphique.  
  
-   Remplit le chemin d’accès à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="path" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Remplit l'intérieur d'un secteur défini par une ellipse spécifiée par une paire de coordonnées, une largeur, une hauteur et deux lignes radiales.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.FillPie (brush, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> qui représente le rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="startAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir de l'axe x jusqu'au premier coté du secteur.</param>
        <param name="sweepAngle">Angle, mesuré dans le sens des aiguilles d'une montre, à partir du paramètre <paramref name="startAngle" /> jusqu'au deuxième coté du secteur.</param>
        <summary>Remplit l'intérieur d'un secteur défini par une ellipse spécifiée par une structure <see cref="T:System.Drawing.RectangleF" /> et deux lignes radiales.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’un secteur défini par l’arc d’une ellipse et deux lignes radiales qui croisent les points de terminaison de l’arc. L’ellipse est définie par le rectangle englobant. Le secteur est composé des deux lignes radiales définies par le `startAngle` et `sweepAngle` paramètres et l’arc entre les intersections de ces lignes radiales avec l’ellipse.  
  
 Si le `sweepAngle` paramètre est supérieur à 360 degrés ou inférieur à 360 degrés, il est traité comme s’il s’agissait de 360 degrés ou -360 degrés, respectivement.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée un rectangle qui délimite une ellipse.  
  
-   Définit l’angle de début (par rapport à l’axe des x) et l’angle de balayage (à la fois dans un sens dans le sens horaire).  
  
-   Remplit la zone en forme de graphique à secteurs de l’ellipse à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * int * int * int * int * int * int -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="width">Largeur du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="height">Hauteur du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="startAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir de l'axe x jusqu'au premier coté du secteur.</param>
        <param name="sweepAngle">Angle, mesuré dans le sens des aiguilles d'une montre, à partir du paramètre <paramref name="startAngle" /> jusqu'au deuxième coté du secteur.</param>
        <summary>Remplit l'intérieur d'un secteur défini par une ellipse spécifiée par une paire de coordonnées, une largeur, une hauteur et deux lignes radiales.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’un secteur défini par l’arc d’une ellipse et deux lignes radiales qui croisent les points de terminaison de l’arc. L’ellipse est définie par le rectangle englobant. Le secteur est composé des deux lignes radiales définies par le `startAngle` et `sweepAngle` paramètres et l’arc entre les intersections de ces lignes radiales avec l’ellipse.  
  
 Si le `sweepAngle` paramètre est supérieur à 360 degrés ou inférieur à 360 degrés, il est traité comme s’il s’agissait de 360 degrés ou -360 degrés, respectivement.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée l’emplacement et la taille d’un rectangle qui délimite une ellipse.  
  
-   Définit l’angle de début (par rapport à l’axe des x) et l’angle de balayage (à la fois dans un sens dans le sens horaire).  
  
-   Remplit la zone en forme de graphique à secteurs de l’ellipse à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * single * single * single * single * single * single -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="width">Largeur du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="height">Hauteur du rectangle englobant qui définit l'ellipse d'où est issu le secteur.</param>
        <param name="startAngle">Angle, mesuré en degrés dans le sens des aiguilles d'une montre, à partir de l'axe x jusqu'au premier coté du secteur.</param>
        <param name="sweepAngle">Angle, mesuré dans le sens des aiguilles d'une montre, à partir du paramètre <paramref name="startAngle" /> jusqu'au deuxième coté du secteur.</param>
        <summary>Remplit l'intérieur d'un secteur défini par une ellipse spécifiée par une paire de coordonnées, une largeur, une hauteur et deux lignes radiales.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur d’un secteur défini par l’arc d’une ellipse et deux lignes radiales qui croisent les points de terminaison de l’arc. L’ellipse est définie par le rectangle englobant. Le secteur est composé des deux lignes radiales définies par le `startAngle` et `sweepAngle` paramètres et l’arc entre les intersections de ces lignes radiales avec l’ellipse.  
  
 Si le `sweepAngle` paramètre est supérieur à 360 degrés ou inférieur à 360 degrés, il est traité comme s’il s’agissait de 360 degrés ou -360 degrés, respectivement.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau rouge pleine.  
  
-   Crée l’emplacement et la taille d’un rectangle qui délimite une ellipse.  
  
-   Définit l’angle de début (par rapport à l’axe des x) et l’angle de balayage (à la fois dans un sens dans le sens horaire).  
  
-   Remplit la zone en forme de graphique à secteurs de l’ellipse à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Remplit l'intérieur d'un polygone défini par un tableau de points spécifiés par les structures <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui représentent les sommets du polygone à remplir.</param>
        <summary>Remplit l'intérieur d'un polygone défini par un tableau de points spécifiés par les structures <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Toutes deux points consécutifs dans le tableau spécifient un côté du polygone. En outre, si le dernier point et le premier point ne coïncident pas, elles spécifient le côté de fermeture du polygone.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau uni bleu.  
  
-   Crée un tableau de sept points pour définir un polygone.  
  
-   Remplit la zone polygonale à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui représentent les sommets du polygone à remplir.</param>
        <summary>Remplit l'intérieur d'un polygone défini par un tableau de points spécifiés par les structures <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Toutes deux points consécutifs dans le tableau spécifient un côté du polygone. En outre, si le dernier point et le premier point ne coïncident pas, elles spécifient le côté de fermeture du polygone.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau uni bleu.  
  
-   Crée un tableau de sept points pour définir un polygone.  
  
-   Remplit la zone polygonale à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.Point" /> qui représentent les sommets du polygone à remplir.</param>
        <param name="fillMode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.FillMode" /> qui détermine le style du remplissage.</param>
        <summary>Remplit l'intérieur d'un polygone défini par un tableau de points spécifiés par les structures <see cref="T:System.Drawing.Point" />, à l'aide du mode de remplissage spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Toutes deux points consécutifs dans le tableau spécifient un côté du polygone. En outre, si le dernier point et le premier point ne coïncident pas, elles spécifient le côté de fermeture du polygone.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un pinceau uni bleu.  
  
-   Crée un tableau de sept points pour définir un polygone.  
  
-   Définit le mode de remplissage <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Remplit la zone polygonale à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="points">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui représentent les sommets du polygone à remplir.</param>
        <param name="fillMode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.FillMode" /> qui détermine le style du remplissage.</param>
        <summary>Remplit l'intérieur d'un polygone défini par un tableau de points spécifiés par les structures <see cref="T:System.Drawing.PointF" />, à l'aide du mode de remplissage spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Toutes deux points consécutifs dans le tableau spécifient un côté du polygone. En outre, si le dernier point et le premier point ne coïncident pas, elles spécifient le côté de fermeture du polygone.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute l’action suivante :  
  
-   Crée un pinceau uni bleu.  
  
-   Crée un tableau de sept points pour définir un polygone.  
  
-   Définit le mode de remplissage <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Remplit la zone polygonale à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="points" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Remplit l'intérieur d'un rectangle spécifié par une paire de coordonnées, une largeur et une hauteur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> qui représente le rectangle à remplir.</param>
        <summary>Remplit l'intérieur d'un rectangle spécifié par une structure <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur du rectangle défini par le `rect` paramètre, y compris le spécifié angle supérieur gauche d’angle et jusqu'à la calculée réduire et bords.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute l’action suivante :  
  
-   Crée un pinceau uni bleu.  
  
-   Crée un rectangle.  
  
-   Remplit la zone rectangulaire à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="rect">Structure <see cref="T:System.Drawing.RectangleF" /> qui représente le rectangle à remplir.</param>
        <summary>Remplit l'intérieur d'un rectangle spécifié par une structure <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur du rectangle défini par le `rect` paramètre, y compris le spécifié angle supérieur gauche d’angle et jusqu'à la calculée réduire et bords.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute l’action suivante :  
  
-   Crée un pinceau uni bleu.  
  
-   Crée un rectangle.  
  
-   Remplit la zone rectangulaire à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle à remplir.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle à remplir.</param>
        <param name="width">Largeur du rectangle à remplir.</param>
        <param name="height">Hauteur du rectangle à remplir.</param>
        <summary>Remplit l'intérieur d'un rectangle spécifié par une paire de coordonnées, une largeur et une hauteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur du rectangle défini par le`x`, `y`, `width`, et `height` paramètres, y compris haut-gauche spécifié coin inférieur droit jusqu'à la calculée réduire et bords.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute l’action suivante :  
  
-   Crée un pinceau uni bleu.  
  
-   Crée l’emplacement et la taille d’un rectangle.  
  
-   Remplit la zone rectangulaire à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle à remplir.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle à remplir.</param>
        <param name="width">Largeur du rectangle à remplir.</param>
        <param name="height">Hauteur du rectangle à remplir.</param>
        <summary>Remplit l'intérieur d'un rectangle spécifié par une paire de coordonnées, une largeur et une hauteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit l’intérieur du rectangle défini par le `x`, `y`, `width`, et `height` paramètres, y compris haut-gauche spécifié coin inférieur droit jusqu'à la calculée réduire et bords.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute l’action suivante :  
  
-   Crée un pinceau uni bleu.  
  
-   Crée l’emplacement et la taille d’un rectangle.  
  
-   Remplit la zone rectangulaire à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Remplit l'intérieur d'une série de rectangles spécifiés par des structures <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="rects">Tableau de structures <see cref="T:System.Drawing.Rectangle" /> qui représentent les rectangles à remplir.</param>
        <summary>Remplit l'intérieur d'une série de rectangles spécifiés par des structures <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute l’action suivante :  
  
-   Crée un pinceau uni bleu.  
  
-   Crée un tableau de trois rectangles.  
  
-   Remplit les trois zones rectangulaires à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="rects" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" /> est un tableau de longueur nulle.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="rects">Tableau de structures <see cref="T:System.Drawing.RectangleF" /> qui représentent les rectangles à remplir.</param>
        <summary>Remplit l'intérieur d'une série de rectangles spécifiés par des structures <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute l’action suivante :  
  
-   Crée un pinceau uni bleu.  
  
-   Crée un tableau de trois rectangles.  
  
-   Remplit les trois zones rectangulaires à l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="rects" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Rects" /> est un tableau de longueur nulle.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRegion(class System.Drawing.Brush brush, class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRegion(System::Drawing::Brush ^ brush, System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.FillRegion : System.Drawing.Brush * System.Drawing.Region -&gt; unit" Usage="graphics.FillRegion (brush, region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> qui détermine les caractéristiques du remplissage.</param>
        <param name="region"><see cref="T:System.Drawing.Region" /> qui représente la zone à remplir.</param>
        <summary>Remplit l'intérieur d'un <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Region> est composé de rectangles et de chemins d’accès. Si la région n’est pas fermée, un segment est ajouté entre le dernier point au premier point pour la fermer.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute l’action suivante :  
  
-   Crée un pinceau uni bleu.  
  
-   Crée un rectangle.  
  
-   Crée une zone rectangulaire.  
  
-   Remplit la zone rectangulaire dans l’écran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> a la valeur <see langword="null" />.  
  
ou 
 <paramref name="region" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Graphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Autorise un objet à tenter de libérer des ressources et à exécuter d'autres opérations de nettoyage avant qu'il ne soit récupéré par une opération garbage collection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Force l'exécution de toutes les opérations graphiques en attente et procède à un retour immédiat, sans attendre la fin des opérations.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="graphics.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Force l'exécution de toutes les opérations graphiques en attente et procède à un retour immédiat, sans attendre la fin des opérations.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode démarre un vidage et retourne immédiatement sans attendre pour toute opération de graphiques en cours d’exécution se termine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype System.Drawing.Drawing2D.FlushIntention intention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (intention As FlushIntention)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush(System::Drawing::Drawing2D::FlushIntention intention);" />
      <MemberSignature Language="F#" Value="member this.Flush : System.Drawing.Drawing2D.FlushIntention -&gt; unit" Usage="graphics.Flush intention" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <param name="intention">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.FlushIntention" /> qui spécifie si la méthode procède à un retour immédiat ou attend la fin des opérations existantes.</param>
        <summary>Force l'exécution de toutes les opérations graphiques en attente, la méthode procédant à un retour immédiat ou attendant, selon ce qui est spécifié, la fin des opérations.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur <xref:System.Drawing.Drawing2D.FlushIntention.Flush> pour le `intention` paramètre spécifie que la méthode retourne immédiatement après le début du vidage, alors que la valeur <xref:System.Drawing.Drawing2D.FlushIntention.Sync> Spécifie que la méthode attendre avant le retour de fin des opérations existantes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crée un nouveau <see cref="T:System.Drawing.Graphics" /> à partir du handle spécifié vers un contexte de périphérique.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Handle vers un contexte de périphérique.</param>
        <summary>Crée un nouveau <see cref="T:System.Drawing.Graphics" /> à partir du handle spécifié vers un contexte de périphérique.</summary>
        <returns>Cette méthode retourne un nouveau <see cref="T:System.Drawing.Graphics" /> pour le contexte de périphérique spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez toujours appeler la <xref:System.Drawing.Graphics.Dispose%2A> méthode pour libérer le <xref:System.Drawing.Graphics> et les ressources associées créées par le <xref:System.Drawing.Graphics.FromHdc%2A> (méthode).  
  
 Même si le périphérique d’affichage a un profil de couleurs ICM associé, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] n’utilisera pas ce profil par défaut. Pour activer ICM pour un <xref:System.Drawing.Graphics>, construire le <xref:System.Drawing.Graphics> à partir d’un HDC après avoir passé le HDC (et ICM_ON) à la `SetICMMode` (fonction). Ensuite, tout dessin effectué par le <xref:System.Drawing.Graphics> sera ajustée en fonction du profil ICM associé au périphérique d’affichage. L’activation d’ICM entraîne une baisse des performances.  
  
 L’état du contexte de périphérique (mode de mappage, unité logique, etc.) au moment où vous appelez <xref:System.Drawing.Graphics.FromHdc%2A> peut affecter le rendu effectué le <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute l’action suivante :  
  
-   Crée une variable de type pointeur interne `hdc` et lui affecte le handle vers le contexte de périphérique de l’objet graphics du formulaire.  
  
-   Crée un nouvel objet graphics à l’aide `hdc`.  
  
-   Dessine un rectangle avec le nouvel objet de graphique (sur l’écran).  
  
-   Libère le nouvel objet graphics à l’aide `hdc`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc, native int hdevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr, hdevice As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint * nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc (hdc, hdevice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Handle vers un contexte de périphérique.</param>
        <param name="hdevice">Handle vers un périphérique.</param>
        <summary>Crée un <see cref="T:System.Drawing.Graphics" /> à partir du handle spécifié vers un contexte de périphérique et du handle spécifié vers un périphérique.</summary>
        <returns>Cette méthode retourne un nouveau <see cref="T:System.Drawing.Graphics" /> pour le contexte de périphérique et le périphérique spécifiés.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez toujours appeler la <xref:System.Drawing.Graphics.Dispose%2A> méthode pour libérer le <xref:System.Drawing.Graphics> et les ressources associées créées par le <xref:System.Drawing.Graphics.FromHdc%2A> (méthode).  
  
 Même si le périphérique d’affichage a un profil de couleurs ICM associé, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] n’utilisera pas ce profil par défaut. Pour activer ICM pour un <xref:System.Drawing.Graphics>, construire le <xref:System.Drawing.Graphics> à partir d’un HDC après avoir passé le HDC (et ICM_ON) à la `SetICMMode` (fonction). Ensuite, tout dessin effectué par le <xref:System.Drawing.Graphics> sera ajustée en fonction du profil ICM associé au périphérique d’affichage. L’activation d’ICM entraîne une baisse des performances.  
  
 L’état du contexte de périphérique (mode de mappage, unité logique, etc.) au moment où vous appelez <xref:System.Drawing.Graphics.FromHdc%2A> peut affecter le rendu effectué le <xref:System.Drawing.Graphics>.  
  
 Le descripteur de périphérique est généralement utilisé pour les fonctions d’imprimante spécifiques de requête.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour accéder au code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdcInternal (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdcInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Handle vers un contexte de périphérique.</param>
        <summary>Retourne un <see cref="T:System.Drawing.Graphics" /> pour le contexte de périphérique spécifié.</summary>
        <returns><see cref="T:System.Drawing.Graphics" /> pour le contexte de périphérique spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne doit pas être utilisée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwnd(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwnd (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwnd(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwnd : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwnd hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Handle vers une fenêtre.</param>
        <summary>Crée un <see cref="T:System.Drawing.Graphics" /> à partir du handle spécifié vers une fenêtre.</summary>
        <returns>Cette méthode retourne un nouveau <see cref="T:System.Drawing.Graphics" /> pour le handle de fenêtre spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez toujours appeler la <xref:System.Drawing.Graphics.Dispose%2A> méthode pour libérer le <xref:System.Drawing.Graphics> et les ressources associées créées par le <xref:System.Drawing.Graphics.FromHwnd%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, ainsi que `thisForm`, le <xref:System.Windows.Forms.Form> pour l’exemple. Le code exécute les actions suivantes :  
  
-   Crée une variable pointeur interne `hwnd` et lui affecte le handle du formulaire de cet exemple.  
  
-   Crée un nouveau <xref:System.Drawing.Graphics> à partir du handle.  
  
-   Dessine un rectangle à la nouvelle <xref:System.Drawing.Graphics> à l’aide d’un stylet rouge.  
  
-   Supprime le nouveau <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour accéder au code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwndInternal(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwndInternal (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwndInternal(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwndInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwndInternal hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Handle vers une fenêtre.</param>
        <summary>Crée un <see cref="T:System.Drawing.Graphics" /> à partir du handle de fenêtre spécifié.</summary>
        <returns><see cref="T:System.Drawing.Graphics" /> pour le handle de fenêtre spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne doit pas être utilisée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromImage(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromImage(System::Drawing::Image ^ image);" />
      <MemberSignature Language="F#" Value="static member FromImage : System.Drawing.Image -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> à partir duquel créer le <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Crée un <see cref="T:System.Drawing.Graphics" /> à partir du <see cref="T:System.Drawing.Image" /> spécifié.</summary>
        <returns>Cette méthode retourne un nouveau <see cref="T:System.Drawing.Graphics" /> pour le <see cref="T:System.Drawing.Image" /> spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’image a un format de pixel indexé, cette méthode lève une exception avec le message, « Impossible de créer un objet graphique à partir d’une image qui a un format de pixel indexé. » Les formats de pixel indexé sont indiqués dans la liste suivante.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  
  
 Vous pouvez enregistrer l’image indexée sous un autre format à l’aide de la <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> (méthode), puis récupérer un <xref:System.Drawing.Graphics> objet pour la nouvelle image.  
  
 Cette méthode lève également une exception si l’image possède l’un des formats de pixel suivants.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  
  
 Vous devez toujours appeler la <xref:System.Drawing.Graphics.Dispose%2A> méthode pour libérer le <xref:System.Drawing.Graphics> et les ressources associées créées par le <xref:System.Drawing.Graphics.FromImage%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute l’action suivante :  
  
-   Crée un <xref:System.Drawing.Image> à partir d’un graphique de fichiers, SampImag.jpg, dans le dossier example.  
  
-   Crée un <xref:System.Drawing.Graphics> à partir de la <xref:System.Drawing.Image>.  
  
-   Modifie l’image en remplissant un rectangle qu’il contient.  
  
-   Dessine le <xref:System.Drawing.Image> à l’écran.  
  
-   Libère le créé <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Exception"><paramref name="image" /> a un format de pixel indexé ou son format n'est pas défini.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/737bae30-e599-4e1d-bf30-bab8280b32be">Comment : créer une bitmap au moment de l'exécution</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a626d701-bd99-4fd8-b92f-7b8f794e042b">Utilisation des images, bitmaps, icônes et métafichiers</related>
        <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">Comment : créer des objets graphiques pour le dessin</related>
      </Docs>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetContextInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetContextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextInfo () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetContextInfo();" />
      <MemberSignature Language="F#" Value="member this.GetContextInfo : unit -&gt; obj" Usage="graphics.GetContextInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient le contexte graphique cumulé.</summary>
        <returns><see cref="T:System.Object" /> représentant le contexte graphique cumulé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de retour est un tableau d’objets où le premier élément contient la zone de découpage cumulative et le deuxième élément contient la matrice de transformation/traduction cumulée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHalftonePalette() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHalftonePalette" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHalftonePalette () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHalftonePalette();" />
      <MemberSignature Language="F#" Value="static member GetHalftonePalette : unit -&gt; nativeint" Usage="System.Drawing.Graphics.GetHalftonePalette " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient un handle vers la palette de demi-teintes Windows actuelle.</summary>
        <returns>Pointeur interne qui spécifie le handle vers la palette.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objectif de la <xref:System.Drawing.Graphics.GetHalftonePalette%2A> méthode consiste à activer [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] pour produire un meilleur demi-teintes de qualité lors de l’affichage utilise 8 bits par pixel. Pour afficher une image à l’aide de la palette de demi-teintes, utilisez la procédure suivante.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Définit l’interopérabilité <xref:System.Runtime.InteropServices.DllImportAttribute> attributs pour le fichier DLL de Windows, gdi32.dll, qui contient le nécessaire [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] fonctions.  
  
-   Définit le `SelectPalette` et `RealizePalette` fonctions dans cette DLL comme externes.  
  
-   Crée une image à partir d’un fichier image existant, SampImag.jpg (qui doit être dans le même dossier que l’exemple de fichier de code) et dessine l’image à l’écran.  
  
-   Crée des variables de type pointeur interne et leur affecte le handle vers l’objet graphics et à la palette de demi-teintes Windows actuelle, respectivement.  
  
-   Sélectionne et réalise la palette de demi-teintes.  
  
-   Crée un nouvel objet graphics à l’aide du `hdc` paramètre.  
  
-   Dessine l’image à nouveau.  
  
-   Libère le handle vers le contexte de périphérique.  
  
 Il en résulte deux rendus de l’image d’exemple : un avec la palette de 16 bits et l’autre avec la palette de 8 bits.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHdc" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdc () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr GetHdc();" />
      <MemberSignature Language="F#" Value="abstract member GetHdc : unit -&gt; nativeint&#xA;override this.GetHdc : unit -&gt; nativeint" Usage="graphics.GetHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.GetHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient le handle vers le contexte de périphérique associé à ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Handle vers le contexte de périphérique associé à ce <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le contexte de périphérique est une structure Windows basée sur [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] qui définit un ensemble d’objets graphiques et leurs attributs associés, ainsi que les modes graphiques qui affectent la sortie. Cette méthode retourne ce contexte de périphérique à l’exception d’une police. Car une police n’est pas sélectionnée, les appels à la <xref:System.Drawing.Font.FromHdc%2A> méthode à l’aide d’un handle retourné à partir de la <xref:System.Drawing.Graphics.GetHdc%2A> méthode échoue.  
  
 Les appels à la <xref:System.Drawing.Graphics.GetHdc%2A> et <xref:System.Drawing.Graphics.ReleaseHdc%2A> méthodes doivent figurer par paires. Lors de la portée d’un <xref:System.Drawing.Graphics.GetHdc%2A> et <xref:System.Drawing.Graphics.ReleaseHdc%2A> paire de méthodes, généralement effectuer uniquement des appels vers [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] fonctions. Appelle dans cette portée à [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] méthodes de la <xref:System.Drawing.Graphics> qui a généré le `hdc` paramètre échouent avec une `ObjectBusy` erreur. En outre, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignore les modifications d’état apportées à la <xref:System.Drawing.Graphics> de le `hdc` paramètre dans les opérations suivantes.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. L’exemple illustre l’appel à un Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] (fonction) pour effectuer la même tâche qu’un [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> (méthode). Le code exécute les actions suivantes :  
  
-   Définit l’interopérabilité <xref:System.Runtime.InteropServices.DllImportAttribute> attribut pour le fichier DLL de Windows gdi32.dll. Cette DLL contient souhaité [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] (fonction).  
  
-   Définit le <xref:System.Drawing.Rectangle> fonction dans cette DLL comme externes.  
  
-   Crée un stylet rouge.  
  
-   Avec le stylet, dessine un rectangle à l’écran à l’aide de la [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> (méthode).  
  
-   Définit une variable de type pointeur interne `hdc` et définit sa valeur sur le handle vers le contexte de périphérique du formulaire.  
  
-   Dessine un rectangle à l’écran à l’aide de la [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> (fonction).  
  
-   Libère le contexte de périphérique représenté par le `hdc` paramètre.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour accéder au code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetNearestColor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Color GetNearestColor(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.GetNearestColor : System.Drawing.Color -&gt; System.Drawing.Color" Usage="graphics.GetNearestColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">Structure <see cref="T:System.Drawing.Color" /> pour laquelle trouver une correspondance.</param>
        <summary>Obtient la couleur qui se rapproche le plus de la structure <see cref="T:System.Drawing.Color" /> spécifiée.</summary>
        <returns>Structure <see cref="T:System.Drawing.Color" /> qui représente la couleur qui se rapproche le plus de celle spécifiée avec le paramètre <paramref name="color" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une couleur arbitraire avec les coordonnées ARVB (255, 165, 63, 136).  
  
-   Crée un pinceau uni et définit sa couleur de la couleur spécifiée.  
  
-   Remplit une ellipse à l’aide de la couleur arbitraire.  
  
-   Crée une deuxième couleur et lui affecte la valeur la couleur ARVB système le plus proche.  
  
-   Remplit une deuxième ellipse avec cette couleur.  
  
 Le résultat est de deux ellipses : la première est dessinée avec la couleur arbitraire spécifiée et la deuxième avec la couleur système le plus proche de la couleur spécifiée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.InterpolationMode InterpolationMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.InterpolationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationMode As InterpolationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::InterpolationMode InterpolationMode { System::Drawing::Drawing2D::InterpolationMode get(); void set(System::Drawing::Drawing2D::InterpolationMode value); };" />
      <MemberSignature Language="F#" Value="member this.InterpolationMode : System.Drawing.Drawing2D.InterpolationMode with get, set" Usage="System.Drawing.Graphics.InterpolationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le mode d'interpolation associé à ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Une des valeurs de <see cref="T:System.Drawing.Drawing2D.InterpolationMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le mode d’interpolation détermine la façon dont les valeurs intermédiaires entre deux points de terminaison sont calculées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IntersectClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Met à jour la zone de découpage de ce <see cref="T:System.Drawing.Graphics" /> à l'intersection de la zone de découpage active et de la structure <see cref="T:System.Drawing.Rectangle" /> spécifiée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> devant croiser la zone de découpage active.</param>
        <summary>Met à jour la zone de découpage de ce <see cref="T:System.Drawing.Graphics" /> à l'intersection de la zone de découpage active et de la structure <see cref="T:System.Drawing.Rectangle" /> spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode attribue à la <xref:System.Drawing.Graphics.Clip%2A> propriété de ce <xref:System.Drawing.Graphics> la zone représentée par l’intersection de la zone de découpage active et le rectangle spécifié par le `rect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un rectangle avec le coin supérieur gauche à (0, 0) et définit la zone de découpage à ce rectangle.  
  
-   Crée un deuxième rectangle avec le coin supérieur gauche à (100, 100) et définit la zone de découpage à l’intersection de ce rectangle et la zone de découpage en cours (le premier rectangle).  
  
-   Remplit un grand rectangle qui inclut les deux rectangles précédentes avec un pinceau uni bleu.  
  
-   Réinitialise la zone de découpage à l’infini.  
  
-   Dessine les rectangles autour des deux régions de découpage. Il utilise un stylet noir pour le premier rectangle de découpage et un stylet rouge pour la deuxième zone de découpage.  
  
 Le résultat est que seule l’intersection des deux rectangles est remplie en bleu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">Structure <see cref="T:System.Drawing.RectangleF" /> devant croiser la zone de découpage active.</param>
        <summary>Met à jour la zone de découpage de ce <see cref="T:System.Drawing.Graphics" /> à l'intersection de la zone de découpage active et de la structure <see cref="T:System.Drawing.RectangleF" /> spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode attribue à la <xref:System.Drawing.Graphics.Clip%2A> propriété de ce <xref:System.Drawing.Graphics> la zone représentée par l’intersection de la zone de découpage active et le rectangle spécifié par le `rect` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un rectangle avec le coin supérieur gauche à (0, 0) et définit la zone de découpage à ce rectangle.  
  
-   Crée un deuxième rectangle avec le coin supérieur gauche à (100, 100) et définit la zone de découpage à l’intersection de ce rectangle et la zone de découpage en cours (le premier rectangle).  
  
-   Remplit un grand rectangle qui inclut les deux rectangles précédentes avec un pinceau uni bleu.  
  
-   Réinitialise la zone de découpage à l’infini.  
  
-   Dessine les rectangles autour des deux régions de découpage. Il utilise un stylet noir pour le premier rectangle de découpage et un stylet rouge pour la deuxième zone de découpage.  
  
 Le résultat est que seule l’intersection des deux rectangles est remplie en bleu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Region -&gt; unit" Usage="graphics.IntersectClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region"><see cref="T:System.Drawing.Region" /> à placer en intersection avec la zone en cours.</param>
        <summary>Met à jour la zone de découpage de ce <see cref="T:System.Drawing.Graphics" /> à l'intersection de la zone de découpage active et du <see cref="T:System.Drawing.Region" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode attribue à la <xref:System.Drawing.Graphics.Clip%2A> propriété de ce <xref:System.Drawing.Graphics> la zone représentée par l’intersection de la zone de découpage active et la région spécifié par le `region` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un rectangle avec le coin supérieur gauche à (0, 0).  
  
-   Crée une zone et lui affecte le rectangle et définit la zone de découpage dans cette région.  
  
-   Crée un deuxième rectangle avec le coin supérieur gauche à (100, 100).  
  
-   Crée une région et lui affecte le deuxième rectangle et définit la zone de découpage à l’intersection de cette région et de la zone de découpage en cours (le premier rectangle) à l’aide d’un mode d’association <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Remplit un grand rectangle qui inclut les deux régions précédentes avec un pinceau uni bleu.  
  
-   Réinitialise la zone de découpage à l’infini.  
  
-   Dessine les rectangles autour des deux régions de découpage. Il utilise un stylet noir pour la première zone de découpage et un stylet rouge pour la deuxième zone de découpage.  
  
 Le résultat est que seule l’intersection des deux régions est remplie en bleu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClipEmpty : bool" Usage="System.Drawing.Graphics.IsClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si la zone de découpage de ce <see cref="T:System.Drawing.Graphics" /> est vide.</summary>
        <value><see langword="true" /> si la zone de découpage de ce <see cref="T:System.Drawing.Graphics" /> est vide ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indique si le point spécifié par une paire de coordonnées figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Point -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Structure <see cref="T:System.Drawing.Point" /> dont la visibilité est à tester.</param>
        <summary>Indique si la structure <see cref="T:System.Drawing.Point" /> spécifiée figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns><see langword="true" /> si le point spécifié par le paramètre <paramref name="point" /> figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une zone de découpage rectangulaire et il définit en tant que zone de découpage de l’objet graphics du formulaire en utilisant <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crée deux points, un à l’intérieur de la zone de découpage et un à l’extérieur.  
  
-   Teste chacun des points pour la visibilité et dessine seul le visible.  
  
 Le résultat est un petit cercle rouge, ce qui se trouve dans la zone de découpage.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (point As PointF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.PointF -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">Structure <see cref="T:System.Drawing.PointF" /> dont la visibilité est à tester.</param>
        <summary>Indique si la structure <see cref="T:System.Drawing.PointF" /> spécifiée figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns><see langword="true" /> si le point spécifié par le paramètre <paramref name="point" /> figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une zone de découpage rectangulaire et la définit comme la zone de découpage du graphique du formulaire en utilisant <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crée deux points, un à l’intérieur de la zone de découpage et un à l’extérieur.  
  
-   Teste chacun des points pour la visibilité et dessine seul le visible.  
  
 Le résultat est un petit cercle rouge, ce qui se trouve dans la zone de découpage.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As Rectangle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Rectangle -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> dont la visibilité est à tester.</param>
        <summary>Indique si le rectangle spécifié par une structure <see cref="T:System.Drawing.Rectangle" /> figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns><see langword="true" /> si le rectangle spécifié par le paramètre <paramref name="rect" /> figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une zone de découpage rectangulaire et il définit en tant que zone de découpage de l’objet graphics du formulaire en utilisant <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crée l’emplacement et taille de deux rectangles, un à l’intérieur de la zone de découpage et un à l’extérieur.  
  
-   Chaque rectangle pour la visibilité des tests et dessine seul le visible.  
  
 Le résultat est un petit rectangle rouge, ce qui se trouve dans la zone de découpage.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As RectangleF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.RectangleF -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">Structure <see cref="T:System.Drawing.RectangleF" /> dont la visibilité est à tester.</param>
        <summary>Indique si le rectangle spécifié par une structure <see cref="T:System.Drawing.RectangleF" /> figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns><see langword="true" /> si le rectangle spécifié par le paramètre <paramref name="rect" /> figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une zone de découpage rectangulaire et il définit en tant que zone de découpage de l’objet graphics du formulaire en utilisant <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crée deux rectangles, un à l’intérieur de la zone de découpage et un à l’extérieur.  
  
-   Chaque rectangle pour la visibilité des tests et dessine seul le visible.  
  
 Le résultat est un petit rectangle rouge, ce qui se trouve dans la zone de découpage.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordonnée x du point dont la visibilité est à tester.</param>
        <param name="y">Coordonnée y du point dont la visibilité est à tester.</param>
        <summary>Indique si le point spécifié par une paire de coordonnées figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns><see langword="true" /> si le point défini par les paramètres <paramref name="x" /> et <paramref name="y" /> figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une zone de découpage rectangulaire et il définit en tant que zone de découpage de l’objet graphics du formulaire en utilisant <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crée deux points, un à l’intérieur de la zone de découpage et un à l’extérieur.  
  
-   Teste chacun des points pour la visibilité et dessine seul le visible.  
  
 Le résultat est un petit cercle rouge, ce qui se trouve dans la zone de découpage.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Coordonnée x du point dont la visibilité est à tester.</param>
        <param name="y">Coordonnée y du point dont la visibilité est à tester.</param>
        <summary>Indique si le point spécifié par une paire de coordonnées figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns><see langword="true" /> si le point défini par les paramètres <paramref name="x" /> et <paramref name="y" /> figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une zone de découpage rectangulaire et il définit en tant que zone de découpage de l’objet graphics du formulaire en utilisant <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crée deux points, un à l’intérieur de la zone de découpage et un à l’extérieur.  
  
-   Teste chacun des points pour la visibilité et dessine seul le visible.  
  
 Le résultat est un petit cercle rouge, ce qui se trouve dans la zone de découpage.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer, width As Integer, height As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int * int * int -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle dont la visibilité est à tester.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle dont la visibilité est à tester.</param>
        <param name="width">Largeur du rectangle dont la visibilité est à tester.</param>
        <param name="height">Hauteur du rectangle dont la visibilité est à tester.</param>
        <summary>Indique si le rectangle spécifié par une paire de coordonnées, une largeur et une hauteur figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns><see langword="true" /> si le rectangle défini par les paramètres <paramref name="x" />, <paramref name="y" />, <paramref name="width" /> et <paramref name="height" /> figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une zone de découpage rectangulaire et il définit en tant que zone de découpage de l’objet graphics du formulaire en utilisant <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crée l’emplacement et taille de deux rectangles, un à l’intérieur de la zone de découpage et un à l’extérieur.  
  
-   Chaque rectangle pour la visibilité des tests et dessine seul le visible.  
  
 Le résultat est un petit rectangle rouge, ce qui se trouve dans la zone de découpage.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single, width As Single, height As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single * single * single -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Coordonnée x de l'angle supérieur gauche du rectangle dont la visibilité est à tester.</param>
        <param name="y">Coordonnée y de l'angle supérieur gauche du rectangle dont la visibilité est à tester.</param>
        <param name="width">Largeur du rectangle dont la visibilité est à tester.</param>
        <param name="height">Hauteur du rectangle dont la visibilité est à tester.</param>
        <summary>Indique si le rectangle spécifié par une paire de coordonnées, une largeur et une hauteur figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns><see langword="true" /> si le rectangle défini par les paramètres <paramref name="x" />, <paramref name="y" />, <paramref name="width" /> et <paramref name="height" /> figure dans la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une zone de découpage rectangulaire et il définit en tant que zone de découpage de l’objet graphics du formulaire en utilisant <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crée l’emplacement et taille de deux rectangles, un à l’intérieur de la zone de découpage et un à l’extérieur.  
  
-   Chaque rectangle pour la visibilité des tests et dessine seul le visible.  
  
 Le résultat est un petit rectangle rouge, ce qui se trouve dans la zone de découpage.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisibleClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisibleClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisibleClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisibleClipEmpty : bool" Usage="System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" /> est vide.</summary>
        <value><see langword="true" /> si la partie visible de la zone de découpage de ce <see cref="T:System.Drawing.Graphics" /> est vide ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La zone de découpage visible est l’intersection de la zone de découpage de ce `Graphics` et la zone de découpage de la fenêtre.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region[] MeasureCharacterRanges(string text, class System.Drawing.Font font, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Drawing::Region ^&gt; ^ MeasureCharacterRanges(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::RectangleF layoutRect, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureCharacterRanges : string * System.Drawing.Font * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; System.Drawing.Region[]" Usage="graphics.MeasureCharacterRanges (text, font, layoutRect, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne à mesurer.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="layoutRect">Structure <see cref="T:System.Drawing.RectangleF" /> qui spécifie le rectangle de présentation de la chaîne.</param>
        <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" /> qui représente les informations de mise en forme de la chaîne, telles que l'interligne.</param>
        <summary>Obtient un tableau d'objets <see cref="T:System.Drawing.Region" />, dont chacun délimite une plage de positions de caractères dans la chaîne spécifiée.</summary>
        <returns>Cette méthode retourne un tableau d'objets <see cref="T:System.Drawing.Region" />, dont chacun délimite une plage de positions de caractères dans la chaîne spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les régions retournées par cette méthode sont dépendants de la résolution, donc il peut y avoir une légère perte de précision si les chaînes sont enregistrées dans un métafichier à une résolution et lecture ultérieurement à une résolution différente.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Définit une chaîne « première et seconde plages » et une police pour l’affichage de la chaîne (« Times New Roman », 16 points).  
  
-   Jeux de deux plages de caractères dans la chaîne (qui correspondent aux mots « Première » et « Seconde »).  
  
-   Crée un rectangle dans lequel afficher la chaîne.  
  
-   Définit la mise en forme de la chaîne, notamment les deux plages de caractères.  
  
-   Dessine la chaîne à l’écran.  
  
-   Mesure les plages de caractères, détermine les rectangles qui délimitent les deux plages spécifiées.  
  
-   Dessine les deux rectangles à l’écran.  
  
 Le résultat est la chaîne affichée avec la première plage ("First") délimitée par un rectangle rouge et la deuxième plage (« Second ») délimitée par un rectangle bleu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mesure la chaîne spécifiée lors de son dessin avec le <see cref="T:System.Drawing.Font" /> spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne à mesurer.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <summary>Mesure la chaîne spécifiée lors de son dessin avec le <see cref="T:System.Drawing.Font" /> spécifié.</summary>
        <returns>Cette méthode retourne une structure <see cref="T:System.Drawing.SizeF" /> qui représente la taille, dans les unités spécifiées par la propriété <see cref="P:System.Drawing.Graphics.PageUnit" />, de la chaîne définie par le paramètre <paramref name="text" /> lors de son dessin avec le paramètre <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics.MeasureString%2A> méthode est conçue pour utiliser individuels des chaînes et inclut une petite quantité d’espace supplémentaire avant et après la chaîne pour permettre des glyphes surplombants. En outre, le <xref:System.Drawing.Graphics.DrawString%2A> méthode ajuste les points de glyphe afin d’optimiser la qualité d’affichage et peut afficher une chaîne plus étroite que signalé par <xref:System.Drawing.Graphics.MeasureString%2A>. Pour obtenir des métriques appropriées pour des chaînes adjacentes dans la mise en page (par exemple, lors de l’implémentation du texte mis en forme), utilisez le <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> méthode ou l’un de le <xref:System.Drawing.Graphics.MeasureString%2A> méthodes qui prend un <xref:System.Drawing.StringFormat>et passer <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Assurez-vous également que le <xref:System.Drawing.Graphics.TextRenderingHint%2A> pour le <xref:System.Drawing.Graphics> est <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne à mesurer.  
  
-   Crée un objet de police et lui affecte la valeur Arial (16 points).  
  
-   Crée un objet de taille et utilise l’objet de police et pour mesurer la taille de la chaîne.  
  
-   Dessine un rectangle rouge à l’aide de la taille mesurée de la chaîne.  
  
-   Dessine la chaîne dans le rectangle dessiné.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne à mesurer.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="layoutArea">Structure <see cref="T:System.Drawing.SizeF" /> qui spécifie la zone de présentation maximale du texte.</param>
        <summary>Mesure la chaîne spécifiée lors de son dessin avec le <see cref="T:System.Drawing.Font" /> spécifié dans la zone de présentation spécifiée.</summary>
        <returns>Cette méthode retourne une structure <see cref="T:System.Drawing.SizeF" /> qui représente la taille, dans les unités spécifiées par la propriété <see cref="P:System.Drawing.Graphics.PageUnit" />, de la chaîne définie par le paramètre <paramref name="text" /> lors de son dessin avec le paramètre <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics.MeasureString%2A> méthode est conçue pour utiliser individuels des chaînes et inclut une petite quantité d’espace supplémentaire avant et après la chaîne pour permettre des glyphes surplombants. En outre, le <xref:System.Drawing.Graphics.DrawString%2A> méthode ajuste les points de glyphe afin d’optimiser la qualité d’affichage et peut afficher une chaîne plus étroite que signalé par <xref:System.Drawing.Graphics.MeasureString%2A>. Pour obtenir des métriques appropriées pour des chaînes adjacentes dans la mise en page (par exemple, lors de l’implémentation du texte mis en forme), utilisez le <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> méthode ou l’un de le <xref:System.Drawing.Graphics.MeasureString%2A> méthodes qui prend un <xref:System.Drawing.StringFormat>et passer <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Assurez-vous également que le <xref:System.Drawing.Graphics.TextRenderingHint%2A> pour le <xref:System.Drawing.Graphics> est <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne à mesurer et un objet de la police définie sur Arial (16 points).  
  
-   Définit la taille maximale de mise en page de la chaîne.  
  
-   Crée un objet de taille et utilise, l’objet de police et la taille de présentation maximale pour mesurer la taille de la chaîne.  
  
-   Dessine un rectangle rouge à l’aide de la taille mesurée de la chaîne.  
  
-   Dessine la chaîne dans le rectangle dessiné.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne à mesurer.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format de la chaîne.</param>
        <param name="width">Largeur maximale de la chaîne en pixels.</param>
        <summary>Mesure la chaîne spécifiée lors de son dessin avec le <see cref="T:System.Drawing.Font" /> spécifié.</summary>
        <returns>Cette méthode retourne une structure <see cref="T:System.Drawing.SizeF" /> qui représente la taille, dans les unités spécifiées par la propriété <see cref="P:System.Drawing.Graphics.PageUnit" />, de la chaîne définie par le paramètre <paramref name="text" /> lors de son dessin avec le paramètre <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `width` paramètre spécifie la valeur maximale du composant de la largeur du retourné <xref:System.Drawing.SizeF> structure (<xref:System.Drawing.SizeF.Width%2A>). Si le `width` paramètre est inférieure à la largeur réelle de la chaîne, retournée <xref:System.Drawing.SizeF.Width%2A> composant est tronqué à une valeur représentant le nombre maximal de caractères qu’ils tiennent dans la largeur spécifiée. Pour prendre en charge de la chaîne entière, retournée <xref:System.Drawing.SizeF.Height%2A> composant est alignée sur une valeur qui autorise l’affichage de la chaîne de type wrap de caractère.  
  
 Le <xref:System.Drawing.Graphics.MeasureString%2A> méthode est conçue pour utiliser individuels des chaînes et inclut une petite quantité d’espace supplémentaire avant et après la chaîne pour permettre des glyphes surplombants. En outre, le <xref:System.Drawing.Graphics.DrawString%2A> méthode ajuste les points de glyphe afin d’optimiser la qualité d’affichage et peut afficher une chaîne plus étroite que signalé par <xref:System.Drawing.Graphics.MeasureString%2A>. Pour obtenir des métriques appropriées pour des chaînes adjacentes dans la mise en page (par exemple, lors de l’implémentation du texte mis en forme), utilisez le <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> méthode ou l’un de le <xref:System.Drawing.Graphics.MeasureString%2A> méthodes qui prend un <xref:System.Drawing.StringFormat>et passer <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Assurez-vous également que le <xref:System.Drawing.Graphics.TextRenderingHint%2A> pour le <xref:System.Drawing.Graphics> est <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne à mesurer et un objet de la police définie sur Arial (16 points).  
  
-   Définit la largeur maximale de la chaîne.  
  
-   Crée un objet de taille et utilise, l’objet de police et la largeur maximale de la chaîne à mesurer la taille de la chaîne.  
  
-   Dessine un rectangle rouge à l’aide de la taille mesurée de la chaîne.  
  
-   Dessine la chaîne dans le rectangle dessiné.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::PointF origin, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.PointF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, origin, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne à mesurer.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="origin">Structure <see cref="T:System.Drawing.PointF" /> qui représente l'angle supérieur gauche de la chaîne.</param>
        <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" /> qui représente les informations de mise en forme de la chaîne, telles que l'interligne.</param>
        <summary>Mesure la chaîne spécifiée lors de son dessin avec le <see cref="T:System.Drawing.Font" /> spécifié et de sa mise en forme avec le <see cref="T:System.Drawing.StringFormat" /> spécifié.</summary>
        <returns>Cette méthode retourne une structure <see cref="T:System.Drawing.SizeF" /> qui représente la taille, dans les unités spécifiées par la propriété <see cref="P:System.Drawing.Graphics.PageUnit" />, de la chaîne définie par le paramètre <paramref name="text" /> lors de son dessin avec le paramètre <paramref name="font" /> et le paramètre <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics.MeasureString%2A> méthode est conçue pour utiliser individuels des chaînes et inclut une petite quantité d’espace supplémentaire avant et après la chaîne pour permettre des glyphes surplombants. En outre, le <xref:System.Drawing.Graphics.DrawString%2A> méthode ajuste les points de glyphe afin d’optimiser la qualité d’affichage et peut afficher une chaîne plus étroite que signalé par <xref:System.Drawing.Graphics.MeasureString%2A>. Pour obtenir des métriques appropriées pour des chaînes adjacentes dans la mise en page (par exemple, lors de l’implémentation du texte mis en forme), utilisez le <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> méthode ou l’un de le <xref:System.Drawing.Graphics.MeasureString%2A> méthodes qui prend un <xref:System.Drawing.StringFormat>et passer <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Assurez-vous également que le <xref:System.Drawing.Graphics.TextRenderingHint%2A> pour le <xref:System.Drawing.Graphics> est <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne à mesurer et un objet de la police définie sur Arial (16 points)  
  
-   Crée un point pour localiser le coin supérieur gauche de la chaîne.  
  
-   Crée un objet de format de chaîne et définit ses indicateurs de format <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Crée un objet taille pour mesurer la chaîne.  
  
-   Mesure la taille de la chaîne, à l’aide de la chaîne, l’objet de police, du point de localisation et le format de chaîne.  
  
-   Dessine un rectangle rouge à l’aide du point de localisation et de la taille mesurée de la chaîne.  
  
-   Dessine la chaîne dans le rectangle dessiné.  
  
 Le résultat est un rectangle vertical encadrant une chaîne verticale.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne à mesurer.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="layoutArea">Structure <see cref="T:System.Drawing.SizeF" /> qui spécifie la zone de présentation maximale du texte.</param>
        <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" /> qui représente les informations de mise en forme de la chaîne, telles que l'interligne.</param>
        <summary>Mesure la chaîne spécifiée lors de son dessin avec le <see cref="T:System.Drawing.Font" /> spécifié et de sa mise en forme avec le <see cref="T:System.Drawing.StringFormat" /> spécifié.</summary>
        <returns>Cette méthode retourne une structure <see cref="T:System.Drawing.SizeF" /> qui représente la taille, dans les unités spécifiées par la propriété <see cref="P:System.Drawing.Graphics.PageUnit" />, de la chaîne définie par le paramètre <paramref name="text" /> lors de son dessin avec le paramètre <paramref name="font" /> et le paramètre <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics.MeasureString%2A> méthode est conçue pour utiliser individuels des chaînes et inclut une petite quantité d’espace supplémentaire avant et après la chaîne pour permettre des glyphes surplombants. En outre, le <xref:System.Drawing.Graphics.DrawString%2A> méthode ajuste les points de glyphe afin d’optimiser la qualité d’affichage et peut afficher une chaîne plus étroite que signalé par <xref:System.Drawing.Graphics.MeasureString%2A>. Pour obtenir des métriques appropriées pour des chaînes adjacentes dans la mise en page (par exemple, lors de l’implémentation du texte mis en forme), utilisez le <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> méthode ou l’un de le <xref:System.Drawing.Graphics.MeasureString%2A> méthodes qui prend un <xref:System.Drawing.StringFormat>et passer <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Assurez-vous également que le <xref:System.Drawing.Graphics.TextRenderingHint%2A> pour le <xref:System.Drawing.Graphics> est <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne à mesurer et un objet de la police définie sur Arial (16 points).  
  
-   Définit la taille maximale de mise en page de la chaîne, en créant un objet taille pour mesurer la chaîne.  
  
-   Crée un objet de format de chaîne et définit ses indicateurs de format <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Mesure la taille de la chaîne, à l’aide de la chaîne, l’objet de police, la taille maximale de mise en page et le format de chaîne.  
  
-   Dessine un rectangle rouge à l’aide de la taille mesurée de la chaîne.  
  
-   Dessine la chaîne dans le rectangle dessiné.  
  
 Le résultat est un rectangle vertical encadrant une chaîne verticale.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne à mesurer.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="width">Largeur maximale de la chaîne.</param>
        <param name="format"><see cref="T:System.Drawing.StringFormat" /> qui représente les informations de mise en forme de la chaîne, telles que l'interligne.</param>
        <summary>Mesure la chaîne spécifiée lors de son dessin avec le <see cref="T:System.Drawing.Font" /> spécifié et de sa mise en forme avec le <see cref="T:System.Drawing.StringFormat" /> spécifié.</summary>
        <returns>Cette méthode retourne une structure <see cref="T:System.Drawing.SizeF" /> qui représente la taille, dans les unités spécifiées par la propriété <see cref="P:System.Drawing.Graphics.PageUnit" />, de la chaîne définie par le paramètre <paramref name="text" /> lors de son dessin avec le paramètre <paramref name="font" /> et le paramètre <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics.MeasureString%2A> méthode est conçue pour utiliser individuels des chaînes et inclut une petite quantité d’espace supplémentaire avant et après la chaîne pour permettre des glyphes surplombants. En outre, le <xref:System.Drawing.Graphics.DrawString%2A> méthode ajuste les points de glyphe afin d’optimiser la qualité d’affichage et peut afficher une chaîne plus étroite que signalé par <xref:System.Drawing.Graphics.MeasureString%2A>. Pour obtenir des métriques appropriées pour des chaînes adjacentes dans la mise en page (par exemple, lors de l’implémentation du texte mis en forme), utilisez le <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> méthode ou l’un de le <xref:System.Drawing.Graphics.MeasureString%2A> méthodes qui prend un <xref:System.Drawing.StringFormat>et passer <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Assurez-vous également que le <xref:System.Drawing.Graphics.TextRenderingHint%2A> pour le <xref:System.Drawing.Graphics> est <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne à mesurer et une police objet ayant la valeur Arial (16 points).  
  
-   Définit la largeur maximale de la chaîne.  
  
-   Crée un objet de format de chaîne et définit ses indicateurs de format <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Crée un objet taille pour mesurer la chaîne.  
  
-   Mesure la taille de la chaîne, à l’aide de la chaîne, l’objet de police, la largeur maximale et le format de chaîne.  
  
-   Dessine un rectangle rouge à l’aide de la taille mesurée de la chaîne.  
  
-   Dessine la chaîne dans le rectangle dessiné.  
  
 Le résultat est un rectangle vertical encadrant une chaîne verticale.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat, [out] int32&amp; charactersFitted, [out] int32&amp; linesFilled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat, [Runtime::InteropServices::Out] int % charactersFitted, [Runtime::InteropServices::Out] int % linesFilled);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat *  *  -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat, charactersFitted, linesFilled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne à mesurer.</param>
        <param name="font"><see cref="T:System.Drawing.Font" /> qui définit le format du texte de la chaîne.</param>
        <param name="layoutArea">Structure <see cref="T:System.Drawing.SizeF" /> qui spécifie la zone de présentation maximale du texte.</param>
        <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" /> qui représente les informations de mise en forme de la chaîne, telles que l'interligne.</param>
        <param name="charactersFitted">Nombre de caractères dans la chaîne.</param>
        <param name="linesFilled">Nombre de lignes de texte dans la chaîne.</param>
        <summary>Mesure la chaîne spécifiée lors de son dessin avec le <see cref="T:System.Drawing.Font" /> spécifié et de sa mise en forme avec le <see cref="T:System.Drawing.StringFormat" /> spécifié.</summary>
        <returns>Cette méthode retourne une structure <see cref="T:System.Drawing.SizeF" /> qui représente la taille, dans les unités spécifiées par la propriété <see cref="P:System.Drawing.Graphics.PageUnit" />, de la chaîne définie par le paramètre <paramref name="text" /> lors de son dessin avec le paramètre <paramref name="font" /> et le paramètre <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Drawing.Graphics.MeasureString%2A> méthode est conçue pour utiliser individuels des chaînes et inclut une petite quantité d’espace supplémentaire avant et après la chaîne pour permettre des glyphes surplombants. En outre, le <xref:System.Drawing.Graphics.DrawString%2A> méthode ajuste les points de glyphe afin d’optimiser la qualité d’affichage et peut afficher une chaîne plus étroite que signalé par <xref:System.Drawing.Graphics.MeasureString%2A>. Pour obtenir des métriques appropriées pour des chaînes adjacentes dans la mise en page (par exemple, lors de l’implémentation du texte mis en forme), utilisez le <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> méthode ou l’un de le <xref:System.Drawing.Graphics.MeasureString%2A> méthodes qui prend un <xref:System.Drawing.StringFormat> et passer <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Vérifiez également la <xref:System.Drawing.Graphics.TextRenderingHint%2A> pour le <xref:System.Drawing.Graphics> est <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée une chaîne à mesurer et un objet de la police définie sur Arial (16 points)  
  
-   Définit la taille maximale de mise en page de la chaîne.  
  
-   Crée un objet de format de chaîne et définit ses indicateurs de format <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Crée les variables de type entier `charactersFitted` et `linesFilled` et un objet taille pour mesurer la chaîne.  
  
-   Mesure la taille de la chaîne et détermine le nombre de caractères ajustés et de lignes remplies, à l’aide de la chaîne, l’objet de police, la taille maximale de mise en page et le format de chaîne.  
  
-   Dessine un rectangle rouge à l’aide de la taille mesurée de la chaîne.  
  
-   Dessine la chaîne dans le rectangle dessiné.  
  
-   Dessine les valeurs du nombre de caractères ajustés et de lignes remplies.  
  
 Le résultat est un rectangle vertical encadrant une chaîne verticale.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Utilisation de polices et de texte</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Multiplie la transformation universelle de ce <see cref="T:System.Drawing.Graphics" /> et spécifie l'objet <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="graphics.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" /> 4 x 4 qui multiplie la transformation universelle.</param>
        <summary>Multiplie la transformation universelle de ce <see cref="T:System.Drawing.Graphics" /> et spécifie l'objet <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ajoute la matrice spécifiée par le `matrix` paramètre, afin que le résultat est `matrix` x transformation universelle.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un `transformMatrix` matrice (deux par deux matrice d’identité plus un vecteur de translation de zéro).  
  
-   Convertit la matrice de transformation selon un vecteur (200, 100).  
  
-   Fait pivoter la matrice de transformation de monde du formulaire Windows de 30 degrés, ajoute la matrice de rotation de 30 degrés à la matrice de transformation du formulaire.  
  
-   Multiplie la matrice de transformation universelle pivotée par le texte traduit `transformMatrix`et ajoute le `transformMatrix` à la matrice de transformation world.  
  
-   Dessine une ellipse convertie pivotée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">Représentation matricielle des transformations</related>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" /> 4 x 4 qui multiplie la transformation universelle.</param>
        <param name="order">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> qui détermine l'ordre de la multiplication.</param>
        <summary>Multiplie la transformation universelle de ce <see cref="T:System.Drawing.Graphics" /> et spécifie <see cref="T:System.Drawing.Drawing2D.Matrix" /> dans l'ordre indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur <xref:System.Drawing.Drawing2D.MatrixOrder.Prepend> pour le `order` paramètre spécifie que l’ordre de la multiplication est `matrix` x transformation universelle. La valeur <xref:System.Drawing.Drawing2D.MatrixOrder.Append> pour `order` Spécifie que l’ordre de la multiplication est transformation universelle x `matrix`.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un `transformMatrix` matrice (deux par deux matrice d’identité plus un vecteur de translation de zéro).  
  
-   Convertit la matrice de transformation selon un vecteur (200, 100).  
  
-   Fait pivoter la matrice de transformation de monde du formulaire Windows de 30 degrés, en ajoutant au début de la matrice de rotation de 30 degrés à la matrice de transformation du formulaire.  
  
-   Multiplie la matrice de transformation universelle pivotée par le texte traduit `transformMatrix`, ajout du `transformMatrix` à la matrice de transformation world.  
  
-   Dessine une ellipse convertie pivotée.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">Représentation matricielle des transformations</related>
      </Docs>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PageScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageScale" />
      <MemberSignature Language="VB.NET" Value="Public Property PageScale As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PageScale { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.PageScale : single with get, set" Usage="System.Drawing.Graphics.PageScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la mise à l'échelle entre les unités universelles et les unités de page de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Cette propriété spécifie une valeur de mise à l'échelle entre les unités universelles et les unités de page de ce <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Drawing.Graphics.PageScale%2A> et <xref:System.Drawing.Graphics.TranslateTransform%2A> members pour modifier la mise à l’échelle et l’origine lorsque vous dessinez un rectangle.  
  
 Cet exemple est conçu pour être utilisé avec Windows Forms. Collez le code dans un formulaire et appelez le `ChangePageScaleAndTranslateTransform` méthode lors du traitement du formulaire <xref:System.Windows.Forms.Control.Paint> événement, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.GraphicsProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]
 [!code-vb[System.Drawing.GraphicsProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Types de systèmes de coordonnées</related>
      </Docs>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit PageUnit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PageUnit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit PageUnit { System::Drawing::GraphicsUnit get(); void set(System::Drawing::GraphicsUnit value); };" />
      <MemberSignature Language="F#" Value="member this.PageUnit : System.Drawing.GraphicsUnit with get, set" Usage="System.Drawing.Graphics.PageUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'unité de mesure utilisée pour les coordonnées de page dans ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Une des valeurs de <see cref="T:System.Drawing.GraphicsUnit" /> autre que <see cref="F:System.Drawing.GraphicsUnit.World" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’unité de graphique est l’unité de mesure utilisée pour les coordonnées de page dans ce <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 L’exemple de code suivant montre l’effet de la modification de la <xref:System.Drawing.Graphics.PageUnit%2A> propriété.  
  
 Cet exemple est conçu pour être utilisé avec Windows Forms. Collez le code dans un formulaire et appelez le `ChangePageUnit` méthode lors du traitement du formulaire <xref:System.Windows.Forms.Control.Paint> événement, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.GraphicsProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]
 [!code-vb[System.Drawing.GraphicsProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:System.Drawing.Graphics.PageUnit" /> a la valeur <see cref="F:System.Drawing.GraphicsUnit.World" />, qui n'est pas une unité physique.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Types de systèmes de coordonnées</related>
      </Docs>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PixelOffsetMode" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelOffsetMode As PixelOffsetMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PixelOffsetMode PixelOffsetMode { System::Drawing::Drawing2D::PixelOffsetMode get(); void set(System::Drawing::Drawing2D::PixelOffsetMode value); };" />
      <MemberSignature Language="F#" Value="member this.PixelOffsetMode : System.Drawing.Drawing2D.PixelOffsetMode with get, set" Usage="System.Drawing.Graphics.PixelOffsetMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur spécifiant le mode d’offset des pixels lors du rendu de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Cette propriété spécifie un membre de l'énumération <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété permet de spécifier soit supérieur qualité, rendu plus lent ou une qualité inférieure, accélère le rendu du contenu de ce <xref:System.Drawing.Graphics> objet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReleaseHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Libère un handle vers le contexte de périphérique obtenu lors d’un précédent appel à la méthode <see cref="M:System.Drawing.Graphics.GetHdc" /> de ce <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHdc();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHdc : unit -&gt; unit&#xA;override this.ReleaseHdc : unit -&gt; unit" Usage="graphics.ReleaseHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.ReleaseHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère un handle vers le contexte de périphérique obtenu lors d’un précédent appel à la méthode <see cref="M:System.Drawing.Graphics.GetHdc" /> de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.GetHdc%2A> et <xref:System.Drawing.Graphics.ReleaseHdc%2A> sont deux méthodes qui vous permettent d’obtenir et libérer le handle pour un périphérique Windows. Vous devez toujours faire suivre un appel à <xref:System.Drawing.Graphics.GetHdc%2A> avec un appel à <xref:System.Drawing.Graphics.ReleaseHdc%2A> lorsque vous avez terminé avec le handle Windows.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour accéder au code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdc : nativeint -&gt; unit" Usage="graphics.ReleaseHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Handle vers un contexte de périphérique obtenu lors d'un précédent appel à la méthode <see cref="M:System.Drawing.Graphics.GetHdc" /> de ce <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Libère un handle vers le contexte de périphérique obtenu lors d’un précédent appel à la méthode <see cref="M:System.Drawing.Graphics.GetHdc" /> de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le contexte de périphérique est une structure Windows basée sur [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] qui définit un ensemble d’objets graphiques et leurs attributs associés, ainsi que les modes graphiques qui affectent la sortie.  
  
 Les appels à la <xref:System.Drawing.Graphics.GetHdc%2A> et <xref:System.Drawing.Graphics.ReleaseHdc%2A> méthodes doivent figurer par paires. Lors de la portée d’un <xref:System.Drawing.Graphics.GetHdc%2A> et <xref:System.Drawing.Graphics.ReleaseHdc%2A> paire de méthodes, vous appelez généralement qu’uniquement à [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] fonctions. Appelle dans cette portée à [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] méthodes de la <xref:System.Drawing.Graphics> qui a généré le `hdc` paramètre échouent avec une `ObjectBusy` erreur. En outre, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignore les modifications d’état apportées à la <xref:System.Drawing.Graphics> de le `hdc` paramètre dans les opérations suivantes.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. L’exemple illustre l’appel à un Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] (fonction) pour effectuer la même tâche qu’un [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> (méthode). Le code exécute les actions suivantes :  
  
-   Définit l’interopérabilité <xref:System.Runtime.InteropServices.DllImportAttribute> attribut pour le fichier DLL de Windows gdi32.dll. Cette DLL contient souhaité [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] (fonction) et elle définit le <xref:System.Drawing.Rectangle> fonction dans cette DLL comme externes.  
  
-   Crée un stylet rouge.  
  
-   Avec le stylet, dessine un rectangle à l’écran à l’aide de la [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> (méthode).  
  
-   Définit une variable de type pointeur interne `hdc` et définit sa valeur sur le handle vers le contexte de périphérique du formulaire.  
  
-   Dessine un rectangle à l’écran à l’aide de la [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> (fonction).  
  
-   Libère le contexte de périphérique représenté par le `hdc` paramètre.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour accéder au code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdcInternal (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdcInternal : nativeint -&gt; unit" Usage="graphics.ReleaseHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Handle vers un contexte de périphérique.</param>
        <summary>Libère un handle vers un contexte de périphérique.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour accéder au code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point RenderingOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.RenderingOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderingOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point RenderingOrigin { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderingOrigin : System.Drawing.Point with get, set" Usage="System.Drawing.Graphics.RenderingOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'origine du rendu de ce <see cref="T:System.Drawing.Graphics" /> pour le faux dégradé et les pinceaux à hachure.</summary>
        <value>Structure <see cref="T:System.Drawing.Point" /> qui représente l'origine du faux dégradé de 8 bits par pixel et de 16 bits par pixel et qui est également utilisée pour définir l'origine pour les pinceaux à hachures.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetClip" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetClip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetClip();" />
      <MemberSignature Language="F#" Value="member this.ResetClip : unit -&gt; unit" Usage="graphics.ResetClip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rétablit une zone infinie comme valeur de la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque la zone de découpage d’un <xref:System.Drawing.Graphics> est infinie, ce que ces éléments <xref:System.Drawing.Graphics> ne sont pas découpés.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un rectangle avec le coin supérieur gauche à (0, 0) et définit la zone de découpage à ce rectangle.  
  
-   Crée un deuxième rectangle avec le coin supérieur gauche à (100, 100) et définit la zone de découpage à l’intersection de ce rectangle et la zone de découpage en cours (le premier rectangle).  
  
-   Remplit un grand rectangle qui inclut les deux rectangles précédentes avec un pinceau uni bleu.  
  
-   Réinitialise la zone de découpage à l’infini.  
  
-   Dessine les rectangles autour des deux régions de découpage ; Il utilise un stylet noir pour le premier rectangle de découpage et un stylet rouge pour la deuxième zone de découpage.  
  
 Le résultat est que seule l’intersection des deux rectangles est remplie en bleu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="graphics.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rétablit la matrice d'identité comme valeur de la matrice de transformation universelle de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La matrice d’identité représente une transformation à aucune mise à l’échelle, rotation ou translation. Réinitialisation de la transformation universelle de ce <xref:System.Drawing.Graphics> matrice d’identité signifie que sa transformation universelle ne modifie pas la géométrie des éléments transformés.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Convertit la transformation de monde de l’écran de Windows par un vecteur (100, 0).  
  
-   Enregistre l’état des graphiques du formulaire.  
  
-   Réinitialise la transformation de monde du formulaire à une identité et remplit un rectangle avec un pinceau rouge pleine.  
  
-   Restaure l’état des graphiques convertis et remplit un rectangle avec un pinceau uni bleu.  
  
 Le résultat est un rectangle de couleur rouge non traduit et un rectangle rempli en bleu traduit.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(class System.Drawing.Drawing2D.GraphicsState gstate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restore (gstate As GraphicsState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restore(System::Drawing::Drawing2D::GraphicsState ^ gstate);" />
      <MemberSignature Language="F#" Value="member this.Restore : System.Drawing.Drawing2D.GraphicsState -&gt; unit" Usage="graphics.Restore gstate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <param name="gstate"><see cref="T:System.Drawing.Drawing2D.GraphicsState" /> qui représente l'état dans lequel rétablir ce <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Rétablit l'état représenté par <see cref="T:System.Drawing.Graphics" /> comme valeur de l'état de ce <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.Save%2A> méthode d’un <xref:System.Drawing.Graphics>, un bloc d’informations qui conserve l’état de la <xref:System.Drawing.Graphics> est placé sur une pile. Le <xref:System.Drawing.Graphics.Save%2A> méthode retourne un <xref:System.Drawing.Drawing2D.GraphicsState> qui identifie ce bloc d’informations. Lorsque vous passez l’identifiant <xref:System.Drawing.Drawing2D.GraphicsState> à la <xref:System.Drawing.Graphics.Restore%2A> (méthode), le bloc d’informations est supprimé de la pile et est utilisé pour restaurer le <xref:System.Drawing.Graphics> à l’état, il se trouvait au moment de la <xref:System.Drawing.Graphics.Save%2A> appel de méthode. Notez que le <xref:System.Drawing.Drawing2D.GraphicsState> retourné par un appel donné à la <xref:System.Drawing.Graphics.Save%2A> méthode peut être passée qu’une seule fois à la `Restore` (méthode).  
  
 Les appels à la <xref:System.Drawing.Graphics.Save%2A> méthode peut être imbriquée ; autrement dit, vous pouvez appeler la <xref:System.Drawing.Graphics.Save%2A> méthode plusieurs fois avant d’appeler le <xref:System.Drawing.Graphics.Restore%2A> (méthode). Chaque fois que vous appelez le <xref:System.Drawing.Graphics.Save%2A> (méthode), un bloc d’informations est placé sur la pile, et vous recevez un <xref:System.Drawing.Drawing2D.GraphicsState> pour le bloc d’informations. Lorsque vous passez un de ces objets vers le <xref:System.Drawing.Graphics.Restore%2A> (méthode), le <xref:System.Drawing.Graphics> est retourné à l’état, il se trouvait au moment de la <xref:System.Drawing.Graphics.Save%2A> appel de méthode qui a retourné cet particulier <xref:System.Drawing.Drawing2D.GraphicsState>. Le bloc d’informations placé sur la pile par qui <xref:System.Drawing.Graphics.Save%2A> appel de méthode est supprimé de la pile, et tous les blocs d’informations placés sur cette pile après cela <xref:System.Drawing.Graphics.Save%2A> appel de méthode sont également supprimés.  
  
 Les appels à la <xref:System.Drawing.Graphics.BeginContainer%2A> blocs d’informations sur place (méthode) sur la même pile d’appels à la <xref:System.Drawing.Graphics.Save%2A> (méthode). Tout comme un <xref:System.Drawing.Graphics.Restore%2A> appel est associé à un <xref:System.Drawing.Graphics.Save%2A> appeler, un <xref:System.Drawing.Graphics.EndContainer%2A> appel de méthode est associée à un <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode.  
  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.Restore%2A> (méthode), tous les blocs d’informations placés sur la pile (par le <xref:System.Drawing.Graphics.Save%2A> (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.Save%2A> méthode sont supprimés de la pile. De même, lorsque vous appelez le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), tous les blocs d’informations placés sur la pile (par le <xref:System.Drawing.Graphics.Save%2A> (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode sont supprimés de la pile.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Convertit la transformation de monde de l’écran de Windows par un vecteur (100, 0).  
  
-   Enregistre l’état des graphiques du formulaire.  
  
-   Réinitialise la transformation de monde du formulaire à une identité et remplit un rectangle avec un pinceau rouge pleine.  
  
-   Restaure l’état des graphiques convertis et remplit un deuxième rectangle avec un pinceau uni bleu.  
  
 Le résultat est un rectangle de couleur rouge non traduit et un rectangle rempli en bleu traduit.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Applique la rotation spécifiée à la matrice de transformation de ce <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="graphics.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Angle de rotation en degrés.</param>
        <summary>Applique la rotation spécifiée à la matrice de transformation de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’opération de rotation consiste à multiplier la matrice de transformation par une matrice dont les éléments sont dérivés de la `angle` paramètre. Cette méthode s’applique la rotation en ajoutant le préfixe à la matrice de transformation.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Convertit la matrice de transformation de monde de l’écran de Windows par le vecteur (100, 0).  
  
-   Fait pivoter la transformation universelle selon un angle de 30 degrés, en ajoutant au début de la matrice de rotation de la matrice de transformation de monde.  
  
-   Dessine une ellipse convertie pivotée avec un stylet bleu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Angle de rotation en degrés.</param>
        <param name="order">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> qui spécifie si la rotation est ajoutée au début ou à la fin de la matrice de transformation.</param>
        <summary>Applique la rotation spécifiée à la matrice de transformation de ce <see cref="T:System.Drawing.Graphics" /> dans l'ordre indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’opération de rotation consiste à multiplier la matrice de transformation par une matrice dont les éléments sont dérivés de la `angle` paramètre. Cette méthode ajoute au début ou fin de la matrice de transformation de la <xref:System.Drawing.Graphics> par la matrice de rotation en fonction de la `order` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Convertit la matrice de transformation de monde de l’écran de Windows par le vecteur (100, 0).  
  
-   Fait pivoter la transformation universelle selon un angle de 30 degrés, en ajoutant la matrice de rotation à la matrice de transformation de monde avec <xref:System.Drawing.Drawing2D.MatrixOrder.Append>.  
  
-   Dessine une ellipse convertie pivotée avec un stylet bleu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsState Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Save" />
      <MemberSignature Language="VB.NET" Value="Public Function Save () As GraphicsState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsState ^ Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; System.Drawing.Drawing2D.GraphicsState" Usage="graphics.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enregistre l'état actuel de ce <see cref="T:System.Drawing.Graphics" /> et identifie l'état enregistré avec <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <returns>Cette méthode retourne <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> qui représente l'état enregistré de ce <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.Save%2A> méthode d’un <xref:System.Drawing.Graphics>, un bloc d’informations qui conserve l’état de la <xref:System.Drawing.Graphics> est placé sur une pile. Le <xref:System.Drawing.Graphics.Save%2A> méthode retourne un <xref:System.Drawing.Drawing2D.GraphicsState> qui identifie ce bloc d’informations. Lorsque vous passez l’identifiant <xref:System.Drawing.Drawing2D.GraphicsState> à la <xref:System.Drawing.Graphics.Restore%2A> (méthode), le bloc d’informations est supprimé de la pile et est utilisé pour restaurer le <xref:System.Drawing.Graphics> à l’état, il se trouvait au moment de la <xref:System.Drawing.Graphics.Save%2A> appel de méthode. Notez que le <xref:System.Drawing.Drawing2D.GraphicsState> retourné par un appel donné à la <xref:System.Drawing.Graphics.Save%2A> méthode peut être passée qu’une seule fois à la <xref:System.Drawing.Graphics.Restore%2A> (méthode).  
  
 Les appels à la <xref:System.Drawing.Graphics.Save%2A> méthode peut être imbriquée ; autrement dit, vous pouvez appeler la <xref:System.Drawing.Graphics.Save%2A> méthode plusieurs fois avant d’appeler le <xref:System.Drawing.Graphics.Restore%2A> (méthode). Chaque fois que vous appelez le <xref:System.Drawing.Graphics.Save%2A> (méthode), un bloc d’informations est placé sur la pile, et vous recevez un <xref:System.Drawing.Drawing2D.GraphicsState> pour le bloc d’informations. Lorsque vous passez un de ces objets vers le <xref:System.Drawing.Graphics.Restore%2A> (méthode), le <xref:System.Drawing.Graphics> est retourné à l’état, il se trouvait au moment de la <xref:System.Drawing.Graphics.Save%2A> appel de méthode qui a retourné cet particulier <xref:System.Drawing.Drawing2D.GraphicsState>. Le bloc d’informations placé sur la pile par qui <xref:System.Drawing.Graphics.Save%2A> appel de méthode est supprimé de la pile, et tous les blocs d’informations placés sur cette pile après cela <xref:System.Drawing.Graphics.Save%2A> appel de méthode sont également supprimés.  
  
 Les appels à la <xref:System.Drawing.Graphics.BeginContainer%2A> blocs d’informations sur place (méthode) sur la même pile d’appels à la <xref:System.Drawing.Graphics.Save%2A> (méthode). Tout comme un <xref:System.Drawing.Graphics.Restore%2A> appel est associé à un <xref:System.Drawing.Graphics.Save%2A> appeler, un <xref:System.Drawing.Graphics.EndContainer%2A> appel de méthode est associée à un <xref:System.Drawing.Graphics.BeginContainer%2A> appel de méthode.  
  
 Lorsque vous appelez le <xref:System.Drawing.Graphics.Restore%2A> (méthode), tous les blocs d’informations placés sur la pile (par le <xref:System.Drawing.Graphics.Save%2A> (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.Save%2A> méthode sont supprimés de la pile. De même, lorsque vous appelez le <xref:System.Drawing.Graphics.EndContainer%2A> (méthode), tous les blocs d’informations placés sur la pile (par le <xref:System.Drawing.Graphics.Save%2A> (méthode) ou par le <xref:System.Drawing.Graphics.BeginContainer%2A> méthode) après l’appel correspondant à la <xref:System.Drawing.Graphics.BeginContainer%2A> méthode sont supprimés de la pile.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Convertit la transformation de monde de l’écran de Windows par un vecteur (100, 0).  
  
-   Enregistre l’état des graphiques du formulaire.  
  
-   Réinitialise la transformation de monde du formulaire à une identité (matrice d’identité 2 x 2 plus une conversion de vecteur zéro) et remplit un rectangle avec un pinceau rouge pleine.  
  
-   Restaure l’état des graphiques convertis et remplit un rectangle avec un pinceau uni bleu.  
  
 Le résultat est un rectangle de couleur rouge non traduit sur la gauche et un rectangle rempli en bleu traduit sur la droite du formulaire.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Applique l'opération de mise à l'échelle spécifiée à la matrice de transformation de ce <see cref="T:System.Drawing.Graphics" /> en l'ajoutant au début de la matrice de transformation de l'objet.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="graphics.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Facteur d'échelle sur l'axe x.</param>
        <param name="sy">Facteur d'échelle sur l'axe y.</param>
        <summary>Applique l'opération de mise à l'échelle spécifiée à la matrice de transformation de ce <see cref="T:System.Drawing.Graphics" /> en l'ajoutant au début de la matrice de transformation de l'objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’opération de mise à l’échelle consiste à multiplier la matrice de transformation par une matrice diagonale dont les éléments sont (`sx`, `sy`, 1). Cette méthode ajoute la matrice de transformation de la <xref:System.Drawing.Graphics> par la matrice de mise à l’échelle.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Fait pivoter la matrice de transformation de monde du formulaire Windows de 30 degrés.  
  
-   Met à l’échelle cette matrice selon un facteur de 3 sur l’axe x et un facteur de 1 sur l’axe y en ajoutant au début de la transformation de mise à l’échelle.  
  
-   Dessine un rectangle englobant pivoté avec un stylet bleu.  
  
 Le résultat est toujours un rectangle.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Facteur d'échelle sur l'axe x.</param>
        <param name="sy">Facteur d'échelle sur l'axe y.</param>
        <param name="order">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> qui spécifie si l'opération de mise à l'échelle est ajoutée au début ou à la fin de la matrice de transformation.</param>
        <summary>Applique l'opération de mise à l'échelle spécifiée à la matrice de transformation de ce <see cref="T:System.Drawing.Graphics" /> dans l'ordre indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’opération de mise à l’échelle consiste à multiplier la matrice de transformation par une matrice diagonale dont les éléments sont (`sx`, `sy`, 1). Cette méthode ajoute au début ou fin de la matrice de transformation de la <xref:System.Drawing.Graphics> par la matrice de mise à l’échelle en fonction de la `order` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Fait pivoter la matrice de transformation de monde du formulaire Windows de 30 degrés.  
  
-   Met à l’échelle cette matrice selon un facteur de 3 sur l’axe x et un facteur de 1 sur l’axe y en ajoutant la transformation de mise à l’échelle avec le <xref:System.Drawing.Drawing2D.MatrixOrder.Append> membre.  
  
-   Dessine un rectangle englobant pivoté avec un stylet bleu.  
  
 Il en résulte un parallélogramme.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Affecte la propriété <see langword="Clip" /> du <see cref="T:System.Drawing.Graphics" /> spécifié à la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.SetClip path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> qui représente la nouvelle zone de découpage.</param>
        <summary>Affecte le <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> spécifié à la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le tracé graphique représenté par le `path` paramètre n’est pas fermé, un segment est ajouté entre le dernier point au premier point pour fermer le chemin d’accès.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un tracé graphique et ajoute une ellipse au tracé.  
  
-   Définit la zone de découpage pour le chemin d’accès elliptique.  
  
-   Remplit un grand rectangle avec un pinceau noir uni.  
  
 Il en résulte une ellipse remplie en noir.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (g As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics -&gt; unit" Usage="graphics.SetClip g" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Drawing.Graphics" /> à partir duquel extraire la nouvelle zone de découpage.</param>
        <summary>Affecte la propriété <see langword="Clip" /> du <see cref="T:System.Drawing.Graphics" /> spécifié à la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, ainsi que `thisForm`, le <xref:System.Windows.Forms.Form> pour l’exemple. Le code exécute les actions suivantes :  
  
-   Crée une table temporaire <xref:System.Drawing.Graphics> à partir de la `thisForm` <xref:System.Windows.Forms.Form> de l’exemple.  
  
-   Définit la zone de découpage de temporaire <xref:System.Drawing.Graphics> un petit carré.  
  
-   Met à jour de la zone de découpage de l’objet graphique du formulaire à celle de la variable temporaire <xref:System.Drawing.Graphics>.  
  
-   Remplit un grand rectangle avec un pinceau noir uni.  
  
 Le résultat est un carré de petites rempli en noir.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> qui représente la nouvelle zone de découpage.</param>
        <summary>Affecte le rectangle spécifié par une structure <see cref="T:System.Drawing.Rectangle" /> à la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un petit rectangle pour la zone de découpage.  
  
-   Définit la zone de découpage au rectangle.  
  
-   Remplit un grand rectangle avec un pinceau noir uni.  
  
 Le résultat est un rectangle rempli petite en noir.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">Structure <see cref="T:System.Drawing.RectangleF" /> qui représente la nouvelle zone de découpage.</param>
        <summary>Affecte le rectangle spécifié par une structure <see cref="T:System.Drawing.RectangleF" /> à la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un petit rectangle pour la zone de découpage.  
  
-   Définit la zone de découpage au rectangle.  
  
-   Remplit un grand rectangle avec un pinceau noir uni.  
  
 Le résultat est un rectangle rempli petite en noir.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (path, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> à associer.</param>
        <param name="combineMode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.CombineMode" /> qui spécifie l'opération d'association à utiliser.</param>
        <summary>Affecte le résultat de l'opération spécifiée associant la zone de découpage active et le <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> spécifié à la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le tracé graphique représenté par le `path` paramètre n’est pas fermé, un segment est ajouté entre le dernier point au premier point pour fermer le chemin d’accès.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un tracé graphique et ajoute une ellipse au tracé.  
  
-   Définit la zone de découpage pour le chemin d’accès elliptique avec le <xref:System.Drawing.Drawing2D.CombineMode.Replace> membre.  
  
-   Remplit un grand rectangle avec un pinceau noir uni.  
  
 Il en résulte une ellipse remplie en noir.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (g, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Drawing.Graphics" /> qui spécifie la zone de découpage à associer.</param>
        <param name="combineMode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.CombineMode" /> qui spécifie l'opération d'association à utiliser.</param>
        <summary>Affecte le résultat de l'opération spécifiée associant la zone de découpage active et la propriété <see cref="P:System.Drawing.Graphics.Clip" /> du <see cref="T:System.Drawing.Graphics" /> spécifié à la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, ainsi que `thisForm`, le <xref:System.Windows.Forms.Form> pour l’exemple. Le code exécute les actions suivantes :  
  
-   Crée une table temporaire <xref:System.Drawing.Graphics> à partir de la `thisForm` <xref:System.Windows.Forms.Form> de l’exemple.  
  
-   Définit la zone de découpage de temporaire <xref:System.Drawing.Graphics> un petit carré.  
  
-   Met à jour de la zone de découpage de l’objet graphique du formulaire à celle de la nouvelle <xref:System.Drawing.Graphics> avec la <xref:System.Drawing.Drawing2D.CombineMode.Replace> membre.  
  
-   Remplit un grand rectangle avec un pinceau noir uni.  
  
 Le résultat est un carré de petites rempli en noir.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">Structure <see cref="T:System.Drawing.Rectangle" /> à associer.</param>
        <param name="combineMode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.CombineMode" /> qui spécifie l'opération d'association à utiliser.</param>
        <summary>Affecte le résultat de l'opération spécifiée associant la zone de découpage active et le rectangle spécifié par une structure <see cref="T:System.Drawing.Rectangle" /> à la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un petit rectangle pour la zone de découpage.  
  
-   Définit la zone de découpage au rectangle avec le <xref:System.Drawing.Drawing2D.CombineMode.Replace> membre.  
  
-   Remplit un grand rectangle avec un pinceau noir uni.  
  
 Le résultat est un rectangle rempli petite en noir.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">Structure <see cref="T:System.Drawing.RectangleF" /> à associer.</param>
        <param name="combineMode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.CombineMode" /> qui spécifie l'opération d'association à utiliser.</param>
        <summary>Affecte le résultat de l'opération spécifiée associant la zone de découpage active et le rectangle spécifié par une structure <see cref="T:System.Drawing.RectangleF" /> à la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un petit rectangle pour la zone de découpage.  
  
-   Définit la zone de découpage au rectangle avec le <xref:System.Drawing.Drawing2D.CombineMode.Replace> membre.  
  
-   Remplit un grand rectangle avec un pinceau noir uni.  
  
 Le résultat est un rectangle rempli petite en noir.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Region region, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Region ^ region, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Region * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (region, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="region"><see cref="T:System.Drawing.Region" /> à associer.</param>
        <param name="combineMode">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.CombineMode" /> qui spécifie l'opération d'association à utiliser.</param>
        <summary>Affecte le résultat de l'opération spécifiée associant la zone de découpage active et le <see cref="T:System.Drawing.Region" /> spécifié à la zone de découpage de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un petit rectangle pour la zone de découpage.  
  
-   Définit la zone de découpage au rectangle avec le <xref:System.Drawing.Drawing2D.CombineMode.Replace> membre.  
  
-   Remplit un grand rectangle avec un pinceau noir uni.  
  
 Le résultat est un rectangle rempli petite en noir.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.SmoothingMode SmoothingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.SmoothingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SmoothingMode As SmoothingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::SmoothingMode SmoothingMode { System::Drawing::Drawing2D::SmoothingMode get(); void set(System::Drawing::Drawing2D::SmoothingMode value); };" />
      <MemberSignature Language="F#" Value="member this.SmoothingMode : System.Drawing.Drawing2D.SmoothingMode with get, set" Usage="System.Drawing.Graphics.SmoothingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la qualité de rendu de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Une des valeurs de <see cref="T:System.Drawing.Drawing2D.SmoothingMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le mode de lissage Spécifie si des lignes, courbes et les bords des zones remplies utilisent le lissage (également appelé l’anticrénelage). Une exception est que les pinceaux de dégradé de chemin d’accès n’obéissent pas au mode de lissage. Les zones remplies à l’aide un <xref:System.Drawing.Drawing2D.PathGradientBrush> sont rendus de la même façon (alias) quel que soit le <xref:System.Drawing.Graphics.SmoothingMode%2A> propriété.  
  
   
  
## Examples  
 La méthode suivante montre les effets du paramètre de la <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, et <xref:System.Drawing.Graphics.SmoothingMode%2A> propriétés. La sortie de l’exemple est illustrée dans l’illustration suivante.  
  
 ![Lignes avec et sans lissage. ] (~/add/media/gdi-smoothingmode.png "Lignes avec et sans lissage.")  
  
 Cet exemple est conçu pour être utilisé avec Windows Forms. Collez le code dans un formulaire et appelez le `ShowPensAndSmoothingMode` méthode lors du traitement du formulaire <xref:System.Windows.Forms.Control.Paint> événement, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextContrast" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextContrast" />
      <MemberSignature Language="VB.NET" Value="Public Property TextContrast As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextContrast { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextContrast : int with get, set" Usage="System.Drawing.Graphics.TextContrast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur de correction gamma pour le rendu du texte.</summary>
        <value>Valeur de correction gamma utilisée pour le rendu du texte non crénelé et ClearType.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de correction gamma doit être comprise entre 0 et 12. La valeur par défaut est 4.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Drawing.Graphics.TextRenderingHint%2A> et <xref:System.Drawing.Graphics.TextContrast%2A> propriétés.  
  
 Cet exemple est conçu pour être utilisé avec Windows Forms. Collez le code dans un formulaire et appelez le `ChangeTextRenderingHintAndTextContrast` méthode lors du traitement du formulaire <xref:System.Windows.Forms.Control.Paint> événement, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.TextRenderingHint TextRenderingHint" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextRenderingHint" />
      <MemberSignature Language="VB.NET" Value="Public Property TextRenderingHint As TextRenderingHint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Text::TextRenderingHint TextRenderingHint { System::Drawing::Text::TextRenderingHint get(); void set(System::Drawing::Text::TextRenderingHint value); };" />
      <MemberSignature Language="F#" Value="member this.TextRenderingHint : System.Drawing.Text.TextRenderingHint with get, set" Usage="System.Drawing.Graphics.TextRenderingHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le mode de rendu du texte associé à ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Une des valeurs de <see cref="T:System.Drawing.Text.TextRenderingHint" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’indicateur de rendu de texte spécifie si le texte est affiché avec l’anticrénelage.  
  
> [!NOTE]
>  Vous ne devez pas utiliser un <xref:System.Drawing.Graphics.CompositingMode%2A> valeur de propriété de <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> lorsque le <xref:System.Drawing.Graphics.TextRenderingHint%2A> propriété est définie sur <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Une exception peut se produire ou l’image de ne pas s’afficher correctement.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Drawing.Graphics.TextRenderingHint%2A> et <xref:System.Drawing.Graphics.TextContrast%2A> propriétés.  
  
 Cet exemple est conçu pour être utilisé avec Windows Forms. Collez le code dans un formulaire et appelez le `ChangeTextRenderingHintAndTextContrast` méthode lors du traitement du formulaire <xref:System.Windows.Forms.Control.Paint> événement, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Graphics.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une copie de la transformation universelle géométrique pour ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Une copie de <see cref="T:System.Drawing.Drawing2D.Matrix" /> représentant la transformation universelle géométrique pour ce <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GDI + utilise trois espaces de coordonnées : monde, page et périphériques. Coordonnées universelles sont les coordonnées utilisées pour modéliser un environnement graphique particulier et les coordonnées que vous passez aux méthodes dans le .NET Framework. Les coordonnées de page font référence au système de coordonnées utilisé par une surface de dessin, tels qu’un formulaire ou un contrôle. Coordonnées de périphérique sont les coordonnées utilisées par l’appareil physique qui est dessiné, tel qu’un écran ou une imprimante. Le <xref:System.Drawing.Graphics.Transform%2A> propriété représente la transformation universelle, qui mappe les coordonnées universelles aux coordonnées de page.  
  
 Étant donné que la matrice retournée et par le <xref:System.Drawing.Graphics.Transform%2A> propriété est une copie de la transformation géométrique, supprimez la matrice lorsque vous n’en avez plus besoin.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Types de systèmes de coordonnées</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transforme un tableau de points d'un espace de coordonnées à un autre à l'aide des transformations universelles et de page de ce <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Point[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> qui spécifie l'espace de coordonnées de destination.</param>
        <param name="srcSpace">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> qui spécifie l'espace de coordonnées source.</param>
        <param name="pts">Tableau de structures <see cref="T:System.Drawing.Point" /> qui représente les points à transformer.</param>
        <summary>Transforme un tableau de points d'un espace de coordonnées à un autre à l'aide des transformations universelles et de page de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée deux points et dessine une ligne bleue entre eux.  
  
-   Définit la transformation de monde à convertir en valeur de 40 sur l’axe x et de 30 sur l’axe y.  
  
-   Transforme les points de coordonnées universelles (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) aux coordonnées de page (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Réinitialise la transformation universelle à l’identité.  
  
-   Dessine une ligne rouge entre les points transformés.  
  
 Le résultat est une ligne bleue et une ligne rouge convertie en dessous.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.PointF[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> qui spécifie l'espace de coordonnées de destination.</param>
        <param name="srcSpace">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> qui spécifie l'espace de coordonnées source.</param>
        <param name="pts">Tableau de structures <see cref="T:System.Drawing.PointF" /> qui représentent les points à transformer.</param>
        <summary>Transforme un tableau de points d'un espace de coordonnées à un autre à l'aide des transformations universelles et de page de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée deux points et dessine une ligne bleue entre eux.  
  
-   Définit la transformation de monde à convertir en valeur de 40 sur l’axe x et de 30 sur l’axe y.  
  
-   Transforme les points de coordonnées universelles (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) aux coordonnées de page (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Réinitialise la transformation universelle à l’identité et dessine une ligne rouge entre les points transformés.  
  
 Le résultat est une ligne bleue et une ligne rouge convertie en dessous.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Effectue une translation de la zone de découpage de cet objet <see cref="T:System.Drawing.Graphics" /> selon les valeurs spécifiées sur l'axe horizontal et sur l'axe vertical.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Integer, dy As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(int dx, int dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : int * int -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">Coordonnée x de la translation.</param>
        <param name="dy">Coordonnée y de la translation.</param>
        <summary>Effectue une translation de la zone de découpage de cet objet <see cref="T:System.Drawing.Graphics" /> selon les valeurs spécifiées sur l'axe horizontal et sur l'axe vertical.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un rectangle pour la zone de découpage.  
  
-   Définit la zone de découpage au rectangle.  
  
-   Convertit la zone de découpage selon un vecteur (50, 50).  
  
-   Remplit un grand rectangle avec un pinceau noir uni.  
  
 Le résultat est un rectangle traduit, petite, noir.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : single * single -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Coordonnée x de la translation.</param>
        <param name="dy">Coordonnée y de la translation.</param>
        <summary>Effectue une translation de la zone de découpage de cet objet <see cref="T:System.Drawing.Graphics" /> selon les valeurs spécifiées sur l'axe horizontal et sur l'axe vertical.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Crée un rectangle pour la zone de découpage.  
  
-   Définit la zone de découpage au rectangle.  
  
-   Convertit la zone de découpage selon un vecteur (50.0f, 50.0f).  
  
-   Remplit un grand rectangle avec un pinceau noir uni.  
  
 Le résultat est un rectangle traduit, petite, noir.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Modifie l'origine du système de coordonnées en ajoutant la translation spécifiée avant la matrice de transformation de ce <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="graphics.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Coordonnée x de la translation.</param>
        <param name="dy">Coordonnée y de la translation.</param>
        <summary>Modifie l'origine du système de coordonnées en ajoutant la translation spécifiée avant la matrice de transformation de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’origine est en général le coin supérieur gauche de la surface de dessin.  L’opération de conversion consiste à multiplier la matrice de transformation par une matrice dont la partie traduction est la `dx` et `dy` paramètres. Cette méthode s’applique à la traduction en ajoutant au début de la matrice de traduction pour la matrice de transformation.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Fait pivoter la matrice de transformation de monde de l’écran de Windows par 30.0F degrés.  
  
-   Déplace l’origine de l’objet graphics en appelant <xref:System.Drawing.Graphics.TranslateTransform%2A>, ajoutant la traduction avant la matrice de transformation.  
  
-   Dessine une ellipse convertie pivotée avec un stylet bleu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  
  
 L’illustration suivante montre la sortie de l’exécution de l’exemple de code précédent.  
  
 ![Traduit et ellipse transformée](~/add/media/ndp-tranlatetransform.png "traduit et ellipse transformée")  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">Systèmes de coordonnées et transformations</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">Utilisation des transformations dans GDI+ managé</related>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">Coordonnée x de la translation.</param>
        <param name="dy">Coordonnée y de la translation.</param>
        <param name="order">Membre de l'énumération <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> qui spécifie si la translation est ajoutée au début ou à la fin de la matrice de transformation.</param>
        <summary>Modifie l'origine du système de coordonnées en appliquant la translation spécifiée à la matrice de transformation de ce <see cref="T:System.Drawing.Graphics" /> dans l'ordre spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’opération de conversion consiste à multiplier la matrice de transformation par une matrice dont la partie traduction est la `dx` et `dy` paramètres. Cette méthode ajoute au début ou fin de la matrice de transformation de la <xref:System.Drawing.Graphics> par la matrice de traduction en fonction de la `order` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, qui est un paramètre de la <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements. Le code exécute les actions suivantes :  
  
-   Fait pivoter la matrice de transformation de monde de l’écran de Windows par 30.0F degrés.  
  
-   Déplace l’origine de l’objet graphics en appelant <xref:System.Drawing.Graphics.TranslateTransform%2A>, l’ajout de la traduction à la matrice de transformation de monde.  
  
-   Dessine une ellipse convertie pivotée avec un stylet bleu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">Systèmes de coordonnées et transformations</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">Utilisation des transformations dans GDI+ managé</related>
      </Docs>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF VisibleClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.VisibleClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF VisibleClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.VisibleClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.VisibleClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le rectangle englobant de la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Structure <see cref="T:System.Drawing.RectangleF" /> qui représente un rectangle englobant pour la zone de découpage visible de ce <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’unité du rectangle résultant est désignée par le <xref:System.Drawing.Graphics.PageUnit%2A> propriété. L’unité par défaut est de pixels. Un <xref:System.Drawing.Graphics> est généralement associé à un contrôle et l’origine du rectangle par rapport à la zone cliente de ce contrôle.  
  
 La zone de découpage visible est l’intersection de la zone de découpage de ce <xref:System.Drawing.Graphics> et la zone de découpage de la fenêtre.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>