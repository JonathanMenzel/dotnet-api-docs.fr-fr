<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="b3ca5-101">Fournit des méthodes et des propriétés pour analyser des fichiers texte structurés.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-101">Provides methods and properties for parsing structured text files.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-102">Le `TextFieldParser` objet fournit des méthodes et propriétés pour analyser les fichiers texte structurés.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="b3ca5-103">Analyser un fichier texte avec le `TextFieldParser` est similaire à un fichier texte, une itération pendant la `ReadFields` méthode pour extraire des champs de texte correspond à fractionner les chaînes.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="b3ca5-104">Le `TextFieldParser` peut analyser deux types de fichiers : délimité ou à largeur fixe.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="b3ca5-105">Certaines propriétés, telles que `Delimiters` et `HasFieldsEnclosedInQuotes` sont significatives uniquement lorsque vous travaillez avec des fichiers délimités, alors que le `FieldWidths` propriété n’est significative uniquement lorsque vous travaillez avec les fichiers de longueur fixe.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="b3ca5-106">Le tableau suivant répertorie des exemples de tâches impliquant la `Microsoft.VisualBasic.FileIO.TextFieldParser` objet.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="b3ca5-107">À</span><span class="sxs-lookup"><span data-stu-id="b3ca5-107">To</span></span>|<span data-ttu-id="b3ca5-108">Voir</span><span class="sxs-lookup"><span data-stu-id="b3ca5-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b3ca5-109">Lire à partir d’un fichier texte délimité</span><span class="sxs-lookup"><span data-stu-id="b3ca5-109">Read from a delimited text file</span></span>|[<span data-ttu-id="b3ca5-110">Guide pratique : lire des fichiers texte délimités par des virgules</span><span class="sxs-lookup"><span data-stu-id="b3ca5-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b3ca5-111">Lire un fichier texte de largeur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="b3ca5-112">Guide pratique : lire des fichiers texte de largeur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="b3ca5-113">Lire à partir d’un fichier texte avec plusieurs formats</span><span class="sxs-lookup"><span data-stu-id="b3ca5-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="b3ca5-114">Guide pratique : lire des fichiers texte avec plusieurs formats</span><span class="sxs-lookup"><span data-stu-id="b3ca5-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-115">Cet exemple analyse un fichier texte délimité, `Bigfile`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b3ca5-116">Initialise une nouvelle instance de la classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-116">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b3ca5-117"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-117"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="b3ca5-118">Flux à analyser.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-118">The stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="b3ca5-119">Initialise une nouvelle instance de la classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-120">Crée un nouveau `TextFieldParser` objet pour analyser le fichier ou un flux qui est représenté par la `stream` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-120">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3ca5-121"><paramref name="stream" /> est <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-121"><paramref name="stream" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3ca5-122">Il n'est pas possible de lire depuis <paramref name="stream" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-122"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b3ca5-123"><see cref="T:System.IO.TextReader" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-123"><see cref="T:System.IO.TextReader" />.</span></span> <span data-ttu-id="b3ca5-124">Flux <see cref="T:System.IO.TextReader" /> à analyser.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-124">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="b3ca5-125">Initialise une nouvelle instance de la classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-125">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-126">Crée un nouveau `TextFieldParser` objet pour analyser le fichier ou un flux qui est représenté par la `reader` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-126">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3ca5-127"><paramref name="reader" /> est <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-127"><paramref name="reader" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="b3ca5-128"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-128"><see langword="String" />.</span></span> <span data-ttu-id="b3ca5-129">Chemin d'accès complet au fichier à analyser.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-129">The complete path of the file to be parsed.</span></span></param>
        <summary><span data-ttu-id="b3ca5-130">Initialise une nouvelle instance de la classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-130">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-131">Crée un nouveau `TextFieldParser` objet à analyser le fichier spécifié par le `path` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-131">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3ca5-132"><paramref name="path" /> est une chaîne vide.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-132"><paramref name="path" /> is an empty string.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b3ca5-133"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-133"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="b3ca5-134">Flux à analyser.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-134">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="b3ca5-135"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-135"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b3ca5-136">Encodage de caractères à utiliser si l'encodage n'est pas déterminé à partir du fichier.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-136">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="b3ca5-137">La valeur par défaut est <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-137">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="b3ca5-138">Initialise une nouvelle instance de la classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-138">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-139">Crée un nouveau `TextFieldParser` objet pour analyser le fichier ou un flux qui est représenté par la `stream` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-139">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b3ca5-140">Lorsque vous compilez un jeu de caractères avec un paramètre de culture particulière et que vous récupérez ces mêmes caractères avec un paramètre de culture différent, les caractères ne peuvent pas être interprétés et peut provoquer une exception levée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-140">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3ca5-141"><paramref name="stream" /> ou <paramref name="defaultEncoding" /> a la valeur <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-141"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3ca5-142">Il n'est pas possible de lire depuis <paramref name="stream" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-142"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="b3ca5-143"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-143"><see langword="String" />.</span></span> <span data-ttu-id="b3ca5-144">Chemin d'accès complet au fichier à analyser.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-144">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="b3ca5-145"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-145"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b3ca5-146">Encodage de caractères à utiliser si l'encodage n'est pas déterminé à partir du fichier.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-146">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="b3ca5-147">La valeur par défaut est <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-147">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="b3ca5-148">Initialise une nouvelle instance de la classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-148">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-149">Crée un nouveau `TextFieldParser` objet à analyser le fichier spécifié par le `path` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-149">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b3ca5-150">Lorsque vous compilez un jeu de caractères avec un paramètre de culture particulière et que vous récupérez ces mêmes caractères avec un paramètre de culture différent, les caractères ne peuvent pas être interprétés et peut provoquer une exception levée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-150">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3ca5-151"><paramref name="path" /> est une chaîne vide ou <paramref name="defaultEncoding" /> est <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-151"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b3ca5-152"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-152"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="b3ca5-153">Flux à analyser.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-153">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="b3ca5-154"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-154"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b3ca5-155">Encodage de caractères à utiliser si l'encodage n'est pas déterminé à partir du fichier.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-155">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="b3ca5-156">La valeur par défaut est <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-156">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding">
          <span data-ttu-id="b3ca5-157"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-157"><see langword="Boolean" />.</span></span> <span data-ttu-id="b3ca5-158">Indique s'il faut rechercher les marques d'ordre des octets au début du fichier.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-158">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="b3ca5-159">La valeur par défaut est <see langword="True" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-159">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="b3ca5-160">Initialise une nouvelle instance de la classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-160">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-161">Crée un nouveau `TextFieldParser` objet pour analyser le fichier ou un flux qui est représenté par la `stream` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-161">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="b3ca5-162">Si le `detectEncoding` paramètre est `True`, ce constructeur essaie de détecter l’encodage en examinant les trois premiers octets du fichier ou du flux de données.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-162">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="b3ca5-163">Il reconnaît automatiquement Unicode UTF-8, little-endian et big-endian Unicode texte si le fichier démarre avec les marques d’ordre d’octet appropriées.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-163">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="b3ca5-164">Dans le cas contraire, l’encodage spécifié par `defaultEncoding` est utilisée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-164">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b3ca5-165">Lorsque vous compilez un jeu de caractères avec un paramètre de culture particulière et que vous récupérez ces mêmes caractères avec un paramètre de culture différent, les caractères ne peuvent pas être interprétés et peut provoquer une exception levée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-165">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3ca5-166"><paramref name="stream" /> ou <paramref name="defaultEncoding" /> a la valeur <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-166"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3ca5-167">Il n'est pas possible de lire depuis <paramref name="stream" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-167"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="b3ca5-168"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-168"><see langword="String" />.</span></span> <span data-ttu-id="b3ca5-169">Chemin d'accès complet au fichier à analyser.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-169">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="b3ca5-170"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-170"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b3ca5-171">Encodage de caractères à utiliser si l'encodage n'est pas déterminé à partir du fichier.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-171">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="b3ca5-172">La valeur par défaut est <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-172">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding">
          <span data-ttu-id="b3ca5-173"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-173"><see langword="Boolean" />.</span></span> <span data-ttu-id="b3ca5-174">Indique s'il faut rechercher les marques d'ordre des octets au début du fichier.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-174">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="b3ca5-175">La valeur par défaut est <see langword="True" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-175">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="b3ca5-176">Initialise une nouvelle instance de la classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-176">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-177">Crée un nouveau `TextFieldParser` objet à analyser le fichier spécifié par le `path` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-177">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="b3ca5-178">Si le `detectEncoding` paramètre est `True`, ce constructeur essaie de détecter l’encodage en examinant les trois premiers octets du fichier ou du flux de données.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-178">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="b3ca5-179">Il reconnaît automatiquement Unicode UTF-8, little-endian et big-endian Unicode texte si le fichier démarre avec les marques d’ordre d’octet appropriées.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-179">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="b3ca5-180">Dans le cas contraire, l’encodage spécifié par `defaultEncoding` est utilisée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-180">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b3ca5-181">Lorsque vous compilez un jeu de caractères avec un paramètre de culture particulière et que vous récupérez ces mêmes caractères avec un paramètre de culture différent, les caractères ne peuvent pas être interprétés et peut provoquer une exception levée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-181">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3ca5-182"><paramref name="path" /> est une chaîne vide ou <paramref name="defaultEncoding" /> est <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-182"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b3ca5-183"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-183"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="b3ca5-184">Flux à analyser.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-184">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="b3ca5-185"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-185"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b3ca5-186">Encodage de caractères à utiliser si l'encodage n'est pas déterminé à partir du fichier.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-186">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="b3ca5-187">La valeur par défaut est <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-187">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding">
          <span data-ttu-id="b3ca5-188"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-188"><see langword="Boolean" />.</span></span> <span data-ttu-id="b3ca5-189">Indique s'il faut rechercher les marques d'ordre des octets au début du fichier.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-189">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="b3ca5-190">La valeur par défaut est <see langword="True" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-190">Default is <see langword="True" />.</span></span></param>
        <param name="leaveOpen">
          <span data-ttu-id="b3ca5-191"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-191"><see langword="Boolean" />.</span></span> <span data-ttu-id="b3ca5-192"><c>Indique si </c> doit être laissé ouvert lorsque l’objet <see langword="TextFieldParser" /> est fermé.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-192">Indicates whether to leave <c>stream</c> open when the <see langword="TextFieldParser" /> object is closed.</span></span> <span data-ttu-id="b3ca5-193">La valeur par défaut est <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-193">Default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="b3ca5-194">Initialise une nouvelle instance de la classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-194">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-195">Crée un nouveau `TextFieldParser` objet pour analyser le fichier ou un flux qui est représenté par la `stream` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-195">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="b3ca5-196">Si le `detectEncoding` paramètre est `True`, ce constructeur essaie de détecter l’encodage en examinant les trois premiers octets du fichier ou du flux de données.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-196">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="b3ca5-197">Il reconnaît automatiquement Unicode UTF-8, little-endian et big-endian Unicode texte si le fichier démarre avec les marques d’ordre d’octet appropriées.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-197">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="b3ca5-198">Dans le cas contraire, l’encodage spécifié par `defaultEncoding` est utilisée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-198">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b3ca5-199">Lorsque vous compilez un jeu de caractères avec un paramètre de culture particulière et que vous récupérez ces mêmes caractères avec un paramètre de culture différent, les caractères ne peuvent pas être interprétés et peut provoquer une exception levée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-199">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3ca5-200"><paramref name="stream" /> ou <paramref name="defaultEncoding" /> a la valeur <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-200"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3ca5-201">Il n'est pas possible de lire depuis <paramref name="stream" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-201"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b3ca5-202">Ferme l'objet <see langword="TextFieldParser" /> en cours.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-202">Closes the current <see langword="TextFieldParser" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b3ca5-203">Cet exemple ferme le `TextFieldParser.FileReader`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-203">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3ca5-204">Définit des jetons de commentaire.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-204">Defines comment tokens.</span></span> <span data-ttu-id="b3ca5-205">Un jeton de commentaire est une chaîne qui, lorsqu'elle est placée au début d'une ligne, indique que la ligne est un commentaire et doit être ignorée par l'analyseur.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-205">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span></span></summary>
        <value><span data-ttu-id="b3ca5-206">Tableau de chaînes qui contient tous les jetons de commentaires pour l'objet <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-206">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-207">Il s’agit d’un membre avancé ; Il n’affiche pas dans IntelliSense, sauf si vous cliquez sur le **tous les** onglet.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-207">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="b3ca5-208">Les jetons de commentaire de longueur nulle sont ignorés.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-208">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-209">Cet exemple spécifie que pour les `TextFieldParser`, `FileReader` les lignes commençant par un guillemet simple (') doivent être ignorées.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-209">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3ca5-210">Un jeton de commentaire contient un espace blanc.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-210">A comment token includes white space.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3ca5-211">Définit les séparateurs pour un fichier texte.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-211">Defines the delimiters for a text file.</span></span></summary>
        <value><span data-ttu-id="b3ca5-212">Tableau de chaînes qui contient tous séparateurs de champs pour l'objet <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-212">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-213">Cette propriété est significative uniquement si la <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> est définie sur `FieldType.Delimited`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-213">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="b3ca5-214">Définir les délimiteurs d’un fichier texte peut également être effectué avec la <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b3ca5-214">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="b3ca5-215">Le tableau suivant répertorie un exemple de tâche impliquant la `Delimiters` propriété.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-215">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="b3ca5-216">À</span><span class="sxs-lookup"><span data-stu-id="b3ca5-216">To</span></span>|<span data-ttu-id="b3ca5-217">Voir</span><span class="sxs-lookup"><span data-stu-id="b3ca5-217">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b3ca5-218">Lire à partir d’un fichier texte délimité</span><span class="sxs-lookup"><span data-stu-id="b3ca5-218">Read from a delimited text file</span></span>|[<span data-ttu-id="b3ca5-219">Guide pratique : lire des fichiers texte délimités par des virgules</span><span class="sxs-lookup"><span data-stu-id="b3ca5-219">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-220">Cet exemple spécifie que le délimiteur pour les `TextFieldParser` objet, `FileReader`, est une virgule (,).</span><span class="sxs-lookup"><span data-stu-id="b3ca5-220">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3ca5-221">Une valeur de séparateur est un caractère de saut de ligne, une chaîne vide ou <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-221">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b3ca5-222">Libère les ressources utilisées par l’objet <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-222">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b3ca5-223">Libère les ressources utilisées par l’objet <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-223">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="b3ca5-224">Propriété booléenne.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-224">Boolean.</span></span> <span data-ttu-id="b3ca5-225"><see langword="True" /> libère les ressources managées et non managées ; <see langword="False" /> libère uniquement les ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-225"><see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="b3ca5-226">Libère les ressources utilisées par l’objet <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-226">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3ca5-227">Retourne <see langword="True" /> s'il n'y a aucune ligne non vide, sans commentaire, entre la position actuelle du curseur et la fin du fichier.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-227">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span></span></summary>
        <value>
          <span data-ttu-id="b3ca5-228"><see langword="True" /> s'il n'y a plus de données à lire ; sinon, <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-228"><see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-229">Cette propriété peut être utilisée lors de la lecture à partir de fichiers pour déterminer la fin des données en cours de lecture.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-229">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="b3ca5-230">Le tableau suivant répertorie des exemples de tâches impliquant la `EndOfData` propriété.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-230">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="b3ca5-231">À</span><span class="sxs-lookup"><span data-stu-id="b3ca5-231">To</span></span>|<span data-ttu-id="b3ca5-232">Voir</span><span class="sxs-lookup"><span data-stu-id="b3ca5-232">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b3ca5-233">Lire à partir d’un fichier délimité</span><span class="sxs-lookup"><span data-stu-id="b3ca5-233">Read from a delimited file</span></span>|[<span data-ttu-id="b3ca5-234">Guide pratique : lire des fichiers texte délimités par des virgules</span><span class="sxs-lookup"><span data-stu-id="b3ca5-234">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b3ca5-235">Lire à partir d’un fichier de longueur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-235">Read from a fixed-width file</span></span>|[<span data-ttu-id="b3ca5-236">Guide pratique : lire des fichiers texte de largeur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-236">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-237">Cet exemple utilise le `EndofData` propriété pour parcourir tous les champs dans le fichier avec le `TextFieldReader`, `FileReader`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-237">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3ca5-238">Retourne la ligne qui a provoqué l'exception <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> la plus récente.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-238">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="b3ca5-239">Ligne qui a provoqué l'exception <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> la plus récente.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-239">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-240">Si aucun <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions ont été levées, une chaîne vide est retournée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-240">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="b3ca5-241">Le <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> propriété peut être utilisée pour afficher le numéro de la ligne qui a provoqué l’exception.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-241">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="b3ca5-242">Le tableau suivant répertorie des exemples de tâches impliquant la `ErrorLine` propriété.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-242">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="b3ca5-243">À</span><span class="sxs-lookup"><span data-stu-id="b3ca5-243">To</span></span>|<span data-ttu-id="b3ca5-244">Voir</span><span class="sxs-lookup"><span data-stu-id="b3ca5-244">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b3ca5-245">Lire à partir d’un fichier délimité</span><span class="sxs-lookup"><span data-stu-id="b3ca5-245">Read from a delimited file</span></span>|[<span data-ttu-id="b3ca5-246">Guide pratique : lire des fichiers texte délimités par des virgules</span><span class="sxs-lookup"><span data-stu-id="b3ca5-246">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b3ca5-247">Lire à partir d’un fichier de longueur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-247">Read from a fixed-width file</span></span>|[<span data-ttu-id="b3ca5-248">Guide pratique : lire des fichiers texte de largeur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-248">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-249">Cet exemple utilise le `ErrorLine` propriété pour afficher la ligne qui provoque l’actuel <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-249">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3ca5-250">Retourne le numéro de la ligne qui a provoqué l'exception <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> la plus récente.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-250">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="b3ca5-251">Numéro de la ligne qui a provoqué l'exception <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> la plus récente.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-251">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-252">Si aucun <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions ont été levées, -1 est retourné.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-252">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="b3ca5-253">Le <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> propriété peut être utilisée pour afficher le numéro de la ligne qui a provoqué l’exception.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-253">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="b3ca5-254">Lignes vides et les commentaires ne sont pas ignorés lors de la détermination du numéro de ligne.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-254">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="b3ca5-255">Le tableau suivant répertorie des exemples de tâches impliquant la `ErrorLineNumber` propriété.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-255">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="b3ca5-256">À</span><span class="sxs-lookup"><span data-stu-id="b3ca5-256">To</span></span>|<span data-ttu-id="b3ca5-257">Voir</span><span class="sxs-lookup"><span data-stu-id="b3ca5-257">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b3ca5-258">Lire à partir d’un fichier délimité</span><span class="sxs-lookup"><span data-stu-id="b3ca5-258">Read from a delimited file</span></span>|[<span data-ttu-id="b3ca5-259">Guide pratique : lire des fichiers texte délimités par des virgules</span><span class="sxs-lookup"><span data-stu-id="b3ca5-259">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b3ca5-260">Lire à partir d’un fichier de longueur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-260">Read from a fixed-width file</span></span>|[<span data-ttu-id="b3ca5-261">Guide pratique : lire des fichiers texte de largeur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-261">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-262">Cet exemple utilise le `ErrorLineNumber` propriété pour afficher l’emplacement de la ligne qui provoque l’actuel <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-262">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3ca5-263">Désigne la largeur de chaque colonne du fichier texte en cours d'analyse.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-263">Denotes the width of each column in the text file being parsed.</span></span></summary>
        <value><span data-ttu-id="b3ca5-264">Tableau d'entiers qui contient la largeur de chaque colonne dans le fichier texte en cours d'analyse.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-264">An integer array that contains the width of each column in the text file that is being parsed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-265">Cette propriété est significative uniquement si la <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> est définie sur `FieldType.FixedWidth`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-265">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="b3ca5-266">Si la dernière entrée du tableau est inférieure ou égale à zéro, le champ est supposé pour être de largeur variable.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-266">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="b3ca5-267">Le <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> méthode peut également être utilisée pour définir des largeurs de champ.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-267">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="b3ca5-268">Le tableau suivant répertorie des exemples de tâches impliquant la `FieldWidths` propriété.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-268">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="b3ca5-269">À</span><span class="sxs-lookup"><span data-stu-id="b3ca5-269">To</span></span>|<span data-ttu-id="b3ca5-270">Voir</span><span class="sxs-lookup"><span data-stu-id="b3ca5-270">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b3ca5-271">Lire un fichier texte de largeur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-271">Read from a fixed-width text file</span></span>|[<span data-ttu-id="b3ca5-272">Guide pratique : lire des fichiers texte de largeur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-272">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-273">Cet exemple lit le fichier `ParserText.txt`, en spécifiant les largeurs ; la première colonne est de 5 caractères, la deuxième de 10, la troisième de 11 et la quatrième a une largeur variable</span><span class="sxs-lookup"><span data-stu-id="b3ca5-273">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3ca5-274">Une valeur de largeur dans un emplacement autre que la dernière entrée du tableau est inférieure ou égale à zéro.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-274">A width value in any location other than the last entry of the array is less than or equal to zero.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b3ca5-275">Permet à l'objet <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> de tenter de libérer des ressources et d'effectuer d'autres opérations de nettoyage avant d'être récupéré par l'opération garbage collection.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-275">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3ca5-276">Indique si les champs sont placés entre guillemets lorsqu'un fichier délimité est analysé.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-276">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span></span></summary>
        <value>
          <span data-ttu-id="b3ca5-277"><see langword="True" /> si les champs sont placés entre guillemets ; sinon, <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-277"><see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-278">Il s’agit d’un membre avancé ; Il n’affiche pas dans IntelliSense, sauf si vous cliquez sur le **tous les** onglet.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-278">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="b3ca5-279">Si la propriété est `True`, l’analyseur suppose que les champs sont placés entre guillemets (« ») et peuvent contenir des fins de ligne.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-279">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="b3ca5-280">Si un champ est placé entre guillemets, par exemple, `abc, "field2a,field2b", field3` et cette propriété est `True`, puis tout le texte entourée guillemets sera renvoyé telle quelle ; cet exemple retourne `abc|field2a,field2b|field3`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-280">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="b3ca5-281">Si cette propriété `False` que cet exemple retourne `abc|"field2a|field2b"|field3`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-281">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-282">Cet exemple définit le `HasFieldsEnclosedInQuotes` propriété `True` pour `myReader`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-282">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3ca5-283">Retourne le nombre de lignes en cours, ou retourne -1 si aucun caractère n'est disponible dans le flux.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-283">Returns the current line number, or returns -1 if no more characters are available in the stream.</span></span></summary>
        <value><span data-ttu-id="b3ca5-284">Numéro de ligne active.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-284">The current line number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-285">Il s’agit d’un membre avancé ; Il n’affiche pas dans IntelliSense, sauf si vous cliquez sur le **tous les** onglet.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-285">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="b3ca5-286">Lignes vides et les commentaires ne sont pas ignorés lors de la détermination du numéro de ligne.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-286">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-287">Cet exemple recherche le nom « Jones » dans le fichier texte et indique la ligne où il se trouve.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-287">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <span data-ttu-id="b3ca5-288"><see langword="Int32" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-288"><see langword="Int32" />.</span></span> <span data-ttu-id="b3ca5-289">Nombre de caractères à lire.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-289">Number of characters to read.</span></span> <span data-ttu-id="b3ca5-290">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-290">Required.</span></span></param>
        <summary><span data-ttu-id="b3ca5-291">Lit le nombre spécifié de caractères sans avancer le curseur.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-291">Reads the specified number of characters without advancing the cursor.</span></span></summary>
        <returns><span data-ttu-id="b3ca5-292">Chaîne qui contient le nombre spécifié de caractères à lire.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-292">A string that contains the specified number of characters read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-293">Le `numberOfChars` valeur doit être inférieur au nombre total de caractères dans la ligne.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-293">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="b3ca5-294">Si elle n’est pas le cas, la chaîne retournée par `PeekChars` sera tronquée à la longueur de la ligne.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-294">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="b3ca5-295">Les lignes vides sont ignorées.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-295">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="b3ca5-296">Caractères de fin de ligne ne sont pas retournés.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-296">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="b3ca5-297">Le `PeekChars` méthode n’effectue aucune analyse ; un caractère de fin de ligne dans un champ délimité est interprété comme la fin de la ligne.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-297">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="b3ca5-298">Le tableau suivant répertorie des exemples de tâches impliquant la `PeekChars` (méthode).</span><span class="sxs-lookup"><span data-stu-id="b3ca5-298">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="b3ca5-299">À</span><span class="sxs-lookup"><span data-stu-id="b3ca5-299">To</span></span>|<span data-ttu-id="b3ca5-300">Voir</span><span class="sxs-lookup"><span data-stu-id="b3ca5-300">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b3ca5-301">Déterminer le format d’un champ avant de l’analyser</span><span class="sxs-lookup"><span data-stu-id="b3ca5-301">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="b3ca5-302">Guide pratique : lire des fichiers texte avec plusieurs formats</span><span class="sxs-lookup"><span data-stu-id="b3ca5-302">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-303">Cet exemple utilise `PeekChars` pour rechercher la fin des données et arrêter l’analyse du fichier à ce stade.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-303">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3ca5-304"><paramref name="numberOfChars" /> est inférieur à 0.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-304"><paramref name="numberOfChars" /> is less than 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b3ca5-305">Lit tous les champs sur la ligne active, les retourne sous la forme d'un tableau de chaînes et avance le curseur vers la ligne suivante contenant des données.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-305">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span></span></summary>
        <returns><span data-ttu-id="b3ca5-306">Tableau de chaînes qui contient les valeurs de champs pour la ligne active.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-306">An array of strings that contains field values for the current line.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-307">Pour permettre aux utilisateurs d’analyser les fichiers texte dans plusieurs formats, la `ReadFields` méthode examine les valeurs de `TextFieldType`, `Delimiters`, et `FieldWidths`, si elles sont spécifiées, chaque fois qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-307">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="b3ca5-308">Les utilisateurs doivent configurer correctement le `TextFieldType` et `FieldWidths` ou `Delimiters` propriétés, selon vos besoins.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-308">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="b3ca5-309">Si `TextFieldType` a la valeur `Delimited`, et `Delimiters` n’est pas définie, ou si `TextFieldType` a la valeur `FixedWidth` et `FieldWidths`, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-309">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b3ca5-310">Si `ReadFields` rencontre des lignes vides, elles sont ignorées et la prochaine ligne non vide est retournée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-310">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="b3ca5-311">Si le `ReadFields` méthode ne peut pas analyser la ligne en cours, elle lève une exception et ne déplace pas vers la ligne suivante.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-311">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="b3ca5-312">Cela permet à votre application tente d’analyser la ligne à nouveau.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-312">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="b3ca5-313">Le tableau suivant répertorie des exemples de tâches impliquant la `ReadFields` (méthode).</span><span class="sxs-lookup"><span data-stu-id="b3ca5-313">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="b3ca5-314">À</span><span class="sxs-lookup"><span data-stu-id="b3ca5-314">To</span></span>|<span data-ttu-id="b3ca5-315">Voir</span><span class="sxs-lookup"><span data-stu-id="b3ca5-315">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b3ca5-316">Lire à partir d’un fichier délimité</span><span class="sxs-lookup"><span data-stu-id="b3ca5-316">Read from a delimited file</span></span>|[<span data-ttu-id="b3ca5-317">Guide pratique : lire des fichiers texte délimités par des virgules</span><span class="sxs-lookup"><span data-stu-id="b3ca5-317">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b3ca5-318">Lire à partir d’un fichier de longueur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-318">Read from a fixed-width file</span></span>|[<span data-ttu-id="b3ca5-319">Guide pratique : lire des fichiers texte de largeur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-319">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-320">Cet exemple utilise le `ReadFields` méthode pour lire à partir du fichier CSV `ParserText.txt`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-320">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="b3ca5-321">L’exemple écrit les champs à `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-321">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException"><span data-ttu-id="b3ca5-322">Un champ ne peut pas être analysé à l'aide du format spécifié.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-322">A field cannot be parsed by using the specified format.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="b3ca5-323">Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-323">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="b3ca5-324">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-324">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b3ca5-325">Retourne la ligne active en tant que chaîne et avance le curseur vers la ligne suivante.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-325">Returns the current line as a string and advances the cursor to the next line.</span></span></summary>
        <returns><span data-ttu-id="b3ca5-326">Ligne active du fichier ou du flux.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-326">The current line from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-327">Le `ReadLine` méthode n’effectue aucune analyse ; un caractère de fin de ligne dans un champ délimité est interprété comme la fin de la ligne.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-327">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="b3ca5-328">`Nothing` est retourné si la fin du fichier est atteinte.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-328">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-329">Cet exemple lit le fichier `ParserText.txt` et écrit dans `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-329">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="b3ca5-330">Si `Testfile.txt` n’existe pas, il est créé par le `WriteAllText` (méthode).</span><span class="sxs-lookup"><span data-stu-id="b3ca5-330">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="b3ca5-331">Cet exemple écrit les champs sous forme de chaîne unique ; Pour que chaque ligne s’affiche sur sa propre ligne dans le fichier de destination, une `VbCrLf` caractère doit être ajouté à la fin de chaque ligne.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-331">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b3ca5-332">Lit le reste du fichier texte et le retourne en tant que chaîne.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-332">Reads the remainder of the text file and returns it as a string.</span></span></summary>
        <returns><span data-ttu-id="b3ca5-333">Texte restant du fichier ou du flux.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-333">The remaining text from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-334">Il s’agit d’un membre avancé ; Il n’affiche pas dans IntelliSense, sauf si vous cliquez sur le **tous les** onglet.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-334">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="b3ca5-335">Si aucune n’est plus à lire parce que la fin du fichier a été atteinte, `Nothing` est retourné.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-335">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="b3ca5-336">Le `ReadToEnd` méthode n’ignore pas les lignes vides et des commentaires.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-336">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-337">Cet exemple utilise le `ReadToEnd` méthode pour lire l’intégralité du fichier `ParserText.txt` et les écrire dans le fichier `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-337">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="b3ca5-338">Si `Testfile.txt` n’existe pas, il est créé par le `WriteAllText` (méthode).</span><span class="sxs-lookup"><span data-stu-id="b3ca5-338">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters"><span data-ttu-id="b3ca5-339">Tableau de type <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-339">Array of type <see langword="String" />.</span></span></param>
        <summary><span data-ttu-id="b3ca5-340">Affecte les valeurs spécifiées aux séparateurs pour le lecteur et la valeur <see langword="Delimited" /> au type de champ.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-340">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-341">Le contenu existant de la `Delimiters` propriété est effacé lorsque cette méthode est définie.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-341">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="b3ca5-342">Cette méthode fournit un moyen de définir des délimiteurs sans créer de tableau.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-342">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="b3ca5-343">Le tableau suivant répertorie un exemple de tâche impliquant la `SetDelimiters` (méthode).</span><span class="sxs-lookup"><span data-stu-id="b3ca5-343">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="b3ca5-344">À</span><span class="sxs-lookup"><span data-stu-id="b3ca5-344">To</span></span>|<span data-ttu-id="b3ca5-345">Voir</span><span class="sxs-lookup"><span data-stu-id="b3ca5-345">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b3ca5-346">Analyser un fichier texte</span><span class="sxs-lookup"><span data-stu-id="b3ca5-346">Parse a text file</span></span>|[<span data-ttu-id="b3ca5-347">Analyse des fichiers texte avec l’objet TextFieldParser</span><span class="sxs-lookup"><span data-stu-id="b3ca5-347">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-348">Cet exemple ouvre un analyseur de champ de texte et définit le délimiteur comme `vbTab`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-348">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="b3ca5-349">Remplacez le chemin d’accès `C:\logs\test.log` avec le chemin d’accès et le nom du fichier à analyser.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-349">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b3ca5-350">Un délimiteur est de longueur nulle.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-350">A delimiter is zero-length.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths"><span data-ttu-id="b3ca5-351">Tableau d'<see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-351">Array of <see langword="Integer" />.</span></span></param>
        <summary><span data-ttu-id="b3ca5-352">Affecte les valeurs spécifiées aux séparateurs pour le lecteur.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-352">Sets the delimiters for the reader to the specified values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-353">Le contenu existant de la `Delimiters` propriété sont désactivées lorsque ce paramètre est défini.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-353">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="b3ca5-354">Cette méthode fournit un moyen de définir des délimiteurs sans créer de tableau.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-354">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="b3ca5-355">Le tableau suivant répertorie l’exemple de tâches impliquant la `SetFieldWidths` (méthode).</span><span class="sxs-lookup"><span data-stu-id="b3ca5-355">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="b3ca5-356">À</span><span class="sxs-lookup"><span data-stu-id="b3ca5-356">To</span></span>|<span data-ttu-id="b3ca5-357">Voir</span><span class="sxs-lookup"><span data-stu-id="b3ca5-357">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b3ca5-358">Analyser un fichier texte.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-358">Parse a text file.</span></span>|[<span data-ttu-id="b3ca5-359">Analyse des fichiers texte avec l’objet TextFieldParser</span><span class="sxs-lookup"><span data-stu-id="b3ca5-359">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-360">Cet exemple ouvre un analyseur de champ de texte et définit la largeur du champ en tant que `5`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-360">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="b3ca5-361">Remplacez le chemin d’accès `C:\logs\test.log` avec le chemin d’accès et le nom du fichier à analyser.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-361">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="b3ca5-362">L’exemple suivant ouvre un analyseur de champ de texte et définit la largeur de champ en tant que `5`, `10`et la variable.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-362">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="b3ca5-363">Remplacez le chemin d’accès `C:\logs\test.log` avec le chemin d’accès et le nom du fichier à analyser.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-363">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3ca5-364">Indique si le fichier à analyser est délimité ou à largeur fixe.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-364">Indicates whether the file to be parsed is delimited or fixed-width.</span></span></summary>
        <value><span data-ttu-id="b3ca5-365">Valeur <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> qui indique si le fichier à analyser est délimité ou de longueur fixe.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-365">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-366">La valeur par défaut de cette propriété est délimitée.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-366">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="b3ca5-367">Le tableau suivant répertorie des exemples de tâches impliquant la `TextFieldType` propriété.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-367">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="b3ca5-368">À</span><span class="sxs-lookup"><span data-stu-id="b3ca5-368">To</span></span>|<span data-ttu-id="b3ca5-369">Voir</span><span class="sxs-lookup"><span data-stu-id="b3ca5-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b3ca5-370">Lire à partir d’un fichier texte délimité</span><span class="sxs-lookup"><span data-stu-id="b3ca5-370">Read from a delimited text file</span></span>|[<span data-ttu-id="b3ca5-371">Guide pratique : lire des fichiers texte délimités par des virgules</span><span class="sxs-lookup"><span data-stu-id="b3ca5-371">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b3ca5-372">Lire un fichier texte de largeur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-372">Read from a fixed-width text file</span></span>|[<span data-ttu-id="b3ca5-373">Guide pratique : lire des fichiers texte de largeur fixe</span><span class="sxs-lookup"><span data-stu-id="b3ca5-373">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="b3ca5-374">Lire à partir d’un fichier texte avec plusieurs formats</span><span class="sxs-lookup"><span data-stu-id="b3ca5-374">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="b3ca5-375">Guide pratique : lire des fichiers texte avec plusieurs formats</span><span class="sxs-lookup"><span data-stu-id="b3ca5-375">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-376">Cet exemple crée un `TextFieldParser`, `FileReader`et spécifie qu’il est délimité.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-376">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="b3ca5-377">Cet exemple crée un `TextFieldParser`, `FileReader`et spécifie qu’il est à largeur fixe.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-377">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b3ca5-378">Indique si les espaces blancs de début et de fin doivent être supprimés des valeurs de champs.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-378">Indicates whether leading and trailing white space should be trimmed from field values.</span></span></summary>
        <value>
          <span data-ttu-id="b3ca5-379"><see langword="True" /> si les espaces blancs de début et de fin doivent être supprimés des valeurs de champs ; sinon, <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-379"><see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3ca5-380">La valeur par défaut de cette propriété est `True`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-380">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3ca5-381">Cet exemple crée un `TextFieldParser`, `FileReader`et définit les `TrimWhiteSpace` propriété `True`.</span><span class="sxs-lookup"><span data-stu-id="b3ca5-381">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>