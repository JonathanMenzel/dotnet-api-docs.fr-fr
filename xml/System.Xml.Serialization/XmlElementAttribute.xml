<Type Name="XmlElementAttribute" FullName="System.Xml.Serialization.XmlElementAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f52c99f86df8bcad1587162b029827008d4c7ef8" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37484798" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlElementAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlElementAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlElementAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlElementAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlElementAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indique qu'un champ public ou une propriété publique représente un élément XML lorsque <see cref="T:System.Xml.Serialization.XmlSerializer" /> sérialise ou désérialise l'objet qui le contient.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.Serialization.XmlElementAttribute> appartient à une famille d’attributs qui contrôle la façon dont le <xref:System.Xml.Serialization.XmlSerializer> sérialise ou désérialise un objet. Pour obtenir une liste complète des attributs similaires, consultez [attributs qui contrôlent la sérialisation XML](~/docs/standard/serialization/attributes-that-control-xml-serialization.md).  
  
 Un document XML contient généralement des éléments XML, chacun d’eux se compose de trois parties : une balise d’ouverture avec éventuellement des attributs, une balise de fermeture et les données entre les balises. Les balises XML peuvent être imbriquées, les données entre les balises peuvent être également les éléments XML. Cette capacité d’un seul élément pour encadrer un autre permet le document doit contenir des hiérarchies de données. Un élément XML peut également inclure des attributs.  
  
 Appliquer le <xref:System.Xml.Serialization.XmlElementAttribute> aux champs publics ou des propriétés de lecture/écriture publique pour contrôler les caractéristiques des éléments tels que le nom de l’élément et l’espace de noms XML.  
  
 Le <xref:System.Xml.Serialization.XmlElementAttribute> peut être appliqué plusieurs fois à un champ qui retourne un tableau d’objets. L’objectif de ce consiste à spécifier (via le <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propriété) différents types qui peuvent être insérés dans le tableau. Par exemple, le tableau dans le code c# suivant accepte les chaînes et les entiers.  
  
```  
public class Things{  
   [XmlElement(Type = typeof(string)),  
   XmlElement(Type = typeof(int))]  
   public object[] StringsAndInts;  
}  
```  
  
 Ainsi, dans le code XML qui peut se présenter comme suit.  
  
```  
<Things>  
   <string>Hello</string>  
   <int>999</int>  
   <string>World</string>  
</Things>  
```  
  
 Notez que lorsque vous appliquez le <xref:System.Xml.Serialization.XmlElementAttribute> plusieurs fois sans spécifier un <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> valeur de propriété, les éléments sont nommés après le type des objets admissibles.  
  
 Si vous appliquez le <xref:System.Xml.Serialization.XmlElementAttribute> à un champ ou une propriété qui retourne un tableau, les éléments du tableau sont encodés comme une séquence d’éléments XML.  
  
 En revanche si un <xref:System.Xml.Serialization.XmlElementAttribute> n’est pas appliqué à un champ ou une propriété, les éléments du tableau sont encodés comme une séquence d’éléments imbriqués sous un élément nommé d’après le champ ou la propriété. (Utilisez le <xref:System.Xml.Serialization.XmlArrayAttribute> et <xref:System.Xml.Serialization.XmlArrayItemAttribute> attributs pour contrôler la façon dont un tableau est sérialisé.)  
  
 Vous pouvez définir le <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propriété pour spécifier un type qui est dérivé du type du champ d’origine ou de propriété, autrement dit, champ ou propriété à laquelle vous avez appliqué le <xref:System.Xml.Serialization.XmlElementAttribute>.  
  
 Si un champ ou une propriété retourne un <xref:System.Collections.ArrayList>, vous pouvez appliquer plusieurs instances de la <xref:System.Xml.Serialization.XmlElementAttribute> au membre. Pour chaque instance, définir le <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propriété à un type d’objet qui peut être inséré dans le tableau.  
  
 Pour plus d’informations sur l’utilisation d’attributs, consultez [attributs](~/docs/standard/attributes/index.md).  
  
> [!NOTE]
>  Vous pouvez utiliser le mot `XmlElement` dans votre code au lieu de la plus longue <xref:System.Xml.Serialization.XmlElementAttribute>.  
  
   
  
## Examples  
 L’exemple suivant sérialise une classe nommée `Group` et applique le <xref:System.Xml.Serialization.XmlElementAttribute> à plusieurs de ses membres. Le champ nommé `Employees` retourne un tableau de `Employee` objets. Dans ce cas, le <xref:System.Xml.Serialization.XmlElementAttribute> Spécifie que le document XML obtenu ne doit pas être imbriqué (qui est le comportement par défaut d’éléments dans un tableau).  
  
 [!code-cpp[Classic XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlElementAttributes" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlElements" />
    <altmember cref="T:System.Xml.Serialization.XmlRootAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant applique le <xref:System.Xml.Serialization.XmlElementAttribute> à une classe.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : string -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute elementName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Nom de l'élément XML du membre sérialisé.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> et spécifie le nom de l'élément XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, le <xref:System.Xml.Serialization.XmlSerializer> utilise le nom du membre comme nom d’élément XML lors de la sérialisation d’une instance de classe. Par exemple, un champ nommé `Vehicle` génère un élément XML nommé `Vehicle`. Toutefois si vous avez besoin un élément différent, tel que `Cars`, passez-la dans le `elementName` paramètre.  
  
   
  
## Examples  
 L’exemple suivant montre une classe simple qui contient un champ nommé `Vehicles`. L’exemple applique le <xref:System.Xml.Serialization.XmlElementAttribute> au champ et inclut le `elementName` paramètre, indiquant ainsi la <xref:System.Xml.Serialization.XmlSerializer> pour générer des éléments XML nommés « Cars » au lieu de « Véhicules ».  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : Type -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> d'un objet dérivé du type du membre.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> et spécifie un type pour le membre auquel <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> est appliqué. Ce type est utilisé par <see cref="T:System.Xml.Serialization.XmlSerializer" /> lors de la sérialisation ou la désérialisation de l'objet qui le contient.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le `type` paramètre pour spécifier un type qui est dérivé d’une classe de base. Par exemple, une propriété nommée `MyAnimal` retourne un `Animal` objet. Vous souhaitez mettre en valeur l’objet, vous créez une classe nommée `Mammal` qui hérite de la `Animal` classe. Pour indiquer à le <xref:System.Xml.Serialization.XmlSerializer> pour accepter le `Mammal` classe lorsqu’il sérialise le `MyAnimal` propriété, passez le <xref:System.Type> de la `Mammal` classe au constructeur.  
  
   
  
## Examples  
 L’exemple suivant sérialise une classe nommée `Orchestra` qui contient un champ nommé `Instruments`, qui retourne un tableau de `Instrument` objets. Une deuxième classe nommée `Brass` hérite la `Instrument` classe. L’exemple applique le <xref:System.Xml.Serialization.XmlElementAttribute> à la `Instruments` champ et spécifie le `Brass` tapez, ce qui permet la `Instruments` champ pour accepter `Brass` objets. L’exemple spécifie également le nom de l’élément XML en définissant le <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> propriété.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : string * Type -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute (elementName, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="elementName">Nom de l'élément XML du membre sérialisé.</param>
        <param name="type">
          <see cref="T:System.Type" /> d'un objet dérivé du type du membre.</param>
        <summary>Initialise une nouvelle instance de <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> et spécifie le nom de l'élément XML et un type dérivé pour le membre auquel <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> est appliqué. Ce type de membre est utilisé lorsque <see cref="T:System.Xml.Serialization.XmlSerializer" /> sérialise l'objet qui le contient.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, le <xref:System.Xml.Serialization.XmlSerializer> utilise le nom du membre comme nom d’élément XML lors de la sérialisation d’une instance de classe. Par exemple, un champ nommé `Vehicle` génère un élément XML nommé `Vehicle`. Toutefois, si vous avez besoin un élément différent, tel que `Cars`, passez-la dans le `elementName` paramètre.  
  
 Utilisez le `type` paramètre pour spécifier un type qui est dérivé d’une classe de base. Par exemple, une propriété nommée `MyAnimal` retourne un `Animal` objet. Vous souhaitez mettre en valeur l’objet, vous créez une classe nommée `Mammal` qui hérite de la `Animal` classe. Pour indiquer à le <xref:System.Xml.Serialization.XmlSerializer> pour accepter le `Mammal` classe lorsqu’il sérialise le `MyAnimal` propriété, passez le <xref:System.Type> de la `Mammal` classe au constructeur.  
  
   
  
## Examples  
 L’exemple suivant sérialise une classe nommée `Orchestra` qui contient un champ nommé `Instruments`, qui retourne un tableau de `Instrument` objets. Une deuxième classe nommée `Brass` hérite la `Instrument` classe. L’exemple applique le <xref:System.Xml.Serialization.XmlElementAttribute> à la `Instruments` champ et spécifie le `Brass` tapez, ce qui permet la `Instruments` champ pour accepter `Brass` objets. L’exemple spécifie également le nom de l’élément XML en définissant le <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> propriété.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type de données XSD (XML Schema Definition) de l'élément XML généré par <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
        <value>Type de données de schéma XML, tel que défini par le document du W3C (www.w3.org ) intitulé « XML Schema Part 2: Datatypes ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant répertorie les types de données simples de schéma XML.NET correspondants.  
  
 Pour le schéma XML `base64Binary` et `hexBinary` des types de données, utilisez un tableau de <xref:System.Byte> structures et appliquer un <xref:System.Xml.Serialization.XmlElementAttribute> avec le <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> défini sur « base64Binary » ou « hexBinary », selon le cas. Pour le schéma XML `time` et `date` des types de données, utilisez le <xref:System.DateTime> tapez et appliquez le <xref:System.Xml.Serialization.XmlElementAttribute> avec le <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> défini sur « date » ou « time ».  
  
 Pour chaque type de schéma XML qui est mappé à une chaîne, appliquez le <xref:System.Xml.Serialization.XmlElementAttribute> avec son <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> propriété définie sur le type de schéma XML. Il est possible que ce qui peut modifier le format de sérialisation, non seulement le schéma pour le membre.  
  
> [!NOTE]
>  La propriété respecte la casse, vous devez le définir exactement à un des types de données de schéma XML.  
  
> [!NOTE]
>  Passer des données binaires comme un XML élément est plus efficace que lui passant comme un attribut de schéma XML.  
  
 Pour plus d’informations sur les types de données XML, consultez le document du World Wide Web Consortium (www.w3.org) nommé « XML Schema Part 2 : Datatypes ».  
  
|Type de données XSD|Type de données .NET|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|Tableau de <xref:System.Byte> objets|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|ENTITÉS|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|Tableau de <xref:System.Byte> objets|  
|Id|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|entiers|<xref:System.String>|  
|language|<xref:System.String>|  
|long|<xref:System.Int64>|  
|Name|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|duration|<xref:System.String>|  
|chaîne|<xref:System.String>|  
|short|<xref:System.Int16>|  
|heure|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 L’exemple suivant sérialise une classe nommée `Group` qui contient un champ nommé `ExtraInfo`, qui retourne un <xref:System.Collections.ArrayList>. L’exemple applique deux instances de la <xref:System.Xml.Serialization.XmlElementAttribute> au champ et spécifie différents <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> valeurs pour chaque instance. Chaque instance permet le <xref:System.Xml.Serialization.XmlSerializer> pour sérialiser les types spécifiés insérés dans le tableau.  
  
 [!code-cpp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Le type de données de schéma XML que vous avez spécifié ne peut pas être mappé au type de données .NET.</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de l'élément XML généré.</summary>
        <value>Nom de l'élément XML généré. Par défaut, il s'agit de l'identificateur du membre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spécifiez un <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> si vous souhaitez que le nom de l’élément XML généré soit différent de l’identificateur du membre.  
  
 Vous pouvez définir les mêmes <xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A> valeur à plusieurs membres de classe si le document XML généré utilise des espaces de noms XML pour faire la distinction entre les membres portant le même nommés. Pour plus d’informations sur l’utilisation des espaces de noms et des noms préfixés dans le document XML, consultez la <xref:System.Xml.Serialization.XmlSerializerNamespaces> classe.  
  
   
  
## Examples  
 L’exemple suivant définit la <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> propriété d’un <xref:System.Xml.Serialization.XmlElementAttribute> une nouvelle valeur.  
  
 [!code-cpp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName" />
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaForm Form { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaForm Form" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberSignature Language="VB.NET" Value="Public Property Form As XmlSchemaForm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaForm Form { System::Xml::Schema::XmlSchemaForm get(); void set(System::Xml::Schema::XmlSchemaForm value); };" />
      <MemberSignature Language="F#" Value="member this.Form : System.Xml.Schema.XmlSchemaForm with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si l'élément est qualifié.</summary>
        <value>Une des valeurs de <see cref="T:System.Xml.Schema.XmlSchemaForm" />. La valeur par défaut est <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> propriété détermine si un élément XML est qualifié ou non. Le <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> propriété respecte la norme World Wide Web Consortium (www.w3.org) 1999, « Namespaces in XML ».  
  
 Si le <xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A> propriété est définie sur n’importe quelle valeur, tentez de définir la <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> propriété `XmlSchemaForm.Unqualified` lève une exception. Le paramètre par défaut, `XmlSchemaForm.None`, indique le <xref:System.Xml.Serialization.XmlSerializer> de vérifier le schéma pour le document XML déterminer si l’espace de noms est qualifié. Si le schéma ne spécifie pas une valeur pour un élément individuel ou un attribut, le <xref:System.Xml.Serialization.XmlSerializer> utilise le `elementFormDefault` et `attributeFormDefault` valeurs pour déterminer si un élément ou attribut est qualifié. Le code XML suivant montre un schéma :  
  
```  
<schema elementFormDefault="qualified"   
attributeFormDefault="unqualified"... >  
 <element name="Name"/>  
 <attribute name="Number"/>  
</schema>  
```  
  
 Lorsque le <xref:System.Xml.Serialization.XmlSerializer> lit le schéma, le <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> valeur pour les deux le `Name` et `Number` est `XmlSchemaForm.None`, mais la `Name` élément est qualifié, tandis que le `Number` élément est « unqualified ».  
  
   
  
## Examples  
 L’exemple suivant définit la <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> propriété `XmlSchemaForm.Unqualified`.  
  
 [!code-cpp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si <see cref="T:System.Xml.Serialization.XmlSerializer" /> doit sérialiser un membre dont la valeur est <see langword="null" /> comme balise vide avec l'attribut <see langword="xsi:nil" /> ayant la valeur <see langword="true" />.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Xml.Serialization.XmlSerializer" /> génère l'attribut <see langword="xsi:nil" /> ; <see langword="false" /> sinon.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La spécification de schéma XML pour les structures permet à un document XML à signaler de manière explicite que le contenu d’un élément est manquant. Un tel élément contient l’attribut `xsi:nil` défini sur `true`. Pour plus d’informations, consultez la spécification du World Wide Web Consortium (www.w3.org), « XML Schema Part 1 : Structures ».  
  
 Si le <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> propriété est définie sur `true`, le `xsi:nil` attribut est généré pour les membres de classe qui ont été définis sur `null`. Par exemple, si vous définissez un champ nommé `MyStringArray` à `null`, le <xref:System.Xml.Serialization.XmlSerializer> génère le code XML suivant.  
  
```  
<MyStringArray xsi:nil = "true" />  
```  
  
 Si le <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> propriété est `false`, aucun élément XML est généré pour les membres de classe qui ont été définis sur `null`.  
  
> [!NOTE]
>  Vous ne pouvez pas appliquer le <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> propriété à un membre de type valeur, car un type valeur ne peut pas contenir `null`. En outre, vous ne pouvez pas définir cette propriété `false` pour les types valeur nullable. Lorsque ces types sont `null`, ils sont sérialisés en définissant `xsi:nil` à `true`.  
  
   
  
## Examples  
 L’exemple suivant montre un champ avec le <xref:System.Xml.Serialization.XmlElementAttribute> appliqué et le <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> propriété définie sur `false`.  
  
 [!code-cpp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'espace de noms assigné à l'élément XML obtenu lorsque la classe est sérialisée.</summary>
        <value>Espace de noms de l'élément XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> propriété est conforme à la spécification du World Wide Web Consortium (www.w3.org), « Namespaces in XML ».  
  
 Pour créer des espaces de noms qui sont associés à un préfixe, vous devez créer un <xref:System.Xml.Serialization.XmlSerializerNamespaces> qui contient les espaces de noms et les préfixes utilisés dans le document XML. Lorsque vous définissez l’espace de noms pour chaque <xref:System.Xml.Serialization.XmlArrayAttribute>, il doit correspondre à un des espaces de noms dans le <xref:System.Xml.Serialization.XmlSerializerNamespaces>. Lorsque le code XML est généré, chaque tableau est correctement préfixé avec le préfixe associé à l’espace de noms spécifié.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public int Order { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberSignature Language="VB.NET" Value="Public Property Order As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Order { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Order : int with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'ordre explicite dans lequel les éléments sont sérialisés ou désérialisés.</summary>
        <value>Ordre de la génération du code.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder> énumération pour indiquer à le <xref:System.Web.Services.Description.ServiceDescriptionImporter> pour générer le code qui définit le <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> propriété.  
  
> [!IMPORTANT]
>  Une fois le <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> propriété a été utilisée sur une propriété publique ou le champ dans un type, il doit être appliquée à toutes les propriétés et champs publics pour ce type et de tous les types hérités.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type d'objet utilisé pour représenter l'élément XML.</summary>
        <value>
          <see cref="T:System.Type" /> du membre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propriété pour spécifier un type dérivé pour un champ ou une propriété.  
  
 Si un champ ou une propriété retourne un <xref:System.Collections.ArrayList>, vous pouvez appliquer plusieurs instances de la <xref:System.Xml.Serialization.XmlElementAttribute> au membre. Pour chaque instance, définir le <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propriété à un type d’objet qui peut être inséré dans le tableau.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> propriété pour spécifier un objet dérivé pour un <xref:System.Xml.Serialization.XmlElementAttribute>. L’exemple applique également trois instances de la <xref:System.Xml.Serialization.XmlElementAttribute> à un champ qui retourne un <xref:System.Collections.ArrayList>. Chaque instance spécifie un type autorisé dans le champ.  
  
 [!code-cpp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>