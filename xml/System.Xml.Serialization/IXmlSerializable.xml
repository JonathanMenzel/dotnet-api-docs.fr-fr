<Type Name="IXmlSerializable" FullName="System.Xml.Serialization.IXmlSerializable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f84c288bd3c2a837df6c35b25bfc75bf89544369" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53508196" /></Metadata><TypeSignature Language="C#" Value="public interface IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IXmlSerializable" />
  <TypeSignature Language="F#" Value="type IXmlSerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Serialization</AssemblyName>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fournit une mise en forme personnalisée pour la désérialisation et la sérialisation XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il existe deux raisons d’implémenter cette interface. La première consiste à contrôler la façon dont votre objet est sérialisé ou désérialisé par le <xref:System.Xml.Serialization.XmlSerializer>. Par exemple, vous pouvez découper les données en octets au lieu de la mise en mémoire tampon de grands jeux de données et également d’éviter l’inflation qui se produit lorsque les données sont encodées en Base64. Pour contrôler la sérialisation, implémentez le <xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A> et <xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A> méthodes pour contrôler le <xref:System.Xml.XmlReader> et <xref:System.Xml.XmlWriter> classes utilisées pour lire et écrire le code XML. Pour obtenir un exemple de cela, consultez [Comment : Segmenter des données sérialisées](~/docs/standard/serialization/how-to-chunk-serialized-data.md).  
  
 La deuxième raison est de pouvoir contrôler le schéma. Pour ce faire, vous devez appliquer le <xref:System.Xml.Serialization.XmlSchemaProviderAttribute> à sérialisable tapez, puis spécifiez le nom du membre statique qui retourne le schéma. Pour obtenir un exemple, consultez <xref:System.Xml.Serialization.XmlSchemaProviderAttribute>.  
  
 Une classe qui implémente l’interface doit avoir un constructeur sans paramètre. Il s’agit d’une exigence de la <xref:System.Xml.Serialization.XmlSerializer> classe.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de la <xref:System.Xml.Serialization.IXmlSerializable> interface qui sérialise un champ privé.  
  
 [!code-cpp[XmlSerialization_IXmlSerializable#0](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CPP/person.cpp#0)]
 [!code-csharp[XmlSerialization_IXmlSerializable#0](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CS/person.cs#0)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/serialization/introducing-xml-serialization.md">Introduction à la sérialisation XML</related>
  </Docs>
  <Members>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSchema () As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ GetSchema();" />
      <MemberSignature Language="F#" Value="abstract member GetSchema : unit -&gt; System.Xml.Schema.XmlSchema" Usage="iXmlSerializable.GetSchema " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cette méthode est réservée et ne doit pas être utilisée. Au moment d’implémenter l’interface <see langword="IXmlSerializable" />, vous devez retourner la valeur <see langword="null" /> (<see langword="Nothing" /> en Visual Basic) à partir de cette méthode. En revanche, si vous devez spécifier un schéma personnalisé, appliquez <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> à la classe.</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> qui décrit la représentation XML de l’objet qui est généré par la méthode <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> et utilisé par la méthode <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pendant la sérialisation ou désérialisation d’un objet, le <xref:System.Xml.Serialization.XmlSerializer> classe n’effectue pas de validation XML. Pour cette raison, il est souvent sûr d’omettre les informations de schéma en fournissant une implémentation simple de cette méthode, par exemple en retournant `null` (`Nothing` en Visual Basic).  
  
 S’il est nécessaire de fournir des informations de schéma, vous devez utiliser le <xref:System.Xml.Serialization.XmlSchemaProviderAttribute> attribut. Le `GetSchema` méthode doit toujours retourner `null` (ou `Nothing`).  
  
 Certains [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] types, ainsi que des types personnalisés hérités implémentant le `IXmlSerializable` interface peut être à l’aide de `GetSchema` au lieu de `XmlSchemaProvider`. Dans ce cas, la méthode retourne un schéma XML précis qui décrit la représentation XML de l’objet généré par le <xref:System.Data.DataSet.WriteXml%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public void ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXml (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXml(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadXml : System.Xml.XmlReader -&gt; unit" Usage="iXmlSerializable.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Flux <see cref="T:System.Xml.XmlReader" /> duquel l’objet est désérialisé.</param>
        <summary>Génère un objet à partir de sa représentation XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A> méthode doit reconstituer votre objet en utilisant les informations qui a été écrit par le <xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A> (méthode).  
  
 Lorsque cette méthode est appelée, le lecteur est positionné sur la balise de début qui encapsule les informations pour votre type. Autrement dit, directement sur la balise de début qui indique le début d’un objet sérialisé. Lorsque cette méthode est retournée, elle doit avoir lecture l’élément tout entier à partir du début à la fin, y compris tout son contenu. Contrairement à la <xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A> (méthode), le framework ne gère pas automatiquement l’élément wrapper. Votre implémentation doit le faire. Si vous ne respectez ces règles risque de code générer des exceptions runtime inattendues ou données endommagées.  
  
 Lorsque vous implémentez cette méthode, vous devez envisager la possibilité qu’un utilisateur malveillant peut fournir une représentation XML bien formée mais non valide afin de désactiver ou de modifier le comportement de votre application.  
  
   
  
## Examples  
 L’exemple suivant illustre une implémentation de la <xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A> (méthode).  
  
 [!code-cpp[XmlSerialization_IXmlSerializable#2](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CPP/person.cpp#2)]
 [!code-csharp[XmlSerialization_IXmlSerializable#2](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CS/person.cs#2)]  
  
 L’exemple suivant illustre l’utilisation de la <xref:System.Xml.Serialization.XmlSerializer> classe à désérialiser cet objet.  
  
 [!code-cpp[XmlSerialization_IXmlSerializable#20](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CPP/reader.cpp#20)]
 [!code-csharp[XmlSerialization_IXmlSerializable#20](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CS/reader.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member WriteXml : System.Xml.XmlWriter -&gt; unit" Usage="iXmlSerializable.WriteXml writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Flux <see cref="T:System.Xml.XmlWriter" /> dans lequel l'objet est sérialisé.</param>
        <summary>Convertit un objet en sa représentation XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A> implémentation que vous fournissez doit écrire la représentation XML de l’objet. Le framework écrit un élément wrapper et place le writer XML après son démarrage. Votre implémentation peut écrire son contenu, y compris les éléments enfants. Le framework ferme ensuite l’élément wrapper.  
  
 Écrire des informations suffisantes pour le <xref:System.Xml.XmlWriter> flux autorise la <xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A> méthode à reconstituer votre objet.  
  
 Par exemple, si votre état de l’objet inclut une variable de tableau, veillez à écrire la longueur du tableau, ou utiliser un élément parent pour contenir les éléments qui décrivent les valeurs de tableau, afin que vous sachiez combien de valeurs lire lorsque l’objet est reconstitué.  
  
   
  
## Examples  
 L’exemple suivant illustre une implémentation de la <xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A> (méthode).  
  
 [!code-cpp[XmlSerialization_IXmlSerializable#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CPP/person.cpp#1)]
 [!code-csharp[XmlSerialization_IXmlSerializable#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CS/person.cs#1)]  
  
 L’exemple suivant illustre l’utilisation de la <xref:System.Xml.Serialization.XmlSerializer> classe à désérialiser cet objet.  
  
 [!code-cpp[XmlSerialization_IXmlSerializable#10](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CPP/writer.cpp#10)]
 [!code-csharp[XmlSerialization_IXmlSerializable#10](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CS/writer.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>