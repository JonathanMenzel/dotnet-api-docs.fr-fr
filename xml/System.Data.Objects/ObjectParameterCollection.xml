<Type Name="ObjectParameterCollection" FullName="System.Data.Objects.ObjectParameterCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="78e20dec0862b6bfdc41fd74e571653d21a0de1d" />
    <Meta Name="ms.sourcegitcommit" Value="81e3b98e6e33e101af4c17f69cbce407e28d5bc2" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52586036" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ObjectParameterCollection : System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;, System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObjectParameterCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;class System.Data.Objects.ObjectParameter&gt;, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Objects.ObjectParameter&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectParameterCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObjectParameterCollection&#xA;Implements ICollection(Of ObjectParameter), IEnumerable(Of ObjectParameter)" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectParameterCollection sealed : System::Collections::Generic::ICollection&lt;System::Data::Objects::ObjectParameter ^&gt;, System::Collections::Generic::IEnumerable&lt;System::Data::Objects::ObjectParameter ^&gt;" />
  <TypeSignature Language="F#" Value="type ObjectParameterCollection = class&#xA;    interface ICollection&lt;ObjectParameter&gt;&#xA;    interface seq&lt;ObjectParameter&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="21826-101">Représente les paramètres de requête comme objets <see cref="T:System.Data.Objects.ObjectParameter" /> définis dans un objet <see cref="T:System.Data.Objects.ObjectQuery`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="21826-101">Represents the query parameters as <see cref="T:System.Data.Objects.ObjectParameter" /> objects that are defined in an <see cref="T:System.Data.Objects.ObjectQuery`1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21826-102">Représente les paramètres de requête comme objets <xref:System.Data.Objects.ObjectParameter> définis dans un objet <xref:System.Data.Objects.ObjectQuery%601>.</span><span class="sxs-lookup"><span data-stu-id="21826-102">Represents the query parameters as <xref:System.Data.Objects.ObjectParameter> objects defined in an <xref:System.Data.Objects.ObjectQuery%601>.</span></span>  
  
 <span data-ttu-id="21826-103">Cette classe ne peut pas être héritée.</span><span class="sxs-lookup"><span data-stu-id="21826-103">This class cannot be inherited.</span></span>  
  
 <span data-ttu-id="21826-104">Les paramètres passés aux méthodes du Générateur de requêtes sont agrégés par les instances successives d'un objet <xref:System.Data.Objects.ObjectQuery%601> dans la séquence.</span><span class="sxs-lookup"><span data-stu-id="21826-104">The parameters that are passed to query builder methods are aggregated by successive instances of an <xref:System.Data.Objects.ObjectQuery%601> in the sequence.</span></span> <span data-ttu-id="21826-105">Ils sont accessibles à l'aide de la propriété <xref:System.Data.Objects.ObjectQuery.Parameters%2A>, qui retourne l'objet <xref:System.Data.Objects.ObjectParameterCollection>.</span><span class="sxs-lookup"><span data-stu-id="21826-105">They can be accessed by using the <xref:System.Data.Objects.ObjectQuery.Parameters%2A> property, which returns the <xref:System.Data.Objects.ObjectParameterCollection>.</span></span> <span data-ttu-id="21826-106">Une fois ajoutés, les paramètres peuvent être supprimés de la collection et la collection peut être effacée, tant que la requête n'a pas été compilée ou exécutée.</span><span class="sxs-lookup"><span data-stu-id="21826-106">After parameters have been added, they can be removed from the collection and the collection can be cleared, as long as the query has not been compiled or executed.</span></span> <span data-ttu-id="21826-107">Les noms des paramètres ne peuvent pas être modifiés, mais leurs valeurs peuvent l'être à tout moment.</span><span class="sxs-lookup"><span data-stu-id="21826-107">Parameter names cannot be changed, but values can be changed at any time.</span></span>  
  
 <span data-ttu-id="21826-108">Les paramètres doivent être uniques dans la collection <xref:System.Data.Objects.ObjectParameterCollection>.</span><span class="sxs-lookup"><span data-stu-id="21826-108">Parameters must be unique in the <xref:System.Data.Objects.ObjectParameterCollection>.</span></span> <span data-ttu-id="21826-109">Une même collection ne peut pas contenir deux paramètres du même nom.</span><span class="sxs-lookup"><span data-stu-id="21826-109">There cannot be two parameters in the collection with the same name.</span></span>  
  
 <span data-ttu-id="21826-110">En cas d'utilisation de méthodes de composition, telles que <xref:System.Data.Objects.ObjectQuery%601.Union%2A>, <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>, <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> et <xref:System.Data.Objects.ObjectQuery%601.Except%2A>, les paramètres sont fusionnés.</span><span class="sxs-lookup"><span data-stu-id="21826-110">When using composition methods, such as <xref:System.Data.Objects.ObjectQuery%601.Union%2A>, <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>, <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> and <xref:System.Data.Objects.ObjectQuery%601.Except%2A>, the parameters are merged.</span></span> <span data-ttu-id="21826-111">Une exception est levée lorsque les jeux de paramètres sont incompatibles ou incomplets.</span><span class="sxs-lookup"><span data-stu-id="21826-111">An exception is thrown when the sets of parameters are incompatible or incomplete.</span></span> <span data-ttu-id="21826-112">Pour plus d’informations, consultez [méthodes du Générateur de requête](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).</span><span class="sxs-lookup"><span data-stu-id="21826-112">For more information, see [Query Builder Methods](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21826-113">L’exemple de cette rubrique est basé sur le [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span><span class="sxs-lookup"><span data-stu-id="21826-113">The example in this topic is based on the [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="21826-114">L’exemple ajoute de nouveaux paramètres à la collection et obtient le nombre de paramètres appartenant à la collection.</span><span class="sxs-lookup"><span data-stu-id="21826-114">The example adds new parameters to the collection and gets the count of the parameters in the collection.</span></span> <span data-ttu-id="21826-115">Ensuite, il itère au sein de la collection <xref:System.Data.Objects.ObjectParameterCollection> et affiche le nom, le type et la valeur de chaque paramètre de la collection.</span><span class="sxs-lookup"><span data-stu-id="21826-115">Then it iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, type, and value of each parameter in the collection.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_count_add_indexer)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_count_add_indexer)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">
      <span data-ttu-id="21826-116">Interrogation des données sous forme d’objets et mise en forme des résultats (Entity Framework)</span>
      <span class="sxs-lookup">
        <span data-stu-id="21826-116">Querying Data as Objects and Shaping Results (Entity Framework)</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Data.Objects.ObjectParameter parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Data.Objects.ObjectParameter parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (parameter As ObjectParameter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Data::Objects::ObjectParameter ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Data.Objects.ObjectParameter -&gt; unit&#xA;override this.Add : System.Data.Objects.ObjectParameter -&gt; unit" Usage="objectParameterCollection.Add parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Objects.ObjectParameter" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="21826-117">Paramètre à ajouter à la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-117">The parameter to add to the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21826-118">Ajoute l'objet <see cref="T:System.Data.Objects.ObjectParameter" /> spécifié à la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-118">Adds the specified <see cref="T:System.Data.Objects.ObjectParameter" /> to the collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21826-119">Une fois ajoutés, les paramètres peuvent être supprimés de la collection et la collection peut être effacée, tant que la requête n’a pas été compilée ou exécutée.</span><span class="sxs-lookup"><span data-stu-id="21826-119">After parameters have been added, they can be removed from the collection and the collection can be cleared, as long as the query has not been compiled or executed.</span></span> <span data-ttu-id="21826-120">Les noms des paramètres ne peuvent pas être modifiés, mais leurs valeurs peuvent l'être à tout moment.</span><span class="sxs-lookup"><span data-stu-id="21826-120">Parameter names cannot be changed, but values can be changed at any time.</span></span>  
  
 <span data-ttu-id="21826-121">Les paramètres doivent être uniques dans la collection <xref:System.Data.Objects.ObjectParameterCollection>.</span><span class="sxs-lookup"><span data-stu-id="21826-121">Parameters must be unique in the <xref:System.Data.Objects.ObjectParameterCollection>.</span></span> <span data-ttu-id="21826-122">Une même collection ne peut pas contenir deux paramètres du même nom.</span><span class="sxs-lookup"><span data-stu-id="21826-122">There cannot be two parameters in the collection with the same name.</span></span> <span data-ttu-id="21826-123">Pour plus d’informations, consultez [méthodes du Générateur de requête](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).</span><span class="sxs-lookup"><span data-stu-id="21826-123">For more information, see [Query Builder Methods](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21826-124">L’exemple de cette rubrique est basé sur le [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span><span class="sxs-lookup"><span data-stu-id="21826-124">The example in this topic is based on the [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="21826-125">L’exemple ajoute de nouveaux paramètres à la collection.</span><span class="sxs-lookup"><span data-stu-id="21826-125">The example adds new parameters to the collection.</span></span> <span data-ttu-id="21826-126">Il itère au sein de la collection <xref:System.Data.Objects.ObjectParameterCollection> et affiche le nom, le type et la valeur de chaque paramètre de la collection.</span><span class="sxs-lookup"><span data-stu-id="21826-126">It iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, type, and value of each parameter in the collection.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_count_add_indexer)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_count_add_indexer)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="21826-127">L'argument <paramref name="parameter" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-127">The <paramref name="parameter" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21826-128">L'argument <paramref name="parameter" /> existe déjà dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-128">The <paramref name="parameter" /> argument already exists in the collection.</span>
          </span>
          <span data-ttu-id="21826-129">Ce comportement diffère de celui de la plupart des collections qui autorisent les entrées dupliquées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-129">This behavior differs from that of most collections that allow duplicate entries.</span>
          </span>
          <span data-ttu-id="21826-130">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-130">-or-</span>
          </span>
          <span data-ttu-id="21826-131">Un autre paramètre portant le même nom que l'argument <paramref name="parameter" /> existe déjà dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-131">Another parameter with the same name as the <paramref name="parameter" /> argument already exists in the collection.</span>
          </span>
          <span data-ttu-id="21826-132">Notez que la recherche ne respecte pas la casse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-132">Note that the lookup is case-insensitive.</span>
          </span>
          <span data-ttu-id="21826-133">Ce comportement diffère de celui de la plupart des collections et ressemble davantage à celui d’un objet <see cref="T:System.Collections.Generic.Dictionary`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-133">This behavior differs from that of most collections, and is more like that of a <see cref="T:System.Collections.Generic.Dictionary`2" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="21826-134">Le type du <paramref name="parameter" /> n'est pas valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-134">The type of the <paramref name="parameter" /> is not valid.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">
          <span data-ttu-id="21826-135">Interrogation des données sous forme d’objets et mise en forme des résultats (Entity Framework)</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-135">Querying Data as Objects and Shaping Results (Entity Framework)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="objectParameterCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="21826-136">Supprime toutes les instances <see cref="T:System.Data.Objects.ObjectParameter" /> de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-136">Deletes all <see cref="T:System.Data.Objects.ObjectParameter" /> instances from the collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="21826-137">Vérifie l'existence d'un objet <see cref="T:System.Data.Objects.ObjectParameter" /> spécifié dans la collection par référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-137">Checks for the existence of a specified <see cref="T:System.Data.Objects.ObjectParameter" /> in the collection by reference.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Data.Objects.ObjectParameter parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Data.Objects.ObjectParameter parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (parameter As ObjectParameter) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Data::Objects::ObjectParameter ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member Contains : System.Data.Objects.ObjectParameter -&gt; bool&#xA;override this.Contains : System.Data.Objects.ObjectParameter -&gt; bool" Usage="objectParameterCollection.Contains parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Objects.ObjectParameter" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="21826-138">Objet <see cref="T:System.Data.Objects.ObjectParameter" /> à rechercher dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-138">The <see cref="T:System.Data.Objects.ObjectParameter" /> to find in the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21826-139">Vérifie l'existence d'un objet <see cref="T:System.Data.Objects.ObjectParameter" /> spécifié dans la collection par référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-139">Checks for the existence of a specified <see cref="T:System.Data.Objects.ObjectParameter" /> in the collection by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="21826-140">Retourne <see langword="true" /> si l'objet paramètre se trouve dans la collection ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-140">Returns <see langword="true" /> if the parameter object was found in the collection; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21826-141">Il s'agit d'un contrôle basé sur la référence.</span><span class="sxs-lookup"><span data-stu-id="21826-141">This is a reference-based check.</span></span> <span data-ttu-id="21826-142">Autrement dit, si un <xref:System.Data.Objects.ObjectParameter> spécifié contient le même nom qu’un objet de paramètre dans la collection, cette méthode retournera seulement `true` si c’est le même objet.</span><span class="sxs-lookup"><span data-stu-id="21826-142">That is, if an <xref:System.Data.Objects.ObjectParameter> is specified that contains the same name as a parameter object in the collection, this method will only return `true` if it is the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="21826-143">L'argument <paramref name="parameter" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-143">The <paramref name="parameter" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="objectParameterCollection.Contains name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="21826-144">Nom du paramètre à rechercher dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-144">The name of the parameter to look for in the collection.</span>
          </span>
          <span data-ttu-id="21826-145">Ce nom ne doit pas inclure le marqueur de paramètre « @ » utilisé dans les instructions Entity SQL, mais uniquement le nom réel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-145">This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21826-146">Détermine si un objet <see cref="T:System.Data.Objects.ObjectParameter" /> avec le nom spécifié est dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-146">Determines whether an <see cref="T:System.Data.Objects.ObjectParameter" /> with the specified name is in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="21826-147">Retourne <see langword="true" /> si un paramètre portant le nom spécifié a été trouvé dans la collection ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-147">Returns <see langword="true" /> if a parameter with the specified name was found in the collection; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="21826-148">L’exemple de cette rubrique est basé sur le [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span><span class="sxs-lookup"><span data-stu-id="21826-148">The example in this topic is based on the [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="21826-149">L’exemple utilise la méthode <xref:System.Data.Objects.ObjectParameterCollection.Contains%2A> pour déterminer si le paramètre spécifié est dans la collection.</span><span class="sxs-lookup"><span data-stu-id="21826-149">The example uses the <xref:System.Data.Objects.ObjectParameterCollection.Contains%2A> method to determine whether the specified parameter is in the collection.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_StringArg](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_stringarg)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_StringArg](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_stringarg)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="21826-150">Le paramètre <paramref name="name" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-150">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Data.Objects.ObjectParameter[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Data.Objects.ObjectParameter[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As ObjectParameter(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : System.Data.Objects.ObjectParameter[] * int -&gt; unit&#xA;override this.CopyTo : System.Data.Objects.ObjectParameter[] * int -&gt; unit" Usage="objectParameterCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Data.Objects.ObjectParameter[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="21826-151">Tableau dans lequel copier les paramètres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-151">The array into which to copy the parameters.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="21826-152">Index à partir duquel commencer la copie des paramètres dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-152">The index in the array at which to start copying the parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21826-153">Autorise la copie des paramètres de la collection dans un tableau fourni, en commençant par l’objet à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-153">Allows the parameters in the collection to be copied into a supplied array, starting with the object at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="21826-154">L’exemple de cette rubrique est basé sur le [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span><span class="sxs-lookup"><span data-stu-id="21826-154">The example in this topic is based on the [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="21826-155">L'exemple copie les paramètres dans le tableau spécifié.</span><span class="sxs-lookup"><span data-stu-id="21826-155">The example copies the parameters into the specified array.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_CopyTo](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_copyto)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_CopyTo](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_copyto)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameterCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Data.Objects.ObjectParameterCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21826-156">Obtient le nombre de paramètres actuellement présents dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-156">Gets the number of parameters currently in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21826-157">Nombre d'objets <see cref="T:System.Data.Objects.ObjectParameter" /> actuellement présents dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-157">The number of <see cref="T:System.Data.Objects.ObjectParameter" /> objects that are currently in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="21826-158">L’exemple de cette rubrique est basé sur le [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span><span class="sxs-lookup"><span data-stu-id="21826-158">The example in this topic is based on the [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="21826-159">L’exemple ajoute de nouveaux paramètres à la collection et obtient le nombre de paramètres appartenant à la collection.</span><span class="sxs-lookup"><span data-stu-id="21826-159">The example adds new parameters to the collection and gets the count of the parameters in the collection.</span></span> <span data-ttu-id="21826-160">Ensuite, il itère au sein de la collection <xref:System.Data.Objects.ObjectParameterCollection> et affiche le nom, le type et la valeur de chaque paramètre de la collection.</span><span class="sxs-lookup"><span data-stu-id="21826-160">Then it iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, type, and value of each parameter in the collection.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_count_add_indexer)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_count_add_indexer)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">
          <span data-ttu-id="21826-161">Interrogation des données sous forme d’objets et mise en forme des résultats (Entity Framework)</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-161">Querying Data as Objects and Shaping Results (Entity Framework)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectParameter this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectParameter Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameterCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(name As String) As ObjectParameter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Objects::ObjectParameter ^ default[System::String ^] { System::Data::Objects::ObjectParameter ^ get(System::String ^ name); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Data.Objects.ObjectParameter" Usage="System.Data.Objects.ObjectParameterCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="21826-162">Nom du paramètre à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-162">The name of the parameter to find.</span>
          </span>
          <span data-ttu-id="21826-163">Ce nom ne doit pas inclure le marqueur de paramètre « @ » utilisé dans les instructions Entity SQL, mais uniquement le nom réel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-163">This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21826-164">Fournit un indexeur qui permet aux appelants de récupérer des paramètres par nom.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-164">Provides an indexer that allows callers to retrieve parameters by name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21826-165">Instance <see cref="T:System.Data.Objects.ObjectParameter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-165">The <see cref="T:System.Data.Objects.ObjectParameter" /> instance.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="21826-166">Il n’existe aucun paramètre portant le nom spécifié dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-166">No parameter with the specified name is found in the collection.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (System.Data.Objects.ObjectParameter parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class System.Data.Objects.ObjectParameter parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (parameter As ObjectParameter) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(System::Data::Objects::ObjectParameter ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Data.Objects.ObjectParameter -&gt; bool&#xA;override this.Remove : System.Data.Objects.ObjectParameter -&gt; bool" Usage="objectParameterCollection.Remove parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Objects.ObjectParameter" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="21826-167">Objet à supprimer de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-167">An object to remove from the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21826-168">Supprime une instance d’un objet <see cref="T:System.Data.Objects.ObjectParameter" /> de la collection par référence s’il existe dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-168">Removes an instance of an <see cref="T:System.Data.Objects.ObjectParameter" /> from the collection by reference if it exists in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="21826-169">Retourne <see langword="true" /> si l'objet paramètre a été trouvé et supprimé de la collection ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-169">Returns <see langword="true" /> if the parameter object was found and removed from the collection; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21826-170">Il s'agit d'une comparaison basée sur la référence.</span><span class="sxs-lookup"><span data-stu-id="21826-170">This is a reference-based comparison.</span></span> <span data-ttu-id="21826-171">Autrement dit, si un objet de paramètre de requête spécifié contient le même nom qu'un objet de paramètre dans la collection, le paramètre dans la collection est supprimé seulement s'il s'agit du même objet.</span><span class="sxs-lookup"><span data-stu-id="21826-171">That is, if a query parameter object is specified that contains the same name as a parameter object in the collection, the parameter in the collection will only be removed if it is the same object.</span></span> <span data-ttu-id="21826-172">Pour supprimer un objet par nom, utilisez d'abord l'indexeur afin de récupérer l'instance de paramètre, puis supprimez-le en utilisant cette méthode.</span><span class="sxs-lookup"><span data-stu-id="21826-172">To remove an object by name, first use the indexer to retrieve the parameter instance, then remove it by using this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21826-173">L’exemple de cette rubrique est basé sur le [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span><span class="sxs-lookup"><span data-stu-id="21826-173">The example in this topic is based on the [AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="21826-174">L’exemple ajoute deux paramètres à la collection, puis supprime les paramètres.</span><span class="sxs-lookup"><span data-stu-id="21826-174">The example adds two parameters to the collection and then removes the parameters.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_Remove](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_remove)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Remove](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_remove)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="21826-175">L'argument <paramref name="parameter" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-175">The <paramref name="parameter" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection&lt;System#Data#Objects#ObjectParameter&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of ObjectParameter).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;System::Data::Objects::ObjectParameter&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21826-176">Obtient une valeur qui indique si la collection est en lecture seule ou si elle peut être modifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-176">Gets a value that indicates whether the collection is read-only or can be modified.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21826-177">Valeur booléenne qui est <see langword="true" /> si la collection est en lecture seule et <see langword="false" /> de la collection peut être modifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-177">A Boolean value that is <see langword="true" /> if the collection is read-only and <see langword="false" /> of the collection can be modified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21826-178">Cette collection est toujours en lecture/écriture ; les paramètres peuvent être ajoutés, supprimés et modifiés.</span><span class="sxs-lookup"><span data-stu-id="21826-178">This collection is always read/write; parameters can be added, removed, and modified.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Data.Objects.ObjectParameter&gt; IEnumerable&lt;ObjectParameter&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Data.Objects.ObjectParameter&gt; System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable&lt;System#Data#Objects#ObjectParameter&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of ObjectParameter) Implements IEnumerable(Of ObjectParameter).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Data::Objects::ObjectParameter ^&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Data::Objects::ObjectParameter ^&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Data.Objects.ObjectParameter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="21826-179">Retourne un énumérateur typé sur la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-179">Returns a typed enumerator over the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="21826-180">
            <see cref="T:System.Collections.Generic.IEnumerator`1" /> de type <see cref="T:System.Data.Objects.ObjectParameter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-180">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type <see cref="T:System.Data.Objects.ObjectParameter" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21826-181">Retourne une instance de <xref:System.Collections.Generic.IEnumerator%601>.</span><span class="sxs-lookup"><span data-stu-id="21826-181">Returns an <xref:System.Collections.Generic.IEnumerator%601> instance.</span></span> <span data-ttu-id="21826-182">Cela autorise l’itération et la traversée de la collection.</span><span class="sxs-lookup"><span data-stu-id="21826-182">This allows the collection to be iterated through and traversed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="21826-183">Retourne un énumérateur non typé sur la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-183">Returns an untyped enumerator over the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="21826-184">Instance de <see cref="T:System.Collections.IEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21826-184">An <see cref="T:System.Collections.IEnumerator" /> instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21826-185">Retourne un énumérateur non typé sur la collection.</span><span class="sxs-lookup"><span data-stu-id="21826-185">Returns an untyped enumerator over the collection.</span></span> <span data-ttu-id="21826-186">Cela autorise l'itération et la traversée de la collection.</span><span class="sxs-lookup"><span data-stu-id="21826-186">This allows the collection to be iterated through and traversed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>