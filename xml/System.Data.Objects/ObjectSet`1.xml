<Type Name="ObjectSet&lt;TEntity&gt;" FullName="System.Data.Objects.ObjectSet&lt;TEntity&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="259f03eb197b7c6a0d3c249fbde4c17b9040ceb6" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39952911" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectSet&lt;TEntity&gt; : System.Data.Objects.ObjectQuery&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.Data.Objects.IObjectSet&lt;TEntity&gt; where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectSet`1&lt;class TEntity&gt; extends System.Data.Objects.ObjectQuery`1&lt;!TEntity&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.Data.Objects.IObjectSet`1&lt;!TEntity&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectSet`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectSet(Of TEntity)&#xA;Inherits ObjectQuery(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IObjectSet(Of TEntity)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class ObjectSet : System::Data::Objects::ObjectQuery&lt;TEntity&gt;, System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::Data::Objects::IObjectSet&lt;TEntity&gt;" />
  <TypeSignature Language="F#" Value="type ObjectSet&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    inherit ObjectQuery&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IObjectSet&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.ObjectQuery&lt;TEntity&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TEntity</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Objects.IObjectSet&lt;TEntity&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity">Type d'entité.</typeparam>
    <summary>Représente un jeu d’entités typé servant à exécuter des opérations de création, de lecture, de mise à jour et de suppression.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.Objects.ObjectSet%601> classe vous permet de fonctionner sur un jeu sans avoir à spécifier le nom de jeu d’entités en tant qu’argument à chaque appel de méthode d’entités typé. Le <xref:System.Data.Objects.ObjectSet%601> classe étend les fonctionnalités de la <xref:System.Data.Objects.ObjectQuery%601> classe pour fournir la fonctionnalité de contexte d’objet, telles que l’ajout et suppression d’objets, dans le contexte d’une entité typée définir qui est accessible à partir de la <xref:System.Data.Objects.ObjectContext>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddObject">
      <MemberSignature Language="C#" Value="public void AddObject (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddObject(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectSet`1.AddObject(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddObject (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddObject(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member AddObject : 'Entity -&gt; unit&#xA;override this.AddObject : 'Entity -&gt; unit" Usage="objectSet.AddObject entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.IObjectSet`1.AddObject(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Objet à ajouter.</param>
        <summary>Ajoute un objet au contexte de l'objet dans le jeu d'entités actuel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est un wrapper autour du <xref:System.Data.Objects.ObjectContext.AddObject%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyCurrentValues">
      <MemberSignature Language="C#" Value="public TEntity ApplyCurrentValues (TEntity currentEntity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity ApplyCurrentValues(!TEntity currentEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyCurrentValues (currentEntity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity ApplyCurrentValues(TEntity currentEntity);" />
      <MemberSignature Language="F#" Value="member this.ApplyCurrentValues : 'Entity -&gt; 'Entity" Usage="objectSet.ApplyCurrentValues currentEntity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentEntity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="currentEntity">Objet détaché ayant les mises à jour de propriétés à appliquer à l'objet d'origine. La clé d’entité de <c>currentEntity</c> doit correspondre à la propriété <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> d’une entrée dans <see cref="T:System.Data.Objects.ObjectContext" />.</param>
        <summary>Copie les valeurs scalaires de l'objet fourni dans l'objet du <see cref="T:System.Data.Objects.ObjectContext" /> qui a la même clé.</summary>
        <returns>L'objet mis à jour.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est un wrapper autour du <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)" />
        <altmember cref="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyOriginalValues">
      <MemberSignature Language="C#" Value="public TEntity ApplyOriginalValues (TEntity originalEntity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity ApplyOriginalValues(!TEntity originalEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyOriginalValues (originalEntity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity ApplyOriginalValues(TEntity originalEntity);" />
      <MemberSignature Language="F#" Value="member this.ApplyOriginalValues : 'Entity -&gt; 'Entity" Usage="objectSet.ApplyOriginalValues originalEntity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalEntity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="originalEntity">Objet détaché ayant les mises à jour de propriétés à appliquer à l'objet d'origine. La clé d’entité de <c>originalEntity</c> doit correspondre à la propriété <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> d’une entrée dans <see cref="T:System.Data.Objects.ObjectContext" />.</param>
        <summary>Définit la propriété <see cref="P:System.Data.Objects.ObjectStateEntry.OriginalValues" /> d'un <see cref="T:System.Data.Objects.ObjectStateEntry" /> de manière à ce qu'elle corresponde aux valeurs de propriété d'un objet fourni.</summary>
        <returns>L'objet mis à jour.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est un wrapper autour du <xref:System.Data.Objects.ObjectContext.ApplyOriginalValues%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)" />
        <altmember cref="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)" />
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectSet`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member Attach : 'Entity -&gt; unit&#xA;override this.Attach : 'Entity -&gt; unit" Usage="objectSet.Attach entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.IObjectSet`1.Attach(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Objet à attacher.</param>
        <summary>Attache un objet ou graphique d'objet au contexte de l'objet dans le jeu d'entités actuel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est un wrapper autour du <xref:System.Data.Objects.ObjectContext.AttachTo%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public TEntity CreateObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity CreateObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectSet`1.CreateObject" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject () As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity CreateObject();" />
      <MemberSignature Language="F#" Value="member this.CreateObject : unit -&gt; 'Entity" Usage="objectSet.CreateObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée un nouvel objet de type d'entité.</summary>
        <returns>Le nouvel objet de type d'entité, ou une instance d'un type de proxy qui correspond au type d'entité.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObject&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T CreateObject&lt;T&gt; () where T : class, TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T CreateObject&lt;class (!TEntity) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectSet`1.CreateObject``1" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject(Of T As {Class, TEntity}) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class, TEntity T CreateObject();" />
      <MemberSignature Language="F#" Value="member this.CreateObject : unit -&gt; 'T" Usage="objectSet.CreateObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Type d'objet à retourner.</typeparam>
        <summary>Crée une instance du type spécifié.</summary>
        <returns>Instance du type <paramref name="T" /> demandé, ou instance d'un type de proxy qui correspond au type <paramref name="T" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteObject">
      <MemberSignature Language="C#" Value="public void DeleteObject (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteObject(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteObject (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeleteObject(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member DeleteObject : 'Entity -&gt; unit&#xA;override this.DeleteObject : 'Entity -&gt; unit" Usage="objectSet.DeleteObject entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.IObjectSet`1.DeleteObject(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Objet qui représente l'entité à supprimer. L'objet peut être dans tout état à l'exception de <see cref="F:System.Data.EntityState.Detached" />.</param>
        <summary>Marque un objet pour la suppression.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est un wrapper autour du <xref:System.Data.Objects.ObjectContext.DeleteObject%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Detach">
      <MemberSignature Language="C#" Value="public void Detach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Detach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectSet`1.Detach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Detach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Detach(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member Detach : 'Entity -&gt; unit&#xA;override this.Detach : 'Entity -&gt; unit" Usage="objectSet.Detach entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.IObjectSet`1.Detach(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Objet à détacher. Seul <c>entity</c> est supprimé ; si des objets connexes sont suivis par le même <see cref="T:System.Data.Objects.ObjectStateManager" />, ils ne sont pas détachés automatiquement.</param>
        <summary>Supprime l'objet du contexte de l'objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est un wrapper autour du <xref:System.Data.Objects.ObjectContext.Detach%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.Detach(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="EntitySet">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.EntitySet EntitySet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Metadata.Edm.EntitySet EntitySet" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectSet`1.EntitySet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntitySet As EntitySet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Metadata::Edm::EntitySet ^ EntitySet { System::Data::Metadata::Edm::EntitySet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EntitySet : System.Data.Metadata.Edm.EntitySet" Usage="System.Data.Objects.ObjectSet&lt;'Entity (requires 'Entity : null)&gt;.EntitySet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.EntitySet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les métadonnées du jeu d'entités représentées par cette instance <see cref="T:System.Data.Objects.ObjectSet`1" />.</summary>
        <value>Objet <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>