<Type Name="DirectoryEntry" FullName="System.DirectoryServices.DirectoryEntry">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b5c0768a4a33ec4c44a6075956df25a90a2f63e0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36340645" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DirectoryEntry : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DirectoryEntry extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.DirectoryEntry" />
  <TypeSignature Language="VB.NET" Value="Public Class DirectoryEntry&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class DirectoryEntry : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type DirectoryEntry = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.DirectoryServices.Design.DirectoryEntryConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.DirectoryServices.DSDescription("DirectoryEntryDesc")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>La classe <see cref="T:System.DirectoryServices.DirectoryEntry" /> encapsule un nœud ou un objet dans la hiérarchie des services de domaine Active Directory.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette classe pour la liaison à des objets ou de lecture et de mise à jour des attributs. <xref:System.DirectoryServices.DirectoryEntry>, ainsi que les classes d’assistance, prend en charge pour le cycle de vie des méthodes de navigation et de gestion. Ceux-ci incluent la création, suppression, modification du nom, déplacement d’un nœud enfant et l’énumération des enfants. Après avoir modifié un nœud, vous devez valider vos modifications afin de les enregistrer à l’arborescence. Pour plus d'informations, consultez la propriété <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>.  
  
 <xref:System.DirectoryServices.DirectoryEntry> peut être utilisé pour accéder aux entrées courantes et les informations de certains, mais pas tous, à partir des entrées de schéma.  
  
 La hiérarchie des Services de domaine Active Directory contient jusqu'à plusieurs milliers de nœuds. Chaque nœud représente un objet, comme une imprimante réseau ou un utilisateur dans un domaine. Réseaux d’entreprise changent constamment de nouveaux employés et les objets tels que des imprimantes réseau et les ordinateurs sont ajoutés. La technologie Active Directory Service Interfaces (ADSI) offre des moyens pour ajouter par programme ces objets à l’arborescence de répertoires.  
  
 Pour créer une entrée de répertoire dans la hiérarchie, utilisez le <xref:System.DirectoryServices.DirectoryEntry.Children%2A> propriété. Le <xref:System.DirectoryServices.DirectoryEntry.Children%2A> propriété est une collection qui fournit une <xref:System.DirectoryServices.DirectoryEntries.Add%2A> méthode, par le biais duquel vous ajoutez un nœud à la collection directement au-dessous du nœud parent auquel vous êtes actuellement lié. Lorsque vous ajoutez un nœud à la collection, vous devez spécifier un nom pour le nouveau nœud et le nom d’un modèle de schéma que vous souhaitez associer au nœud. Par exemple, vous souhaiterez éventuellement utiliser un schéma intitulé « Ordinateur » pour ajouter de nouveaux ordinateurs à la hiérarchie.  
  
 Cette classe contient également la mise en cache de l’attribut, qui peut être utile pour optimiser le trafic réseau. Pour utiliser la mise en cache de l’attribut, consultez le <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> propriété.  
  
 Les classes associées à la <xref:System.DirectoryServices.DirectoryEntry> composant peut être utilisé avec un des fournisseurs de services des Services de domaine Active Directory. Parmi les fournisseurs actuels sont WinNT, Novell NetWare Directory Service (NDS), Internet Information Services (IIS) et LDAP Lightweight Directory Access Protocol ().  
  
> [!NOTE]
>  Il est supposé que vous avez une idée générale des Services de domaine Active Directory avant d’utiliser cette classe. Pour plus d’informations, consultez le <xref:System.DirectoryServices?displayProperty=nameWithType> vue d’ensemble de l’espace de noms.  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
      <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />
    </permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (object adsObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object adsObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (adsObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::Object ^ adsObject);" />
      <MemberSignature Language="F#" Value="new System.DirectoryServices.DirectoryEntry : obj -&gt; System.DirectoryServices.DirectoryEntry" Usage="new System.DirectoryServices.DirectoryEntry adsObject" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adsObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="adsObject">Nom de l'objet des services de domaine Active Directory natif auquel effectuer la liaison.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DirectoryServices.DirectoryEntry" /> qui est liée à l'objet des services de domaine Active Directory natif spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur permet à un programme d’utiliser les méthodes et propriétés de la <xref:System.DirectoryServices.DirectoryEntry> classe sur un objet de Services de domaine Active Directory natif qui implémente l’interface IADs via une API native. Pour plus d’informations sur l’interface IADs, consultez la rubrique [IADs](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) dans MSDN Library à [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.DirectoryServices.DirectoryEntry : string -&gt; System.DirectoryServices.DirectoryEntry" Usage="new System.DirectoryServices.DirectoryEntry path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d'accès dans lequel lier <see cref="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String)" /> à l'annuaire. La propriété <see cref="P:System.DirectoryServices.DirectoryEntry.Path" /> est initialisée à cette valeur.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DirectoryServices.DirectoryEntry" /> qui lie cette instance au nœud des services de domaine Active Directory figurant dans le chemin d'accès spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant lie un <xref:System.DirectoryServices.DirectoryEntry> de l’objet à l’entrée de répertoire au chemin d’accès spécifié et affiche le <xref:System.DirectoryServices.DirectoryEntry.Path%2A> propriété de chaque entrée enfant qui est spécifiée par du nœud <xref:System.DirectoryServices.DirectoryEntry.Children%2A> propriété.  
  
```vb  
Public Class PrintChildren  
  
    'Entry point which delegates to C-style main Private Function.  
    Public Overloads Shared Sub Main()  
        Main(System.Environment.GetCommandLineArgs())  
    End Sub  
  
    Overloads Public Shared Sub Main(args() As String)  
        Dim objDE As DirectoryEntry  
        Dim strPath As String = "LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com"  
        If args.Length > 0 Then  
            strPath = args(1)  
        End If   
        ' Create a new DirectoryEntry with the given path.  
        objDE = New DirectoryEntry(strPath)  
  
        Dim objChildDE As DirectoryEntry  
        For Each objChildDE In  objDE.Children  
            Console.WriteLine(objChildDE.Path)  
        Next objChildDE  
    End Sub 'Main  
End Class 'PrintChildren  
  
```  
  
```csharp  
public class PrintChildren{  
   public static void Main(String[] args)  
   {  
      DirectoryEntry objDE;  
      String strPath="LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com";  
      if(args.Length>0)strPath=args[1];  
  
      // Create a new DirectoryEntry with the given path.  
      objDE=new DirectoryEntry(strPath);  
  
      foreach(DirectoryEntry objChildDE in objDE.Children)  
        Console.WriteLine(objChildDE.Path);  
   }  
 }  
  
```  
  
```cpp#  
int main()  
{  
    String^ args[] = Environment::GetCommandLineArgs();  
    DirectoryEntry^ objDE;  
    String^ strPath = "LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com";  
    if(args->Length>1)  
    {  
        strPath=args[1];  
    }  
  
    // Create a new DirectoryEntry with the given path.  
    objDE = gcnew DirectoryEntry(strPath);  
  
    System::Collections::IEnumerator^ enum0 = objDE->Children->GetEnumerator();  
    while (enum0->MoveNext())  
    {  
        DirectoryEntry^ objChildDE = safe_cast<DirectoryEntry^>(enum0->Current);  
        Console::WriteLine(objChildDE->Path);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (string path, string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, username As String, password As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::String ^ path, System::String ^ username, System::String ^ password);" />
      <MemberSignature Language="F#" Value="new System.DirectoryServices.DirectoryEntry : string * string * string -&gt; System.DirectoryServices.DirectoryEntry" Usage="new System.DirectoryServices.DirectoryEntry (path, username, password)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d'accès de ce <see cref="T:System.DirectoryServices.DirectoryEntry" />. La propriété <see cref="P:System.DirectoryServices.DirectoryEntry.Path" /> est initialisée à cette valeur.</param>
        <param name="username">Nom d'utilisateur à utiliser au moment de l'authentification du client. La propriété <see cref="P:System.DirectoryServices.DirectoryEntry.Username" /> est initialisée à cette valeur.</param>
        <param name="password">Mot de passe à utiliser au moment de l'authentification du client. La propriété <see cref="P:System.DirectoryServices.DirectoryEntry.Password" /> est initialisée à cette valeur.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (string path, string username, string password, System.DirectoryServices.AuthenticationTypes authenticationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string username, string password, valuetype System.DirectoryServices.AuthenticationTypes authenticationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, username As String, password As String, authenticationType As AuthenticationTypes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::String ^ path, System::String ^ username, System::String ^ password, System::DirectoryServices::AuthenticationTypes authenticationType);" />
      <MemberSignature Language="F#" Value="new System.DirectoryServices.DirectoryEntry : string * string * string * System.DirectoryServices.AuthenticationTypes -&gt; System.DirectoryServices.DirectoryEntry" Usage="new System.DirectoryServices.DirectoryEntry (path, username, password, authenticationType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="authenticationType" Type="System.DirectoryServices.AuthenticationTypes" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d'accès de ce <see cref="T:System.DirectoryServices.DirectoryEntry" />. La propriété <see cref="P:System.DirectoryServices.DirectoryEntry.Path" /> est initialisée à cette valeur.</param>
        <param name="username">Nom d'utilisateur à utiliser au moment de l'authentification du client. La propriété <see cref="P:System.DirectoryServices.DirectoryEntry.Username" /> est initialisée à cette valeur.</param>
        <param name="password">Mot de passe à utiliser au moment de l'authentification du client. La propriété <see cref="P:System.DirectoryServices.DirectoryEntry.Password" /> est initialisée à cette valeur.</param>
        <param name="authenticationType">Une des valeurs de <see cref="T:System.DirectoryServices.AuthenticationTypes" />. La propriété <see cref="P:System.DirectoryServices.DirectoryEntry.AuthenticationType" /> est initialisée à cette valeur.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Path" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Username" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Password" />
        <altmember cref="T:System.DirectoryServices.AuthenticationTypes" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.AuthenticationType" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationType">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.AuthenticationTypes AuthenticationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DirectoryServices.AuthenticationTypes AuthenticationType" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.AuthenticationType" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationType As AuthenticationTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::AuthenticationTypes AuthenticationType { System::DirectoryServices::AuthenticationTypes get(); void set(System::DirectoryServices::AuthenticationTypes value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationType : System.DirectoryServices.AuthenticationTypes with get, set" Usage="System.DirectoryServices.DirectoryEntry.AuthenticationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSAuthenticationType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.AuthenticationTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type d'authentification à utiliser.</summary>
        <value>Une des valeurs de <see cref="T:System.DirectoryServices.AuthenticationTypes" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antérieures à [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], la valeur par défaut est <xref:System.DirectoryServices.AuthenticationTypes.None>. À partir de [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], la valeur par défaut est <xref:System.DirectoryServices.AuthenticationTypes.Secure>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.AuthenticationTypes" />
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntries Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntries Children" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As DirectoryEntries" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntries ^ Children { System::DirectoryServices::DirectoryEntries ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Children : System.DirectoryServices.DirectoryEntries" Usage="System.DirectoryServices.DirectoryEntry.Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSChildren")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntries</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les entrées enfants de ce nœud dans la hiérarchie des services de domaine Active Directory.</summary>
        <value>Objet <see cref="T:System.DirectoryServices.DirectoryEntries" /> contenant les entrées enfants de ce nœud dans la hiérarchie des services de domaine Active Directory.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les entrées enfants sont uniquement les enfants immédiats de ce nœud.  
  
 Cette propriété permet de rechercher, de récupérer ou de créer une entrée de répertoire dans la hiérarchie. Cette propriété est une collection qui, outre les fonctionnalités d’itération courantes, fournit une <xref:System.DirectoryServices.DirectoryEntries.Add%2A> méthode par le biais duquel vous ajoutez un nœud à la collection directement au-dessous du nœud parent auquel vous êtes actuellement lié. Lorsque vous ajoutez un nœud à la collection, vous devez spécifier un nom pour le nouveau nœud et le nom d’un modèle de schéma que vous souhaitez associer au nœud. Par exemple, vous souhaiterez éventuellement utiliser un schéma intitulé « Ordinateur » pour ajouter de nouveaux ordinateurs à la hiérarchie.  
  
> [!NOTE]
>  Par défaut, les modifications sont apportées localement à un cache. Une fois que vous modifiez ou ajoutez un nœud, vous devez appeler la <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> méthode pour valider vos modifications afin de les enregistrer à l’arborescence. Si vous appelez <xref:System.DirectoryServices.DirectoryEntry.RefreshCache> avant d’appeler <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, des modifications non validées au cache de propriétés seront perdues. Pour plus d’informations, consultez la <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> et <xref:System.DirectoryServices.DirectoryEntry.RefreshCache> méthodes et le <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> propriété.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour récupérer les entrées enfants.</permission>
        <altmember cref="T:System.DirectoryServices.DirectoryEntries" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="directoryEntry.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ferme l'objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> et libère les ressources système associées à ce composant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour libérer des ressources système non managées, sans attendre le garbage collection.  
  
 Après un appel à <xref:System.DirectoryServices.DirectoryEntry.Close%2A>, toutes les opérations sur les <xref:System.DirectoryServices.DirectoryEntry> peuvent lever des exceptions.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitChanges">
      <MemberSignature Language="C#" Value="public void CommitChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CommitChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CommitChanges();" />
      <MemberSignature Language="F#" Value="member this.CommitChanges : unit -&gt; unit" Usage="directoryEntry.CommitChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enregistre les modifications apportées à une entrée d'annuaire dans le magasin d'annuaires sous-jacent.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, les modifications apportées aux propriétés sont apportées localement à un cache, et à lire des valeurs de propriété sont mises en cache après que la première lecture. Pour plus d'informations, consultez <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>.  
  
 Modifications apportées au cache incluent des modifications apportées aux propriétés, ainsi que les appels à <xref:System.DirectoryServices.DirectoryEntries.Add%2A> (s’il s’agit de l’entrée nouvellement créée).  
  
> [!CAUTION]
>  Si vous appelez <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A> avant d’appeler <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, des modifications non validées au cache de propriétés seront perdues.  
  
## <a name="security"></a>Sécurité  
  
-   Utilisez la <xref:System.DirectoryServices.DirectoryServicesPermission> classe pour la lecture, écriture, suppression, modification et l’ajout à la hiérarchie des Services de domaine Active Directory. Énumération associée : <xref:System.DirectoryServices.DirectoryServicesPermissionAccess>.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour valider les modifications.</permission>
        <altmember cref="M:System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crée une copie de cette entrée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry CopyTo(class System.DirectoryServices.DirectoryEntry newParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (newParent As DirectoryEntry) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ CopyTo(System::DirectoryServices::DirectoryEntry ^ newParent);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.DirectoryServices.DirectoryEntry -&gt; System.DirectoryServices.DirectoryEntry" Usage="directoryEntry.CopyTo newParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
      </Parameters>
      <Docs>
        <param name="newParent">Nom unique de l'objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> qui sera le parent de la copie qui est créée.</param>
        <summary>Crée une copie de cette entrée en tant qu'enfant du parent spécifié.</summary>
        <returns>Objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> qui représente la copie de cette entrée comme enfant du nouveau parent.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> est `true`, appelez <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> sur le nouvel objet à rendre la copie permanente.  
  
 Le fournisseur LDAP Lightweight Directory Access Protocol () ne prend pas en charge la <xref:System.DirectoryServices.DirectoryEntry.CopyTo%28System.DirectoryServices.DirectoryEntry%29> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.DirectoryServices.DirectoryEntry" /> spécifié n'est pas un conteneur.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour effectuer une copie de l’objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> objet.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry CopyTo(class System.DirectoryServices.DirectoryEntry newParent, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (newParent As DirectoryEntry, newName As String) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ CopyTo(System::DirectoryServices::DirectoryEntry ^ newParent, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.DirectoryServices.DirectoryEntry * string -&gt; System.DirectoryServices.DirectoryEntry" Usage="directoryEntry.CopyTo (newParent, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newParent">Nom unique de l'objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> qui sera le parent de la copie qui est créée.</param>
        <param name="newName">Nom de la copie de cette entrée.</param>
        <summary>Crée une copie de cet objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> comme enfant de l'objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> parent spécifié, avec le nouveau nom indiqué.</summary>
        <returns>Copie, avec un nouveau nom, de cette entrée en tant qu'enfant du parent spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le fournisseur LDAP Lightweight Directory Access Protocol () ne prend pas en charge cette méthode.  
  
 Si <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> est `true`, appelez <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> sur le nouvel objet à rendre la copie permanente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> spécifié n'est pas un conteneur.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour effectuer une copie de l’entrée.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="DeleteTree">
      <MemberSignature Language="C#" Value="public void DeleteTree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteTree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.DeleteTree" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteTree ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteTree();" />
      <MemberSignature Language="F#" Value="member this.DeleteTree : unit -&gt; unit" Usage="directoryEntry.DeleteTree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime cette entrée et sa sous-arborescence entière de la hiérarchie des services de domaine Active Directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Des fournisseurs de système Active Directory Service Interfaces ADSI (), uniquement les accès protocole LDAP (Lightweight Directory) prend en charge cette opération.  
  
> [!CAUTION]
>  L’entrée et sa sous-arborescence entière sont supprimées de la hiérarchie des Services de domaine Active Directory.  
  
## <a name="security"></a>Sécurité  
  
-   Utilisez <xref:System.DirectoryServices.DirectoryServicesPermission> pour supprimer des entrées de la hiérarchie des Services de domaine Active Directory. Énumération associée : <xref:System.DirectoryServices.DirectoryServicesPermissionAccess?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.DirectoryServices.DirectoryEntry" /> spécifié n'est pas un conteneur.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour supprimer l’entrée et ses enfants.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="directoryEntry.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
        <summary>Libère les ressources, exceptée la mémoire, utilisées par <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée par le public <xref:System.ComponentModel.Component.Dispose%2A> (méthode) et le <xref:System.Object.Finalize%2A> (méthode). <xref:System.ComponentModel.Component.Dispose%2A> appelle la méthode protégée <xref:System.DirectoryServices.DirectoryEntry.Dispose%2A> méthode avec la `disposing` paramètre la valeur `true`. <xref:System.Object.Finalize%2A> appelle <xref:System.ComponentModel.Component.Dispose%2A> avec `disposing` la valeur `false`.  
  
 Lorsque le `disposing` paramètre est `true`, cette méthode libère toutes les ressources qui sont détenues par les objets managés par ce <xref:System.DirectoryServices.DirectoryEntry> références d’objet. Cette méthode appelle la méthode <xref:System.ComponentModel.Component.Dispose%2A> de chaque objet référencé.  
  
 Pour plus d’informations sur la <xref:System.ComponentModel.Component.Dispose%2A> et <xref:System.Object.Finalize%2A> méthodes, consultez [substitution de la méthode Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.ComponentModel.Component.Dispose" /> peut être appelée plusieurs fois par d’autres objets. Lors de la substitution de <see cref="M:System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)" />, veillez à ne pas référencer des objets qui ont été préalablement supprimés lors d'un appel précédent à <see cref="M:System.ComponentModel.Component.Dispose" />. Pour plus d’informations sur l’implémentation <see cref="M:System.ComponentModel.Component.Dispose" />, consultez [implémentation d’un Method](~/docs/standard/garbage-collection/implementing-dispose.md) de suppression.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Component.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Exists : string -&gt; bool" Usage="System.DirectoryServices.DirectoryEntry.Exists path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d’accès de l’entrée à vérifier.</param>
        <summary>Détermine si le chemin d’accès spécifié représente une entrée réelle dans le service d’annuaire.</summary>
        <returns>
          <see langword="true" /> si le chemin d'accès spécifié représente une entrée valide dans le service d'annuaire ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant prend un argument et détermine si le chemin d’accès correspond à un élément valide <xref:System.DirectoryServices.DirectoryEntry>.  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
' Determine whether the given path is correct for the DirectoryEntry.  
If DirectoryEntry.Exists(myADSPath) Then  
   Console.WriteLine("The path {0} is valid",myADSPath)  
Else  
   Console.WriteLine("The path {0} is invalid",myADSPath)  
End If  
  
```  
  
```csharp  
string myADSPath ="LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Determine whether the given path is correct for the DirectoryEntry.  
if (DirectoryEntry.Exists(myADSPath))  
{  
    Console.WriteLine("The path {0} is valid",myADSPath);  
}  
    else  
{  
    Console.WriteLine("The path {0} is invalid",myADSPath);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
// Determine whether the given path is correct for the DirectoryEntry.  
if (DirectoryEntry::Exists(myADSPath))   
{  
    Console::WriteLine("The path {0} is valid", myADSPath);  
}   
else   
{  
    Console::WriteLine("The path {0} is invalid", myADSPath);  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guid">
      <MemberSignature Language="C#" Value="public Guid Guid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Guid" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Guid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guid As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Guid { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.Guid : Guid" Usage="System.DirectoryServices.DirectoryEntry.Guid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSGuid")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le GUID de <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <value>Structure <see cref="T:System.Guid" /> qui représente le GUID de <see cref="T:System.DirectoryServices.DirectoryEntry" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lors de la liaison à un objet dans les Services de domaine Active Directory, utilisez le <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> et <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propriétés de la <xref:System.DirectoryServices.DirectoryEntry> classe. Cet exemple obtient le spécifié par l’utilisateur <xref:System.DirectoryServices.DirectoryEntry> et affiche son <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> et <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propriétés.  
  
```vb  
Dim myADSPath As [String] = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
  
' Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:" + myDirectoryEntry.Guid.ToString)  
Console.WriteLine("The Native GUID of the ADS" + "object:" + myDirectoryEntry.NativeGuid)  
  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:"+  
                  myDirectoryEntry.Guid);  
Console.WriteLine("The Native GUID of the ADS"+  
                  "object:"+myDirectoryEntry.NativeGuid);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console::WriteLine("The GUID of the ADS object: {0}", myDirectoryEntry->Guid);  
Console::WriteLine("The Native GUID of the ADS object: {0}",  
                   myDirectoryEntry->NativeGuid);  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (string methodName, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(string methodName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (methodName As String, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::String ^ methodName, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * obj[] -&gt; obj" Usage="directoryEntry.Invoke (methodName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="methodName">Nom de la méthode à appeler.</param>
        <param name="args">Tableau d'objets de type <see cref="T:System.Object" /> qui contient les arguments de la méthode à appeler.</param>
        <summary>Appelle une méthode sur l'objet des services de domaine Active Directory natif.</summary>
        <returns>Valeur de retour de la méthode appelée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la valeur de retour de la méthode native implémente l’interface IADs, correspondante <xref:System.DirectoryServices.DirectoryEntry> est retourné. Pour plus d’informations sur l’interface IADs, consultez la rubrique [IADs](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) dans MSDN Library à [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.DirectoryServicesCOMException">La méthode native a levé une exception <see cref="T:System.Runtime.InteropServices.COMException" />.</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">La méthode native a levé une exception <see cref="T:System.Reflection.TargetInvocationException" />. La propriété <see cref="P:System.Exception.InnerException" /> contient une exception <see cref="T:System.Runtime.InteropServices.COMException" /> qui contient des informations sur l'erreur qui s'est produite.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour appeler la méthode.</permission>
      </Docs>
    </Member>
    <Member MemberName="InvokeGet">
      <MemberSignature Language="C#" Value="public object InvokeGet (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeGet(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeGet (propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeGet(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.InvokeGet : string -&gt; obj" Usage="directoryEntry.InvokeGet propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nom de la propriété à obtenir.</param>
        <summary>Obtient une propriété à partir de l'objet des services de domaine Active Directory natif.</summary>
        <returns>Objet qui représente la propriété demandée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne doit pas être utilisée. Le <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> propriété doit être utilisée pour accéder aux propriétés de la <xref:System.DirectoryServices.DirectoryEntry> objet.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour obtenir la propriété de l’objet natif.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Properties" />
      </Docs>
    </Member>
    <Member MemberName="InvokeSet">
      <MemberSignature Language="C#" Value="public void InvokeSet (string propertyName, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeSet(string propertyName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeSet (propertyName As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeSet(System::String ^ propertyName, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.InvokeSet : string * obj[] -&gt; unit" Usage="directoryEntry.InvokeSet (propertyName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyName">Nom de la propriété à définir.</param>
        <param name="args">Objet des services de domaine Active Directory à définir.</param>
        <summary>Définit une propriété sur l'objet des services de domaine Active Directory natif.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne doit pas être utilisée. Le <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> propriété doit être utilisée pour accéder aux propriétés de la <xref:System.DirectoryServices.DirectoryEntry> objet.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour définir la propriété sur l’objet natif.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Properties" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Déplace ce <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.DirectoryServices.DirectoryEntry newParent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(class System.DirectoryServices.DirectoryEntry newParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (newParent As DirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::DirectoryServices::DirectoryEntry ^ newParent);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : System.DirectoryServices.DirectoryEntry -&gt; unit" Usage="directoryEntry.MoveTo newParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
      </Parameters>
      <Docs>
        <param name="newParent">Parent vers lequel déplacer cette entrée.</param>
        <summary>Déplace cet objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> vers le parent spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> est `true`, appelez le <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> méthode sur le nouvel objet à rendre le déplacement permanent.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.DirectoryServices.DirectoryEntry" /> spécifié n'est pas un conteneur.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour déplacer l’entrée.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.DirectoryServices.DirectoryEntry newParent, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(class System.DirectoryServices.DirectoryEntry newParent, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (newParent As DirectoryEntry, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::DirectoryServices::DirectoryEntry ^ newParent, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : System.DirectoryServices.DirectoryEntry * string -&gt; unit" Usage="directoryEntry.MoveTo (newParent, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newParent">Parent vers lequel déplacer cette entrée.</param>
        <param name="newName">Nouveau nom de cette entrée.</param>
        <summary>Déplace cet objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> vers le parent spécifié et modifie son nom en lui affectant la valeur spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> est `true`, appelez <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> sur le nouvel objet à rendre le déplacement permanent.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.DirectoryServices.DirectoryEntry" /> spécifié n'est pas un conteneur.</exception>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.DirectoryServices.DirectoryEntry.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de l'objet, tel que nommé dans le service d'annuaire sous-jacent.</summary>
        <value>Nom de l'objet, tel que nommé dans le service d'annuaire sous-jacent.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce nom, ainsi que <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A>, distingue cette entrée de ses frères et doit être unique parmi ses frères dans chaque conteneur.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.DirectoryServices.DirectoryEntry> pour le nœud dans les Services de domaine Active Directory. Il affiche ensuite le <xref:System.DirectoryServices.DirectoryEntry.Name%2A> et <xref:System.DirectoryServices.DirectoryEntry.Path%2A> propriétés de ses nœuds enfants.  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,  
           _DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
  
Console.WriteLine("DirectoryEntry Name :" + myDirectoryEntry.Name)  
Console.WriteLine(ControlChars.NewLine _  
        + "The child entries for this node in the Active Directory Domain Services hierarchy")  
  
Dim myDirectoryEntryChild As DirectoryEntry  
For Each myDirectoryEntryChild In  myDirectoryEntry.Children  
   Console.WriteLine(myDirectoryEntryChild.Path)  
Next myDirectoryEntryChild  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,  
             DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  
  
Console.WriteLine("DirectoryEntry Name :"+ myDirectoryEntry.Name);  
Console.WriteLine("\nThe child entries for this node "+  
   "in the Active Directory Domain Services hierarchy");  
  
foreach(DirectoryEntry myDirectoryEntryChild in  
   myDirectoryEntry.Children)  
{  
   Console.WriteLine(myDirectoryEntryChild.Path);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
  
Console::WriteLine("DirectoryEntry Name : {0}", myDirectoryEntry->Name);  
Console::WriteLine("\nThe child entries for this node in the Active Directory Domain Services hierarchy");  
  
Collections::IEnumerator^ myEnumerator = myDirectoryEntry->Children->GetEnumerator();  
while (myEnumerator->MoveNext())   
{  
    DirectoryEntry^ myDirectoryEntryChild = safe_cast<DirectoryEntry^>(myEnumerator->Current);  
    Console::WriteLine(myDirectoryEntryChild->Path);  
}  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour obtenir le nom.</permission>
      </Docs>
    </Member>
    <Member MemberName="NativeGuid">
      <MemberSignature Language="C#" Value="public string NativeGuid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeGuid" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.NativeGuid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeGuid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NativeGuid { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeGuid : string" Usage="System.DirectoryServices.DirectoryEntry.NativeGuid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSNativeGuid")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le GUID de <see cref="T:System.DirectoryServices.DirectoryEntry" />, tel que retourné par le fournisseur.</summary>
        <value>Structure <see cref="T:System.Guid" /> qui représente le GUID de <see cref="T:System.DirectoryServices.DirectoryEntry" />, tel que retourné par le fournisseur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propriété lors de la liaison d’un objet dans les Services de domaine Active Directory.  
  
> [!NOTE]
>  Le fournisseur LDAP Lightweight Directory Access Protocol () retourne l’identificateur global unique d’un <xref:System.DirectoryServices.DirectoryEntry> dans un format différent de celui Internet Information Services (IIS), serveur de répertoire Novell NetWare (NDS), les fournisseurs de Windows NT.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> et <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propriétés de la <xref:System.DirectoryServices.DirectoryEntry> classe. Cet exemple obtient le spécifié par l’utilisateur <xref:System.DirectoryServices.DirectoryEntry> et affiche son <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> et <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propriétés.  
  
```vb  
Dim myADSPath As [String] = "LDAP://onecity/CN=Users,  
             DC=onecity,DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
  
' Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:" + myDirectoryEntry.Guid.ToString)  
Console.WriteLine("The Native GUID of the ADS" + "object:" +   
             myDirectoryEntry.NativeGuid)  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,  
             DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:"+  
                  myDirectoryEntry.Guid);  
Console.WriteLine("The Native GUID of the ADS"+  
                  "object:"+myDirectoryEntry.NativeGuid);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console::WriteLine("The GUID of the ADS object: {0}", myDirectoryEntry->Guid));  
Console::WriteLine("The Native GUID of the ADS object: {0}",  
                   myDirectoryEntry->NativeGuid);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="NativeObject">
      <MemberSignature Language="C#" Value="public object NativeObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NativeObject" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.NativeObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NativeObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeObject : obj" Usage="System.DirectoryServices.DirectoryEntry.NativeObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSNativeObject")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet ADSI (Active Directory Service Interfaces) natif.</summary>
        <value>Objet ADSI natif.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété permet d’effectuer un cast de l’objet de Services de domaine Active Directory natif qui implémente l’interface IADs, lorsque vous souhaitez utiliser une interface COM. Pour plus d’informations sur l’interface IADs, consultez la rubrique [IADs](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) dans MSDN Library à [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp).  
  
 Cet objet est pour des scénarios avancés qui ne peut pas être effectuées avec la <xref:System.DirectoryServices?displayProperty=nameWithType> classes uniquement. Pour l’utiliser, vous devez importer une interface COM à partir de la famille des IAD, puis effectuer un cast de cette propriété sur cette interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectSecurity">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.ObjectSecurity" />
      <MemberSignature Language="VB.NET" Value="Public Property ObjectSecurity As ActiveDirectorySecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectorySecurity ^ ObjectSecurity { System::DirectoryServices::ActiveDirectorySecurity ^ get(); void set(System::DirectoryServices::ActiveDirectorySecurity ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ObjectSecurity : System.DirectoryServices.ActiveDirectorySecurity with get, set" Usage="System.DirectoryServices.DirectoryEntry.ObjectSecurity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSObjectSecurity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectorySecurity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le descripteur de sécurité de cette entrée.</summary>
        <value>Objet <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> qui représente le descripteur de sécurité de cette entrée d'annuaire.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" /> est effectué lorsqu’une application définit la <see cref="P:System.DirectoryServices.DirectoryEntry.ObjectSecurity" /> propriété, si la <see cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" /> propriété est <see langword="false" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntryConfiguration Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntryConfiguration Options" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As DirectoryEntryConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntryConfiguration ^ Options { System::DirectoryServices::DirectoryEntryConfiguration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.DirectoryServices.DirectoryEntryConfiguration" Usage="System.DirectoryServices.DirectoryEntry.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSOptions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntryConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les options spécifiques au fournisseur pour cette entrée.</summary>
        <value>Objet <see cref="T:System.DirectoryServices.DirectoryEntryConfiguration" /> qui contient les options spécifiques au fournisseur pour cette entrée.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour obtenir les options.</permission>
        <altmember cref="T:System.DirectoryServices.DirectoryEntryConfiguration" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntry Parent" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntry ^ Parent { System::DirectoryServices::DirectoryEntry ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.DirectoryServices.DirectoryEntry" Usage="System.DirectoryServices.DirectoryEntry.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSParent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le parent de cette entrée dans la hiérarchie des services de domaine Active Directory.</summary>
        <value>Objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> qui représente le parent de cette entrée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant recherche une donnée <xref:System.DirectoryServices.DirectoryEntry> et affiche le <xref:System.DirectoryServices.DirectoryEntry.Name%2A> et <xref:System.DirectoryServices.DirectoryEntry.Parent%2A> du résultat.  
  
```vb  
Dim myADSPath As String = _   
          "LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  
  
Console.WriteLine("Parent is :" + myDirectoryEntry.Parent.Path)  
  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
Console.WriteLine("Parent is :"+myDirectoryEntry.Parent.Path);  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
Console::WriteLine("Parent is :{0}", myDirectoryEntry->Parent->Path);  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour obtenir le parent.</permission>
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password {  void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Password : string" Usage="System.DirectoryServices.DirectoryEntry.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSPassword")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Définit le mot de passe à utiliser au moment de l'authentification du client.</summary>
        <value>Mot de passe à utiliser au moment de l'authentification du client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez définir le <xref:System.DirectoryServices.DirectoryEntry.Username%2A> et <xref:System.DirectoryServices.DirectoryEntry.Password%2A> propriétés pour spécifier d’autres informations d’identification permettant d’accéder aux informations dans les Services de domaine Active Directory. N’importe quel autre <xref:System.DirectoryServices.DirectoryEntry> objets récupérés à partir de cette instance (par exemple, via <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) est automatiquement créé avec les mêmes informations d’identification de remplacement.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DirectoryServices.DirectoryEntry.Username%2A> et <xref:System.DirectoryServices.DirectoryEntry.Password%2A> propriétés de la <xref:System.DirectoryServices.DirectoryEntry> classe. Cet exemple obtient le spécifié par l’utilisateur <xref:System.DirectoryServices.DirectoryEntry> et <xref:System.DirectoryServices.DirectoryEntry.Path%2A> de tous ses <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  
  
```vb  
Dim myADSPath As String = _  
      "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Create an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
myDirectoryEntry.Username = UserName  
myDirectoryEntry.Password = SecurelyStoredPassword  
  
' Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:")  
Dim myChildDirectoryEntry As DirectoryEntry  
For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
   Console.WriteLine(myChildDirectoryEntry.Path)  
Next myChildDirectoryEntry   
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,  
         DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  
myDirectoryEntry.Username = UserName;  
myDirectoryEntry.Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:");  
foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
   Console.WriteLine(myChildDirectoryEntry.Path);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
myDirectoryEntry->Username = UserName;  
myDirectoryEntry->Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console::WriteLine("The Child ADS objects are:");  
Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
while (myEnum->MoveNext())   
{  
    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>  
             (myEnum->Current);  
    Console::WriteLine(myChildDirectoryEntry->Path);  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Username" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.DirectoryServices.DirectoryEntry.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSPath")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès de ce <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <value>Chemin d'accès de cet objet <see cref="T:System.DirectoryServices.DirectoryEntry" />. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DirectoryServices.DirectoryEntry.Path%2A> propriété identifie de façon unique cette entrée dans un environnement réseau. Cette entrée peut toujours être récupérée à l’aide de ce <xref:System.DirectoryServices.DirectoryEntry.Path%2A>.  
  
 Définition de la <xref:System.DirectoryServices.DirectoryEntry.Path%2A> stocker les récupère une nouvelle entrée à partir du répertoire ; il ne modifie pas le chemin d’accès de l’entrée actuellement liée.  
  
 Les classes associées à la <xref:System.DirectoryServices.DirectoryEntry> composant peut être utilisé avec un des fournisseurs de services des Services de domaine Active Directory. Parmi les fournisseurs actuels sont WinNT, Novell NetWare Directory Service (NDS), Internet Information Services (IIS) et LDAP Lightweight Directory Access Protocol ().  
  
> [!NOTE]
>  La section de la <xref:System.DirectoryServices.DirectoryEntry.Path%2A> qui identifie le fournisseur (avant «  :// ») respecte la casse. Par exemple, « LDAP : / / » ou « WinNT : / / ».  
  
 La syntaxe pour le <xref:System.DirectoryServices.DirectoryEntry.Path%2A> propriété varie selon le fournisseur. Voici quelques scénarios courants :  
  
 Windows NT  
  
-   Se connecter à un groupe sur un ordinateur. Par exemple, « WinNT **://\<nom de domaine > /\<nom de l’ordinateur > /\<nom du groupe >**». Si vous vous connectez à un ordinateur local, « WinNT : / /**\<nom de l’ordinateur > /\<nom du groupe >**».  
  
-   Se connecter à un utilisateur sur un ordinateur. Par exemple, « WinNT : / /**\<nom de domaine > /\<nom de l’ordinateur > /\<nom d’utilisateur >**». Si vous vous connectez à un ordinateur local, « WinNT : / /**\<nom de l’ordinateur > /\<nom d’utilisateur >**».  
  
-   Se connecter à des services sur un ordinateur. Par exemple, « WinNT : / /**\<nom de domaine > /\<nom de l’ordinateur > /\<nom service >**». Si vous vous connectez à un ordinateur local, « WinNT : / /**\<nom de l’ordinateur > /\<nom service >**».  
  
-   Découvrir tous les domaines sur le réseau. Par exemple, « WinNT : « les domaines sont accessibles en énumérant les enfants de cette entrée.  
  
 LDAP  
  
-   Se connecter à un groupe dans un domaine. Par exemple, » LDAP://CN=\<nom du groupe >, CN =\<utilisateurs >, DC =\<composant de domaine >, DC =\<composant de domaine >,... ».  
  
-   Se connecter à un utilisateur dans un domaine. Par exemple, « LDAP://CN=\<nom d’utilisateur complet >, CN =\<utilisateurs >, DC =\<composant de domaine >, DC =\<composant de domaine >,... ».  
  
-   Se connecter aux ordinateurs dans un domaine. Par exemple, « LDAP://CN=\<nom de l’ordinateur >, CN =\<ordinateurs >, DC =\<composant de domaine >, DC =\<composant de domaine >,... ».  
  
 IIS  
  
-   Se connecter à un répertoire Web. Par exemple, « IIS://LocalHost/W3SVC/1/ROOT/\<nom du répertoire Web > ».  
  
 Pour lier au domaine actuel à l’aide de LDAP, utilisez le chemin d’accès « LDAP://RootDSE », puis obtenir le contexte d’appellation par défaut et lier de nouveau l’entrée. Exemple :  
  
```csharp  
String str = ent.Properties["defaultNamingContext"][0];  
DirectoryEntry domain = new DirectoryEntry("LDAP://" + str);  
```  
  
 Pour plus d’informations, consultez la documentation de votre fournisseur et la rubrique [à l’aide de Active Directory Service Interfaces](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/using_adsi.asp) dans MSDN Library à [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.PropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.PropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::PropertyCollection ^ Properties { System::DirectoryServices::PropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.DirectoryServices.PropertyCollection" Usage="System.DirectoryServices.DirectoryEntry.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSProperties")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les propriétés des services de domaine Active Directory pour cet objet <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <value>Objet <see cref="T:System.DirectoryServices.PropertyCollection" /> qui contient les propriétés définies sur cette entrée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la propriété n’est pas initialisée, <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> appelle l’interface ADSI [IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx) méthode pour récupérer la valeur à partir du cache. Si le cache sous-jacent n’a pas été chargé, [IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx) appelle implicitement [IADs::GetInfo](http://msdn2.microsoft.com/library/aa746349.aspx). Cette méthode charge les valeurs des propriétés prises en charge qui n’ont pas été définies dans le cache depuis le magasin d’annuaires sous-jacent. Les appels suivants à <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> récupère les valeurs de propriété dans le cache uniquement. Pour contrôler le chargement du cache de propriété, appelez <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>.  
  
 **Remarque** le <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> propriété n’est pas prise en charge pour une utilisation avec l’Extension du Client Active Directory (DSClient) pour [!INCLUDE[WinNt4Family](~/includes/winnt4family-md.md)].  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour récupérer les propriétés.</permission>
        <altmember cref="T:System.DirectoryServices.PropertyCollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RefreshCache">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Charge les valeurs de propriétés de cet objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> dans le cache de propriétés.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RefreshCache">
      <MemberSignature Language="C#" Value="public void RefreshCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshCache() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
      <MemberSignature Language="VB.NET" Value="Public Sub RefreshCache ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RefreshCache();" />
      <MemberSignature Language="F#" Value="member this.RefreshCache : unit -&gt; unit" Usage="directoryEntry.RefreshCache " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Charge les valeurs de propriétés de cet objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> dans le cache de propriétés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  Des modifications non validées au cache de propriétés seront perdues. Utilisez la <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> méthode pour conserver les modifications dans le magasin d’annuaires.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour actualiser le cache de propriétés.</permission>
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="RefreshCache">
      <MemberSignature Language="C#" Value="public void RefreshCache (string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshCache(string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub RefreshCache (propertyNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RefreshCache(cli::array &lt;System::String ^&gt; ^ propertyNames);" />
      <MemberSignature Language="F#" Value="member this.RefreshCache : string[] -&gt; unit" Usage="directoryEntry.RefreshCache propertyNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="propertyNames">Tableau de propriétés spécifiées.</param>
        <summary>Charge les valeurs des propriétés spécifiées dans le cache de propriétés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  Des modifications non validées au cache de propriétés seront perdues. Utilisez <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> pour conserver les modifications dans le magasin d’annuaires.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour actualiser le cache de propriétés.</permission>
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public void Rename (string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rename(string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Rename(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rename(System::String ^ newName);" />
      <MemberSignature Language="F#" Value="member this.Rename : string -&gt; unit" Usage="directoryEntry.Rename newName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newName">Nouveau nom de l'entrée.</param>
        <summary>Modifie le nom de cet objet <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Cela affectera également le chemin d’accès qui est utilisé pour faire référence à cette entrée.  
  
 Si <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> est `true`, veillez à appeler la <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> méthode sur le nouvel objet à rendre le déplacement permanent.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="SchemaClassName">
      <MemberSignature Language="C#" Value="public string SchemaClassName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SchemaClassName" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.SchemaClassName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaClassName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SchemaClassName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaClassName : string" Usage="System.DirectoryServices.DirectoryEntry.SchemaClassName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSSchemaClassName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de la classe de schéma pour cet objet <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <value>Nom de la classe de schéma pour cet objet <see cref="T:System.DirectoryServices.DirectoryEntry" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ceci est le même que le <xref:System.DirectoryServices.DirectoryEntry.Name%2A> propriété de la <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> propriété.  
  
 A <xref:System.DirectoryServices.DirectoryEntry> schéma de l’objet définit ses propriétés et méthodes.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A> et <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> propriétés de la <xref:System.DirectoryServices.DirectoryEntry> classe. Cet exemple obtient le spécifié par l’utilisateur <xref:System.DirectoryServices.DirectoryEntry> et tous ses enfants si la <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> est un objet conteneur.  Le <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> est un objet conteneur si les <xref:System.DirectoryServices.DirectoryEntry.Name%2A> de cet objet est « conteneur ».  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Creates an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  
  
' Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:" + myDirectoryEntry.SchemaClassName)  
  
' Gets the SchemaEntry of the ADS object.  
Dim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  
  
If String.Compare(mySchemaEntry.Name, "container") = 0 Then  
   Dim myChildDirectoryEntry As DirectoryEntry  
   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
      Console.WriteLine(myChildDirectoryEntry.Path)  
   Next  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:" + myDirectoryEntry.SchemaClassName);  
  
// Gets the SchemaEntry of the ADS object.  
DirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  
  
if (string.Compare(mySchemaEntry.Name, "container") == 0)  
{  
   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
      Console.WriteLine(myChildDirectoryEntry.Path);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console::WriteLine("Schema class name:{0}", myDirectoryEntry->SchemaClassName);  
  
// Gets the SchemaEntry of the ADS Object.  
DirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  
  
if (!String::Compare(mySchemaEntry->Name, "container"))   
{  
    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
    while (myEnum->MoveNext())   
    {  
        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  
        Console::WriteLine(myChildDirectoryEntry->Path);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour obtenir le nom de schéma.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.SchemaEntry" />
      </Docs>
    </Member>
    <Member MemberName="SchemaEntry">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry SchemaEntry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntry SchemaEntry" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.SchemaEntry" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaEntry As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntry ^ SchemaEntry { System::DirectoryServices::DirectoryEntry ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaEntry : System.DirectoryServices.DirectoryEntry" Usage="System.DirectoryServices.DirectoryEntry.SchemaEntry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSSchemaEntry")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet schéma de cette entrée.</summary>
        <value>Objet <see cref="T:System.DirectoryServices.DirectoryEntry" /> qui représente la classe de schéma de cette entrée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schéma d’une entrée détermine la liste de ses noms de propriétés obligatoires et facultatifs.  
  
 Vous pouvez utiliser cette propriété pour savoir quelles propriétés et méthodes sont disponibles sur l’objet associé.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A> et <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> propriétés de la <xref:System.DirectoryServices.DirectoryEntry> classe. Cet exemple obtient le spécifié par l’utilisateur <xref:System.DirectoryServices.DirectoryEntry> de l’objet et tous ses enfants si la <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> objet est un objet conteneur.  Le <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> est un objet conteneur si les <xref:System.DirectoryServices.DirectoryEntry.Name%2A> de cet objet est « conteneur ».  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Creates an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  
  
' Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:" + myDirectoryEntry.SchemaClassName)  
  
' Gets the SchemaEntry of the ADS object.  
Dim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  
  
If String.Compare(mySchemaEntry.Name, "container") = 0 Then  
   Dim myChildDirectoryEntry As DirectoryEntry  
   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
      Console.WriteLine(myChildDirectoryEntry.Path)  
   Next  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:"+myDirectoryEntry.SchemaClassName);  
  
// Gets the SchemaEntry of the ADS object.  
DirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  
  
if (string.Compare(mySchemaEntry.Name,"container") == 0)  
{  
   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
      Console.WriteLine(myChildDirectoryEntry.Path);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console::WriteLine("Schema class name:{0}", myDirectoryEntry->SchemaClassName);  
  
// Gets the SchemaEntry of the ADS Object*.  
DirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  
  
if (!String::Compare(mySchemaEntry->Name, S"container"))   
{  
    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
    while (myEnum->MoveNext())   
    {  
        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  
        Console::WriteLine(myChildDirectoryEntry->Path);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Pour obtenir l’objet de schéma.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.SchemaClassName" />
      </Docs>
    </Member>
    <Member MemberName="UsePropertyCache">
      <MemberSignature Language="C#" Value="public bool UsePropertyCache { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsePropertyCache" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
      <MemberSignature Language="VB.NET" Value="Public Property UsePropertyCache As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UsePropertyCache { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UsePropertyCache : bool with get, set" Usage="System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSUsePropertyCache")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le cache doit être validé après chaque opération.</summary>
        <value>
          <see langword="true" /> si le cache ne doit pas être validé après chaque opération ; sinon <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, les modifications apportées aux propriétés sont apportées localement à un cache, et à lire des valeurs de propriété sont mises en cache après que la première lecture. Lorsque le <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> propriété `true`, l’accès à la <xref:System.DirectoryServices.DirectoryEntry> propriétés de l’objet est plus rapide. Définir cette valeur sur `false` , le cache est validé après chaque opération.  
  
 Si le <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> propriété `true` et vous souhaitez valider mis en cache les modifications, appelez le <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> (méthode). Pour mettre à jour les valeurs dans le cache une fois que les modifications sont apportées à l’annuaire, appelez le <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A> (méthode).  
  
> [!CAUTION]
>  Si vous appelez <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A> avant d’appeler <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, des modifications non validées au cache de propriétés seront perdues.  
  
> [!NOTE]
>  Le fournisseur de Internet Information Services (IIS) ne prend pas en charge la validation du cache après chaque opération.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Username : string with get, set" Usage="System.DirectoryServices.DirectoryEntry.Username" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSUsername")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom d'utilisateur à utiliser pour l'authentification du client.</summary>
        <value>Nom d'utilisateur à utiliser au moment de l'authentification du client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez définir le <xref:System.DirectoryServices.DirectoryEntry.Username%2A> et <xref:System.DirectoryServices.DirectoryEntry.Password%2A> afin d’indiquer d’autres informations d’identification permettant d’accéder aux informations dans les Services de domaine Active Directory. N’importe quel autre <xref:System.DirectoryServices.DirectoryEntry> objets récupérés à partir de cette instance (par exemple, via <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) est automatiquement créé avec les mêmes informations d’identification de remplacement.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DirectoryServices.DirectoryEntry.Username%2A> et <xref:System.DirectoryServices.DirectoryEntry.Password%2A> propriétés de la <xref:System.DirectoryServices.DirectoryEntry> classe. Cet exemple obtient le spécifié par l’utilisateur <xref:System.DirectoryServices.DirectoryEntry> et <xref:System.DirectoryServices.DirectoryEntry.Path%2A> de tous ses <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  
  
```vb  
Dim myADSPath As String = _  
      "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Create an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
myDirectoryEntry.Username = UserName  
myDirectoryEntry.Password = SecurelyStoredPassword  
  
' Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:")  
Dim myChildDirectoryEntry As DirectoryEntry  
For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
   Console.WriteLine(myChildDirectoryEntry.Path)  
Next myChildDirectoryEntry  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  
myDirectoryEntry.Username = UserName;  
myDirectoryEntry.Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:");  
foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
   Console.WriteLine(myChildDirectoryEntry.Path);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = new DirectoryEntry(myADSPath);  
myDirectoryEntry->Username = UserName;  
myDirectoryEntry->Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console::WriteLine("The Child ADS objects are:");  
Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
while (myEnum->MoveNext())   
{  
    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  
    Console::WriteLine(myChildDirectoryEntry->Path);  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Password" />
      </Docs>
    </Member>
  </Members>
</Type>