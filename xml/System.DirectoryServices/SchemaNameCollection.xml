<Type Name="SchemaNameCollection" FullName="System.DirectoryServices.SchemaNameCollection">
  <TypeSignature Language="C#" Value="public class SchemaNameCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SchemaNameCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.SchemaNameCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class SchemaNameCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class SchemaNameCollection : System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="2cd53-101">Contient une liste des noms de schémas que la propriété <see cref="P:System.DirectoryServices.DirectoryEntries.SchemaFilter" /> d'un objet <see cref="T:System.DirectoryServices.DirectoryEntries" /> peut utiliser.</span><span class="sxs-lookup"><span data-stu-id="2cd53-101">Contains a list of the schema names that the <see cref="P:System.DirectoryServices.DirectoryEntries.SchemaFilter" /> property of a <see cref="T:System.DirectoryServices.DirectoryEntries" /> object can use.</span></span></summary>
    <remarks>To be added.</remarks>
    <altmember cref="N:System.DirectoryServices" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cd53-102">Nom de schéma à ajouter à cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-102">The schema name to add to this collection.</span></span></param>
        <summary><span data-ttu-id="2cd53-103">Ajoute un nom de schéma spécifié à cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-103">Appends a specified schema name to this collection.</span></span></summary>
        <returns><span data-ttu-id="2cd53-104">Index de base zéro de la valeur de propriété spécifiée.</span><span class="sxs-lookup"><span data-stu-id="2cd53-104">The zero-based index of the specified property value.</span></span> <span data-ttu-id="2cd53-105">Si l'objet est introuvable, la valeur de retour est -1.</span><span class="sxs-lookup"><span data-stu-id="2cd53-105">If the object is not found, the return value is -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.DirectoryServices.SchemaNameCollection value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.DirectoryServices.SchemaNameCollection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As SchemaNameCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::DirectoryServices::SchemaNameCollection ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DirectoryServices.SchemaNameCollection" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cd53-106"><see cref="T:System.DirectoryServices.SchemaNameCollection" /> contenant les noms de schémas à ajouter.</span><span class="sxs-lookup"><span data-stu-id="2cd53-106">A <see cref="T:System.DirectoryServices.SchemaNameCollection" /> that contains the schema names to add.</span></span></param>
        <summary><span data-ttu-id="2cd53-107">Ajoute un ensemble de noms de schéma spécifiés à cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-107">Appends a set of specified schema names to this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cd53-108">Tableau de type <see cref="T:System.String" /> qui contient les noms de schémas à ajouter.</span><span class="sxs-lookup"><span data-stu-id="2cd53-108">An array of type <see cref="T:System.String" /> that contains the schema names to add.</span></span></param>
        <summary><span data-ttu-id="2cd53-109">Ajoute un ensemble de noms de schéma spécifiés à cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-109">Appends a set of specified schema names to this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cd53-110">Supprime tous les objets de cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-110">Removes all objects from this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cd53-111">Nom de schéma à rechercher.</span><span class="sxs-lookup"><span data-stu-id="2cd53-111">The schema name to search for.</span></span></param>
        <summary><span data-ttu-id="2cd53-112">Détermine si cette collection contient un nom de schéma spécifié.</span><span class="sxs-lookup"><span data-stu-id="2cd53-112">Determines whether this collection contains a specified schema name.</span></span></summary>
        <returns><span data-ttu-id="2cd53-113">La valeur de retour est <see langword="true" /> si la propriété spécifiée appartient à cette collection ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2cd53-113">The return value is <see langword="true" /> if the specified property belongs to this collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (string[] stringArray, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(string[] stringArray, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (stringArray As String(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::String ^&gt; ^ stringArray, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArray" Type="System.String[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stringArray"><span data-ttu-id="2cd53-114">Tableau de type <see cref="T:System.String" /> recevant les noms de schémas de cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-114">An array of type <see cref="T:System.String" /> that receives this collection's schema names.</span></span></param>
        <param name="index"><span data-ttu-id="2cd53-115">Index de tableau de base zéro à partir duquel commencer la copie des noms de schémas.</span><span class="sxs-lookup"><span data-stu-id="2cd53-115">The zero-based array index at which to begin copying the schema names.</span></span></param>
        <summary><span data-ttu-id="2cd53-116">Copie les noms de schémas de cette collection dans un tableau, en commençant à un index particulier du tableau.</span><span class="sxs-lookup"><span data-stu-id="2cd53-116">Copies the schema names from this collection to an array, starting at a particular index of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cd53-117">La propriété <see cref="P:System.DirectoryServices.SchemaNameCollection.Count" /> obtient le nombre d'objets de cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-117">The <see cref="P:System.DirectoryServices.SchemaNameCollection.Count" /> property gets the number of objects in this collection.</span></span></summary>
        <value><span data-ttu-id="2cd53-118">Nombre d'objets de cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-118">The number of objects in this collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cd53-119">Retourne un énumérateur que vous pouvez utiliser pour itérer au sein de cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-119">Returns an enumerator that you can use to iterate through this collection.</span></span></summary>
        <returns><span data-ttu-id="2cd53-120">Énumérateur que vous pouvez utiliser pour itérer au sein de cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-120">An enumerator that you can used to iterate through this collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cd53-121">Nom de schéma à rechercher.</span><span class="sxs-lookup"><span data-stu-id="2cd53-121">The schema name to search for.</span></span></param>
        <summary><span data-ttu-id="2cd53-122">Détermine l'index d'un nom de schéma spécifié dans cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-122">Determines the index of a specified schema name in this collection.</span></span></summary>
        <returns><span data-ttu-id="2cd53-123">Index de base zéro du nom de schéma spécifié, ou -1 si le nom de schéma est introuvable dans la collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-123">The zero-based index of the specified schema name, or -1 if the schema name was not found in the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2cd53-124">Index de base zéro dans la collection auquel insérer le nom de schéma.</span><span class="sxs-lookup"><span data-stu-id="2cd53-124">The zero-based index into the collection at which to insert the schema name.</span></span></param>
        <param name="value"><span data-ttu-id="2cd53-125">Nom de schéma à insérer dans cette collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-125">The schema name to insert into this collection.</span></span></param>
        <summary><span data-ttu-id="2cd53-126">Insère un nom de schéma dans cette collection, à un index spécifié.</span><span class="sxs-lookup"><span data-stu-id="2cd53-126">Inserts a schema name into this collection at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cd53-127">Si le `index` paramètre est égal au nombre d’éléments dans la collection, cette méthode ajoute la valeur à la fin de la collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-127">If the `index` parameter equals the number of items in the collection, this method appends the value to the end of the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ default[int] { System::String ^ get(int index); void set(int index, System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2cd53-128">Index de base zéro dans la collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-128">The zero-based index into the collection.</span></span></param>
        <summary><span data-ttu-id="2cd53-129">Obtient ou définit l'objet existant au niveau de l'index spécifié.</span><span class="sxs-lookup"><span data-stu-id="2cd53-129">Gets or sets the object that exists at a specified index.</span></span></summary>
        <value><span data-ttu-id="2cd53-130">Objet qui existe à l'index spécifié.</span><span class="sxs-lookup"><span data-stu-id="2cd53-130">The object that exists at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cd53-131">En C#, cette propriété est l'indexeur correspondant à la classe <xref:System.DirectoryServices.SchemaNameCollection>.</span><span class="sxs-lookup"><span data-stu-id="2cd53-131">In C#, this property is the indexer for the <xref:System.DirectoryServices.SchemaNameCollection> class.</span></span>  
  
 <span data-ttu-id="2cd53-132">En JScript, vous pouvez utiliser les propriétés indexées par défaut définies par un type, mais vous ne pouvez pas définir les vôtres explicitement.</span><span class="sxs-lookup"><span data-stu-id="2cd53-132">In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own.</span></span> <span data-ttu-id="2cd53-133">Toutefois, la spécification de l’attribut expando sur une classe automatiquement fournit une valeur par défaut dont le type est l’objet et le type d’index est le propriété indexée <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="2cd53-133">However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and whose index type is <xref:System.String>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cd53-134">Nom de schéma à supprimer.</span><span class="sxs-lookup"><span data-stu-id="2cd53-134">The schema name to remove.</span></span></param>
        <summary><span data-ttu-id="2cd53-135">Supprime de cette collection un nom de schéma spécifié.</span><span class="sxs-lookup"><span data-stu-id="2cd53-135">Removes a specified schema name from this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2cd53-136">Index de base zéro du nom de schéma à supprimer.</span><span class="sxs-lookup"><span data-stu-id="2cd53-136">The zero-based index of the schema name to remove.</span></span></param>
        <summary><span data-ttu-id="2cd53-137">Supprime de cette collection le nom de schéma à un index spécifié.</span><span class="sxs-lookup"><span data-stu-id="2cd53-137">Removes the schema name that is at a specified index from this collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="2cd53-138">L'index de base zéro est soit inférieur à zéro, soit égal à la taille de la collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-138">The zero-based index is either less than zero or equal to the size of the collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2cd53-139"><see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="2cd53-139">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="2cd53-140"><see cref="T:System.Array" /> doit avoir une indexation de base zéro.</span><span class="sxs-lookup"><span data-stu-id="2cd53-140">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="2cd53-141">Index de base zéro dans un <c>tableau</c> auquel commencer la copie.</span><span class="sxs-lookup"><span data-stu-id="2cd53-141">The zero-based index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="2cd53-142">Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</span><span class="sxs-lookup"><span data-stu-id="2cd53-142">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2cd53-143"><paramref name="array" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2cd53-143"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2cd53-144"><paramref name="index" /> est inférieur à zéro.</span><span class="sxs-lookup"><span data-stu-id="2cd53-144"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2cd53-145"><paramref name="array" /> est multidimensionnel.</span><span class="sxs-lookup"><span data-stu-id="2cd53-145"><paramref name="array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="2cd53-146">- ou -</span><span class="sxs-lookup"><span data-stu-id="2cd53-146">-or-</span></span>  
  
 <span data-ttu-id="2cd53-147">Le nombre d’éléments dans le <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</span><span class="sxs-lookup"><span data-stu-id="2cd53-147">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="2cd53-148">Le type du <see cref="T:System.Collections.ICollection" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</span><span class="sxs-lookup"><span data-stu-id="2cd53-148">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cd53-149">Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</span><span class="sxs-lookup"><span data-stu-id="2cd53-149">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value>
          <span data-ttu-id="2cd53-150"><see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2cd53-150"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cd53-151"><xref:System.Collections.ICollection.SyncRoot%2A> retourne un objet qui peut être utilisé pour synchroniser l'accès à <xref:System.Collections.ICollection>.</span><span class="sxs-lookup"><span data-stu-id="2cd53-151"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="2cd53-152">Collection de la plupart des classes dans le <xref:System.Collections?displayProperty=nameWithType> espace de noms implémentent également une méthode synchronisée qui fournit un wrapper synchronisé autour de la collection sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="2cd53-152">Most collection classes in the <xref:System.Collections?displayProperty=nameWithType> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.</span></span>  
  
 <span data-ttu-id="2cd53-153">L’énumération d’une collection n’est intrinsèquement pas une procédure thread-safe.</span><span class="sxs-lookup"><span data-stu-id="2cd53-153">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="2cd53-154">Même lorsqu'une collection est synchronisée, les autres threads peuvent toujours la modifier, ce qui entraîne la levée d'une exception par l'énumérateur.</span><span class="sxs-lookup"><span data-stu-id="2cd53-154">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="2cd53-155">Pour garantir la sécurité des threads au cours de l’énumération, vous pouvez verrouiller la collection pendant l’ensemble de l’énumération ou bien intercepter les exceptions résultant des modifications apportées par les autres threads.</span><span class="sxs-lookup"><span data-stu-id="2cd53-155">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="2cd53-156">(Visual Basic, c#)</span><span class="sxs-lookup"><span data-stu-id="2cd53-156">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="2cd53-157">L’exemple suivant montre comment verrouiller la collection à l’aide de la <xref:System.Collections.ICollection.SyncRoot%2A> pendant l’énumération entière :</span><span class="sxs-lookup"><span data-stu-id="2cd53-157">The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
```csharp  
ICollection myCollection = new ICollection();  
  lock(myCollection.SyncRoot) {  
  foreach (Object item in myCollection) {  
  // Insert your code here.  
  }  
 }  
```  
  
```vb  
Dim myCollection As New ICollection()  
 Dim item As Object  
 SyncLock myCollection.SyncRoot  
  For Each item In myCollection  
  ' Insert your code here.  
  Next item  
 End SyncLock  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cd53-158">Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="2cd53-158">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="2cd53-159">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="2cd53-159">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cd53-160">Pour les collections dont le magasin n’est pas disponible publiquement, l’implémentation attendue est de retourner l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="2cd53-160">For collections with an underlying store is not publicly available, the expected implementation is to return the current instance.</span></span> <span data-ttu-id="2cd53-161">Notez que le pointeur vers l’instance actuelle peut ne pas suffire pour les collections qui renvoient à d’autres collections ; celles-ci doivent retourner la collection sous-jacente `SyncRoot` propriété.</span><span class="sxs-lookup"><span data-stu-id="2cd53-161">Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.</span></span>  
  
 <span data-ttu-id="2cd53-162">La plupart des classes de collection dans l'espace de noms <xref:System.Collections?displayProperty=nameWithType> implémentent également une méthode `Synchronized` qui fournit un wrapper synchronisé autour de la collection sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="2cd53-162">Most collection classes in the <xref:System.Collections?displayProperty=nameWithType> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection.</span></span> <span data-ttu-id="2cd53-163">Cependant, les classes dérivées peuvent produire leur propre version synchronisée de la collection à l'aide de la propriété <xref:System.Collections.ICollection.SyncRoot%2A>.</span><span class="sxs-lookup"><span data-stu-id="2cd53-163">However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span> <span data-ttu-id="2cd53-164">Le code de synchronisation doit effectuer les opérations sur les <xref:System.Collections.ICollection.SyncRoot%2A> de la collection, et non directement sur la collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-164">The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection.</span></span> <span data-ttu-id="2cd53-165">Cela garantit un bon fonctionnement des collections dérivées d'autres objets.</span><span class="sxs-lookup"><span data-stu-id="2cd53-165">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="2cd53-166">Plus particulièrement, la synchronisation est assurée avec les autres threads qui pourraient modifier simultanément l’instance de la collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-166">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.</span></span>  
  
 <span data-ttu-id="2cd53-167">En l’absence d’un `Synchronized` méthode sur une collection, l’utilisation attendue pour <xref:System.Collections.ICollection.SyncRoot%2A> ressemble à ceci :</span><span class="sxs-lookup"><span data-stu-id="2cd53-167">In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:</span></span>  
  
```csharp  
ICollection MyCollection =...  
 lock(MyCollection.SyncRoot) {  
  // Some operation on the collection, which is now thread safe.  
 }  
```  
  
```vb  
Dim myCollection as New ICollection()  
 SyncLock myCollection.SyncRoot  
  ' Some operation on the collection, which is now thread safe.  
 End SyncLock  
```  
  
 <span data-ttu-id="2cd53-168">L’énumération d’une collection n’est intrinsèquement pas une procédure thread-safe.</span><span class="sxs-lookup"><span data-stu-id="2cd53-168">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="2cd53-169">Même lorsqu'une collection est synchronisée, les autres threads peuvent toujours la modifier, ce qui entraîne la levée d'une exception par l'énumérateur.</span><span class="sxs-lookup"><span data-stu-id="2cd53-169">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="2cd53-170">Pour garantir la sécurité des threads au cours de l’énumération, vous pouvez verrouiller la collection pendant l’ensemble de l’énumération ou bien intercepter les exceptions résultant des modifications apportées par les autres threads.</span><span class="sxs-lookup"><span data-stu-id="2cd53-170">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="2cd53-171">(Visual Basic, c#)</span><span class="sxs-lookup"><span data-stu-id="2cd53-171">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="2cd53-172">L’exemple suivant montre comment verrouiller la collection à l’aide de la <xref:System.Collections.ICollection.SyncRoot%2A> pendant l’énumération entière :</span><span class="sxs-lookup"><span data-stu-id="2cd53-172">The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
```csharp  
ICollection myCollection = new ICollection();  
 lock(myCollection.SyncRoot) {  
  foreach (Object item in myCollection) {  
  // Insert your code here.  
  }  
 }  
```  
  
```vb  
Dim myCollection As New ICollection()  
 Dim item As Object  
 SyncLock myCollection.SyncRoot  
  For Each item In myCollection  
  ' Insert your code here.  
  Next item  
 End SyncLock  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cd53-173">Élément à ajouter à la liste.</span><span class="sxs-lookup"><span data-stu-id="2cd53-173">The item to add to the list.</span></span></param>
        <summary><span data-ttu-id="2cd53-174">Ajoute un élément à la liste.</span><span class="sxs-lookup"><span data-stu-id="2cd53-174">Adds an item to the list.</span></span></summary>
        <returns><span data-ttu-id="2cd53-175">Position à laquelle le nouvel élément a été inséré.</span><span class="sxs-lookup"><span data-stu-id="2cd53-175">The position into which the new item was inserted.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cd53-176">Valeur à localiser dans la liste.</span><span class="sxs-lookup"><span data-stu-id="2cd53-176">The value to locate in the list.</span></span></param>
        <summary><span data-ttu-id="2cd53-177">Détermine si la liste contient une valeur spécifiée.</span><span class="sxs-lookup"><span data-stu-id="2cd53-177">Determines whether the list contains a specified value.</span></span></summary>
        <returns>
          <span data-ttu-id="2cd53-178"><see langword="true" /> si la valeur existe dans la liste ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2cd53-178"><see langword="true" /> if the value is found in the list, otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cd53-179">À compter de .NET Framework 2.0, cette méthode utilise égal CompareTo les méthodes et des objets dans la collection pour déterminer quel élément existe.</span><span class="sxs-lookup"><span data-stu-id="2cd53-179">Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists.</span></span> <span data-ttu-id="2cd53-180">Dans les versions antérieures du .NET Framework, cette détermination était effectuée à l’aide de Equals et CompareTo méthodes du paramètre d’article sur les objets dans la collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-180">In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cd53-181">Élément à situer dans la liste.</span><span class="sxs-lookup"><span data-stu-id="2cd53-181">The item to locate in the list.</span></span></param>
        <summary><span data-ttu-id="2cd53-182">Détermine l'index d'un élément spécifié dans la liste.</span><span class="sxs-lookup"><span data-stu-id="2cd53-182">Determines the index of a specified item in the list.</span></span></summary>
        <returns><span data-ttu-id="2cd53-183">Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</span><span class="sxs-lookup"><span data-stu-id="2cd53-183">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cd53-184">À compter de .NET Framework 2.0, cette méthode utilise égal CompareTo les méthodes et des objets dans la collection pour déterminer quel élément existe.</span><span class="sxs-lookup"><span data-stu-id="2cd53-184">Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists.</span></span> <span data-ttu-id="2cd53-185">Dans les versions antérieures du .NET Framework, cette détermination était effectuée à l’aide de Equals et CompareTo méthodes du paramètre d’article sur les objets dans la collection.</span><span class="sxs-lookup"><span data-stu-id="2cd53-185">In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2cd53-186">Index de base zéro auquel la valeur doit être insérée.</span><span class="sxs-lookup"><span data-stu-id="2cd53-186">The zero-based index at which value should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="2cd53-187">Élément à insérer dans la liste.</span><span class="sxs-lookup"><span data-stu-id="2cd53-187">The item to insert into the list.</span></span></param>
        <summary><span data-ttu-id="2cd53-188">Insère un élément dans la liste à l’index spécifié.</span><span class="sxs-lookup"><span data-stu-id="2cd53-188">Inserts an item to the list at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cd53-189">Si `index` égale le nombre d’éléments dans la liste, puis *valeur* est ajouté à la fin.</span><span class="sxs-lookup"><span data-stu-id="2cd53-189">If `index` equals the number of items in the list, then *value* is appended to the end.</span></span>  
  
 <span data-ttu-id="2cd53-190">Dans des collections d’éléments contigus, telles que les listes, les éléments qui suivent l’élément supprimé remontent pour occuper l’espace libéré.</span><span class="sxs-lookup"><span data-stu-id="2cd53-190">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="2cd53-191">Si la collection est indexée, les index des éléments déplacés sont également mis à jour.</span><span class="sxs-lookup"><span data-stu-id="2cd53-191">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cd53-192">Obtient une valeur indiquant si <see cref="T:System.Collections.IList" /> est de taille fixe.</span><span class="sxs-lookup"><span data-stu-id="2cd53-192">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value>
          <span data-ttu-id="2cd53-193"><see langword="true" /> si <see cref="T:System.Collections.IList" /> est de taille fixe ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2cd53-193"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cd53-194">Une collection de taille fixe ne permet pas l’ajout ou la suppression d’éléments après sa création, mais permet la modification des éléments existants.</span><span class="sxs-lookup"><span data-stu-id="2cd53-194">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cd53-195">Obtient une valeur indiquant si <see cref="T:System.Collections.IList" /> est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="2cd53-195">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span></span></summary>
        <value>
          <span data-ttu-id="2cd53-196"><see langword="true" /> si <see cref="T:System.Collections.IList" /> est en lecture seule ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2cd53-196"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cd53-197">Une collection en lecture seule n’autorise pas l’ajout, la suppression ou la modification d’éléments après sa création.</span><span class="sxs-lookup"><span data-stu-id="2cd53-197">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2cd53-198">Index de base zéro de l'élément à obtenir ou à définir.</span><span class="sxs-lookup"><span data-stu-id="2cd53-198">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="2cd53-199">Obtient ou définit l'élément au niveau de l'index spécifié.</span><span class="sxs-lookup"><span data-stu-id="2cd53-199">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="2cd53-200">Élément au niveau de l'index spécifié.</span><span class="sxs-lookup"><span data-stu-id="2cd53-200">The element at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cd53-201">Cette propriété permet d'accéder à un élément spécifique de la collection à l'aide de la syntaxe suivante : `myCollection[index]`.</span><span class="sxs-lookup"><span data-stu-id="2cd53-201">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2cd53-202"><paramref name="index" /> n'est pas un index valide dans <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="2cd53-202"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2cd53-203">La propriété est définie et <see cref="T:System.Collections.IList" /> est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="2cd53-203">The property is set and the <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cd53-204">Valeur <c>value</c> à supprimer de la liste.</span><span class="sxs-lookup"><span data-stu-id="2cd53-204">The <c>value</c> to remove from the list.</span></span></param>
        <summary><span data-ttu-id="2cd53-205">Supprime la première occurrence d'un <paramref name="value" /> spécifique de la liste.</span><span class="sxs-lookup"><span data-stu-id="2cd53-205">Removes the first occurrence of a specific <paramref name="value" /> from the list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cd53-206">Dans des collections d’éléments contigus, telles que les listes, les éléments qui suivent l’élément supprimé remontent pour occuper l’espace libéré.</span><span class="sxs-lookup"><span data-stu-id="2cd53-206">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="2cd53-207">Si la collection est indexée, les index des éléments déplacés sont également mis à jour.</span><span class="sxs-lookup"><span data-stu-id="2cd53-207">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>