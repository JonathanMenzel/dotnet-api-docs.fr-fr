<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="28c37f44bfb30eb2dcec7a72634b22bd36550b6c" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51868179" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <TypeSignature Language="F#" Value="type IInstanceContextProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implémentez pour participer à la création ou à la sélection d'un objet <see cref="T:System.ServiceModel.InstanceContext" />, en particulier pour activer des sessions partagées.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez l'interface <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> pour fournir l'objet <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> approprié au système. En général, cette interface est implémentée pour prendre en charge les sessions partagées, activer le regroupement d'instances de service, contrôler les durées de vie d'instances de service ou regrouper des contextes parmi des clients.  
  
 Par exemple, pour implémenter le partage, insérez un <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> personnalisé pour décider quelle session ou appel d'un client est associé à quel objet <xref:System.ServiceModel.InstanceContext>. Pour obtenir un exemple qui illustre le partage de contextes d’instance, consultez [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
> [!NOTE]
>  Quand un <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> est inséré dans Windows Communication Foundation (WCF), la propriété normale qui contrôle la création de <xref:System.ServiceModel.InstanceContext> objets (la <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> propriété) n’est plus vérifiée et n’a aucun effet.  
  
 Un mécanisme plus générique grâce auquel vous pouvez initialiser des objets <xref:System.ServiceModel.InstanceContext> une fois créés (par exemple, pour attacher des extensions personnalisées à chaque <xref:System.ServiceModel.InstanceContext>) est <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member GetExistingInstanceContext : System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; System.ServiceModel.InstanceContext" Usage="iInstanceContextProvider.GetExistingInstanceContext (message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message">Message entrant.</param>
        <param name="channel">Canal qui a reçu le message.</param>
        <summary>Appelé à la réception d'un nouveau message.</summary>
        <returns>Objet <see cref="T:System.ServiceModel.InstanceContext" /> utilisé pour traiter le message ; retournez <see langword="null" /> pour demander à WCF de créer un objet <see cref="T:System.ServiceModel.InstanceContext" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> est appelée à la réception d'un message. Retournez l'objet <xref:System.ServiceModel.InstanceContext> que vous souhaitez pour traiter le message, ou `null`. Dans le cas de `null`, WCF crée un nouveau <xref:System.ServiceModel.InstanceContext> objet pour le message, puis appelle le <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> (méthode).  
  
 Si vous retournez `null`, le nouvel objet <xref:System.ServiceModel.InstanceContext> parcoure le système de limitation et incrémente le compte de <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member InitializeInstanceContext : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; unit" Usage="iInstanceContextProvider.InitializeInstanceContext (instanceContext, message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Nouvel objet <see cref="T:System.ServiceModel.InstanceContext" /> .</param>
        <param name="message">Message entrant.</param>
        <param name="channel">Canal qui a reçu le message.</param>
        <summary>Appelée lorsque la valeur <see langword="null" /> est retournée par la méthode <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> est appelée lorsque <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> retourne la valeur `null` et qu'un nouvel objet <xref:System.ServiceModel.InstanceContext> est créé. Cette méthode est appelée pour vous signaler qu'un <xref:System.ServiceModel.InstanceContext> a été créé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member IsIdle : System.ServiceModel.InstanceContext -&gt; bool" Usage="iInstanceContextProvider.IsIdle instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Objet <see cref="T:System.ServiceModel.InstanceContext" /> considéré comme inactif.</param>
        <summary>Appelée lorsque toutes les activités <see cref="T:System.ServiceModel.InstanceContext" /> sont terminées pour permettre aux implémenteurs d'empêcher le <see cref="T:System.ServiceModel.InstanceContext" /> d'être recyclé.</summary>
        <returns><see langword="true" /> si Windows Communication Foundation (WCF) doit fermer et recycler l’objet <see cref="T:System.ServiceModel.InstanceContext" /> et ajuster la valeur de <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /> ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> est appelé lorsque WCF va fermer et recycler inactif <xref:System.ServiceModel.InstanceContext> objet afin que vous puissiez informer l’exécution s’il faut continuer ainsi.  
  
 Pour obtenir un exemple qui illustre le partage de contextes d’instance, consultez [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member NotifyIdle : System.ServiceModel.Dispatcher.InstanceContextIdleCallback * System.ServiceModel.InstanceContext -&gt; unit" Usage="iInstanceContextProvider.NotifyIdle (callback, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback">Objet <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> qui notifie WCF lorsque l’objet <see cref="T:System.ServiceModel.InstanceContext" /> est sur le point d'être fermé et recyclé.</param>
        <param name="instanceContext"><see cref="T:System.ServiceModel.InstanceContext" /> actuel.</param>
        <summary>Appelée lorsque la méthode <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> retourne <see langword="false" /> pour permettre aux implémenteurs de fournir un rappel pour notifier WCF lorsque l’objet <see cref="T:System.ServiceModel.InstanceContext" /> est terminé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> méthode est appelée lorsque le <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> retourne de la méthode `false` afin de pouvoir fournir WCF avec un <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> que vous utilisez pour informer le runtime de l’objet qui le <xref:System.ServiceModel.InstanceContext> a fini son travail. Lorsque le <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> objet notifie l’exécution qui le <xref:System.ServiceModel.InstanceContext> a terminé son travail, les appels WCF <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> une fois encore. Ce cycle se poursuit jusqu'à ce que <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> retourne `true` et que le contexte soit fermé et recyclé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>