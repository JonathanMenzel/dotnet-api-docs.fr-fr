<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IInstanceProvider.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5991c605f5d41dce095e638fa08e8238060345dba.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">991c605f5d41dce095e638fa08e8238060345dba</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</source>
          <target state="translated">Déclare des méthodes qui fournissent un objet de service ou recyclent un objet de service pour un service Windows Communication Foundation (WCF).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface to control the creation and recycling of service objects when one is requested or disposed by an <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object.</source>
          <target state="translated">Implémentez l'interface <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> pour contrôler la création et le recyclage d'objets de service en cas de demande ou d'élimination par un objet <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Once the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface is implemented, you must assign your custom instance provider object to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt;</ph> property using either an endpoint behavior (a <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph> object) or a contract behavior (a <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> object).</source>
          <target state="translated">Une fois l'interface <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> implémentée, vous devez assigner votre objet de fournisseur d'instances personnalisé à la propriété <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt;</ph> à l'aide d'un comportement de point de terminaison (objet <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph>) ou d'un comportement de contrat (objet <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the insertion mechanism is an endpoint behavior you can also implement a <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> object that can insert your custom behavior using a configuration file.</source>
          <target state="translated">Si le mécanisme d'insertion est un comportement de point de terminaison, vous pouvez également implémenter un objet <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> qui peut insérer votre comportement personnalisé à l'aide d'un fichier de configuration.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</source>
          <target state="translated">Si le mécanisme d'insertion est un comportement de contrat, vous pouvez insérer le comportement par programme avant l'ouverture de l'hôte de service ou vous pouvez implémenter un attribut personnalisé.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>(For an example of the contract behavior approach, see the Example section.)</source>
          <target state="translated">Pour retrouver un exemple d'approche de comportement de contrat, reportez-vous à la section Exemple.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> has two methods, <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> a deux méthodes : <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object.</source>
          <target state="translated">Ces méthodes sont généralement implémentées pour créer des objets de service à l'aide d'un constructeur non défini par défaut ou pour initialiser ou éliminer un état lié à la durée de vie de l'objet.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Service object pooling is one example of custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> functionality.</source>
          <target state="translated">La mise en mise en pool d’objets de service est un exemple de fonctionnalité <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> personnalisée.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Typically, the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> invokes the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> when the <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is first created and invokes the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method when the <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is closed.</source>
          <target state="translated">En règle générale, <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> appelle <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> lors de la création de <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> et appelle la méthode <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> à la fermeture de <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>There are two ways to cause an <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object to release a service object before the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is closed.</source>
          <target state="translated">Deux méthodes différentes permettent à un objet <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> de libérer un objet de service avant la fermeture de <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The first method is to set the <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.ServiceModel.ReleaseInstanceMode.AfterCall&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall&gt;</ph>.</source>
          <target state="translated">La première méthode consiste à assigner <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A&gt;</ph> à <ph id="ph2">&lt;xref:System.ServiceModel.ReleaseInstanceMode.AfterCall&gt;</ph> ou à <ph id="ph3">&lt;xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The second method is to call the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> method.</source>
          <target state="translated">La seconde méthode consiste à appeler la méthode <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If this is done, the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> calls the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method on the dispatcher's instance provider.</source>
          <target state="translated">Dans ce cas, <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> appelle la méthode <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> sur le fournisseur d'instances du répartiteur.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If a new message arrives after the instance has been released, <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> creates a new instance using the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> method.</source>
          <target state="translated">Si un nouveau message arrive après la libération de l'instance, <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> crée une instance à l'aide de la méthode <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> of the service is <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>, the system does not call the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> methods even when the user did not provide a well-known service object unless the user directly calls <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> and then calls <ph id="ph6">&lt;xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A&gt;</ph>.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> du service est <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>, le système n'appelle pas les méthodes <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> et <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>, même si l'utilisateur n'a pas fourni d'objet de service connu, sauf si l'utilisateur appelle directement <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> puis <ph id="ph6">&lt;xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">L'exemple de code suivant indique comment implémenter <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> pour fournir un comportement singleton ; il retourne toujours la même instance de service et ne la recycle pas.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">L'exemple de code suivant indique comment implémenter un attribut personnalisé qui implémente <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> pour insérer le fournisseur d'instances de service personnalisé.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">Il implémente également <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, qui lie son utilisation à un contrat spécifique.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Returns a service object.</source>
          <target state="translated">Retourne un objet de service.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>Returns a service object given the specified <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Retourne un objet de service en fonction de l'objet <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>A user-defined service object.</source>
          <target state="translated">Objet de service défini par l'utilisateur.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29&gt;</ph> method to control the exact service object that a <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> service receives when it attempts to create a new one.</source>
          <target state="translated">Utilisez la méthode <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29&gt;</ph> pour contrôler l'objet de service exact qu'un service <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> reçoit lorsqu'il tente d'en créer un nouveau.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">L'exemple de code suivant indique comment implémenter <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> pour fournir un comportement singleton ; il retourne toujours la même instance de service et ne la recycle pas.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">L'exemple de code suivant indique comment implémenter un attribut personnalisé qui implémente <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> pour insérer le fournisseur d'instances de service personnalisé.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">Il implémente également <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, qui lie son utilisation à un contrat spécifique.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The message that triggered the creation of a service object.</source>
          <target state="translated">Message qui a déclenché la création d'un objet de service.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>Returns a service object given the specified <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Retourne un objet de service en fonction de l'objet <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The service object.</source>
          <target state="translated">Objet de service.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29&gt;</ph> method to control the exact service object that a <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> service receives when it attempts to create a new one.</source>
          <target state="translated">Utilisez la méthode <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29&gt;</ph> pour contrôler l'objet de service exact qu'un service <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> reçoit lorsqu'il tente d'en créer un nouveau.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">L'exemple de code suivant indique comment implémenter <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> pour fournir un comportement singleton ; il retourne toujours la même instance de service et ne la recycle pas.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">L'exemple de code suivant indique comment implémenter un attribut personnalisé qui implémente <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> pour insérer le fournisseur d'instances de service personnalisé.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">Il implémente également <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, qui lie son utilisation à un contrat spécifique.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>The service's instance context.</source>
          <target state="translated">Contexte d'instance du service.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>The service object to be recycled.</source>
          <target state="translated">Objet de service à recycler.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>Called when an <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object recycles a service object.</source>
          <target state="translated">Appelé lorsqu'un objet <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> recycle un objet de service.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</source>
          <target state="translated">Utilisez la méthode <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> pour effectuer une élimination de ressources personnalisée ou une autre personnalisation de recyclage lorsqu'un service recycle un objet de service.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>