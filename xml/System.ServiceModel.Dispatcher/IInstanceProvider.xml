<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="64f781a91479ef73b154705bbb47163438531a0f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36614796" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Déclare des méthodes qui fournissent un objet de service ou recyclent un objet de service pour un service Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez l'interface <xref:System.ServiceModel.Dispatcher.IInstanceProvider> pour contrôler la création et le recyclage d'objets de service en cas de demande ou d'élimination par un objet <xref:System.ServiceModel.InstanceContext>.  
  
 Une fois l'interface <xref:System.ServiceModel.Dispatcher.IInstanceProvider> implémentée, vous devez assigner votre objet de fournisseur d'instances personnalisé à la propriété <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> à l'aide d'un comportement de point de terminaison (objet <xref:System.ServiceModel.Description.IEndpointBehavior>) ou d'un comportement de contrat (objet <xref:System.ServiceModel.Description.IContractBehavior>).  
  
 Si le mécanisme d'insertion est un comportement de point de terminaison, vous pouvez également implémenter un objet <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> qui peut insérer votre comportement personnalisé à l'aide d'un fichier de configuration. Si le mécanisme d'insertion est un comportement de contrat, vous pouvez insérer le comportement par programme avant l'ouverture de l'hôte de service ou vous pouvez implémenter un attribut personnalisé. Pour retrouver un exemple d'approche de comportement de contrat, reportez-vous à la section Exemple.  
  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> a deux méthodes : <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> et <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. Ces méthodes sont généralement implémentées pour créer des objets de service à l'aide d'un constructeur non défini par défaut ou pour initialiser ou éliminer un état lié à la durée de vie de l'objet. La mise en mise en pool d’objets de service est un exemple de fonctionnalité <xref:System.ServiceModel.Dispatcher.IInstanceProvider> personnalisée.  
  
 En règle générale, <xref:System.ServiceModel.InstanceContext> appelle <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> lors de la création de <xref:System.ServiceModel.InstanceContext> et appelle la méthode <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> à la fermeture de <xref:System.ServiceModel.InstanceContext>.  
  
 Deux méthodes différentes permettent à un objet <xref:System.ServiceModel.InstanceContext> de libérer un objet de service avant la fermeture de <xref:System.ServiceModel.InstanceContext>. La première méthode consiste à assigner <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> à <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> ou à <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>. La seconde méthode consiste à appeler la méthode <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>. Dans ce cas, <xref:System.ServiceModel.InstanceContext> appelle la méthode <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> sur le fournisseur d'instances du répartiteur. Si un nouveau message arrive après la libération de l’instance, WCF crée une nouvelle instance en utilisant la <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> (méthode).  
  
> [!NOTE]
>  Si le <xref:System.ServiceModel.InstanceContextMode> du service est <xref:System.ServiceModel.InstanceContextMode.Single>, le système n'appelle pas les méthodes <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> et <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>, même si l'utilisateur n'a pas fourni d'objet de service connu, sauf si l'utilisateur appelle directement <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> puis <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.  
  
   
  
## Examples  
 L'exemple de code suivant indique comment implémenter <xref:System.ServiceModel.Dispatcher.IInstanceProvider> pour fournir un comportement singleton ; il retourne toujours la même instance de service et ne la recycle pas.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 L'exemple de code suivant indique comment implémenter un attribut personnalisé qui implémente <xref:System.ServiceModel.Description.IContractBehavior> pour insérer le fournisseur d'instances de service personnalisé. Il implémente également <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, qui lie son utilisation à un contrat spécifique.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne un objet de service.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Objet <see cref="T:System.ServiceModel.InstanceContext" /> actuel.</param>
        <summary>Retourne un objet de service en fonction de l'objet <see cref="T:System.ServiceModel.InstanceContext" /> spécifié.</summary>
        <returns>Objet de service défini par l'utilisateur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> méthode pour contrôler l’objet de service exact un service WCF reçoit lorsqu’il tente de créer un nouveau.  
  
   
  
## Examples  
 L'exemple de code suivant indique comment implémenter <xref:System.ServiceModel.Dispatcher.IInstanceProvider> pour fournir un comportement singleton ; il retourne toujours la même instance de service et ne la recycle pas.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 L'exemple de code suivant indique comment implémenter un attribut personnalisé qui implémente <xref:System.ServiceModel.Description.IContractBehavior> pour insérer le fournisseur d'instances de service personnalisé. Il implémente également <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, qui lie son utilisation à un contrat spécifique.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Objet <see cref="T:System.ServiceModel.InstanceContext" /> actuel.</param>
        <param name="message">Message qui a déclenché la création d'un objet de service.</param>
        <summary>Retourne un objet de service en fonction de l'objet <see cref="T:System.ServiceModel.InstanceContext" /> spécifié.</summary>
        <returns>Objet de service.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> méthode pour contrôler l’objet de service exact un service WCF reçoit lorsqu’il tente de créer un nouveau.  
  
   
  
## Examples  
 L'exemple de code suivant indique comment implémenter <xref:System.ServiceModel.Dispatcher.IInstanceProvider> pour fournir un comportement singleton ; il retourne toujours la même instance de service et ne la recycle pas.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 L'exemple de code suivant indique comment implémenter un attribut personnalisé qui implémente <xref:System.ServiceModel.Description.IContractBehavior> pour insérer le fournisseur d'instances de service personnalisé. Il implémente également <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, qui lie son utilisation à un contrat spécifique.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Contexte d'instance du service.</param>
        <param name="instance">Objet de service à recycler.</param>
        <summary>Appelé lorsqu'un objet <see cref="T:System.ServiceModel.InstanceContext" /> recycle un objet de service.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la méthode <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> pour effectuer une élimination de ressources personnalisée ou une autre personnalisation de recyclage lorsqu'un service recycle un objet de service.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>