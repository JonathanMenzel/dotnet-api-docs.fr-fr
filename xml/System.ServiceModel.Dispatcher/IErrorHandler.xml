<Type Name="IErrorHandler" FullName="System.ServiceModel.Dispatcher.IErrorHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8506e81537dec4f8e6bdb21c928cac236121341" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48638330" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IErrorHandler" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IErrorHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IErrorHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IErrorHandler" />
  <TypeSignature Language="F#" Value="type IErrorHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Permet à un implémenteur de contrôler le message d'erreur retourné à l'appelant et exécute éventuellement un traitement d'erreur personnalisé comme l'enregistrement dans le journal.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour contrôler explicitement le comportement de l’application lorsqu’une exception est levée, implémentez le <xref:System.ServiceModel.Dispatcher.IErrorHandler> d’interface et l’ajouter à la <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>de <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> propriété. <xref:System.ServiceModel.Dispatcher.IErrorHandler> vous permet de contrôler explicitement l'erreur SOAP générée, de décider de la retourner ou non au client et d'exécuter les tâches associées, comme l'enregistrement dans le journal. Les gestionnaires d'erreurs sont appelés dans l'ordre dans lequel ils sont ajoutés à la propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 Implémentez la méthode <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> pour contrôler le message d'erreur retourné au client.  
  
 Implémentez la méthode <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> pour contrôler les comportements lié à l'erreur, y compris l'enregistrement des erreurs, la garantie d'un échec rapide, l'arrêt de l'application, et ainsi de suite.  
  
> [!NOTE]
>  De nombreux éléments pouvant effectuer un appel à la méthode <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>, aucune garantie sur le thread d'appel de la méthode ne peut être apportée. Ne vous attendez pas à ce que la méthode <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> soit appelée sur le thread des opérations.  
  
 Toutes les implémentations <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> sont appelées en premier, avant d'envoyer un message de réponse. Lorsque toutes les implémentations <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> ont été appelées et retournent, et si `fault` n'a pas la valeur `null`, elle est renvoyée au client selon les termes du contrat d'opération. Si `fault` a la valeur `null` une fois que toutes les implémentations ont été appelées, le message de réponse est contrôlé par la valeur de propriété <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Les exceptions peuvent se produire une fois que toutes les implémentations <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> ont été appelées et qu'un message de réponse est transmis au canal. Si une exception de canal se produit (par exemple, des difficultés de la sérialisation du message) <xref:System.ServiceModel.Dispatcher.IErrorHandler> objets sont avertis. Dans ce cas, vous devez toujours vous assurer que votre environnement de développement intercepte et affiche de telles exceptions ou utilise le traçage pour découvrir le problème. Pour plus d’informations sur le suivi, consultez [à l’aide de suivi pour résoudre les problèmes de votre Application](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md).  
  
 Une fois que le message de réponse a été envoyé, toutes les implémentations <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> sont appelées dans le même ordre.  
  
 En général, une implémentation <xref:System.ServiceModel.Dispatcher.IErrorHandler> est ajoutée à la propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> sur le service (et sur le client dans le cas de communication duplex).  
  
 Vous pouvez ajouter le <xref:System.ServiceModel.Dispatcher.IErrorHandler> à l'exécution en implémentant un comportement (objet <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>ou <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType> ) et utiliser le comportement par programme, à partir d'un fichier de configuration ou avec un attribut personnalisé pour attacher votre <xref:System.ServiceModel.Dispatcher.IErrorHandler>.  
  
 Pour plus d’informations sur l’utilisation des comportements pour modifier l’exécution, consultez [configuration et extension de l’exécution des comportements](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 L'exemple de code suivant présente un service qui implémente <xref:System.ServiceModel.Dispatcher.IErrorHandler> qui retourne uniquement <xref:System.ServiceModel.FaultException%601> de type `GreetingFault` lorsqu'une méthode de service lève une exception managée.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 L'exemple de code suivant indique comment utiliser un comportement de service pour ajouter l'implémentation <xref:System.ServiceModel.Dispatcher.IErrorHandler> à la propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 L'exemple de code suivant indique comment configurer le service pour charger le comportement de service à l'aide d'un fichier de configuration de l'application. Pour plus d'informations sur la façon d'exposer un comportement de service dans un fichier de configuration, consultez <xref:System.ServiceModel.Description.IServiceBehavior>.  

 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HandleError">
      <MemberSignature Language="C#" Value="public bool HandleError (Exception error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception error) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function HandleError (error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public bool HandleError (Exception exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception exception) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="error">Exception levée au cours du traitement.</param>
        <param name="exception">Exception levée au cours du traitement.</param>
        <summary>Active le traitement relatifs aux erreurs et retourne une valeur qui indique si le répartiteur abandonne la session et le contexte de l'instance dans certains cas.</summary>
        <returns>
          <see langword="true" /> si Windows Communication Foundation (WCF) ne doit pas abandonner la session (le cas échéant) et le contexte de l’instance si ce dernier n’est pas <see cref="F:System.ServiceModel.InstanceContextMode.Single" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la méthode <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> pour implémenter des comportements propres aux erreurs, tels que la journalisation d'erreurs, la notification système, l'arrêt de l'application, etc., et pour retourner une valeur qui spécifie si l'exception a été gérée correctement.  
  
> [!NOTE]
>  De nombreux éléments pouvant effectuer un appel à la méthode <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>, aucune garantie sur le thread d'appel de la méthode ne peut être apportée. Ne vous attendez pas à ce que la méthode <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> soit appelée sur le thread des opérations.  
  
 Toutes les implémentations <xref:System.ServiceModel.Dispatcher.IErrorHandler> sont appelées. Par défaut, si une exception est rencontrée et que la valeur de retour correspond à `false`, le répartiteur abandonne toute session ainsi que <xref:System.ServiceModel.InstanceContext> si <xref:System.ServiceModel.InstanceContextMode> ne correspond pas à <xref:System.ServiceModel.InstanceContextMode.Single>.  L'exception est alors considérée comme non gérée et tout état est jugé corrompu.  
  
 Forcez le retour de la valeur `true` de <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> pour empêcher ce comportement par défaut. Si le Gestionnaire d’erreurs quelconque retourne `true` il indique à WCF qu’il est prudent de continuer l’état associé à la demande a échoué.  
  
 Si aucun gestionnaire d'erreurs ne retourne `true` de la méthode <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>, l'exception est considérée comme non gérée et la réponse par défaut s'applique alors, pouvant provoquer l'abandon d'un objet <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> et d'un canal lorsque la communication se fait sur un canal de session ou si la propriété <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> présente une valeur autre que <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType>.  
  
 Le paramètre `error` n'a jamais la valeur `null` et contient l'objet exception qui a été levé.  
  
   
  
## Examples  
 L'exemple de code suivant présente un service qui implémente <xref:System.ServiceModel.Dispatcher.IErrorHandler> qui retourne uniquement <xref:System.ServiceModel.FaultException%601> de type `GreetingFault` lorsqu'une méthode de service lève une exception managée.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 L'exemple de code suivant indique comment utiliser un comportement de service pour ajouter l'implémentation <xref:System.ServiceModel.Dispatcher.IErrorHandler> à la propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 L'exemple de code suivant indique comment configurer le service pour charger le comportement de service à l'aide d'un fichier de configuration de l'application. Pour plus d'informations sur la façon d'exposer un comportement de service dans un fichier de configuration, consultez <xref:System.ServiceModel.Description.IServiceBehavior>.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideFault">
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception error, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProvideFault (error As Exception, version As MessageVersion, ByRef fault As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ error, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception exception, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception exception, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ exception, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (exception, version, fault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="version" Type="System.ServiceModel.Channels.MessageVersion" Index="1" />
        <Parameter Name="fault" Type="System.ServiceModel.Channels.Message" RefType="ref" Index="2" />
      </Parameters>
      <Docs>
        <param name="error">Objet <see cref="T:System.Exception" /> levé au cours de l'opération de service.</param>
        <param name="exception">Objet <see cref="T:System.Exception" /> levé au cours de l'opération de service.</param>
        <param name="version">Version SOAP du message.</param>
        <param name="fault">Objet <see cref="T:System.ServiceModel.Channels.Message" /> retourné au client ou au service, dans le cas duplex.</param>
        <summary>Active la création d'un <see cref="T:System.ServiceModel.FaultException`1" /> personnalisé retourné d'une exception au cours d'une méthode de service.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> pour créer un message d'erreur personnalisé retourné au client.  Le <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> méthode sera toujours appelée pour les exceptions qui laissent des opérations, sauf lorsque le runtime WCF reconnaît l’exception comme particulièrement irrécupérable et lève à nouveau l’exception proprement dite. Lorsque toutes les implémentations <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> ont été appelées, le message d'erreur est retourné au client (si `fault` n'a pas la valeur `null`). Si le `fault` paramètre est `null` l’erreur par défaut est envoyé au client.  
  
> [!NOTE]
>  Le message entrant qui a provoqué l'erreur de traitement est disponible au cours de cette méthode à partir de la propriété <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType>.  
  
> [!NOTE]
>  De nombreux éléments pouvant effectuer un appel à la méthode <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>, aucune garantie sur le thread d'appel de la méthode ne peut être apportée. Ne vous attendez pas à ce que la méthode <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> soit appelée sur le thread des opérations.  
  
   
  
## Examples  
 L'exemple de code suivant présente un service qui implémente <xref:System.ServiceModel.Dispatcher.IErrorHandler> qui retourne uniquement <xref:System.ServiceModel.FaultException%601> de type `GreetingFault` lorsqu'une méthode de service lève une exception managée.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 L'exemple de code suivant indique comment utiliser un comportement de service pour ajouter l'implémentation <xref:System.ServiceModel.Dispatcher.IErrorHandler> à la propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 L'exemple de code suivant indique comment configurer le service pour charger le comportement de service à l'aide d'un fichier de configuration de l'application. Pour plus d'informations sur la façon d'exposer un comportement de service dans un fichier de configuration, consultez <xref:System.ServiceModel.Description.IServiceBehavior>.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>