<Type Name="EndpointAddressMessageFilter" FullName="System.ServiceModel.Dispatcher.EndpointAddressMessageFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f5d986ef294ccab17423855f29426e51969bf07" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EndpointAddressMessageFilter : System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EndpointAddressMessageFilter extends System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class EndpointAddressMessageFilter&#xA;Inherits MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class EndpointAddressMessageFilter : System::ServiceModel::Dispatcher::MessageFilter" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Dispatcher.MessageFilter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d0f56-101">Représente une demande qui vérifie si un message répond aux spécifications d'une adresse de point de terminaison spécifiée.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d0f56-101">Represents a query that tests whether a message satisfies the requirements of a specified endpoint address.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f56-102">Ce filtre vérifie si un message correspond à une adresse de point de terminaison particulière.</span><span class="sxs-lookup"><span data-stu-id="d0f56-102">This filter tests whether a message satisfies a particular endpoint address.</span></span> <span data-ttu-id="d0f56-103">Objet <xref:System.ServiceModel.EndpointAddress> inclut un URI et une collection facultative d'en-têtes d'adressage.</span><span class="sxs-lookup"><span data-stu-id="d0f56-103">An <xref:System.ServiceModel.EndpointAddress> object includes a URI and an optional collection of addressing headers.</span></span> <span data-ttu-id="d0f56-104">Les en-têtes d'adressage et de message sont rendus canoniques pour effectuer une comparaison d'égalité.</span><span class="sxs-lookup"><span data-stu-id="d0f56-104">The addressing and message headers are canonicalized in order to be compared for equality.</span></span> <span data-ttu-id="d0f56-105">Si un paramètre apparaît plusieurs fois dans une <xref:System.ServiceModel.EndpointAddress>, l'en-tête correspondant doit apparaître au moins autant de fois dans le message.</span><span class="sxs-lookup"><span data-stu-id="d0f56-105">If a parameter appears more than once in an <xref:System.ServiceModel.EndpointAddress>, the corresponding header must appear in the message at least that many times.</span></span>  
  
 <span data-ttu-id="d0f56-106">IIS et le système de fichiers sous-jacent (NTFS ou FAT) ne sont pas sensibles à la casse.</span><span class="sxs-lookup"><span data-stu-id="d0f56-106">IIS and the underlying file system (NTFS or FAT) are case-insensitive.</span></span> <span data-ttu-id="d0f56-107">Les comparaisons URI effectuées par cette classe ne sont pas sensibles à la casse non plus.</span><span class="sxs-lookup"><span data-stu-id="d0f56-107">URI comparisons done by this class are also case-insensitive.</span></span> <span data-ttu-id="d0f56-108">Ainsi, par exemple, http://www.microsoft.com est évalué comme équivalent à http://WWW.microsoft.com.</span><span class="sxs-lookup"><span data-stu-id="d0f56-108">So, for example, http://www.microsoft.com is evaluated as equal to http://WWW.microsoft.com.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0f56-109">Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-109">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.EndpointAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As EndpointAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EndpointAddressMessageFilter(System::ServiceModel::EndpointAddress ^ address);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="d0f56-110">
            <see cref="T:System.ServiceModel.EndpointAddress" /> par rapport à laquelle les messages sont testés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-110">The <see cref="T:System.ServiceModel.EndpointAddress" /> against which messages are tested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f56-111">Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> avec une adresse spécifiée par rapport à laquelle tester un message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-111">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> class with a specified address against which to test a message.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f56-112">
            <paramref name="address" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-112">
              <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As EndpointAddress, includeHostNameInComparison As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EndpointAddressMessageFilter(System::ServiceModel::EndpointAddress ^ address, bool includeHostNameInComparison);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="includeHostNameInComparison" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="d0f56-113">
            <see cref="T:System.ServiceModel.EndpointAddress" /> par rapport à laquelle les messages sont testés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-113">The <see cref="T:System.ServiceModel.EndpointAddress" /> against which messages are tested.</span>
          </span>
        </param>
        <param name="includeHostNameInComparison">
          <span data-ttu-id="d0f56-114">
            <see langword="true" /> si le nom d'hôte est inclus dans la comparaison de l'adresse du point de terminaison ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-114">
              <see langword="true" /> if the host name is included in the endpoint address comparison; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f56-115">Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-115">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f56-116">Si un service Web est installé sur votre ordinateur local, il existe de nombreuses méthodes équivalentes pour le référencer, y compris les suivantes :</span><span class="sxs-lookup"><span data-stu-id="d0f56-116">If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:</span></span>  
  
-   http://localhost/foo.svc  
  
-   http://192.168.1.100/foo.svc  
  
-   <span data-ttu-id="d0f56-117">http://[nom-de-mon-ordinateur]/foo.svc</span><span class="sxs-lookup"><span data-stu-id="d0f56-117">http://[my-machine-name]/foo.svc</span></span>  
  
-   <span data-ttu-id="d0f56-118">http://[nom-de-mon-ordinateur].[ma-société].com/foo.svc.</span><span class="sxs-lookup"><span data-stu-id="d0f56-118">http://[my-machine-name].[my-company].com/foo.svc.</span></span>  
  
 <span data-ttu-id="d0f56-119">Si la valeur du paramètre `includeHostNameInComparison` est `false`, les URI ci-dessus résolvent tous au même point de terminaison.</span><span class="sxs-lookup"><span data-stu-id="d0f56-119">If the value of the `includeHostNameInComparison` parameter is `false`, the above URIs all resolve to the same endpoint.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f56-120">
            <paramref name="address" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-120">
              <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ Address { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d0f56-121">Obtient l'adresse par rapport à laquelle le <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> teste les messages.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-121">Gets the address that the <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> tests messages against.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d0f56-122">
            <see cref="T:System.ServiceModel.EndpointAddress" /> par rapport à laquelle le <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> teste les messages.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-122">The <see cref="T:System.ServiceModel.EndpointAddress" /> that the <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> tests messages against.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal override System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; override System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData">
          <span data-ttu-id="d0f56-123">Données associées aux filtres de la table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-123">Data associated with the filters in the table.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="d0f56-124">Crée une nouvelle table de filtres qui teste un message par rapport à plusieurs adresses de point de terminaison adresse simultanément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-124">Creates a new filter table that tests a message against multiple endpoint addresses simultaneously.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f56-125">Objet qui implémente l'interface <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> qui peut contenir des <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" />s avec <paramref name="FilterData" /> associées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-125">An object that implements the <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> interface that can contain <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" />s with associated <paramref name="FilterData" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f56-126">La méthode retourne une instance de <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> optimisée pour tester des points de terminaison de message spécifiques.</span><span class="sxs-lookup"><span data-stu-id="d0f56-126">The method returns an instance of <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> that is optimized to test for specific message endpoints.</span></span>  
  
 <span data-ttu-id="d0f56-127">Cette méthode est destinée à être utilisée par <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>.</span><span class="sxs-lookup"><span data-stu-id="d0f56-127">This method is intended to be used by <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>.</span></span> <span data-ttu-id="d0f56-128">Utilisez les constructeurs <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> pour créer des instances de table de filtres.</span><span class="sxs-lookup"><span data-stu-id="d0f56-128">Use <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> constructors to create filter table instances.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeHostNameInComparison">
      <MemberSignature Language="C#" Value="public bool IncludeHostNameInComparison { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostNameInComparison" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.IncludeHostNameInComparison" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IncludeHostNameInComparison As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostNameInComparison { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d0f56-129">Obtient une valeur qui indique si le nom d'hôte est inclus dans la comparaison de l'adresse du point de terminaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-129">Gets a value that indicates whether the host name is included in the endpoint address comparison.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d0f56-130">
            <see langword="true" /> si le nom d'hôte est inclus dans la comparaison de l'adresse du point de terminaison ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-130">
              <see langword="true" /> if the host name is included in the endpoint address comparison; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f56-131">Si un service Web est installé sur votre ordinateur local, il existe de nombreuses méthodes équivalentes pour le référencer, y compris les suivantes :</span><span class="sxs-lookup"><span data-stu-id="d0f56-131">If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:</span></span>  
  
-   http://localhost/foo.svc  
  
-   http://192.168.1.100/foo.svc  
  
-   <span data-ttu-id="d0f56-132">http://[nom-de-mon-ordinateur]/foo.svc</span><span class="sxs-lookup"><span data-stu-id="d0f56-132">http://[my-machine-name]/foo.svc</span></span>  
  
-   <span data-ttu-id="d0f56-133">http://[nom-de-mon-ordinateur].[ma-société].com/foo.svc.</span><span class="sxs-lookup"><span data-stu-id="d0f56-133">http://[my-machine-name].[my-company].com/foo.svc.</span></span>  
  
 <span data-ttu-id="d0f56-134">La valeur par défaut de cette propriété est `false`, les URI ci-dessus résolvent donc tous au même point de terminaison, sauf si vous modifiez cette propriété.</span><span class="sxs-lookup"><span data-stu-id="d0f56-134">The default value of this property is `false`, so the above URIs all resolve to the same endpoint, unless you change this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0f56-135">Vérifie si un message ou un message mis en mémoire tampon correspond aux critères du filtre de point de terminaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-135">Tests whether a message or buffered message satisfies the criteria of the endpoint filter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f56-136">La différence entre les deux surcharges de la méthode <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.Match%2A> est que celle qui prend le paramètre <xref:System.ServiceModel.Channels.MessageBuffer> est autorisée à examiner le corps d'un message lorsqu'elle recherche une correspondance, alors que celle qui prend le paramètre <xref:System.ServiceModel.Channels.Message> ne l'est pas.</span><span class="sxs-lookup"><span data-stu-id="d0f56-136">The difference between the two overloads of the <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.Match%2A> method is that the one that takes the <xref:System.ServiceModel.Channels.MessageBuffer> parameter is permitted to examine the body of a message when testing for a match, while the one that takes the <xref:System.ServiceModel.Channels.Message> parameter is not.</span></span>  
  
 <span data-ttu-id="d0f56-137"><xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.Match%2A> ne teste pas le contenu du corps d'un message, ces deux méthodes sont donc équivalentes.</span><span class="sxs-lookup"><span data-stu-id="d0f56-137"><xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.Match%2A> does not test the contents of the body of a message, so these two methods are equivalent.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public override bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="d0f56-138">Objet <see cref="T:System.ServiceModel.Channels.Message" /> à tester.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-138">The <see cref="T:System.ServiceModel.Channels.Message" /> object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f56-139">Vérifie si un message correspond à l'adresse de point de terminaison spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-139">Tests whether a message satisfies the specified endpoint address.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f56-140">
            <see langword="true" /> si l'objet <see cref="T:System.ServiceModel.Channels.Message" /> correspond à l'adresse de point de terminaison spécifiée dans le filtre ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-140">
              <see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.Message" /> object satisfies the endpoint address specified in the filter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f56-141">Les deux surcharges de cette méthode sont équivalentes car elles examinent toutes deux uniquement les en-têtes de message.</span><span class="sxs-lookup"><span data-stu-id="d0f56-141">The two overloads of this method are equivalent because they both examine only message headers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f56-142">
            <paramref name="message" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-142">
              <paramref name="message" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public override bool Match (System.ServiceModel.Channels.MessageBuffer messageBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer messageBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Match(System::ServiceModel::Channels::MessageBuffer ^ messageBuffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageBuffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="messageBuffer">
          <span data-ttu-id="d0f56-143">Objet <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> à tester.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-143">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f56-144">Vérifie si un message mis en mémoire tampon correspond à l'adresse de point de terminaison spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-144">Tests whether a buffered message satisfies the specified endpoint address.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f56-145">
            <see langword="true" /> si l'objet <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> correspond à l'adresse de point de terminaison ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-145">
              <see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object satisfies the endpoint address; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f56-146">Les deux surcharges de cette méthode sont équivalentes car elles examinent toutes deux uniquement les en-têtes de message.</span><span class="sxs-lookup"><span data-stu-id="d0f56-146">The two overloads of this method are equivalent because they both examine only message headers.</span></span> <span data-ttu-id="d0f56-147">La seule raison d'utiliser cette surcharge est si un `messageBuffer` et non un message était déjà disponible, car cette méthode convertit le `messageBuffer` en message.</span><span class="sxs-lookup"><span data-stu-id="d0f56-147">The only reason to use this overload is if you already had a `messageBuffer` available and not a message, because this method converts the `messageBuffer` into a message.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f56-148">
            <paramref name="messageBuffer" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f56-148">
              <paramref name="messageBuffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>