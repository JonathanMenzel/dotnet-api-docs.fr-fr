<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ChannelDispatcherBase.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c981febf306d296c8e0662e36557df9458314557.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c981febf306d296c8e0662e36557df9458314557</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase">
          <source>Abstract base class for the channel dispatcher that accepts channels and associates them with a service.</source>
          <target state="translated">Classe de base abstraite pour le répartiteur de canal qui accepte les canaux et les associe à un service.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase">
          <source>This is used by developers who want to keep the <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> programming model but replace the system-provided runtime.</source>
          <target state="translated">Elle est utilisée par les développeurs qui souhaitent conserver le modèle de programmation <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> mais remplacer l'exécution fournie par le système.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase">
          <source>Such applications will pull messages out of channels and handle them directly with user-defined dispatchers.</source>
          <target state="translated">De telles applications extrairont des messages des canaux et les géreront directement avec les répartiteurs définis par l’utilisateur.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase">
          <source>To use <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> , create a class derived from it, extend <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> and override <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase.InitializeRuntime%2A&gt;</ph>, adding instances of your class derived from <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> to <ph id="ph5">&lt;xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A&gt;</ph>.</source>
          <target state="translated">Pour utiliser <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph>, créez une classe qui en dérive, étendez <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> et substituez <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase.InitializeRuntime%2A&gt;</ph>, en ajoutant des instances de votre classe dérivée de <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> à <ph id="ph5">&lt;xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IChannelListener&gt;</ph> and the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>, associated with the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> object are available for inspection or modification through the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host%2A&gt;</ph> respectively.</source>
          <target state="translated">L'<ph id="ph1">&lt;xref:System.ServiceModel.Channels.IChannelListener&gt;</ph> et l'<ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>, associés à l'objet <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> sont respectivement disponibles pour l'inspection ou la modification via <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener%2A&gt;</ph> et <ph id="ph5">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> calls the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach%28System.ServiceModel.ServiceHostBase%29&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach%28System.ServiceModel.ServiceHostBase%29&gt;</ph> methods when adding or removing a <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> item from its <ph id="ph5">&lt;xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> appelle les méthodes <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach%28System.ServiceModel.ServiceHostBase%29&gt;</ph> ou <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach%28System.ServiceModel.ServiceHostBase%29&gt;</ph> lors de l'ajout ou de la suppression d'un élément <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> de sa collection <ph id="ph5">&lt;xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> calls the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput%2A&gt;</ph> during shutdown before closing InstanceContexts.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> appelle la méthode <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput%2A&gt;</ph> au moment de l'arrêt avant la fermeture d'InstanceContexts.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase">
          <source><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> uses this call to close datagram channels and wait for all messages to get to an InstanceContext.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> utilise cet appel pour fermer les canaux de datagramme et attendre tous les messages à obtenir pour un InstanceContext.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceHostBase" /&gt;</ph> for the service.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceHostBase" /&gt;</ph> pour le service.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)">
          <source>When overridden in a derived class, attaches the channel dispatcher to a specific host.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, attache le répartiteur de canal à un hôte spécifique.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)">
          <source>This method can only be set when the instance of the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph> is in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, as this is the only state that is both mutable and not disposed.</source>
          <target state="translated">Cette méthode peut être définie uniquement lorsque l'instance du <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph> est dans l'état <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, étant donné qu'il s'agit du seul état qui soit à la fois mutable et non disposé.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> calls this method when the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> is added to its <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A&gt;</ph> collection.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> appelle cette méthode lorsque la <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> est ajoutée à sa collection <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)">
          <source>This gives the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> a chance to hook events and inspect the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>, and provides the value that should be returned from the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host%2A&gt;</ph> property.</source>
          <target state="translated">Elle donne à la <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> la possibilité de raccorder des événements et d'inspecter l'<ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> et fournit la valeur qui doit être retournée par la propriété <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)">
          <source><ph id="ph1">&lt;paramref name="host" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="host" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)">
          <source>The communication object is in an <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Opening" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state or the host is already set.</source>
          <target state="translated">L'objet de communication est dans un état <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Opening" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> ou l'hôte est déjà défini.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)">
          <source>The communication object is in a <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Closing" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Closed" /&gt;</ph> state.</source>
          <target state="translated">L'objet de communication est dans l'état <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Closing" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Closed" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)">
          <source>The communication object is in a <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">L'objet de communication est dans l'état <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput">
          <source>When overridden in a derived class, removes the endpoint dispatchers associated with the channel dispatcher.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, supprime les répartiteurs de points de terminaison associés au répartiteur de canal.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> calls this method during shutdown to give the dispatcher a chance to drain messages.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> appelle cette méthode au moment de l'arrêt pour donner la possibilité au répartiteur de vider les messages.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph> uses this call to close datagram channels.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph> utilise cet appel pour fermer les canaux de datagramme.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceHostBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceHostBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)">
          <source>When overridden in a derived class, detaches the channel dispatcher from a specific host.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, détache le répartiteur de canal d'un hôte spécifique.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> can only be detached when the instance of the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph> is in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, as this is the only state that is both mutable and not disposed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> peut uniquement être détachée lorsqu'une instance du <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph> est à l'état <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, étant donné qu'il s'agit du seul état qui soit à la fois mutable et non disposé.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)">
          <source>Should set the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> associated with the channel dispatcher to <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Doit affecter la valeur <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> à la <ph id="ph2">`null`</ph> associée au répartiteur de canal.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> calls this method when the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> is removed from its <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> appelle cette méthode lorsque la <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> est supprimée de sa collection <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)">
          <source>This gives the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> a chance to unhook events and inspect the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>.</source>
          <target state="translated">Elle donne à la <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> la possibilité de décrocher des événements et d'inspecter l'<ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)">
          <source><ph id="ph1">&lt;paramref name="host" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="host" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)">
          <source>The communication object is in an <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Opening" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state or the host is already set.</source>
          <target state="translated">L'objet de communication est dans un état <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Opening" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> ou l'hôte est déjà défini.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)">
          <source>The communication object is in a <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Closing" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Closed" /&gt;</ph> state.</source>
          <target state="translated">L'objet de communication est dans l'état <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Closing" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Closed" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)">
          <source>The communication object is in a <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">L'objet de communication est dans l'état <ph id="ph1">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host">
          <source>When overridden in a derived class, gets the service host associated with the channel dispatcher.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, obtient l'hôte de service associé au répartiteur de canal.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceHostBase" /&gt;</ph> for the service associated with the dispatcher.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceHostBase" /&gt;</ph> pour le service associé au répartiteur.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host">
          <source>Each <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> object can have many <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph> objects, each associated with a different <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IChannelListener&gt;</ph> for that service.</source>
          <target state="translated">Chaque objet <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> peut avoir de nombreux objets <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph>, chacun étant associé à un <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IChannelListener&gt;</ph> différent pour ce service.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host">
          <source>The host keeps a list of these <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> objects in the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A&gt;</ph> collection.</source>
          <target state="translated">L'hôte conserve une liste de ces objets <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> dans la collection <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener">
          <source>When overridden in a derived class, gets the channel listener associated with the channel dispatcher.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, obtient l'écouteur de canal associé au répartiteur de canal.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.IChannelListener" /&gt;</ph> associated with the channel dispatcher.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.IChannelListener" /&gt;</ph> associé au répartiteur de canal.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph> associates an <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IChannelListener&gt;</ph> whose channels and messages this <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph> is dispatching.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph> associe un <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IChannelListener&gt;</ph> dont les canaux et les messages sont distribués par ce <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>