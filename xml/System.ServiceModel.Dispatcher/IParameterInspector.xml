<Type Name="IParameterInspector" FullName="System.ServiceModel.Dispatcher.IParameterInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="89566eb5793aa3f3ad4d0a23250acea1ef5b6913" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IParameterInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IParameterInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IParameterInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8a237-101">Définit le contrat implémenté par les inspecteurs de paramètre personnalisés qui activent inspection ou la modification d'informations avant et après les appels sur le client ou le service.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8a237-101">Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a237-102">Implémentez l'interface <xref:System.ServiceModel.Dispatcher.IParameterInspector> pour créer un inspecteur de paramètre personnalisé qui peut afficher et modifier le contenu d'un appel avant et après l'appel dans les applications clientes ou de service.</span><span class="sxs-lookup"><span data-stu-id="8a237-102">Implement the <xref:System.ServiceModel.Dispatcher.IParameterInspector> interface to create a custom parameter inspector that can view and modify the contents of a call both before the call and after the call in either client or service applications.</span></span>  
  
 <span data-ttu-id="8a237-103">Sur les appels sortants d'un client, l'inspecteur est appelé avant que le contenu de la demande soit sérialisé et envoyé au service.</span><span class="sxs-lookup"><span data-stu-id="8a237-103">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="8a237-104">L'inspecteur est également appelé après que la réponse a été désérialisée mais avant que les valeurs de retour aient été distribuées à la méthode proxy.</span><span class="sxs-lookup"><span data-stu-id="8a237-104">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="8a237-105">Sur les appels entrants à un service, l'inspecteur est appelé après que les paramètres ont été désérialisés mais avant qu'ils soient distribués à l'opération de service.</span><span class="sxs-lookup"><span data-stu-id="8a237-105">On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</span></span>  
  
 <span data-ttu-id="8a237-106">Utilisez les propriétés <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> ou <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> pour ajouter une implémentation <xref:System.ServiceModel.Dispatcher.IParameterInspector> à la collection d'inspecteurs pour une opération particulière.</span><span class="sxs-lookup"><span data-stu-id="8a237-106">Use the <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> or the <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> properties to add an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation to the inspectors collection for a particular operation.</span></span>  
  
 <span data-ttu-id="8a237-107">**Remarque** aux développeurs et administrateurs doivent s’assurer que l’interaction avec d’autres <xref:System.ServiceModel.Dispatcher.IParameterInspector> implémentations est comprise.</span><span class="sxs-lookup"><span data-stu-id="8a237-107">**Note** Developers and administrators must ensure that the interaction with other <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementations is understood.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a237-108">L'exemple de code suivant montre une implémentation <xref:System.ServiceModel.Dispatcher.IParameterInspector> qui :</span><span class="sxs-lookup"><span data-stu-id="8a237-108">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="8a237-109">Écrit le nom d'opération et la valeur de retour à la console après qu'une réponse a été désérialisée par le service ou qu'une demande a été sérialisée par un client.</span><span class="sxs-lookup"><span data-stu-id="8a237-109">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="8a237-110">Écrit le nom d'opération à la console après la désérialisation d'une réponse sur le client ou après qu'une réponse a été sérialisée sur le service.</span><span class="sxs-lookup"><span data-stu-id="8a237-110">Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="8a237-111">L'exemple de code suivant montre comment utiliser <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> ou <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> pour insérer des objets <xref:System.ServiceModel.Dispatcher.IParameterInspector>.</span><span class="sxs-lookup"><span data-stu-id="8a237-111">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterCall">
      <MemberSignature Language="C#" Value="public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterCall (operationName As String, outputs As Object(), returnValue As Object, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ outputs, System::Object ^ returnValue, System::Object ^ correlationState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="outputs" Type="System.Object[]" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationName">
          <span data-ttu-id="8a237-112">Nom de l'opération appelée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a237-112">The name of the invoked operation.</span>
          </span>
        </param>
        <param name="outputs">
          <span data-ttu-id="8a237-113">Tout objet de sortie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a237-113">Any output objects.</span>
          </span>
        </param>
        <param name="returnValue">
          <span data-ttu-id="8a237-114">Valeur de retour de l'opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a237-114">The return value of the operation.</span>
          </span>
        </param>
        <param name="correlationState">
          <span data-ttu-id="8a237-115">Tout état de corrélation retourné par la méthode <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />, ou valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a237-115">Any correlation state returned from the <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> method, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a237-116">Appelé après que les appels clients ont été retournés et avant que les réponses de service soient envoyées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a237-116">Called after client calls are returned and before service responses are sent.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a237-117">Sur les appels sortants d'un client, l'inspecteur est appelé avant que le contenu de la demande soit sérialisé et envoyé au service.</span><span class="sxs-lookup"><span data-stu-id="8a237-117">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="8a237-118">L'inspecteur est également appelé après que la réponse a été désérialisée mais avant que les valeurs de retour aient été distribuées à la méthode proxy.</span><span class="sxs-lookup"><span data-stu-id="8a237-118">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="8a237-119">Sur les appels entrants à un service, l'inspecteur est appelé après que les paramètres ont été désérialisés mais avant qu'ils soient distribués à l'opération de service.</span><span class="sxs-lookup"><span data-stu-id="8a237-119">On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a237-120">L'exemple de code suivant montre une implémentation <xref:System.ServiceModel.Dispatcher.IParameterInspector> qui :</span><span class="sxs-lookup"><span data-stu-id="8a237-120">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="8a237-121">Écrit le nom d'opération et la valeur de retour à la console après qu'une réponse a été désérialisée par le service ou qu'une demande a été sérialisée par un client.</span><span class="sxs-lookup"><span data-stu-id="8a237-121">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="8a237-122">Écrit le nom d'opération à la console après la désérialisation d'une réponse sur le client ou après qu'une réponse a été sérialisée sur le service.</span><span class="sxs-lookup"><span data-stu-id="8a237-122">Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="8a237-123">L'exemple de code suivant montre comment utiliser <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> ou <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> pour insérer des objets <xref:System.ServiceModel.Dispatcher.IParameterInspector>.</span><span class="sxs-lookup"><span data-stu-id="8a237-123">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCall">
      <MemberSignature Language="C#" Value="public object BeforeCall (string operationName, object[] inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeCall(string operationName, object[] inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeCall (operationName As String, inputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="inputs" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="operationName">
          <span data-ttu-id="8a237-124">Nom de l'opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a237-124">The name of the operation.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="8a237-125">Objets passés à la méthode par le client.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a237-125">The objects passed to the method by the client.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a237-126">Appelé avant que les appels clients soient envoyés et après que les réponses de service sont retournées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a237-126">Called before client calls are sent and after service responses are returned.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a237-127">État de corrélation retourné comme paramètre <paramref name="correlationState" /> dans <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a237-127">The correlation state that is returned as the <paramref name="correlationState" /> parameter in <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />.</span>
          </span>
          <span data-ttu-id="8a237-128">Retournez la valeur <see langword="null" /> si vous ne prévoyez pas d'utiliser l'état de corrélation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a237-128">Return <see langword="null" /> if you do not intend to use correlation state.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a237-129">Sur les appels sortants d'un client, l'inspecteur est appelé avant que le contenu de la demande soit sérialisé et envoyé au service.</span><span class="sxs-lookup"><span data-stu-id="8a237-129">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="8a237-130">L'inspecteur est également appelé après que la réponse a été désérialisée mais avant que les valeurs de retour aient été distribuées à la méthode proxy.</span><span class="sxs-lookup"><span data-stu-id="8a237-130">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="8a237-131">Sur les appels entrants à un service, l'inspecteur est appelé après que le contenu de la demande a été désérialisé et distribué à l'opération de service et avant que le contenu de la réponse soit sérialisé et envoyé au client.</span><span class="sxs-lookup"><span data-stu-id="8a237-131">On inbound calls to a service, the inspector is invoked after the request contents are deserialized and dispatched to the service operation and before the response contents are serialized and sent to the client.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a237-132">L'exemple de code suivant montre une implémentation <xref:System.ServiceModel.Dispatcher.IParameterInspector> qui :</span><span class="sxs-lookup"><span data-stu-id="8a237-132">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="8a237-133">Écrit le nom d'opération et la valeur de retour à la console après qu'une réponse a été désérialisée par le service ou qu'une demande a été sérialisée par un client.</span><span class="sxs-lookup"><span data-stu-id="8a237-133">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="8a237-134">Écrit le nom d'opération à la console après la désérialisation d'une réponse sur le client ou après qu'une réponse soit sérialisée sur le service.</span><span class="sxs-lookup"><span data-stu-id="8a237-134">Writes the operation name to the console after deserializing a response on the client or after a response is serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="8a237-135">L'exemple de code suivant montre comment utiliser <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> ou <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> pour insérer des objets <xref:System.ServiceModel.Dispatcher.IParameterInspector>.</span><span class="sxs-lookup"><span data-stu-id="8a237-135">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>