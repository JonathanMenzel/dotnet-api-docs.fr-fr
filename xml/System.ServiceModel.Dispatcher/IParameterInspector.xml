<Type Name="IParameterInspector" FullName="System.ServiceModel.Dispatcher.IParameterInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="72588091c87250a2b84de5c8bfcbde5c02928849" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37615902" /></Metadata><TypeSignature Language="C#" Value="public interface IParameterInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IParameterInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IParameterInspector" />
  <TypeSignature Language="F#" Value="type IParameterInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Définit le contrat implémenté par les inspecteurs de paramètre personnalisés qui activent inspection ou la modification d'informations avant et après les appels sur le client ou le service.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez l'interface <xref:System.ServiceModel.Dispatcher.IParameterInspector> pour créer un inspecteur de paramètre personnalisé qui peut afficher et modifier le contenu d'un appel avant et après l'appel dans les applications clientes ou de service.  
  
 Sur les appels sortants d'un client, l'inspecteur est appelé avant que le contenu de la demande soit sérialisé et envoyé au service. L'inspecteur est également appelé après que la réponse a été désérialisée mais avant que les valeurs de retour aient été distribuées à la méthode proxy.  
  
 Sur les appels entrants à un service, l'inspecteur est appelé après que les paramètres ont été désérialisés mais avant qu'ils soient distribués à l'opération de service.  
  
 Utilisez les propriétés <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> ou <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> pour ajouter une implémentation <xref:System.ServiceModel.Dispatcher.IParameterInspector> à la collection d'inspecteurs pour une opération particulière.  
  
 **Remarque** aux développeurs et administrateurs doivent vous assurer que l’interaction avec d’autres <xref:System.ServiceModel.Dispatcher.IParameterInspector> implémentations est comprise.  
  
   
  
## Examples  
 L'exemple de code suivant montre une implémentation <xref:System.ServiceModel.Dispatcher.IParameterInspector> qui :  
  
-   Écrit le nom d'opération et la valeur de retour à la console après qu'une réponse a été désérialisée par le service ou qu'une demande a été sérialisée par un client.  
  
-   Écrit le nom d'opération à la console après la désérialisation d'une réponse sur le client ou après qu'une réponse a été sérialisée sur le service.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 L'exemple de code suivant montre comment utiliser <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> ou <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> pour insérer des objets <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterCall">
      <MemberSignature Language="C#" Value="public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterCall (operationName As String, outputs As Object(), returnValue As Object, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ outputs, System::Object ^ returnValue, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterCall : string * obj[] * obj * obj -&gt; unit" Usage="iParameterInspector.AfterCall (operationName, outputs, returnValue, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="outputs" Type="System.Object[]" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationName">Nom de l'opération appelée.</param>
        <param name="outputs">Tout objet de sortie.</param>
        <param name="returnValue">Valeur de retour de l'opération.</param>
        <param name="correlationState">Tout état de corrélation retourné par la méthode <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />, ou valeur <see langword="null" />.</param>
        <summary>Appelé après que les appels clients ont été retournés et avant que les réponses de service soient envoyées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sur les appels sortants d'un client, l'inspecteur est appelé avant que le contenu de la demande soit sérialisé et envoyé au service. L'inspecteur est également appelé après que la réponse a été désérialisée mais avant que les valeurs de retour aient été distribuées à la méthode proxy.  
  
 Sur les appels entrants à un service, l'inspecteur est appelé après que les paramètres ont été désérialisés mais avant qu'ils soient distribués à l'opération de service.  
  
   
  
## Examples  
 L'exemple de code suivant montre une implémentation <xref:System.ServiceModel.Dispatcher.IParameterInspector> qui :  
  
-   Écrit le nom d'opération et la valeur de retour à la console après qu'une réponse a été désérialisée par le service ou qu'une demande a été sérialisée par un client.  
  
-   Écrit le nom d'opération à la console après la désérialisation d'une réponse sur le client ou après qu'une réponse a été sérialisée sur le service.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 L'exemple de code suivant montre comment utiliser <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> ou <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> pour insérer des objets <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCall">
      <MemberSignature Language="C#" Value="public object BeforeCall (string operationName, object[] inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeCall(string operationName, object[] inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeCall (operationName As String, inputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="abstract member BeforeCall : string * obj[] -&gt; obj" Usage="iParameterInspector.BeforeCall (operationName, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="inputs" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="operationName">Nom de l'opération.</param>
        <param name="inputs">Objets passés à la méthode par le client.</param>
        <summary>Appelé avant que les appels clients soient envoyés et après que les réponses de service sont retournées.</summary>
        <returns>État de corrélation retourné comme paramètre <paramref name="correlationState" /> dans <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />. Retournez la valeur <see langword="null" /> si vous ne prévoyez pas d'utiliser l'état de corrélation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sur les appels sortants d'un client, l'inspecteur est appelé avant que le contenu de la demande soit sérialisé et envoyé au service. L'inspecteur est également appelé après que la réponse a été désérialisée mais avant que les valeurs de retour aient été distribuées à la méthode proxy.  
  
 Sur les appels entrants à un service, l'inspecteur est appelé après que le contenu de la demande a été désérialisé et distribué à l'opération de service et avant que le contenu de la réponse soit sérialisé et envoyé au client.  
  
   
  
## Examples  
 L'exemple de code suivant montre une implémentation <xref:System.ServiceModel.Dispatcher.IParameterInspector> qui :  
  
-   Écrit le nom d'opération et la valeur de retour à la console après qu'une réponse a été désérialisée par le service ou qu'une demande a été sérialisée par un client.  
  
-   Écrit le nom d'opération à la console après la désérialisation d'une réponse sur le client ou après qu'une réponse soit sérialisée sur le service.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 L'exemple de code suivant montre comment utiliser <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> ou <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> pour insérer des objets <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>