<Type Name="MessageFilter" FullName="System.ServiceModel.Dispatcher.MessageFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f7be2019a6908f866e6c2195411e3fa772cdd82" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36614864" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageFilter abstract" />
  <TypeSignature Language="F#" Value="type MessageFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d84f8-101">Classe de base <see langword="abstract" /> pour les différentes classes de filtres utilisées pour interroger des messages.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d84f8-101">
          <see langword="abstract" /> base class for different classes of filters used to query messages.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d84f8-102"><xref:System.ServiceModel.Dispatcher.MessageFilter> est une classe `abstract` que les développeurs implémentent pour spécifier les critères à utiliser pour inspecter les messages.</span><span class="sxs-lookup"><span data-stu-id="d84f8-102"><xref:System.ServiceModel.Dispatcher.MessageFilter> is an `abstract` class that developers implement in order to specify the criteria to use for inspecting messages.</span></span> <span data-ttu-id="d84f8-103">En général, les filtres sont utilisés par une application de point de terminaison pour déterminer ce qu'il faut faire d'un message suite à un examen d'une partie du message.</span><span class="sxs-lookup"><span data-stu-id="d84f8-103">Typically, filters are used by an endpoint application to determine what to do with a message based on an examination of some part of the message.</span></span> <span data-ttu-id="d84f8-104">Par exemple, un processus de mise en file d’attente peut utiliser une requête XPath 1.0 pour vérifier l’élément prioritaire d’un en-tête connu afin de déterminer s’il faut déplacer un message au début de la file d’attente.</span><span class="sxs-lookup"><span data-stu-id="d84f8-104">A queuing process, for example, can use an XPath 1.0 query to check the priority element of a known header to determine whether to move a message to the front of the queue.</span></span>  
  
 <span data-ttu-id="d84f8-105">Les filtres sont stockés dans une table de filtres qui implémente <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>.</span><span class="sxs-lookup"><span data-stu-id="d84f8-105">Filters are stored in a filter table that implements <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>.</span></span> <span data-ttu-id="d84f8-106">Chaque filtre de la table est associé aux données de filtre spécifiées qui peuvent être utilisées pour indiquer les actions à exécuter si un message correspond au filtre.</span><span class="sxs-lookup"><span data-stu-id="d84f8-106">Each filter in the table is associated with specified filter data that can be used to indicate what actions to take if a message matches the filter.</span></span> <span data-ttu-id="d84f8-107">Les méthodes <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> sont utilisées pour déterminer si un message correspond à un filtre.</span><span class="sxs-lookup"><span data-stu-id="d84f8-107">The <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> methods are used to determine if a message satisfies a filter.</span></span>  
  
 <span data-ttu-id="d84f8-108">Les critères utilisés par un filtre ne peuvent pas être modifiés une fois que le filtre est construit car les tables de filtres ne dispose d'aucun moyen de détecter une modification.</span><span class="sxs-lookup"><span data-stu-id="d84f8-108">The criteria used by a filter cannot be changed once the filter is constructed because the filter tables have no way to detect a change.</span></span> <span data-ttu-id="d84f8-109">La seule façon de modifier les critères d'un filtre est de construire un nouveau filtre et de supprimer le filtre existant.</span><span class="sxs-lookup"><span data-stu-id="d84f8-109">The only way to modify the criteria of a filter is to construct a new one and delete the existing filter.</span></span>  
  
 <span data-ttu-id="d84f8-110">Les classes suivantes implémentent la classe `abstract`<xref:System.ServiceModel.Dispatcher.MessageFilter> :</span><span class="sxs-lookup"><span data-stu-id="d84f8-110">The following classes implement the `abstract`<xref:System.ServiceModel.Dispatcher.MessageFilter> class:</span></span>  
  
-   <span data-ttu-id="d84f8-111"><xref:System.ServiceModel.Dispatcher.XPathMessageFilter> utilise une expression Xpath 1.0 pour spécifier les critères d'une correspondance.</span><span class="sxs-lookup"><span data-stu-id="d84f8-111"><xref:System.ServiceModel.Dispatcher.XPathMessageFilter> uses an XPath 1.0 expression to specify the criteria for a match.</span></span>  
  
-   <span data-ttu-id="d84f8-112"><xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> correspond à tous les messages.</span><span class="sxs-lookup"><span data-stu-id="d84f8-112"><xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> matches all messages.</span></span>  
  
-   <span data-ttu-id="d84f8-113"><xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> ne correspond à aucun message.</span><span class="sxs-lookup"><span data-stu-id="d84f8-113"><xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> matches none of the messages.</span></span>  
  
-   <span data-ttu-id="d84f8-114"><xref:System.ServiceModel.Dispatcher.ActionMessageFilter> vérifie si l'action d'un message est incluse à un ensemble d'actions spécifié.</span><span class="sxs-lookup"><span data-stu-id="d84f8-114"><xref:System.ServiceModel.Dispatcher.ActionMessageFilter> tests whether the action of a message is one of a specified set of actions.</span></span>  
  
-   <span data-ttu-id="d84f8-115"><xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> vérifie si un message correspond à une adresse de point de terminaison spécifiée.</span><span class="sxs-lookup"><span data-stu-id="d84f8-115"><xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> tests whether a message satisfies a specified endpoint address.</span></span>  
  
 <span data-ttu-id="d84f8-116"><xref:System.ServiceModel.Channels.ChannelListenerBase%601> est une classe de base `abstract` que vous pouvez utiliser pour écrire des écouteurs de non mise en file d'attente.</span><span class="sxs-lookup"><span data-stu-id="d84f8-116"><xref:System.ServiceModel.Channels.ChannelListenerBase%601> is an `abstract` base class that you can use for writing non-queuing listeners.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d84f8-117">En cas d'appel dans une classe dérivée, initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-117">When called in a derived class, initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d84f8-118">Le constructeur est protégé de sorte que seuls les filtres qui dérivent de <xref:System.ServiceModel.Dispatcher.MessageFilter> peuvent être instanciés.</span><span class="sxs-lookup"><span data-stu-id="d84f8-118">The constructor is protected so that only filters that derive from <xref:System.ServiceModel.Dispatcher.MessageFilter> can be instantiated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal virtual System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; virtual System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberSignature Language="F#" Value="abstract member CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;&#xA;override this.CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;" Usage="messageFilter.CreateFilterTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData">
          <span data-ttu-id="d84f8-119">Données associées aux filtres de la table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-119">Data associated with the filters in the table.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="d84f8-120">Crée une table de filtres pour un filtre qui a un type de données spécifié qui lui est associé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-120">Creates a filter table for a filter that has a specified type of data associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d84f8-121">Objet <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> auquel peuvent être ajoutés les filtres associés à <paramref name="FilterData" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-121">An <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> object to which filters associated with <paramref name="FilterData" /> can be added.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d84f8-122">Cette méthode est destinée à être appelée par <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>.</span><span class="sxs-lookup"><span data-stu-id="d84f8-122">This method is intended to be called by <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>.</span></span> <span data-ttu-id="d84f8-123">Les utilisateurs doivent créer une table de filtres en appelant un constructeur prévu à cet effet.</span><span class="sxs-lookup"><span data-stu-id="d84f8-123">Users should create a filter table by calling a constructor for the filter table.</span></span> <span data-ttu-id="d84f8-124">L'implémentation par défaut de cette méthode retourne une table de filtres qui appelle la méthode <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> de chaque filtre de façon séquentielle.</span><span class="sxs-lookup"><span data-stu-id="d84f8-124">The default implementation of this method returns a filter table that calls the <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> method of each filter sequentially.</span></span> <span data-ttu-id="d84f8-125">Substituez cette méthode pour associer une table de filtres personnalisée lors de l'implémentation d'un filtre.</span><span class="sxs-lookup"><span data-stu-id="d84f8-125">Override this method to associate a custom filter table when implementing a filter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d84f8-126">En cas de substitution dans une classe dérivée, vérifie si un message ou un message mis en mémoire tampon correspond aux critères d'un filtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-126">When overridden in a derived class, tests whether a message or a buffered message satisfies the criteria of a filter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d84f8-127">La différence entre les deux surcharges est que l'une prend un paramètre <xref:System.ServiceModel.Channels.Message> et n'est pas autorisée à examiner le corps.</span><span class="sxs-lookup"><span data-stu-id="d84f8-127">The difference between the two overloads is that one takes a <xref:System.ServiceModel.Channels.Message> parameter and is not permitted to examine the body.</span></span> <span data-ttu-id="d84f8-128">L'autre prend un paramètre <xref:System.ServiceModel.Channels.MessageBuffer> et peut examiner n'importe quelle partie du message.</span><span class="sxs-lookup"><span data-stu-id="d84f8-128">The other takes a <xref:System.ServiceModel.Channels.MessageBuffer> parameter and can examine any part of the message.</span></span> <span data-ttu-id="d84f8-129">Les en-tête de messages sont automatiquement mis en mémoire tampon et peuvent être inspectés par un filtre sans être consommés.</span><span class="sxs-lookup"><span data-stu-id="d84f8-129">Message headers are automatically buffered and can be inspected by a filter without being consumed.</span></span> <span data-ttu-id="d84f8-130">Toutefois, si le corps doit être inspecté par un filtre, la totalité du message doit donc être mise en mémoire tampon car un corps de message non mis en mémoire tampon peut être consommé par une requête et son contenu peut être détruit.</span><span class="sxs-lookup"><span data-stu-id="d84f8-130">But if the body is to be inspected by a filter, then the entire message must be buffered because an unbuffered message body can be consumed by a query and its contents destroyed.</span></span>  
  
 <span data-ttu-id="d84f8-131">Utilisez <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> si l'examen du corps n'est pas requis.</span><span class="sxs-lookup"><span data-stu-id="d84f8-131">Use <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> if examination of the body is not required.</span></span> <span data-ttu-id="d84f8-132">Utilisez <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> si l'examen du corps du message est requis.</span><span class="sxs-lookup"><span data-stu-id="d84f8-132">Use <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> if examination of the message body is required.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="d84f8-133">
            <para>
              <see langword="Null" /> les messages ne sont pas valides et provoquent un <see cref="T:System.ArgumentNullException" /> levée.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-133">
              <para>
                <see langword="Null" /> messages are invalid, and should cause an <see cref="T:System.ArgumentNullException" /> to be thrown.</para>
            </span>
          </span>
        </block>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.Message -&gt; bool" Usage="messageFilter.Match message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="d84f8-134">Objet <see cref="T:System.ServiceModel.Channels.Message" /> à tester.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-134">The <see cref="T:System.ServiceModel.Channels.Message" /> object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d84f8-135">En cas de substitution dans une classe dérivée, vérifie si un message correspond aux critères de filtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-135">When overridden in a derived class, tests whether a message satisfies the filter criteria.</span>
          </span>
          <span data-ttu-id="d84f8-136">Le corps ne peut pas être examiné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-136">The body cannot be examined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d84f8-137">
            <see langword="true" /> si l'objet <see cref="T:System.ServiceModel.Channels.Message" /> correspond aux critères de filtre ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-137">
              <see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.Message" /> object satisfies the filter criteria; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d84f8-138">Cette méthode ne peut pas inspecter le contenu du corps du message.</span><span class="sxs-lookup"><span data-stu-id="d84f8-138">This method cannot inspect the contents of the message body.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="d84f8-139">
            <para>Si le filtre tente d’examiner le corps d’un message non tamponné, alors que le filtre doit lever une <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" />. Elle ne doit pas retourner <see langword="false" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-139">
              <para>If the filter attempts to examine the body of an unbuffered message, then the filter must throw an <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" />. It should not return <see langword="false" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Match (buffer As MessageBuffer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.MessageBuffer -&gt; bool" Usage="messageFilter.Match buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="d84f8-140">Objet <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> à tester.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-140">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d84f8-141">En cas de substitution dans une classe dérivée, vérifie si un message mis en mémoire tampon correspond aux critères d'un filtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-141">When overridden in a derived class, tests whether a buffered message satisfies the criteria of a filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d84f8-142">
            <see langword="true" /> si l'objet <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> correspond aux critères de filtre ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d84f8-142">
              <see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object satisfies the filter criteria; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d84f8-143">Le message doit être entièrement mis en mémoire tampon si le corps doit être inspecté par le filtre.</span><span class="sxs-lookup"><span data-stu-id="d84f8-143">The message must be fully buffered if the body is to be inspected by the filter.</span></span> <span data-ttu-id="d84f8-144">Le corps de <xref:System.ServiceModel.Channels.MessageBuffer> est entièrement mis en mémoire tampon et peut par conséquent être inspecté par un filtre.</span><span class="sxs-lookup"><span data-stu-id="d84f8-144">The body of the <xref:System.ServiceModel.Channels.MessageBuffer> is fully buffered and therefore can be inspected by a filter.</span></span> <span data-ttu-id="d84f8-145">Le corps d'un <xref:System.ServiceModel.Channels.Message> qui n'a pas été entièrement mis en mémoire tampon peut être consommé par l'inspection de filtre.</span><span class="sxs-lookup"><span data-stu-id="d84f8-145">The body of a <xref:System.ServiceModel.Channels.Message> that has not been fully buffered may be consumed by the filter inspection.</span></span> <span data-ttu-id="d84f8-146">L'élément d'en-tête d'un <xref:System.ServiceModel.Channels.Message> est automatiquement mis en mémoire tampon et peut par conséquent être inspecté sans être consommé.</span><span class="sxs-lookup"><span data-stu-id="d84f8-146">The header element of a <xref:System.ServiceModel.Channels.Message> is automatically buffered and therefore can be inspected without being consumed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>