<Type Name="MessageFilter" FullName="System.ServiceModel.Dispatcher.MessageFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="09416cea98600bff685c2b1432b5ba70f057f51f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39849451" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageFilter abstract" />
  <TypeSignature Language="F#" Value="type MessageFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Classe de base <see langword="abstract" /> pour les différentes classes de filtres utilisées pour interroger des messages.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.MessageFilter> est une classe `abstract` que les développeurs implémentent pour spécifier les critères à utiliser pour inspecter les messages. En général, les filtres sont utilisés par une application de point de terminaison pour déterminer ce qu'il faut faire d'un message suite à un examen d'une partie du message. Par exemple, un processus de mise en file d’attente peut utiliser une requête XPath 1.0 pour vérifier l’élément prioritaire d’un en-tête connu afin de déterminer s’il faut déplacer un message au début de la file d’attente.  
  
 Les filtres sont stockés dans une table de filtres qui implémente <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>. Chaque filtre de la table est associé aux données de filtre spécifiées qui peuvent être utilisées pour indiquer les actions à exécuter si un message correspond au filtre. Les méthodes <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> sont utilisées pour déterminer si un message correspond à un filtre.  
  
 Les critères utilisés par un filtre ne peuvent pas être modifiés une fois que le filtre est construit car les tables de filtres ne dispose d'aucun moyen de détecter une modification. La seule façon de modifier les critères d'un filtre est de construire un nouveau filtre et de supprimer le filtre existant.  
  
 Les classes suivantes implémentent la classe `abstract`<xref:System.ServiceModel.Dispatcher.MessageFilter> :  
  
-   <xref:System.ServiceModel.Dispatcher.XPathMessageFilter> utilise une expression Xpath 1.0 pour spécifier les critères d'une correspondance.  
  
-   <xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> correspond à tous les messages.  
  
-   <xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> ne correspond à aucun message.  
  
-   <xref:System.ServiceModel.Dispatcher.ActionMessageFilter> vérifie si l'action d'un message est incluse à un ensemble d'actions spécifié.  
  
-   <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> vérifie si un message correspond à une adresse de point de terminaison spécifiée.  
  
 <xref:System.ServiceModel.Channels.ChannelListenerBase%601> est une classe de base `abstract` que vous pouvez utiliser pour écrire des écouteurs de non mise en file d'attente.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>En cas d'appel dans une classe dérivée, initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le constructeur est protégé de sorte que seuls les filtres qui dérivent de <xref:System.ServiceModel.Dispatcher.MessageFilter> peuvent être instanciés.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal virtual System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; virtual System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberSignature Language="F#" Value="abstract member CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;&#xA;override this.CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;" Usage="messageFilter.CreateFilterTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData">Données associées aux filtres de la table.</typeparam>
        <summary>Crée une table de filtres pour un filtre qui a un type de données spécifié qui lui est associé.</summary>
        <returns>Objet <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> auquel peuvent être ajoutés les filtres associés à <paramref name="FilterData" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est destinée à être appelée par <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>. Les utilisateurs doivent créer une table de filtres en appelant un constructeur prévu à cet effet. L'implémentation par défaut de cette méthode retourne une table de filtres qui appelle la méthode <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> de chaque filtre de façon séquentielle. Substituez cette méthode pour associer une table de filtres personnalisée lors de l'implémentation d'un filtre.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, vérifie si un message ou un message mis en mémoire tampon correspond aux critères d'un filtre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La différence entre les deux surcharges est que l'une prend un paramètre <xref:System.ServiceModel.Channels.Message> et n'est pas autorisée à examiner le corps. L'autre prend un paramètre <xref:System.ServiceModel.Channels.MessageBuffer> et peut examiner n'importe quelle partie du message. Les en-tête de messages sont automatiquement mis en mémoire tampon et peuvent être inspectés par un filtre sans être consommés. Toutefois, si le corps doit être inspecté par un filtre, la totalité du message doit donc être mise en mémoire tampon car un corps de message non mis en mémoire tampon peut être consommé par une requête et son contenu peut être détruit.  
  
 Utilisez <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> si l'examen du corps n'est pas requis. Utilisez <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> si l'examen du corps du message est requis.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Null" /> les messages ne sont pas valides et provoquent une <see cref="T:System.ArgumentNullException" /> levée.</para>
        </block>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.Message -&gt; bool" Usage="messageFilter.Match message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message">Objet <see cref="T:System.ServiceModel.Channels.Message" /> à tester.</param>
        <summary>En cas de substitution dans une classe dérivée, vérifie si un message correspond aux critères de filtre. Le corps ne peut pas être examiné.</summary>
        <returns>
          <see langword="true" /> si l'objet <see cref="T:System.ServiceModel.Channels.Message" /> correspond aux critères de filtre ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne peut pas inspecter le contenu du corps du message.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si le filtre tente d’examiner le corps d’un message sans tampon, le filtre doit lever une <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" />. Il ne doit pas retourner <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Match (buffer As MessageBuffer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.MessageBuffer -&gt; bool" Usage="messageFilter.Match buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer">Objet <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> à tester.</param>
        <summary>En cas de substitution dans une classe dérivée, vérifie si un message mis en mémoire tampon correspond aux critères d'un filtre.</summary>
        <returns>
          <see langword="true" /> si l'objet <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> correspond aux critères de filtre ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le message doit être entièrement mis en mémoire tampon si le corps doit être inspecté par le filtre. Le corps de <xref:System.ServiceModel.Channels.MessageBuffer> est entièrement mis en mémoire tampon et peut par conséquent être inspecté par un filtre. Le corps d'un <xref:System.ServiceModel.Channels.Message> qui n'a pas été entièrement mis en mémoire tampon peut être consommé par l'inspection de filtre. L'élément d'en-tête d'un <xref:System.ServiceModel.Channels.Message> est automatiquement mis en mémoire tampon et peut par conséquent être inspecté sans être consommé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>