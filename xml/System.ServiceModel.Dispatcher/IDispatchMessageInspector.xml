<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="338473ae149afc3abbbba5fe33991b0f472b9e6d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39855096" /></Metadata><TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Définit les méthodes qui activent l'inspection ou la modification personnalisée de messages d'application entrants et sortants dans les applications de service.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> pour inspecter ou modifier des messages d'application entrants ou sortants, soit avant de distribuer un message de demande à une opération, soit avant de retourner un message de réponse à un appelant. Il existe un grand nombre de scénarios qui requièrent l'interception des messages avant d'appeler l'opération à laquelle ils sont destinés. Par exemple, vous pouvez enregistrer des messages d'application entrants ou exécuter une fonctionnalité basée sur un en-tête de message.  
  
 En général, les inspecteurs de message sont insérés par un comportement de service (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), un comportement de point de terminaison (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) ou un comportement de contrat (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>). Le comportement ajoute ensuite l'inspecteur de message à la collection <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>. Pour plus d’informations sur l’extension de l’exécution à l’aide de comportements, consultez [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
-   La méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> active le comportement personnalisé après la réception du message mais avant sa distribution à l'opération prévue.  
  
-   La méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> active le comportement personnalisé une fois que l'opération retourne mais avant que la réponse soit envoyée.  
  
> [!NOTE]
>  Les objets <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> sont toujours appelés au même moment au cours de la distribution du message, que l'opération soit unidirectionnelle ou demande/réponse.  
  
   
  
## Examples  
 L'exemple de code suivant illustre un <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> de base qui écrit une chaîne à la console lorsqu'il est appelé.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 L'exemple de code suivant illustre l'implémentation d'un <xref:System.ServiceModel.Description.IServiceBehavior> qui ajoute l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> à la collection <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 L'exemple de code suivant illustre l'utilisation d'un ficher de configuration de l'application pour charger le comportement de service qui insère l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest :  * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">Message de demande.</param>
        <param name="channel">Canal entrant.</param>
        <param name="instanceContext">Instance de service en cours.</param>
        <summary>Appelé après la réception d'un message mais avant que le message soit distribué à l'opération prévue.</summary>
        <returns>Objet utilisé pour faire correspondre l'état. Cet objet est retourné à la méthode <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> pour inspecter ou modifier le message entrant, le canal client qui l'a fourni et l'instance de service en cours. La valeur de retour peut être tout objet que vous souhaitez utiliser à des fins de corrélation ; elle vous est retournée comme paramètre `correlationState` dans la méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>.  
  
> [!IMPORTANT]
>  Vous ne pouvez pas utiliser le corps du message, sauf si vous mettez tout le message en mémoire tampon et que vous faites une copie. Si vous le faites, vous devez faire deux copies du message : une pour inspecter et l'autre pour remplacer le paramètre `request`.  
  
   
  
## Examples  
 L'exemple de code suivant illustre un <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> de base qui écrit une chaîne à la console lorsqu'il est appelé.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 L'exemple de code suivant illustre l'implémentation d'un <xref:System.ServiceModel.Description.IServiceBehavior> qui ajoute l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> à la collection <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 L'exemple de code suivant illustre l'utilisation d'un ficher de configuration de l'application pour charger le comportement de service qui insère l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply :  * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">Message de réponse. Cette valeur est Null si l'opération est une unidirectionnelle.</param>
        <param name="correlationState">Objet de corrélation retourné par la méthode <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />.</param>
        <summary>Appelé après le retour de l'opération mais avant que le message de réponse soit envoyé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> pour exécuter le comportement personnalisé avant d'envoyer le message de retour. L'`correlationState` est l'objet retourné par la méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> que vous pouvez utiliser pour effectuer la corrélation entre des appels entrants et sortants pour prendre en charge votre comportement.  
  
   
  
## Examples  
 L'exemple de code suivant illustre un <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> de base qui écrit une chaîne à la console lorsqu'il est appelé.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 L'exemple de code suivant illustre l'implémentation d'un <xref:System.ServiceModel.Description.IServiceBehavior> qui ajoute l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> à la collection <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 L'exemple de code suivant illustre l'utilisation d'un ficher de configuration de l'application pour charger le comportement de service qui insère l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>