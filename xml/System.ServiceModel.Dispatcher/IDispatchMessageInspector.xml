<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b993105bcecb3322ed5684bf4865f5440f8cc008" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d0049-101">Définit les méthodes qui activent l'inspection ou la modification personnalisée de messages d'application entrants et sortants dans les applications de service.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d0049-101">Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0049-102">Implémentez <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> pour inspecter ou modifier des messages d'application entrants ou sortants, soit avant de distribuer un message de demande à une opération, soit avant de retourner un message de réponse à un appelant.</span><span class="sxs-lookup"><span data-stu-id="d0049-102">Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</span></span> <span data-ttu-id="d0049-103">Il existe un grand nombre de scénarios qui requièrent l'interception des messages avant d'appeler l'opération à laquelle ils sont destinés.</span><span class="sxs-lookup"><span data-stu-id="d0049-103">There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</span></span> <span data-ttu-id="d0049-104">Par exemple, vous pouvez enregistrer des messages d'application entrants ou exécuter une fonctionnalité basée sur un en-tête de message.</span><span class="sxs-lookup"><span data-stu-id="d0049-104">For example, you can log incoming application messages or perform some feature based on a message header.</span></span>  
  
 <span data-ttu-id="d0049-105">En général, les inspecteurs de message sont insérés par un comportement de service (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), un comportement de point de terminaison (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) ou un comportement de contrat (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="d0049-105">Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span></span> <span data-ttu-id="d0049-106">Le comportement ajoute ensuite l'inspecteur de message à la collection <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d0049-106">The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span> <span data-ttu-id="d0049-107">Pour plus d’informations sur l’extension de l’exécution à l’aide de comportements, consultez [extension de ServiceHost et de la couche de modèle de Service](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span><span class="sxs-lookup"><span data-stu-id="d0049-107">For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span></span>  
  
-   <span data-ttu-id="d0049-108">La méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> active le comportement personnalisé après la réception du message mais avant sa distribution à l'opération prévue.</span><span class="sxs-lookup"><span data-stu-id="d0049-108">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</span></span>  
  
-   <span data-ttu-id="d0049-109">La méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> active le comportement personnalisé une fois que l'opération retourne mais avant que la réponse soit envoyée.</span><span class="sxs-lookup"><span data-stu-id="d0049-109">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0049-110">Les objets <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> sont toujours appelés au même moment au cours de la distribution du message, que l'opération soit unidirectionnelle ou demande/réponse.</span><span class="sxs-lookup"><span data-stu-id="d0049-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0049-111">L'exemple de code suivant illustre un <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> de base qui écrit une chaîne à la console lorsqu'il est appelé.</span><span class="sxs-lookup"><span data-stu-id="d0049-111">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="d0049-112">L'exemple de code suivant illustre l'implémentation d'un <xref:System.ServiceModel.Description.IServiceBehavior> qui ajoute l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> à la collection <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d0049-112">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="d0049-113">L'exemple de code suivant illustre l'utilisation d'un ficher de configuration de l'application pour charger le comportement de service qui insère l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="d0049-113">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="d0049-114">Message de demande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0049-114">The request message.</span>
          </span>
        </param>
        <param name="channel">
          <span data-ttu-id="d0049-115">Canal entrant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0049-115">The incoming channel.</span>
          </span>
        </param>
        <param name="instanceContext">
          <span data-ttu-id="d0049-116">Instance de service en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0049-116">The current service instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0049-117">Appelé après la réception d'un message mais avant que le message soit distribué à l'opération prévue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0049-117">Called after an inbound message has been received but before the message is dispatched to the intended operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0049-118">Objet utilisé pour faire correspondre l'état.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0049-118">The object used to correlate state.</span>
          </span>
          <span data-ttu-id="d0049-119">Cet objet est retourné à la méthode <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0049-119">This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0049-120">Utilisez la méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> pour inspecter ou modifier le message entrant, le canal client qui l'a fourni et l'instance de service en cours.</span><span class="sxs-lookup"><span data-stu-id="d0049-120">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</span></span> <span data-ttu-id="d0049-121">La valeur de retour peut être tout objet que vous souhaitez utiliser à des fins de corrélation ; elle vous est retournée comme paramètre `correlationState` dans la méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>.</span><span class="sxs-lookup"><span data-stu-id="d0049-121">The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d0049-122">Vous ne pouvez pas utiliser le corps du message, sauf si vous mettez tout le message en mémoire tampon et que vous faites une copie.</span><span class="sxs-lookup"><span data-stu-id="d0049-122">You cannot use the body of the message unless you buffer the entire message and make a copy.</span></span> <span data-ttu-id="d0049-123">Si vous le faites, vous devez faire deux copies du message : une pour inspecter et l'autre pour remplacer le paramètre `request`.</span><span class="sxs-lookup"><span data-stu-id="d0049-123">If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0049-124">L'exemple de code suivant illustre un <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> de base qui écrit une chaîne à la console lorsqu'il est appelé.</span><span class="sxs-lookup"><span data-stu-id="d0049-124">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="d0049-125">L'exemple de code suivant illustre l'implémentation d'un <xref:System.ServiceModel.Description.IServiceBehavior> qui ajoute l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> à la collection <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d0049-125">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="d0049-126">L'exemple de code suivant illustre l'utilisation d'un ficher de configuration de l'application pour charger le comportement de service qui insère l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="d0049-126">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">
          <span data-ttu-id="d0049-127">Message de réponse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0049-127">The reply message.</span>
          </span>
          <span data-ttu-id="d0049-128">Cette valeur est Null si l'opération est une unidirectionnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0049-128">This value is null if the operation is one way.</span>
          </span>
        </param>
        <param name="correlationState">
          <span data-ttu-id="d0049-129">Objet de corrélation retourné par la méthode <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0049-129">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0049-130">Appelé après le retour de l'opération mais avant que le message de réponse soit envoyé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0049-130">Called after the operation has returned but before the reply message is sent.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0049-131">Utilisez la méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> pour exécuter le comportement personnalisé avant d'envoyer le message de retour.</span><span class="sxs-lookup"><span data-stu-id="d0049-131">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message.</span></span> <span data-ttu-id="d0049-132">L'`correlationState` est l'objet retourné par la méthode <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> que vous pouvez utiliser pour effectuer la corrélation entre des appels entrants et sortants pour prendre en charge votre comportement.</span><span class="sxs-lookup"><span data-stu-id="d0049-132">The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0049-133">L'exemple de code suivant illustre un <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> de base qui écrit une chaîne à la console lorsqu'il est appelé.</span><span class="sxs-lookup"><span data-stu-id="d0049-133">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="d0049-134">L'exemple de code suivant illustre l'implémentation d'un <xref:System.ServiceModel.Description.IServiceBehavior> qui ajoute l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> à la collection <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d0049-134">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="d0049-135">L'exemple de code suivant illustre l'utilisation d'un ficher de configuration de l'application pour charger le comportement de service qui insère l'`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="d0049-135">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>