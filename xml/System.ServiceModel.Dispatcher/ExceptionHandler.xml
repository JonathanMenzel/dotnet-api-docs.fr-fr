<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExceptionHandler.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac598fb63a76f22101de50ac6bff7487cd55f5f86ae.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98fb63a76f22101de50ac6bff7487cd55f5f86ae</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>Extend the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.</source>
          <target state="translated">Étendez la classe <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> pour créer un gestionnaire d’exceptions pour les exceptions non gérées qui se produisent dans le runtime Windows Communication Foundation (WCF).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>Extend the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> class and override the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> method to determine whether an exception should terminate the application.</source>
          <target state="translated">Étendez la classe <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> et substituez la méthode <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> pour déterminer si une exception doit fermer l'application.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>Then create a new instance of your custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> class and assign it to the static <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph> property prior to creating <ph id="ph4">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> clients or services.</source>
          <target state="translated">Créez ensuite une nouvelle instance de votre classe <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> personnalisée et assignez-la à la propriété <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph> statique avant de la création de clients <ph id="ph4">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> ou de services.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>The following code example shows an implementation of the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> abstract class that overrides the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> method.</source>
          <target state="translated">L'exemple de code suivant présente une implémentation de la classe abstraite <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> qui substitue la méthode <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>The following code example shows how to enable the custom <ph id="ph1">`MyExceptionHandler`</ph> for unhandled exceptions that occur within the <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> runtime.</source>
          <target state="translated">L'exemple de code suivant indique comment activer le <ph id="ph1">`MyExceptionHandler`</ph> personnalisé pour les exceptions non gérées qui se produisent lors de l'exécution d'<ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle">
          <source>Gets an instance of <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> that handles all exceptions.</source>
          <target state="translated">Obtient une instance de <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> qui gère toutes les exceptions.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle">
          <source>An <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> object that returns <ph id="ph2">&lt;see langword="true" /&gt;</ph> for all exceptions.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> qui retourne <ph id="ph2">&lt;see langword="true" /&gt;</ph> pour toutes les exceptions.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>Gets or sets the current <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> implementation for the application domain.</source>
          <target state="translated">Obtient ou définit l'implémentation du <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> actuel pour le domaine d'application.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>Assign a custom <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> object that receives unhandled exceptions that occur on asynchronous <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> threads.</source>
          <target state="translated">Assignez un objet <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> personnalisé qui reçoit des exceptions non gérées qui se produisent sur les threads <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> asynchrones.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>By default, the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, and unhandled exceptions on asynchronous <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> threads terminate the application.</source>
          <target state="translated">Par défaut, la propriété <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph> a la valeur <ph id="ph2">`null`</ph> et les exceptions non gérées sur les threads <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> asynchrones ferment l'application.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>Set this property to an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> object to receive and react to these exceptions.</source>
          <target state="translated">Affectez cette propriété à un objet <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> pour recevoir et réagir à ces exceptions.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>If an unhandled exception occurs on an asynchronous <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> thread and reaches this handler, the state of the application domain may be compromised.</source>
          <target state="translated">Si une exception non gérée se produit sur un thread <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> asynchrone et atteint ce gestionnaire, l'état du domaine d'application peut être compromis.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> should not return <ph id="ph2">`true`</ph> for these exceptions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> ne doit pas retourner <ph id="ph2">`true`</ph> pour ces exceptions.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The exception the occurred within the <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> runtime and which may terminate the application.</source>
          <target state="translated">Exception qui s'est produite lors de l'exécution d'<ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> et qui peut fermer l'application.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>When overridden in a derived class, returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the exception has been handled, or <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the exception should be rethrown and the application terminated.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, retourne <ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'exception a été gérée ou <ph id="ph2">&lt;see langword="false" /&gt;</ph> si l'exception doit levée une nouvelle fois et l'application fermée.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the exception has been handled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'exception a été gérée ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> if the exception has been handled.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> retourne <ph id="ph2">`true`</ph> si l'exception a été gérée.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>If it returns <ph id="ph1">`false`</ph> or throws a different exception, the original exception is rethrown.</source>
          <target state="translated">Si <ph id="ph1">`false`</ph> est retourné ou qu'une exception différente est levée, l'exception d'origine est levée une nouvelle fois.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The following code example shows an implementation of the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> abstract class that overrides the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> method.</source>
          <target state="translated">L'exemple de code suivant présente une implémentation de la classe abstraite <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> qui substitue la méthode <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The following code example shows how to enable the custom <ph id="ph1">`MyExceptionHandler`</ph> for unhandled exceptions that occur within the <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> runtime.</source>
          <target state="translated">L'exemple de code suivant indique comment activer le <ph id="ph1">`MyExceptionHandler`</ph> personnalisé pour les exceptions non gérées qui se produisent lors de l'exécution d'<ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>Gets or sets the current transport <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> implementation for the application domain.</source>
          <target state="translated">Obtient ou définit l'implémentation du <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> de transport actuel pour le domaine d'application.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>A custom <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> object that receives unhandled exceptions that occur within the global <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> transports.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> personnalisé qui reçoit des exceptions non gérées qui se produisent dans les transports <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> globaux.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>By default, the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph> property is set to the value of <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A&gt;</ph>, causing unhandled exceptions within <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> transports to be ignored.</source>
          <target state="translated">Par défaut, la propriété <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph> a la valeur de <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A&gt;</ph>, provoquant des exceptions non gérées dans les transports <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> à ignorer.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>Set this property to an instance of <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> to receive and react to these exceptions.</source>
          <target state="translated">Affectez à cette propriété une instance de <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> pour recevoir et réagir à ces exceptions.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>If an unhandled exception occurs within a global <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> transport and reaches this handler, there is a possibility that the state of the application domain is compromised.</source>
          <target state="translated">Si une exception non gérée se produit dans un transport <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> global et atteint ce gestionnaire, il est possible que l'état du domaine d'application soit compromis.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> can return <ph id="ph2">`false`</ph> for these exceptions to cause the application to be terminated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> peut retourner <ph id="ph2">`false`</ph> pour ces exceptions à l’application de se terminer.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>