<Type Name="StatisticFormula" FullName="System.Web.UI.DataVisualization.Charting.StatisticFormula">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="92d4b2167ff6f21d5cdcc51f71a0fa69fdcc3dbe" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class StatisticFormula" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StatisticFormula extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.DataVisualization.Charting.StatisticFormula" />
  <TypeSignature Language="VB.NET" Value="Public Class StatisticFormula" />
  <TypeSignature Language="C++ CLI" Value="public ref class StatisticFormula" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="60310-101">Calcule des formules statistiques.</span>
      <span class="sxs-lookup">
        <span data-stu-id="60310-101">Calculates statistical formulas.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60310-102">Les formules peuvent être faiblement regroupés dans les catégories suivantes : distributions, y compris les distributions inverses ; tests ; et formules statistiques de base.</span><span class="sxs-lookup"><span data-stu-id="60310-102">Formulas can be loosely grouped into the following categories: distributions, including inverse distributions; tests; and basic statistical formulas.</span></span> <span data-ttu-id="60310-103">Chaque groupe possède des caractéristiques communes en ce qui concerne leurs valeurs d’entrée et de retournés.</span><span class="sxs-lookup"><span data-stu-id="60310-103">Each group has common characteristics with respect to their input and return values.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Anova">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.AnovaResult Anova (double probability, string inputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.AnovaResult Anova(float64 probability, string inputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Anova(System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Anova (probability As Double, inputSeriesNames As String) As AnovaResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::AnovaResult ^ Anova(double probability, System::String ^ inputSeriesNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.AnovaResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="probability">
          <span data-ttu-id="60310-104">Valeur alpha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-104">Alpha value.</span>
          </span>
          <span data-ttu-id="60310-105">La plage d'entrée acceptable est comprise entre 0 et 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-105">The acceptable input range is between 0 and 1.</span>
          </span>
        </param>
        <param name="inputSeriesNames">
          <span data-ttu-id="60310-106">Noms d'au moins deux séries d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-106">Names of two or more input series.</span>
          </span>
          <span data-ttu-id="60310-107">Toutes les séries doivent exister dans la collection de séries au moment où la méthode est appelée et comporter le même nombre de points de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-107">Each series must exist in the series collection at the time of the method call, and have the same number of data points.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-108">La formule Anova détermine l’existence ou l’absence d’une différence statistiquement significative entre les valeurs moyennes d’au moins deux groupes de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-108">The Anova formula determines the existence or absence of a statistically significant difference between the mean values of two or more groups of data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-109">Objet <see cref="T:System.Web.UI.DataVisualization.Charting.AnovaResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-109">An <see cref="T:System.Web.UI.DataVisualization.Charting.AnovaResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-110">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-110">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As AnovaResult = Chart1.DataManipulator.Statistics.Anova(.05, "Series1,Series2,Series3")  
```  
  
```csharp  
AnovaResult result = Chart1.DataManipulator.Statistics.Anova(.05, "Series1,Series2,Series3");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaFunction">
      <MemberSignature Language="C#" Value="public double BetaFunction (double m, double n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 BetaFunction(float64 m, float64 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.BetaFunction(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaFunction (m As Double, n As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BetaFunction(double m, double n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Double" />
        <Parameter Name="n" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="60310-111">Première valeur de la fonction Beta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-111">First value for the beta function.</span>
          </span>
        </param>
        <param name="n">
          <span data-ttu-id="60310-112">Deuxième valeur de la fonction Beta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-112">Second value for the beta function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-113">La fonction Beta permet de calculer la valeur bêta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-113">The beta function calculates the beta function value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-114">Valeur bêta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-114">Beta value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-115">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-115">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.BetaFunction(2.3, 6.2)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.BetaFunction(2.3, 6.2);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Correlation">
      <MemberSignature Language="C#" Value="public double Correlation (string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Correlation(string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Correlation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correlation (firstInputSeriesName As String, secondInputSeriesName As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correlation(System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="firstInputSeriesName">
          <span data-ttu-id="60310-116">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du premier groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-116">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="60310-117">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du second groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-117">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-118">La formule de la corrélation indique l’intensité de la relation existant entre deux variables aléatoires.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-118">The correlation formula shows the strength of the relationship that exists between two random variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-119">Valeur de corrélation entre les deux groupes de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-119">Correlation value between the two groups of data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60310-120">La méthode lève une exception si la série d’entrée n’ont pas le même nombre de points de données.</span><span class="sxs-lookup"><span data-stu-id="60310-120">The method throws an exception if the input series do not have the same number of data points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60310-121">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-121">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.Correlation("Series1", "Series2")  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.Correlation("Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance">
      <MemberSignature Language="C#" Value="public double Covariance (string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Covariance(string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Covariance(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance (firstInputSeriesName As String, secondInputSeriesName As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance(System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="firstInputSeriesName">
          <span data-ttu-id="60310-122">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du premier groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-122">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="60310-123">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du second groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-123">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-124">La formule de la covariance mesure le degré de dépendance pouvant exister entre deux variables aléatoires.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-124">The covariance formula measures the degree of dependence that may exist between two random variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-125">Valeur de covariance entre les deux groupes de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-125">Covariance value between the two groups of data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60310-126">La méthode lève une exception si la série d’entrée n’ont pas le même nombre de points de données.</span><span class="sxs-lookup"><span data-stu-id="60310-126">The method throws an exception if the input series do not have the same number of data points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60310-127">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-127">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As double = Chart1.DataManipulator.Statistics.Covariance("Series1", "Series2")  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.Covariance("Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FDistribution">
      <MemberSignature Language="C#" Value="public double FDistribution (double value, int firstDegreeOfFreedom, int secondDegreeOfFreedom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 FDistribution(float64 value, int32 firstDegreeOfFreedom, int32 secondDegreeOfFreedom) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.FDistribution(System.Double,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDistribution (value As Double, firstDegreeOfFreedom As Integer, secondDegreeOfFreedom As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDistribution(double value, int firstDegreeOfFreedom, int secondDegreeOfFreedom);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="firstDegreeOfFreedom" Type="System.Int32" />
        <Parameter Name="secondDegreeOfFreedom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="60310-128">Valeur F pour laquelle vous souhaitez obtenir la distribution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-128">The F value for which you want the distribution.</span>
          </span>
        </param>
        <param name="firstDegreeOfFreedom">
          <span data-ttu-id="60310-129">Premier degré de liberté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-129">First degree of freedom.</span>
          </span>
        </param>
        <param name="secondDegreeOfFreedom">
          <span data-ttu-id="60310-130">Deuxième degré de liberté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-130">Second degree of freedom.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-131">La formule de la distribution F permet de calculer la probabilité de la distribution F.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-131">The F distribution formula calculates the probability for the F-distribution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-132">Probabilité pour la distribution F.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-132">Probability for the F distribution.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-133">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-133">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As double = Chart1.DataManipulator.Statistics.FDistribution(6.31, 15, 7)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.FDistribution(6.31, 15, 7);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.FTestResult FTest (double probability, string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.FTestResult FTest(float64 probability, string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.FTest(System.Double,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (probability As Double, firstInputSeriesName As String, secondInputSeriesName As String) As FTestResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::FTestResult ^ FTest(double probability, System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.FTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="probability">
          <span data-ttu-id="60310-134">Valeur alpha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-134">The alpha value.</span>
          </span>
          <span data-ttu-id="60310-135">La plage acceptable est située entre 0 et 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-135">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstInputSeriesName">
          <span data-ttu-id="60310-136">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du premier groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-136">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="60310-137">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du second groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-137">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-138">La formule du test F exécute un test F sur deux échantillons à l’aide d’une distribution F. Elle sert à déterminer si les échantillons ont des variances différentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-138">The F-test formula performs a two-sample F-test using F distribution, and is used to see if the samples have different variances.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-139">Objet <see cref="T:System.Web.UI.DataVisualization.Charting.FTestResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-139">An <see cref="T:System.Web.UI.DataVisualization.Charting.FTestResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60310-140">La méthode lève une exception si la série d’entrée n’ont pas le même nombre de points de données.</span><span class="sxs-lookup"><span data-stu-id="60310-140">The method throws an exception if the input series do not have the same number of data points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60310-141">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-141">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As FTestResult = Chart1.DataManipulator.Statistics.FTest(0.05, "Series1", "Series2")  
```  
  
```csharp  
FTestResult result = Chart1.DataManipulator.Statistics.FTest(0.05, "Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaFunction">
      <MemberSignature Language="C#" Value="public double GammaFunction (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GammaFunction(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.GammaFunction(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaFunction (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaFunction(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="60310-142">Valeur pour laquelle la valeur gamma est requise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-142">Value for which the gamma value is required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-143">La fonction Gamma permet de calculer la valeur gamma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-143">The gamma function calculates the gamma value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-144">Valeur gamma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-144">Gamma value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-145">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-145">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.GammaFunction(6.2)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.GammaFunction(6.2);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseFDistribution">
      <MemberSignature Language="C#" Value="public double InverseFDistribution (double probability, int firstDegreeOfFreedom, int secondDegreeOfFreedom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 InverseFDistribution(float64 probability, int32 firstDegreeOfFreedom, int32 secondDegreeOfFreedom) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.InverseFDistribution(System.Double,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InverseFDistribution (probability As Double, firstDegreeOfFreedom As Integer, secondDegreeOfFreedom As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double InverseFDistribution(double probability, int firstDegreeOfFreedom, int secondDegreeOfFreedom);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstDegreeOfFreedom" Type="System.Int32" />
        <Parameter Name="secondDegreeOfFreedom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="probability">
          <span data-ttu-id="60310-146">Probabilité pour la distribution F.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-146">Probability for the F distribution.</span>
          </span>
          <span data-ttu-id="60310-147">La plage acceptable est située entre 0 et 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-147">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstDegreeOfFreedom">
          <span data-ttu-id="60310-148">Premier degré de liberté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-148">First degree of freedom.</span>
          </span>
        </param>
        <param name="secondDegreeOfFreedom">
          <span data-ttu-id="60310-149">Deuxième degré de liberté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-149">Second degree of freedom.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-150">La formule de la distribution F inverse permet de calculer l'inverse de la distribution cumulative F.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-150">The inverse F distribution formula calculates the inverse of the F cumulative distribution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-151">Valeur F de la distribution F.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-151">F value for the F distribution.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-152">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-152">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.InverseFDistribution(.05, 15, 30)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.InverseFDistribution(.05, 15, 30);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseNormalDistribution">
      <MemberSignature Language="C#" Value="public double InverseNormalDistribution (double probability);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 InverseNormalDistribution(float64 probability) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.InverseNormalDistribution(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function InverseNormalDistribution (probability As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double InverseNormalDistribution(double probability);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probability" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="probability">
          <span data-ttu-id="60310-153">Valeur alpha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-153">Alpha value.</span>
          </span>
          <span data-ttu-id="60310-154">La plage d'entrée acceptable est comprise entre 0 et 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-154">The acceptable input range is between 0 and 1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-155">La formule de la distribution normale inverse permet de calculer l'inverse de la distribution cumulative normale standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-155">The inverse normal distribution formula calculates the inverse of the standard normal cumulative distribution.</span>
          </span>
          <span data-ttu-id="60310-156">La distribution a une moyenne de 0 et un écart type égal à 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-156">The distribution has a mean of 0 and a standard deviation of one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-157">Inverse de la fonction de distribution normale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-157">Inverse of the normal distribution function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-158">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-158">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As double = Chart1.DataManipulator.Statistics.InverseNormalDistribution(.05)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.InverseNormalDistribution(.05);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseTDistribution">
      <MemberSignature Language="C#" Value="public double InverseTDistribution (double probability, int degreeOfFreedom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 InverseTDistribution(float64 probability, int32 degreeOfFreedom) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.InverseTDistribution(System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InverseTDistribution (probability As Double, degreeOfFreedom As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double InverseTDistribution(double probability, int degreeOfFreedom);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="degreeOfFreedom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="probability">
          <span data-ttu-id="60310-159">Probabilité pour la distribution F.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-159">Probability for the F distribution.</span>
          </span>
          <span data-ttu-id="60310-160">La plage acceptable est située entre 0 et 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-160">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="degreeOfFreedom">
          <span data-ttu-id="60310-161">Degré de liberté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-161">Degree of freedom.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-162">La formule de la distribution *t* inverse permet de calculer la valeur *t* de la distribution *t* de Student sous la forme d’une fonction de probabilité et de degrés de liberté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-162">The inverse *t*-distribution formula calculates the *t*-value of the Student's *t*-distribution as a function of probability and degrees of freedom.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-163">Inverse de la distribution *t*.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-163">Inverse of the *t*-distribution.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-164">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-164">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
double result = Chart1.DataManipulator.Statistics.InverseTDistribution(.05, 15)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.InverseTDistribution(.05, 15);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mean">
      <MemberSignature Language="C#" Value="public double Mean (string inputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Mean(string inputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Mean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mean (inputSeriesName As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Mean(System::String ^ inputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputSeriesName">
          <span data-ttu-id="60310-165">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données pour lesquelles la valeur moyenne est requise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-165">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the data for which the mean value is required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-166">La formule de la moyenne permet de calculer la moyenne des données stockées dans une série de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-166">The mean formula calculates the average, or mean, of data stored in a data series.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-167">Valeur moyenne de tous les points de données de la série spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-167">Mean value of all the data points in the given series.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60310-168">Si la série d’entrée nommée n’existe pas dans le <xref:System.Web.UI.DataVisualization.Charting.SeriesCollection> au moment de l’appel de méthode, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="60310-168">If named input series does not exist in the <xref:System.Web.UI.DataVisualization.Charting.SeriesCollection> at the time of the method call, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60310-169">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-169">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.Mean("Series1")  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.Mean("Series1");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (string inputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Median(string inputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Median(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (inputSeriesName As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Median(System::String ^ inputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputSeriesName">
          <span data-ttu-id="60310-170">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données pour lesquelles la valeur médiane est requise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-170">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the data for which the median value is required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-171">La formule de la médiane permet de calculer la médiane des données stockées dans une série de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-171">The median formula calculates the median of the data stored in a data series.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-172">Valeur médiane de tous les points de données de la série spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-172">Median of all the data points in the given series.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60310-173">Si la série d’entrée nommée n’existe pas dans le <xref:System.Web.UI.DataVisualization.Charting.SeriesCollection> au moment de l’appel de méthode, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="60310-173">If the named input series does not exist in the <xref:System.Web.UI.DataVisualization.Charting.SeriesCollection> at the time of the method call, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60310-174">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-174">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.Median("Series1")  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.Median("Series1");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalDistribution">
      <MemberSignature Language="C#" Value="public double NormalDistribution (double zValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 NormalDistribution(float64 zValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.NormalDistribution(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormalDistribution (zValue As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormalDistribution(double zValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="zValue">
          <span data-ttu-id="60310-175">Valeur pour laquelle la distribution normale est requise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-175">Value for which the normal distribution is required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-176">La formule de la distribution normale permet de calculer la valeur de la distribution cumulative normale standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-176">The normal distribution formula calculates the value of the standard normal cumulative distribution.</span>
          </span>
          <span data-ttu-id="60310-177">La distribution a une moyenne de 0 et un écart type égal à 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-177">The distribution has a mean of 0 and a standard deviation of 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-178">Valeur de la distribution cumulative normale standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-178">Value of the standard normal cumulative distribution.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-179">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-179">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.NormalDistribution(1.96)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.NormalDistribution(1.96);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TDistribution">
      <MemberSignature Language="C#" Value="public double TDistribution (double value, int degreeOfFreedom, bool oneTail);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 TDistribution(float64 value, int32 degreeOfFreedom, bool oneTail) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.TDistribution(System.Double,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDistribution (value As Double, degreeOfFreedom As Integer, oneTail As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDistribution(double value, int degreeOfFreedom, bool oneTail);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="degreeOfFreedom" Type="System.Int32" />
        <Parameter Name="oneTail" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="60310-180">Valeur <c>t</c> pour laquelle vous souhaitez obtenir la distribution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-180">
              <c>t</c>-value for which you want the distribution.</span>
          </span>
        </param>
        <param name="degreeOfFreedom">
          <span data-ttu-id="60310-181">Degré de liberté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-181">Degree of freedom</span>
          </span>
        </param>
        <param name="oneTail">
          <span data-ttu-id="60310-182">Si la valeur du paramètre est <see langword="true" />, une distribution unilatérale est utilisée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-182">If set to <see langword="true" />, one-tailed distribution is used.</span>
          </span>
          <span data-ttu-id="60310-183">Sinon, une distribution bilatérale est utilisée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-183">Otherwise, two-tailed distribution is used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-184">La formule de la distribution *t* permet de calculer la probabilité de la distribution *t* de Student.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-184">The *t*-distribution formula calculates the probability for the Student's *t*-distribution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-185">Probabilité de la fonction de distribution *t*.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-185">*t*-distribution function probability.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-186">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-186">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.TDistribution(1.96, 30, true)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.TDistribution(1.96, 30, true);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TTestEqualVariances">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.TTestResult TTestEqualVariances (double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.TTestResult TTestEqualVariances(float64 hypothesizedMeanDifference, float64 probability, string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.TTestEqualVariances(System.Double,System.Double,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTestEqualVariances (hypothesizedMeanDifference As Double, probability As Double, firstInputSeriesName As String, secondInputSeriesName As String) As TTestResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::TTestResult ^ TTestEqualVariances(double hypothesizedMeanDifference, double probability, System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.TTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hypothesizedMeanDifference" Type="System.Double" />
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hypothesizedMeanDifference">
          <span data-ttu-id="60310-187">Test d'hypothèse sur la différence des moyennes des groupes de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-187">Hypothesized difference between the means of the data groups.</span>
          </span>
        </param>
        <param name="probability">
          <span data-ttu-id="60310-188">Valeur alpha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-188">Alpha value.</span>
          </span>
          <span data-ttu-id="60310-189">La plage acceptable est située entre 0 et 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-189">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstInputSeriesName">
          <span data-ttu-id="60310-190">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du premier groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-190">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="60310-191">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du second groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-191">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-192">La formule du test *t* avec variances égales permet d’exécuter un test *t* à l’aide de la distribution *t* de Student avec des variances égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-192">The *t*-test with equal variances formula performs a *t*-test using Student's *t*-distribution with equal variances.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-193">Objet <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-193">A <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-194">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-194">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As TTestResult = Chart1.DataManipulator.Statistics.TTestPaired(0.2, 0.05, "Series1", "Series2")  
```  
  
```csharp  
TTestResult result = Chart1.DataManipulator.Statistics.TTestPaired(0.2, 0.05, "Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TTestPaired">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.TTestResult TTestPaired (double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.TTestResult TTestPaired(float64 hypothesizedMeanDifference, float64 probability, string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.TTestPaired(System.Double,System.Double,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTestPaired (hypothesizedMeanDifference As Double, probability As Double, firstInputSeriesName As String, secondInputSeriesName As String) As TTestResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::TTestResult ^ TTestPaired(double hypothesizedMeanDifference, double probability, System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.TTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hypothesizedMeanDifference" Type="System.Double" />
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hypothesizedMeanDifference">
          <span data-ttu-id="60310-195">Test d'hypothèse sur la différence des moyennes des groupes de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-195">Hypothesized difference between the means of the data groups.</span>
          </span>
        </param>
        <param name="probability">
          <span data-ttu-id="60310-196">Valeur alpha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-196">Alpha value.</span>
          </span>
          <span data-ttu-id="60310-197">La plage acceptable est située entre 0 et 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-197">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstInputSeriesName">
          <span data-ttu-id="60310-198">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du premier groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-198">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="60310-199">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du second groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-199">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-200">La formule du test *t* pour échantillons appariés permet d’exécuter un test *t* à l’aide de la distribution *t* de Student avec des échantillons appariés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-200">The *t*-test paired formula performs a *t*-test using Student's *t*-distribution with paired samples.</span>
          </span>
          <span data-ttu-id="60310-201">Elle s’avère utile quand un appariement naturel des échantillons est observé (par exemple, si un groupe d’échantillons est testé deux fois).</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-201">This is useful when there is an observed natural pairing in samples (for example, when a sample group is tested twice).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-202">Objet <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-202">A <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-203">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-203">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As TTestResult = Chart1.DataManipulator.Statistics.TTestPaired(0.2, 0.05, "Series1", "Series2")  
```  
  
```csharp  
TTestResult result = Chart1.DataManipulator.Statistics.TTestPaired(0.2, 0.05, "Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TTestUnequalVariances">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.TTestResult TTestUnequalVariances (double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.TTestResult TTestUnequalVariances(float64 hypothesizedMeanDifference, float64 probability, string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.TTestUnequalVariances(System.Double,System.Double,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTestUnequalVariances (hypothesizedMeanDifference As Double, probability As Double, firstInputSeriesName As String, secondInputSeriesName As String) As TTestResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::TTestResult ^ TTestUnequalVariances(double hypothesizedMeanDifference, double probability, System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.TTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hypothesizedMeanDifference" Type="System.Double" />
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hypothesizedMeanDifference">
          <span data-ttu-id="60310-204">Test d'hypothèse sur la différence des moyennes des groupes de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-204">Hypothesized difference between the means of the data groups.</span>
          </span>
        </param>
        <param name="probability">
          <span data-ttu-id="60310-205">Valeur alpha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-205">Alpha value.</span>
          </span>
          <span data-ttu-id="60310-206">La plage acceptable est située entre 0 et 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-206">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstInputSeriesName">
          <span data-ttu-id="60310-207">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du premier groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-207">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="60310-208">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du second groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-208">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-209">La formule du test *t* avec variances inégales permet d’exécuter un test *t* à l’aide de la distribution *t* de Student avec des variances inégales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-209">The *t*-test with unequal variances formula performs a *t*-test using Student's *t*-distribution with unequal variances.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-210">Objet <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-210">A <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-211">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-211">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As TTestResult = Chart1.DataManipulator.Statistics.TTestUnEqualVariances(0.2, 0.05, "Series1", "Series2")  
```  
  
```csharp  
TTestResult result = Chart1.DataManipulator.Statistics.TTestUnEqualVariances(0.2, 0.05, "Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variance">
      <MemberSignature Language="C#" Value="public double Variance (string inputSeriesName, bool sampleVariance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Variance(string inputSeriesName, bool sampleVariance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Variance(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Variance (inputSeriesName As String, sampleVariance As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Variance(System::String ^ inputSeriesName, bool sampleVariance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSeriesName" Type="System.String" />
        <Parameter Name="sampleVariance" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inputSeriesName">
          <span data-ttu-id="60310-212">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données pour lesquelles la valeur moyenne est requise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-212">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the data for which the mean value is required.</span>
          </span>
        </param>
        <param name="sampleVariance">
          <span data-ttu-id="60310-213">Spécifiez <see langword="true" /> si les données correspondent à un échantillon d'une population ou <see langword="false" /> si les données correspondent à la population entière.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-213">Specify <see langword="true" /> if the data is a sample of a population; and <see langword="false" /> if the data is the entire population.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-214">La formule de la variance permet de calculer la variance au sein d'un groupe de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-214">The variance formula calculates the variance within a group of data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-215">Variance au sein du groupe de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-215">Variance within the group of data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-216">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-216">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.Variance("Series1", false)  
```  
  
```csharp  
TTestResult result = double result = Chart1.DataManipulator.Statistics.Variance("Series1", false);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ZTestResult ZTest (double hypothesizedMeanDifference, double varianceFirstGroup, double varianceSecondGroup, double probability, string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.ZTestResult ZTest(float64 hypothesizedMeanDifference, float64 varianceFirstGroup, float64 varianceSecondGroup, float64 probability, string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.ZTest(System.Double,System.Double,System.Double,System.Double,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (hypothesizedMeanDifference As Double, varianceFirstGroup As Double, varianceSecondGroup As Double, probability As Double, firstInputSeriesName As String, secondInputSeriesName As String) As ZTestResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::ZTestResult ^ ZTest(double hypothesizedMeanDifference, double varianceFirstGroup, double varianceSecondGroup, double probability, System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ZTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hypothesizedMeanDifference" Type="System.Double" />
        <Parameter Name="varianceFirstGroup" Type="System.Double" />
        <Parameter Name="varianceSecondGroup" Type="System.Double" />
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hypothesizedMeanDifference">
          <span data-ttu-id="60310-217">Test d'hypothèse sur la différence des moyennes des groupes de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-217">Hypothesized difference between the means of the data groups.</span>
          </span>
        </param>
        <param name="varianceFirstGroup">
          <span data-ttu-id="60310-218">Variance au sein du premier groupe de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-218">Variance within the first group of data.</span>
          </span>
        </param>
        <param name="varianceSecondGroup">
          <span data-ttu-id="60310-219">Variance au sein du deuxième groupe de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-219">Variance within the second group of data.</span>
          </span>
        </param>
        <param name="probability">
          <span data-ttu-id="60310-220">Valeur alpha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-220">Alpha value.</span>
          </span>
          <span data-ttu-id="60310-221">La plage acceptable est située entre 0 et 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-221">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstInputSeriesName">
          <span data-ttu-id="60310-222">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du premier groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-222">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="60310-223">Nom de l'objet <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> qui stocke les données du second groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-223">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60310-224">La formule du test Z permet d'exécuter un test Z à l'aide d'une distribution normale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-224">The Z-test formula performs a Z-test using normal distribution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="60310-225">Objet <see cref="T:System.Web.UI.DataVisualization.Charting.ZTestResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60310-225">A <see cref="T:System.Web.UI.DataVisualization.Charting.ZTestResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="60310-226">Le code suivant montre comment utiliser cette formule.</span><span class="sxs-lookup"><span data-stu-id="60310-226">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As ZTestResult = Chart1.DataManipulator.Statistics.ZTest(0.2, 2.5, 4.5, 0.05, "Series1", "Series2")  
```  
  
```csharp  
ZTestResult result = Chart1.DataManipulator.Statistics.ZTest(0.2, 2.5, 4.5, 0.05, "Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>