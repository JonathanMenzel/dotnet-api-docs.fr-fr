<Type Name="XsltArgumentList" FullName="System.Xml.Xsl.XsltArgumentList">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9cc99ddb1da2667212b1ce408db107e7e7a4a7c0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720113" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XsltArgumentList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsltArgumentList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XsltArgumentList" />
  <TypeSignature Language="VB.NET" Value="Public Class XsltArgumentList" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsltArgumentList" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contient un nombre variable d'arguments qui sont soit des paramètres XSLT, soit des objets d'extension.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette classe est utilisée par le <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (méthode). Il permet de paramètres et objets d’extension à être appelées à partir de la feuille de style.  
  
 Lorsque les paramètres et les objets sont ajoutés à la <xref:System.Xml.Xsl.XsltArgumentList>, ils sont associés à un nom qualifié d’espace de noms et un espace de noms URI, respectivement.  
  
 Les éléments suivants sont les avantages de la transmission d’un objet au lieu d’utiliser un script incorporé tel que `<msxsl:script>`:  
  
-   Offre une meilleure encapsulation et réutilisation des classes.  
  
-   Permet aux feuilles de style peut être plus petite et plus facilement géré.  
  
-   Prend en charge la transmission de fragments de nœud (par le biais du <xref:System.Xml.XPath.XPathNavigator>) à la feuille de style.  
  
 Pour plus d’informations sur l’utilisation de la <xref:System.Xml.Xsl.XsltArgumentList>, consultez [des objets d’Extension XSLT](~/docs/standard/data/xml/xslt-extension-objects.md) et [des paramètres XSLT](~/docs/standard/data/xml/xslt-parameters.md).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsltArgumentList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XsltArgumentList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsltArgumentList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Implémente une nouvelle instance de <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddExtensionObject">
      <MemberSignature Language="C#" Value="public void AddExtensionObject (string namespaceUri, object extension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddExtensionObject(string namespaceUri, object extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddExtensionObject (namespaceUri As String, extension As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddExtensionObject(System::String ^ namespaceUri, System::Object ^ extension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="extension" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="namespaceUri">URI d'espace de noms à associer à l'objet. Pour utiliser l'espace de noms par défaut, spécifiez une chaîne vide.</param>
        <param name="extension">Objet à ajouter à la liste.</param>
        <summary>Ajoute un nouvel objet à <see cref="T:System.Xml.Xsl.XsltArgumentList" /> et l'associe à l'URI d'espace de noms.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `params` (mot clé), ce qui permet à un nombre non spécifié de paramètres à passer, n’est actuellement pas pris en charge. Feuilles de style XSLT qui utilisent des méthodes définies avec la `params` (mot clé) ne fonctionne pas correctement. Pour plus d’informations, consultez [params](~/docs/csharp/language-reference/keywords/params.md).  
  
   
  
## Examples  
 Dans l’exemple suivant, la feuille de style utilise un objet d’extension XSLT pour convertir le prix du livre.  
  
 [!code-csharp[XsltArgumentList.AddExtensionObject#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddExtensionObject/CS/addextobj.cs#1)]
 [!code-vb[XsltArgumentList.AddExtensionObject#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddExtensionObject/VB/addextobj.vb#1)]  
  
 L’exemple utilise les fichiers de données suivants en tant qu’entrée.  
  
 `books.xml`  
  
 [!code-xml[XsltArgumentList.AddExtensionObject#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddExtensionObject/XML/books.xml#2)]  
  
 `prices.xsl`  
  
 [!code-xml[XsltArgumentList.AddExtensionObject#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddExtensionObject/XML/prices.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="namespaceUri" /> est <see langword="null" /> ou http://www.w3.org/1999/XSL/Transform  
  
 <paramref name="namespaceUri" /> possède déjà un objet d'extension associé.</exception>
        <exception cref="T:System.Security.SecurityException">L'appelant n'a pas les autorisations suffisantes pour appeler cette méthode.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddParam">
      <MemberSignature Language="C#" Value="public void AddParam (string name, string namespaceUri, object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddParam(string name, string namespaceUri, object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddParam (name As String, namespaceUri As String, parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddParam(System::String ^ name, System::String ^ namespaceUri, System::Object ^ parameter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Nom à associer au paramètre.</param>
        <param name="namespaceUri">URI d'espace de noms à associer au paramètre. Pour utiliser l'espace de noms par défaut, spécifiez une chaîne vide.</param>
        <param name="parameter">Valeur de paramètre ou objet à ajouter à la liste.</param>
        <summary>Ajoute un paramètre à <see cref="T:System.Xml.Xsl.XsltArgumentList" /> et l'associe au nom qualifié d'espace de noms.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `parameter` doit correspondre à un type W3C. Le tableau suivant présente les types W3C, XPath ou XSLT et la classe.NET correspondante.  
  
|Type W3C|Classe de.NET équivalente (Type)|  
|--------------|-----------------------------------|  
|`String` (XPath)|<xref:System.String>|  
|`Boolean` (XPath)|<xref:System.Boolean>|  
|`Number` (XPath)|<xref:System.Double>|  
|`Result Tree Fragment` (XSLT)|<xref:System.Xml.XPath.XPathNavigator>|  
|`Node Set` (XPath)|<xref:System.Xml.XPath.XPathNodeIterator><br /><br /> `XPathNavigator[]`|  
|`Node`* (XPath)|<xref:System.Xml.XPath.XPathNavigator>|  
  
 *Cela équivaut à une collection de nœuds contenant un seul nœud.  
  
 Si l’objet paramètre appelé à partir de la feuille de style n’est pas une des valeurs ci-dessus, il est converti selon les règles suivantes :  
  
-   Les types CLR numériques sont convertis en objet <xref:System.Double>.  
  
-   Le type <xref:System.DateTime> est converti en <xref:System.String>.  
  
-   Les types <xref:System.Xml.XPath.IXPathNavigable> sont convertis en <xref:System.Xml.XPath.XPathNavigator>. `XPathNavigator[]` est converti en <xref:System.Xml.XPath.XPathNodeIterator>.  
  
 Tous les autres types provoquent une erreur.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Xml.Xsl.XsltArgumentList.AddParam%2A> méthode pour créer un paramètre représentant la date et heure actuelles.  
  
 [!code-csharp[XsltArgumentList.AddParam#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddParam/CS/addparam.cs#1)]
 [!code-vb[XsltArgumentList.AddParam#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddParam/VB/addparam.vb#1)]  
  
 L’exemple utilise les fichiers de données de deux suivants en tant qu’entrée.  
  
 `order.xml`  
  
 [!code-xml[XsltArgumentList.AddParam#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xml#2)]  
  
 `order.xsl`  
  
 [!code-xml[XsltArgumentList.AddParam#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="namespaceUri" /> est <see langword="null" /> ou http://www.w3.org/1999/XSL/Transform.  
  
 <paramref name="name" /> n'est pas un nom valide conformément à la spécification du W3C relative au XML.  
  
 <paramref name="namespaceUri" /> possède déjà un paramètre qui lui est associé.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XsltArgumentList.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime tous les paramètres et tous les objets d'extension de <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionObject">
      <MemberSignature Language="C#" Value="public object GetExtensionObject (string namespaceUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetExtensionObject(string namespaceUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExtensionObject (namespaceUri As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetExtensionObject(System::String ^ namespaceUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceUri">URI d'espace de noms de l'objet.</param>
        <summary>Obtient l'objet associé à l'espace de noms spécifié.</summary>
        <returns>Objet d'URI d'espace de noms ou <see langword="null" />, s'il n'en existe pas.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParam">
      <MemberSignature Language="C#" Value="public object GetParam (string name, string namespaceUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetParam(string name, string namespaceUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParam (name As String, namespaceUri As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetParam(System::String ^ name, System::String ^ namespaceUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom du paramètre. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> ne vérifie pas si le nom passé est un nom local valide ; cependant, ce nom ne peut pas être <see langword="null" />.</param>
        <param name="namespaceUri">URI d'espace de noms associé au paramètre.</param>
        <summary>Obtient le paramètre associé au nom qualifié d'espace de noms.</summary>
        <returns>Objet de paramètre ou <see langword="null" />, s'il n'en existe pas.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveExtensionObject">
      <MemberSignature Language="C#" Value="public object RemoveExtensionObject (string namespaceUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object RemoveExtensionObject(string namespaceUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveExtensionObject (namespaceUri As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ RemoveExtensionObject(System::String ^ namespaceUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceUri">URI d'espace de noms associé à l'objet à supprimer.</param>
        <summary>Supprime l'objet ainsi que l'URI d'espace de noms de <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
        <returns>Objet avec l'URI d'espace de noms ou <see langword="null" />, s'il n'en existe pas.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveParam">
      <MemberSignature Language="C#" Value="public object RemoveParam (string name, string namespaceUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object RemoveParam(string name, string namespaceUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveParam (name As String, namespaceUri As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ RemoveParam(System::String ^ name, System::String ^ namespaceUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom du paramètre à supprimer. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> ne vérifie pas si le nom passé est un nom local valide ; cependant, ce nom ne peut pas être <see langword="null" />.</param>
        <param name="namespaceUri">URI d'espace de noms du paramètre à supprimer.</param>
        <summary>Supprime le paramètre de <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
        <returns>Objet de paramètre ou <see langword="null" />, s'il n'en existe pas.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XsltMessageEncountered">
      <MemberSignature Language="C#" Value="public event System.Xml.Xsl.XsltMessageEncounteredEventHandler XsltMessageEncountered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Xsl.XsltMessageEncounteredEventHandler XsltMessageEncountered" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event XsltMessageEncountered As XsltMessageEncounteredEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Xsl::XsltMessageEncounteredEventHandler ^ XsltMessageEncountered;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltMessageEncounteredEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu’un message est spécifié dans la feuille de style par l’élément <c>xsl:message</c>.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’événement n’est pas inscrit, tous les messages sont dirigés vers une sortie standard.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>