<Type Name="XslCompiledTransform" FullName="System.Xml.Xsl.XslCompiledTransform">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df35b09bb7bf6d29d6d71264fa0b9ba7fbd134ad" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30721083" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XslCompiledTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XslCompiledTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslCompiledTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslCompiledTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslCompiledTransform sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Transforme des données XML à l'aide d'une feuille de style XSLT.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe est un processeur XSLT qui prend en charge la syntaxe XSLT 1.0. Il est une implémentation d’un nouveau et inclut des gains de performances par rapport à l’élément obsolète <xref:System.Xml.Xsl.XslTransform> classe. La structure de la <xref:System.Xml.Xsl.XslCompiledTransform> classe est très similaire à la <xref:System.Xml.Xsl.XslTransform> classe. Le <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> méthode charge et compile le style de feuille, lors de la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> méthode exécute la transformation XSLT.  
  
 Prise en charge de la transformation XSLT `document()` fonction et les blocs de script incorporés sont désactivées par défaut. Ces fonctionnalités peuvent être activées en créant un <xref:System.Xml.Xsl.XsltSettings> objet et en le passant à la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> (méthode).  
  
 Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration depuis la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
## <a name="security-considerations"></a>Considérations relatives à la sécurité  
 Lors de la création d'une application qui utilise la classe <xref:System.Xml.Xsl.XslCompiledTransform>, vous devez connaître les éléments suivants et leurs implications :  
  
-   Le script XSLT est désactivé par défaut. Le script XSLT ne doit être activé que si la prise en charge des scripts est nécessaire et si vous travaillez dans un environnement totalement fiable.  
  
-   La fonction `document()` XSLT est désactivée par défaut. Si vous activez la fonction `document()`, limitez les ressources accessibles en transmettant un objet <xref:System.Xml.XmlSecureResolver> à la méthode <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>.  
  
-   Les objets d’extension sont activés par défaut. Si un objet <xref:System.Xml.Xsl.XsltArgumentList> contenant des objets d'extension est transmis à la méthode <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>, ceux-ci sont utilisés.  
  
-   Les feuilles de style XSLT peuvent inclure des références à d'autres fichiers et à des blocs de script intégrés. Un utilisateur malveillant peut exploiter cette fonction en fournissant des données ou feuilles de style qui, une fois exécutées, peuvent entraîner l'exécution du traitement jusqu'à l'épuisement des ressources de l'ordinateur.  
  
-   Les applications XSLT fonctionnant dans un environnement fiable mixte peuvent perturber la feuille de style. Un utilisateur malveillant peut, par exemple, charger un objet avec une feuille de style nuisible et le transmettre à un autre utilisateur qui appelle ensuite la méthode <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> et exécute la transformation.  
  
 Vous pouvez réduire ces problèmes de sécurité en désactivant le script ou la fonction `document()` sauf si la feuille de style provient d'une source fiable et en refusant les objets <xref:System.Xml.Xsl.XslCompiledTransform>, les feuilles de style XSLT ou les données de base XML provenant d'une source non fiable.  
  
   
  
## Examples  
 L’exemple suivant exécute une transformation et renvoie vers un fichier.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 L’exemple utilise les deux fichiers d’entrée suivants :  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Le <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> objet est thread-safe une fois qu’il a été chargé. En d’autres termes, une fois la <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> méthode terminée avec succès, la <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> méthode peut être appelée simultanément à partir de plusieurs threads.  
  
 Si le <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> méthode est appelée à nouveau dans un thread alors que la <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> méthode est appelée dans un autre thread, le <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> fin de l’exécution de l’objet le <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> appeler en continuant à utiliser l’ancien état. Le nouvel état est utilisé lorsque le <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> méthode terminée avec succès.  
  
 <block subset="none" type="note"><para>  
 Le <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> méthode n’est pas thread-safe lorsqu’elle est appelée simultanément à partir de plusieurs threads.  
  
</para></block></threadsafe>
    <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
    <altmember cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />
    <altmember cref="N:System.Xml" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Xsl.XslCompiledTransform" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Xsl.XslCompiledTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform (bool enableDebug);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableDebug) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableDebug As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform(bool enableDebug);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableDebug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableDebug">
          <see langword="true" /> pour générer les informations de débogage ; sinon <see langword="false" />. Le fait de la définir à <see langword="true" /> vous permet de déboguer la feuille de style avec le débogueur Microsoft Visual Studio.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> avec les paramètres de débogage spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les conditions suivantes doivent être satisfaites pour parcourir le code et déboguer la feuille de style :  
  
-   Le paramètre `enableDebug` a la valeur `true`.  
  
-   La feuille de style est passée à la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> méthode sous la forme d’un URI ou une implémentation de la <xref:System.Xml.XmlReader> classe qui implémente le <xref:System.Xml.IXmlLineInfo> interface. Le <xref:System.Xml.IXmlLineInfo> interface est implémentée sur l’analyse de texte tous les <xref:System.Xml.XmlReader> objets.  
  
     En d’autres termes, si la feuille de style est chargée à l’aide un <xref:System.Xml.XPath.IXPathNavigable> objet, tel qu’un <xref:System.Xml.XmlDocument> ou <xref:System.Xml.XPath.XPathDocument>, ou un <xref:System.Xml.XmlReader> implémentation qui n’implémente pas le <xref:System.Xml.IXmlLineInfo> interface, vous ne pouvez pas déboguer la feuille de style.  
  
-   Le <xref:System.Xml.XmlResolver> utilisé pour charger le style de feuille est basée sur un fichier <xref:System.Xml.XmlResolver>, telles que la <xref:System.Xml.XmlUrlResolver> (par défaut <xref:System.Xml.XmlResolver> utilisé par le <xref:System.Xml.Xsl.XslCompiledTransform> classe).  
  
-   La feuille de style se trouve sur l’ordinateur local ou sur l’intranet.  
  
   
  
## Examples  
 L’exemple suivant montre comment activer le débogage XSLT.  
  
 [!code-csharp[XslCompiledTransform.Load#10](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#10)]
 [!code-vb[XslCompiledTransform.Load#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileToType">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerErrorCollection CompileToType(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver, bool debug, class System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerErrorCollection ^ CompileToType(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver, bool debug, System::Reflection::Emit::TypeBuilder ^ typeBuilder, System::String ^ scriptAssemblyPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerErrorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="debug" Type="System.Boolean" />
        <Parameter Name="typeBuilder" Type="System.Reflection.Emit.TypeBuilder" />
        <Parameter Name="scriptAssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> positionné au début de la feuille de style à compiler.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> qui doit être appliqué à la feuille de style. Si la valeur est <see langword="null" />, <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> sera appliqué.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre les modules de feuille de style référencés dans les éléments <see langword="xsl:import" /> et <see langword="xsl:include" />. Si la valeur est <see langword="null" />, les ressources externes ne seront pas résolues.</param>
        <param name="debug">Affecter la valeur <see langword="true" /> permet le débogage de la feuille de style à l'aide d'un débogueur.</param>
        <param name="typeBuilder">
          <see cref="T:System.Reflection.Emit.TypeBuilder" /> utilisé pour la compilation de la feuille de style. Le TypeBuilder fourni est utilisé pour générer le type résultant.</param>
        <param name="scriptAssemblyPath">Chemin d'accès de base pour les assemblys générés pour les éléments <see langword="msxsl:script" />. Si un seul assembly de script est généré, ce paramètre spécifie le chemin d’accès à cet assembly. Dans le cas de plusieurs assemblys de script, un suffixe distinctif sera ajouté aux noms des fichiers pour garantir l'unicité des noms des assemblys.</param>
        <summary>Compile une feuille de style XSLT dans un type spécifié.</summary>
        <returns>Objet <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> contenant les erreurs et les avertissements du compilateur qui indiquent les résultats de la compilation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `xsltc.exe` outil est un wrapper autour de le <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> (méthode). La compilation des feuilles de style avec le `xsltc.exe` répond aux demandes de la plupart des applications qui tirent parti de l’utilisation des feuilles de style compilée. Le <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> méthode doit être utilisée lors de la création d’outils de compilation personnalisés.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compile la feuille de style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bien que les performances globales de la classe <xref:System.Xml.Xsl.XslCompiledTransform> soient meilleures que celles de la classe <xref:System.Xml.Xsl.XslTransform>, la méthode <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> de la classe <xref:System.Xml.Xsl.XslCompiledTransform> peut s'exécuter plus lentement que la méthode <xref:System.Xml.Xsl.XslTransform.Load%2A> de la classe <xref:System.Xml.Xsl.XslTransform> la première fois qu'elle est appelée pour une transformation. C'est parce que le fichier XSLT doit être compilé avant d'être chargé. Pour plus d'informations, consultez le billet de blog suivant : [XslCompiledTransform plus lent que XslTransform ?](http://go.microsoft.com/fwlink/?LinkId=130590).  
  
> [!NOTE]
>  Il existe des différences entre le XSLT compilé en mode Debug et le XSLT compilé en mode Release. Dans certaines situations, les feuilles de style compilées en mode Debug ne lèvent pas d'erreurs pendant <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>, mais échouent ultérieurement pendant <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. La même feuille de style compilée en mode Release échoue pendant <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>. Ce type de comportement se constate lorsque, par exemple, une variable qui n'est pas de type élément node-set est assignée à une expression qui requiert un élément node-set.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">URI de la feuille de style.</param>
        <summary>Charge et compile la feuille de style se trouvant à l'URI spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit utiliser le `http://www.w3.org/1999/XSL/Transform` espace de noms.  
  
 Cette méthode a le comportement suivant :  
  
-   Un <xref:System.Xml.XmlUrlResolver> avec aucun utilisateur les informations d’identification est utilisé pour résoudre l’URI de feuille de style et traiter tous `xsl:import` ou `xsl:include` éléments.  
  
-   Un <xref:System.Xml.XmlReader> avec la valeur par défaut des paramètres est utilisé pour charger la feuille de style. Le traitement DTD est désactivé sur le <xref:System.Xml.XmlReader>. Si vous avez besoin du traitement DTD, créez un <xref:System.Xml.XmlReader> avec cette fonctionnalité activée et passer à la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> (méthode).  
  
-   Le `document()` fonction est désactivée.  
  
-   Les scripts incorporés ne sont pas pris en charge.  
  
 Vous pouvez utiliser la <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> surcharge pour spécifier un <xref:System.Xml.XmlResolver> avec les informations d’identification d’authentification nécessaires, ou pour spécifier des paramètres XSLT différents.  
  
   
  
## Examples  
 L’exemple suivant exécute une transformation et renvoie vers un fichier.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheetUri" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La feuille de style contient une erreur.</exception>
        <exception cref="T:System.IO.FileNotFoundException">La feuille de style est introuvable.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">La valeur <paramref name="stylesheetUri" /> contient un nom de fichier ou un répertoire qui est introuvable.</exception>
        <exception cref="T:System.Net.WebException">La valeur <paramref name="stylesheetUri" /> ne peut pas être résolue.  
  
 - ou -  
  
 Une erreur s’est produite pendant le traitement de la demande.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> n'est pas un URI valide.</exception>
        <exception cref="T:System.Xml.XmlException">Une erreur d'analyse s'est produite lors du chargement de la feuille de style.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Type compiledStylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Type compiledStylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (compiledStylesheet As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(Type ^ compiledStylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compiledStylesheet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="compiledStylesheet">Nom de la classe qui contient la feuille de style compilée.  
  
 Il s'agit habituellement du nom de la feuille de style. Sauf spécification contraire, l'outil xsltc.exe utilise le nom de la feuille de style pour les noms de la classe et de l'assembly.</param>
        <summary>Charge la feuille de style compilée qui a été créée à l’aide du [compilateur XSLT (xsltc.exe)](~/docs/standard/data/xml/xslt-compiler-xsltc-exe.md).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’outil xsltc.exe est utilisé pour compiler des feuilles de style et générer des assemblys à partir de ces feuilles de style. Le <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> méthode charge de la feuille de style compilée à partir de l’assembly.  
  
> [!NOTE]
>  Vous devez également inclure l’assembly XSLT comme référence dans votre application.  
  
   
  
## Examples  
 L’exemple suivant montre comment charger une feuille de style compilée à partir d’un assembly XSLT. L’exemple suppose que l’outil xsltc.exe a été utilisé pour créer un assembly nommé bookOrders.dll avec une classe nommée bookOrders.  
  
> [!NOTE]
>  Vous devez référencer l’assembly XSLT lors de la compilation du code. Par exemple, `csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs`.  
  
```  
// Load the type of the class.  
XslCompiledTransform xslt = new XslCompiledTransform();  
xslt.Load(typeof(bookOrders));  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> contenant la feuille de style.</param>
        <summary>Compile la feuille de style contenue dans <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit utiliser le `http://www.w3.org/1999/XSL/Transform` espace de noms.  
  
 La feuille de style se charge à partir du nœud actuel de le <xref:System.Xml.XmlReader> via tous ses enfants. Cela vous permet d’utiliser une partie d’un document en tant que la feuille de style. Une fois la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> méthode se termine, le <xref:System.Xml.XmlReader> est positionné sur le nœud suivant après la fin de la feuille de style. Si la fin du document est atteinte, l'objet <xref:System.Xml.XmlReader> est positionné à la fin du fichier.  
  
 Cette méthode a le comportement suivant :  
  
-   Un <xref:System.Xml.XmlUrlResolver> sans utilisateur les informations d’identification est utilisé pour traiter les `xsl:import` ou `xsl:include` éléments.  
  
-   Le `document()` fonction est désactivée.  
  
-   Les scripts incorporés ne sont pas pris en charge.  
  
 Vous pouvez utiliser la <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> surcharge pour spécifier un <xref:System.Xml.XmlResolver> avec les informations d’identification d’authentification nécessaires, ou pour spécifier des paramètres XSLT différents.  
  
   
  
## Examples  
 L’exemple suivant charge une feuille de style contenue dans un <xref:System.Xml.XmlReader> objet.  
  
 [!code-csharp[XslCompiledTransform.Load#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Load#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La feuille de style contient une erreur.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objet implémentant l'interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. Dans Microsoft .NET Framework, il peut s'agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant la feuille de style.</param>
        <summary>Compile la feuille de style contenue dans l'objet <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit utiliser le `http://www.w3.org/1999/XSL/Transform` espace de noms.  
  
 Cette méthode a le comportement suivant :  
  
-   Un <xref:System.Xml.XmlUrlResolver> sans utilisateur les informations d’identification est utilisé pour traiter les `xsl:import` ou `xsl:include` éléments.  
  
-   Le `document()` fonction est désactivée.  
  
-   Les scripts incorporés ne sont pas pris en charge.  
  
 Vous pouvez utiliser la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> surcharge pour spécifier un <xref:System.Xml.XmlResolver> avec les informations d’identification d’authentification nécessaires, ou pour spécifier des paramètres XSLT différents.  
  
   
  
## Examples  
 L’exemple suivant charge une feuille de style contenue dans un <xref:System.Xml.XPath.XPathDocument> objet.  
  
 [!code-csharp[XslCompiledTransform.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La feuille de style contient une erreur.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Reflection.MethodInfo executeMethod, unsigned int8[] queryData, class System.Type[] earlyBoundTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (executeMethod As MethodInfo, queryData As Byte(), earlyBoundTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Reflection::MethodInfo ^ executeMethod, cli::array &lt;System::Byte&gt; ^ queryData, cli::array &lt;Type ^&gt; ^ earlyBoundTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executeMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="queryData" Type="System.Byte[]" />
        <Parameter Name="earlyBoundTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="executeMethod">Objet <see cref="T:System.Reflection.MethodInfo" /> qui représente la méthode <c>execute</c> générée par le compilateur de la feuille de style compilée.</param>
        <param name="queryData">Tableau d’octets de structures de données sérialisées dans le champ <c>staticData</c> de la feuille de style compilée tel qu’il a été généré par la méthode <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />.</param>
        <param name="earlyBoundTypes">Tableau de types stocké dans le champ <c>ebTypes</c> généré par le compilateur de la feuille de style compilée.</param>
        <summary>Charge une méthode à partir d'une feuille de style compilée à l'aide de l'utilitaire <see langword="XSLTC.exe" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode accepte une feuille de style compilée sous la forme d’un <xref:System.Reflection.MethodInfo> objet, un tableau d’octets et un type tableau. <xref:System.Reflection.Emit.DynamicMethod> objets peuvent être utilisés pour autoriser des méthodes feuille de style compilées ignorées lorsque la <xref:System.Xml.Xsl.XslCompiledTransform> objet est récupéré.  
  
   
  
## Examples  
 L’exemple de code ci-dessous utilise le <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> pour charger une feuille de style compilée. La transformation réduit la valeur de la `Price` élément dix pour cent.  
  
 [!code-csharp[XsltDynamicMethodLoad#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/XsltDynamicMethodLoad.cs#1)]
 [!code-vb[XsltDynamicMethodLoad#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltDynamicMethodLoad/VB/XsltDynamicMethodLoad.vb#1)]  
  
> [!NOTE]
>  L’assembly « Transformer » utilisé dans cet exemple a été généré à l’aide de l’utilitaire xsltc.exe. Pour plus d’informations sur l’utilisation de cet outil de ligne de commande, consultez [Comment : effectuer une Transformation XSLT à l’aide d’un Assembly](~/docs/standard/data/xml/how-to-perform-an-xslt-transformation-by-using-an-assembly.md).  
  
 L’exemple de code ci-dessus utilise la transformation suivante :  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"  
  xmlns:msxsl="urn:schemas-microsoft-com:xslt"  
  xmlns:user="urn:my-scripts">  
  <msxsl:script language="C#" implements-prefix="user">  
    <![CDATA[  
  public double modifyPrice(double price){  
    price*=0.9;  
    return price;  
  }  
  ]]]><![CDATA[]>  
  </msxsl:script>  
  <xsl:template match="Root">  
    <Root xmlns="">  
      <Price><xsl:value-of select="user:modifyPrice(Price)"/></Price>  
    </Root>  
  </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">URI de la feuille de style.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> à appliquer à la feuille de style. Si <see langword="null" />, le paramètre <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> est appliqué.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre l’URI de feuille de style et toutes les feuilles de style référencées dans les éléments XSLT <c>import</c> et <c>include</c>.</param>
        <summary>Charge et compile la feuille de style XSLT spécifiée par l'URI. <see cref="T:System.Xml.XmlResolver" /> résout tous les éléments XSLT <c>import</c> ou <c>include</c>, et les paramètres XSLT déterminent les autorisations pour la feuille de style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit utiliser le `http://www.w3.org/1999/XSL/Transform` espace de noms.  
  
 Un <xref:System.Xml.XmlReader> avec la valeur par défaut des paramètres est utilisé pour charger la feuille de style. Le traitement DTD est désactivé sur le <xref:System.Xml.XmlReader>. Si vous avez besoin du traitement DTD, créez un <xref:System.Xml.XmlReader> avec cette fonctionnalité activée et passer à la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant charge une feuille de style qui est stockée sur une ressource réseau. Un objet <xref:System.Xml.XmlSecureResolver> spécifie les informations d'identification nécessaires pour accéder à la feuille de style.  
  
 [!code-csharp[XslCompiledTransform.Load#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Load#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="stylesheetUri" /> ou de <paramref name="stylesheetResolver" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La feuille de style contient une erreur.</exception>
        <exception cref="T:System.IO.FileNotFoundException">La feuille de style est introuvable.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">La valeur <paramref name="stylesheetUri" /> contient un nom de fichier ou un répertoire qui est introuvable.</exception>
        <exception cref="T:System.Net.WebException">La valeur <paramref name="stylesheetUri" /> ne peut pas être résolue.  
  
 - ou -  
  
 Une erreur s’est produite pendant le traitement de la demande.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> n'est pas un URI valide.</exception>
        <exception cref="T:System.Xml.XmlException">Une erreur d'analyse s'est produite lors du chargement de la feuille de style.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> contenant la feuille de style.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> à appliquer à la feuille de style. Si <see langword="null" />, le paramètre <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> est appliqué.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre toute feuille de style référencée dans les éléments <c>import</c> et <c>include</c>. Si la valeur est <see langword="null" />, les ressources externes ne sont pas résolues.</param>
        <summary>Compile la feuille de style XSLT figurant dans <see cref="T:System.Xml.XmlReader" />. <see cref="T:System.Xml.XmlResolver" /> résout tous les éléments XSLT <c>import</c> ou <c>include</c>, et les paramètres XSLT déterminent les autorisations pour la feuille de style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit utiliser le `http://www.w3.org/1999/XSL/Transform` espace de noms.  
  
 La feuille de style se charge à partir du nœud actuel de le <xref:System.Xml.XmlReader> via tous ses enfants. Cela vous permet d’utiliser une partie d’un document en tant que la feuille de style. Une fois la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> méthode se termine, le <xref:System.Xml.XmlReader> est positionné sur le nœud suivant après la fin de la feuille de style. Si la fin du document est atteinte, l'objet <xref:System.Xml.XmlReader> est positionné à la fin du fichier.  
  
   
  
## Examples  
 L’exemple suivant charge une feuille de style et Active la prise en charge de scripts XSLT.  
  
 [!code-csharp[XslCompiledTransform.Load#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Load#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La feuille de style contient une erreur.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objet implémentant l'interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. Dans Microsoft .NET Framework, il peut s'agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant la feuille de style.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> à appliquer à la feuille de style. Si <see langword="null" />, le paramètre <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> est appliqué.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre toute feuille de style référencée dans les éléments <c>import</c> et <c>include</c>. Si la valeur est <see langword="null" />, les ressources externes ne sont pas résolues.</param>
        <summary>Compile la feuille de style XSLT figurant dans <see cref="T:System.Xml.XPath.IXPathNavigable" />. <see cref="T:System.Xml.XmlResolver" /> résout tous les éléments XSLT <c>import</c> ou <c>include</c>, et les paramètres XSLT déterminent les autorisations pour la feuille de style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit utiliser le `http://www.w3.org/1999/XSL/Transform` espace de noms.  
  
   
  
## Examples  
 L’exemple suivant charge une feuille de style. Le <xref:System.Xml.XmlSecureResolver> objet contient les informations d’identification nécessaires pour accéder aux `import` ou `include` éléments trouvés dans la feuille de style.  
  
 [!code-csharp[XslCompiledTransform.Load#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Load#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La feuille de style contient une erreur.</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputSettings">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings OutputSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings OutputSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputSettings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlWriterSettings ^ OutputSettings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Xml.XmlWriterSettings" /> qui contient les informations de sortie dérivées de l’élément <c>xsl:output</c> de la feuille de style.</summary>
        <value>En lecture seule <see cref="T:System.Xml.XmlWriterSettings" /> objet qui contient les informations de sortie dérivées de la <c>xsl : output</c> élément de la feuille de style. Cette valeur peut être <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est remplie après un appel réussi pour le <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> (méthode). Il contient des informations dérivées de la `xsl:output` élément d’une feuille de style compilée. Cela <xref:System.Xml.XmlWriterSettings> objet peut être passé à la <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> méthode pour créer le <xref:System.Xml.XmlWriter> objet auquel vous souhaitez exporter.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> propriété pour créer un <xref:System.Xml.XmlWriter> objet qui écrit du texte dans la console.  
  
 [!code-csharp[XslCompiledTransform.OutputSettings#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.OutputSettings/CS/xslt_OutputSettings.cs#1)]
 [!code-vb[XslCompiledTransform.OutputSettings#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.OutputSettings/VB/xslt_OutputSettings.vb#1)]  
  
 L’exemple utilise le `books.xml` et `outputConsole.xsl` comme entrée.  
  
 `books.xml`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#2](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/books.xml#2)]  
  
 `outputConsole.xsl`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#3](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/outputConsole.xsl#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemporaryFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TemporaryFiles" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemporaryFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TemporaryFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> qui contient les fichiers temporaires générés sur le disque après un appel réussi à la méthode <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />.</summary>
        <value>
          <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> qui contient les fichiers temporaires générés sur le disque. Cette valeur est <see langword="null" /> si l'appel à la méthode <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> a échoué ou si le débogage n'a pas été activé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété identifie les fichiers qui ont été générés pendant le XSLT de traitement. Les fichiers sont placés dans votre répertoire Temp (spécifié par la variable d’environnement TEMP), vous pouvez supprimer ces fichiers une fois terminé le traitement XSLT.  
  
   
  
## Examples  
 L’exemple suivant écrit les noms des fichiers temporaires dans la console.  
  
> [!NOTE]
>  Fichiers temporaires sont créés uniquement lorsque le chargement de style feuilles avec \<msxsl : script > blocs.  
  
 [!code-csharp[XslCompiledTransform.Transform#8](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#8)]
 [!code-vb[XslCompiledTransform.Transform#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Exécute la transformation XSLT.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Il existe des différences entre le XSLT compilé en mode Debug et le XSLT compilé en mode Release. Dans certaines situations, les feuilles de style compilées en mode Debug ne lèvent pas d'erreurs pendant <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>, mais échouent ultérieurement pendant <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. La même feuille de style compilée en mode Release échoue pendant <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>. Ce type de comportement se constate lorsque, par exemple, une variable qui n'est pas de type élément node-set est assignée à une expression qui requiert un élément node-set.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, string resultsFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, string resultsFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, resultsFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::String ^ resultsFile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="resultsFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI du document d'entrée.</param>
        <param name="resultsFile">URI du fichier de sortie.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'URI et renvoie les résultats vers un fichier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode utilise une valeur par défaut <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur pour résoudre les documents d’entrée et de sortie. Si une de ces ressources se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Un <xref:System.Xml.XmlReader> avec la valeur par défaut des paramètres est utilisé pour charger le document d’entrée. Le traitement DTD est désactivé sur le <xref:System.Xml.XmlReader>. Si vous avez besoin du traitement DTD, créez un <xref:System.Xml.XmlReader> avec cette fonctionnalité activée et passer à la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant exécute une transformation et renvoie vers un fichier.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 L’exemple utilise les deux fichiers d’entrée suivants :  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="inputUri" /> ou de <paramref name="resultsFile" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Le document d'entrée est introuvable.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">La valeur <paramref name="inputUri" /> ou <paramref name="resultsFile" /> contient un nom de fichier ou un répertoire qui est introuvable.</exception>
        <exception cref="T:System.Net.WebException">La valeur <paramref name="inputUri" /> ou <paramref name="resultsFile" /> ne peut pas être résolue.  
  
 - ou -  
  
 Une erreur s'est produite pendant le traitement de la demande.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> ou <paramref name="resultsFile" /> n'est pas un URI valide.</exception>
        <exception cref="T:System.Xml.XmlException">Une erreur d'analyse s'est produite lors du chargement du document d'entrée.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI du document d'entrée.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.  
  
 Si la feuille de style contient un élément <c>xsl:output</c>, vous devez créer l’objet <see cref="T:System.Xml.XmlWriter" /> à l’aide de l’objet <see cref="T:System.Xml.XmlWriterSettings" /> retourné par la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Cela garantit que <see cref="T:System.Xml.XmlWriter" /> a des paramètres de sortie corrects.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'URI et renvoie les résultats vers <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode utilise une valeur par défaut <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur pour résoudre le document d’entrée et toutes les instances de la transformation XSLT `document()` de trouver la fonction dans la feuille de style. Si une de ces ressources se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Un <xref:System.Xml.XmlReader> avec la valeur par défaut des paramètres est utilisé pour charger le document d’entrée. Le traitement DTD est désactivé sur le <xref:System.Xml.XmlReader>. Si vous avez besoin du traitement DTD, créez un <xref:System.Xml.XmlReader> avec cette fonctionnalité activée et passer à la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (méthode).  
  
 Cette méthode ne prend pas en charge la `xsl:strip-space` élément. Si votre feuille de style compilée inclus le `xsl:strip-space` élément, vous devez utiliser le <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> surcharge qui accepte un <xref:System.Xml.XmlReader> comme argument d’entrée.  
  
   
  
## Examples  
 L’exemple suivant exécute une transformation XSLT et des sorties vers une <xref:System.Xml.XmlWriter> objet.  
  
 [!code-csharp[XslCompiledTransform.Transform#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Transform#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="inputUri" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">La valeur <paramref name="inputUri" /> contient un nom de fichier ou le répertoire est introuvable.</exception>
        <exception cref="T:System.Net.WebException">La valeur <paramref name="inputUri" /> ne peut pas être résolue.  
  
 - ou -  
  
 Une erreur s’est produite pendant le traitement de la demande.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> n'est pas un URI valide.</exception>
        <exception cref="T:System.Xml.XmlException">Une erreur d'analyse s'est produite lors du chargement du document d'entrée.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> contenant le document d'entrée.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.  
  
 Si la feuille de style contient un élément <c>xsl:output</c>, vous devez créer l’objet <see cref="T:System.Xml.XmlWriter" /> à l’aide de l’objet <see cref="T:System.Xml.XmlWriterSettings" /> retourné par la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Cela garantit que <see cref="T:System.Xml.XmlWriter" /> a des paramètres de sortie corrects.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'objet <see cref="T:System.Xml.XmlReader" /> et renvoie les résultats vers <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la transformation XSLT `document()` fonction est activée, il est résolu en utilisant un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si la ressource externe se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
   
  
## Examples  
 L’exemple suivant transforme le premier livre du fichier books.xml.  
  
 [!code-csharp[XslCompiledTransform.Transform#7](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#7)]
 [!code-vb[XslCompiledTransform.Transform#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="input" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Objet implémentant l'interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. Dans Microsoft .NET Framework, il peut s'agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.  
  
 Si la feuille de style contient un élément <c>xsl:output</c>, vous devez créer l’objet <see cref="T:System.Xml.XmlWriter" /> à l’aide de l’objet <see cref="T:System.Xml.XmlWriterSettings" /> retourné par la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Cela garantit que <see cref="T:System.Xml.XmlWriter" /> a des paramètres de sortie corrects.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'objet <see cref="T:System.Xml.XPath.IXPathNavigable" /> et renvoie les résultats vers <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la transformation XSLT `document()` fonction est activée, il est résolu en utilisant un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si la ressource externe se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Cette méthode ne prend pas en charge la `xsl:strip-space` élément. Si votre feuille de style compilée inclus le `xsl:strip-space` élément, vous devez utiliser le <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> surcharge qui accepte un <xref:System.Xml.XmlReader> comme argument d’entrée.  
  
 L'interface <xref:System.Xml.XPath.IXPathNavigable> est implémentée dans les classes <xref:System.Xml.XmlNode> et <xref:System.Xml.XPath.XPathDocument>. Ces classes représentent un cache en mémoire de données XML.  
  
-   La classe <xref:System.Xml.XmlNode> se base sur le DOM (Document Object Model) et comprend des fonctionnalités de modification.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> est une banque de données en lecture seule basé sur le modèle de données XPath. <xref:System.Xml.XPath.XPathDocument> est la classe recommandée pour la transformation XSLT. Elle offre des performances plus rapides par rapport à la classe <xref:System.Xml.XmlNode>.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un objet contenant uniquement le fragment de nœud et transférer cet objet à la méthode <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Pour plus d’informations, consultez [Procédure : transformation d'un fragment de nœud](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 L’exemple suivant exécute une transformation XSLT et des sorties vers une <xref:System.Xml.XmlWriter> objet.  
  
 [!code-csharp[XslCompiledTransform.Transform#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Transform#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="input" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI du document d'entrée.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant des arguments qualifiés par un espace de noms utilisés comme données d'entrée pour la transformation. Cette valeur peut être <see langword="null" />.</param>
        <param name="results">Flux dans lequel vous voulez générer le résultat.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'URI et renvoie les résultats vers un flux. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fournit des arguments d'exécution supplémentaires.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode utilise une valeur par défaut <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur pour résoudre le document d’entrée et toutes les instances de la transformation XSLT `document()` de trouver la fonction dans la feuille de style. Si une de ces ressources se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Un <xref:System.Xml.XmlReader> avec la valeur par défaut des paramètres est utilisé pour charger le document d’entrée. Le traitement DTD est désactivé sur le <xref:System.Xml.XmlReader>. Si vous avez besoin du traitement DTD, créez un <xref:System.Xml.XmlReader> avec cette fonctionnalité activée et passer à la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="inputUri" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">La valeur <paramref name="inputUri" /> contient un nom de fichier ou le répertoire est introuvable.</exception>
        <exception cref="T:System.Net.WebException">La valeur <paramref name="inputUri" /> ne peut pas être résolue.  
  
 - ou -  
  
 Une erreur s'est produite pendant le traitement de la demande.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> n'est pas un URI valide.</exception>
        <exception cref="T:System.Xml.XmlException">Une erreur d'analyse s'est produite lors du chargement du document d'entrée.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI du document d'entrée.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant des arguments qualifiés par un espace de noms utilisés comme données d'entrée pour la transformation. Cette valeur peut être <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.IO.TextWriter" /> vers lequel vous souhaitez exporter.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'URI et renvoie les résultats vers <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode utilise une valeur par défaut <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur pour résoudre le document d’entrée et toutes les instances de la transformation XSLT `document()` de trouver la fonction dans la feuille de style. Si une de ces ressources se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Un <xref:System.Xml.XmlReader> avec la valeur par défaut des paramètres est utilisé pour charger le document d’entrée. Le traitement DTD est désactivé sur le <xref:System.Xml.XmlReader>. Si vous avez besoin du traitement DTD, créez un <xref:System.Xml.XmlReader> avec cette fonctionnalité activée et passer à la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant exécute une transformation XSLT et génère une chaîne.  
  
 [!code-csharp[XslCompiledTransform.Transform#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Transform#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="inputUri" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">La valeur <paramref name="inputUri" /> contient un nom de fichier ou le répertoire est introuvable.</exception>
        <exception cref="T:System.Net.WebException">La valeur <paramref name="inputUri" /> ne peut pas être résolue.  
  
 - ou -  
  
 Une erreur s'est produite pendant le traitement de la demande.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> n'est pas un URI valide.</exception>
        <exception cref="T:System.Xml.XmlException">Une erreur d'analyse s'est produite lors du chargement du document d'entrée.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI du document d'entrée.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant des arguments qualifiés par un espace de noms utilisés comme données d'entrée pour la transformation. Cette valeur peut être <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.  
  
 Si la feuille de style contient un élément <c>xsl:output</c>, vous devez créer l’objet <see cref="T:System.Xml.XmlWriter" /> à l’aide de l’objet <see cref="T:System.Xml.XmlWriterSettings" /> retourné par la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Cela garantit que <see cref="T:System.Xml.XmlWriter" /> a des paramètres de sortie corrects.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'URI et renvoie les résultats vers <see cref="T:System.Xml.XmlWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fournit des arguments d'exécution supplémentaires.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode utilise une valeur par défaut <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur pour résoudre le document d’entrée et toutes les instances de la transformation XSLT `document()` de trouver la fonction dans la feuille de style. Si une de ces ressources se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Un <xref:System.Xml.XmlReader> avec la valeur par défaut des paramètres est utilisé pour charger le document d’entrée. Le traitement DTD est désactivé sur le <xref:System.Xml.XmlReader>. Si vous avez besoin du traitement DTD, créez un <xref:System.Xml.XmlReader> avec cette fonctionnalité activée et passer à la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant utilise une <xref:System.Xml.Xsl.XsltArgumentList> objet pour créer un paramètre représentant la date et heure actuelles.  
  
 [!code-csharp[XsltArgumentList.AddParam#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddParam/CS/addparam.cs#1)]
 [!code-vb[XsltArgumentList.AddParam#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddParam/VB/addparam.vb#1)]  
  
 L’exemple utilise les fichiers de données de deux suivants en tant qu’entrée.  
  
 order.xml  
  
 [!code-xml[XsltArgumentList.AddParam#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xml#2)]  
  
 Order.xsl  
  
 [!code-xml[XsltArgumentList.AddParam#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="inputUri" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">La valeur <paramref name="inputtUri" /> contient un nom de fichier ou le répertoire est introuvable.</exception>
        <exception cref="T:System.Net.WebException">La valeur <paramref name="inputUri" /> ne peut pas être résolue.  
  
 - ou -  
  
 Une erreur s’est produite pendant le traitement de la demande.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> n'est pas un URI valide.</exception>
        <exception cref="T:System.Xml.XmlException">Une erreur d'analyse s'est produite lors du chargement du document d'entrée.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> contenant le document d'entrée.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant des arguments qualifiés par un espace de noms utilisés comme données d'entrée pour la transformation. Cette valeur peut être <see langword="null" />.</param>
        <param name="results">Flux dans lequel vous voulez générer le résultat.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'objet <see cref="T:System.Xml.XmlReader" /> et renvoie les résultats vers un flux. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fournit des arguments d'exécution supplémentaires.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la feuille de style inclut une transformation XSLT `document()` (fonction), il est résolu à l’aide un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si la ressource externe se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="input" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> contenant le document d'entrée.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant des arguments qualifiés par un espace de noms utilisés comme données d'entrée pour la transformation. Cette valeur peut être <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.IO.TextWriter" /> vers lequel vous souhaitez exporter.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'objet <see cref="T:System.Xml.XmlReader" /> et renvoie les résultats vers <see cref="T:System.IO.TextWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fournit des arguments d'exécution supplémentaires.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la feuille de style inclut une transformation XSLT `document()` (fonction), il est résolu à l’aide un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si la ressource externe se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="input" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> contenant le document d'entrée.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant des arguments qualifiés par un espace de noms utilisés comme données d'entrée pour la transformation. Cette valeur peut être <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.  
  
 Si la feuille de style contient un élément <c>xsl:output</c>, vous devez créer l’objet <see cref="T:System.Xml.XmlWriter" /> à l’aide de l’objet <see cref="T:System.Xml.XmlWriterSettings" /> retourné par la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Cela garantit que <see cref="T:System.Xml.XmlWriter" /> a des paramètres de sortie corrects.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'objet <see cref="T:System.Xml.XmlReader" /> et renvoie les résultats vers <see cref="T:System.Xml.XmlWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fournit des arguments d'exécution supplémentaires.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la feuille de style inclut une transformation XSLT `document()` (fonction), il est résolu à l’aide un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si la ressource externe se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="input" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Objet implémentant l'interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. Dans Microsoft .NET Framework, il peut s'agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant des arguments qualifiés par un espace de noms utilisés comme données d'entrée pour la transformation. Cette valeur peut être <see langword="null" />.</param>
        <param name="results">Flux dans lequel vous voulez générer le résultat.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'objet <see cref="T:System.Xml.XPath.IXPathNavigable" /> et renvoie les résultats vers un flux. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fournit des arguments d'exécution supplémentaires.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la transformation XSLT `document()` fonction est activée, il est résolu en utilisant un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si la ressource externe se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Cette méthode ne prend pas en charge la `xsl:strip-space` élément. Si votre feuille de style compilée inclus le `xsl:strip-space` élément, vous devez utiliser le <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> surcharge qui accepte un <xref:System.Xml.XmlReader> comme argument d’entrée.  
  
 L'interface <xref:System.Xml.XPath.IXPathNavigable> est implémentée dans les classes <xref:System.Xml.XmlNode> et <xref:System.Xml.XPath.XPathDocument>. Ces classes représentent un cache en mémoire de données XML.  
  
-   La classe <xref:System.Xml.XmlNode> se base sur le DOM (Document Object Model) et comprend des fonctionnalités de modification.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> est une banque de données en lecture seule basé sur le modèle de données XPath. <xref:System.Xml.XPath.XPathDocument> est la classe recommandée pour la transformation XSLT. Elle offre des performances plus rapides par rapport à la classe <xref:System.Xml.XmlNode>.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un objet contenant uniquement le fragment de nœud et transférer cet objet à la méthode <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Pour plus d’informations, consultez [Procédure : transformation d'un fragment de nœud](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 L’exemple suivant exécute une transformation XSLT et des sorties vers une <xref:System.IO.FileStream>.  
  
 [!code-csharp[XslCompiledTransform.Transform#6](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#6)]
 [!code-vb[XslCompiledTransform.Transform#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="input" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Objet implémentant l'interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. Dans Microsoft .NET Framework, il peut s'agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant des arguments qualifiés par un espace de noms utilisés comme données d'entrée pour la transformation. Cette valeur peut être <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.IO.TextWriter" /> vers lequel vous souhaitez exporter.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'objet <see cref="T:System.Xml.XPath.IXPathNavigable" /> et renvoie les résultats vers <see cref="T:System.IO.TextWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fournit des arguments d'exécution supplémentaires.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la transformation XSLT `document()` fonction est activée, il est résolu en utilisant un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si la ressource externe se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Cette méthode ne prend pas en charge la `xsl:strip-space` élément. Si votre feuille de style compilée inclus le `xsl:strip-space` élément, vous devez utiliser le <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> surcharge qui accepte un <xref:System.Xml.XmlReader> comme argument d’entrée.  
  
 L'interface <xref:System.Xml.XPath.IXPathNavigable> est implémentée dans les classes <xref:System.Xml.XmlNode> et <xref:System.Xml.XPath.XPathDocument>. Ces classes représentent un cache en mémoire de données XML.  
  
-   La classe <xref:System.Xml.XmlNode> se base sur le DOM (Document Object Model) et comprend des fonctionnalités de modification.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> est une banque de données en lecture seule basé sur le modèle de données XPath. <xref:System.Xml.XPath.XPathDocument> est la classe recommandée pour la transformation XSLT. Elle offre des performances plus rapides par rapport à la classe <xref:System.Xml.XmlNode>.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un objet contenant uniquement le fragment de nœud et transférer cet objet à la méthode <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Pour plus d’informations, consultez [Procédure : transformation d'un fragment de nœud](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="input" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Objet implémentant l'interface <see cref="T:System.Xml.XPath.IXPathNavigable" />. Dans Microsoft .NET Framework, il peut s'agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant des arguments qualifiés par un espace de noms utilisés comme données d'entrée pour la transformation. Cette valeur peut être <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.  
  
 Si la feuille de style contient un élément <c>xsl:output</c>, vous devez créer l’objet <see cref="T:System.Xml.XmlWriter" /> à l’aide de l’objet <see cref="T:System.Xml.XmlWriterSettings" /> retourné par la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Cela garantit que <see cref="T:System.Xml.XmlWriter" /> a des paramètres de sortie corrects.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'objet <see cref="T:System.Xml.XPath.IXPathNavigable" /> et renvoie les résultats vers <see cref="T:System.Xml.XmlWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fournit des arguments d'exécution supplémentaires.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la transformation XSLT `document()` fonction est activée, il est résolu en utilisant un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si la ressource externe se trouve sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Cette méthode ne prend pas en charge la `xsl:strip-space` élément. Si votre feuille de style compilée inclus le `xsl:strip-space` élément, vous devez utiliser le <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> surcharge qui accepte un <xref:System.Xml.XmlReader> comme argument d’entrée.  
  
 L'interface <xref:System.Xml.XPath.IXPathNavigable> est implémentée dans les classes <xref:System.Xml.XmlNode> et <xref:System.Xml.XPath.XPathDocument>. Ces classes représentent un cache en mémoire de données XML.  
  
-   La classe <xref:System.Xml.XmlNode> se base sur le DOM (Document Object Model) et comprend des fonctionnalités de modification.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> est une banque de données en lecture seule basé sur le modèle de données XPath. <xref:System.Xml.XPath.XPathDocument> est la classe recommandée pour la transformation XSLT. Elle offre des performances plus rapides par rapport à la classe <xref:System.Xml.XmlNode>.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un objet contenant uniquement le fragment de nœud et transférer cet objet à la méthode <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Pour plus d’informations, consultez [Procédure : transformation d'un fragment de nœud](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="input" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> contenant le document d'entrée.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant des arguments qualifiés par un espace de noms utilisés comme données d'entrée pour la transformation. Cette valeur peut être <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.  
  
 Si la feuille de style contient un élément <c>xsl:output</c>, vous devez créer l’objet <see cref="T:System.Xml.XmlWriter" /> à l’aide de l’objet <see cref="T:System.Xml.XmlWriterSettings" /> retourné par la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Cela garantit que <see cref="T:System.Xml.XmlWriter" /> a des paramètres de sortie corrects.</param>
        <param name="documentResolver">
          <see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre la fonction <c>document()</c> XSLT. S’il s’agit de <see langword="null" />, la fonction <c>document()</c> n’est pas résolue.</param>
        <summary>Exécute la transformation à l'aide du document d'entrée spécifié par l'objet <see cref="T:System.Xml.XmlReader" /> et renvoie les résultats vers <see cref="T:System.Xml.XmlWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fournit des arguments de runtime supplémentaires et XmlResolver résout la fonction XSLT <c>document()</c>.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant utilise une <xref:System.Xml.XmlSecureResolver> pour résoudre le XSLT `document()` (fonction).  
  
 [!code-csharp[XslCompiledTransform.Transform#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Transform#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur de <paramref name="input" /> ou de <paramref name="results" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Une erreur s'est produite lors de l'exécution de la transformation XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Le document à transformer spécifié par l’objet <see cref="T:System.Xml.XPath.IXPathNavigable" />.</param>
        <param name="arguments">Liste d’arguments comme <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.  
  
 Si la feuille de style contient un élément <see langword="xsl:output" />, vous devez créer l’objet <see cref="T:System.Xml.XmlWriter" /> à l’aide de l’objet <see cref="T:System.Xml.XmlWriterSettings" /> retourné par la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Cela garantit que <see cref="T:System.Xml.XmlWriter" /> a des paramètres de sortie corrects.</param>
        <param name="documentResolver">Le <see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre la fonction <see langword="document()" /> XSLT. S’il a la valeur <see langword="null" />, la fonction <see langword="document()" /> n’est pas résolue.</param>
        <summary>Exécute la transformation à l’aide du document d’entrée spécifié par l’objet <see cref="T:System.Xml.XPath.IXPathNavigable" /> et renvoie les résultats vers un <see cref="T:System.Xml.XmlWriter" />. La <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fournit des arguments d’exécution supplémentaires et <see cref="T:System.Xml.XmlResolver" /> résout la fonction XSLT <see langword="document()" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>