<Type Name="PromptBuilder" FullName="System.Speech.Synthesis.PromptBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="253ce5087a2e9931ca23b5de7c061c20b1ab18bd" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48651354" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PromptBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit PromptBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.PromptBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class PromptBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class PromptBuilder" />
  <TypeSignature Language="F#" Value="type PromptBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="0285b-101">Crée un objet <see cref="T:System.Speech.Synthesis.Prompt" /> vide et fournit des méthodes permettant d'ajouter du contenu, de sélectionner des voix, de contrôler les attributs des voix et de contrôler la prononciation des mots.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0285b-101">Creates an empty <see cref="T:System.Speech.Synthesis.Prompt" /> object and provides methods for adding content, selecting voices, controlling voice attributes, and controlling the pronunciation of spoken words.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-102">Avec <xref:System.Speech.Synthesis.PromptBuilder>, vous pouvez ajouter une variété de types de contenu à une invite, y compris le texte brut, un balisage SSML (comme une chaîne ou un fichier), enregistrements audio, ou même un autre <xref:System.Speech.Synthesis.PromptBuilder> objet.</span><span class="sxs-lookup"><span data-stu-id="0285b-102">With <xref:System.Speech.Synthesis.PromptBuilder>, you can add a variety of content types to a prompt, including plain text, SSML markup (as a string or a file), recorded audio, or even another <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span>  
  
 <span data-ttu-id="0285b-103">Pour ajouter du texte à un <xref:System.Speech.Synthesis.PromptBuilder> de l’objet et éventuellement contrôler les attributs des voix telles que l’accent, taux et le volume, utilisent une de la <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="0285b-103">To append text to a <xref:System.Speech.Synthesis.PromptBuilder> object and optionally control voice attributes such as emphasis, rate, and volume, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> methods.</span></span>  <span data-ttu-id="0285b-104">Vous pouvez également contrôler les attributs des voix en tant que groupe avec le <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> et <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="0285b-104">You can also control voice attributes as a group with the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> methods.</span></span>  
  
 <span data-ttu-id="0285b-105">Vous pouvez ajouter du texte et contrôler tenus ou comment il est prononcé à l’aide de la <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, ou <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="0285b-105">You can append text and control what is spoken or how it is pronounced using the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,  <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> methods.</span></span>  
  
 <span data-ttu-id="0285b-106">Modifier la voix actuellement sélectionnée dans l’invite à l’aide de l’une des <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> méthodes, une voix spécifique à utiliser ou de la spécification d’affectation de noms requises des caractéristiques de la voix, telles que l’âge et sexe.</span><span class="sxs-lookup"><span data-stu-id="0285b-106">Change the currently selected speaking voice in the prompt using one of the overloaded <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods, naming a specific voice to use or specifying required voice characteristics, such as age and gender.</span></span>  
  
 <span data-ttu-id="0285b-107">Pour la synthèse vocale à partir d’un <xref:System.Speech.Synthesis.PromptBuilder> de l’objet, vous pouvez le passer en tant qu’argument à la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="0285b-107">To generate speech from a <xref:System.Speech.Synthesis.PromptBuilder> object, you can pass it as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span>  
  
 <span data-ttu-id="0285b-108">Pour plus d’informations, consultez [construction complexes invite](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span><span class="sxs-lookup"><span data-stu-id="0285b-108">For more information, see [Constructing a Complex Prompt](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0285b-109">Crée une instance de la classe <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-109">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0285b-110">Crée une instance de la classe <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-110">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0285b-111">L’exemple suivant crée un nouveau <xref:System.Speech.Synthesis.PromptBuilder> instance et lui ajoute une chaîne de texte.</span><span class="sxs-lookup"><span data-stu-id="0285b-111">The following example creates a new <xref:System.Speech.Synthesis.PromptBuilder> instance and adds a text string to it.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="0285b-112">Le balisage suivant montre l’équivalent dans Markup langage SSML (Speech Synthesis), (`xml:lang` est un attribut requis de le `speak` élément) :</span><span class="sxs-lookup"><span data-stu-id="0285b-112">The following markup shows the equivalent in Speech Synthesis Markup Language (SSML), (`xml:lang` is a required attribute of the `speak` element):</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.PromptBuilder : System.Globalization.CultureInfo -&gt; System.Speech.Synthesis.PromptBuilder" Usage="new System.Speech.Synthesis.PromptBuilder culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="0285b-113">Fournit des informations sur une culture spécifique, telle que son langage, le nom de la culture, le système d'écriture, le calendrier utilisé et le mode de mise en forme des chaînes de dates et de tri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-113">Provides information about a specific culture, such as its language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-114">Crée une instance de la classe <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie une culture.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-114">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class and specifies a culture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-115">Ce constructeur définit la valeur pour le <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="0285b-115">This constructor sets the value for the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="0285b-116">Le <xref:System.Speech.Synthesis.SpeechSynthesizer> objet tentera de sélectionner une voix installée qui prend en charge de la langue spécifiée par la `culture` paramètre pour traiter l’invite.</span><span class="sxs-lookup"><span data-stu-id="0285b-116">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the `culture` parameter to process the prompt.</span></span> <span data-ttu-id="0285b-117">Si une voix avec la culture spécifiée est trouvée, il sera utilisé.</span><span class="sxs-lookup"><span data-stu-id="0285b-117">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="0285b-118">Si une voix avec la culture spécifiée est introuvable, la voix par défaut sera utilisée.</span><span class="sxs-lookup"><span data-stu-id="0285b-118">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="0285b-119">Prononciation correctement les mots dans la langue spécifiée par la `culture` paramètre, un moteur de synthèse (synthèse vocale ou TTS) vocale qui prend en charge de la langue doit être installé.</span><span class="sxs-lookup"><span data-stu-id="0285b-119">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="0285b-120">Un moteur de synthèse vocale installé est appelé une voix.</span><span class="sxs-lookup"><span data-stu-id="0285b-120">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="0285b-121">Pour obtenir des informations sur les voix est installées pour une culture spécifique, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="0285b-121">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="0285b-122">Microsoft Windows et l’API System.Speech acceptent tous les codes de langue-pays valides en tant que valeurs pour `culture`.</span><span class="sxs-lookup"><span data-stu-id="0285b-122">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="0285b-123">Les moteurs de synthèse vocale fourni avec Windows 7 prennent en charge les codes de langue-pays suivants :</span><span class="sxs-lookup"><span data-stu-id="0285b-123">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="0285b-124">en-US.</span><span class="sxs-lookup"><span data-stu-id="0285b-124">en-US.</span></span> <span data-ttu-id="0285b-125">Anglais (États-Unis)</span><span class="sxs-lookup"><span data-stu-id="0285b-125">English (United States)</span></span>  
  
-   <span data-ttu-id="0285b-126">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="0285b-126">zh-CN.</span></span> <span data-ttu-id="0285b-127">Chinois (Chine)</span><span class="sxs-lookup"><span data-stu-id="0285b-127">Chinese (China)</span></span>  
  
-   <span data-ttu-id="0285b-128">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="0285b-128">zh-TW.</span></span> <span data-ttu-id="0285b-129">Chinois (Taïwan)</span><span class="sxs-lookup"><span data-stu-id="0285b-129">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="0285b-130">Codes de langue à deux lettres tels que « fr » sont également autorisées.</span><span class="sxs-lookup"><span data-stu-id="0285b-130">Two-letter language codes such as "en" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-131">L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> d’instance et spécifie son <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-131">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies its <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo("en-US"));  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="0285b-132">Le balisage suivant montre l’équivalent SSML :</span><span class="sxs-lookup"><span data-stu-id="0285b-132">The following markup shows the equivalent SSML:</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendAudio">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0285b-133">Ajoute un fichier audio spécifié à un objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-133">Appends a specified audio file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : string -&gt; unit" Usage="promptBuilder.AppendAudio path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="0285b-134">Chemin d’accès qualifié complet du fichier audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-134">A fully qualified path to the audio file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-135">Ajoute le fichier audio spécifié au <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-135">Appends the specified audio file to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri -&gt; unit" Usage="promptBuilder.AppendAudio audioFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="audioFile">
          <span data-ttu-id="0285b-136">URI du fichier audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-136">URI for the audio file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-137">Ajoute le fichier audio à l'URI spécifié dans le <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-137">Appends the audio file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0285b-138">L’exemple suivant initialise une nouvelle instance de la <xref:System.Speech.Synthesis.PromptBuilder> classe, puis ajoute du texte à celui-ci, suivi d’un fichier audio.</span><span class="sxs-lookup"><span data-stu-id="0285b-138">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
    // Add a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("How are you today?");  
    builder.AppendAudio(new Uri ("http://www.speech.microsoft.com/ding.wav"));  
}  
```  
  
 <span data-ttu-id="0285b-139">Le balisage suivant montre le balisage SSML équivalent.</span><span class="sxs-lookup"><span data-stu-id="0285b-139">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  How are you today?  
  <audio src="http://www.speech.microsoft.com/ding.wav" />  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile, string alternateText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile, string alternateText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri, alternateText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile, System::String ^ alternateText);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri * string -&gt; unit" Usage="promptBuilder.AppendAudio (audioFile, alternateText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
        <Parameter Name="alternateText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile">
          <span data-ttu-id="0285b-140">URI du fichier audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-140">URI for the audio file.</span>
          </span>
        </param>
        <param name="alternateText">
          <span data-ttu-id="0285b-141">Chaîne contenant du texte de remplacement représentant l'audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-141">A string containing alternate text representing the audio.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-142">Ajoute le fichier audio et le texte de remplacement spécifiés au <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-142">Appends the specified audio file and alternate text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-143">Le moteur de synthèse vocale dicte le texte de remplacement si le fichier audio ne peut pas être lu.</span><span class="sxs-lookup"><span data-stu-id="0285b-143">The speech synthesis engine will speak the alternate text if the audio file cannot be played.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-144">Les exemples suivants ajoute un fichier audio à un <xref:System.Speech.Synthesis.PromptBuilder> de l’instance et spécifie le texte à lire si le fichier audio ne peut pas être lu.</span><span class="sxs-lookup"><span data-stu-id="0285b-144">The following examples adds an audio file to a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies text to speak if the audio file cannot be played.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
  
    // Concatenate a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendAudio(new Uri ("C:\\OnHold.wav"), "Your call will be answered in the order it was received");  
}  
```  
  
 <span data-ttu-id="0285b-145">Le balisage suivant montre le balisage SSML équivalent.</span><span class="sxs-lookup"><span data-stu-id="0285b-145">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  <audio src="C:\OnHold.wav"> Your call will be answered in the order it was received. </audio>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBookmark">
      <MemberSignature Language="C#" Value="public void AppendBookmark (string bookmarkName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBookmark(string bookmarkName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBookmark (bookmarkName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBookmark(System::String ^ bookmarkName);" />
      <MemberSignature Language="F#" Value="member this.AppendBookmark : string -&gt; unit" Usage="promptBuilder.AppendBookmark bookmarkName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">
          <span data-ttu-id="0285b-146">Chaîne contenant le nom du signet ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-146">A string containing the name of the appended bookmark.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-147">Ajoute un signet à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-147">Appends a bookmark to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-148">Un moteur de synthèse vocale génère une <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> événement si elle rencontre un signet pendant l’énonciation une invite à l’aide de la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="0285b-148">A speech synthesis engine will generate a <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event if it encounters a bookmark while speaking a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-149">L’exemple suivant crée une invite qui inclut les deux signets et envoie la sortie vers un fichier WAV pour la lecture.</span><span class="sxs-lookup"><span data-stu-id="0285b-149">The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback.</span></span> <span data-ttu-id="0285b-150">Le gestionnaire pour le <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> événement écrit le nom du signet et sa position dans le flux audio lorsque l’événement a été déclenché à la console.</span><span class="sxs-lookup"><span data-stu-id="0285b-150">The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nightime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendBreak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0285b-151">Insère un saut de ligne (pause) dans le contenu d'un objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-151">Inserts a break (pause) in the content of a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak();" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : unit -&gt; unit" Usage="promptBuilder.AppendBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0285b-152">Ajoute une interruption à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-152">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-153">Cette méthode ne spécifie pas une durée de la pause.</span><span class="sxs-lookup"><span data-stu-id="0285b-153">This method does not specify a duration for the break.</span></span> <span data-ttu-id="0285b-154">Le <xref:System.Speech.Synthesis.SpeechSynthesizer> détermine une valeur de durée selon le contexte linguistique.</span><span class="sxs-lookup"><span data-stu-id="0285b-154">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will determine a duration value based on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-155">L’exemple suivant génère une invite de commandes contenant deux phrases séparées par un saut et parle de l’invite pour le périphérique audio par défaut sur l’ordinateur.</span><span class="sxs-lookup"><span data-stu-id="0285b-155">The following example builds a prompt containing two sentences separated by a break and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.");  
        builder.AppendBreak();  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.Speech.Synthesis.PromptBreak strength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (strength As PromptBreak)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(System::Speech::Synthesis::PromptBreak strength);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : System.Speech.Synthesis.PromptBreak -&gt; unit" Usage="promptBuilder.AppendBreak strength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strength" Type="System.Speech.Synthesis.PromptBreak" />
      </Parameters>
      <Docs>
        <param name="strength">
          <span data-ttu-id="0285b-156">Indique la durée de l'arrêt, avec les valeurs croissantes suivantes :</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-156">Indicates the duration of the break, with the following increasing values:</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-157">Ajoute une interruption à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie sa force (durée).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-157">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its strength (duration).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-158">Les valeurs dans le <xref:System.Speech.Synthesis.PromptBreak> énumération représentent une plage d’intervalles de séparation (suspend) entre les limites de mots.</span><span class="sxs-lookup"><span data-stu-id="0285b-158">The values in the <xref:System.Speech.Synthesis.PromptBreak> enumeration represent a range of separation intervals (pauses) between word boundaries.</span></span> <span data-ttu-id="0285b-159">Le moteur de synthèse vocale détermine la durée exacte de l’intervalle.</span><span class="sxs-lookup"><span data-stu-id="0285b-159">The speech synthesis engine determines the exact duration of the interval.</span></span> <span data-ttu-id="0285b-160">Lorsqu’un saut est demandé, une des valeurs suivantes est passée pour le moteur de synthèse vocale (TTS), qui contient un mappage entre ces valeurs et les valeurs de saut de milliseconde correspondantes.</span><span class="sxs-lookup"><span data-stu-id="0285b-160">When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-161">L’exemple suivant génère une invite de commandes contenant deux phrases séparées par un saut et envoie la sortie vers un fichier WAV pour la lecture.</span><span class="sxs-lookup"><span data-stu-id="0285b-161">The following example builds a prompt containing two sentences separated by a break and sends the output to a WAV file for playback.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(PromptBreak.Medium);  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (duration As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(TimeSpan duration);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : TimeSpan -&gt; unit" Usage="promptBuilder.AppendBreak duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="duration">
          <span data-ttu-id="0285b-162">Temps en graduations, où une graduation est égale à 100 nanosecondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-162">The time in ticks, where one tick equals 100 nanoseconds.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-163">Ajoute une interruption de la durée spécifiée à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-163">Appends a break of the specified duration to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-164">Un saut de peut être utilisé pour contrôler les pauses ou autres limites prosodique entre les mots.</span><span class="sxs-lookup"><span data-stu-id="0285b-164">A break can be used to control pauses or other prosodic boundaries between words.</span></span> <span data-ttu-id="0285b-165">Une séparation est facultative.</span><span class="sxs-lookup"><span data-stu-id="0285b-165">A break is optional.</span></span> <span data-ttu-id="0285b-166">Si un saut n’est pas présent, le synthétiseur détermine le saut entre les mots en fonction du contexte linguistique.</span><span class="sxs-lookup"><span data-stu-id="0285b-166">If a break is not present, the synthesizer determines the break between words depending on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-167">L’exemple suivant génère une invite de commandes contenant deux phrases séparées par un saut de 15,000,000 graduations (1,5 secondes) et parle de l’invite pour le périphérique audio par défaut sur l’ordinateur.</span><span class="sxs-lookup"><span data-stu-id="0285b-167">The following example builds a prompt containing two sentences separated by a break of 15,000,000 ticks (1.5 seconds), and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(new TimeSpan(15000000));  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPromptBuilder">
      <MemberSignature Language="C#" Value="public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendPromptBuilder(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendPromptBuilder(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.AppendPromptBuilder : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="promptBuilder.AppendPromptBuilder promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">
          <span data-ttu-id="0285b-168">Contenu à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-168">The content to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-169">Ajoute un objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> à un autre objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-169">Appends a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object to another <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0285b-170">L’exemple suivant crée deux <xref:System.Speech.Synthesis.PromptBuilder> instances et les ajoute à une troisième <xref:System.Speech.Synthesis.PromptBuilder>.</span><span class="sxs-lookup"><span data-stu-id="0285b-170">The example that follows creates two <xref:System.Speech.Synthesis.PromptBuilder> instances and then appends them to a third <xref:System.Speech.Synthesis.PromptBuilder>.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\showtimes.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\showtimes.wav");  
  
        // Build child prompts.  
        PromptBuilder theatreA = new PromptBuilder();  
        theatreA.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30");  
        theatreA.AppendBreak(PromptBreak.Large);  
        PromptBuilder theatreB = new PromptBuilder();  
        theatreB.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Build the parent prompt and append the two child prompts.  
        PromptBuilder showTimes = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        showTimes.AppendText(  
          "The following are the show times for tonight's movies:");  
        showTimes.AppendPromptBuilder(theatreA);  
        showTimes.AppendPromptBuilder(theatreB);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(showTimes);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendSsml">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0285b-171">Ajoute un fichier SSML à un objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-171">Appends an SSML file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : string -&gt; unit" Usage="promptBuilder.AppendSsml path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="0285b-172">Chemin qualifié complet au fichier SSML à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-172">A fully qualified path to the SSML file to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-173">Ajoute le fichier SSML au niveau du chemin spécifié à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-173">Appends the SSML file at the specified path to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-174">Le fichier SSML doit être un fichier de format XML conforme à la [Markup langage SSML (Speech Synthesis) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) spécification.</span><span class="sxs-lookup"><span data-stu-id="0285b-174">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification.</span></span>  
  
 <span data-ttu-id="0285b-175">Vous pouvez également ajouter un balisage SSML comme une chaîne à l’aide <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-175">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-176">L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> de l’objet et ajoute le contenu d’un fichier SSML à l’aide du <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="0285b-176">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml("c:\\test\\Weather.ssml");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 <span data-ttu-id="0285b-177">Voici le fichier SSML qui fait référence à l’exemple précédent.</span><span class="sxs-lookup"><span data-stu-id="0285b-177">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (Uri ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Uri ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(Uri ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : Uri -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="ssmlFile">
          <span data-ttu-id="0285b-178">URI qualifié complet au fichier SSML à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-178">A fully qualified URI to the SSML file to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-179">Ajoute le fichier SSML au niveau de l'URI spécifié à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-179">Appends the SSML file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-180">Le fichier SSML doit être un fichier de format XML conforme à la [Markup langage SSML (Speech Synthesis) Version 1.0](https://www.w3.org/TR/speech-synthesis/) spécification.</span><span class="sxs-lookup"><span data-stu-id="0285b-180">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="0285b-181">Vous pouvez également ajouter un balisage SSML comme une chaîne à l’aide <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-181">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-182">L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> de l’objet et ajoute le contenu d’un fichier SSML à l’aide du <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="0285b-182">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml(new Uri("c:\\test\\Weather.ssml"));  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 <span data-ttu-id="0285b-183">Voici le fichier SSML qui fait référence à l’exemple précédent.</span><span class="sxs-lookup"><span data-stu-id="0285b-183">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (System.Xml.XmlReader ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Xml.XmlReader ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::Xml::XmlReader ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : System.Xml.XmlReader -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="ssmlFile">
          <span data-ttu-id="0285b-184">Nom qualifié complet au fichier XML à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-184">A fully qualified name to the XML file to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-185">Ajoute un objet <c>XMLReader</c> qui référence une invite SSML à l’objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-185">Appends an <c>XMLReader</c> object that references an SSML prompt to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-186">Le fichier SSML doit être un fichier de format XML conforme à la [Markup langage SSML (Speech Synthesis) Version 1.0](https://www.w3.org/TR/speech-synthesis/) spécification.</span><span class="sxs-lookup"><span data-stu-id="0285b-186">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="0285b-187">Vous pouvez également ajouter un balisage SSML comme une chaîne à l’aide <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-187">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-188">L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> de l’objet à partir d’un <xref:System.Xml.XmlReader> objet qui référence un fichier contenant le balisage de balisage langage SSML (Speech Synthesis).</span><span class="sxs-lookup"><span data-stu-id="0285b-188">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language (SSML) markup.</span></span>  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Create the path to the SSML file.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.xml");  
        PromptBuilder builder = null;  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder = new PromptBuilder();  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsmlMarkup">
      <MemberSignature Language="C#" Value="public void AppendSsmlMarkup (string ssmlMarkup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsmlMarkup(string ssmlMarkup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsmlMarkup (ssmlMarkup As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsmlMarkup(System::String ^ ssmlMarkup);" />
      <MemberSignature Language="F#" Value="member this.AppendSsmlMarkup : string -&gt; unit" Usage="promptBuilder.AppendSsmlMarkup ssmlMarkup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlMarkup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ssmlMarkup">
          <span data-ttu-id="0285b-189">Chaîne qui contient le balisage SSML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-189">A string containing SSML markup.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-190">Ajoute la chaîne spécifiée contenant un balisage SSML à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-190">Appends the specified string containing SSML markup to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-191">Vous devez utiliser les caractères d’échappement appropriée lors de l’ajout d’un balisage SSML.</span><span class="sxs-lookup"><span data-stu-id="0285b-191">You must use the appropriate escape characters when appending SSML markup.</span></span> <span data-ttu-id="0285b-192">Notez les-obliques précédant les guillemets entourant la valeur de la `interpret-as` attribut dans l’exemple suivant :</span><span class="sxs-lookup"><span data-stu-id="0285b-192">Notice the backward-slashes preceding the quotation marks enclosing the value of the `interpret-as` attribute in the following example:</span></span>  
  
```csharp  
builder.AppendSsmlMarkup("<say-as interpret-as = \"characters\"> chair </say-as>");  
```  
  
> [!NOTE]
>  <span data-ttu-id="0285b-193">La chaîne utilisée comme argument à <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> ne peut pas inclure un `speak` élément.</span><span class="sxs-lookup"><span data-stu-id="0285b-193">The string used as an argument to <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> cannot include a `speak` element.</span></span>  
  
 <span data-ttu-id="0285b-194">Lorsque vous utilisez <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> pour spécifier des prononciations inline dans un `phoneme` élément, vous pouvez utiliser des téléphones à partir des alphabets phonétiques suivantes, fournies que le moteur de reconnaissance vocale actuel prend en charge :</span><span class="sxs-lookup"><span data-stu-id="0285b-194">When using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> to specify inline pronunciations in a `phoneme` element, you can use phones from any of the following phonetic alphabets, provided that the current speech engine supports it:</span></span>  
  
-   <span data-ttu-id="0285b-195">Alphabet de phonétique international (IPA)</span><span class="sxs-lookup"><span data-stu-id="0285b-195">International Phonetic Alphabet (IPA)</span></span>  
  
-   <span data-ttu-id="0285b-196">Universal Phone Set (UPS)</span><span class="sxs-lookup"><span data-stu-id="0285b-196">Universal Phone Set (UPS)</span></span>  
  
-   <span data-ttu-id="0285b-197">SAPI téléphone défini</span><span class="sxs-lookup"><span data-stu-id="0285b-197">SAPI Phone Set</span></span>  
  
 <span data-ttu-id="0285b-198">N’importe quel moteur de reconnaissance vocale compatibles SSML s’exprime téléphones à partir du fichier IPA.</span><span class="sxs-lookup"><span data-stu-id="0285b-198">Any SSML-compliant speech engine will speak phones from the IPA.</span></span>  
  
 <span data-ttu-id="0285b-199">Vous pouvez également ajouter un fichier contenant un balisage SSML à l’aide d’une de la <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="0285b-199">You can also append a file containing SSML markup using one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods.</span></span> <span data-ttu-id="0285b-200">Pour ajouter du texte à énoncer qui n’est pas formaté avec le langage de balisage, utilisez une de la <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, ou <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="0285b-200">To append text to be spoken that is not formatted with markup language, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendText">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0285b-201">Ajoute le texte à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-201">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string -&gt; unit" Usage="promptBuilder.AppendText textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="0285b-202">Chaîne contenant le texte à énoncer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-202">A string containing the text to be spoken.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-203">Spécifie le texte à ajouter à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-203">Specifies text to append to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-204">Pour ajouter du texte mis en forme en tant que langage de balisage SSML, utilisez <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-204">To append text that is formatted as SSML markup language, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-205">L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> de l’objet et ajoute une chaîne de texte à l’aide de la <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="0285b-205">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder speakText = new PromptBuilder();  
        speakText.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt.  
        synth.Speak(speakText);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptEmphasis emphasis) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, emphasis As PromptEmphasis)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptEmphasis emphasis);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptEmphasis -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, emphasis)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="emphasis" Type="System.Speech.Synthesis.PromptEmphasis" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="0285b-206">Chaîne contenant le texte à énoncer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-206">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="emphasis">
          <span data-ttu-id="0285b-207">Valeur de l'importance ou de la contrainte à appliquer au texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-207">The value for the emphasis or stress to apply to the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-208">Ajoute du texte à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie le niveau d'importance du texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-208">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the degree of emphasis for the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-209">Les moteurs de synthèse vocale dans Windows ne gèrent pas le paramètre d’importance pour l’instant.</span><span class="sxs-lookup"><span data-stu-id="0285b-209">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="0285b-210">Définition des valeurs pour le paramètre importance ne produira aucune modification audible dans la sortie de synthèse vocale.</span><span class="sxs-lookup"><span data-stu-id="0285b-210">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptRate rate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, rate As PromptRate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptRate rate);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptRate -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, rate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="rate" Type="System.Speech.Synthesis.PromptRate" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="0285b-211">Chaîne contenant le texte à énoncer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-211">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="rate">
          <span data-ttu-id="0285b-212">Valeur de la vitesse d'énonciation qui s'applique au texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-212">The value for the speaking rate to apply to the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-213">Ajoute du texte à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie la vitesse d'énonciation du texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-213">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the speaking rate for the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0285b-214">L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> de l’objet et ajoute des chaînes de texte.</span><span class="sxs-lookup"><span data-stu-id="0285b-214">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="0285b-215">L’exemple utilise le <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> méthode pour spécifier un ralentissement en parlant de taux pour la chaîne ajoutée, qui énumère le contenu d’une commande.</span><span class="sxs-lookup"><span data-stu-id="0285b-215">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder speakRate = new PromptBuilder();  
        speakRate.AppendText("Your order for");  
        speakRate.AppendText("one kitchen sink and one faucet", PromptRate.Slow);  
        speakRate.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(speakRate);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptVolume volume) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, volume As PromptVolume)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptVolume volume);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptVolume -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, volume)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="volume" Type="System.Speech.Synthesis.PromptVolume" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="0285b-216">Chaîne contenant le texte à énoncer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-216">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="volume">
          <span data-ttu-id="0285b-217">Valeur du volume d'énonciation (profondeur sonore) à appliquer au texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-217">The value for the speaking volume (loudness) to apply to the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-218">Ajoute du texte à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie le volume de prononciation du texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-218">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the volume to speak the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-219">Le <xref:System.Speech.Synthesis.PromptVolume.Default> définition pour <xref:System.Speech.Synthesis.PromptVolume> est un volume complet, ce qui est le même comme <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span><span class="sxs-lookup"><span data-stu-id="0285b-219">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="0285b-220">Les autres paramètres de baisser le volume de la sortie vocale par rapport à chiffrement de volume complet.</span><span class="sxs-lookup"><span data-stu-id="0285b-220">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-221">L’exemple suivant utilise le <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> méthode pour spécifier les paramètres de volume qui la <xref:System.Speech.Synthesis.SpeechSynthesizer> doit s’appliquer à la sortie vocale.</span><span class="sxs-lookup"><span data-stu-id="0285b-221">The following example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify volume settings that the <xref:System.Speech.Synthesis.SpeechSynthesizer> should apply to speech output.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt that applies different volume settings.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is the default speaking volume.", PromptVolume.Default);  
        builder.AppendBreak();  
        builder.AppendText("This is the extra loud speaking volume.", PromptVolume.ExtraLoud);  
        builder.AppendBreak();  
        builder.AppendText("This is the medium speaking volume.", PromptVolume.Medium);  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithAlias">
      <MemberSignature Language="C#" Value="public void AppendTextWithAlias (string textToSpeak, string substitute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithAlias(string textToSpeak, string substitute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithAlias (textToSpeak As String, substitute As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithAlias(System::String ^ textToSpeak, System::String ^ substitute);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithAlias : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithAlias (textToSpeak, substitute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="substitute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="0285b-222">Chaîne contenant la représentation du texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-222">A string containing the text representation.</span>
          </span>
        </param>
        <param name="substitute">
          <span data-ttu-id="0285b-223">Chaîne contenant le texte à énoncer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-223">A string containing the text to be spoken.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-224">Ajoute du texte à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie le texte d'alias à énoncer à la place du texte ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-224">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the alias text to be spoken in place of the appended text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-225">Ainsi, un document de contenir un prononcés et une forme écrite pour une invite de commandes.</span><span class="sxs-lookup"><span data-stu-id="0285b-225">This allows a document to contain both a spoken and a written form for a prompt.</span></span> <span data-ttu-id="0285b-226">Par exemple, la forme écrite peut être un acronyme, telles que SAPI, et la forme parlée pourrait être le texte développé pour l’acronyme, dans ce cas Speech API.</span><span class="sxs-lookup"><span data-stu-id="0285b-226">For example, the written form could be an acronym, such as SAPI, and the spoken form could be the expanded text for the acronym, in this case Speech Application Programming Interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-227">L’exemple suivant ajoute une chaîne de texte (« Speech Synthesis Markup Language ») et son alias « SSML ( ») à un <xref:System.Speech.Synthesis.PromptBuilder> objet.</span><span class="sxs-lookup"><span data-stu-id="0285b-227">The following example appends a text string ("Speech Synthesis Markup Language") and its alias ("SSML") to a <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span> <span data-ttu-id="0285b-228">Le synthétiseur est prononcez « S S M L ».</span><span class="sxs-lookup"><span data-stu-id="0285b-228">The synthesizer will pronounce "S S M L".</span></span>  
  
```  
PromptBuilder alias = new PromptBuilder();  
alias.AppendTextWithAlias("Speech Synthesis Markup Language","SSML");   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendTextWithHint">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0285b-229">Ajoute du texte à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie le type de contenu du texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-229">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type of the text.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, valuetype System.Speech.Synthesis.SayAs sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::Speech::Synthesis::SayAs sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * System.Speech.Synthesis.SayAs -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.Speech.Synthesis.SayAs" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="0285b-230">Chaîne contenant le texte à énoncer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-230">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="sayAs">
          <span data-ttu-id="0285b-231">Type de contenu du texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-231">The content type of the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-232">Ajoute du texte à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie le type de contenu à l'aide d'un membre de l'énumération <see cref="T:System.Speech.Synthesis.SayAs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-232">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type using a member of the <see cref="T:System.Speech.Synthesis.SayAs" /> enumeration.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-233">Le type de contenu spécifié par `sayAs` peut fournir des conseils pour le moteur de synthèse vocale sur comment prononcer le contenu de `textToSpeak`.</span><span class="sxs-lookup"><span data-stu-id="0285b-233">The content type specified by `sayAs` can provide guidance to the speech synthesis engine about how to pronounce the contents of `textToSpeak`.</span></span>  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and define the data types for some of the added strings.  
        PromptBuilder sayAs = new PromptBuilder();  
        sayAs.AppendText("Your");  
        sayAs.AppendTextWithHint("1st", SayAs.NumberOrdinal);  
        sayAs.AppendText("request was for");  
        sayAs.AppendTextWithHint("1", SayAs.NumberCardinal);  
        sayAs.AppendText("room, on");  
        sayAs.AppendTextWithHint("10/19/2012,", SayAs.MonthDayYear);  
        sayAs.AppendText("with early arrival at");  
        sayAs.AppendTextWithHint("12:35pm", SayAs.Time12);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(sayAs);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, string sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, string sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithHint (textToSpeak As String, sayAs As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::String ^ sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="0285b-234">Chaîne contenant le texte à énoncer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-234">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="sayAs">
          <span data-ttu-id="0285b-235">Type de contenu du texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-235">The content type of the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-236">Ajoute du texte à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et une <see cref="T:System.String" /> qui spécifie le type de contenu du texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-236">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and a <see cref="T:System.String" /> that specifies the content type of the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-237">Vous pouvez utiliser cette méthode pour spécifier un type de contenu qui n’est pas inclus dans le <xref:System.Speech.Synthesis.SayAs> énumération.</span><span class="sxs-lookup"><span data-stu-id="0285b-237">You can use this method to specify a content type that is not included in the <xref:System.Speech.Synthesis.SayAs> enumeration.</span></span> <span data-ttu-id="0285b-238">Toutefois, le moteur de synthèse vocale doit prendre en charge le paramètre que vous spécifiez.</span><span class="sxs-lookup"><span data-stu-id="0285b-238">However, the TTS engine must support the parameter that you specify.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithPronunciation">
      <MemberSignature Language="C#" Value="public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithPronunciation(string textToSpeak, string pronunciation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithPronunciation (textToSpeak As String, pronunciation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithPronunciation(System::String ^ textToSpeak, System::String ^ pronunciation);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithPronunciation : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithPronunciation (textToSpeak, pronunciation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="pronunciation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="0285b-239">Chaîne contenant la forme écrite du mot dans l'alphabet classique pour une langue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-239">A string containing the written form of the word using the conventional alphabet for a language.</span>
          </span>
        </param>
        <param name="pronunciation">
          <span data-ttu-id="0285b-240">Chaîne contenant des phonèmes à utiliser en suivant l'alphabet phonétique international (IPA).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-240">A string containing phones to be spoken from the International Phonetic Alphabet (IPA).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-241">Ajoute du texte à l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie la prononciation du texte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-241">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the pronunciation for the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-242">Le synthétiseur énonce le contenu de la `pronunciation` paramètre, pas le contenu de la `textToSpeak` paramètre.</span><span class="sxs-lookup"><span data-stu-id="0285b-242">The synthesizer speaks the contents of the `pronunciation` parameter, not the contents of the `textToSpeak` parameter.</span></span>  
  
 <span data-ttu-id="0285b-243">Prononciations spécifiées inline dans les invites s’appliquent uniquement à l’occurrence d’un mot et remplacer des prononciations du moteur de reconnaissance vocale ou l’un de ses lexiques actuellement actives.</span><span class="sxs-lookup"><span data-stu-id="0285b-243">Pronunciations specified inline in prompts apply only to the individual occurrence of a word and override pronunciations of the speech engine or any of its currently active lexicons.</span></span> <span data-ttu-id="0285b-244">En règle générale, vous allez utiliser inline prononciations pour des prononciations personnalisées de mots existants ou pour la prononciation des mots rares, telles que des noms propres, dont le moteur de synthèse vocale ne peut pas prononcer ainsi que prévu.</span><span class="sxs-lookup"><span data-stu-id="0285b-244">Typically, you will use inline pronunciations for custom pronunciations of existing words or for pronunciation of uncommon words, such as proper names, which the speech synthesis engine may not pronounce as well as expected.</span></span>  
  
 <span data-ttu-id="0285b-245">Inline prononciations doivent être spécifiées à l’aide de téléphones à partir de l’Alphabet phonétique International (IPA).</span><span class="sxs-lookup"><span data-stu-id="0285b-245">Inline pronunciations must be specified using phones from the International Phonetic Alphabet (IPA).</span></span> <span data-ttu-id="0285b-246">Un téléphone est une lettre ou un caractère qui représente un son discrète de la voix.</span><span class="sxs-lookup"><span data-stu-id="0285b-246">A phone is a letter or character that represents a discreet sound of speech.</span></span> <span data-ttu-id="0285b-247">Moteurs de reconnaissance vocale respecter la [Markup langage SSML (Speech Synthesis) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) spécification prononcez les téléphones à partir du fichier IPA.</span><span class="sxs-lookup"><span data-stu-id="0285b-247">Speech engines that comply with the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification will pronounce phones from the IPA.</span></span> <span data-ttu-id="0285b-248">Pour spécifier des prononciations inline à l’aide d’autres alphabets phonétiques, consultez <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-248">To specify inline pronunciations using other phonetic alphabets, see <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
 <span data-ttu-id="0285b-249">Le fichier IPA publie un [graphique](http://go.microsoft.com/fwlink/?LinkId=58362) qui répertorie son téléphones et les mappe aux numéros d’Unicode.</span><span class="sxs-lookup"><span data-stu-id="0285b-249">The IPA publishes a [chart](http://go.microsoft.com/fwlink/?LinkId=58362) that lists its phones and maps them to Unicode numbers.</span></span>  
  
 <span data-ttu-id="0285b-250">Certains téléphones dans l’alphabet IPA ont les représentations sous forme de mêmes que des lettres de l’alphabet Latin.</span><span class="sxs-lookup"><span data-stu-id="0285b-250">Some phones in the IPA alphabet have the same representations as letters in the Latin alphabet.</span></span> <span data-ttu-id="0285b-251">Dans ce cas, il est possible de taper les caractères latins et la représentation appropriée pour un téléphone.</span><span class="sxs-lookup"><span data-stu-id="0285b-251">In those cases, it is possible to type the Latin character and have the proper representation for a phone.</span></span> <span data-ttu-id="0285b-252">Étant donné que les caractères latins comme couramment utilisées dans le texte peuvent représenter plusieurs téléphones de l’ensemble de téléphone IPA, simplement en tapant les caractères latins entraîne pas nécessairement le téléphone IPA précis souhaité.</span><span class="sxs-lookup"><span data-stu-id="0285b-252">Because the Latin characters as commonly used in text may represent several phones of the IPA phone set, simply typing the Latin character might not result in the precise IPA phone desired.</span></span> <span data-ttu-id="0285b-253">Autres téléphones de IPA alphabet devoir être représentée dans le code en tant que caractère références consistant en une esperluette (&), le signe dièse (#), et un nombre Unicode pour le téléphone de votre choix dans un format hexadécimal ou décimal, tous les suivis par un point-virgule ( ;).</span><span class="sxs-lookup"><span data-stu-id="0285b-253">Other phones of the IPA alphabet need to be represented in code as character references consisting of an ampersand (&), the number sign (#), and a Unicode number for the desired phone in hexadecimal or decimal, all followed by a semicolon (;).</span></span> <span data-ttu-id="0285b-254">Par exemple, un schwa (&\#x0259 ;) est représenté par `&#x0259;`.</span><span class="sxs-lookup"><span data-stu-id="0285b-254">For example, a schwa (&\#x0259;) would be represented by `&#x0259;`.</span></span>  
  
 <span data-ttu-id="0285b-255">Pour ajouter des prononciations nouvelle et personnalisées pour plusieurs mots, par exemple dialectes express régional ou pour ajouter des noms corrects ou un vocabulaire spécifique à une discipline de formation ou médicale, générer un lexique et l’ajouter à la <xref:System.Speech.Synthesis.SpeechSynthesizer> à l’aide de <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-255">To add new or custom pronunciations for multiple words, for example to express regional dialects or to add proper names or vocabulary that is specific to an educational or medical discipline, build a lexicon and add it to the <xref:System.Speech.Synthesis.SpeechSynthesizer> using <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-256">L’exemple suivant initialise une nouvelle instance de la <xref:System.Speech.Synthesis.PromptBuilder> classe.</span><span class="sxs-lookup"><span data-stu-id="0285b-256">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class.</span></span> <span data-ttu-id="0285b-257">Il ajoute ensuite la chaîne de texte « Mon nom est » à l’instance.</span><span class="sxs-lookup"><span data-stu-id="0285b-257">It then appends the text string "My name is" to the instance.</span></span> <span data-ttu-id="0285b-258">Enfin, il ajoute une chaîne contenant le nom approprié « DuBois » et spécifie la prononciation du nom.</span><span class="sxs-lookup"><span data-stu-id="0285b-258">Finally, it appends a string containing the proper name "DuBois" and specifies the pronunciation of the name.</span></span>  
  
```csharp  
public void ProperName()  
{  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("My name is");  
  
    // Add a proper name and its pronunciation.  
    builder.AppendTextWithPronunciation("DuBois", "duˈbwɑ");     
}  
```  
  
 <span data-ttu-id="0285b-259">Le balisage suivant montre le langage SSML que ce <xref:System.Speech.Synthesis.PromptBuilder> génère l’objet.</span><span class="sxs-lookup"><span data-stu-id="0285b-259">The following markup shows the SSML that this <xref:System.Speech.Synthesis.PromptBuilder> object generates.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-us">  
  My name is <phoneme ph="duˈbwɑ"> DuBois </phoneme>  
</speak>  
```  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkId=58363">
          <span data-ttu-id="0285b-260">Association phonétique internationale</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-260">International Phonetic Association</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ClearContent">
      <MemberSignature Language="C#" Value="public void ClearContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ClearContent" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearContent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearContent();" />
      <MemberSignature Language="F#" Value="member this.ClearContent : unit -&gt; unit" Usage="promptBuilder.ClearContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0285b-261">Efface le contenu de l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-261">Clears the content from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0285b-262">Obtient ou définit les informations de culture de l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-262">Gets or sets the culture information for the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-263">Le <xref:System.Speech.Synthesis.SpeechSynthesizer> objet tentera de sélectionner une voix installée qui prend en charge de la langue spécifiée par la <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriété pour traiter l’invite.</span><span class="sxs-lookup"><span data-stu-id="0285b-263">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property to process the prompt.</span></span> <span data-ttu-id="0285b-264">Si une voix avec la culture spécifiée est trouvée, il sera utilisé.</span><span class="sxs-lookup"><span data-stu-id="0285b-264">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="0285b-265">Si une voix avec la culture spécifiée est introuvable, la voix par défaut sera utilisée.</span><span class="sxs-lookup"><span data-stu-id="0285b-265">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="0285b-266">Une culture peut également être spécifiée dans l’invite pour les sections discrets de contenu à l’aide de la <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, et <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="0285b-266">A culture may also be specified within the prompt for discreet sections of content using the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> methods.</span></span> <span data-ttu-id="0285b-267">Une culture spécifiée pour une partie du contenu à l’aide d’une des méthodes ci-dessus remplacera le <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriété alors qu’en vigueur et le <xref:System.Speech.Synthesis.SpeechSynthesizer> tente de sélectionner une voix installée qui prend en charge de la langue spécifiée par la `culture` paramètre de la méthode.</span><span class="sxs-lookup"><span data-stu-id="0285b-267">A culture specified for a portion of content using one of the above methods will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property while in effect, and the <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter of the method.</span></span>  
  
 <span data-ttu-id="0285b-268">Prononciation correctement les mots dans la langue spécifiée par la <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriété, un moteur de synthèse (synthèse vocale ou TTS) vocale qui prend en charge de la langue doit être installée.</span><span class="sxs-lookup"><span data-stu-id="0285b-268">To correctly pronounce words in the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="0285b-269">Un moteur de synthèse vocale installé est appelé une voix.</span><span class="sxs-lookup"><span data-stu-id="0285b-269">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="0285b-270">Pour obtenir des informations sur les voix est installées pour une culture spécifique, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="0285b-270">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="0285b-271">Microsoft Windows et l’API System.Speech acceptent tous les codes de langue-pays valides en tant que valeurs pour `culture`.</span><span class="sxs-lookup"><span data-stu-id="0285b-271">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="0285b-272">Les moteurs de synthèse vocale fourni avec Windows 7 prennent en charge les codes de langue-pays suivants :</span><span class="sxs-lookup"><span data-stu-id="0285b-272">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="0285b-273">en-US.</span><span class="sxs-lookup"><span data-stu-id="0285b-273">en-US.</span></span> <span data-ttu-id="0285b-274">Anglais (États-Unis)</span><span class="sxs-lookup"><span data-stu-id="0285b-274">English (United States)</span></span>  
  
-   <span data-ttu-id="0285b-275">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="0285b-275">zh-CN.</span></span> <span data-ttu-id="0285b-276">Chinois (Chine)</span><span class="sxs-lookup"><span data-stu-id="0285b-276">Chinese (China)</span></span>  
  
-   <span data-ttu-id="0285b-277">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="0285b-277">zh-TW.</span></span> <span data-ttu-id="0285b-278">Chinois (Taïwan)</span><span class="sxs-lookup"><span data-stu-id="0285b-278">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="0285b-279">Codes de langue à deux lettres tels que « fr » sont également autorisées.</span><span class="sxs-lookup"><span data-stu-id="0285b-279">Two-letter language codes such as "en" are also permitted.</span></span>  <span data-ttu-id="0285b-280">Consultez [constantes d’identificateur de langue et de chaînes](http://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) pour obtenir la liste complète des codes de langue.</span><span class="sxs-lookup"><span data-stu-id="0285b-280">See [Language Identifier Constants and Strings](http://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) for a comprehensive list of language codes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndParagraph">
      <MemberSignature Language="C#" Value="public void EndParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndParagraph();" />
      <MemberSignature Language="F#" Value="member this.EndParagraph : unit -&gt; unit" Usage="promptBuilder.EndParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0285b-281">Spécifie la fin d'un paragraphe dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-281">Specifies the end of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-282">Invites long peuvent être rendues plus comme voix humaine si elles sont divisées en phrases et des paragraphes.</span><span class="sxs-lookup"><span data-stu-id="0285b-282">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="0285b-283">Pour obtenir un exemple, consultez <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-283">See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSentence">
      <MemberSignature Language="C#" Value="public void EndSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSentence();" />
      <MemberSignature Language="F#" Value="member this.EndSentence : unit -&gt; unit" Usage="promptBuilder.EndSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0285b-284">Spécifie la fin d'une phrase dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-284">Specifies the end of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-285">Invites long peuvent être rendues plus comme voix humaine si elles sont divisées en phrases et des paragraphes.</span><span class="sxs-lookup"><span data-stu-id="0285b-285">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="0285b-286">Pour obtenir un exemple, consultez <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-286">See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndStyle">
      <MemberSignature Language="C#" Value="public void EndStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndStyle();" />
      <MemberSignature Language="F#" Value="member this.EndStyle : unit -&gt; unit" Usage="promptBuilder.EndStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0285b-287">Spécifie la fin d'un style dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-287">Specifies the end of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-288">Le <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> méthode permet d’arrêter le style actuel.</span><span class="sxs-lookup"><span data-stu-id="0285b-288">The <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method stops the current speaking style.</span></span> <span data-ttu-id="0285b-289">Le style d’élocution rétablit le paramètre qui était en vigueur avant le <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> méthode initiée par un nouveau style de voix.</span><span class="sxs-lookup"><span data-stu-id="0285b-289">The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style.</span></span> <span data-ttu-id="0285b-290">Pour obtenir un exemple, consultez <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-290">See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndVoice">
      <MemberSignature Language="C#" Value="public void EndVoice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndVoice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndVoice" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndVoice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndVoice();" />
      <MemberSignature Language="F#" Value="member this.EndVoice : unit -&gt; unit" Usage="promptBuilder.EndVoice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0285b-291">Spécifie la fin de l'utilisation d'une voix dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-291">Specifies the end of use of a voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-292">Le <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> méthode permet d’arrêter l’utilisation de la voix actuelle pour la sortie vocale.</span><span class="sxs-lookup"><span data-stu-id="0285b-292">The <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> method stops the use of the current voice for speech output.</span></span> <span data-ttu-id="0285b-293">La voix rétablit le paramètre qui était en vigueur avant le <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> méthode initiée par une nouvelle voix.</span><span class="sxs-lookup"><span data-stu-id="0285b-293">The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0285b-294">Détermine si <see cref="T:System.Speech.Synthesis.PromptBuilder" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-294">Gets whether the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> is empty.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartParagraph">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0285b-295">Spécifie le début d'un paragraphe dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et éventuellement une langue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-295">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-296">Invites long peuvent être rendues plus comme voix humaine si elles sont divisées en phrases et des paragraphes.</span><span class="sxs-lookup"><span data-stu-id="0285b-296">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph();" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : unit -&gt; unit" Usage="promptBuilder.StartParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0285b-297">Spécifie le début d'un paragraphe dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-297">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-298">Invites long peuvent être rendues plus comme voix humaine si elles sont divisées en phrases et des paragraphes.</span><span class="sxs-lookup"><span data-stu-id="0285b-298">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-299">L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> objet, ajoute du contenu et organise le contenu des paragraphes et de phrases.</span><span class="sxs-lookup"><span data-stu-id="0285b-299">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartParagraph culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="0285b-300">Fournit des informations sur une culture spécifique, telle que le langage, le nom de la culture, le système d'écriture, le calendrier utilisé et le mode de mise en forme des chaînes de dates et de tri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-300">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-301">Spécifie le début d'un paragraphe de la culture spécifiée dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-301">Specifies the start of a paragraph in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-302">Invites long peuvent être rendues plus comme voix humaine si elles sont divisées en phrases et des paragraphes.</span><span class="sxs-lookup"><span data-stu-id="0285b-302">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="0285b-303">Le `culture` paramètre pour un paragraphe peut être différente de celle du <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriété de la <xref:System.Speech.Synthesis.PromptBuilder> objet qui le contient.</span><span class="sxs-lookup"><span data-stu-id="0285b-303">The `culture` parameter for a paragraph can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span> <span data-ttu-id="0285b-304">Tandis qu’en effet, la valeur de la `culture` paramètre remplacera le <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="0285b-304">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="0285b-305">Le <xref:System.Speech.Synthesis.SpeechSynthesizer> tente de sélectionner une voix installée qui prend en charge de la langue spécifiée par la `culture` paramètre de parler dans le paragraphe.</span><span class="sxs-lookup"><span data-stu-id="0285b-305">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the paragraph.</span></span> <span data-ttu-id="0285b-306">Si une voix avec la culture spécifiée est trouvée, il sera utilisé.</span><span class="sxs-lookup"><span data-stu-id="0285b-306">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="0285b-307">Si une voix avec la culture spécifiée est introuvable, la voix par défaut sera utilisée.</span><span class="sxs-lookup"><span data-stu-id="0285b-307">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="0285b-308">Cesser d’utiliser la voix spécifiée par <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, appelez <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-308">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</span></span>  
  
 <span data-ttu-id="0285b-309">Prononciation correctement les mots dans la langue spécifiée par la `culture` paramètre, un moteur de synthèse (synthèse vocale ou TTS) vocale qui prend en charge de la langue doit être installé.</span><span class="sxs-lookup"><span data-stu-id="0285b-309">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="0285b-310">Un moteur de synthèse vocale installé est appelé une voix.</span><span class="sxs-lookup"><span data-stu-id="0285b-310">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="0285b-311">Pour obtenir des informations sur les voix est installées pour une culture spécifique, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="0285b-311">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="0285b-312">Microsoft Windows et l’API System.Speech acceptent tous les codes de langue-pays valides en tant que valeurs pour `culture`.</span><span class="sxs-lookup"><span data-stu-id="0285b-312">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="0285b-313">Les moteurs de synthèse vocale fourni avec Windows 7 prennent en charge les codes de langue-pays suivants :</span><span class="sxs-lookup"><span data-stu-id="0285b-313">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="0285b-314">en-US.</span><span class="sxs-lookup"><span data-stu-id="0285b-314">en-US.</span></span> <span data-ttu-id="0285b-315">Anglais (États-Unis)</span><span class="sxs-lookup"><span data-stu-id="0285b-315">English (United States)</span></span>  
  
-   <span data-ttu-id="0285b-316">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="0285b-316">zh-CN.</span></span> <span data-ttu-id="0285b-317">Chinois (Chine)</span><span class="sxs-lookup"><span data-stu-id="0285b-317">Chinese (China)</span></span>  
  
-   <span data-ttu-id="0285b-318">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="0285b-318">zh-TW.</span></span> <span data-ttu-id="0285b-319">Chinois (Taïwan)</span><span class="sxs-lookup"><span data-stu-id="0285b-319">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="0285b-320">Codes de langue à deux lettres tels que « fr » sont également autorisées.</span><span class="sxs-lookup"><span data-stu-id="0285b-320">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartSentence">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0285b-321">Spécifie le début d'une phrase dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et éventuellement une langue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-321">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-322">Invites long peuvent être rendues plus comme voix humaine si elles sont divisées en phrases et des paragraphes.</span><span class="sxs-lookup"><span data-stu-id="0285b-322">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence();" />
      <MemberSignature Language="F#" Value="member this.StartSentence : unit -&gt; unit" Usage="promptBuilder.StartSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0285b-323">Spécifie le début d'une phrase dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-323">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-324">Invites long peuvent être rendues plus comme voix humaine si elles sont divisées en phrases et des paragraphes.</span><span class="sxs-lookup"><span data-stu-id="0285b-324">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-325">L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> objet, ajoute du contenu et organise le contenu des paragraphes et de phrases.</span><span class="sxs-lookup"><span data-stu-id="0285b-325">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartSentence : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartSentence culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="0285b-326">Fournit des informations sur une culture spécifique, telle que le langage, le nom de la culture, le système d'écriture, le calendrier utilisé et le mode de mise en forme des chaînes de dates et de tri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-326">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-327">Spécifie le début d'une phrase dans la culture spécifiée dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-327">Specifies the start of a sentence in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-328">Invites long peuvent être rendues plus comme voix humaine si elles sont divisées en phrases et des paragraphes.</span><span class="sxs-lookup"><span data-stu-id="0285b-328">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="0285b-329">Le `culture` paramètre pour une phrase peut être différente de celle la `culture` paramètre pour le paragraphe qui contient la phrase ou le <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriété de la <xref:System.Speech.Synthesis.PromptBuilder> objet qui contient les.</span><span class="sxs-lookup"><span data-stu-id="0285b-329">The `culture` parameter for a sentence can be different than the `culture` parameter for the paragraph that contains the sentence or the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains them.</span></span>  
  
 <span data-ttu-id="0285b-330">Tandis qu’en effet, la valeur de la `culture` paramètre remplacera le <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriété et le `culture` paramètre pour le paragraphe qui contient la phrase.</span><span class="sxs-lookup"><span data-stu-id="0285b-330">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property and the `culture` parameter for the paragraph that contains the sentence.</span></span> <span data-ttu-id="0285b-331">Le <xref:System.Speech.Synthesis.SpeechSynthesizer> tente de sélectionner une voix installée qui prend en charge de la langue spécifiée par la `culture` paramètre parler de la phrase.</span><span class="sxs-lookup"><span data-stu-id="0285b-331">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the sentence.</span></span> <span data-ttu-id="0285b-332">Si une voix avec la culture spécifiée est trouvée, il sera utilisé.</span><span class="sxs-lookup"><span data-stu-id="0285b-332">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="0285b-333">Si une voix avec la culture spécifiée est introuvable, la voix par défaut sera utilisée.</span><span class="sxs-lookup"><span data-stu-id="0285b-333">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="0285b-334">Cesser d’utiliser la voix spécifiée par <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, appelez <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-334">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</span></span>  
  
 <span data-ttu-id="0285b-335">Prononciation correctement les mots dans la langue spécifiée par la `culture` paramètre, un moteur de synthèse (synthèse vocale ou TTS) vocale qui prend en charge de la langue doit être installé.</span><span class="sxs-lookup"><span data-stu-id="0285b-335">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="0285b-336">Un moteur de synthèse vocale installé est appelé une voix.</span><span class="sxs-lookup"><span data-stu-id="0285b-336">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="0285b-337">Pour obtenir des informations sur les voix est installées pour une culture spécifique, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="0285b-337">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="0285b-338">Microsoft Windows et l’API System.Speech acceptent tous les codes de langue-pays valides en tant que valeurs pour `culture`.</span><span class="sxs-lookup"><span data-stu-id="0285b-338">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="0285b-339">Les moteurs de synthèse vocale fourni avec Windows 7 prennent en charge les codes de langue-pays suivants :</span><span class="sxs-lookup"><span data-stu-id="0285b-339">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="0285b-340">en-US.</span><span class="sxs-lookup"><span data-stu-id="0285b-340">en-US.</span></span> <span data-ttu-id="0285b-341">Anglais (États-Unis)</span><span class="sxs-lookup"><span data-stu-id="0285b-341">English (United States)</span></span>  
  
-   <span data-ttu-id="0285b-342">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="0285b-342">zh-CN.</span></span> <span data-ttu-id="0285b-343">Chinois (Chine)</span><span class="sxs-lookup"><span data-stu-id="0285b-343">Chinese (China)</span></span>  
  
-   <span data-ttu-id="0285b-344">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="0285b-344">zh-TW.</span></span> <span data-ttu-id="0285b-345">Chinois (Taïwan)</span><span class="sxs-lookup"><span data-stu-id="0285b-345">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="0285b-346">Codes de langue à deux lettres tels que « fr » sont également autorisées.</span><span class="sxs-lookup"><span data-stu-id="0285b-346">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartStyle">
      <MemberSignature Language="C#" Value="public void StartStyle (System.Speech.Synthesis.PromptStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartStyle(class System.Speech.Synthesis.PromptStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartStyle (style As PromptStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartStyle(System::Speech::Synthesis::PromptStyle ^ style);" />
      <MemberSignature Language="F#" Value="member this.StartStyle : System.Speech.Synthesis.PromptStyle -&gt; unit" Usage="promptBuilder.StartStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Speech.Synthesis.PromptStyle" />
      </Parameters>
      <Docs>
        <param name="style">
          <span data-ttu-id="0285b-347">Style de démarrage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-347">The style to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-348">Spécifie le début d'un style dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-348">Specifies the start of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-349">Le <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> méthode prend un <xref:System.Speech.Synthesis.PromptStyle> objet comme argument.</span><span class="sxs-lookup"><span data-stu-id="0285b-349">The <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method takes a <xref:System.Speech.Synthesis.PromptStyle> object as its argument.</span></span> <span data-ttu-id="0285b-350">Vous pouvez utiliser les propriétés de la <xref:System.Speech.Synthesis.PromptStyle> objet à définir l’importance, la vitesse d’énonciation et le volume (profondeur sonore) à appliquer à la reconnaissance vocale de sortie alors que le style est appliqué.</span><span class="sxs-lookup"><span data-stu-id="0285b-350">You can use the properties of the <xref:System.Speech.Synthesis.PromptStyle> object to set the emphasis, speaking rate, and volume (loudness) to apply to speech output while the style is in effect.</span></span> <span data-ttu-id="0285b-351">Pour cesser d’utiliser le style actuel, appelez le <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="0285b-351">To stop using the current style, call the <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method.</span></span>  
  
> [!NOTE]
>  -   <span data-ttu-id="0285b-352">Les moteurs de synthèse vocale dans Windows ne gèrent pas le paramètre d’importance pour l’instant.</span><span class="sxs-lookup"><span data-stu-id="0285b-352">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="0285b-353">Définition des valeurs pour le paramètre importance ne produira aucune modification audible dans la sortie de synthèse vocale.</span><span class="sxs-lookup"><span data-stu-id="0285b-353">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
> -   <span data-ttu-id="0285b-354">Le <xref:System.Speech.Synthesis.PromptVolume.Default> définition pour <xref:System.Speech.Synthesis.PromptVolume> est un volume complet, ce qui est le même comme <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span><span class="sxs-lookup"><span data-stu-id="0285b-354">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="0285b-355">Les autres paramètres de baisser le volume de la sortie vocale par rapport à chiffrement de volume complet.</span><span class="sxs-lookup"><span data-stu-id="0285b-355">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-356">L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> de l’objet et ajoute des chaînes de texte.</span><span class="sxs-lookup"><span data-stu-id="0285b-356">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="0285b-357">L’exemple utilise le <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> méthode pour spécifier un ralentissement en parlant de taux pour la chaîne ajoutée, qui énumère le contenu d’une commande.</span><span class="sxs-lookup"><span data-stu-id="0285b-357">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartVoice">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0285b-358">Prescrit au synthétiseur de modifier la voix dans un objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-358">Instructs the synthesizer to change the voice in a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-359">Une voix représente un moteur de synthèse vocale installé.</span><span class="sxs-lookup"><span data-stu-id="0285b-359">A voice represents an installed TTS engine.</span></span> <span data-ttu-id="0285b-360">Utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> méthodes et <xref:System.Speech.Synthesis.VoiceInfo> classe pour obtenir les noms et les attributs d’installé voix de synthèse vocale (TTS) que vous pouvez sélectionner.</span><span class="sxs-lookup"><span data-stu-id="0285b-360">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="0285b-361">Lorsqu’une application appelle <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, la méthode vérifie que chacun des voix qu’il trouve dans le Registre répond à certains critères minimum.</span><span class="sxs-lookup"><span data-stu-id="0285b-361">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="0285b-362">Pour n’importe quel voice qui échoue la vérification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> définit son <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété `False`.</span><span class="sxs-lookup"><span data-stu-id="0285b-362">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="0285b-363">Une application ne peut pas appeler n’importe quelle la <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> méthodes sur une voix dont <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété est `False`.</span><span class="sxs-lookup"><span data-stu-id="0285b-363">An application cannot call any of the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods on a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="0285b-364">En règle générale, les applications ne définissent pas d’une voix <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="0285b-364">Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartVoice culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="0285b-365">Fournit des informations sur une culture spécifique, telle que le langage, le nom de la culture, le système d'écriture, le calendrier utilisé et le mode de mise en forme des chaînes de dates et de tri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-365">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-366">Prescrit au synthétiseur de modifier la voix dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie la culture de la voix à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-366">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the culture of the voice to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-367">Le `culture` paramètre pour <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> peut être différente de celle du <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriété de la <xref:System.Speech.Synthesis.PromptBuilder> objet qui le contient.</span><span class="sxs-lookup"><span data-stu-id="0285b-367">The `culture` parameter for <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span>  <span data-ttu-id="0285b-368">Tandis qu’en effet, la valeur de la `culture` paramètre remplacera le <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="0285b-368">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="0285b-369">Le <xref:System.Speech.Synthesis.SpeechSynthesizer> tente de sélectionner une voix installée qui prend en charge de la langue spécifiée par la `culture` paramètre à lire le contenu joint par <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> et <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-369">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the content enclosed by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span> <span data-ttu-id="0285b-370">Si une voix avec la culture spécifiée est trouvée, il sera utilisé.</span><span class="sxs-lookup"><span data-stu-id="0285b-370">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="0285b-371">Si une voix avec la culture spécifiée est introuvable, la voix par défaut sera utilisée.</span><span class="sxs-lookup"><span data-stu-id="0285b-371">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="0285b-372">Cesser d’utiliser la voix spécifiée par <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, appelez <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-372">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 <span data-ttu-id="0285b-373">Prononciation correctement les mots dans la langue spécifiée par la `culture` paramètre, un moteur de synthèse (synthèse vocale ou TTS) vocale qui prend en charge de la langue doit être installé.</span><span class="sxs-lookup"><span data-stu-id="0285b-373">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="0285b-374">Un moteur de synthèse vocale installé est appelé une voix.</span><span class="sxs-lookup"><span data-stu-id="0285b-374">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="0285b-375">Pour obtenir des informations sur les voix est installées pour une culture spécifique, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="0285b-375">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="0285b-376">Microsoft Windows et l’API System.Speech acceptent tous les codes de langue-pays valides en tant que valeurs pour `culture`.</span><span class="sxs-lookup"><span data-stu-id="0285b-376">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="0285b-377">Les moteurs de synthèse vocale fourni avec Windows 7 prennent en charge les codes de langue-pays suivants :</span><span class="sxs-lookup"><span data-stu-id="0285b-377">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="0285b-378">en-US.</span><span class="sxs-lookup"><span data-stu-id="0285b-378">en-US.</span></span> <span data-ttu-id="0285b-379">Anglais (États-Unis)</span><span class="sxs-lookup"><span data-stu-id="0285b-379">English (United States)</span></span>  
  
-   <span data-ttu-id="0285b-380">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="0285b-380">zh-CN.</span></span> <span data-ttu-id="0285b-381">Chinois (Chine)</span><span class="sxs-lookup"><span data-stu-id="0285b-381">Chinese (China)</span></span>  
  
-   <span data-ttu-id="0285b-382">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="0285b-382">zh-TW.</span></span> <span data-ttu-id="0285b-383">Chinois (Taïwan)</span><span class="sxs-lookup"><span data-stu-id="0285b-383">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="0285b-384">Codes de langue à deux lettres tels que « fr » sont également autorisées.</span><span class="sxs-lookup"><span data-stu-id="0285b-384">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="promptBuilder.StartVoice gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender">
          <span data-ttu-id="0285b-385">Genre de la voix à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-385">The gender of the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-386">Prescrit au synthétiseur de modifier la voix dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie le genre de la voix à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-386">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender of the voice to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-387">Utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> méthodes et <xref:System.Speech.Synthesis.VoiceInfo> classe pour obtenir les noms et les attributs d’installé voix de synthèse vocale (TTS) que vous pouvez sélectionner.</span><span class="sxs-lookup"><span data-stu-id="0285b-387">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="0285b-388">Cesser d’utiliser la voix spécifiée par <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> appeler <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-388">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Speech.Synthesis.VoiceInfo voice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (voice As VoiceInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceInfo ^ voice);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceInfo -&gt; unit" Usage="promptBuilder.StartVoice voice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voice" Type="System.Speech.Synthesis.VoiceInfo" />
      </Parameters>
      <Docs>
        <param name="voice">
          <span data-ttu-id="0285b-389">Critères pour la voix à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-389">The criteria for the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-390">Prescrit au synthétiseur de modifier la voix dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie des critères pour la nouvelle voix.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-390">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies criteria for the new voice.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-391">Utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> méthodes et <xref:System.Speech.Synthesis.VoiceInfo> classe pour obtenir les noms et les attributs d’installé voix de synthèse vocale (TTS) que vous pouvez sélectionner.</span><span class="sxs-lookup"><span data-stu-id="0285b-391">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="0285b-392">Cesser d’utiliser la voix spécifiée par <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> appeler <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-392">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : string -&gt; unit" Usage="promptBuilder.StartVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="0285b-393">Nom de la voix à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-393">The name of the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-394">Prescrit au synthétiseur de modifier la voix dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie le nom de la voix à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-394">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the name of the voice to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-395">Pour obtenir des informations sur les voix est installées, utilisez une de la <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="0285b-395">To get information about which voices are installed, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods.</span></span>  
  
 <span data-ttu-id="0285b-396">Cesser d’utiliser la voix spécifiée par <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> appeler <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-396">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="promptBuilder.StartVoice (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender">
          <span data-ttu-id="0285b-397">Genre de la nouvelle voix à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-397">The gender of the new voice to use.</span>
          </span>
        </param>
        <param name="age">
          <span data-ttu-id="0285b-398">Âge de la voix à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-398">The age of the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-399">Prescrit au synthétiseur de modifier la voix dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie le genre et l'âge de la nouvelle voix.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-399">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender and the age of the new voice.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-400">Utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> méthodes et <xref:System.Speech.Synthesis.VoiceInfo> classe pour obtenir les noms et les attributs d’installé voix de synthèse vocale (TTS) que vous pouvez sélectionner.</span><span class="sxs-lookup"><span data-stu-id="0285b-400">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="0285b-401">Cesser d’utiliser la voix spécifiée par <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> appeler <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-401">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="promptBuilder.StartVoice (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender">
          <span data-ttu-id="0285b-402">Genre de la voix à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-402">The gender of the voice to use.</span>
          </span>
        </param>
        <param name="age">
          <span data-ttu-id="0285b-403">Âge de la voix à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-403">The age of the voice to use.</span>
          </span>
        </param>
        <param name="voiceAlternate">
          <span data-ttu-id="0285b-404">Entier qui spécifie une voix par défaut quand plusieurs voix correspondent aux paramètres <c>gender</c> et <c>age</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-404">An integer that specifies a preferred voice when more than one voice matches the <c>gender</c> and <c>age</c> parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0285b-405">Prescrit au synthétiseur de modifier la voix dans l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> et spécifie son genre, son âge et la voix par défaut correspondant au genre et à l'âge spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-405">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its gender, age, and a preferred voice that matches the specified gender and age.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-406">Un moteur de synthèse vocale compte les correspondances de recherche pour les paramètres spécifiés, elle retourne la voix lorsque le nombre est égal à la `voiceAlternate` paramètre.</span><span class="sxs-lookup"><span data-stu-id="0285b-406">A speech synthesis engine counts the matches it finds for the specified parameters, and returns the voice when the count equals the `voiceAlternate` parameter.</span></span>  
  
 <span data-ttu-id="0285b-407">Utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> méthodes et <xref:System.Speech.Synthesis.VoiceInfo> classe pour obtenir les noms et les attributs d’installé voix de synthèse vocale (TTS) que vous pouvez sélectionner.</span><span class="sxs-lookup"><span data-stu-id="0285b-407">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="0285b-408">Cesser d’utiliser la voix spécifiée par <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> appeler <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="0285b-408">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public string ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXml();" />
      <MemberSignature Language="F#" Value="member this.ToXml : unit -&gt; string" Usage="promptBuilder.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0285b-409">Retourne le SSML généré depuis l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-409">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0285b-410">Retourne le SSML généré depuis l'objet <see cref="T:System.Speech.Synthesis.PromptBuilder" /> sous forme d'une ligne unique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0285b-410">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object as a single line.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0285b-411">Le <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> méthode n’effectue aucune tentative pour mettre en forme le SSML retourné en aucune façon.</span><span class="sxs-lookup"><span data-stu-id="0285b-411">The <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> method makes no attempt to format the returned SSML in any way.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0285b-412">L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> objet, ajoute du texte et écrit équivalent à l’invite de SSML à la console avant de parler le contenu de l’invite.</span><span class="sxs-lookup"><span data-stu-id="0285b-412">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends text, and then writes the SSML equivalent of the prompt to the console before speaking the contents of the prompt.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Write the contents of the PromptBuilder object to the console as  
        // an SSML-compatible XML file.  
        string myXml = style.ToXml();  
        Console.WriteLine("This is the SSML equivalent of the PromptBuilder: \n\n" + myXml);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>