<Type Name="SpeakProgressEventArgs" FullName="System.Speech.Synthesis.SpeakProgressEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="201d02a0da96ab875cea471c1bc242a2f193a566" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408424" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeakProgressEventArgs extends System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeakProgressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeakProgressEventArgs&#xA;Inherits PromptEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeakProgressEventArgs : System::Speech::Synthesis::PromptEventArgs" />
  <TypeSignature Language="F#" Value="type SpeakProgressEventArgs = class&#xA;    inherit PromptEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Synthesis.PromptEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="5a133-101">Retourne des données de l'événement <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5a133-101">Returns data from the <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a133-102">Une instance de <xref:System.Speech.Synthesis.SpeakProgressEventArgs> est créé lorsque le <xref:System.Speech.Synthesis.SpeechSynthesizer> objet déclenche le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> événement.</span><span class="sxs-lookup"><span data-stu-id="5a133-102">An instance of <xref:System.Speech.Synthesis.SpeakProgressEventArgs> is created when the <xref:System.Speech.Synthesis.SpeechSynthesizer> object raises the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event.</span></span> <span data-ttu-id="5a133-103">Le <xref:System.Speech.Synthesis.SpeechSynthesizer> déclenche cet événement pour chaque nouveau mot il parle dans une invite de commandes à l’aide de la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="5a133-103">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event for each new word that it speaks in a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="5a133-104">Les données retournées sont basées sur la reconnaissance vocale synthèse SSML (Markup Language) générée par le code.</span><span class="sxs-lookup"><span data-stu-id="5a133-104">The returned data is based on the Speech Synthesis Markup Language (SSML) that the code generates.</span></span> <span data-ttu-id="5a133-105">Les valeurs retournées pour <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> inclure des espaces et les caractères et le contenu des balises SSML générés par le code.</span><span class="sxs-lookup"><span data-stu-id="5a133-105">The values returned for <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> include spaces and the characters and contents of the SSML tags generated by the code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5a133-106">L’exemple suivant montre les informations qui est disponibles à partir de <xref:System.Speech.Synthesis.SpeakProgressEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="5a133-106">The following example demonstrates the information that is available from <xref:System.Speech.Synthesis.SpeakProgressEventArgs>.</span></span> <span data-ttu-id="5a133-107">Notez comment la <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, et <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A> méthodes affectent la <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> par leur ajout de ** \<p >**, ** \</p >**, ** \<s >**, et ** \</s >** des étiquettes pour le SSML généré.</span><span class="sxs-lookup"><span data-stu-id="5a133-107">Note how the <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A> methods affect the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> by their addition of **\<p>**, **\</p>**, **\<s>**, and **\</s>** tags to the generated SSML.</span></span> <span data-ttu-id="5a133-108">En outre, il existe deux entrées dans la sortie des « 30 % », un pour chaque mot de parler de cette chaîne de numéro (trente pour cent).</span><span class="sxs-lookup"><span data-stu-id="5a133-108">Also, there are two entries in the output for "30%", one for each word to speak this number string (thirty percent).</span></span> <span data-ttu-id="5a133-109">Le <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> et <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> sont les mêmes pour chaque entrée et de représenter les caractères « 30 %.</span><span class="sxs-lookup"><span data-stu-id="5a133-109">The <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> and <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> are the same for each entry and represent the characters "30%.</span></span> <span data-ttu-id="5a133-110">Toutefois, le <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> change pour refléter énonciation des mots « 30 » et « pourcentage » par le <xref:System.Speech.Synthesis.SpeechSynthesizer>.</span><span class="sxs-lookup"><span data-stu-id="5a133-110">However, the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> changes to reflect the speaking of the words "thirty" and "percent" by the <xref:System.Speech.Synthesis.SpeechSynthesizer>.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt containing a paragraph and two sentences.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.StartParagraph();  
        builder.StartSentence();  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.EndSentence();  
        builder.StartSentence();  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.EndSentence();  
        builder.EndParagraph();  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character postion to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("CharPos: {0}   CharCount: {1}   AudioPos: {2}    \"{3}\"",  
        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5a133-111">Obtient la position audio de l'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a133-111">Gets the audio position of the event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5a133-112">Retourne la position de l'événement dans le flux de sortie audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a133-112">Returns the position of the event in the audio output stream.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a133-113">Le <xref:System.Speech.Synthesis.SpeechSynthesizer> normalise les nombres avec les mots qui correspondent à la façon dont le nombre est énoncée.</span><span class="sxs-lookup"><span data-stu-id="5a133-113">The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken.</span></span> <span data-ttu-id="5a133-114">Par exemple, le synthétiseur intervient le nombre « 4003 » en tant que « trois mille de quatre ».</span><span class="sxs-lookup"><span data-stu-id="5a133-114">For example, the synthesizer speaks the number "4003" as "four thousand three".</span></span> <span data-ttu-id="5a133-115">Il déclenche une <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> événement pour chacun des mots et retourne le <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> pour chaque mot.</span><span class="sxs-lookup"><span data-stu-id="5a133-115">It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words, and returns the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> for each word.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterCount">
      <MemberSignature Language="C#" Value="public int CharacterCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterCount" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterCount : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5a133-116">Obtient le nombre de caractères du mot qui a été énoncé juste avant le déclenchement de l'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a133-116">Gets the number of characters in the word that was spoken just before the event was raised.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5a133-117">Retourne le nombre de caractères du mot qui a été énoncé juste avant le déclenchement de l'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a133-117">Returns the number of characters in the word that was spoken just before the event was raised.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a133-118">Le <xref:System.Speech.Synthesis.SpeechSynthesizer> normalise les nombres avec les mots qui correspondent à la façon dont le nombre est énoncée.</span><span class="sxs-lookup"><span data-stu-id="5a133-118">The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken.</span></span> <span data-ttu-id="5a133-119">Par exemple, le synthétiseur intervient le nombre « 4003 » en tant que « trois mille de quatre ».</span><span class="sxs-lookup"><span data-stu-id="5a133-119">For example, the synthesizer speaks the number "4003" as "four thousand three".</span></span> <span data-ttu-id="5a133-120">Il déclenche une <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> événement pour chacun des mots parlés.</span><span class="sxs-lookup"><span data-stu-id="5a133-120">It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words.</span></span> <span data-ttu-id="5a133-121">Toutefois, le <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> propriété pour chacun des trois mots est la même.</span><span class="sxs-lookup"><span data-stu-id="5a133-121">However, the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> property for each of the three words is the same.</span></span> <span data-ttu-id="5a133-122">Il est le nombre de caractères contenus dans le nombre « 4003 » dans le texte de l’invite, dans ce cas, quatre.</span><span class="sxs-lookup"><span data-stu-id="5a133-122">It is the count of the characters in the number "4003" in the text of the prompt, in this case, four.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterPosition">
      <MemberSignature Language="C#" Value="public int CharacterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterPosition : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5a133-123">Obtient le nombre de caractères et d'espaces à partir du début de l'invite jusqu'à la position précédant la première lettre du mot qui vient d'être énoncé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a133-123">Gets the number of characters and spaces from the beginning of the prompt to the position before the first letter of the word that was just spoken.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5a133-124">Retourne le nombre de caractères et d'espaces à partir du début de l'invite jusqu'à la position précédant la première lettre du mot qui vient d'être énoncé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a133-124">Returns the number of characters and spaces from the beginning of the prompt to the position before the first letter of the word that was just spoken.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a133-125">La <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> inclut le nombre de caractères dans les balises XML, y compris les crochets.</span><span class="sxs-lookup"><span data-stu-id="5a133-125">The <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> includes the count for characters in XML tags, including their enclosing brackets.</span></span> <span data-ttu-id="5a133-126">Lorsque vous utilisez une de le <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, ou <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> méthodes, le contenu est ajouté à une invite de SSML qui inclut l’ouverture et fermeture `speak` éléments.</span><span class="sxs-lookup"><span data-stu-id="5a133-126">When using any of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods, the contents are added to an SSML prompt that includes the opening and closing `speak` elements.</span></span> <span data-ttu-id="5a133-127">L’ouverture `speak` élément ajoute un décalage de 82 caractères et des espaces à la <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> de tous les mots et les lettres de l’invite de commandes.</span><span class="sxs-lookup"><span data-stu-id="5a133-127">The opening `speak` element adds an offset of 82 characters and spaces to the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> of the all the words and letters in the prompt.</span></span> <span data-ttu-id="5a133-128">Par exemple, dans l’extrait suivant, le <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> du premier mot, « this », est 82.</span><span class="sxs-lookup"><span data-stu-id="5a133-128">For example, in the following snippet, the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> of the first word, "this", is 82.</span></span>  
  
```csharp  
builder.AppendText("This is a test");  
Synthesizer.Speak(builder);  
```  
  
 <span data-ttu-id="5a133-129">Dans l’exemple ci-dessus le <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> du mot « test » est 92.</span><span class="sxs-lookup"><span data-stu-id="5a133-129">In the above example the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> of the word "test" is 92.</span></span> <span data-ttu-id="5a133-130">Dans l’extrait suivant le <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> du mot « test » est la plus élevées 23 caractères (115), car l’ouverture ** \<pas de prosodie = « high » >** contient des balises qui le précède 23 caractères et espaces (les deux d’échappement caractères «\\» ne sont pas comptées).</span><span class="sxs-lookup"><span data-stu-id="5a133-130">In the following snippet the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> of the word "test" is 23 characters higher (115) because the opening **\<prosody pitch="high">**  tag that precedes it contains 23 characters and spaces (the two escape characters "\\" are not counted).</span></span>  
  
```csharp  
builder.AppendSsmlMarkup("This is a <prosody pitch=\"high\"> test </prosody>.");   
Synthesizer.Speak(builder);  
```  
  
 <span data-ttu-id="5a133-131">Si vous utilisez la <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> méthodes pour ajouter du contenu à une invite de commandes en spécifiant un fichier, l’ouverture `xml` déclaration et `speak` éléments dans le fichier ne sont pas utilisées ou comptabilisées.</span><span class="sxs-lookup"><span data-stu-id="5a133-131">If you use the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods to add content to a prompt by specifying a file, the opening `xml` declaration and `speak` elements in the file are not used or counted.</span></span> <span data-ttu-id="5a133-132">Le premier caractère dans le fichier après l’ouverture `speak` est à la position 82 s’il s’agit du premier contenu dans l’invite de commandes.</span><span class="sxs-lookup"><span data-stu-id="5a133-132">The first character in the file after the opening `speak` tag will be at position 82 if it is the first content in the prompt.</span></span>  
  
 <span data-ttu-id="5a133-133">En revanche, le paramètre de chaîne d’un <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> (méthode) n’est pas ajoutée à une invite de SSML avant prononcé.</span><span class="sxs-lookup"><span data-stu-id="5a133-133">By contrast, the string parameter of a <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method does not get added to an SSML prompt before being spoken.</span></span> <span data-ttu-id="5a133-134">Par conséquent, le <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> du premier mot, « this », dans l’extrait suivant est zéro.</span><span class="sxs-lookup"><span data-stu-id="5a133-134">Therefore, the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> of the first word, "this", in the following snippet is zero.</span></span>  
  
```csharp  
Synthesizer.Speak("This is a test.");  
```  
  
 <span data-ttu-id="5a133-135">Le <xref:System.Speech.Synthesis.SpeechSynthesizer> normalise les nombres avec les mots qui correspondent à la façon dont le nombre est énoncée.</span><span class="sxs-lookup"><span data-stu-id="5a133-135">The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken.</span></span> <span data-ttu-id="5a133-136">Par exemple, le synthétiseur intervient le nombre « 4003 » en tant que « trois mille de quatre ».</span><span class="sxs-lookup"><span data-stu-id="5a133-136">For example, the synthesizer speaks the number "4003" as "four thousand three".</span></span> <span data-ttu-id="5a133-137">Il déclenche une <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> événement pour chacun des trois mots parlés.</span><span class="sxs-lookup"><span data-stu-id="5a133-137">It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the three spoken words.</span></span> <span data-ttu-id="5a133-138">Toutefois, le <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> propriété pour chacun des trois mots est la même.</span><span class="sxs-lookup"><span data-stu-id="5a133-138">However, the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> property for each of the three words is the same.</span></span> <span data-ttu-id="5a133-139">Il s’agit de la position avant le premier caractère du nombre « 4003 » dans le texte de l’invite de commandes.</span><span class="sxs-lookup"><span data-stu-id="5a133-139">It is the position before the first character of the number "4003" in the text of the prompt.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5a133-140">L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> et ajoute le contenu SSML d’un fichier XML à l’aide <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="5a133-140">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> and appends the SSML contents of an XML file using <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="5a133-141">L’exemple génère un fichier WAV pour la lecture de la voix.</span><span class="sxs-lookup"><span data-stu-id="5a133-141">The example outputs speech to a WAV file for playback.</span></span> <span data-ttu-id="5a133-142">Le contenu du fichier XML qui contient le langage SSML s’affichent sous l’exemple de code.</span><span class="sxs-lookup"><span data-stu-id="5a133-142">The contents of the XML file containing the SSML appear below the code example.</span></span>  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a path to the file that contains SSML.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.ssml");  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress: {0} {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
  
```  
  
```xml  
<!-- The following are the contents of the file Weather.ssml.   
Note that because of the <p> tag and the space that follows it,   
that the character position of the first word "The" will be 86. -->  
  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <p> The weather forecast for today is partly cloudy with   
some sun breaks. </p>  
  
  <break strength="medium" />  
  
  <p> Tonight's weather will be cloudy with a 30% chance of   
showers. </p>  
  
</speak>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5a133-143">Texte qui venait d'être énoncé lorsque l'événement a été déclenché.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a133-143">The text that was just spoken when the event was raised.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5a133-144">Retourne le texte qui venait d'être énoncé lorsque l'événement a été déclenché.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a133-144">Returns the text that was just spoken when the event was raised.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a133-145">Le <xref:System.Speech.Synthesis.SpeechSynthesizer> normalise les nombres avec les mots qui correspondent à la façon dont le nombre est énoncée.</span><span class="sxs-lookup"><span data-stu-id="5a133-145">The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken.</span></span> <span data-ttu-id="5a133-146">Par exemple, le synthétiseur intervient le nombre « 4003 » en tant que « trois mille de quatre ».</span><span class="sxs-lookup"><span data-stu-id="5a133-146">For example, the synthesizer speaks the number "4003" as "four thousand three".</span></span> <span data-ttu-id="5a133-147">Il déclenche une <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> événement pour chacun des mots parlés.</span><span class="sxs-lookup"><span data-stu-id="5a133-147">It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words.</span></span> <span data-ttu-id="5a133-148">Toutefois, le <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> propriété pour chacun des trois mots est la même.</span><span class="sxs-lookup"><span data-stu-id="5a133-148">However, the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> property for each of the three words is the same.</span></span> <span data-ttu-id="5a133-149">Il est le texte « 4003 » à partir de l’invite de commandes.</span><span class="sxs-lookup"><span data-stu-id="5a133-149">It is the text "4003" from the prompt.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5a133-150">L’exemple suivant illustre la façon dont le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> rapports d’événements le <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> et <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> propriétés pour les chaînes qui contiennent des nombres.</span><span class="sxs-lookup"><span data-stu-id="5a133-150">The following example illustrates the how the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event reports the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> and <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> properties for strings that contain numbers.</span></span>  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("4003");  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress -    Character position:  {0}    Text:  {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>