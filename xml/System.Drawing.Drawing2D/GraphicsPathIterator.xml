<Type Name="GraphicsPathIterator" FullName="System.Drawing.Drawing2D.GraphicsPathIterator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e310cd01d3c053a18a115157a3746ffa137ea0b0" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39885412" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GraphicsPathIterator extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GraphicsPathIterator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class GraphicsPathIterator sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type GraphicsPathIterator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Permet d'itérer au sein de sous-tracés dans un <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> et de tester les types de formes contenus dans chaque sous-tracé. Cette classe ne peut pas être héritée.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPathIterator(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.GraphicsPathIterator : System.Drawing.Drawing2D.GraphicsPath -&gt; System.Drawing.Drawing2D.GraphicsPathIterator" Usage="new System.Drawing.Drawing2D.GraphicsPathIterator path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">Objet <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> pour lequel une classe d'assistance doit être initialisée.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> avec l'objet <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyData">
      <MemberSignature Language="C#" Value="public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CopyData(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types, int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyData (ByRef points As PointF(), ByRef types As Byte(), startIndex As Integer, endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CopyData(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types, int startIndex, int endIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyData :  *  * int * int -&gt; int" Usage="graphicsPathIterator.CopyData (points, types, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]" RefType="ref" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="points">Au retour, contient un tableau de structures <see cref="T:System.Drawing.PointF" /> qui représente les points du tracé.</param>
        <param name="types">Au retour, contient un tableau d'octets qui représente les types de points du tracé.</param>
        <param name="startIndex">Spécifie l'index de début des tableaux.</param>
        <param name="endIndex">Spécifie l'index de fin des tableaux.</param>
        <summary>Copie la propriété <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> et les tableaux de propriétés <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> du <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> associé dans les deux tableaux spécifiés.</summary>
        <returns>Nombre de points copiés.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le `startIndex` et `endIndex` paramètres pour copier une plage spécifiée de données du tracé.  
  
   
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objet d’événement. Le code exécute les actions suivantes :  
  
-   Crée un tracé graphique.  
  
-   Remplit avec plusieurs primitives et des marqueurs.  
  
-   Répertorie les données de chemin d’accès sur le côté gauche de l’écran.  
  
-   Crée un <xref:System.Drawing.Drawing2D.GraphicsPathIterator> et rembobine.  
  
-   Incrémente l’index de données de chemin d’accès au deuxième marqueur.  
  
-   Appelle le <xref:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData%2A> méthode pour copier les données de chemin d’accès contenues entre le début et de fin indexe aux points et types de tableaux.  
  
-   Répertorie les données copiées sur le côté droit de l’écran.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre de points dans le tracé.</summary>
        <value>Nombre de points dans le tracé.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphicsPathIterator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par cet objet <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appel `Dispose` autorise les ressources utilisées par ce <xref:System.Drawing.Drawing2D.GraphicsPathIterator> objet à être réaffectées à d’autres fins.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Enumerate(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Enumerate (ByRef points As PointF(), ByRef types As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Enumerate(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types);" />
      <MemberSignature Language="F#" Value="member this.Enumerate :  *  -&gt; int" Usage="graphicsPathIterator.Enumerate (points, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="points">Au retour, contient un tableau de structures <see cref="T:System.Drawing.PointF" /> qui représente les points du tracé.</param>
        <param name="types">Au retour, contient un tableau d'octets qui représente les types de points du tracé.</param>
        <summary>Copie la propriété <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> et les tableaux de propriétés <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> du <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> associé dans les deux tableaux spécifiés.</summary>
        <returns>Nombre de points copiés.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objet d’événement. Le code exécute les actions suivantes :  
  
-   Crée un tracé graphique.  
  
-   Remplit avec plusieurs primitives et des marqueurs.  
  
-   Répertorie les données de chemin d’accès sur le côté gauche de l’écran.  
  
-   Crée un <xref:System.Drawing.Drawing2D.GraphicsPathIterator> et rembobine.  
  
-   Incrémente l’index de données de chemin d’accès au deuxième marqueur.  
  
-   Appelle le <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate%2A> méthode pour copier les données de chemin d’accès à la `points` et `types` tableaux.  
  
-   Répertorie les données copiées sur le côté droit de l’écran.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~GraphicsPathIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!GraphicsPathIterator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphicsPathIterator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Autorise un objet à tenter de libérer des ressources et à exécuter d'autres opérations de nettoyage avant qu'il ne soit récupéré par une opération garbage collection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCurve">
      <MemberSignature Language="C#" Value="public bool HasCurve ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasCurve() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve" />
      <MemberSignature Language="VB.NET" Value="Public Function HasCurve () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasCurve();" />
      <MemberSignature Language="F#" Value="member this.HasCurve : unit -&gt; bool" Usage="graphicsPathIterator.HasCurve " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indique si le tracé associé à ce <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> contient une courbe.</summary>
        <returns>Cette méthode retourne <see langword="true" /> si le sous-tracé en cours contient une courbe ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Toutes les courbes dans un chemin d’accès sont stockés en tant que séquence de splines de Bézier. Par exemple, lorsque vous ajoutez une ellipse à un chemin d’accès, vous spécifiez le coin supérieur gauche, la largeur et la hauteur du rectangle englobant de l’ellipse. Ces nombres (coin supérieur gauche, la largeur et hauteur) ne sont pas stockés dans le chemin d’accès ; à la place. l’ellipse est convertie en une séquence de quatre de splines de Bézier. Les magasins de chemin d’accès les points de terminaison et les points de contrôle de ces splines de Bézier.  
  
 Un chemin d’accès stocke un tableau de points de données, chacune appartenant à une ligne ou une spline de Bézier. Si certains des points du tableau appartiennent à des splines de Bézier, puis <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> retourne `true`. Si tous les points du tableau appartiennent à des lignes, puis <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> retourne `false`.  
  
 Certaines méthodes aplanissent un tracé, ce qui signifie que toutes les courbes dans le chemin d’accès sont convertis en séquences de lignes. Une fois un chemin d’accès ont été aplatie, <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> retournera toujours `false`. Appel de la <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>, <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>, ou <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> méthode de la <xref:System.Drawing.Drawing2D.GraphicsPath> classe sera aplanir un tracé.  
  
   
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objet d’événement. Le code exécute les actions suivantes :  
  
-   Crée un <xref:System.Drawing.Drawing2D.GraphicsPath> objet, `myPath`.  
  
-   Ajoute trois lignes, un rectangle et une ellipse.  
  
-   Crée un <xref:System.Drawing.Drawing2D.GraphicsPathIterator> pour l’objet `myPath`.  
  
-   Vérifie si le chemin d’accès actuel `myPath` contient une courbe.  
  
-   Affiche le résultat du test dans une boîte de message.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextMarker">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Déplace l'itérateur jusqu'au marqueur suivant dans le tracé.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (path As GraphicsPath) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.NextMarker : System.Drawing.Drawing2D.GraphicsPath -&gt; int" Usage="graphicsPathIterator.NextMarker path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">Objet <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> vers lequel seront copiés les points.</param>
        <summary>Cet objet <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> possède un <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> qui lui est associé. La méthode <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" /> incrémente le <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> associé au marqueur suivant dans son tracé et copie tous les points contenus entre le marqueur en cours et le marqueur suivant (ou la fin du tracé) dans un deuxième objet <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> passé dans le paramètre.</summary>
        <returns>Nombre de points entre ce marqueur et le suivant.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> méthode pour définir des marqueurs dans un chemin d’accès. Marqueurs sont utilisés pour créer des groupes de sous-tracés. Une ou plusieurs sections peuvent contenir entre deux marqueurs.  
  
   
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objet d’événement. Le code exécute les actions suivantes :  
  
-   Crée un objet <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Ajoute trois lignes, un rectangle, une ellipse et deux marqueurs.  
  
-   Répertorie les valeurs de tous les points du tracé vers le côté gauche de l’écran.  
  
-   Crée un objet <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Crée un <xref:System.Drawing.Drawing2D.GraphicsPath> objet, `myPathSection`pour recevoir des points copiés.  
  
-   Appelle le <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> (méthode), qui parcourt le premier marqueur et copie tous les points contenus entre ce marqueur et le suivant à `myPathSection`.  
  
-   Retourne le nombre de points copiés vers `markerPoints`.  
  
-   Répertorie le numéro de marqueur (premier marqueur) et le nombre de points qu’il contient sur le côté droit de l’écran.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker([out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextMarker :  *  -&gt; int" Usage="graphicsPathIterator.NextMarker (startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] La référence entière fournie à ce paramètre reçoit l'index du point de départ d'un sous-tracé.</param>
        <param name="endIndex">[out] La référence entière fournie à ce paramètre reçoit l’index du point final d’un sous-tracé désigné par <c>startIndex</c>.</param>
        <summary>Incrémente <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> au marqueur suivant dans le tracé et retourne les index de début et de fin au moyen des paramètres [out].</summary>
        <returns>Nombre de points entre ce marqueur et le suivant.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> méthode pour définir des marqueurs dans un chemin d’accès. Marqueurs sont utilisés pour créer des groupes de sous-tracés. Une ou plusieurs sections peuvent contenir entre deux marqueurs.  
  
   
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objet d’événement. Le code exécute les actions suivantes :  
  
-   Crée un objet <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Ajoute trois lignes, un rectangle et une ellipse aux ¾ avec marqueurs entre chacun d’eux.  
  
-   Dessine les valeurs pour le tableau de points à l’écran.  
  
-   Crée un objet <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Appelle la méthode <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>.  
  
-   Utilise les valeurs retournées par des appels répétitifs à <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> pour dessiner le démarrer et arrêter des points pour chaque marqueur à l’écran.  
  
-   Dessine la valeur pour le nombre total de points à l’écran.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextPathType">
      <MemberSignature Language="C#" Value="public int NextPathType (out byte pathType, out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextPathType([out] unsigned int8&amp; pathType, [out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextPathType (ByRef pathType As Byte, ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextPathType([Runtime::InteropServices::Out] System::Byte % pathType, [Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextPathType :  *  *  -&gt; int" Usage="graphicsPathIterator.NextPathType (pathType, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathType" Type="System.Byte" RefType="out" />
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pathType">[out] Reçoit le type de points partagé par tous les points du groupe. Les types possibles peuvent être récupérés de l'énumération <see cref="T:System.Drawing.Drawing2D.PathPointType" />.</param>
        <param name="startIndex">[out] Reçoit l'index de début du groupe de points.</param>
        <param name="endIndex">[out] Reçoit l'index de fin du groupe de points.</param>
        <summary>Obtient l'index de début et l'index de fin du groupe suivant de points de données possédant tous le même type.</summary>
        <returns>Cette méthode retourne le nombre de points de données dans le groupe. Si le tracé ne comprend plus de groupe, cette méthode retourne 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objet d’événement. Le code exécute les actions suivantes :  
  
-   Crée un objet <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Ajoute trois lignes, un rectangle et une ellipse.  
  
-   Répertorie les valeurs de tous les points sur le côté gauche de l’écran.  
  
-   Crée un <xref:System.Drawing.Drawing2D.GraphicsPathIterator> et rembobine.  
  
-   Dans un `for` boucle, effectue une itération dans les points à l’aide de la <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> et <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> méthodes.  
  
-   Utilise les valeurs retournées par les appels répétitifs pour répertorier le nombre de sous-chemin, le nombre de points qu’il contient et le type des points de chemin d’accès vers le côté droit de l’écran.  
  
-   Affiche la valeur pour le nombre total de points à l’écran.  
  
 Notez que `ListPathPoints` est une fonction d’assistance qui sépare la plupart (voire l’ensemble) du code d’affichage à partir du code de chemin d’accès de graphiques.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextSubpath">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Déplace le sous-tracé vers le sous-tracé suivant dans le <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath(class System.Drawing.Drawing2D.GraphicsPath path, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (path As GraphicsPath, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath(System::Drawing::Drawing2D::GraphicsPath ^ path, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath : System.Drawing.Drawing2D.GraphicsPath *  -&gt; int" Usage="graphicsPathIterator.NextSubpath (path, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="isClosed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> dont les points de données doivent être définis pour correspondre aux points de données de la figure récupérée (sous-tracé) pour cet itérateur.</param>
        <param name="isClosed">[out] Indique si le sous-tracé en cours est fermé. A la valeur <see langword="true" /> si la figure est fermée ; sinon, <see langword="false" />.</param>
        <summary>Obtient la figure suivante (sous-tracé) à partir du tracé associé à ce <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />.</summary>
        <returns>Nombre de points de données dans la figure récupérée (sous-tracé). S'il n'existe plus de figure à récupérer, une valeur nulle est retournée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objet d’événement. Le code exécute les actions suivantes :  
  
-   Crée un objet <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Ajoute trois lignes, un rectangle, une ellipse et deux marqueurs.  
  
-   Répertorie les valeurs de tous les points du tracé vers le côté gauche de l’écran.  
  
-   Crée un objet <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Crée un <xref:System.Drawing.Drawing2D.GraphicsPath> objet, `myPathSection`pour recevoir des points copiés.  
  
-   Appelle le <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> (méthode), qui parcourt le troisième sous-tracé (figure) et copie tous les points contenus dans ce sous-tracé le `myPathSection` chemin d’accès, puis retourne également le nombre de points copié vers `subpathPoints`.  
  
-   Répertorie le numéro du sous-tracé et le nombre de points qu’il contient sur le côté droit de l’écran.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath([out] int32&amp; startIndex, [out] int32&amp; endIndex, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (ByRef startIndex As Integer, ByRef endIndex As Integer, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath :  *  *  -&gt; int" Usage="graphicsPathIterator.NextSubpath (startIndex, endIndex, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="isClosed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] Reçoit l'index de début du sous-tracé suivant.</param>
        <param name="endIndex">[out] Reçoit l'index de fin du sous-tracé suivant.</param>
        <param name="isClosed">[out] Indique si le sous-tracé est fermé.</param>
        <summary>Déplace <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> jusqu'au sous-tracé suivant dans le tracé. Les index de début et de fin du sous-tracé suivant sont contenus dans les paramètres [out].</summary>
        <returns>Nombre de sous-tracés dans l'objet <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant est conçu pour une utilisation avec Windows Forms et nécessite <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objet d’événement. Le code exécute les actions suivantes :  
  
-   Crée un objet <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Ajoute trois lignes, un rectangle et une ellipse.  
  
-   Dessine les valeurs pour le tableau de points à l’écran.  
  
-   Crée un objet <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Appelle la méthode <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>.  
  
-   Utilise les valeurs retournées par des appels répétitifs à <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> pour dessiner le démarrer et arrêter des valeurs de chaque sous-tracé à l’écran.  
  
-   Dessine la valeur du nombre total de sous-tracés à l’écran.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rewind ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rewind();" />
      <MemberSignature Language="F#" Value="member this.Rewind : unit -&gt; unit" Usage="graphicsPathIterator.Rewind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rembobine ce <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> jusqu'au début du tracé qui lui est associé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La première fois que vous appelez le <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> méthode d’un itérateur, elle obtient la première figure (sous-tracé) du tracé associé à cet itérateur. La deuxième fois, elle obtient la deuxième figure et ainsi de suite. Lorsque vous appelez le <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A> (méthode), la séquence démarre ; autrement dit, après avoir appelé <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>, l’appel suivant à <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> Obtient la première figure dans le chemin d’accès. Le <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> et <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> méthodes se comportent de la même façon.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubpathCount">
      <MemberSignature Language="C#" Value="public int SubpathCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SubpathCount" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubpathCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SubpathCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.SubpathCount : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre de sous-tracés dans le tracé.</summary>
        <value>Nombre de sous-tracés dans le tracé.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>