<Type Name="DynamicControl" FullName="System.Web.DynamicData.DynamicControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ce3e4584d2b6635397e605cfd2312c2fb1a70995" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36402415" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicControl : System.Web.UI.Control, System.Web.DynamicData.IFieldFormattingOptions, System.Web.DynamicData.IFieldTemplateHost, System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicControl extends System.Web.UI.Control implements class System.Web.DynamicData.IFieldFormattingOptions, class System.Web.DynamicData.IFieldTemplateHost, class System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicControl" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicControl&#xA;Inherits Control&#xA;Implements IAttributeAccessor, IFieldFormattingOptions, IFieldTemplateHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicControl : System::Web::UI::Control, System::Web::DynamicData::IFieldFormattingOptions, System::Web::DynamicData::IFieldTemplateHost, System::Web::UI::IAttributeAccessor" />
  <TypeSignature Language="F#" Value="type DynamicControl = class&#xA;    inherit Control&#xA;    interface IAttributeAccessor&#xA;    interface IFieldTemplateHost&#xA;    interface IFieldFormattingOptions" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldFormattingOptions</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldTemplateHost</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IAttributeAccessor</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicControl), "DynamicControl.bmp")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Affiche le contenu défini pour le champ dans des contrôles liés aux données basés sur des modèles, à l'aide des fonctionnalités Dynamic Data ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans cette rubrique :  
  
-   [Introduction](#introduction)  
  
-   [Syntaxe déclarative](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduction  
 Le <xref:System.Web.DynamicData.DynamicControl> contrôle est utilisé par les contrôles liés aux données basés sur des modèles, tels que <xref:System.Web.UI.WebControls.FormView> ou <xref:System.Web.UI.WebControls.ListView>, pour afficher un champ de données qui utilise des fonctionnalités Dynamic Data ASP.NET dans une page personnalisée. Vous pouvez également utiliser un <xref:System.Web.DynamicData.DynamicControl> contrôler dans un <xref:System.Web.UI.WebControls.TemplateField> champ un <xref:System.Web.UI.WebControls.GridView> ou un <xref:System.Web.UI.WebControls.DetailsView> contrôle.  
  
 Le <xref:System.Web.DynamicData.DynamicControl> contrôle fournit des fonctionnalités qui sont similaire à celle de la <xref:System.Web.DynamicData.DynamicField> champ. Toutefois, étant donné que la <xref:System.Web.DynamicData.DynamicControl> sert uniquement à l’intérieur des modèles, il vous donne plus de souplesse pour contrôler comment les données sont affichées dans la mesure où vous pouvez ajouter d’autres éléments HTML autour du champ. Lorsque vous utilisez un <xref:System.Web.DynamicData.DynamicControl> (contrôle), vous pouvez tirer parti des fonctionnalités Dynamic Data suivantes :  
  
-   Rendu automatiquement le contrôle approprié pour un champ à l’aide de modèles de champ, selon le type de données. Les modèles de champ peuvent être modifiés globalement pour l’application entière.  
  
-   Validation des données intégrée basée sur le schéma de base de données. Vous pouvez également ajouter des types de validation en personnalisant le modèle de données.  
  
-   Personnalisation de rendu de données pour les champs individuels à l’aide des attributs dans le modèle de données ou à l’aide de la <xref:System.Web.DynamicData.DynamicField.UIHint%2A> propriété.  
  
 Pour spécifier le champ à afficher dans un <xref:System.Web.DynamicData.DynamicControl> , affectez le <xref:System.Web.DynamicData.DynamicControl.DataField%2A> propriété le nom du champ. Vous pouvez appliquer une chaîne de mise en forme personnalisée à la valeur du champ en définissant le <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> propriété. Par défaut, la chaîne mise en forme est appliquée aux valeurs de champ uniquement lorsque le contrôle lié aux données est en mode lecture seule. Pour appliquer la chaîne de mise en forme aux valeurs affichées lorsque le contrôle lié aux données est en mode édition, définissez la <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> propriété `true`. Si une valeur de champ est `null`, vous pouvez afficher une légende personnalisée en définissant le <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A> propriété. Le <xref:System.Web.DynamicData.DynamicControl> contrôle peut également convertir automatiquement une chaîne vide (« ») champ des valeurs null en définissant le <xref:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull%2A> propriété `true`.  
  
 Le <xref:System.Web.DynamicData.DynamicControl> contrôle prend en charge différents modes d’affichage. Pour spécifier le mode dans lequel afficher le <xref:System.Web.DynamicData.DynamicControl> , affectez le <xref:System.Web.DynamicData.DynamicControl.Mode%2A> propriété. Le tableau suivant présente les différents modes.  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>  
 mode d’affichage. Cela empêche l’utilisateur de modifier les valeurs d’un enregistrement ou un champ de données. Il peut être utilisé dans tous les modèles.  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>  
 pour le mode édition. Cela permet aux utilisateurs de mettre à jour les valeurs d’un enregistrement existant. Il est utilisé dans le modèle de modification (généralement appelé `EditItemTemplate`).  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>  
 pour le mode insertion. Cela permet aux utilisateurs d’entrer des valeurs pour un nouvel enregistrement. Il est utilisé dans le modèle d’insertion (généralement appelé `InsertItemTemplate`).  
  
 Vous pouvez masquer un <xref:System.Web.DynamicData.DynamicControl> contrôle dans un contrôle lié aux données en définissant le <xref:System.Web.UI.Control.Visible%2A> propriété `false`.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Syntaxe déclarative  
  
```  
<asp:DynamicControl  
    ApplyFormatInEditMode="True|False"  
    ConvertEmptyStringToNull="True|False"  
    CssClass="string"  
    DataField="string"  
    DataFormatString="string"  
    EnableViewState="True|False"  
    HtmlEncode="True|False"  
    ID="string"  
    Mode="Edit|Insert|ReadOnly"  
    NullDisplayText="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    UIHint="string"  
    ValidationGroup="string"  
    Visible="True|False"  
>  
</asp:DynamicControl>  
```  
  
   
  
## Examples  
 Voir un exemple de code au moment de l’exécution de cette fonctionnalité : [exécuter](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl).  
  
 L’exemple suivant montre comment utiliser le <xref:System.Web.DynamicData.DynamicControl> contrôler dans un <xref:System.Web.UI.WebControls.ListView> contrôle à afficher, insérer, supprimer et modifier des valeurs d’une table de base de données. Il est important de remarquer que pour effectuer l’opération d’insertion fonctionne, le <xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A> propriété de la `rowguid` et `ModifiedDate` colonnes sont définies sur `true`.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/VB/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="T:System.Web.UI.WebControls.FormView" />
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="T:System.Web.UI.WebControls.ListView" />
    <altmember cref="T:System.Web.UI.WebControls.Repeater" />
    <altmember cref="T:System.Web.DynamicData.DynamicField" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.DynamicData.DynamicControl" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.DynamicData.DynamicControl" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl (System.Web.UI.WebControls.DataBoundControlMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Web.UI.WebControls.DataBoundControlMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor(System.Web.UI.WebControls.DataBoundControlMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As DataBoundControlMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl(System::Web::UI::WebControls::DataBoundControlMode mode);" />
      <MemberSignature Language="F#" Value="new System.Web.DynamicData.DynamicControl : System.Web.UI.WebControls.DataBoundControlMode -&gt; System.Web.DynamicData.DynamicControl" Usage="new System.Web.DynamicData.DynamicControl mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Web.UI.WebControls.DataBoundControlMode" />
      </Parameters>
      <Docs>
        <param name="mode">Une des valeurs d'énumération qui spécifie le mode du contrôle.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.DynamicData.DynamicControl" /> avec le mode spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyFormatInEditMode">
      <MemberSignature Language="C#" Value="public bool ApplyFormatInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyFormatInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplyFormatInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ApplyFormatInEditMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ApplyFormatInEditMode : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si la chaîne de mise en forme spécifiée par la propriété <see cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" /> est appliquée aux valeurs des champs quand le champ est en mode édition.</summary>
        <value>
          <see langword="true" /> si la chaîne de mise en forme est appliquée ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.DynamicData.DynamicControl> contrôle possède différents modes d’affichage permettant aux utilisateurs de lire, modifier ou insérer un champ. Par défaut, la chaîne mise en forme spécifiée par la <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> propriété est appliquée à une valeur de champ uniquement lorsque le <xref:System.Web.DynamicData.DynamicControl> contrôle est en mode lecture seule. Pour appliquer la chaîne de mise en forme aux valeurs affichées lorsque le contrôle lié aux données est en mode édition, définissez la <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> propriété `true`.  
  
> [!NOTE]
>  Le <xref:System.Web.DynamicData.DynamicControl> contrôle ne supprime pas automatiquement la mise en forme lorsque le champ est mis à jour dans la source de données. Si vous ne souhaitez pas la mise en forme en tant que partie de la valeur stockée, vous devrez supprimer la mise en forme par programme.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Mode" />
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); void set(System::Web::DynamicData::MetaColumn ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn with get, set" Usage="System.Web.DynamicData.DynamicControl.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet de colonne associé au contrôle.</summary>
        <value>Objet de colonne associé au contrôle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le <xref:System.Web.DynamicData.DynamicControl.Column%2A> propriété pour obtenir des informations de métadonnées sur une colonne spécifique. Le <xref:System.Web.DynamicData.DynamicControl.Column%2A> propriété est automatiquement définie par le <xref:System.Web.DynamicData.DynamicControl> contrôle basé sur le nom de champ fourni pour le <xref:System.Web.DynamicData.DynamicControl.DataField%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Table" />
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertEmptyStringToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertEmptyStringToNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertEmptyStringToNull : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les chaînes vides ("") sont converties automatiquement en valeurs null quand le champ de données est mis à jour dans la source de données.</summary>
        <value>
          <see langword="true" /> si les chaînes vides sont automatiquement converties en valeurs null ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Parameter> objet du contrôle de source de données a également une propriété nommée <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A?displayProperty=nameWithType>. Cette propriété effectue la même fonction. Assurez-vous que les deux propriétés sont correctement définies.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CssClass">
      <MemberSignature Language="C#" Value="public virtual string CssClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CssClass" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CssClass As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CssClass { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CssClass : string with get, set" Usage="System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.CssClassProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la classe CSS qui spécifie les styles d'affichage pour le contenu du contrôle <see cref="T:System.Web.DynamicData.DynamicControl" />.</summary>
        <value>Nom de la classe CSS.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataField : string with get, set" Usage="System.Web.DynamicData.DynamicControl.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du champ de données auquel le contrôle <see cref="T:System.Web.DynamicData.DynamicControl" /> est lié.</summary>
        <value>Nom du champ de données auquel lier le contrôle <see cref="T:System.Web.DynamicData.DynamicControl" />. La valeur par défaut est une chaîne vide (""), ce qui signifie que cette propriété n'est pas définie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.DynamicData.DynamicControl.DataField%2A> propriété pour spécifier le champ de données à lier à la <xref:System.Web.DynamicData.DynamicControl> contrôle. Le champ de données peut être le nom de colonne ou, pour les colonnes clés étrangères, le nom de la relation.  
  
 Par défaut, le champ de données spécifié est affiché par le <xref:System.Web.DynamicData.DynamicControl> contrôler à l’aide du modèle de champ qui est associé avec le type de données. Vous pouvez modifier le modèle de champ qui est restitué pour le champ de données en définissant le <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> propriété. Vous pouvez également mettre en forme le texte affiché en définissant le <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> propriété.  
  
 **Remarque** si vous souhaitez modifier globalement l’affichage et le comportement d’un champ de données, vous devez appliquer des attributs à votre modèle de données au lieu de la définition de cette propriété dans une instance particulière de la <xref:System.Web.DynamicData.DynamicControl> contrôle. Pour plus d’informations, consultez [Dynamic Data ASP.NET](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.DynamicData.DynamicControl.DataField%2A> propriété pour spécifier le champ à afficher dans un <xref:System.Web.DynamicData.DynamicControl> contrôle.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/VB/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.UIHint" />
      </Docs>
    </Member>
    <Member MemberName="DataFormatString">
      <MemberSignature Language="C#" Value="public string DataFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property DataFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFormatString : string with get, set" Usage="System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une chaîne qui spécifie le format d'affichage de la valeur du champ.</summary>
        <value>Chaîne de mise en forme qui spécifie le format d'affichage de la valeur du champ. La valeur par défaut est une chaîne vide (""), qui indique qu'aucune mise en forme spéciale n'est appliquée à la valeur de champ.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> propriété pour spécifier un format d’affichage personnalisé pour les valeurs affichées dans le <xref:System.Web.DynamicData.DynamicControl> contrôle. Si le <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> propriété n’est pas définie, la valeur du champ s’affiche sans mise en forme spéciale.  
  
 Par défaut, la chaîne mise en forme est appliquée à la valeur de champ uniquement lorsque le <xref:System.Web.DynamicData.DynamicControl.Mode%2A> est définie sur <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>. Pour appliquer la chaîne de mise en forme à la valeur du champ en mode édition, définissez la <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> propriété `true`.  
  
 Le format d’affichage que vous spécifiez à l’aide de la <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> propriété est spécifique à cette instance de la <xref:System.Web.DynamicData.DynamicControl> contrôle. Vous pouvez également modifier le format d’affichage pour un champ de données dans toute l’application en appliquant la <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute> à votre modèle de données et en définissant le <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString%2A?displayProperty=nameWithType> nommé dans le constructeur. Pour plus d’informations, consultez [Dynamic Data ASP.NET](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" />
        <altmember cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" />
      </Docs>
    </Member>
    <Member MemberName="FieldTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FieldTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FieldTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FieldTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FieldTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FieldTemplate : System.Web.UI.Control" Usage="System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le modèle de champ créé pour le contrôle <see cref="T:System.Web.DynamicData.DynamicControl" />.</summary>
        <value>Modèle de champ créé pour le contrôle <see cref="T:System.Web.DynamicData.DynamicControl" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetAttribute(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member GetAttribute : string -&gt; string&#xA;override this.GetAttribute : string -&gt; string" Usage="dynamicControl.GetAttribute key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nom de l'attribut.</param>
        <summary>Récupère la valeur d'attribut en utilisant la clé spécifiée.</summary>
        <returns>Valeur de l'attribut.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la collection d’attributs est `null`, cette méthode retourne une chaîne vide.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public bool HtmlEncode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberSignature Language="VB.NET" Value="Public Property HtmlEncode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HtmlEncode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les données pour le contrôle sont encodées en HTML avant d'être restituées.</summary>
        <value>
          <see langword="true" /> si les données pour le contrôle sont encodées en HTML avant d'être restituées ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.DynamicData.DynamicControl.HtmlEncode%2A> propriété pour spécifier si les valeurs de champ sont encodées en HTML en leurs représentations sous forme de chaîne respectives avant qu’elles sont affichées.  
  
> [!NOTE]
>  Vous aide à empêcher les attaques de script entre sites et de contenu malveillant à partir de l’affichage de valeurs de champ de codage HTML. Cette propriété doit être activée chaque fois que possible. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.DataBoundControlMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.DataBoundControlMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As DataBoundControlMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::DataBoundControlMode Mode { System::Web::UI::WebControls::DataBoundControlMode get(); void set(System::Web::UI::WebControls::DataBoundControlMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Web.UI.WebControls.DataBoundControlMode with get, set" Usage="System.Web.DynamicData.DynamicControl.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataBoundControlMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le mode de rendu.</summary>
        <value>Une des valeurs d'énumération qui spécifie le mode de rendu pour le contrôle. La valeur par défaut est <see cref="F:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.DynamicData.DynamicControl.Mode%2A> propriété pour spécifier le mode de rendu à utiliser pour afficher le <xref:System.Web.DynamicData.DynamicControl> contrôle. Le tableau suivant présente les différents modes.  
  
|Mode|Description |  
|----------|-----------------|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>|mode d’affichage. Cela empêche l’utilisateur de modifier les valeurs d’un enregistrement ou un champ de données. Il peut être utilisé dans tous les modèles. Valeur par défaut.|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>|pour le mode édition. Cela permet aux utilisateurs de mettre à jour les valeurs d’un enregistrement existant. Il est utilisé dans la `EditItemTemplate` modèle.|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>|pour le mode insertion. Cela permet aux utilisateurs d’entrer des valeurs pour un nouvel enregistrement. Il est utilisé dans la `InsertItemTemplate` modèle.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullDisplayText">
      <MemberSignature Language="C#" Value="public string NullDisplayText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullDisplayText" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberSignature Language="VB.NET" Value="Public Property NullDisplayText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NullDisplayText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullDisplayText : string with get, set" Usage="System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la légende affichée pour un champ de données quand la valeur du champ est <see langword="null" />.</summary>
        <value>Légende affichée pour un champ de données quand la valeur du champ est <see langword="null" />. La valeur par défaut est une chaîne vide (""), ce qui signifie que cette propriété n'est pas définie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parfois, une valeur de champ est stockée en tant que valeur null dans la source de données. Vous pouvez spécifier une légende personnalisée à afficher pour les champs qui ont une valeur null en définissant le <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A> propriété. Si cette propriété n’est pas définie, les valeurs de champ null sont affichés sous forme de chaînes vides ( » »).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInit : EventArgs -&gt; unit&#xA;override this.OnInit : EventArgs -&gt; unit" Usage="dynamicControl.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Web.UI.Control.Init" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Web.DynamicData.DynamicControl.OnInit%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.Web.DynamicData.DynamicControl.DataField" /> n'est pas définie.</exception>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member Render : System.Web.UI.HtmlTextWriter -&gt; unit&#xA;override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="dynamicControl.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Objet utilisé pour générer le rendu du contenu du contrôle <see cref="T:System.Web.DynamicData.DynamicControl" /> sur le navigateur du client.</param>
        <summary>Génère le rendu du contenu du contrôle <see cref="T:System.Web.DynamicData.DynamicControl" /> sur le navigateur du client à l'aide de l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.DynamicData.DynamicControl.Render%2A> méthode est utilisée principalement par les développeurs de contrôles pour étendre le <xref:System.Web.DynamicData.DynamicControl> contrôle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttribute(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAttribute(System::String ^ key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetAttribute : string * string -&gt; unit&#xA;override this.SetAttribute : string * string -&gt; unit" Usage="dynamicControl.SetAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nom de l'attribut à définir.</param>
        <param name="value">Valeur à assigner à l'attribut.</param>
        <summary>Définit l'attribut spécifié à la valeur spécifiée.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFieldTemplateHost.FormattingOptions">
      <MemberSignature Language="C#" Value="System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property FormattingOptions As IFieldFormattingOptions Implements IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::DynamicData::IFieldFormattingOptions ^ System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { System::Web::DynamicData::IFieldFormattingOptions ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.DynamicControl.System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.IFieldFormattingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />.</summary>
        <value>Options de mise en forme à appliquer au modèle de champ.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public virtual System.Web.DynamicData.MetaTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Table" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Table As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::DynamicData::MetaTable ^ Table { System::Web::DynamicData::MetaTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Table : System.Web.DynamicData.MetaTable" Usage="System.Web.DynamicData.DynamicControl.Table" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet de table qui est associé au contrôle.</summary>
        <value>Objet de table associé au contrôle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.DynamicData.DynamicControl.Table%2A> propriété pour accéder aux informations de métadonnées sur la table qui est associée au contrôle lié aux données qui contient le <xref:System.Web.DynamicData.DynamicControl> contrôle.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Le contrôle <see cref="T:System.Web.DynamicData.DynamicControl" /> est à l'intérieur d'un contrôle lié aux données qui n'est pas lié à un contrôle de source de données qui implémente l'interface <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</exception>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Column" />
      </Docs>
    </Member>
    <Member MemberName="UIHint">
      <MemberSignature Language="C#" Value="public virtual string UIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UIHint : string with get, set" Usage="System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du modèle de champ utilisé pour le rendu du champ de données.</summary>
        <value>Nom du modèle de champ utilisé pour le rendu du champ de données. La valeur par défaut est une chaîne vide (""), qui indique que le modèle de champ sera rendu en fonction du type du champ de données ou des informations de métadonnées qui s'appliquent au modèle de données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> propriété pour spécifier le modèle de champ à utiliser pour afficher l’interface utilisateur pour un champ de données. Modèles de champs par défaut sont des contrôles utilisateur et leurs noms contiennent un suffixe pour identifier les modèles de champs qui sont utilisés pour les opérations de modification et les opérations d’insertion. Les suffixes sont _modifier et _Insérer, respectivement. Lorsque vous définissez une valeur le <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> propriété que vous définissez le nom sans les suffixes. Dynamic Data identifie le mode correct en évaluant le <xref:System.Web.DynamicData.DynamicControl.Mode%2A> propriété valeur et restitue le modèle de champ est correct.  
  
 Si le <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> propriété n’est pas définie, par défaut Dynamic Data restitue le modèle de champ en fonction du type de champ. Pour plus d’informations, consultez [ASP.NET Dynamic Data Scaffolding](http://msdn.microsoft.com/library/e0166a58-9178-4660-81a6-175994b11b12).  
  
 Le modèle de champ que vous spécifiez à l’aide de la <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> propriété est spécifique à cette instance de la <xref:System.Web.DynamicData.DynamicControl> contrôle. Vous pouvez également modifier le modèle de champ utilisé par un champ de données dans toute l’application en appliquant le <xref:System.ComponentModel.DataAnnotations.UIHintAttribute> à votre modèle de données. Définition de la <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> propriété substitue les métadonnées appliquées au modèle de données. Pour plus d’informations sur les attributs de métadonnées, consultez [Dynamic Data ASP.NET](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).  
  
   
  
## Examples  
 Voir un exemple de code au moment de l’exécution de cette fonctionnalité : [exécuter](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl.UIHint).  
  
 L’exemple suivant montre comment vous pouvez spécifier un champ de données pour utiliser un modèle de champ différent pour afficher son contenu. Le deuxième exemple montre le modèle de champ personnalisé spécifié par le <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> propriété.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Default.aspx#1)]  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Email.ascx#2)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Email.ascx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationGroup : string with get, set" Usage="System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de groupe de validation pour le contrôle.</summary>
        <value>Nom de groupe de validation pour le contrôle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Groupes de validation permettent d’affecter des contrôles de validation sur une page à une catégorie spécifique. Chaque groupe de validation peut être validé indépendamment des autres groupes de validation sur la page. Utilisez le <xref:System.Web.DynamicData.DynamicControl.ValidationGroup%2A> propriété pour spécifier le nom du groupe de validation pour lequel le <xref:System.Web.DynamicData.DynamicControl> contrôle provoque la validation lors de la publication de la page sur le serveur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>