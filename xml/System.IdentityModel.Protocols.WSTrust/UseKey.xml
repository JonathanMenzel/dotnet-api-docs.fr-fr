<Type Name="UseKey" FullName="System.IdentityModel.Protocols.WSTrust.UseKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4be5d78d8d4703b4b3d7680f94428a416f458dec" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36559224" /></Metadata><TypeSignature Language="C#" Value="public class UseKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UseKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Protocols.WSTrust.UseKey" />
  <TypeSignature Language="VB.NET" Value="Public Class UseKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class UseKey" />
  <TypeSignature Language="F#" Value="type UseKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente le contenu de l'élément wst:UseKey.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet élément facultatif permet au client demander le fournisseur d’identité pour émettre un jeton contenant sa clé publique qui est spécifié sous l’élément WST : usekey. Toutefois, le client doit prouver la possession de la clé. Dans un message SOAP basée sur WS-sécurité, le client peut ajouter son certificat en tant qu’un jeton d’endossement à l’en-tête de sécurité pour prouver la possession de la clé.  
  
 Pour plus d’informations sur l’élément représenté par cette classe, consultez la version de la spécification WS-Trust qui s’applique à votre scénario.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UseKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UseKey();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le constructeur pour l’extensibilité.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UseKey (System.IdentityModel.Tokens.SecurityKeyIdentifier ski);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IdentityModel.Tokens.SecurityKeyIdentifier ski) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ski As SecurityKeyIdentifier)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UseKey(System::IdentityModel::Tokens::SecurityKeyIdentifier ^ ski);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Protocols.WSTrust.UseKey : System.IdentityModel.Tokens.SecurityKeyIdentifier -&gt; System.IdentityModel.Protocols.WSTrust.UseKey" Usage="new System.IdentityModel.Protocols.WSTrust.UseKey ski" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ski" Type="System.IdentityModel.Tokens.SecurityKeyIdentifier" />
      </Parameters>
      <Docs>
        <param name="ski"><see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> qui représente la clé existante qui doit être utilisée.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> à l'aide de l'identificateur de clé de sécurité spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez ce constructeur si le demandeur sait comment convertir le jeton à un identificateur de clé de sécurité ou si le jeton est déjà un identificateur de clé de sécurité.  
  
 Le <xref:System.IdentityModel.Protocols.WSTrust.UseKey.Token%2A> propriété est définie sur `null` dans le nouveau <xref:System.IdentityModel.Protocols.WSTrust.UseKey> instance.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UseKey (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UseKey(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Protocols.WSTrust.UseKey : System.IdentityModel.Tokens.SecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.UseKey" Usage="new System.IdentityModel.Protocols.WSTrust.UseKey token" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token"><see cref="T:System.IdentityModel.Tokens.SecurityToken" /> qui représente la clé existante qui doit être utilisée.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> à l'aide du jeton de sécurité spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IdentityModel.Protocols.WSTrust.UseKey.SecurityKeyIdentifier%2A> propriété est définie sur `null` dans le nouveau <xref:System.IdentityModel.Protocols.WSTrust.UseKey> instance.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UseKey (System.IdentityModel.Tokens.SecurityKeyIdentifier ski, System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IdentityModel.Tokens.SecurityKeyIdentifier ski, class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ski As SecurityKeyIdentifier, token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UseKey(System::IdentityModel::Tokens::SecurityKeyIdentifier ^ ski, System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Protocols.WSTrust.UseKey : System.IdentityModel.Tokens.SecurityKeyIdentifier * System.IdentityModel.Tokens.SecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.UseKey" Usage="new System.IdentityModel.Protocols.WSTrust.UseKey (ski, token)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ski" Type="System.IdentityModel.Tokens.SecurityKeyIdentifier" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="ski"><see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> qui représente la clé existante qui doit être utilisée.</param>
        <param name="token"><see cref="T:System.IdentityModel.Tokens.SecurityToken" /> qui représente la clé existante qui doit être utilisée.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> à l'aide de l'identificateur de clé de sécurité et du jeton de sécurité spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez ce constructeur pour passer des informations supplémentaires pour le service de jeton de sécurité (STS) à partir du sérialiseur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityKeyIdentifier">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityKeyIdentifier SecurityKeyIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityKeyIdentifier SecurityKeyIdentifier" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Protocols.WSTrust.UseKey.SecurityKeyIdentifier" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityKeyIdentifier As SecurityKeyIdentifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityKeyIdentifier ^ SecurityKeyIdentifier { System::IdentityModel::Tokens::SecurityKeyIdentifier ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityKeyIdentifier : System.IdentityModel.Tokens.SecurityKeyIdentifier" Usage="System.IdentityModel.Protocols.WSTrust.UseKey.SecurityKeyIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifier</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'identificateur de clé de sécurité</summary>
        <value><see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> qui représente l'identificateur de clé de sécurité.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityToken Token" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Protocols.WSTrust.UseKey.Token" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Token As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityToken ^ Token { System::IdentityModel::Tokens::SecurityToken ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Token : System.IdentityModel.Tokens.SecurityToken" Usage="System.IdentityModel.Protocols.WSTrust.UseKey.Token" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le jeton de sécurité si le sérialiseur ne peut pas le convertir en identificateur de clé de sécurité.</summary>
        <value><see cref="T:System.IdentityModel.Tokens.SecurityToken" /> qui représente le jeton.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>