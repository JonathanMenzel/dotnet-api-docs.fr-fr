<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cb6251512dd75740e1b01a33ceb7e3470f3a68d1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30660623" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ec12d-101">Lit l'entrée XAML et crée un graphique d'objet en utilisant le lecteur XAML par défaut de WPF et un writer d'objet XAML associé.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ec12d-101">Reads XAML input and creates an object graph, using the WPF default XAML reader and an associated XAML object writer.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec12d-102">Synchrones <xref:System.Windows.Markup.XamlReader.Load%2A> méthodes sont statiques, mais asynchrone <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> méthodes ne sont pas statiques et requièrent une instance de la <xref:System.Windows.Markup.XamlReader> classe à utiliser.</span><span class="sxs-lookup"><span data-stu-id="ec12d-102">The synchronous <xref:System.Windows.Markup.XamlReader.Load%2A> methods are static, but the asynchronous <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> methods are not static and require an instance of the <xref:System.Windows.Markup.XamlReader> class to use.</span></span>  
  
 <span data-ttu-id="ec12d-103">La sortie de la `Load` méthodes est un objet unique, qui représente l’objet racine d’une arborescence d’objets créée ou un graphique d’objet.</span><span class="sxs-lookup"><span data-stu-id="ec12d-103">The output of the `Load` methods is a single object, which represents the root object of a created object tree or object graph.</span></span> <span data-ttu-id="ec12d-104">Les graphiques qui sont créés par l’objet <xref:System.Windows.Markup.XamlReader> sont généralement ajoutés à l’arborescence d’objets existants d’une application WPF au moment de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="ec12d-104">Object graphs that are created by <xref:System.Windows.Markup.XamlReader> are typically added to the existing object tree of a WPF application at run time.</span></span> <span data-ttu-id="ec12d-105">Sinon, le graphique d’objet est considéré comme déconnecté pour servir de modèle d’application WPF.</span><span class="sxs-lookup"><span data-stu-id="ec12d-105">Otherwise the new object graph is considered disconnected for purposes of the WPF application model.</span></span> <span data-ttu-id="ec12d-106">Cela signifie qu’il n’est pas rendu et ne peut pas être accessible à l’aide des techniques objet arborescence en tant qu’appliqué à l’arborescence d’objets principale de l’application WPF (par exemple, les API <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>).</span><span class="sxs-lookup"><span data-stu-id="ec12d-106">This means that it does not render, and cannot be accessed using any of the object tree techniques as applied to the WPF application's main object tree (for example, the APIs <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>).</span></span> <span data-ttu-id="ec12d-107">Pour plus d’informations sur les concepts d’arborescence d’objets, consultez [arborescences dans WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span><span class="sxs-lookup"><span data-stu-id="ec12d-107">For more information on object tree concepts, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 <span data-ttu-id="ec12d-108"><xref:System.Windows.Markup.XamlReader> prend en charge les scénarios principaux suivants :</span><span class="sxs-lookup"><span data-stu-id="ec12d-108"><xref:System.Windows.Markup.XamlReader> supports the following primary scenarios:</span></span>  
  
-   <span data-ttu-id="ec12d-109">**Le clonage/fabrique d’objet**: sans des mécanismes supplémentaires, un type référence en règle générale ne peut pas être inclus dans plus d’une position dans une arborescence d’objets WPF.</span><span class="sxs-lookup"><span data-stu-id="ec12d-109">**Cloning/object factory**: Without additional mechanisms, a reference type generally cannot be included in more than one position in a WPF object tree.</span></span> <span data-ttu-id="ec12d-110">(Les objets qui sont basés sur des exemples de mécanismes supplémentaires qui offrent une prise en charge pour le partage ou réutiliser dans WPF <xref:System.Windows.Freezable>, ou prend en charge pour les objets communément partageables tels que <xref:System.Windows.Media.Brush> qui sont référencées comme un élément d’un <xref:System.Windows.ResourceDictionary>.) Pour cloner un objet qui est déjà dans l’arborescence d’objets consiste à sérialiser l’objet à l’aide de <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ec12d-110">(Examples of additional mechanisms that offer support for sharing or re-use in WPF include objects that are based on <xref:System.Windows.Freezable>, or support for commonly shareable objects such as <xref:System.Windows.Media.Brush> that are referenced as an item from a <xref:System.Windows.ResourceDictionary>.) One way to clone an object that is already in the object tree is to serialize the object using <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ec12d-111">Vous utilisez ensuite la chaîne sérialisée comme entrée pour un appel à <xref:System.Windows.Markup.XamlReader.Load%2A>, avec un flux de données ou <xref:System.Xml.XmlReader> comme intermédiaire.</span><span class="sxs-lookup"><span data-stu-id="ec12d-111">You then use the serialized string as input for a call to <xref:System.Windows.Markup.XamlReader.Load%2A>, with a stream or <xref:System.Xml.XmlReader> as an intermediary.</span></span>  
  
-   <span data-ttu-id="ec12d-112">**Construction d’objets selon des informations juste-à-temps**: il existe souvent des autres façons de faire saisie à liaison tardive ou fourni par l’utilisateur de modifier l’état des objets existants.</span><span class="sxs-lookup"><span data-stu-id="ec12d-112">**Constructing objects based on just-in-time information**: There are often other ways to have late-binding or user-supplied input change the state of existing objects.</span></span> <span data-ttu-id="ec12d-113">Par exemple, vous pourriez utiliser la même valeur pour définir plusieurs propriétés ou utiliser la liaison de données.</span><span class="sxs-lookup"><span data-stu-id="ec12d-113">For example you could use the same value to set more than one property, or use data binding.</span></span> <span data-ttu-id="ec12d-114">Mais si vous avez un scénario où même le type d’objet à créer est uniquement déterminé au moment de l’exécution ou interaction avec l’utilisateur, puis en créant un tel objet en construisant une chaîne pour <xref:System.Windows.Markup.XamlReader.Load%2A> entrée est souvent une technique utile.</span><span class="sxs-lookup"><span data-stu-id="ec12d-114">But if you have a scenario where even the type of object to create is only determinable at run time or with user interaction, then creating such an object by building up a string for <xref:System.Windows.Markup.XamlReader.Load%2A> input is often a useful technique.</span></span>  
  
-   <span data-ttu-id="ec12d-115">**À l’aide des techniques de ressource existantes**: le <xref:System.IO.Stream> type est souvent utilisé dans d’autres infrastructures ou les technologies pour le transfert des données ou des objets au-delà des limites d’application ou pour des situations similaires.</span><span class="sxs-lookup"><span data-stu-id="ec12d-115">**Using existing resource techniques**: The <xref:System.IO.Stream> type is used frequently in other frameworks or technologies for transferring data or objects across application boundaries or for similar situations.</span></span> <span data-ttu-id="ec12d-116">Vous pouvez ensuite utiliser le <xref:System.IO.Stream> techniques pour stocker ou obtenir des données au format XAML que vous utilisez finalement pour créer un objet dans le cadre de votre application.</span><span class="sxs-lookup"><span data-stu-id="ec12d-116">You can then use the <xref:System.IO.Stream> techniques to store or obtain XAML-formatted data that you eventually use to create an object as part of your application.</span></span>  
  
-   <span data-ttu-id="ec12d-117">**Documents fixes :** votre application peut charger des documents XPS locaux ou téléchargés pour l’inclure dans une arborescence d’objets application WPF et l’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="ec12d-117">**Fixed documents:** Your application might load local or downloaded XPS documents for inclusion in a WPF application object tree and UI.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ec12d-118">Parfois, cette documentation décrit un graphique d’objet, par opposition à une arborescence d’objets.</span><span class="sxs-lookup"><span data-stu-id="ec12d-118">This documentation sometimes describes an object graph, as opposed to an object tree.</span></span> <span data-ttu-id="ec12d-119">Une relation parent-enfant stricte n’existe pas toujours dans les relations d’objet moment de l’exécution d’une application WPF du moment de l’exécution, par conséquent, un graphique d’objet est une terminologie plus largement applicable.</span><span class="sxs-lookup"><span data-stu-id="ec12d-119">A strict parent-child relationship does not always exist in the run time object relationships of a run time WPF application, so an object graph is a more widely applicable terminology.</span></span> <span data-ttu-id="ec12d-120">Toutefois, étant donné que WPF inclut également deux API de conceptualisation arborescence différente (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) métaphore de l’arborescence s’applique encore correctement à la plupart des cas réels dans WPF.</span><span class="sxs-lookup"><span data-stu-id="ec12d-120">However, because WPF also includes two different tree conceptualization APIs (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) the tree metaphor still applies adequately to most real-world cases in WPF.</span></span> <span data-ttu-id="ec12d-121">Du point de vue du langage XAML, toutefois, le graphique d’objets est souvent la meilleure façon de réfléchir à la création des objets hors XAML, car le langage XAML lui-même ne spécifie pas nécessairement les méthodologies de classe d’assistance qui représentent les relations plusieurs à un structure arborescente à nouveau.</span><span class="sxs-lookup"><span data-stu-id="ec12d-121">From the XAML language perspective however, the object graph is often the best way to think about how objects are created out of XAML, because the XAML language itself does not necessarily specify helper class methodologies that bring the relationships more into a tree structure again.</span></span>  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a><span data-ttu-id="ec12d-122">Sécurité d’accès du code XAML libre et XamlReader</span><span class="sxs-lookup"><span data-stu-id="ec12d-122">Code Access Security, Loose XAML, and XamlReader</span></span>  
 <span data-ttu-id="ec12d-123">Le XAML est un langage de balisage qui représente directement l’instanciation d’objets et leur exécution.</span><span class="sxs-lookup"><span data-stu-id="ec12d-123">XAML is a markup language that directly represents object instantiation and execution.</span></span> <span data-ttu-id="ec12d-124">Ainsi, les éléments créés en XAML ont la même capacité d’interagir avec les ressources système (accès réseau, e/s de système de fichiers, par exemple) que le code généré équivalent.</span><span class="sxs-lookup"><span data-stu-id="ec12d-124">Therefore, elements created in XAML have the same ability to interact with system resources (network access, file system IO, for example) as the equivalent generated code does.</span></span>  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="ec12d-125"> prend en charge la [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] infrastructure de sécurité [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)].</span><span class="sxs-lookup"><span data-stu-id="ec12d-125"> supports the [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] security framework [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)].</span></span> <span data-ttu-id="ec12d-126">Cela signifie que le contenu [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] en cours d’exécution dans la zone Internet dispose d’autorisations d’exécution réduites.</span><span class="sxs-lookup"><span data-stu-id="ec12d-126">This means that [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] content running in the internet zone has reduced execution permissions.</span></span> <span data-ttu-id="ec12d-127">Le « XAML libre » (pages de code XAML non compilé, interprétées au moment du chargement par une visionneuse XAML) et [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] sont généralement exécutés dans cette zone internet et utilisent le même jeu d’autorisations.</span><span class="sxs-lookup"><span data-stu-id="ec12d-127">"Loose XAML" (pages of noncompiled XAML interpreted at load time by a XAML viewer) and [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] are usually run in this internet zone and use the same permission set.</span></span>  <span data-ttu-id="ec12d-128">Toutefois, le XAML chargé dans une application d’un niveau de confiance totale dispose du même accès aux ressources système que l’application d’hébergement.</span><span class="sxs-lookup"><span data-stu-id="ec12d-128">However, XAML loaded in to a fully trusted application has the same access to the system resources as the hosting application does.</span></span> <span data-ttu-id="ec12d-129">Pour plus d’informations, consultez [Sécurité de confiance partielle de WPF](~/docs/framework/wpf/wpf-partial-trust-security.md).</span><span class="sxs-lookup"><span data-stu-id="ec12d-129">For more information, see [WPF Partial Trust Security](~/docs/framework/wpf/wpf-partial-trust-security.md).</span></span>  
  
 <span data-ttu-id="ec12d-130">Les conséquences de ces instructions pour <xref:System.Windows.Markup.XamlReader> est que la conception de votre application doit prendre des décisions sur le code XAML vous décidez de charger.</span><span class="sxs-lookup"><span data-stu-id="ec12d-130">The implications of these statements for <xref:System.Windows.Markup.XamlReader> is that your application design must make trust decisions about the XAML you decide to load.</span></span> <span data-ttu-id="ec12d-131">Si vous chargez le code XAML qui n’est pas approuvé, envisagez d’implémenter votre propre technique de sandboxing pour comment charger le graphique d’objet obtenu.</span><span class="sxs-lookup"><span data-stu-id="ec12d-131">If you are loading XAML that is not trusted, consider implementing your own sandboxing technique for how you load the resulting object graph.</span></span>  
  
 <span data-ttu-id="ec12d-132"><xref:System.Windows.Markup.XamlReader> peut également être appelée par le code de confiance partielle.</span><span class="sxs-lookup"><span data-stu-id="ec12d-132"><xref:System.Windows.Markup.XamlReader> can also be called by partial trust code.</span></span> <span data-ttu-id="ec12d-133">Dans ce cas, la zone de sécurité Internet est appliquée pour la sécurité d’accès du code.</span><span class="sxs-lookup"><span data-stu-id="ec12d-133">In this case, Internet security zone is applied for code access security.</span></span> <span data-ttu-id="ec12d-134">Si n’importe où dans le XAML chargé n’est pas valide dans la zone de sécurité Internet, une exception d’analyse XAML est levée.</span><span class="sxs-lookup"><span data-stu-id="ec12d-134">If anything in the loaded XAML is invalid under Internet security zone, a XAML parse exception is thrown.</span></span> <span data-ttu-id="ec12d-135">Sous XBAP et autres qui sont de confiance partielle au niveau de la plateforme, où <xref:System.Windows.Markup.XamlReader> fait partie de l’exécution, vous obtenez le même comportement d’exception, comme avec les appels de confiance partielle explicites.</span><span class="sxs-lookup"><span data-stu-id="ec12d-135">Under XBAP and other cases that are partial trust at the platform level, where <xref:System.Windows.Markup.XamlReader> is part of the execution, you get the same exception behavior as with explicit partial trust calls.</span></span>  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a><span data-ttu-id="ec12d-136">XAML WPF, lecteurs/Writers XAML et contrôle de version de langage XAML</span><span class="sxs-lookup"><span data-stu-id="ec12d-136">WPF XAML, XAML Readers/Writers, and XAML Language Versioning</span></span>  
 [!INCLUDE[xaml2009](~/includes/xaml2009-md.md)]<span data-ttu-id="ec12d-137"> inclut des fonctionnalités de langage tels qu’et.</span><span class="sxs-lookup"><span data-stu-id="ec12d-137"> includes language features such as  and .</span></span> <span data-ttu-id="ec12d-138">Vous pouvez utiliser des signatures de `Load` ou `Parse` pour charger le code XAML qui utilise ces fonctionnalités.</span><span class="sxs-lookup"><span data-stu-id="ec12d-138">You can use signatures of `Load` or `Parse` to load XAML that uses these features.</span></span> <span data-ttu-id="ec12d-139">Toutefois, ces fonctionnalités de langage ne sont pas pris en charge pour le code XAML qui doit être compilé par balisage (tel que le code XAML pour la **Page** action dans une application WPF ou tout XAML qui implique la tâche de compilation de balisage dans les actions de génération de build).</span><span class="sxs-lookup"><span data-stu-id="ec12d-139">However, those language features are not supported for XAML that needs to be markup compiled (such as XAML for the **Page** build action in a WPF application, or any XAML that involves the markup compile task in the build actions).</span></span>  
  
 <span data-ttu-id="ec12d-140">Les types et la technologie WPF prend en charge en général les concepts qui s’appuient sur l’accès aux éléments internes WPF.</span><span class="sxs-lookup"><span data-stu-id="ec12d-140">WPF types and the WPF technology in general support concepts that rely on access to WPF internals.</span></span> <span data-ttu-id="ec12d-141">Par exemple, comment WPF implémente des propriétés de dépendance s’appuie sur les techniques internes pour la recherche de membre de type efficace.</span><span class="sxs-lookup"><span data-stu-id="ec12d-141">For instance, how WPF implements dependency properties relies on internal techniques for efficient type-member lookup.</span></span> <span data-ttu-id="ec12d-142">Accès à ces éléments internes est activé par la lecture et l’écriture des API fournies dans XAML <xref:System.Windows.Markup.XamlWriter> et <xref:System.Windows.Markup.XamlReader> à partir de la <xref:System.Windows.Markup> espace de noms et l’assembly PresentationFramework.</span><span class="sxs-lookup"><span data-stu-id="ec12d-142">Access to these internals is enabled by the XAML reading and writing APIs provided in <xref:System.Windows.Markup.XamlWriter> and <xref:System.Windows.Markup.XamlReader> from the <xref:System.Windows.Markup> namespace and PresentationFramework assembly.</span></span> <span data-ttu-id="ec12d-143">Toutefois, les lecteurs XAML de niveau inférieur et les writers XAML à partir de l’assembly System.Xaml (classes basées sur <xref:System.Xaml.XamlReader?displayProperty=nameWithType>, <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>) n’ont pas accès aux éléments internes WPF.</span><span class="sxs-lookup"><span data-stu-id="ec12d-143">However, the lower-level XAML readers and XAML writers from the System.Xaml assembly (classes based on <xref:System.Xaml.XamlReader?displayProperty=nameWithType>, <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>) do not have access to the WPF internals.</span></span> <span data-ttu-id="ec12d-144">Il n’existe aucune dépendance de System.Xaml à n’importe quel assembly WPF spécifiques.</span><span class="sxs-lookup"><span data-stu-id="ec12d-144">There is no dependency from System.Xaml to any WPF-specific assembly.</span></span> <span data-ttu-id="ec12d-145">Sans accès aux éléments internes WPF, les enregistreurs et lecteurs de System.Xaml ne peut pas se charger correctement ou enregistrer WPF tous les types, ou selon les types WPF.</span><span class="sxs-lookup"><span data-stu-id="ec12d-145">Without access to the WPF internals, System.Xaml readers and writers cannot correctly load or save all WPF types, or types based on WPF types.</span></span> <span data-ttu-id="ec12d-146">En particulier, les lecteurs et writers System.Xaml ne comprennent pas les concepts tels que la propriété de dépendance WPF banque de propriétés ou toutes les spécificités de la façon dont WPF utilise les styles, les dictionnaires de ressources et les modèles de stockage.</span><span class="sxs-lookup"><span data-stu-id="ec12d-146">In particular, the System.Xaml readers and writers do not understand concepts such as the WPF dependency property backing property store, or all the specifics of how WPF uses styles, resource dictionaries and templates.</span></span> <span data-ttu-id="ec12d-147">Par conséquent, vous devez faire un choix :</span><span class="sxs-lookup"><span data-stu-id="ec12d-147">Therefore you have a choice to make:</span></span>  
  
-   <span data-ttu-id="ec12d-148">Si vous chargez des types WPF, et/ou vous utilisez XAML sous forme BAML en aucune façon, utilisez les lecteurs XAML PresentationFramework et writers XAML.</span><span class="sxs-lookup"><span data-stu-id="ec12d-148">If you are loading WPF types, and/or you are using XAML in BAML form in any way, use the PresentationFramework XAML readers and XAML writers.</span></span>  
  
-   <span data-ttu-id="ec12d-149">Si vous ne comptez pas sur les types WPF ou la forme BAML du XAML et que vous n’utilisez pas de lecteur XAML ou l’implémentation du writer XAML d’une autre technologie spécifique pour des raisons spécifiques à cette infrastructure, utilisez les lecteurs XAML System.Xaml et les writers XAML.</span><span class="sxs-lookup"><span data-stu-id="ec12d-149">If you are not relying on any WPF types or the BAML form of XAML, and are not using another specific technology's XAML reader or XAML writer implementation for reasons that are specific to that framework, use the System.Xaml XAML readers and XAML writers.</span></span>  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a><span data-ttu-id="ec12d-150">System.Xaml sauvegarde mise en œuvre dans .NET 4</span><span class="sxs-lookup"><span data-stu-id="ec12d-150">System.Xaml Backing Implementation in .NET 4</span></span>  
 <span data-ttu-id="ec12d-151"><xref:System.Windows.Markup.XamlReader> est la surface API peut être appelée pour l’analyseur XAML de niveau infrastructure WPF.</span><span class="sxs-lookup"><span data-stu-id="ec12d-151"><xref:System.Windows.Markup.XamlReader> is the callable API surface for the WPF framework-level XAML parser.</span></span> <span data-ttu-id="ec12d-152">Le même analyseur XAML sous-jacent exécute également le code d’exécution XAML le chargement et l’analyse pour les applications WPF qui ciblent [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] et [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)].</span><span class="sxs-lookup"><span data-stu-id="ec12d-152">The same underlying XAML parser also performs the run-time XAML loading and parsing for WPF applications that target [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)].</span></span>  
  
 <span data-ttu-id="ec12d-153">Si vous ciblez [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], l’API externe est la même, mais les parties de l’implémentation sont construites sur le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implémentation XAML générale dans l’assembly System.Xaml, ce qui améliore les plusieurs aspects techniques et création de rapports de l’analyse XAML.</span><span class="sxs-lookup"><span data-stu-id="ec12d-153">If you are targeting [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the external API is the same, but parts of the implementation are built on the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] general XAML implementation in the System.Xaml assembly, which improves many of the technical and reporting aspects of parsing XAML.</span></span> <span data-ttu-id="ec12d-154">Ciblage [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implique notamment System.Xaml comme une référence et les détails de l’implémentation, telles que les exceptions signalées peuvent provenir de System.Xaml nécessairement les types définis.</span><span class="sxs-lookup"><span data-stu-id="ec12d-154">Targeting [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] necessarily entails including System.Xaml as a reference, and details of implementation such as the exceptions reported may come from System.Xaml defined types.</span></span>  
  
## Examples  
 <span data-ttu-id="ec12d-155">L’exemple suivant convertit un <xref:System.Windows.Controls.Button> dans une chaîne à l’aide de la <xref:System.Windows.Markup.XamlWriter> classe.</span><span class="sxs-lookup"><span data-stu-id="ec12d-155">The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.</span></span>  <span data-ttu-id="ec12d-156">La chaîne est ensuite chargée dans un <xref:System.Windows.Controls.Button> à l’aide de la méthode statique <xref:System.Windows.Markup.XamlReader.Load%2A> méthode sur la <xref:System.Windows.Markup.XamlReader> classe.</span><span class="sxs-lookup"><span data-stu-id="ec12d-156">The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.</span></span>  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ec12d-157">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Markup.XamlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-157">Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlReader" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ec12d-158">Abandonne l'opération de chargement asynchrone actuelle, si une opération de ce type est en attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-158">Aborts the current asynchronous load operation, if there is an asynchronous load operation pending.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec12d-159"><xref:System.Windows.Markup.XamlReader.CancelAsync%2A> est une opération asynchrone ; Par conséquent, certains chargement peut se produire avant l’abandon de l’opération.</span><span class="sxs-lookup"><span data-stu-id="ec12d-159"><xref:System.Windows.Markup.XamlReader.CancelAsync%2A> is an asynchronous operation; therefore, some loading may occur before the operation is aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ec12d-160">Retourne un objet <see cref="T:System.Xaml.XamlSchemaContext" /> qui représente les paramètres de contexte de schéma WPF pour un <see cref="T:System.Windows.Markup.XamlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-160">Returns a <see cref="T:System.Xaml.XamlSchemaContext" /> object that represents the WPF schema context settings for a <see cref="T:System.Windows.Markup.XamlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec12d-161">Objet <see cref="T:System.Xaml.XamlSchemaContext" /> représentant les paramètres de contexte de schéma WPF d'un <see cref="T:System.Windows.Markup.XamlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-161">A <see cref="T:System.Xaml.XamlSchemaContext" /> object that represents the WPF schema context settings for a <see cref="T:System.Windows.Markup.XamlReader" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ec12d-162">Lit l'entrée XAML et retourne la racine de l'arborescence de l'objet correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-162">Reads XAML input and returns the root of the corresponding object tree.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="ec12d-163">XAML à charger, dans le formulaire de flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-163">The XAML to load, in stream form.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec12d-164">Lit l'entrée XAML dans le <see cref="T:System.IO.Stream" /> spécifié et retourne un <see cref="T:System.Object" /> qui est la racine de l'arborescence de l'objet correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-164">Reads the XAML input in the specified <see cref="T:System.IO.Stream" /> and returns an <see cref="T:System.Object" /> that is the root of the corresponding object tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec12d-165">Objet à la racine de l'arborescence d'objets créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-165">The object at the root of the created object tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ec12d-166">L’exemple suivant enregistre un <xref:System.Windows.Controls.Button> dans un <xref:System.IO.MemoryStream> à l’aide de la <xref:System.Windows.Markup.XamlWriter> classe.</span><span class="sxs-lookup"><span data-stu-id="ec12d-166">The following example saves a <xref:System.Windows.Controls.Button> into a <xref:System.IO.MemoryStream> using the <xref:System.Windows.Markup.XamlWriter> class.</span></span> <span data-ttu-id="ec12d-167">Le flux est ensuite chargé dans un <xref:System.Windows.Controls.Button> à l’aide de la méthode statique <xref:System.Windows.Markup.XamlReader.Load%2A> méthode sur la <xref:System.Windows.Markup.XamlReader> classe.</span><span class="sxs-lookup"><span data-stu-id="ec12d-167">The stream is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.</span></span>  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec12d-168">
            <paramref name="stream" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-168">
              <paramref name="stream" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="ec12d-169">Objet <see cref="T:System.Xaml.XamlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-169">A <see cref="T:System.Xaml.XamlReader" /> object.</span>
          </span>
          <span data-ttu-id="ec12d-170">Attendu pour être initialisé avec l'entrée XAML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-170">This is expected to be initialized with input XAML.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec12d-171">Lit l'entrée XAML via le <see cref="T:System.Xaml.XamlReader" /> fourni et retourne un objet qui est la racine de l'arborescence de l'objet correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-171">Reads the XAML input through a provided <see cref="T:System.Xaml.XamlReader" /> and returns an object that is the root of the corresponding object tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec12d-172">Objet qui est la racine de l'arborescence d'objets créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-172">The object that is the root of the created object tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec12d-173">L’entrée <xref:System.Xaml.XamlReader> peut être <xref:System.Windows.Baml2006.Baml2006Reader>.</span><span class="sxs-lookup"><span data-stu-id="ec12d-173">The input <xref:System.Xaml.XamlReader> can be <xref:System.Windows.Baml2006.Baml2006Reader>.</span></span> <span data-ttu-id="ec12d-174">Voici comment vous pouvez charger BAML au moment de l’exécution, soit pour des raisons d’outil de localisation.</span><span class="sxs-lookup"><span data-stu-id="ec12d-174">This is how you can load BAML at run time, or for localization tool purposes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec12d-175">
            <paramref name="reader" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-175">
              <paramref name="reader" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="ec12d-176">
            <see cref="T:System.Xml.XmlReader" /> qui a déjà chargé l'entrée XAML à charger dans le formulaire XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-176">The <see cref="T:System.Xml.XmlReader" /> that has already loaded the XAML input to load in XML form.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec12d-177">Lit l'entrée XAML dans le <see cref="T:System.Xml.XmlReader" /> spécifié et retourne un objet qui est la racine de l'arborescence de l'objet correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-177">Reads the XAML input in the specified <see cref="T:System.Xml.XmlReader" /> and returns an object that is the root of the corresponding object tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec12d-178">Objet qui est la racine de l'arborescence d'objets créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-178">The object that is the root of the created object tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ec12d-179">L’exemple suivant convertit un <xref:System.Windows.Controls.Button> dans une chaîne à l’aide de la <xref:System.Windows.Markup.XamlWriter> classe.</span><span class="sxs-lookup"><span data-stu-id="ec12d-179">The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.</span></span>  <span data-ttu-id="ec12d-180">La chaîne est ensuite chargée dans un <xref:System.Windows.Controls.Button> à l’aide de la méthode statique <xref:System.Windows.Markup.XamlReader.Load%2A> méthode sur la <xref:System.Windows.Markup.XamlReader> classe.</span><span class="sxs-lookup"><span data-stu-id="ec12d-180">The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.</span></span>  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec12d-181">
            <paramref name="reader" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-181">
              <paramref name="reader" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="ec12d-182">Flux qui contient l'entrée XAML à charger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-182">The stream that contains the XAML input to load.</span>
          </span>
        </param>
        <param name="parserContext">
          <span data-ttu-id="ec12d-183">Informations de contexte utilisées par l'analyseur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-183">Context information used by the parser.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec12d-184">Lit l'entrée XAML dans le <see cref="T:System.IO.Stream" /> spécifié et retourne un objet qui est la racine de l'arborescence de l'objet correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-184">Reads the XAML input in the specified <see cref="T:System.IO.Stream" /> and returns an object that is the root of the corresponding object tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec12d-185">Objet qui est la racine de l'arborescence d'objets créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-185">The object that is the root of the created object tree.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec12d-186">
            <paramref name="stream" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-186">
              <paramref name="stream" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ec12d-187">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-187">-or-</span>
          </span>
          <span data-ttu-id="ec12d-188">
            <paramref name="parserContext" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-188">
              <paramref name="parserContext" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ec12d-189">Lit le balisage XAML et retourne un objet qui correspond à la racine du balisage spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-189">Reads XAML markup and returns an object that corresponds to the root of the specified markup.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="ec12d-190">Flux contenant l'entrée XAML à charger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-190">The stream containing the XAML input to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec12d-191">Lit l'entrée XAML dans le <see cref="T:System.IO.Stream" /> spécifié et retourne la racine de l'arborescence de l'objet correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-191">Reads the XAML input in the specified <see cref="T:System.IO.Stream" /> and returns the root of the corresponding object tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec12d-192">Objet qui est la racine de l'arborescence d'objets créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-192">The object that is the root of the created object tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec12d-193">Une opération de chargement XAML asynchrone retournera initialement un objet qui est purement l’objet racine.</span><span class="sxs-lookup"><span data-stu-id="ec12d-193">An asynchronous XAML load operation will initially return an object that is purely the root object.</span></span> <span data-ttu-id="ec12d-194">En mode asynchrone, l’analyse XAML sont ensuite continue, et tous les objets enfants sont remplis sous la racine.</span><span class="sxs-lookup"><span data-stu-id="ec12d-194">Asynchronously, XAML parsing then continues, and any child objects are filled in under the root.</span></span> <span data-ttu-id="ec12d-195">Ce comportement diffère le traitement XAML WPF typique comportement et son interaction avec les concepts WPF de durée de vie.</span><span class="sxs-lookup"><span data-stu-id="ec12d-195">This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime.</span></span> <span data-ttu-id="ec12d-196">Dans l’interaction classique (non-async), toutes les propriétés d’un objet, y compris toutes les collections enfants sont remplies avant de retourner un élément et de signaler comme chargé.</span><span class="sxs-lookup"><span data-stu-id="ec12d-196">In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded.</span></span> <span data-ttu-id="ec12d-197">Ce comportement équivaut à une méthodologie de bas en haut pour la création de l’arborescence où l’objet racine est le dernier objet devienne disponible.</span><span class="sxs-lookup"><span data-stu-id="ec12d-197">That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.</span></span>  
  
 <span data-ttu-id="ec12d-198">Vous en général l’objet retourné à un emplacement dans l’arborescence d’objets de votre application WPF, sachant que le contenu pouvez être complété et pouvez provoquer des mises à jour de disposition incrémentielles si le contenu entier est exposé en tant que partie de l’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="ec12d-198">You typically would assign the returned object to some location in your WPF application's object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI.</span></span> <span data-ttu-id="ec12d-199">Pour cette raison, il est classique d’isoler ou de virtualiser les objets chargés de façon asynchrone à partir de XAML et d’utiliser une logique spécifique à l’application ou l’état de l’application pour notifier lorsque <xref:System.Windows.Markup.XamlReader.LoadCompleted> est gérée.</span><span class="sxs-lookup"><span data-stu-id="ec12d-199">For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when <xref:System.Windows.Markup.XamlReader.LoadCompleted> is handled.</span></span>  
  
 <span data-ttu-id="ec12d-200">Dans l’ordre pour <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> pour charger le XAML d’entrée de façon asynchrone, l’élément racine dans l’entrée XAML doit contenir l’attribut et la valeur `x:SynchronousMode="Async"`.</span><span class="sxs-lookup"><span data-stu-id="ec12d-200">In order for <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> to load XAML input asynchronously, the root element in the XAML input must contain the attribute and value `x:SynchronousMode="Async"`.</span></span> <span data-ttu-id="ec12d-201">La valeur est traitée comme respectant la casse.</span><span class="sxs-lookup"><span data-stu-id="ec12d-201">The value is treated as case sensitive.</span></span> <span data-ttu-id="ec12d-202">Si la racine d’entrée XAML ne contient pas `x:SynchronousMode="Async"`, aucune exception n’est levée et l’appel est traité comme une charge synchrone (voir <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).</span><span class="sxs-lookup"><span data-stu-id="ec12d-202">If the XAML input root does not contain `x:SynchronousMode="Async"`, no exception is thrown, and the call is processed as a synchronous load (see <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).</span></span>  
  
 <span data-ttu-id="ec12d-203">Une seule opération de chargement asynchrone par instance de la <xref:System.Windows.Markup.XamlReader> classe peut être effectuée à la fois.</span><span class="sxs-lookup"><span data-stu-id="ec12d-203">Only one asynchronous load operation per instance of the <xref:System.Windows.Markup.XamlReader> class can be performed at a time.</span></span>  <span data-ttu-id="ec12d-204">Si plus d’une opération asynchrone est tentée sur la même instance de la <xref:System.Windows.Markup.XamlReader> classe une <xref:System.InvalidOperationException> est levée.</span><span class="sxs-lookup"><span data-stu-id="ec12d-204">If more than one asynchronous operation is attempted on the same instance of the <xref:System.Windows.Markup.XamlReader> class an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec12d-205">
            <paramref name="stream" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-205">
              <paramref name="stream" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ec12d-206">Plusieurs opérations de chargement sont en attente simultanément avec le même <see cref="T:System.Windows.Markup.XamlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-206">Multiple load operations are pending concurrently with the same <see cref="T:System.Windows.Markup.XamlReader" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="ec12d-207">Classe <see cref="T:System.Xml.XmlReader" /> existante qui a déjà chargé/lu l'entrée XAML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-207">An existing  <see cref="T:System.Xml.XmlReader" /> that has already loaded/read the XAML input.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec12d-208">Lit l'entrée XAML dans le <see cref="T:System.Xml.XmlReader" /> spécifié et retourne la racine de l'arborescence de l'objet correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-208">Reads the XAML input in the specified <see cref="T:System.Xml.XmlReader" /> and returns the root of the corresponding object tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec12d-209">Racine de l'arborescence d'objets créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-209">The root of the created object tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec12d-210">Une opération de chargement XAML asynchrone retournera initialement un objet qui est purement l’objet racine.</span><span class="sxs-lookup"><span data-stu-id="ec12d-210">An asynchronous XAML load operation will initially return an object that is purely the root object.</span></span> <span data-ttu-id="ec12d-211">En mode asynchrone, l’analyse XAML sont ensuite continue, et tous les objets enfants sont remplis sous la racine.</span><span class="sxs-lookup"><span data-stu-id="ec12d-211">Asynchronously, XAML parsing then continues, and any child objects are filled in under the root.</span></span> <span data-ttu-id="ec12d-212">Ce comportement diffère le traitement XAML WPF typique comportement et son interaction avec les concepts WPF de durée de vie.</span><span class="sxs-lookup"><span data-stu-id="ec12d-212">This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime.</span></span> <span data-ttu-id="ec12d-213">Dans l’interaction classique (non-async), toutes les propriétés d’un objet, y compris toutes les collections enfants sont remplies avant de retourner un élément et de signaler comme chargé.</span><span class="sxs-lookup"><span data-stu-id="ec12d-213">In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded.</span></span> <span data-ttu-id="ec12d-214">Ce comportement équivaut à une méthodologie de bas en haut pour la création de l’arborescence où l’objet racine est le dernier objet devienne disponible.</span><span class="sxs-lookup"><span data-stu-id="ec12d-214">That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.</span></span>  
  
 <span data-ttu-id="ec12d-215">Vous devez en général attribuer l’objet retourné à partir de <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> vers un emplacement dans l’arborescence d’objets de votre application, sachant que le contenu peut toujours être complété et peut provoquer des mises à jour de disposition incrémentielles si le contenu entier est exposé dans le cadre de la INTERFACE UTILISATEUR.</span><span class="sxs-lookup"><span data-stu-id="ec12d-215">You typically would assign the returned object from <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> to some location in your application's object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI.</span></span> <span data-ttu-id="ec12d-216">Pour cette raison, il est classique d’isoler ou de virtualiser les objets chargés de façon asynchrone à partir de XAML et d’utiliser une logique spécifique à l’application ou l’état de l’application pour notifier lorsque <xref:System.Windows.Markup.XamlReader.LoadCompleted> est gérée.</span><span class="sxs-lookup"><span data-stu-id="ec12d-216">For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when <xref:System.Windows.Markup.XamlReader.LoadCompleted> is handled.</span></span>  
  
 <span data-ttu-id="ec12d-217">Dans l’ordre pour <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> pour charger le XAML d’entrée de façon asynchrone, l’élément racine dans le balisage XAML doit contenir l’attribut et la valeur `x:SynchronousMode="Async"`.</span><span class="sxs-lookup"><span data-stu-id="ec12d-217">In order for <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> to load XAML input asynchronously, the root element in the XAML markup must contain the attribute and value `x:SynchronousMode="Async"`.</span></span> <span data-ttu-id="ec12d-218">La valeur est traitée comme respectant la casse.</span><span class="sxs-lookup"><span data-stu-id="ec12d-218">The value is treated as case sensitive.</span></span> <span data-ttu-id="ec12d-219">Si la racine du balisage XAML ne contient pas `x:SynchronousMode="Async"`, aucune exception n’est levée et l’appel est traité à la place comme une charge synchrone (voir <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).</span><span class="sxs-lookup"><span data-stu-id="ec12d-219">If the XAML markup root does not contain `x:SynchronousMode="Async"`, no exception is thrown, and the call is instead processed as a synchronous load (see <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).</span></span>  
  
 <span data-ttu-id="ec12d-220">Une seule opération de chargement asynchrone par instance de la <xref:System.Windows.Markup.XamlReader> classe peut être effectuée à la fois.</span><span class="sxs-lookup"><span data-stu-id="ec12d-220">Only one asynchronous load operation per instance of the <xref:System.Windows.Markup.XamlReader> class can be performed at a time.</span></span>  <span data-ttu-id="ec12d-221">Si plus d’une opération asynchrone est tentée sur la même instance de la <xref:System.Windows.Markup.XamlReader> classe une <xref:System.InvalidOperationException> est levée.</span><span class="sxs-lookup"><span data-stu-id="ec12d-221">If more than one asynchronous operation is attempted on the same instance of the <xref:System.Windows.Markup.XamlReader> class an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec12d-222">
            <paramref name="reader" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-222">
              <paramref name="reader" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ec12d-223">Plusieurs opérations de chargement sont réalisées simultanément avec le même <see cref="T:System.Windows.Markup.XamlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-223">Multiple load operations are performed concurrently with the same <see cref="T:System.Windows.Markup.XamlReader" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="ec12d-224">Flux contenant l'entrée XAML à charger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-224">A stream containing the XAML input to load.</span>
          </span>
        </param>
        <param name="parserContext">
          <span data-ttu-id="ec12d-225">Informations de contexte utilisées par l'analyseur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-225">Context information used by the parser.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec12d-226">Lit l'entrée XAML dans le <see cref="T:System.IO.Stream" /> spécifié et retourne la racine de l'arborescence de l'objet correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-226">Reads the XAML input in the specified <see cref="T:System.IO.Stream" /> and returns the root of the corresponding object tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec12d-227">Racine de l'arborescence d'objets créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-227">The root of the created object tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec12d-228">Une opération de chargement XAML asynchrone retournera initialement un objet qui est purement l’objet racine.</span><span class="sxs-lookup"><span data-stu-id="ec12d-228">An asynchronous XAML load operation will initially return an object that is purely the root object.</span></span> <span data-ttu-id="ec12d-229">En mode asynchrone, l’analyse XAML sont ensuite continue, et tous les objets enfants sont remplis sous la racine.</span><span class="sxs-lookup"><span data-stu-id="ec12d-229">Asynchronously, XAML parsing then continues, and any child objects are filled in under the root.</span></span> <span data-ttu-id="ec12d-230">Ce comportement diffère le traitement XAML WPF typique comportement et son interaction avec les concepts WPF de durée de vie.</span><span class="sxs-lookup"><span data-stu-id="ec12d-230">This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime.</span></span> <span data-ttu-id="ec12d-231">Dans l’interaction classique (non-async), toutes les propriétés d’un objet, y compris toutes les collections enfants sont remplies avant de retourner un élément et de signaler comme chargé.</span><span class="sxs-lookup"><span data-stu-id="ec12d-231">In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded.</span></span> <span data-ttu-id="ec12d-232">Ce comportement équivaut à une méthodologie de bas en haut pour la création de l’arborescence où l’objet racine est le dernier objet devienne disponible.</span><span class="sxs-lookup"><span data-stu-id="ec12d-232">That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.</span></span>  
  
 <span data-ttu-id="ec12d-233">Vous en général l’objet retourné à un emplacement dans l’arborescence d’objets de votre application, sachant que le contenu pouvez être complété et pouvez provoquer des mises à jour de disposition incrémentielles si le contenu entier est exposé en tant que partie de l’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="ec12d-233">You typically would assign the returned object to some location in your application's object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI.</span></span> <span data-ttu-id="ec12d-234">Pour cette raison, il est classique d’isoler ou de virtualiser les objets chargés de façon asynchrone à partir de XAML et d’utiliser une logique spécifique à l’application ou l’état de l’application pour notifier lorsque <xref:System.Windows.Markup.XamlReader.LoadCompleted> est gérée.</span><span class="sxs-lookup"><span data-stu-id="ec12d-234">For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when <xref:System.Windows.Markup.XamlReader.LoadCompleted> is handled.</span></span>  
  
 <span data-ttu-id="ec12d-235">Dans l’ordre pour <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> pour charger le balisage en mode asynchrone, l’élément racine dans le balisage XAML doit contenir l’attribut et la valeur `x:SynchronousMode="Async"`.</span><span class="sxs-lookup"><span data-stu-id="ec12d-235">In order for <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> to load markup asynchronously, the root element in the XAML markup must contain the attribute and value `x:SynchronousMode="Async"`.</span></span> <span data-ttu-id="ec12d-236">La valeur est traitée comme respectant la casse.</span><span class="sxs-lookup"><span data-stu-id="ec12d-236">The value is treated as case sensitive.</span></span> <span data-ttu-id="ec12d-237">Si la racine du balisage XAML ne contient pas `x:SynchronousMode="Async"`, aucune exception n’est levée et l’appel est traité comme une charge synchrone (voir <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).</span><span class="sxs-lookup"><span data-stu-id="ec12d-237">If the XAML markup root does not contain `x:SynchronousMode="Async"`, no exception is thrown, and the call is processed as a synchronous load (see <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).</span></span>  
  
 <span data-ttu-id="ec12d-238">Une seule opération de chargement asynchrone par instance de la <xref:System.Windows.Markup.XamlReader> classe peut être effectuée à la fois.</span><span class="sxs-lookup"><span data-stu-id="ec12d-238">Only one asynchronous load operation per instance of the <xref:System.Windows.Markup.XamlReader> class can be performed at a time.</span></span>  <span data-ttu-id="ec12d-239">Si plus d’une opération asynchrone est tentée sur la même instance de la <xref:System.Windows.Markup.XamlReader> classe une <xref:System.InvalidOperationException> est levée.</span><span class="sxs-lookup"><span data-stu-id="ec12d-239">If more than one asynchronous operation is attempted on the same instance of the <xref:System.Windows.Markup.XamlReader> class an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec12d-240">
            <paramref name="stream" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-240">
              <paramref name="stream" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ec12d-241">Plusieurs opérations de chargement sont réalisées simultanément avec le même <see cref="T:System.Windows.Markup.XamlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-241">Multiple load operations are performed concurrently with the same <see cref="T:System.Windows.Markup.XamlReader" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ec12d-242">Se produit lorsqu'une opération de chargement asynchrone se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-242">Occurs when an asynchronous load operation completes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec12d-243"><xref:System.Windows.Markup.XamlReader.LoadCompleted> est également déclenché lorsqu’une opération de chargement asynchrone est abandonnée.</span><span class="sxs-lookup"><span data-stu-id="ec12d-243"><xref:System.Windows.Markup.XamlReader.LoadCompleted> is also raised when an asynchronous load operation aborts.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ec12d-244">Lit le balisage dans la chaîne de texte spécifiée et retourne un objet qui correspond à la racine du balisage indiqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-244">Reads the markup in the specified text string and returns an object that corresponds to the root of the specified markup.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">
          <span data-ttu-id="ec12d-245">XAML d'entrée, en tant que chaîne de texte unique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-245">The input XAML, as a single text string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec12d-246">Lit l'entrée XAML dans la chaîne de texte spécifiée et retourne un objet qui correspond à la racine du balisage indiqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-246">Reads the XAML input in the specified text string and returns an object that corresponds to the root of the specified markup.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec12d-247">Racine de l'arborescence d'objets créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-247">The root of the created object tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec12d-248">L’implémentation appelle <xref:System.Windows.Markup.XamlReader.Load%2A> en interne après la création d’un flux de données à partir de la chaîne.</span><span class="sxs-lookup"><span data-stu-id="ec12d-248">The implementation calls <xref:System.Windows.Markup.XamlReader.Load%2A> internally after creating a stream from the string.</span></span> <span data-ttu-id="ec12d-249">Consultez <xref:System.Windows.Markup.XamlReader.Load%2A> pour plus d’informations telles que les exceptions possibles.</span><span class="sxs-lookup"><span data-stu-id="ec12d-249">See <xref:System.Windows.Markup.XamlReader.Load%2A> for additional information such as possible exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">
          <span data-ttu-id="ec12d-250">XAML d'entrée, en tant que chaîne de texte unique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-250">The input XAML, as a single text string.</span>
          </span>
        </param>
        <param name="parserContext">
          <span data-ttu-id="ec12d-251">Informations de contexte utilisées par l'analyseur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-251">Context information used by the parser.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec12d-252">Lit le balisage XAML dans la chaîne de texte spécifiée (à l'aide d'un <see cref="T:System.Windows.Markup.ParserContext" /> spécifié) et retourne un objet qui correspond à la racine du balisage indiqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-252">Reads the XAML markup in the specified text string (using a specified <see cref="T:System.Windows.Markup.ParserContext" />) and returns an object that corresponds to the root of the specified markup.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec12d-253">Racine de l'arborescence d'objets créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec12d-253">The root of the created object tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec12d-254">L’implémentation appelle <xref:System.Windows.Markup.XamlReader.Load%2A> en interne après la création d’un flux de données à partir de la chaîne.</span><span class="sxs-lookup"><span data-stu-id="ec12d-254">The implementation calls <xref:System.Windows.Markup.XamlReader.Load%2A> internally after creating a stream from the string.</span></span> <span data-ttu-id="ec12d-255">Consultez <xref:System.Windows.Markup.XamlReader.Load%2A> pour plus d’informations telles que les exceptions possibles.</span><span class="sxs-lookup"><span data-stu-id="ec12d-255">See <xref:System.Windows.Markup.XamlReader.Load%2A> for additional information such as possible exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>