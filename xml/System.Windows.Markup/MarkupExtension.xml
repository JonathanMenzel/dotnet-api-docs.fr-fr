<Type Name="MarkupExtension" FullName="System.Windows.Markup.MarkupExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3746808349956fe51624132285df9c875558e01e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502592" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupExtension abstract" />
  <TypeSignature Language="F#" Value="type MarkupExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit une classe de base pour les implémentations d’extension de balisage XAML qui peuvent être prises en charge par les services XAML .NET Framework et d’autres lecteurs et writers XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Extensions de balisage retournent des objets aux appelants, basés sur l’entrée de valeurs d’attribut de chaîne ou des éléments de balisage en XAML. Extensions de balisage retournent des objets d’une manière plus sophistiquée de convertisseurs de type seuls peuvent accomplir. Un writer d’objet XAML appelle un convertisseur de type, car un type ou membre a une implémentation de convertisseur de type associée. Dans le cadre de référence CLR, cela signifie qu’un type ou un membre est <xref:System.ComponentModel.TypeConverterAttribute> avec attributs. Point de vue du système de type XAML, cela signifie qu’une valeur pour un type XAML ou un membre XAML son `TypeConverter` propriété. L’appel d’un convertisseur de type est liée à la définition de type ou une propriété et est toujours appelée par le traitement XAML pour ces cas. En revanche, une extension de balisage est plus sous le contrôle de code utilisateur et le balisage produit par l’utilisateur et peut être appliquée à chaque fois qu’un scénario d’application l’exige. Une extension de balisage peut être appelée et peut être utilisée pour définir les valeurs de membre de type différents, tant que type de retour de l’extension de balisage est assignable à cette valeur.  
  
 Pour plus d’informations sur la création d’une extension de balisage personnalisée, consultez <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>. Pour plus d’informations sur les extensions de balisage en général, consultez [Extensions de balisage pour XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md). Si vous programmez sur WPF et utilisez ou créez des extensions de balisage pour XAML, les autres informations pertinentes sont accessibles dans la rubrique [Extensions de balisage et XAML WPF](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  
  
 Le <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> méthode de chaque implémentation d’extension de balisage peut utiliser un <xref:System.IServiceProvider> en cours d’exécution qui peut fournir le contexte. Cela <xref:System.IServiceProvider> est alors interrogé pour les services spécifiques qui passent des informations, telles que <xref:System.Windows.Markup.IProvideValueTarget> ou <xref:System.Windows.Markup.IXamlTypeResolver>. Pour plus d’informations sur les contextes de service pour une extension de balisage, consultez [contextes de services disponibles aux convertisseurs de Type et Extensions de balisage](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).  
  
 Les classes dérivées doivent être attribuées avec <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> pour informer les consommateurs du type de retour plus spécifique disponible à partir de l’extension de balisage <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> implémentation.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarkupExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance d'une classe dérivée de <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Windows.Markup.MarkupExtension> classe abstraite ne conserve pas de valeurs privées qui requièrent une initialisation.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Une extension de balisage fonctionnelle doit définir son propre constructeur public par défaut. En outre, l’extension de balisage doit implémenter des constructeurs qui sont appropriés pour les fonctionnalités prévue de l’extension et de balisage. Pour plus d’informations, consultez [Extensions de balisage pour XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public abstract object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member ProvideValue : IServiceProvider -&gt; obj" Usage="markupExtension.ProvideValue serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Assistance de fournisseur de service qui peut fournir des services pour l’extension de balisage.</param>
        <summary>En cas d’implémentation dans une classe dérivée, retourne un objet qui est fourni comme valeur de la propriété cible de cette extension de balisage.</summary>
        <returns>Valeur d’objet à définir sur la propriété où l’extension est appliquée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un processeur XAML traite une valeur de type nœud ou de membre qui est une extension de balisage, il appelle la <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> méthode de cette extension de balisage et écrit le résultat dans le flux de sérialisation ou de graphique d’objet. Le writer d’objet XAML passe le contexte de service à chaque implémentation de ce type via le `serviceProvider` paramètre.  
  
 Consultez la section « Remarques à l’attention des implémenteurs » pour plus d’informations sur la façon d’implémenter <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> dans une extension de balisage personnalisée.  
  
## <a name="wpf-usage-notes"></a>Remarques sur l'utilisation de WPF  
  
> [!IMPORTANT]
>  Les classes WPF qui ont des interactions spécifiques avec les opérations ensemblistes de balisage ne doivent pas dépendre <xref:System.Windows.Markup.IReceiveMarkupExtension> pour un [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] mise en œuvre. Utilisez <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-rappels avec attribut.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Services communs retournés par le fournisseur de services par défaut qui est généralement disponible personnalisée ou existante <see cref="T:System.Windows.Markup.MarkupExtension" /> implémentation incluent les services principaux suivants.  - <see cref="T:System.Windows.Markup.IProvideValueTarget" /> signale la référence d’objet et un identificateur de propriété à partir du contexte dans lequel l’extension de balisage est utilisée - <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> expose un service qui correspond au comportement qui peut fournir d’écriture d’objet XAML général un <see cref="T:System.Type" /> selon un XAML nom du type. Le nom peut éventuellement inclure un préfixe pour un espace de noms XAML mappé.  - <see cref="T:System.Xaml.IXamlSchemaContextProvider" /> expose le contexte de schéma XAML actif directement. Dans le rapport <see cref="T:System.Xaml.XamlSchemaContext" />, vous pouvez obtenir le contexte informations de schéma XAML telles que la manière dont les assemblys sont mappés pour la prise en charge de type, un préfixe par défaut dans les assemblys, répertorie chaque <see cref="T:System.Xaml.XamlType" /> dans un assembly et ainsi de suite.  -Les autres services disponibles pour les scénarios d’extension de balisage plus spécialisées incluent :- <see cref="T:System.Windows.Markup.IUriContext" />   
  
    -    <see cref="T:System.Xaml.IAmbientProvider" />   
  
    -    <see cref="T:System.Xaml.IDestinationTypeProvider" />   
  
    -    <see cref="T:System.Xaml.IRootObjectProvider" />   
  
    -    <see cref="T:System.Xaml.IXamlNameResolver" />   
  
    -    <see cref="T:System.Xaml.IXamlNamespaceResolver" /> Potentiellement, les implémentations de <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> peut ignorer la <paramref name="serviceProvider" /> paramètre. Il s’agit viable pour certains scénarios de base, où aucun contexte n’est requis pour retourner une valeur.  En règle générale, les Services XAML .NET Framework et le code XAML implémenté objet writers fournira un fournisseur de services à toutes les méthodes de convertisseur de valeur qui sont appelés pendant le XAML de traitement. Toutefois, pour plus de fiabilité, vous devez fournir les chemins de code pour les valeurs null pour le fournisseur de services et tout service demandé. Les valeurs null peuvent se produire si votre extension de balisage est appliquée dans un cas où la prise en charge de service standard fournie par une infrastructure de processeur XAML n’est pas disponible.  Pour plus d’informations sur les services disponibles à partir du contexte de fournisseur de services XAML et comment les utiliser, consultez [convertisseurs de Type et Extensions de balisage pour XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md).  Les implémentations qui requièrent un certain service soit disponible afin de produire un utile <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> résultat sont prévu de lever des exceptions si ce service n’est pas disponible. Exception à lever recommandée est <see cref="T:System.InvalidOperationException" />.  L’implémentation peut également lever des exceptions si l’un des arguments dont l’extension de balisage personnalisée a besoin pour fournir une valeur est null, n’est pas valide pour son type de données, ou ne contient pas de valeur que l’extension de balisage est capable de traiter. Exception à lever recommandée est <see cref="T:System.InvalidOperationException" />.</para>
        </block>
        <altmember cref="T:System.Windows.Markup.IProvideValueTarget" />
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
      </Docs>
    </Member>
  </Members>
</Type>