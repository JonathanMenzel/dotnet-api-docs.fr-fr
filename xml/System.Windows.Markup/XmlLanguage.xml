<Type Name="XmlLanguage" FullName="System.Windows.Markup.XmlLanguage">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0320f263546c28580cc2fb0b15509e7f6ca86aa8" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51933663" /></Metadata><TypeSignature Language="C#" Value="public class XmlLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguage" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguage" />
  <TypeSignature Language="F#" Value="type XmlLanguage = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.XmlLanguageConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente une balise de langue à utiliser dans le balisage XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La balise de langue peut ou ne peut pas avoir inscrit <xref:System.Globalization.CultureInfo> présents sur le système où le XAML est interprété.  
  
 Cette classe est utile pour traiter les valeurs représentées à l’aide `xml:lang` dans XML.  
  
 Balises de langue peuvent être spécifiés sous forme de deux caractères ou sous forme de paramètres régionaux de langue contenant des tirets. Consultez [RFC 3066](https://go.microsoft.com/fwlink/?LinkId=132454).  
  
 Notez que la spécification XML permet à la chaîne vide pour `xml:lang`, bien que cela n’est pas autorisé par la norme RFC 3066 ; par conséquent, le <xref:System.Windows.Markup.XmlLanguage> tapez autorise « » (chaîne d’attribut vide). Construit un par défaut <xref:System.Windows.Markup.XmlLanguage> se comporte comme si construit avec « » (chaîne vide).  
  
<a name="xamlAttributeUsage_XmlLanguage"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object property="prefix"/>  
- or -  
<object property="prefix-subcode"/>  
```  
  
<a name="xamlValues_XmlLanguage"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *Préfixe*  
 Préfixe de langage, en utilisant les valeurs de préfixe ISO 639-1 langage. Par exemple « fr » ou « zh ». Les majuscules sont acceptés et convertis en minuscules. Cela peut également être un attribut vide, « ».  
  
 *subcode*  
 S’il est fourni, doit être précédé d’un seul trait d’union. Ensuite, un sous-code comme défini par RFC 3066. L’utilisation la plus courante et celui qui est plus probable mapper correctement à un <xref:System.Globalization.CultureInfo>, est un pays ou une désignation régionale telles que «-nous » ou «-hk ». Les majuscules sont acceptés et convertis en minuscules.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XmlLanguage Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XmlLanguage ^ Empty { System::Windows::Markup::XmlLanguage ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.Markup.XmlLanguage" Usage="System.Windows.Markup.XmlLanguage.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une instance <see cref="T:System.Windows.Markup.XmlLanguage" /> statique comme celle créée par <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> avec pour balise de langue une chaîne d'attributs vide.</summary>
        <value>Version balise de langue vide de <see cref="T:System.Windows.Markup.XmlLanguage" />, pour une utilisation dans des opérations de comparaison.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette valeur est en vigueur le <xref:System.Windows.Markup.XmlLanguage> correspondant à <xref:System.String.Empty?displayProperty=nameWithType>, dont <xref:System.Windows.Markup.XmlLanguage.GetEquivalentCulture%2A> résultat est <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEquivalentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetEquivalentCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetEquivalentCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEquivalentCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetEquivalentCulture();" />
      <MemberSignature Language="F#" Value="member this.GetEquivalentCulture : unit -&gt; System.Globalization.CultureInfo" Usage="xmlLanguage.GetEquivalentCulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le <see cref="T:System.Globalization.CultureInfo" /> équivalent approprié à <see cref="T:System.Windows.Markup.XmlLanguage" />, si et seulement si un tel <see cref="T:System.Globalization.CultureInfo" /> est inscrit pour la valeur <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> de ce <see cref="T:System.Windows.Markup.XmlLanguage" /></summary>
        <returns><see cref="T:System.Globalization.CultureInfo" /> pouvant être utilisées pour les appels d'API de localisation-globalisation qui prennent ce type comme argument.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si aucun équivalent <xref:System.Globalization.CultureInfo> peut être générée, cette méthode lève une exception. Si vous ne souhaitez pas gérer les exceptions, appelez <xref:System.Windows.Markup.XmlLanguage.GetSpecificCulture%2A> à la place.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Aucun <see cref="T:System.Globalization.CultureInfo" /> inscrit n'existe pour le <see cref="T:System.Windows.Markup.XmlLanguage" /> fourni, comme déterminé par un appel à <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />.</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage GetLanguage (string ietfLanguageTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguage (ietfLanguageTag As String) As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::XmlLanguage ^ GetLanguage(System::String ^ ietfLanguageTag);" />
      <MemberSignature Language="F#" Value="static member GetLanguage : string -&gt; System.Windows.Markup.XmlLanguage" Usage="System.Windows.Markup.XmlLanguage.GetLanguage ietfLanguageTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ietfLanguageTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ietfLanguageTag">Chaîne de langue RFC 3066 ou chaîne vide.</param>
        <summary>Retourne une instance <see cref="T:System.Windows.Markup.XmlLanguage" />, basée sur une chaîne représentant la langue selon la norme RFC 3066.</summary>
        <returns>Nouveau <see cref="T:System.Windows.Markup.XmlLanguage" /> avec, pour valeur <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />, la chaîne fournie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est effectivement le constructeur.  
  
 La chaîne de langue peut être vide, ou bien doit être conforme à [RFC 3066](https://go.microsoft.com/fwlink/?LinkId=132454) règles :  
  
-   La première sous-balise doit contenir uniquement des [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] des lettres.  
  
-   Sous-balises supplémentaires doivent être composées [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] lettres ou des chiffres.  
  
-   Sous-balises sont séparées par un caractère de trait d’union unique.  
  
-   Sous-balise doit être de 1 à 8 caractères.  
  
-   Aucun des traits d’union ou de fin ne sont autorisés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="ietfLanguageTag" /> ne peut pas avoir la valeur null.</exception>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="ietfLanguageTag" /> n'était pas vide, mais n'était pas conforme à la syntaxe spécifiée par RFC 3066.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpecificCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetSpecificCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetSpecificCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecificCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetSpecificCulture();" />
      <MemberSignature Language="F#" Value="member this.GetSpecificCulture : unit -&gt; System.Globalization.CultureInfo" Usage="xmlLanguage.GetSpecificCulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le <see cref="T:System.Globalization.CultureInfo" /> non neutre le plus en rapport avec ce <see cref="T:System.Windows.Markup.XmlLanguage" />.</summary>
        <returns><see cref="T:System.Globalization.CultureInfo" /> pouvant être utilisées pour les appels d'[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] de localisation-globalisation qui prennent ce type comme argument.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cette <xref:System.Windows.Markup.XmlLanguage> est égal à <xref:System.Windows.Markup.XmlLanguage.Empty%2A?displayProperty=nameWithType> , cette méthode retourne <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 Cette méthode recherche inscrit <xref:System.Globalization.CultureInfo> mise en correspondance le préfixe le plus long possible de ce <xref:System.Windows.Markup.XmlLanguage>. Si qui inscrit <xref:System.Globalization.CultureInfo> est neutre (<xref:System.Globalization.CultureInfo.IsNeutralCulture%2A> est `true`), cette méthode s’appuie sur un appel à <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> à mapper à partir de neutre <xref:System.Globalization.CultureInfo> à une valeur spécifique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Aucun <see cref="T:System.Globalization.CultureInfo" /> non neutre associé n'est inscrit pour le <see cref="T:System.Windows.Markup.XmlLanguage" /><see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> actuel.</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la représentation sous forme de chaîne de la balise de langue.</summary>
        <value>Représentation sous forme de chaîne de la balise de langue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété peut retourner une version normalisée de la chaîne spécifiée à l’origine fournie à <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 Cette propriété peut également retourner <xref:System.String.Empty> si une chaîne vide a été fournie pour <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xmlLanguage.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une <see cref="T:System.String" /> qui représente l'<see cref="T:System.Windows.Markup.XmlLanguage" /> actuel.</summary>
        <returns><see cref="T:System.String" /> qui représente le <see cref="T:System.Windows.Markup.XmlLanguage" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette commande renvoie le <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A> valeur de la <xref:System.Windows.Markup.XmlLanguage>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>