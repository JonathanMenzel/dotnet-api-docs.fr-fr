<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1ae350a552fc26c4cf919e3c7ddd4041a5f79898" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502830" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <TypeSignature Language="F#" Value="type INameScope = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8b0a8-101">Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8b0a8-101">Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b0a8-102">Cette interface est implémentée par les classes qui ont des éléments enfants qui sont destinés à être réutilisés via le modèle ou la métaphore.</span><span class="sxs-lookup"><span data-stu-id="8b0a8-102">This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor.</span></span> <span data-ttu-id="8b0a8-103">Modèles, les fabriques et les constructions similaires doivent avoir des portées de nom XAML uniques qui sont séparés à partir d’un graphique d’objet principal et du XML racine.</span><span class="sxs-lookup"><span data-stu-id="8b0a8-103">Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML.</span></span> <span data-ttu-id="8b0a8-104">Le principe ici est qu’il ne doit y avoir aucune collisions de noms lorsque les objets créés à partir de ces éléments enfants sont présentés dans le graphique d’objet d’une application et afin que les opérations DOM et les techniques de référence XAML qui reposent sur l’identificateur de nom peuvent compter sur le nom unicité dans chaque portée de nom XAML.</span><span class="sxs-lookup"><span data-stu-id="8b0a8-104">The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.</span></span>  
  
 <span data-ttu-id="8b0a8-105">Dans les versions précédentes du .NET Framework, cette interface existait dans l’assembly WindowsBase spécifique de WPF.</span><span class="sxs-lookup"><span data-stu-id="8b0a8-105">In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="8b0a8-106">Dans [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> est dans l’assembly System.Xaml.</span><span class="sxs-lookup"><span data-stu-id="8b0a8-106">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly.</span></span> <span data-ttu-id="8b0a8-107">Pour plus d’informations, consultez [Types migrés de WPF vers System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="8b0a8-107">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="8b0a8-108">Notes d’utilisation WPF</span><span class="sxs-lookup"><span data-stu-id="8b0a8-108">WPF Usage Notes</span></span>  
 <span data-ttu-id="8b0a8-109">Cette interface est implémentée par la classe WPF <xref:System.Windows.NameScope>.</span><span class="sxs-lookup"><span data-stu-id="8b0a8-109">This interface is implemented by the WPF class <xref:System.Windows.NameScope>.</span></span> <span data-ttu-id="8b0a8-110">La plupart des opérations de portée de nom XAML dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] fonctionner en utilisant <xref:System.Windows.NameScope> instances, mais les informations sont parfois communiquées en interne à l’aide de <xref:System.Windows.Markup.INameScope> références.</span><span class="sxs-lookup"><span data-stu-id="8b0a8-110">Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references.</span></span>  
  
 <span data-ttu-id="8b0a8-111">Exemples de classes WPF qui utilisent une fabrique ou métaphore combinée avec la représentation XAML <xref:System.Windows.Style> et <xref:System.Windows.FrameworkTemplate>.</span><span class="sxs-lookup"><span data-stu-id="8b0a8-111">Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>.</span></span> <span data-ttu-id="8b0a8-112">Ces implémentations reposent généralement sur les versions explicites des méthodes d’interface disponibles à partir de la <xref:System.Windows.NameScope> classe.</span><span class="sxs-lookup"><span data-stu-id="8b0a8-112">These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member FindName : string -&gt; obj" Usage="iNameScope.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8b0a8-113">The name identifier for the object being requested.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b0a8-113">The name identifier for the object being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b0a8-114">Returns an object that has the provided identifying name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b0a8-114">Returns an object that has the provided identifying name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b0a8-115">The object, if found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b0a8-115">The object, if found.</span>
          </span>
          <span data-ttu-id="8b0a8-116">Returns <see langword="null" /> if no object of that name was found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b0a8-116">Returns <see langword="null" /> if no object of that name was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b0a8-117">Chaînes de nom valides dans le balisage XAML doivent correspondre à la configuration requise décrite dans [XamlName, grammaire](~/docs/framework/xaml-services/xamlname-grammar.md).</span><span class="sxs-lookup"><span data-stu-id="8b0a8-117">Valid name strings in XAML markup must match the requirements documented in [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit" Usage="iNameScope.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8b0a8-118">The name to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b0a8-118">The name to register.</span>
          </span>
        </param>
        <param name="scopedElement">
          <span data-ttu-id="8b0a8-119">The specific element that the provided <c>name</c> refers to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b0a8-119">The specific element that the provided <c>name</c> refers to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b0a8-120">Registers the provided name into the current XAML namescope.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b0a8-120">Registers the provided name into the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b0a8-121">Les noms en double dans une portée de nom XAML ne sont pas autorisées.</span><span class="sxs-lookup"><span data-stu-id="8b0a8-121">Duplicate names in a XAML namescope are not permitted.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="8b0a8-122">
            <para>N’autorisent pas l’inscription de noms en double. Si l’entrée <paramref name="name" /> est déjà affecté à un élément existant dans la représentation sous forme de collection interne de la portée de nom XAML (même si elle est identique à <paramref name="scopedElement" />), une exception.  Envisagez également de lever une exception si le nom fourni n’est pas conforme à [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8b0a8-122">
              <para>Do not permit duplicate names to be registered. If the input <paramref name="name" /> is already assigned to an existing element in the internal collection representation of the XAML namescope (even if it is the same as <paramref name="scopedElement" />), throw an exception.  Also consider throwing an exception if the provided name does not conform to [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit" Usage="iNameScope.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8b0a8-123">The name to unregister.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b0a8-123">The name to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b0a8-124">Unregisters the provided name from the current XAML namescope.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b0a8-124">Unregisters the provided name from the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="8b0a8-125">
            <para>Si le nom d’entrée n’existe pas, une exception.  Vous devez supprimer le nom et l’élément précédemment inscrit, qu'il fait référence à la représentation sous forme de collection de la portée de nom XAML, afin que le même nom peut potentiellement être inscrit à nouveau à l’avenir.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8b0a8-125">
              <para>If the input name does not exist, throw an exception.  You should remove the name and the previously registered element it refers to from the collection representation of the XAML namescope, so that the same name could potentially be registered again in the future.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>