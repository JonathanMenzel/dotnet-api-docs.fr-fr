<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1ae350a552fc26c4cf919e3c7ddd4041a5f79898" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502830" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <TypeSignature Language="F#" Value="type INameScope = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette interface est implémentée par les classes qui ont des éléments enfants qui sont destinés à être réutilisés via le modèle ou la métaphore. Modèles, les fabriques et les constructions similaires doivent avoir des portées de nom XAML uniques qui sont séparés à partir d’un graphique d’objet principal et du XML racine. Le principe ici est qu’il ne doit y avoir aucune collisions de noms lorsque les objets créés à partir de ces éléments enfants sont présentés dans le graphique d’objet d’une application et afin que les opérations DOM et les techniques de référence XAML qui reposent sur l’identificateur de nom peuvent compter sur le nom unicité dans chaque portée de nom XAML.  
  
 Dans les versions précédentes du .NET Framework, cette interface existait dans l’assembly WindowsBase spécifique de WPF. Dans [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> est dans l’assembly System.Xaml. Pour plus d’informations, consultez [Types migrés de WPF vers System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
## <a name="wpf-usage-notes"></a>Notes d’utilisation WPF  
 Cette interface est implémentée par la classe WPF <xref:System.Windows.NameScope>. La plupart des opérations de portée de nom XAML dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] fonctionner en utilisant <xref:System.Windows.NameScope> instances, mais les informations sont parfois communiquées en interne à l’aide de <xref:System.Windows.Markup.INameScope> références.  
  
 Exemples de classes WPF qui utilisent une fabrique ou métaphore combinée avec la représentation XAML <xref:System.Windows.Style> et <xref:System.Windows.FrameworkTemplate>. Ces implémentations reposent généralement sur les versions explicites des méthodes d’interface disponibles à partir de la <xref:System.Windows.NameScope> classe.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member FindName : string -&gt; obj" Usage="iNameScope.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name identifier for the object being requested.</param>
        <summary>Returns an object that has the provided identifying name.</summary>
        <returns>The object, if found. Returns <see langword="null" /> if no object of that name was found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaînes de nom valides dans le balisage XAML doivent correspondre à la configuration requise décrite dans [XamlName, grammaire](~/docs/framework/xaml-services/xamlname-grammar.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit" Usage="iNameScope.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">The name to register.</param>
        <param name="scopedElement">The specific element that the provided <c>name</c> refers to.</param>
        <summary>Registers the provided name into the current XAML namescope.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les noms en double dans une portée de nom XAML ne sont pas autorisées.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>N’autorisent pas l’inscription de noms en double. Si l’entrée <paramref name="name" /> est déjà affecté à un élément existant dans la représentation sous forme de collection interne de la portée de nom XAML (même si elle est identique à <paramref name="scopedElement" />), une exception.  Envisagez également de lever une exception si le nom fourni n’est pas conforme à [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit" Usage="iNameScope.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name to unregister.</param>
        <summary>Unregisters the provided name from the current XAML namescope.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Si le nom d’entrée n’existe pas, une exception.  Vous devez supprimer le nom et l’élément précédemment inscrit, qu'il fait référence à la représentation sous forme de collection de la portée de nom XAML, afin que le même nom peut potentiellement être inscrit à nouveau à l’avenir.</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>