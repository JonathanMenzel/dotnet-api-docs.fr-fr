<Type Name="IReceiveMarkupExtension" FullName="System.Windows.Markup.IReceiveMarkupExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6fb09fe5cc8a4724ed66485bbee00bd70974cc2d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37560026" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IReceiveMarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReceiveMarkupExtension" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IReceiveMarkupExtension" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReceiveMarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public interface class IReceiveMarkupExtension" />
  <TypeSignature Language="F#" Value="type IReceiveMarkupExtension = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("IReceiveMarkupExtension has been deprecated. This interface is no longer in use.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a mechanism whereby types can declare that they can receive an expression (or another class) from a markup extension, where the output is a different property type than the target property. Do not use for .NET Framework 4 implementations.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)], <xref:System.Windows.Markup.IReceiveMarkupExtension> était une technique spécifique au WPF pour autoriser les types à entrer un chemin de code autre que l’un de ses membres accessibles par XAML définis en tant qu’extensions de balisage pendant l’analyse XAML. Dans [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], cette interface est obsolète et est remplacée par une implémentation de Services XAML du .NET Framework pour la façon dont les extensions de balisage peuvent recevoir les services ou les types peuvent appeler la logique de setter spécifique d’extension de balisage.  
  
 Pour [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] implémentations, si les types qu’effectuer un traitement spécial lors de la définition des propriétés par extension de balisage plutôt que par d’autres moyens, les types doivent être définis avec <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute> attributs appliqués. L’attribut spécifie un rappel, qui est généralement défini comme un membre privé du type.  
  
 Dans les implémentations d’infrastructure de classes WPF, la plupart des cas où <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute> est appliqué référence un `ReceiveMarkupExtension` méthode qui précédemment a implémenté cette interface, mais désormais à la place utiliser contexte via le rappel.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" />
    <altmember cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveMarkupExtension">
      <MemberSignature Language="C#" Value="public void ReceiveMarkupExtension (string property, System.Windows.Markup.MarkupExtension markupExtension, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReceiveMarkupExtension(string property, class System.Windows.Markup.MarkupExtension markupExtension, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReceiveMarkupExtension(System::String ^ property, System::Windows::Markup::MarkupExtension ^ markupExtension, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveMarkupExtension : string * System.Windows.Markup.MarkupExtension * IServiceProvider -&gt; unit" Usage="iReceiveMarkupExtension.ReceiveMarkupExtension (property, markupExtension, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
        <Parameter Name="markupExtension" Type="System.Windows.Markup.MarkupExtension" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="property">The name of the target property.</param>
        <param name="markupExtension">The markup extension instance of the incoming data.</param>
        <param name="serviceProvider">Can provide additional services that should be performed when processing the markup extension data for a property value.</param>
        <summary>Provides the handling for markup extensions that provide property values. Do not use for [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementations; see <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>