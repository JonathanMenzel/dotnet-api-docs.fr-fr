<Type Name="XamlTypeMapper" FullName="System.Windows.Markup.XamlTypeMapper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ffe8cd8c3d949bd8aa5a4b94e2fc6d573d4926e7" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36501621" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeMapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeMapper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlTypeMapper" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeMapper" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeMapper" />
  <TypeSignature Language="F#" Value="type XamlTypeMapper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Maps a XAML element name to the appropriate CLR <see cref="T:System.Type" /> in assemblies.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlTypeMapper> fait partie d’un scénario WPF avancé qui fournit un autre contexte pour <xref:System.Windows.Markup.XamlReader> et <xref:System.Windows.Markup.XamlWriter>. Pour [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] les applications WPF, vous devez envisager de substituer <xref:System.Xaml.XamlSchemaContext> pour ce scénario, au lieu d’une tentative d’utilisation <xref:System.Windows.Markup.XamlTypeMapper>.  
  
 <xref:System.Windows.Markup.XamlTypeMapper> peut être utilisé pour fournir à l’analyseur XAML des informations de mappage personnalisé via une technique plus directe que l’application de <xref:System.Windows.Markup.XmlnsDefinitionAttribute> valeurs sur le code de l’assembly. Cela peut être utile pour la consolidation de tous les espaces de noms CLR dans un assembly, ou pour le référencement des types compatibles XAML dans un assembly existant sans devoir le recompiler uniquement pour ajouter <xref:System.Windows.Markup.XmlnsDefinitionAttribute> attribution.  
  
 En général, vous créez un <xref:System.Windows.Markup.XamlTypeMapper> instance afin de spécifier le <xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A> valeur de propriété pour un <xref:System.Windows.Markup.ParserContext>. Le <xref:System.Windows.Markup.ParserContext> à son tour peut être utilisé comme contexte pour un <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=nameWithType> appeler.  
  
## <a name="default-mapper"></a>Mappeur par défaut  
 Vous pouvez obtenir un mappeur par défaut à l’aide de la <xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A> propriété statique. Le mappeur par défaut fonctionne uniquement sur une liste des assemblys par défaut. Aucune information spécifique sur les assemblys (comme spécifié dans <xref:System.Windows.Markup.XamlTypeMapper> constructeurs) est utilisé.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.NamespaceMapEntry" />
    <altmember cref="T:System.Windows.Markup.ParserContext" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlTypeMapper" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeMapper (string[] assemblyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeMapper(cli::array &lt;System::String ^&gt; ^ assemblyNames);" />
      <MemberSignature Language="F#" Value="new System.Windows.Markup.XamlTypeMapper : string[] -&gt; System.Windows.Markup.XamlTypeMapper" Usage="new System.Windows.Markup.XamlTypeMapper assemblyNames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">The array of assembly names the <see cref="T:System.Windows.Markup.XamlTypeMapper" /> should use.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlTypeMapper" /> class by specifying an array of assembly names that the <see cref="T:System.Windows.Markup.XamlTypeMapper" /> should use.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyNames" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeMapper (string[] assemblyNames, System.Windows.Markup.NamespaceMapEntry[] namespaceMaps);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames, class System.Windows.Markup.NamespaceMapEntry[] namespaceMaps) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.#ctor(System.String[],System.Windows.Markup.NamespaceMapEntry[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String(), namespaceMaps As NamespaceMapEntry())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeMapper(cli::array &lt;System::String ^&gt; ^ assemblyNames, cli::array &lt;System::Windows::Markup::NamespaceMapEntry ^&gt; ^ namespaceMaps);" />
      <MemberSignature Language="F#" Value="new System.Windows.Markup.XamlTypeMapper : string[] * System.Windows.Markup.NamespaceMapEntry[] -&gt; System.Windows.Markup.XamlTypeMapper" Usage="new System.Windows.Markup.XamlTypeMapper (assemblyNames, namespaceMaps)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
        <Parameter Name="namespaceMaps" Type="System.Windows.Markup.NamespaceMapEntry[]" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">The array of assembly names the <see cref="T:System.Windows.Markup.XamlTypeMapper" /> should use.</param>
        <param name="namespaceMaps">The array of namespace maps the <see cref="T:System.Windows.Markup.XamlTypeMapper" /> should use.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlTypeMapper" /> class, using the specified array of assembly names and the specified namespace maps.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyNames" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMappingProcessingInstruction">
      <MemberSignature Language="C#" Value="public void AddMappingProcessingInstruction (string xmlNamespace, string clrNamespace, string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMappingProcessingInstruction(string xmlNamespace, string clrNamespace, string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMappingProcessingInstruction (xmlNamespace As String, clrNamespace As String, assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMappingProcessingInstruction(System::String ^ xmlNamespace, System::String ^ clrNamespace, System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.AddMappingProcessingInstruction : string * string * string -&gt; unit" Usage="xamlTypeMapper.AddMappingProcessingInstruction (xmlNamespace, clrNamespace, assemblyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlNamespace" Type="System.String" />
        <Parameter Name="clrNamespace" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlNamespace">The prefix for the XML namespace..</param>
        <param name="clrNamespace">The CLR  namespace that contains the types to map.</param>
        <param name="assemblyName">The assembly that contains the CLR  namespace.</param>
        <summary>Defines a mapping between an XML namespace and CLR namespaces in assemblies, and adds these to the <see cref="T:System.Windows.Markup.XamlTypeMapper" /> information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction%2A> est un moyen de programmation pour ajouter un mappage.  Par exemple, les différentes parties de l’instruction de mappage XAML suivante correspondent aux paramètres de la <xref:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction%2A>:  
  
```  
<Window xmlns:SDK="clr-namespace:Samples;assembly=SDKSamples">  
...  
```  
  
 Le `xmlNamespace` est `SDK`, le `clrNamespace` est `Samples`et le `assemblyName` est `SDKSamples`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlNamespace" /> is <see langword="null" />  -or-  <paramref name="clrNamespace" /> is <see langword="null" />  -or-  <paramref name="assemblyName" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowInternalType">
      <MemberSignature Language="C#" Value="protected virtual bool AllowInternalType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AllowInternalType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.AllowInternalType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool AllowInternalType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member AllowInternalType : Type -&gt; bool&#xA;override this.AllowInternalType : Type -&gt; bool" Usage="xamlTypeMapper.AllowInternalType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type to access.</param>
        <summary>Requests permission for a <see cref="T:System.Windows.Markup.XamlTypeMapper" /> derived type that is called under full trust to access a specific internal type.</summary>
        <returns>
          <see langword="true" /> if the internal type can be accessed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si non substitution par une sous-classe, <xref:System.Windows.Markup.XamlTypeMapper.AllowInternalType%2A> retourne toujours `false`.  
  
 En cas de substitution par une sous-classe, le comportement doit être <xref:System.Windows.Markup.XamlTypeMapper.AllowInternalType%2A> doit retourner `true` si le type interne peut être accessible ; sinon, `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMapper">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XamlTypeMapper DefaultMapper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XamlTypeMapper DefaultMapper" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XamlTypeMapper.DefaultMapper" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultMapper As XamlTypeMapper" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XamlTypeMapper ^ DefaultMapper { System::Windows::Markup::XamlTypeMapper ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMapper : System.Windows.Markup.XamlTypeMapper" Usage="System.Windows.Markup.XamlTypeMapper.DefaultMapper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XamlTypeMapper</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an instance of the <see cref="T:System.Windows.Markup.XamlTypeMapper" /> to use if one has not been specified.</summary>
        <value>Le mappeur de type par défaut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le mappeur par défaut fonctionne uniquement sur une liste des assemblys par défaut. Aucune information spécifique sur les assemblys (comme spécifié dans <xref:System.Windows.Markup.XamlTypeMapper> constructeurs) est utilisé. Dans l’implémentation actuelle, la liste des assemblys par défaut est : `WindowsBase`, `PresentationCore`, `PresentationFramework`.  
  
 À l’aide du mappeur par défaut ne signifie pas que vous ne pouvez pas utiliser des assemblys/types personnalisés en XAML tout. Cela signifie simplement que si vous utilisez des types/assemblys personnalisés, vous devez ensuite utiliser la technique XAML classique de création des mappages en tant que `xmlns` attributs dans chaque page XAML où les types/assemblys sont référencés, par opposition à une API de mappage de type. Pour plus d’informations, consultez [espaces de noms XAML et Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType (string xmlNamespace, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType(string xmlNamespace, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.GetType(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType (xmlNamespace As String, localName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType(System::String ^ xmlNamespace, System::String ^ localName);" />
      <MemberSignature Language="F#" Value="override this.GetType : string * string -&gt; Type" Usage="xamlTypeMapper.GetType (xmlNamespace, localName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlNamespace" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlNamespace">The specified XML namespace prefix.</param>
        <param name="localName">The "local" name of the XAML element to obtain the mapped <see cref="T:System.Type" /> for. Local in this context means as mapped versus the provided <c>xmlNamespace</c>.</param>
        <summary>Gets the CLR <see cref="T:System.Type" /> that a given XAML element is mapped to, using the specified XML namespace prefix and element name.</summary>
        <returns>The <see cref="T:System.Type" /> for the object, or <see langword="null" /> if no mapping could be resolved.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si un type ne peut pas être trouvé qui mappe vers les informations fournies, `null` est retourné.  
  
 N’incluez pas le préfixe dans le cadre de `localName`. Pour les informations sur l’élément XAML le préfixe, séparez dans `xmlNamespace` et `localName` composants pour cet appel d’API.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlNamespace" /> is <see langword="null" />  -or-  <paramref name="localName" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
      </Docs>
    </Member>
    <Member MemberName="SetAssemblyPath">
      <MemberSignature Language="C#" Value="public void SetAssemblyPath (string assemblyName, string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAssemblyPath(string assemblyName, string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.SetAssemblyPath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAssemblyPath (assemblyName As String, assemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAssemblyPath(System::String ^ assemblyName, System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.SetAssemblyPath : string * string -&gt; unit" Usage="xamlTypeMapper.SetAssemblyPath (assemblyName, assemblyPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">The short name of the assembly without an extension or path specified (equivalent to <see cref="P:System.Reflection.AssemblyName.Name" />).</param>
        <param name="assemblyPath">The file path of the assembly. The assembly path must be a full file path containing a file extension.</param>
        <summary>Specifies the path to use when loading an assembly.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyName" /> is <see langword="null" />  -or-  <paramref name="assemblyPath" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Windows.Markup.XamlParseException">
          <paramref name="assemblyName" /> is <see cref="F:System.String.Empty" />  -or-  <paramref name="assemblyPath" /> is <see cref="F:System.String.Empty" />  -or-  <paramref name="assemblyPath" /> is not a full file path containing a file extension.</exception>
      </Docs>
    </Member>
  </Members>
</Type>