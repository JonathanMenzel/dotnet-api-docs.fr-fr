<Type Name="TypeExtension" FullName="System.Windows.Markup.TypeExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="61ac1224d62662355e58bc4a47a46fdf9e214201" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658123" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TypeExtension : System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeExtension extends System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.TypeExtension" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeExtension&#xA;Inherits MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeExtension : System::Windows::Markup::MarkupExtension" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Markup.MarkupExtension</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.TypeExtensionConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.MarkupExtensionReturnType(typeof(System.Type))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implémente une extension de balisage qui retourne un <see cref="T:System.Type" /> basé sur une entrée de chaîne.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] les informations d’utilisation, consultez [x : Type, Extension de balisage](~/docs/framework/xaml-services/x-type-markup-extension.md).  
  
> [!NOTE]
>  Le `{x:Type}` fonctionnalité est généralement utilisée pour appeler le code utilisateur à partir du balisage. Pour le code qui implémente la prise en charge XAML, les services de résolution de type proviennent <xref:System.Windows.Markup.IXamlTypeResolver> et sont liés à l’implémentation du contexte de schéma XAML. N’essayez pas de référence <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> pour remplacer un <xref:System.Windows.Markup.IXamlTypeResolver> fournisseur de services ; le contexte que vous passez n’est peut-être pas valide pour une résolution de type, et les tentatives d’appel sans services valides échoue.  
  
## <a name="wpf-usage-notes"></a>Remarques sur l'utilisation de WPF  
 Références de type sont utilisés pour les zones de fonctionnalité de style, de modèle et de liaison de données dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], lorsque ces fonctionnalités sont référencées par XAML.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Markup.TypeExtension" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.TypeExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Markup.TypeExtension" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeExtension (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.TypeExtension.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeExtension(System::String ^ typeName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">Chaîne qui identifie le type auquel faire référence. Cette chaîne utilise le format <c>préfixe:nom_classe</c>. <c>préfixe</c> est le préfixe de mappage pour un espace de noms XAML, nécessaire seulement pour référencer des types non mappés à l’espace de noms XAML par défaut.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Markup.TypeExtension" />, initialisant la valeur <see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> selon la chaîne <paramref name="typeName" /> fournie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette valeur n’est pas évaluée lorsque vous la définissez dans le constructeur. Si la valeur n’est pas `null`, la valeur sera acceptée initialement. L’analyse et l’évaluation de la valeur réelle est différée jusqu'à <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> est appelée sur cette extension, lorsque XAML est analysé et avec les contextes de service disponibles actifs. À ce stade le `typeName` est censé être résolu comme un type dans un contexte de schéma XAML et ce type est retournée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Tentative de spécification de <paramref name="typeName" /> comme <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeExtension (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeExtension(Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Le type à représenter par ce <see cref="T:System.Windows.Markup.TypeExtension" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Markup.TypeExtension" />, en déclarant directement le type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il s’agit d’une méthode d’assistance pour l’utilisation de code d’exécution de <xref:System.Windows.Markup.TypeExtension> et ne fait pas partie du modèle d’implémentation normal d’une extension de balisage.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public override object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Objet qui peut fournir des services pour l’extension de balisage. Le fournisseur est supposé fournir un service pour <see cref="T:System.Windows.Markup.IXamlTypeResolver" />.</param>
        <summary>Retourne un objet qui doit être défini sur la propriété où cette extension est appliquée. Pour <see cref="T:System.Windows.Markup.TypeExtension" />, il s'agit de la valeur <see cref="T:System.Type" /> comme évaluée pour le nom de type demandé.</summary>
        <returns>
          <see cref="T:System.Type" /> à définir sur la propriété où l'extension est appliquée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez passer `null` pour `serviceProvider`, mais uniquement si cette <xref:System.Windows.Markup.TypeExtension> instance a été établie avec un type réel initial dans le constructeur plutôt qu’un `typeName`. Sinon, cette implémentation d’extension de balisage s’appuie sur des services basés sur le passé `serviceProvider`. Il ne doit pas être `null`. Le `serviceProvider` est censé fournir un service pour <xref:System.Windows.Markup.IXamlTypeResolver>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          La valeur <paramref name="member" /> de l'extension est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Une partie de la chaîne <paramref name="typeName" /> n'est pas analysée correctement.  
  
 - ou -  
  
 <paramref name="serviceProvider" /> n'a pas fourni de service pour <see cref="T:System.Windows.Markup.IXamlTypeResolver" />  
  
 - ou -  
  
 La valeur <paramref name="typeName" /> n'est pas résolue en type.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceProvider" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.TypeExtension.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.ConstructorArgument("type")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les informations de type pour cette extension.</summary>
        <value>Type établi. À des fins d'exécution, elle peut avoir la valeur <see langword="null" /> pour l'obtention d'accès, mais la valeur <see langword="null" /> ne peut pas lui être attribuée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sauf si cette instance a été instanciée délibérément avec le <xref:System.Windows.Markup.TypeExtension.%23ctor%28System.Type%29> constructeur de signature, cette valeur sera `null`. Cette propriété ne sera pas réinitialisée lorsque <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> est appelée. Si vous souhaitez que le type réel représenté vous devez toujours appeler <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> plutôt que de vérifier cette propriété.  
  
 Cette propriété est définissable selon les règles habituelles concernant l’extension de balisage. Toutefois, si vous configurez avec un <xref:System.Type>, puis l’objectif de cette extension de balisage est sans importance, car le même <xref:System.Type> est retourné à partir d’un <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> appeler.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A tenté de définir à <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.TypeExtension.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du type représenté par cette extension de balisage.</summary>
        <value>Chaîne qui identifie le type. Cette chaîne utilise le format *préfixe*<c>:</c>*className*. (*préfixe* est le préfixe de mappage pour un espace de noms XML et est nécessaire uniquement pour les types qui ne sont pas mappées à l’espace de noms XML par défaut pour WPF référence ([!INCLUDE[TLA#tla_wpfxmlnsv1](~/includes/tlasharptla-wpfxmlnsv1-md.md)]).</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">A tenté de définir à <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>