<Type Name="SoapExtension" FullName="System.Web.Services.Protocols.SoapExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a0d9266b3dc5962906f3245b68c5dd22026399dd" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="58874370" /></Metadata><TypeSignature Language="C#" Value="public abstract class SoapExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SoapExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SoapExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapExtension abstract" />
  <TypeSignature Language="F#" Value="type SoapExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Classe de base pour les extensions SOAP destinées aux services Web XML créés à l'aide d'ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET permet à une infrastructure associés à SOAP doit être générée au moyen d’un mécanisme d’extensibilité. L’architecture de l’extension SOAP ASP.NET utilise une extension qui peut inspecter ou modifier un message à des étapes spécifiques sur le client ou le serveur de traitement des messages.  
  
 Les extensions SOAP ASP.NET sont dérivées de la <xref:System.Web.Services.Protocols.SoapExtension> classe. Le <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> et <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> méthodes fournissent d’autres mécanismes d’initialisation de l’extension SOAP pour améliorer les performances. <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> est le cœur de la plupart des extensions SOAP, comme la méthode est appelée à chaque étape définie dans <xref:System.Web.Services.Protocols.SoapMessageStage>, ce qui permet l’extension SOAP pour effectuer le comportement souhaité de cette extension SOAP spécifique. Pour les extensions SOAP qui doivent modifient la demande ou la réponse SOAP, <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> fournit une opportunité pour recevoir les données proposées d’être envoyées sur le câble.  
  
   
  
## Examples  
 Ce qui suit `TraceExtension` extension SOAP renvoie la demande SOAP et la réponse SOAP à un fichier spécifié lorsqu’il est appliqué à une méthode de service Web XML. Si l’extension SOAP suivante est installée pour s’exécuter avec un service Web XML, le compte d’utilisateur ASPNET doit avoir l’autorisation d’écrire dans le répertoire dans lequel le fichier journal est écrit.  
  
 [!code-cpp[Classic SoapExtension Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
    <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SoapExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SoapExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Services.Protocols.SoapExtension" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChainStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream ChainStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream ChainStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ ChainStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="abstract member ChainStream : System.IO.Stream -&gt; System.IO.Stream&#xA;override this.ChainStream : System.IO.Stream -&gt; System.IO.Stream" Usage="soapExtension.ChainStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Mémoire tampon contenant la demande ou réponse SOAP.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à une extension SOAP d'accéder à la mémoire tampon contenant la demande ou la réponse SOAP.</summary>
        <returns><see cref="T:System.IO.Stream" /> représentant une nouvelle mémoire tampon que cette extension SOAP peut modifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> garantit que les extensions SOAP avec la priorité la plus élevée peuvent modifier les données réelles plus proches du message SOAP envoyé ou retourné sur le câble.  
  
 Les extensions SOAP doivent enregistrer les références de le <xref:System.IO.Stream> passé dans <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> et le <xref:System.IO.Stream> retourné à partir de <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A>. Si l’extension SOAP est configurée pour s’exécuter avec une méthode de service Web XML, le <xref:System.IO.Stream> passé dans <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> contient la demande SOAP sérialisée à le <xref:System.Web.Services.Protocols.SoapMessageStage.BeforeDeserialize> <xref:System.Web.Services.Protocols.SoapMessageStage>. De même, le <xref:System.IO.Stream> référence retournée à partir de <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> est écrit dans lors de la sérialisation contient la réponse SOAP sérialisée dans le <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize> <xref:System.Web.Services.Protocols.SoapMessageStage>.  
  
   
  
## Examples  
 L’exemple suivant enregistre à la fois le <xref:System.IO.Stream> passé dans <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> et <xref:System.IO.Stream> retourné à partir de <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> dans les variables de membre `oldStream` et `newStream`, respectivement.  
  
 [!code-cpp[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializer">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, permet à une extension SOAP d'initialiser des données spécifiques à une méthode de service Web XML sans incidence sur les performances.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : Type -&gt; obj" Usage="soapExtension.GetInitializer serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Type de la classe d'implémentation du service Web XML auquel s'applique l'extension SOAP.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à une extension SOAP d'initialiser des données spécifiques à une classe implémentant un service Web XML sans incidence sur les performances.</summary>
        <returns><see cref="T:System.Object" /> que l'extension SOAP initialise pour la mise en cache.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La surcharge de <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> qui est appelée ASP.NET dépend de la façon dont l’extension SOAP a été spécifiée. Il existe deux méthodes pour spécifier une extension SOAP :  
  
-   Appliquer un attribut personnalisé, en dérivant de <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, à la méthode de service Web XML individuelle.  
  
-   Ajoutez une référence dans les fichiers de configuration web.config ou app.config.  
  
 Si vous ajoutez une référence à un des fichiers de configuration, l’extension SOAP s’exécute pour tous les services Web XML dans la portée de ce fichier de configuration. Lorsque vous spécifiez, une extension SOAP en référençant un fichier de configuration, ASP.NET appelle la <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> surcharge qui transmet un <xref:System.Type>. Lorsque vous spécifiez une extension en appliquant un attribut personnalisé, ASP.NET appelle la <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> qui réussit un <xref:System.Web.Services.Protocols.LogicalMethodInfo> et un <xref:System.Web.Services.Protocols.SoapExtensionAttribute>.  
  
 Pour plus d’informations sur l’ajout d’extensions SOAP à un fichier de configuration, consultez [Options de Configuration pour les Services Web XML créés à l’aide d’ASP.NET](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/b2c0ew36(v=vs.100)).  
  
   
  
## Examples  
 Le code suivant montre comment enregistrer les données spécifiques extension SOAP sur une base de service Web XML. Si l’extension SOAP est configurée à l’aide d’un fichier de configuration au lieu d’un attribut, l’extension SOAP peut stocker des données pour chaque classe à laquelle l’extension SOAP est appliquée. Cet exemple enregistre le nom d’un fichier dans lequel consigner les messages SOAP envoyés vers et à partir de la méthode de service Web XML basé sur le nom de la classe implémentant le service Web XML dans le cache. Cet exemple de code fait partie d’un exemple de code complet pour une extension SOAP TraceExtension qui se trouve dans le <xref:System.Web.Services.Protocols.SoapExtension> vue d’ensemble de la classe.  
  
 [!code-cpp[SoapExtension.GetInitializer-Type#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CPP/traceextension.cpp#1)]
 [!code-csharp[SoapExtension.GetInitializer-Type#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CS/traceextension.cs#1)]
 [!code-vb[SoapExtension.GetInitializer-Type#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/VB/traceextension.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo, System.Web.Services.Protocols.SoapExtensionAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Web.Services.Protocols.LogicalMethodInfo methodInfo, class System.Web.Services.Protocols.SoapExtensionAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (methodInfo As LogicalMethodInfo, attribute As SoapExtensionAttribute) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(System::Web::Services::Protocols::LogicalMethodInfo ^ methodInfo, System::Web::Services::Protocols::SoapExtensionAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : System.Web.Services.Protocols.LogicalMethodInfo * System.Web.Services.Protocols.SoapExtensionAttribute -&gt; obj" Usage="soapExtension.GetInitializer (methodInfo, attribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
        <Parameter Name="attribute" Type="System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Parameters>
      <Docs>
        <param name="methodInfo"><see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> représentant le prototype de fonction spécifique de la méthode de service Web XML à laquelle s'applique l'extension SOAP.</param>
        <param name="attribute"><see cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" /> appliqué à la méthode de service Web XML.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à une extension SOAP d'initialiser des données spécifiques à une méthode de service Web XML en appliquant un attribut à la méthode sans incidence sur les performances.</summary>
        <returns><see cref="T:System.Object" /> que l'extension SOAP initialise pour la mise en cache.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’extension SOAP est configurée à l’aide d’un fichier de configuration, consultez le <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> surcharge qui accepte un <xref:System.Type>.  
  
 Une extension SOAP a trois opportunités d’initialiser des données et elles ont toutes des objectifs différents :  
  
-   Constructeur de classe - le constructeur de classe est appelé chaque fois qu’une extension SOAP est instanciée et est généralement utilisée pour initialiser les variables de membre.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> - <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>, toutefois, est appelée qu’une fois, à savoir la première fois qu’une demande SOAP est faite à un serveur Web XML services (méthode). Si un attribut personnalisé est appliqué à la méthode de service Web XML, le <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> méthode est appelée. Cela permet l’extension SOAP pour interroger le <xref:System.Web.Services.Protocols.LogicalMethodInfo> d’une méthode de service Web XML pour les informations de prototype ou pour accéder aux données spécifiques à l’extension passées par une classe dérivant de <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. La valeur de retour est mis en cache par ASP.NET et passée dans suivantes <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> méthodes. Par conséquent, l’initialisation effectuée dans <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> est encapsulée dans une baisse des performances à usage unique.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> est appelée chaque fois qu’une demande SOAP est apportée à une méthode de service Web XML, mais a un avantage sur le constructeur de classe, qui le <xref:System.Object> initialisé dans <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> lui est passé.  
  
   
  
## Examples  
 Le code suivant montre comment vous pouvez obtenir les données spécifiques à l’extension SOAP passées à l’aide d’une classe qui dérive de <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, puis mettre en cache ces données dans <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>. Cet exemple de code fait partie d’un exemple de code complet pour un `TraceExtension` extension SOAP qui se trouve dans le <xref:System.Web.Services.Protocols.SoapExtension> vue d’ensemble de la classe. Cet exemple de code s’appuie sur un `TraceExtensionAttribute` passé dans le `attribute` paramètre. Dans l’exemple de code complet, `TraceExtensionAttribute` dérive <xref:System.Web.Services.Protocols.SoapExtensionAttribute> et ajoute un `Filename` propriété, c’est ce qui <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> stocke dans le cache.  
  
 [!code-cpp[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
        <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Initialize (initializer As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Initialize(System::Object ^ initializer);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : obj -&gt; unit" Usage="soapExtension.Initialize initializer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="initializer"><see cref="T:System.Object" /> retourné par <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" /> mis en cache par ASP.NET.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à une extension SOAP de s'auto-initialiser à l'aide des données mises en cache dans la méthode <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une extension SOAP a trois opportunités d’initialiser des données et elles ont toutes des objectifs différents :  
  
-   Constructeur de classe - le constructeur de classe est appelé chaque fois qu’une extension SOAP est instanciée et est généralement utilisée pour initialiser les variables de membre.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> - <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>, toutefois, est appelée qu’une fois, à savoir la première fois qu’une demande SOAP est faite à un serveur Web XML services (méthode). Si un attribut personnalisé est appliqué à la méthode de service Web XML, le <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> méthode est appelée. Cela permet l’extension SOAP pour interroger le <xref:System.Web.Services.Protocols.LogicalMethodInfo> d’une méthode de service Web XML pour les informations de prototype ou pour accéder aux données spécifiques à l’extension passées par une classe dérivant de <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. La valeur de retour est mis en cache par ASP.NET et passée dans suivantes <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> méthodes. Par conséquent, l’initialisation effectuée dans <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> est encapsulée dans une baisse des performances à usage unique.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> est appelée chaque fois qu’une demande SOAP est apportée à une méthode de service Web XML, mais a un avantage sur le constructeur de classe, qui le <xref:System.Object> initialisé dans <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> lui est passé.  
  
-  
  
> [!NOTE]
>  Vous pouvez également ajouter une extension SOAP sans dériver <xref:System.Web.Services.Protocols.SoapExtensionAttribute> à l’aide de la [ \<soapExtensionTypes > élément](https://msdn.microsoft.com/library/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) dans un fichier de configuration. Pour plus d’informations, consultez [ \<soapExtensionTypes > élément](https://msdn.microsoft.com/library/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) et [Extensions SOAP à l’aide de Modification de Message SOAP](https://msdn.microsoft.com/library/97d81ace-95e7-4acc-ae39-9692a0021e95).  
  
-  
  
   
  
## Examples  
 L’exemple suivant montre comment vous pouvez utiliser les données mises en cache pendant la <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> (méthode).  
  
 [!code-cpp[Classic SoapExtension.Initialize Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.Initialize Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.Initialize Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessMessage">
      <MemberSignature Language="C#" Value="public abstract void ProcessMessage (System.Web.Services.Protocols.SoapMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessMessage(class System.Web.Services.Protocols.SoapMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ProcessMessage (message As SoapMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ProcessMessage(System::Web::Services::Protocols::SoapMessage ^ message);" />
      <MemberSignature Language="F#" Value="abstract member ProcessMessage : System.Web.Services.Protocols.SoapMessage -&gt; unit" Usage="soapExtension.ProcessMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapMessage" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.Web.Services.Protocols.SoapMessage" /> à traiter.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à une extension SOAP de recevoir un <see cref="T:System.Web.Services.Protocols.SoapMessage" /> à traiter à chaque <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> est appelée à tout <xref:System.Web.Services.Protocols.SoapMessageStage> étapes pour les extensions SOAP appliquées aux deux services Web XML créés à l’aide d’ASP.NET et leurs clients. À chaque <xref:System.Web.Services.Protocols.SoapMessageStage>, une instance d’une classe dérivant de <xref:System.Web.Services.Protocols.SoapMessage> est passé à <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>. Si l’extension SOAP s’exécute sur le client du service Web XML, puis un <xref:System.Web.Services.Protocols.SoapClientMessage> objet est passé à <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>; sinon un <xref:System.Web.Services.Protocols.SoapServerMessage> objet est transmis.  
  
   
  
## Examples  
 L’exemple suivant est le <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> partie d’une extension SOAP qui enregistre les demandes SOAP et les réponses SOAP. En vous connectant le <xref:System.Web.Services.Protocols.SoapMessage> à la <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize> <xref:System.Web.Services.Protocols.SoapMessageStage>, l’extension SOAP accède au <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> à être envoyés sur le câble. Si l’extension SOAP est appliquée à une méthode de service Web XML créée à l’aide d’ASP.NET, puis le <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contient la réponse SOAP à partir de la méthode de service Web XML. Si l’extension SOAP est appliquée à un client de service Web XML, le <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contient la demande SOAP à une méthode de service Web XML.  
  
 Exemple de méthode SoapExtension.ProcessMessage classique n ° 1  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>