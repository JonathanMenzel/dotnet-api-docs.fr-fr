<Type Name="WebClientAsyncResult" FullName="System.Web.Services.Protocols.WebClientAsyncResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="15c05078fd0e3a62bbc4a025484ade659ff5b86b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebClientAsyncResult : IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebClientAsyncResult extends System.Object implements class System.IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.WebClientAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Class WebClientAsyncResult&#xA;Implements IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebClientAsyncResult : IAsyncResult" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="73afd-101">Fournit une implémentation de <see cref="T:System.IAsyncResult" /> à utiliser par les proxies de service Web XML pour implémenter le modèle de méthode asynchrone standard.</span>
      <span class="sxs-lookup">
        <span data-stu-id="73afd-101">Provides an implementation of <see cref="T:System.IAsyncResult" /> for use by XML Web service proxies to implement the standard asynchronous method pattern.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73afd-102">Lorsque vous appelez le `BeginMyMethodName` (méthode), où `MyMethodName` est la version synchrone de la méthode, sur une classe de proxy de service Web XML, une instance de la <xref:System.Web.Services.Protocols.WebClientAsyncResult> est retourné.</span><span class="sxs-lookup"><span data-stu-id="73afd-102">When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the <xref:System.Web.Services.Protocols.WebClientAsyncResult> is returned.</span></span> <span data-ttu-id="73afd-103">Selon le modèle de design asynchrone standard, cette instance de <xref:System.Web.Services.Protocols.WebClientAsyncResult> doit ensuite être passée à `EndMyMethodName` pour terminer l’appel de méthode asynchrone.</span><span class="sxs-lookup"><span data-stu-id="73afd-103">Following the standard asynchronous design pattern, that instance of <xref:System.Web.Services.Protocols.WebClientAsyncResult> must later be passed to `EndMyMethodName` to complete the asynchronous method call.</span></span>  
  
 <span data-ttu-id="73afd-104">Pour plus d’informations sur les appels asynchrones de services Web XML, consultez [ &#91; \<topic://cpconInvokingWebServicesAsynchronously >&#93;](http://msdn.microsoft.com/library/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).</span><span class="sxs-lookup"><span data-stu-id="73afd-104">For details on calling XML Web services asynchronously, see [&#91;\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/library/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IAsyncResult" />
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.WebClientAsyncResult.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="73afd-105">Annule une demande de service Web XML asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="73afd-105">Cancels an asynchronous XML Web service request.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="73afd-106">La demande de service Web XML est annulée si le transport sous-jacent prend en charge la <xref:System.Net.WebRequest.Abort%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="73afd-106">The XML Web service request is canceled if the underlying transport supports the <xref:System.Net.WebRequest.Abort%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="73afd-107">Si correspondant `End` méthode est appelée par la suite après le <xref:System.Web.Services.Protocols.WebClientAsyncResult.Abort%2A> (méthode), un <xref:System.Net.WebException> est levée et la <xref:System.Net.WebException.Status%2A> propriété <xref:System.Net.WebExceptionStatus.RequestCanceled>.</span><span class="sxs-lookup"><span data-stu-id="73afd-107">If the corresponding `End` method is subsequently called after the <xref:System.Web.Services.Protocols.WebClientAsyncResult.Abort%2A> method, a <xref:System.Net.WebException> is thrown, setting the <xref:System.Net.WebException.Status%2A> property to <xref:System.Net.WebExceptionStatus.RequestCanceled>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="73afd-108">Obtient l'objet fourni dans le dernier paramètre à l'appel asynchrone de la méthode <see langword="Begin" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="73afd-108">Gets the object provided in the last parameter to the <see langword="Begin" /> method asynchronous call.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="73afd-109">
            <see cref="T:System.Object" /> fourni dans le dernier paramètre à l'appel de la méthode <see langword="Begin" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="73afd-109">The <see cref="T:System.Object" /> provided in the last parameter to the <see langword="Begin" /> method call.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.IAsyncResult.AsyncState" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="73afd-110">Obtient un <see cref="T:System.Threading.WaitHandle" /> qui est utilisé pour attendre qu’une opération asynchrone se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="73afd-110">Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="73afd-111">
            <see cref="T:System.Threading.WaitHandle" /> utilisé pour attendre qu’une opération asynchrone se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="73afd-111">A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73afd-112">Le <xref:System.Threading.WaitHandle> peut être utilisé pour effectuer un <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, ou <xref:System.Threading.WaitHandle.WaitAll%2A> d’attente de l’appel asynchrone se termine.</span><span class="sxs-lookup"><span data-stu-id="73afd-112">The <xref:System.Threading.WaitHandle> can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> to wait for the asynchronous call to complete.</span></span>  
  
 <span data-ttu-id="73afd-113">Pour plus d'informations, consultez <xref:System.IAsyncResult.AsyncWaitHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="73afd-113">For more details, see <xref:System.IAsyncResult.AsyncWaitHandle%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IAsyncResult.AsyncWaitHandle" />
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="73afd-114">Obtient une valeur indiquant si l'appel Begin s'est terminé de manière synchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="73afd-114">Gets a value indicating whether the Begin call completed synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="73afd-115">
            <see langword="true" /> si l'appel Begin s'est terminé de manière synchrone ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="73afd-115">
              <see langword="true" /> if the Begin call completed synchronously; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73afd-116">Si <xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A> a la valeur `true` au sein de la <xref:System.AsyncCallback> délégué, il est probable que le thread qui a appelé <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> est le thread actuel.</span><span class="sxs-lookup"><span data-stu-id="73afd-116">If <xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A> is set to `true` within the <xref:System.AsyncCallback> delegate, it is probable that the thread that called <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> is the current thread.</span></span> <span data-ttu-id="73afd-117">Dans ce cas, vous devez être prudent lorsque vous rendre Begin asynchrone un autre appel de la méthode de rappel, car il risque d’entraîner la pile de croître sans lié si les appels de continuent à exécuter de façon synchrone.</span><span class="sxs-lookup"><span data-stu-id="73afd-117">In this case, you should be careful about making another asynchronous Begin call from the callback method, since it can cause the stack to grow without bound if the calls continue to complete synchronously.</span></span> <span data-ttu-id="73afd-118">Au lieu de cela, l’appel doit être effectué sur le site d’appel d’origine, en dehors de la méthode de rappel.</span><span class="sxs-lookup"><span data-stu-id="73afd-118">Instead, the call should be completed at the original call site, outside the callback method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="73afd-119">Obtient une valeur indiquant si la demande de service Web XML asynchrone s'est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="73afd-119">Gets a value indicating whether the asynchronous XML Web service request has completed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="73afd-120">
            <see langword="true" /> si la demande de service Web XML asynchrone s'est terminée ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="73afd-120">
              <see langword="true" /> if the asynchronous XML Web service request has completed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>