<Type Name="DataColumn" FullName="System.Data.DataColumn">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c319d3c600dc2e2da64f51a76ba9219295794b79" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30400173" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataColumn : System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataColumn extends System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataColumn" />
  <TypeSignature Language="VB.NET" Value="Public Class DataColumn&#xA;Inherits MarshalByValueComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataColumn : System::ComponentModel::MarshalByValueComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ColumnName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente le schéma d'une colonne dans un <see cref="T:System.Data.DataTable" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.DataColumn> est le bloc de construction fondamental pour la création du schéma d’un <xref:System.Data.DataTable>. Vous générez le schéma en ajoutant un ou plusieurs <xref:System.Data.DataColumn> des objets sur le <xref:System.Data.DataColumnCollection>. Pour plus d’informations, consultez [Ajout de colonnes à un DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md).  
  
 Chaque <xref:System.Data.DataColumn> a un <xref:System.Data.DataColumn.DataType%2A> propriété qui détermine le type de données le <xref:System.Data.DataColumn> contient. Par exemple, vous pouvez limiter le type de données à des entiers, chaînes ou des décimales. Étant donné que les données contenues par le <xref:System.Data.DataTable> est généralement fusionnée dans sa source de données d’origine, vous devez respecter les types de données à ceux de la source de données. Pour plus d’informations, consultez [des mappages de Type de données dans ADO.NET](~/docs/framework/data/adonet/data-type-mappings-in-ado-net.md).  
  
 Propriétés, telles que <xref:System.Data.DataColumn.AllowDBNull%2A>, <xref:System.Data.DataColumn.Unique%2A>, et <xref:System.Data.DataColumn.ReadOnly%2A> imposent des restrictions à l’entrée et la mise à jour de données, ce qui contribue à garantir l’intégrité des données. Vous pouvez également utiliser le <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, et <xref:System.Data.DataColumn.AutoIncrementStep%2A> propriétés pour contrôler la génération automatique des données. Pour plus d’informations sur <xref:System.Data.DataColumn.AutoIncrement%2A> des colonnes, consultez [Creating AutoIncrement Columns](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-autoincrement-columns.md). Pour plus d’informations, consultez [définition des clés primaires](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Peut également vous assurer que les valeurs d’un <xref:System.Data.DataColumn> sont uniques en créant un <xref:System.Data.UniqueConstraint> et en l’ajoutant à la <xref:System.Data.ConstraintCollection> de la <xref:System.Data.DataTable> auquel le <xref:System.Data.DataColumn> appartient. Pour plus d’informations, consultez [contraintes DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).  
  
 Pour créer une relation entre <xref:System.Data.DataColumn> créer des objets, un <xref:System.Data.DataRelation> de l’objet et l’ajouter à la <xref:System.Data.DataRelationCollection> d’un <xref:System.Data.DataSet>.  
  
 Vous pouvez utiliser la <xref:System.Data.DataColumn.Expression%2A> propriété de la <xref:System.Data.DataColumn> de l’objet pour calculer les valeurs dans une colonne, ou créer une colonne d’agrégation. Pour plus d’informations, consultez [création de colonnes d’Expression](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-expression-columns.md).  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Data.DataTable> avec plusieurs <xref:System.Data.DataColumn> objets.  
  
 [!code-csharp[Classic WebData DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ce type est sécurisé pour les opérations de lecture multithreads. Vous devez synchroniser des opérations d’écriture.</threadsafe>
    <altmember cref="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)" />
    <altmember cref="T:System.Data.DataColumnCollection" />
    <altmember cref="P:System.Data.DataTable.Constraints" />
    <altmember cref="T:System.Data.ConstraintCollection" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
    <altmember cref="T:System.Data.DataRow" />
    <altmember cref="T:System.Data.DataTable" />
    <altmember cref="T:System.Data.DataSet" />
    <altmember cref="M:System.Data.DataTable.NewRow" />
    <altmember cref="T:System.Data.DataRowCollection" />
    <altmember cref="T:System.Data.UniqueConstraint" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.DataColumn" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance d'une classe <see cref="T:System.Data.DataColumn" /> comme chaîne de type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lors de la création, un <xref:System.Data.DataColumn> objet ne possède aucune valeur par défaut <xref:System.Data.DataColumn.ColumnName%2A> ou <xref:System.Data.DataColumn.Caption%2A>. Lorsque vous ajoutez à un <xref:System.Data.DataColumnCollection>, un nom par défaut (« Column1 », « Column2 », etc.) sera généré si un nom n’a pas été affecté à la <xref:System.Data.DataColumn.ColumnName%2A>.  
  
   
  
## Examples  
 L’exemple suivant crée un nouveau <xref:System.Data.DataColumn>, définit différentes propriétés et l’ajoute à une <xref:System.Data.DataColumnCollection> pour la <xref:System.Data.DataTable> objet.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">Chaîne qui représente le nom de la colonne à créer. Si sa valeur est <see langword="null" /> ou une chaîne vide (""), un nom par défaut est spécifié lors de son ajout à la collection de colonnes.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.DataColumn" />, comme chaîne de type, à l'aide du nom de colonne spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, le nom spécifique à une colonne devient la <xref:System.Data.DataColumn.Caption%2A> valeur de propriété.  
  
   
  
## Examples  
 L’exemple suivant crée un nouveau <xref:System.Data.DataColumn> avec un objet <xref:System.Data.DataColumn.ColumnName%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="columnName">Chaîne qui représente le nom de la colonne à créer. Si sa valeur est <see langword="null" /> ou une chaîne vide (""), un nom par défaut est spécifié lors de son ajout à la collection de colonnes.</param>
        <param name="dataType">
          <see cref="P:System.Data.DataColumn.DataType" /> pris en charge.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.DataColumn" /> à l'aide du nom de colonne et du type de données spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée un nouveau <xref:System.Data.DataColumn> avec un <xref:System.Data.DataColumn.ColumnName%2A> et <xref:System.Data.DataColumn.DataType%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Aucun <paramref name="dataType" /> n'est spécifié.</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type, expr As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">Chaîne qui représente le nom de la colonne à créer. Si sa valeur est <see langword="null" /> ou une chaîne vide (""), un nom par défaut est spécifié lors de son ajout à la collection de colonnes.</param>
        <param name="dataType">
          <see cref="P:System.Data.DataColumn.DataType" /> pris en charge.</param>
        <param name="expr">Expression utilisée pour créer cette colonne. Pour plus d'informations, consultez la propriété <see cref="P:System.Data.DataColumn.Expression" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.DataColumn" /> à l'aide du nom, du type de données et de l'expression spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée une colonne calculée.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Aucun <paramref name="dataType" /> n'est spécifié.</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr, valuetype System.Data.MappingType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr, System::Data::MappingType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
        <Parameter Name="type" Type="System.Data.MappingType" />
      </Parameters>
      <Docs>
        <param name="columnName">Chaîne qui représente le nom de la colonne à créer. Si sa valeur est <see langword="null" /> ou une chaîne vide (""), un nom par défaut est spécifié lors de son ajout à la collection de colonnes.</param>
        <param name="dataType">
          <see cref="P:System.Data.DataColumn.DataType" /> pris en charge.</param>
        <param name="expr">Expression utilisée pour créer cette colonne. Pour plus d'informations, consultez la propriété <see cref="P:System.Data.DataColumn.Expression" />.</param>
        <param name="type">Une des valeurs de <see cref="T:System.Data.MappingType" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.DataColumn" /> à l'aide du nom, du type de données et de l'expression spécifiés, ainsi que d'une valeur qui détermine si la colonne est un attribut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `type` argument définit le <xref:System.Data.DataColumn.ColumnMapping%2A> propriété. La propriété spécifie comment un <xref:System.Data.DataColumn> est mappé si un <xref:System.Data.DataSet> est transformé en un document XML. Par exemple, si la colonne est nommée « Pnom », et la valeur qu’il contient est « Bob », et `type` a la valeur `MappingType.Attribute`, l’élément XML se présente comme suit :  
  
 \<Nom fName = 'Bob' / >  
  
 Pour plus d’informations sur la façon dont les colonnes sont mappées aux éléments ou d’attributs, consultez le <xref:System.Data.DataColumn.ColumnMapping%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant construit une colonne calculée.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Aucun <paramref name="dataType" /> n'est spécifié.</exception>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.ColumnMapping" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName="AllowDBNull">
      <MemberSignature Language="C#" Value="public bool AllowDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AllowDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDBNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les valeurs null sont autorisées dans cette colonne pour les lignes qui appartiennent à la table.</summary>
        <value>
          <see langword="true" /> si les valeurs null sont autorisées ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée un nouveau <xref:System.Data.DataColumn> et définit ses <xref:System.Data.DataColumn.AllowDBNull%2A> propriété `true`.  
  
 [!code-csharp[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Unique" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrement">
      <MemberSignature Language="C#" Value="public bool AutoIncrement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoIncrement" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrement" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoIncrement { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si la colonne incrémente automatiquement la valeur de la colonne pour les nouvelles lignes ajoutées à la table.</summary>
        <value>
          <see langword="true" /> si la valeur de la colonne est automatiquement incrémentée ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le type de cette colonne n’est pas Int16, Int32 ou Int64 lorsque cette propriété est définie, le <xref:System.Data.DataColumn.DataType%2A> propriété est convertie en Int32. Une exception est générée s’il s’agit d’une colonne calculée. Le <xref:System.Data.DataColumn.Expression%2A> est définie. La valeur incrémentée est utilisée uniquement si la valeur de la ligne pour cette colonne est ajoutée à la collection de colonnes, est égale à la valeur par défaut.  
  
 Vous pouvez créer une nouvelle ligne en utilisant la <xref:System.Data.DataRow.ItemArray%2A> propriété de la <xref:System.Data.DataRow> classe et en passant un tableau de valeurs. Il s’agit d’un problème potentiel pour une colonne avec son <xref:System.Data.DataColumn.AutoIncrement%2A> la valeur `true`, car sa valeur est générée automatiquement. Pour utiliser le <xref:System.Data.DataRow.ItemArray%2A> propriété, place `null` dans la position de la colonne dans le tableau. Pour plus d’informations, consultez la <xref:System.Data.DataRow.ItemArray%2A> propriété de la <xref:System.Data.DataRow> classe.  
  
 Si le type de la colonne est <xref:System.Data.SqlTypes.SqlInt16> ou <xref:System.Data.SqlTypes.SqlInt32>, <xref:System.Data.DataColumn.AutoIncrement%2A> ne fonctionnera pas. Utilisez à la place Int16 ou Int32.  
  
 Si le type de la colonne est <xref:System.Data.SqlTypes.SqlInt64> ou <xref:System.Data.SqlTypes.SqlDecimal>, <xref:System.Data.DataColumn.AutoIncrement%2A> fonctionnera uniquement partiellement. Utilisez à la place Int64 ou Decimal.  
  
 Lorsque la <xref:System.Data.DataColumn.AutoIncrementStep%2A> valeur est ajoutée à la valeur actuelle, le contrôle de dépassement de capacité est supprimé.  
  
   
  
## Examples  
 L’exemple suivant définit la <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, et <xref:System.Data.DataColumn.AutoIncrementStep%2A> propriétés.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La colonne est une colonne calculée.</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementSeed">
      <MemberSignature Language="C#" Value="public long AutoIncrementSeed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementSeed" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementSeed" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementSeed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementSeed { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur de départ d'une colonne ayant la valeur <see langword="true" /> affectée à sa propriété <see cref="P:System.Data.DataColumn.AutoIncrement" />. La valeur par défaut est 0.</summary>
        <value>Valeur de départ de la fonctionnalité <see cref="P:System.Data.DataColumn.AutoIncrement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant définit la <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, et <xref:System.Data.DataColumn.AutoIncrementStep%2A> propriétés.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementStep">
      <MemberSignature Language="C#" Value="public long AutoIncrementStep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementStep" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementStep" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementStep As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementStep { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'incrément utilisé par une colonne ayant la valeur <see langword="true" /> affectée à sa propriété <see cref="P:System.Data.DataColumn.AutoIncrement" />.</summary>
        <value>Nombre duquel la valeur de la colonne est automatiquement incrémentée. La valeur par défaut est 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant définit la <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, et <xref:System.Data.DataColumn.AutoIncrementStep%2A> propriétés.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur définie est zéro.</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la légende de la colonne.</summary>
        <value>Légende de la colonne. Si elle n'est pas définie, la valeur <see cref="P:System.Data.DataColumn.ColumnName" /> est retournée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.Data.DataColumn.Caption%2A> propriété pour afficher un nom descriptif ou convivial pour un <xref:System.Data.DataColumn>.  
  
   
  
## Examples  
 L’exemple suivant crée un nouveau <xref:System.Data.DataTable>. Il ajoute ensuite trois <xref:System.Data.DataColumn> des objets sur un <xref:System.Data.DataColumnCollection> et définit les <xref:System.Data.DataColumn.Caption%2A> propriété pour chaque <xref:System.Data.DataColumn>.  
  
 [!code-csharp[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="CheckNotAllowNull">
      <MemberSignature Language="C#" Value="protected internal void CheckNotAllowNull ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CheckNotAllowNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckNotAllowNull" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CheckNotAllowNull ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CheckNotAllowNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ce membre prend en charge l'infrastructure .NET Framework et n'est pas destiné à être utilisé directement à partir de votre code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckUnique">
      <MemberSignature Language="C#" Value="protected void CheckUnique ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckUnique() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckUnique" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckUnique ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckUnique();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ce membre prend en charge l'infrastructure .NET Framework et n'est pas destiné à être utilisé directement à partir de votre code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMapping">
      <MemberSignature Language="C#" Value="public virtual System.Data.MappingType ColumnMapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MappingType ColumnMapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ColumnMapping As MappingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::MappingType ColumnMapping { System::Data::MappingType get(); void set(System::Data::MappingType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MappingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Data.MappingType" /> de la colonne.</summary>
        <value>Une des valeurs de <see cref="T:System.Data.MappingType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.DataColumn.ColumnMapping%2A> propriété détermine comment un <xref:System.Data.DataColumn> est mappé si un <xref:System.Data.DataSet> est enregistré comme un document XML à l’aide du <xref:System.Data.DataSet.WriteXml%2A> (méthode).  
  
 Par exemple, si un <xref:System.Data.DataColumn> est nommé « customerID » et son <xref:System.Data.DataColumn.ColumnMapping%2A> est définie sur `MappingType.Element`, la valeur de la colonne génère le code XML suivant :  
  
```  
<Customers>  
 <customerID>ALFKI</customerID>  
......  
 </Customers>  
 <Orders>  
 <OrderID>12345</OrderID>  
 <customerID>ALFKI</customerID>  
......  
 </Orders>  
```  
  
 Toutefois, si la même colonne est mappée à `MappingType.Attribute`, le code XML suivant est généré :  
  
```  
<Customers customerID="ALFKI"........more attributes.....>  
 <Order orderID="1234"....more attributes..../>  
 <Order orderID="1234"....more attributes..../>  
...... More orders for this customer  
 </Customers>  
```  
  
 Utilisez le <xref:System.Data.DataColumn.%23ctor%2A> constructeur qui contient le `type` argument pour spécifier la manière dont le <xref:System.Data.DataColumn> est mappé lorsque son <xref:System.Data.DataSet> est transformé en un document XML.  
  
 Le <xref:System.Data.DataColumn.ColumnMapping%2A> propriété correspond à l’argument du constructeur `type`.  
  
   
  
## Examples  
 L’exemple suivant définit la <xref:System.Data.DataColumn.ColumnMapping%2A> nouveau la propriété de type <xref:System.Data.DataColumn>.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la colonne dans le <see cref="T:System.Data.DataColumnCollection" />.</summary>
        <value>Nom de la colonne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un <xref:System.Data.DataColumn> est créé, il ne possède aucune <xref:System.Data.DataColumn.ColumnName%2A> valeur. Toutefois, lorsque le <xref:System.Data.DataColumn> est ajouté à un <xref:System.Data.DataColumnCollection> pour un <xref:System.Data.DataTable> de l’objet, elle obtient un nom par défaut (« Column1 », « Column2 » et ainsi de suite).  
  
 Par défaut, le <xref:System.Data.DataColumn.Caption%2A> a la valeur du <xref:System.Data.DataColumn.ColumnName%2A> valeur.  
  
   
  
## Examples  
 Les exemples suivants Obtient le <xref:System.Data.DataColumn.ColumnName%2A> pour chaque colonne dans chaque table dans un <xref:System.Data.DataSet>. L’exemple montre également comment créer un <xref:System.Data.DataColumn> avec un nouveau <xref:System.Data.DataColumn.ColumnName%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur <see langword="null" /> ou une chaîne vide est affectée à la propriété et la colonne appartient à une collection.</exception>
        <exception cref="T:System.Data.DuplicateNameException">Une colonne portant le même nom existe déjà dans la collection. La comparaison des noms ne respecte pas la casse.</exception>
        <altmember cref="P:System.Data.DataColumn.Caption" />
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public Type DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DataType" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DataType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.ColumnTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type des données stockées dans la colonne.</summary>
        <value>Objet <see cref="T:System.Type" /> qui représente le type de données de la colonne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définition de la <xref:System.Data.DataColumn.DataType%2A> valeur est très important de garantir la création correcte et mise à jour des données dans une source de données.  
  
 Le <xref:System.Data.DataColumn.DataType%2A> propriété prend en charge les types de données .NET Framework de base suivants :  
  
-   <xref:System.Boolean>  
  
-   <xref:System.Byte>  
  
-   <xref:System.Char>  
  
-   <xref:System.DateTime>  
  
-   <xref:System.Decimal>  
  
-   <xref:System.Double>  
  
-   <xref:System.Guid>  
  
-   <xref:System.Int16>  
  
-   <xref:System.Int32>  
  
-   <xref:System.Int64>  
  
-   <xref:System.SByte>  
  
-   <xref:System.Single>  
  
-   <xref:System.String>  
  
-   <xref:System.TimeSpan>  
  
-   <xref:System.UInt16>  
  
-   <xref:System.UInt32>  
  
-   <xref:System.UInt64>  
  
 ainsi que le type de tableau suivantes :  
  
-   `Byte[]`  
  
 Une exception est générée lors de la modification de cette propriété après la colonne a commencé à stocker des données.  
  
 Si <xref:System.Data.DataColumn.AutoIncrement%2A> a la valeur `true` avant de définir la <xref:System.Data.DataColumn.DataType%2A> propriété et que vous essayez de définir le type autre qu’un type entier, une exception est générée.  
  
> [!NOTE]
>  Une colonne de type de données `Byte[]` nécessite un traitement spécial dans certains cas puisque, contrairement aux types de données .NET Framework de base, c’est un type de données de référence. Si une colonne de type de données `Byte[]` est utilisé comme un <xref:System.Data.DataTable.PrimaryKey%2A>, ou en tant qu’un <xref:System.Data.DataView.Sort%2A> ou <xref:System.Data.DataView.RowFilter%2A> clé pour un <xref:System.Data.DataView>, toute modification apportée à la valeur de colonne doit impliquer l’assignation le `Byte[]` valeur de colonne à un instanciéséparément`Byte[]` objet. Cette assignation est requise pour déclencher la mise à jour de l’index internes utilisé par le tri, le filtrage et les opérations de clé primaires. Ceci est illustré dans l'exemple suivant :  
  
```  
byte[] columnValue = (byte[])myDataTable.Rows[0][0];  
byte[] newValue = (byte[])columnValue.Clone();  
newValue[1] = 2;  
myDataTable.Rows[0][0] = newValue;  
```  
  
> [!NOTE]
>  Bien qu’il soit possible de définir une colonne comme type de données autres que les types de données .NET Framework base et `Byte[]`, une telle colonne sera considérée comme un type défini par l’utilisateur, les restrictions d’utilisation suivantes. (Pour plus d’informations sur les types définis par l’utilisateur, consultez [création et utilisation Types](http://msdn.microsoft.com/library/ec0266d2-7e5b-47e4-938a-85ac9d04fa40).)  
  
-   La colonne ne peut pas faire partie d’un <xref:System.Data.DataView.RowFilter%2A> ou <xref:System.Data.DataTable.Select%2A> expression.  
  
-   Si la colonne est utilisée comme un <xref:System.Data.DataTable.PrimaryKey%2A>, ou en tant qu’un <xref:System.Data.DataView.Sort%2A> ou pour un <xref:System.Data.DataView>, il doit être traité comme un champ immuable ; les données de colonne ne doivent pas être modifiées une fois qu’il a été ajouté à la table.  
  
-   Son <xref:System.Data.DataColumn.ColumnMapping%2A> peut uniquement être paramétrée sur `MappingType.Element`.  
  
-   La classe qui implémente le type de données doit être marqué avec le <xref:System.SerializableAttribute>, et si nécessaire, implémenter la <xref:System.Runtime.Serialization.ISerializable> ou <xref:System.Xml.Serialization.IXmlSerializable> interface.  
  
-   Prise en charge pour le suivi des modifications est limitée. Pour utiliser le <xref:System.Data.DataTable> mécanisme de suivi de modification de la classe, la classe qui implémente le type de données de la colonne doit implémenter la <xref:System.ComponentModel.IChangeTracking> d’interface, ou prendre la responsabilité d’informer le <xref:System.Data.DataRow> lorsque la valeur de colonne a été modifié, soit par l’appel <xref:System.Data.DataRow.SetModified%2A> sur la ligne ou en assignant l’objet de valeur de colonne à un objet de valeur de colonne instancié séparément.  
  
   
  
## Examples  
 L’exemple suivant ajoute des colonnes de plusieurs types de données à un <xref:System.Data.DataTable>, puis ajoute une ligne à la table.  
  
 [!code-csharp[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La colonne contient déjà des données stockées.</exception>
        <altmember cref="T:System.Type" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeMode">
      <MemberSignature Language="C#" Value="public System.Data.DataSetDateTime DateTimeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DataSetDateTime DateTimeMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DateTimeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DateTimeMode As DataSetDateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSetDateTime DateTimeMode { System::Data::DataSetDateTime get(); void set(System::Data::DataSetDateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSetDateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see langword="DateTimeMode" /> de la colonne.</summary>
        <value>
          <see cref="T:System.Data.DataSetDateTime" /> de la colonne spécifiée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.DataColumn.DateTimeMode%2A> ne peut pas être modifiée une fois que les lignes sont ajoutées à un <xref:System.Data.DataColumn>, à l’exception de la modification de <xref:System.Data.DataSetDateTime.Unspecified> et <xref:System.Data.DataSetDateTime.UnspecifiedLocal> ou vice versa. La modification de `UnspecifiedLocal` à `Unspecified` et vice versa est autorisé comme la différence entre ces deux options uniquement pendant la sérialisation et n’affecte pas le stockage.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.DefaultValueTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur par défaut de la colonne lorsque vous créez de nouvelles lignes.</summary>
        <value>Valeur appropriée pour le <see cref="P:System.Data.DataColumn.DataType" /> de la colonne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une valeur par défaut est la valeur qui est automatiquement attribuée à la colonne lorsqu’un <xref:System.Data.DataRow> est créé (par exemple, la date et l’heure auxquelles le <xref:System.Data.DataRow> a été créé.  
  
 Lorsque <xref:System.Data.DataColumn.AutoIncrement%2A> a la valeur true, il ne peut y avoir aucune valeur par défaut.  
  
 Vous pouvez créer une nouvelle ligne en utilisant la <xref:System.Data.DataRow.ItemArray%2A> propriété de la <xref:System.Data.DataRow> classe et en passant à la méthode d’un tableau de valeurs. Il s’agit d’un problème potentiel pour une colonne avec une valeur par défaut, car sa valeur est générée automatiquement. Pour utiliser le <xref:System.Data.DataRow.ItemArray%2A> propriété avec une telle colonne, placez `null` dans la position de la colonne dans le tableau. Pour plus d'informations, consultez la propriété <xref:System.Data.DataRow.ItemArray%2A>.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.Data.DataColumn> valeurs à chaque colonne par défaut des objets qui ont des types de données différents et définit approprié.  
  
 [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DefaultValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Lorsque vous ajoutez une ligne, la valeur par défaut n'est pas une instance du type de données de la colonne.</exception>
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public string Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'expression utilisée pour filtrer des lignes, calculer les valeurs d'une colonne ou créer une colonne agrégat.</summary>
        <value>Expression permettant de calculer la valeur d'une colonne ou de créer une colonne agrégat. Le type de retour d'une expression est déterminé par le <see cref="P:System.Data.DataColumn.DataType" /> de la colonne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une utilisation de la <xref:System.Data.DataColumn.Expression%2A> propriété consiste à créer des colonnes calculées. Par exemple, pour calculer une valeur de taxe, le prix unitaire est multiplié par un taux de taxe d’une région spécifique. Taux de taxe varier d’une région à l’autre, il est impossible de placer un taux de taxe unique dans une colonne. au lieu de cela, la valeur est calculée à l’aide de la <xref:System.Data.DataColumn.Expression%2A> propriété, comme indiqué dans le code Visual Basic dans la section suivante :  
  
 DataSet1.Tables("Products").Columns("tax").Expression = "UnitPrice * 0.086"  
  
 Un deuxième sert à créer une colonne d’agrégation. Similaire à une valeur calculée, un agrégat effectue une opération basée sur l’ensemble de lignes dans le <xref:System.Data.DataTable>. Il est un exemple simple pour compter le nombre de lignes renvoyées dans le jeu. Il s’agit de la méthode que vous utiliseriez pour compter le nombre de transactions terminées par un vendeur particulier, comme illustré dans le code Visual Basic :  
  
```  
DataSet1.Tables("Orders").Columns("OrderCount").Expression = "Count(OrderID)"  
```  
  
## <a name="expression-syntax"></a>Syntaxe d'expression  
 Lorsque vous créez une expression, utilisez le <xref:System.Data.DataColumn.ColumnName%2A> propriété pour faire référence aux colonnes. Par exemple, si le <xref:System.Data.DataColumn.ColumnName%2A> d’une colonne est « UnitPrice » et un autre « Quantity », l’expression se présente comme suit :  
  
 "UnitPrice * Quantity"  
  
> [!NOTE]
>  Si une colonne est utilisée dans une expression, l’expression est dite avoir une dépendance sur cette colonne. Si une colonne dépendante est renommée ou supprimée, aucune exception n’est levée. Une exception est levée lors de l’accès à la colonne d’expression désormais interrompue.  
  
 Lorsque vous créez une expression pour un filtre, encadrer des chaînes avec des guillemets simples :  
  
 « LastName = 'Jones' »  
  
 Si un nom de colonne contient des caractères non alphanumériques ou commence par un chiffre ou correspond à (indépendamment de la casse) des mots réservés suivants, il nécessite un traitement spécial, comme décrit dans les paragraphes suivants.  
  
 Et  
  
 Entre  
  
 Enfant  
  
 False  
  
 Vers l'avant  
  
 Est  
  
 Like  
  
 Not  
  
 Null  
  
 Ou  
  
 Parent  
  
 True  
  
 Si un nom de colonne satisfait l’une des conditions ci-dessus, il doit être inclus dans des crochets ou les « ' » les guillemets (apostrophe). Par exemple, pour utiliser une colonne nommée « Colonne # » dans une expression, vous devez écrire soit « [Column #] » :  
  
 Total * [Column #]  
  
 ou «\`n° de colonne ' » :  
  
 Total * \`n° de colonne '  
  
 Si le nom de colonne est placée entre crochets, alors les ']' et '\\' caractères (mais pas d’autres caractères) qu’elle contient doivent être échappés en leur ajoutant la barre oblique inverse («\\») caractères. Si le nom de colonne est placé entre les caractères d’accent grave puis il ne doit contenir des caractères d’accent grave qu’il contient. Par exemple, une colonne nommée « [] de colonne\\» serait écrite :  
  
 Total * [Column[\\]\\\\]  
  
 ou  
  
 Total * \`Column]\\`  
  
## <a name="user-defined-values"></a>Valeurs définies par l’utilisateur  
 Valeurs définies par l’utilisateur peuvent servir à comparer avec les valeurs de colonne dans les expressions. Les valeurs de chaîne doivent être entourées de guillemets simples (et chaque guillemet simple dans une valeur de chaîne doit être échappé en ajoutant le préfixe avec un autre guillemet simple). Les valeurs de date doivent être entourées de signes dièse (#) ou des guillemets simples ('), selon le fournisseur de données. Nombre de décimales et la notation scientifique sont autorisées pour les valeurs numériques. Exemple :  
  
 « FirstName = 'John' »  
  
 « Prix < = 50,00 »  
  
 « Date de naissance < #1/31/&#82; »  
  
 Pour les colonnes qui contiennent des valeurs d’énumération, effectuez un cast de la valeur en type de données integer. Exemple :  
  
 « EnumColumn = 5 »  
  
## <a name="parsing-literal-expressions"></a>Analyse d’Expressions littérales  
 Toutes les expressions littérales doivent être exprimées dans les paramètres régionaux de culture dite indifférente. Lorsque `DataSet` analyse et convertit des expressions littérales, il utilise toujours la culture dite indifférente, et non la culture actuelle.  
  
 Littéraux de chaîne sont identifiés lorsqu’il existe des guillemets simples autour de la valeur. Exemple :  
  
 « John »  
  
 `Boolean` les littéraux sont true et false ; ils ne sont pas cités dans les expressions.  
  
 `Integer` littéraux [+-] ? [0-9] + sont traités comme `System.Int32`, `System.Int64` ou `System.Double`. `System.Double` peuvent perdre en précision en fonction de la taille du nombre. Par exemple, si le nombre dans le littéral est 2147483650, `DataSet` tentera d’analyser le nombre comme un `Int32`. Cela ne réussira pas car le nombre est trop grand. Dans ce cas `DataSet` analysera le nombre comme une `Int64`, qui réussira. Si le littéral était un nombre supérieur à la valeur maximale de Int64, `DataSet` analysera le littéral à l’aide `Double`.  
  
 Les littéraux réels à l’aide de la notation scientifique, tels que 4.42372E-30, sont analysés à l’aide de `System.Double`.  
  
 Vrais littéraux sans notation scientifique, mais avec une virgule décimale, sont traités en tant que `System.Decimal`. Si le nombre dépasse les valeurs maximales ou minimales prises en charge par `System.Decimal`, puis il est analysé comme un `System.Double`. Exemple :  
  
 142526,144524 sera converti en un `Decimal`.  
  
 345262,78036719560925667 sera traité un `Double`.  
  
## <a name="operators"></a>Opérateurs  
 La concaténation est autorisée à l’aide des booléens AND, OR, opérateurs et NOT. Vous pouvez utiliser des parenthèses pour regrouper des clauses et forcer la priorité. L’opérateur AND est prioritaire sur les autres opérateurs. Exemple :  
  
 (LastName = 'Smith' OR LastName = 'Jones') Nom et prénom = « John »  
  
 Lorsque vous créez des expressions de comparaison, les opérateurs suivants sont autorisés :  
  
 \<  
  
 >  
  
 \<=  
  
 >=  
  
 <>  
  
 =  
  
 IN  
  
 LIKE  
  
 Les opérateurs arithmétiques suivants sont également pris en charge dans les expressions :  
  
 \+ (addition)  
  
 \- (soustraction)  
  
 \* (multiplication)  
  
 / (division)  
  
 % (modulo)  
  
## <a name="string-operators"></a>Opérateurs de chaîne  
 Pour concaténer une chaîne, utilisez le caractère « + ». La valeur de la <xref:System.Data.DataSet.CaseSensitive%2A> propriété de la <xref:System.Data.DataSet> classe détermine si les comparaisons de chaînes respectent la casse. Toutefois, vous pouvez remplacer cette valeur avec le <xref:System.Data.DataTable.CaseSensitive%2A> propriété de la <xref:System.Data.DataTable> classe.  
  
## <a name="wildcard-characters"></a>Caractères génériques  
 À la fois le * et % peut être utilisée indifféremment des caractères génériques dans une comparaison LIKE. Si la chaîne dans une clause LIKE contient un * ou %, ces caractères doivent être entourés de crochets ([]). Si un crochet est dans la clause, chaque crochet doit être placée entre crochets (par exemple [[] ou []]). Un caractère générique est autorisé au début et à la fin d’un modèle, ou à la fin d’un modèle ou au début d’un modèle. Exemple :  
  
 « ItemName comme ' * produit\*' »  
  
 « ItemName comme ' * produit « »  
  
 « ItemName comme produit * »  
  
 Les caractères génériques ne sont pas autorisés au milieu d’une chaîne. Par exemple, « te * xt' n’est pas autorisée.  
  
## <a name="parentchild-relation-referencing"></a>Relation parent/enfant faisant référence à  
 Une table parente peut être référencée dans une expression en ajoutant le préfixe du nom de la colonne `Parent`. Par exemple, le `Parent.Price` fait référence à la colonne de la table parent nommée `Price`.  
  
 Lorsqu’un enfant a plusieurs lignes parents, utilisez parent (RelationName). Nom de colonne. Par exemple, le parent (RelationName). Prix fait référence à la colonne de la table parent nommée Price via la relation.  
  
 Une colonne dans une table enfant peut être référencée dans une expression en ajoutant le préfixe du nom de la colonne `Child`. Toutefois, étant donné que les relations enfants peuvent retourner plusieurs lignes, vous devez inclure la référence à la colonne enfant dans une fonction d’agrégation. Par exemple, `Sum(Child.Price)` retournerait la somme de la colonne nommée `Price` dans la table enfant.  
  
 Si une table possède plusieurs enfants, la syntaxe est : `Child(RelationName)`. Par exemple, si une table possède deux tables enfants nommées `Customers` et `Orders`et le <xref:System.Data.DataRelation> objet est nommé `Customers2Orders`, la référence se présente comme suit :  
  
 Avg(Child(Customers2Orders).Quantity)  
  
## <a name="aggregates"></a>Agrégats  
 Les types d’agrégation suivantes sont prises en charge :  
  
 Somme (Sum)  
  
 AVG (moyenne)  
  
 Min (Minimum)  
  
 Max (Maximum)  
  
 Count (nombre)  
  
 StDev (écart type statistique)  
  
 Var (variance statistique).  
  
 Les agrégats sont habituellement effectuées dans les relations. Créer une expression d’agrégation à l’aide d’une des fonctions répertoriées précédemment et d’une colonne de table enfant comme détaillé dans la référence de Relation Parent/enfant qui a été indiqué précédemment. Exemple :  
  
 Avg(Child.Price)  
  
 Avg(Child(Orders2Details).Price)  
  
 Un agrégat peut également être effectué sur une seule table. Par exemple, pour créer un résumé des valeurs dans une colonne nommée « Price » :  
  
 Sum(Price)  
  
> [!NOTE]
>  Si vous utilisez une seule table pour créer un agrégat, il n’y aucune fonctionnalité group by. Au lieu de cela, toutes les lignes affiche la même valeur dans la colonne.  
  
 Si une table n’a aucune ligne, les fonctions d’agrégation retournent `null`.  
  
 Types de données peuvent toujours être déterminés en examinant la <xref:System.Data.DataColumn.DataType%2A> propriété d’une colonne. Vous pouvez également convertir des types de données à l’aide de la fonction Convert, indiquée dans la section suivante.  
  
 Un agrégat peut uniquement être appliqué à une seule colonne et aucuns autres expressions ne peuvent être utilisés à l’intérieur de l’agrégat.  
  
## <a name="functions"></a>Fonctions  
 Les fonctions suivantes sont également prises en charge :  
  
 `CONVERT`  
  
|||  
|-|-|  
|Description |Convertit l’expression particulière pour un Type .NET Framework spécifié.|  
|Syntaxe|Convert(`expression`, `type`)|  
|Arguments|`expression` --Expression à convertir.<br /><br /> `type` --Type .NET Framework dans lequel la valeur doit être convertie.|  
  
 Exemple : myDataColumn.Expression="Convert (total, « System.Int32 ») »  
  
 Toutes les conversions sont valides avec les exceptions suivantes : `Boolean` pouvant être convertie vers et à partir `Byte`, `SByte`, `Int16`, `Int32`, `Int64`, `UInt16`, `UInt32`, `UInt64`, `String` et lui-même. `Char` peut être forcé vers et à partir `Int32`, `UInt32`, `String`et lui-même. `DateTime` peut être forcé vers et depuis `String` et lui-même. `TimeSpan` peut être forcé vers et depuis `String` et lui-même.  
  
 `LEN`  
  
|||  
|-|-|  
|Description |Obtient la longueur d’une chaîne|  
|Syntaxe|LEN (`expression`)|  
|Arguments|`expression` --La chaîne à évaluer.|  
  
 Exemple : myDataColumn.Expression="Len(ItemName) »  
  
 `ISNULL`  
  
|||  
|-|-|  
|Description |Vérifie une expression et retourne l’expression vérifiée ou une valeur de remplacement.|  
|Syntaxe|ISNULL(`expression`, `replacementvalue`)|  
|Arguments|`expression` --Expression à vérifier.<br /><br /> `replacementvalue` --Si l’expression est `null`, `replacementvalue` est retourné.|  
  
 Exemple : myDataColumn.Expression="IsNull (prix, -1) »  
  
 `IIF`  
  
|||  
|-|-|  
|Description |Obtient une des deux valeurs en fonction du résultat d’une expression logique.|  
|Syntaxe|IIF(`expr`, `truepart`, `falsepart`)|  
|Arguments|`expr` --Expression à évaluer.<br /><br /> `truepart` --La valeur à retourner si l’expression est vraie.<br /><br /> `falsepart` --La valeur à retourner si l’expression est false.|  
  
 Exemple : myDataColumn.Expression = « IIF (total > 1000, « cher », « cher »)  
  
 `TRIM`  
  
|||  
|-|-|  
|Description |Supprime tous les premiers et derniers vide des caractères tels que \r, \n, \t, ' '|  
|Syntaxe|TRIM(`expression`)|  
|Arguments|`expression` --Expression à tronquer.|  
  
 `SUBSTRING`  
  
|||  
|-|-|  
|Description |Obtient une sous-chaîne d’une longueur spécifiée, en commençant à un point spécifié dans la chaîne.|  
|Syntaxe|SUBSTRING(`expression`, `start`, `length`)|  
|Arguments|`expression` --La chaîne de la source de la sous-chaîne.<br /><br /> `start` --Entier qui spécifie où commence la sous-chaîne.<br /><br /> `length` --Entier qui spécifie la longueur de la sous-chaîne.|  
  
 Exemple : myDataColumn.Expression = « SUBSTRING (téléphone, 7, 8) »  
  
> [!NOTE]
>  Vous pouvez réinitialiser le <xref:System.Data.DataColumn.Expression%2A> propriété en lui assignant une valeur null ou une chaîne vide. Si une valeur par défaut est définie sur la colonne d’expression, toutes les lignes déjà remplies sont affectés à la valeur par défaut après le <xref:System.Data.DataColumn.Expression%2A> propriété est réinitialisée.  
  
   
  
## Examples  
 L’exemple suivant crée trois colonnes dans un <xref:System.Data.DataTable>. Les deuxième et troisième colonnes contiennent des expressions. la deuxième calcule la taxe à l’aide d’un taux de taxe variable et la troisième ajoute le résultat du calcul à la valeur de la première colonne. La table résultante s’affiche dans un <xref:System.Windows.Forms.DataGrid> contrôle.  
  
 [!code-csharp[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur <see langword="true" /> est affectée à la propriété <see cref="P:System.Data.DataColumn.AutoIncrement" /> ou <see cref="P:System.Data.DataColumn.Unique" />.</exception>
        <exception cref="T:System.FormatException">Si vous utilisez la fonction CONVERT, le résultat de l'évaluation de l'expression est une chaîne, mais la chaîne ne contient pas de représentation pouvant être convertie en paramètre de type.</exception>
        <exception cref="T:System.InvalidCastException">Lorsque vous utilisez la fonction CONVERT, le cast demandé est impossible. Consultez la fonction Conversion dans la section suivante pour obtenir des informations détaillées sur les casts possibles.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Lorsque vous utilisez la fonction SUBSTRING, l'argument de départ est hors limites.  
  
 - ou -  
  
 Lorsque vous utilisez la fonction SUBSTRING, l'argument de longueur est hors limites.</exception>
        <exception cref="T:System.Exception">Lorsque vous utilisez la fonction LEN ou la fonction TRIM, le résultat de l'évaluation de l'expression n'est pas une chaîne. Cela comprend les expressions dont le résultat de l'évaluation est <see cref="T:System.Char" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection d'informations utilisateur personnalisées associée à <see cref="T:System.Data.DataColumn" />.</summary>
        <value>
          <see cref="T:System.Data.PropertyCollection" /> d'informations personnalisées.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.DataColumn.ExtendedProperties%2A> propriété vous permet de stocker des informations personnalisées avec l’objet. Par exemple, vous pouvez stocker une heure à laquelle les données doivent être actualisées.  
  
 Les propriétés étendues doivent être de type <xref:System.String>. Les propriétés qui ne sont pas de type <xref:System.String> ne sont pas rendues persistantes lorsque le <xref:System.Data.DataColumn> est écrit au format XML.  
  
   
  
## Examples  
 L’exemple suivant ajoute une propriété personnalisée à la <xref:System.Data.PropertyCollection> retournée par le <xref:System.Data.DataColumn.ExtendedProperties%2A> propriété. Le deuxième exemple récupère la propriété personnalisée.  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.PropertyCollection" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la longueur maximale d'une colonne de texte.</summary>
        <value>Longueur maximale de la colonne en caractères. Si la colonne ne possède pas de longueur maximale, la valeur est -1 (valeur par défaut).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.DataColumn.MaxLength%2A> propriété est ignorée pour les colonnes non textuelles. A <xref:System.ArgumentException> exception est levée si vous affectez <xref:System.Data.DataColumn.MaxLength%2A> à une colonne autre qu’une chaîne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'espace de noms de <see cref="T:System.Data.DataColumn" />.</summary>
        <value>L’espace de noms du <see cref="T:System.Data.DataColumn" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.DataColumn.Namespace%2A> propriété est utilisée lors de la lecture et l’écriture d’un document XML de document dans un <xref:System.Data.DataTable> dans les <xref:System.Data.DataSet> à l’aide de la <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, ou <xref:System.Data.DataSet.WriteXmlSchema%2A> méthodes.  
  
 L’espace de noms d’un document XML est utilisé pour définir l’étendue des attributs XML et les éléments lors de la lecture dans un <xref:System.Data.DataSet>. Par exemple, un <xref:System.Data.DataSet> contient un schéma lu dans un document qui a l’espace de noms « myCompany », et une tentative est effectuée pour lire des données (avec la <xref:System.Data.DataSet.ReadXml%2A> (méthode)) à partir d’un document qui possède l’espace de noms « LeurSociété ». Toutes les données qui ne correspondant pas au schéma existant seront ignorées.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">L'espace de noms contient déjà des données.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">Référence de paramètre.</param>
        <summary>Ce membre prend en charge l'infrastructure .NET Framework et n'est pas destiné à être utilisé directement à partir de votre code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public int Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ordinal As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Ordinal { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la position (de base zéro) de la colonne dans la collection <see cref="T:System.Data.DataColumnCollection" />.</summary>
        <value>Position de la colonne. Obtient -1 si la colonne n'est pas un membre d'une collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant retourne le type de colonne nom, l’ordinal et données d’une colonne.  
  
 [!code-csharp[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un préfixe XML qui associe un alias à l'espace de noms de <see cref="T:System.Data.DataTable" />.</summary>
        <value>Préfixe XML de l'espace de noms de <see cref="T:System.Data.DataTable" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.DataTable.Prefix%2A> est utilisée dans un document XML pour identifier les éléments qui appartiennent à l’espace de noms pour un <xref:System.Data.DataSet> objet (comme défini par le <xref:System.Data.DataSet.Namespace%2A> propriété).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Référence de paramètre.</param>
        <summary>Ce membre prend en charge l'infrastructure .NET Framework et n'est pas destiné à être utilisé directement à partir de votre code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si la colonne autorise les modifications dès qu'une ligne a été ajoutée à la table.</summary>
        <value>
          <see langword="true" /> si la colonne est en lecture seule ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée un <xref:System.Data.DataColumn> et définit ses <xref:System.Data.DataColumn.ReadOnly%2A> propriété `true`.  
  
 [!code-csharp[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur de la propriété est <see langword="false" /> sur une colonne calculée.</exception>
        <altmember cref="P:System.Data.DataColumn.Unique" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
      </Docs>
    </Member>
    <Member MemberName="SetOrdinal">
      <MemberSignature Language="C#" Value="public void SetOrdinal (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOrdinal(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.SetOrdinal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOrdinal (ordinal As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOrdinal(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Ordinal spécifié.</param>
        <summary>Remplace l'ordinal ou la position du <see cref="T:System.Data.DataColumn" /> par l'ordinal ou la position spécifié(e).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Remplace l'ordinal ou la position du <xref:System.Data.DataColumn> par l'ordinal ou la position spécifié(e). Si l’ordinal est inférieur à 0 ou supérieur au nombre de colonnes – 1 (supérieur à l’ordinal de la dernière colonne) existant puis non valide <xref:System.ArgumentException> est levée.  
  
 Lorsque vous modifiez les ordinal d’une colonne, la colonne est déplacée vers la nouvelle position dans la collection de colonnes. Toutes les colonnes entre l’ordinal de précédent et nouvel seront renumérotés pour ajuster l’ordinal de nouveau d’une colonne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Table" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Table As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTable ^ Table { System::Data::DataTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Data.DataTable" /> auquel la colonne appartient.</summary>
        <value>
          <see cref="T:System.Data.DataTable" /> auquel appartient <see cref="T:System.Data.DataColumn" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant retourne la table parente d’un <xref:System.Data.DataColumn> via son <xref:System.Data.DataColumn.Table%2A> propriété.  
  
 [!code-csharp[Classic WebData DataColumn.Table Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Table Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient le <see cref="P:System.Data.DataColumn.Expression" /> éventuel de la colonne.</summary>
        <returns>Valeur <see cref="P:System.Data.DataColumn.Expression" /> si la propriété est définie ; sinon, la propriété <see cref="P:System.Data.DataColumn.ColumnName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant utilise le <xref:System.Data.DataColumn.ToString%2A> propriété pour retourner la chaîne par défaut de chaque membre d’une collection de <xref:System.Data.DataColumn> objets.  
  
 [!code-csharp[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="Unique">
      <MemberSignature Language="C#" Value="public bool Unique { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Unique" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Unique" />
      <MemberSignature Language="VB.NET" Value="Public Property Unique As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Unique { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les valeurs de chaque ligne de la colonne doivent être uniques.</summary>
        <value>
          <see langword="true" /> si la valeur doit être unique ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dès que cette propriété est passée de false à true, une contrainte unique est créée sur cette colonne pour vous assurer que les valeurs sont uniques.  
  
   
  
## Examples  
 L’exemple suivant crée de nouveaux <xref:System.Data.DataColumn>, définit ses propriétés et l’ajoute à la collection de colonnes d’une table.  
  
 [!code-csharp[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La colonne est une colonne calculée.</exception>
        <altmember cref="P:System.Data.DataColumn.AllowDBNull" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <altmember cref="P:System.Data.DataTable.Constraints" />
      </Docs>
    </Member>
  </Members>
</Type>