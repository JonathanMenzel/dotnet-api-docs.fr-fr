<Type Name="IsolationLevel" FullName="System.Data.IsolationLevel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fd1598b6f019ec4266a4507137cb374b09d7767b" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33679390" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum IsolationLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed IsolationLevel extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.IsolationLevel" />
  <TypeSignature Language="VB.NET" Value="Public Enum IsolationLevel" />
  <TypeSignature Language="C++ CLI" Value="public enum class IsolationLevel" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Spécifie le comportement de verrouillage des transactions pour la connexion.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.IsolationLevel> valeurs sont utilisées par un fournisseur de données .NET Framework lors de l’exécution d’une transaction.  
  
 Le <xref:System.Data.IsolationLevel> reste en vigueur jusqu'à ce qu’explicitement modifié, mais il peut être modifié à tout moment. La nouvelle valeur est utilisée au moment de l’exécution, pas les temps d’analyse. Si modifiée au cours d’une transaction, le comportement attendu du serveur est à appliquer le nouveau niveau de verrouillage pour toutes les instructions restantes.  
  
   
  
## Examples  
 Cette application montre comment utiliser <xref:System.Data.IsolationLevel> dans <xref:System.Data.Common.DbTransaction>. L’exemple va vous montrer les comportements suivants sont autorisés dans les différents niveaux d’isolation :  
  
-   Lectures de données modifiées.  
  
-   Lectures non répétables.  
  
-   Fantômes.  
  
 Cette application s’exécute dans les niveaux d’isolation suivants :  
  
-   ReadUncommitted  
  
-   Lecture validée  
  
-   RepeatableRead  
  
-   Sérialisable  
  
-   Instantané  
  
 La classe PhantomReadThreads montre si la transaction spécifique permet le comportement de la lecture de fantôme. Si la transaction autorise le comportement, les threads fonctionnera dans l’ordre suivant :  
  
-   Dans le premier thread, sélectionnez le products(All).  
  
-   Dans le deuxième thread, insérez un nouveau produit.  
  
-   Validez la transaction dans un deuxième thread.  
  
-   Sélectionnez les produits à nouveau.  
  
-   Validez la transaction dans le premier thread.  
  
 Si la transaction autorise le comportement, les deux opérations Select obtenez des résultats différents.  
  
 La classe NonrepeatableReadThreads montre si la transaction spécifique permet le comportement de lecture non renouvelable. Si la transaction autorise le comportement, les threads fonctionnera dans l’ordre suivant :  
  
-   Dans le premier thread, sélectionnez le product(ProductId=1).  
  
-   Dans le deuxième thread, mettre à jour la quantité value(ProductId=1).  
  
-   Validez la transaction dans un deuxième thread.  
  
-   Sélectionnez le produit à nouveau.  
  
-   Validez la transaction dans le premier thread.  
  
 Si la transaction autorise le comportement, les deux opérations Select obtenez des résultats différents.  
  
 La classe ExchangeValuesThreads illustre la différence entre les transactions Serializable et Snapshot. Pour la transaction sérialisable, les threads fonctionnera dans l’ordre suivant :  
  
-   Dans le premier thread, obtenir le prix de product(ProductId=2) et le magasin dans la variable.  
  
-   Dans le premier thread, vous devez mettre à jour le prix de product(ProductId=1) avec le prix de product(ProductId=2).  
  
-   Validez la transaction dans le premier thread.  
  
-   Dans le deuxième thread, obtenir le prix de product(ProductId=1) et le magasin dans la variable.  
  
-   Dans le deuxième thread, vous devez mettre à jour le prix de product(ProductId=2) avec le prix de product(ProductId=1).  
  
-   Validez la transaction dans un deuxième thread.  
  
 Désormais, les valeurs du prix (ProductId = 1 et ProductId = 2) est la même que celle du prix de Product(ProductId=2) d’origine.  
  
 Pour la transaction d’instantané, les threads fonctionnera dans l’ordre suivant :  
  
-   Dans le premier thread, obtenir le prix de product(ProductId=2) et le magasin dans la variable ;  
  
-   Dans le premier thread, vous devez mettre à jour le prix de product(ProductId=1) avec le prix de product(ProductId=2).  
  
-   Dans le deuxième thread, obtenir le prix de product(ProductId=1) à partir de l’instantané et les stocker dans la variable.  
  
-   Dans le deuxième thread, vous devez mettre à jour le prix de product(ProductId=2) avec le prix de product(ProductId=1).  
  
-   Validez la transaction dans un deuxième thread.  
  
-   Validez la transaction dans le premier thread.  
  
 Maintenant échanger le prix des produits (ProductId = 1 et ProductId = 2).  
  
 La classe DirtyReadThreads montre si la transaction spécifique permet le comportement de la lecture de données modifiées. Si la transaction autorise le comportement, les threads fonctionnera dans l’ordre suivant :  
  
-   Dans le premier thread, commencer une transaction et ajouter la value(ProductId=1) quantité.  
  
-   Dans le deuxième thread, lire la valeur de la quantité et ajoutez de nouveau la valeur.  
  
-   Validez la transaction dans un deuxième thread.  
  
-   Restaurer la transaction dans le premier thread.  
  
 Si la transaction autorise le comportement, la valeur de quantité sera ajoutée à deux reprises.  
  
 Les projets c# et Visual Basic avec cet exemple de code se trouvent sur [exemples de Code pour développeurs](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).  
  
 [!code-csharp[system_data_IsolationLevel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/system_data_isolationlevel/cs/source.cs#1)]
 [!code-vb[system_data_IsolationLevel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/system_data_isolationlevel/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Chaos">
      <MemberSignature Language="C#" Value="Chaos" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Chaos = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Chaos" />
      <MemberSignature Language="VB.NET" Value="Chaos" />
      <MemberSignature Language="C++ CLI" Value="Chaos" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>Les modifications en attente, provenant des transactions les plus isolées, ne peuvent pas être remplacées.</summary>
      </Docs>
    </Member>
    <Member MemberName="ReadCommitted">
      <MemberSignature Language="C#" Value="ReadCommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadCommitted = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadCommitted" />
      <MemberSignature Language="VB.NET" Value="ReadCommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadCommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary>Les verrous partagés sont conservés pendant la lecture des données afin d'éviter tout défaut de lecture, mais les données peuvent être modifiées avant la fin de la transaction, entraînant ainsi des données fantômes ou des lectures qui ne peuvent pas être répétées.</summary>
      </Docs>
    </Member>
    <Member MemberName="ReadUncommitted">
      <MemberSignature Language="C#" Value="ReadUncommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadUncommitted = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadUncommitted" />
      <MemberSignature Language="VB.NET" Value="ReadUncommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadUncommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>Un défaut de lecture est possible, ce qui signifie qu'aucun verrou partagé n'est émis et qu'aucun verrou exclusif n'est respecté.</summary>
      </Docs>
    </Member>
    <Member MemberName="RepeatableRead">
      <MemberSignature Language="C#" Value="RepeatableRead" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel RepeatableRead = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.RepeatableRead" />
      <MemberSignature Language="VB.NET" Value="RepeatableRead" />
      <MemberSignature Language="C++ CLI" Value="RepeatableRead" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary>Des verrous sont placés sur toutes les données utilisées dans une requête afin d’empêcher d’autres utilisateurs de mettre à jour les données. Empêche les lectures qui ne peuvent pas être répétées, mais des lignes fantômes peuvent toujours exister.</summary>
      </Docs>
    </Member>
    <Member MemberName="Serializable">
      <MemberSignature Language="C#" Value="Serializable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Serializable = int32(1048576)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Serializable" />
      <MemberSignature Language="VB.NET" Value="Serializable" />
      <MemberSignature Language="C++ CLI" Value="Serializable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>1048576</MemberValue>
      <Docs>
        <summary>Un verrou de plage est placé sur <see cref="T:System.Data.DataSet" /> afin d'empêcher les autres utilisateurs de mettre à jour ou de modifier les lignes du groupe de données avant la fin de la transaction.</summary>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="Snapshot" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Snapshot = int32(16777216)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Snapshot" />
      <MemberSignature Language="VB.NET" Value="Snapshot" />
      <MemberSignature Language="C++ CLI" Value="Snapshot" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary>Réduit le blocage en stockant une version des données qu'une application pourra lire pendant qu'une autre les modifiera. Indique qu'il n'est pas possible de voir les modifications apportées dans une transaction à partir d'une autre transaction, même si vous réexécutez la requête.</summary>
      </Docs>
    </Member>
    <Member MemberName="Unspecified">
      <MemberSignature Language="C#" Value="Unspecified" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Unspecified = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Unspecified" />
      <MemberSignature Language="VB.NET" Value="Unspecified" />
      <MemberSignature Language="C++ CLI" Value="Unspecified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Un niveau d'isolement différent de celui spécifié est utilisé actuellement, mais il est impossible de le déterminer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous utilisez <xref:System.Data.Odbc.OdbcTransaction>, si vous ne définissez pas <xref:System.Data.IsolationLevel> ou configurer <xref:System.Data.IsolationLevel> à `Unspecified`, la transaction s’exécute selon le niveau d’isolement est déterminé par le pilote est utilisé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>