<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4877f267408f77d2e2104534ad5ebe7e397b5b13" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30399383" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Permet à un objet d'implémenter DataAdapter et représente un jeu de méthodes ainsi que de propriétés liées au mappage servant à remplir et à mettre à jour <see cref="T:System.Data.DataSet" /> ainsi qu'à mettre à jour une source de données.  
  
 Les instances <see cref="T:System.Data.IDbDataAdapter" /> sont destinées aux sources de données qui sont (ou ressemblent à) des bases de données relationnelles avec des commandes textuelles (comme Transact-SQL) alors que les instances <see cref="T:System.Data.IDataAdapter" /> peuvent utiliser n’importe quel type de source de données.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.IDataAdapter> interface permet à une classe qui hérite d’implémenter une classe DataAdapter représentant le pont entre une source de données et un <xref:System.Data.DataSet>. Pour plus d’informations sur les classes DataAdapter, consultez [remplissage d’un DataSet à partir d’un DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).  
  
 Une application ne crée pas une instance de la <xref:System.Data.IDataAdapter> interface directement, mais implémente une instance d’une classe qui hérite de <xref:System.Data.IDataAdapter>.  
  
 Les classes qui héritent <xref:System.Data.IDataAdapter> doit implémenter les membres hérités et elles définissent généralement des membres supplémentaires pour ajouter des fonctionnalités spécifiques au fournisseur. Par exemple, le <xref:System.Data.IDataAdapter> interface définit un <xref:System.Data.IDataAdapter.Fill%2A> méthode qui accepte un <xref:System.Data.DataSet> en tant que paramètre. À son tour, le <xref:System.Data.OleDb.OleDbDataAdapter> classe hérite de la <xref:System.Data.Common.DbDataAdapter.Fill%2A> (méthode) et définit également deux surcharges supplémentaires de la <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> méthode qui prend un objet de jeu d’enregistrements ADO en tant que paramètre.  
  
   
  
## Examples  
 L’exemple suivant utilise les classes dérivées, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, et <xref:System.Data.SqlClient.SqlConnection>pour sélectionner des enregistrements à partir d’une base de données. La pleine <xref:System.Data.DataSet> est alors retournée. Pour ce faire, est passé à la méthode initialisé <xref:System.Data.DataSet>, une chaîne de connexion et une chaîne de requête qui est une instruction Transact-SQL SELECT.  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Pour promouvoir la cohérence entre les fournisseurs de données .NET Framework, nommez la classe qui hérite sous la forme <paramref name="Prv" /> DataAdapter où <paramref name="Prv" /> est le préfixe uniforme affecté à toutes les classes dans un espace de noms de fournisseur de données .NET Framework spécifique. Par exemple, <paramref name="Sql" /> est le préfixe de le <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> classe dans le <see langword="System.Data.SqlClient" /> espace de noms.  
  
 Lorsque vous héritez de la <see cref="T:System.Data.IDataAdapter" /> interface, vous devez implémenter les constructeurs suivants :  
  
 <list type="table"><listheader><term> Élément  
  
 </term><description> Description  
  
 </description></listheader><item><term> PrvDataAdapter()  
  
 </term><description> Initialise une nouvelle instance de la classe PrvDataAdapter.  
  
 </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand)  
  
 </term><description> Initialise une nouvelle instance de la classe PrvDataAdapter à l’aide de l’instruction SQL SELECT spécifiée.  
  
 </description></item><item><term> PrvDataAdapter (selectCommandText de chaîne, chaîne selectConnectionString)  
  
 </term><description> Initialise une nouvelle instance de la classe PrvDataAdapter en utilisant une instruction SQL SELECT et une chaîne de connexion.  
  
 </description></item><item><term> PrvDataAdapter (chaîne selectCommandText, PrvConnection selectConnection)  
  
 </term><description> Initialise une nouvelle instance de la classe PrvDataAdapter en utilisant une instruction SQL SELECT et un objet PrvConnection.  
  
 </description></item></list></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> à remplir avec des enregistrements et, éventuellement, un schéma.</param>
        <summary>Ajoute ou met à jour les lignes de <see cref="T:System.Data.DataSet" /> pour correspondre à celles de la source de données à l'aide du nom <see cref="T:System.Data.DataSet" /> et crée un <see cref="T:System.Data.DataTable" /> appelé "Table".</summary>
        <returns>Nombre de lignes correctement ajoutées ou actualisées dans <see cref="T:System.Data.DataSet" />. Cela n'inclut pas les lignes affectées par des instructions qui ne retournent pas de ligne.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A> Récupère des lignes de la source de données à l’aide de l’instruction SELECT spécifiée par associé à un <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propriété. L’objet de connexion associé à l’instruction SELECT doit être valide, mais il ne doit-elle pas être ouverts. Si la connexion est fermée avant <xref:System.Data.IDataAdapter.Fill%2A> est appelée, elle est ouverte pour récupérer les données, puis fermé. Si la connexion est ouverte avant <xref:System.Data.IDataAdapter.Fill%2A> est appelée, elle reste ouverte.  
  
 Le <xref:System.Data.IDataAdapter.Fill%2A> opération ajoute ensuite les lignes vers la destination <xref:System.Data.DataTable> des objets dans le <xref:System.Data.DataSet>, en créant le <xref:System.Data.DataTable> objets si elles n’existent pas déjà. Lors de la création <xref:System.Data.DataTable> objets, la <xref:System.Data.IDataAdapter.Fill%2A> opération crée généralement que des métadonnées de nom de colonne. Toutefois, si le <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> est définie sur `AddWithKey`, clés primaires appropriés et les contraintes sont également créés.  
  
 Si `SelectCommand` retourne les résultats d'une jointure externe, le `DataAdapter` ne définit pas de valeur <xref:System.Data.DataTable.PrimaryKey%2A> pour le <xref:System.Data.DataTable> obtenu. Vous devez définir explicitement la clé primaire pour garantir une résolution correcte des lignes dupliquées. Pour plus d’informations, consultez [définition des clés primaires](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Si le <xref:System.Data.IDataAdapter> rencontre des colonnes dupliquées lors du remplissage d’un <xref:System.Data.DataTable>, il génère des noms pour les colonnes successives, à l’aide du modèle « columnname1 », « columnname2 », « columnname3 » et ainsi de suite. Si les données entrantes contiennent des colonnes sans nom, elles sont placées dans le <xref:System.Data.DataSet> selon le modèle « Column1 », « Column2 » et ainsi de suite. Lorsque plusieurs jeux de résultats est ajoutés à la <xref:System.Data.DataSet>, chaque jeu de résultats est placé dans une table distincte. Jeux de résultats supplémentaires sont nommés en ajoutant des valeurs intégrales au nom de table spécifié (par exemple, « Table », « Table1 », « Table2 » et ainsi de suite). Applications soyez prudent lorsque vous utilisez des noms de colonne et de table afin d’éviter tout conflit avec ces modèles d’affectation de noms.  
  
 Lorsque l’instruction SELECT qui est utilisée pour remplir le <xref:System.Data.DataSet> retourne plusieurs résultats, comme une instruction SQL par lots, si un des résultats contient une erreur, tous les résultats successifs sont ignorés et pas ajoutés à la <xref:System.Data.DataSet>.  
  
 Vous pouvez utiliser la <xref:System.Data.IDataAdapter.Fill%2A> méthode plusieurs fois sur le même <xref:System.Data.DataTable>. Si une clé primaire existe, les lignes entrantes sont fusionnées avec les lignes correspondantes qui existent déjà. Si aucune clé primaire n’existe, les lignes entrantes sont ajoutées à la <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Lors du traitement d’instructions SQL par lots qui retournent plusieurs résultats, l’implémentation de <xref:System.Data.IDataAdapter.Fill%2A> et <xref:System.Data.IDataAdapter.FillSchema%2A> de données .NET Framework fournisseur récupère les informations de schéma pour seulement le premier résultat.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> à remplir avec le schéma à partir de la source de données.</param>
        <param name="schemaType">Une des valeurs de <see cref="T:System.Data.SchemaType" />.</param>
        <summary>Ajoute un <see cref="T:System.Data.DataTable" /> appelé "Table" au <see cref="T:System.Data.DataSet" /> spécifié et configure le schéma pour qu'il corresponde à celui de la source de données en se basant sur le <see cref="T:System.Data.SchemaType" /> spécifié.</summary>
        <returns>Tableau d'objets <see cref="T:System.Data.DataTable" /> qui contient les informations de schéma retournées par la source de données.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.IDataAdapter.FillSchema%2A> méthode extrait le schéma à partir de la source de données à l’aide de la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. L’objet de connexion associé à le <xref:System.Data.IDbDataAdapter.SelectCommand%2A> doit être valide, mais elle ne doit pas être ouvert. Si la connexion est fermée avant <xref:System.Data.IDataAdapter.FillSchema%2A> est appelée, elle est ouverte pour récupérer les données, puis fermé. Si la connexion est ouverte avant <xref:System.Data.IDataAdapter.FillSchema%2A> est appelée, elle reste ouverte.  
  
 A <xref:System.Data.IDataAdapter.FillSchema%2A> opération ajoute une <xref:System.Data.DataTable> vers la destination <xref:System.Data.DataSet>. Il ajoute ensuite les colonnes à la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable> et configure les éléments suivants <xref:System.Data.DataColumn> propriétés si elles existent dans la source de données :  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Vous devez définir <xref:System.Data.DataColumn.AutoIncrementStep%2A> et <xref:System.Data.DataColumn.AutoIncrementSeed%2A> séparément.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> configure également le <xref:System.Data.DataTable.PrimaryKey%2A> et <xref:System.Data.DataTable.Constraints%2A> propriétés selon les règles suivantes :  
  
-   Si une ou plusieurs colonnes de clés primaires sont retournées par la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, elles sont utilisées comme colonnes de clé primaire pour la <xref:System.Data.DataTable>.  
  
-   Si aucune colonne clé primaire n’est retournées, mais sont des colonnes uniques, les colonnes uniques sont utilisées comme clé primaire si toutes les colonnes uniques sont non nullable. Si une des colonnes est nullable, un <xref:System.Data.UniqueConstraint> est ajouté à la <xref:System.Data.ConstraintCollection>, mais la <xref:System.Data.DataTable.PrimaryKey%2A> propriété n’est pas définie.  
  
-   Si les colonnes clés primaires et des colonnes uniques sont retournées, les colonnes clés primaires sont utilisés en tant que les colonnes de clé primaire pour la <xref:System.Data.DataTable>.  
  
 Notez que les clés primaires et des contraintes uniques sont ajoutés à la <xref:System.Data.ConstraintCollection> selon les règles précédentes, mais les autres contrainte de types ne sont pas ajoutés.  
  
 Si un cluster unique index est défini sur une ou plusieurs colonnes dans une table SQL Server et la contrainte de clé primaire est définie dans le même ensemble de colonnes, les noms des colonnes dans l’index cluster seront retourné. Pour renvoyer l’ou les noms des colonnes de clé primaire, utilisez un indicateur de requête avec l’instruction SELECT qui spécifie le nom de l’index de clé primaire. Pour plus d’informations sur la façon de spécifier des indicateurs de requête, consultez [l’indicateur de requête (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Si le <xref:System.Data.IDataAdapter> rencontre des colonnes dupliquées lors du remplissage d’un <xref:System.Data.DataTable>, il génère des noms pour les colonnes successives, à l’aide du modèle « columnname1 », « columnname2 », « columnname3 » et ainsi de suite. Si les données entrantes contiennent des colonnes sans nom, elles sont placées dans le <xref:System.Data.DataSet> selon le modèle « Column1 », « Column2 » et ainsi de suite. Lorsque plusieurs jeux de résultats est ajoutés à la <xref:System.Data.DataSet>, chaque jeu de résultats est placé dans une table distincte. Jeux de résultats supplémentaires sont nommés en ajoutant des valeurs intégrales au nom de table spécifié (par exemple, « Table », « Table1 », « Table2 » et ainsi de suite). Applications soyez prudent lorsque vous utilisez des noms de colonne et de table afin d’éviter tout conflit avec ces modèles d’affectation de noms.  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> ne retourne aucune ligne. Utilisez le <xref:System.Data.IDataAdapter.Fill%2A> méthode pour ajouter des lignes à un <xref:System.Data.DataTable>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient les paramètres définis par l'utilisateur lors de l'exécution d'une instruction SQL SELECT.</summary>
        <returns>Tableau d'objets <see cref="T:System.Data.IDataParameter" /> qui contient les paramètres définis par l'utilisateur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits";   
              SqlParameter year = new SqlParameter("@Year", 2012);   
              SqlParameter credits = new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits");   
              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   
              command.Parameters.Add(year);   
              command.Parameters.Add(credits);   
              IDbDataAdapter mySchool = new SqlDataAdapter(command);   
              IDataParameter[] parameters = mySchool.GetFillParameters();  
              Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "ParameterName", "SourceColumn", "Direction", "DbType", "Value");   
              foreach (IDataParameter parameter in parameters) {   
                 Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   
              }  
           }  
        }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique ou spécifie si les tables ou colonnes source non mappées sont passées avec leurs noms source afin d'être filtrées ou de déclencher une erreur.</summary>
        <value>Une des valeurs de <see cref="T:System.Data.MissingMappingAction" />. La valeur par défaut est <see langword="Passthrough" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.IDataAdapter.TableMappings%2A> propriété fournit le mappage principal entre les enregistrements retournés et <xref:System.Data.DataSet>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur définie ne fait pas partie des valeurs <see cref="T:System.Data.MissingMappingAction" />.</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique ou spécifie si les tables et les colonnes source absentes, ainsi que leurs relations, sont ajoutées au schéma du groupe de données, sont ignorées ou déclenchent une erreur.</summary>
        <value>Une des valeurs de <see cref="T:System.Data.MissingSchemaAction" />. La valeur par défaut est <see langword="Add" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">La valeur définie ne fait pas partie des valeurs <see cref="T:System.Data.MissingSchemaAction" />.</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique la manière dont une table source est mappée à une table du groupe de données.</summary>
        <value>Collection qui fournit le mappage principal entre les enregistrements retournés et <see cref="T:System.Data.DataSet" />. La valeur par défaut est une collection vide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.IDataAdapter> n’utilise les mappages pour la table source nommée « Table ». Sélectionnez tous, les instructions INSERT, DELETE et UPDATE retournant des données est nécessaire à l’aide d’affectation de noms cohérente des colonnes. Les noms de colonne retournés dans les enregistrements doivent être uniques, sinon les colonnes avec des noms dupliqués remplacement les données précédentes. Sur <xref:System.Data.IDataAdapter.Update%2A>uniquement la table mappée à la table source nommée « Table » les modifications sont rapprochées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> utilisé pour mettre à jour la source de données.</param>
        <summary>Appelle les instructions INSERT, UPDATE ou DELETE respectives pour chaque ligne insérée, mise à jour ou supprimée dans le <see cref="T:System.Data.DataSet" /> spécifié à partir d'un <see cref="T:System.Data.DataTable" /> appelé "Table".</summary>
        <returns>Nombre de lignes correctement mises à jour à partir du <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’une application appelle la <xref:System.Data.IDataAdapter.Update%2A> (méthode), la <xref:System.Data.IDataAdapter> examine le <xref:System.Data.DataRow.RowState%2A> propriété et exécute les instructions INSERT, UPDATE ou DELETE requises manière itérative pour chaque ligne, selon l’ordre des index configurés dans le <xref:System.Data.DataSet>. Par exemple, <xref:System.Data.IDataAdapter.Update%2A> susceptible d’exécuter une instruction DELETE, suivie d’une instruction INSERT et ensuite une autre instruction DELETE, en raison de l’ordre des lignes dans le <xref:System.Data.DataTable>.  
  
 Sachez que ces instructions ne sont pas exécutées comme un traitement par lots ; chaque ligne est mise à jour individuellement. Une application peut appeler le <xref:System.Data.DataSet.GetChanges%2A> méthode si vous devez contrôler l’ordre des types d’instructions (par exemple, les instructions INSERT avant les mises à jour). Pour plus d’informations, consultez [mise à jour des Sources de données avec DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si les instructions INSERT, UPDATE ou DELETE n’ont pas été spécifiées, la <xref:System.Data.Common.DataAdapter.Update%2A> méthode génère une exception. Toutefois, vous pouvez créer un <xref:System.Data.SqlClient.SqlCommandBuilder> ou <xref:System.Data.OleDb.OleDbCommandBuilder> objet pour générer automatiquement des instructions SQL pour les mises à jour de table simple si vous définissez le `SelectCommand` propriété d’un fournisseur de données .NET Framework. Ensuite, les instructions SQL supplémentaires que vous ne définissez pas sont générées par CommandBuilder. Cette logique de génération requiert des informations de colonne clé dans le <xref:System.Data.DataSet>. Pour plus d’informations, consultez [génération de commandes avec CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Le <xref:System.Data.Common.DataAdapter.Update%2A> méthode récupère des lignes de la table indiquée dans le premier mappage avant d’effectuer une mise à jour. Le <xref:System.Data.Common.DataAdapter.Update%2A> puis met à jour la ligne à l’aide de la valeur de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propriété. Au-delà, les lignes retournés sont ignorés.  
  
 Une fois que toutes les données sont chargées dans le <xref:System.Data.DataSet>, le <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> événement est déclenché, permettant à l’utilisateur d’inspecter le rapprochée <xref:System.Data.DataSet> paramètres retournés par la commande de sortie de ligne et. Après qu’une ligne mise à jour avec succès, les modifications apportées à cette ligne sont acceptées.  
  
 Lorsque vous utilisez <xref:System.Data.IDataAdapter.Update%2A>, l’ordre d’exécution est comme suit :  
  
1.  Les valeurs dans le <xref:System.Data.DataRow> sont déplacées vers les valeurs de paramètre.  
  
2.  L'événement <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> est déclenché.  
  
3.  La commande s’exécute.  
  
4.  Si la commande est définie sur `FirstReturnedRecord`, puis le premier résultat retourné est placé le <xref:System.Data.DataRow>.  
  
5.  S’il existe des paramètres de sortie, ils sont placés dans le <xref:System.Data.DataRow>.  
  
6.  L'événement <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> est déclenché.  
  
7.  La méthode <xref:System.Data.DataRow.AcceptChanges%2A> est appelée.  
  
 Chaque commande associée à la <xref:System.Data.IDataAdapter> a généralement une collection de paramètres associée. Les paramètres sont mappés à la ligne actuelle via la `SourceColumn` et `SourceVersion` propriétés d’un fournisseur de données .NET Framework `Parameter` classe. `SourceColumn` fait référence à un <xref:System.Data.DataTable> colonne qui les <xref:System.Data.IDataAdapter> références pour obtenir des valeurs de paramètre de la ligne actuelle.  
  
 `SourceColumn` fait référence au nom de colonne non mappée avant que tous les mappages de table ont été appliquées. Si `SourceColumn` fait référence à une colonne qui n’existe pas, l’action effectuée dépend d’une de ces <xref:System.Data.MissingMappingAction> valeurs.  
  
|Valeur d'énumération|Action effectuée|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utiliser les noms des colonnes sources et les noms de tables dans le <xref:System.Data.DataSet> si aucun mappage n’est présent.|  
|`MissingMappingAction.Ignore`|A <xref:System.SystemException> est généré. Lorsque les mappages sont définies explicitement, un mappage absent pour un paramètre d’entrée est généralement dû à une erreur.|  
|`MissingMappingAction.Error`|A <xref:System.SystemException> est généré.|  
  
 Le `SourceColumn` propriété est également utilisée pour mapper la valeur de sortie ou de paramètres d’entrée/sortie sauvegarder sur le `DataSet`. Une exception est générée si elle fait référence à une colonne inexistante.  
  
 Le `SourceVersion` propriété d’un fournisseur de données .NET Framework `Parameter` classe détermine s’il faut utiliser le `Original`, `Current`, ou `Proposed` version de la valeur de colonne. Cette fonctionnalité est souvent utilisée pour inclure des valeurs d’origine dans la clause WHERE d’une instruction UPDATE pour rechercher les violations d’accès concurrentiel optimiste.  
  
> [!NOTE]
>  Si une erreur se produit lors de la mise à jour une ligne, une exception est levée et l’exécution de la mise à jour n’est plus disponible. Pour continuer l’opération de mise à jour sans générer d’exception quand une erreur s’est produite, définissez la <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propriété `true` avant d’appeler <xref:System.Data.Common.DbDataAdapter.Update%2A>. Vous pouvez également répondre aux erreurs sur une ligne par ligne dans le `RowUpdated` événements d’un DataAdapter. Pour continuer l’opération de mise à jour sans générer d’exception dans le `RowUpdated` jeu d’événements, le <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propriété de la <xref:System.Data.Common.RowUpdatedEventArgs> à <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 L’exemple suivant utilise la classe dérivée, <xref:System.Data.OleDb.OleDbDataAdapter>, en <xref:System.Data.Common.DataAdapter.Update%2A> la source de données. Cet exemple suppose que vous avez créé un <xref:System.Data.OleDb.OleDbDataAdapter> et un <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">Une tentative d'exécution d'une instruction INSERT, UPDATE ou DELETE n'a abouti à l'affectation d'aucun enregistrement.</exception>
      </Docs>
    </Member>
  </Members>
</Type>