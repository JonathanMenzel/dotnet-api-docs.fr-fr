<Type Name="Comparer&lt;T&gt;" FullName="System.Collections.Generic.Comparer&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f16f70a6ecc86c79689f40eb54b9d7bd114712aa" /><Meta Name="ms.sourcegitcommit" Value="f9e71795ba0f9c2dfaa74bec233343ed0f3ffd99" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/15/2019" /><Meta Name="ms.locfileid" Value="57928020" /></Metadata><TypeSignature Language="C#" Value="public abstract class Comparer&lt;T&gt; : System.Collections.Generic.IComparer&lt;T&gt;, System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Comparer`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IComparer`1&lt;!T&gt;, class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Comparer`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Comparer(Of T)&#xA;Implements IComparer, IComparer(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Comparer abstract : System::Collections::Generic::IComparer&lt;T&gt;, System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type Comparer&lt;'T&gt; = class&#xA;    interface IComparer&#xA;    interface IComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">Type des objets à comparer.</typeparam>
    <summary>Fournit une classe de base pour les implémentations de l'interface générique <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dériver de cette classe pour fournir une implémentation personnalisée de la <xref:System.Collections.Generic.IComparer%601> interface pour une utilisation avec les classes de collection, tels que le <xref:System.Collections.Generic.SortedList%602> et <xref:System.Collections.Generic.SortedDictionary%602> classes génériques.  
  
 La différence entre la dérivation de la <xref:System.Collections.Generic.Comparer%601> classe et implémenter la <xref:System.IComparable?displayProperty=nameWithType> interface se présente comme suit :  
  
-   Pour spécifier comment les deux objets doivent être comparés par défaut, implémentez le <xref:System.IComparable?displayProperty=nameWithType> interface dans votre classe. Cela garantit que les opérations de tri utilisera le code de comparaison par défaut que vous avez fourni.  
  
-   Pour définir un comparateur à utiliser au lieu du comparateur par défaut, dérivez à partir de la <xref:System.Collections.Generic.Comparer%601> classe. Vous pouvez ensuite utiliser ce comparateur dans les opérations de tri qui prennent un comparateur en tant que paramètre.  
  
 L’objet retourné par la <xref:System.Collections.Generic.Comparer%601.Default%2A> propriété utilise le <xref:System.IComparable%601?displayProperty=nameWithType> interface générique (`IComparable<T>` en c#, `IComparable(Of T)` en Visual Basic) pour comparer deux objets. Si type `T` n’implémente pas le <xref:System.IComparable%601?displayProperty=nameWithType> interface générique, le <xref:System.Collections.Generic.Comparer%601.Default%2A> propriété retourne un <xref:System.Collections.Generic.Comparer%601> qui utilise le <xref:System.IComparable?displayProperty=nameWithType> interface.  
  
   
  
## Examples  
 L’exemple suivant dérive une classe, `BoxLengthFirst`, à partir de la <xref:System.Collections.Generic.Comparer%601> classe. Ce comparateur compare deux objets de type `Box`. Elle les trie tout d’abord en longueur, puis en hauteur et par la largeur. Le `Box` la classe implémente le <xref:System.IComparable%601> interface pour contrôler la comparaison par défaut entre deux `Box` objets. Cette implémentation par défaut trie d’abord par la hauteur, puis par longueur, puis par la largeur. L’exemple montre les différences entre les deux comparaisons en triant une liste de `Box` objets tout d’abord en utilisant le `BoxLengthFirst` à l’aide du comparateur par défaut et le comparateur.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.BoxCompare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> et <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> peuvent se comporter différemment en termes de culture et respectant la casse.  
  
Pour les comparaisons de chaînes, la <see cref="T:System.StringComparer" /> classe est préférable <c>comparateur&lt;chaîne&gt;</c>.  Propriétés de la <see cref="T:System.StringComparer" /> classe retournent des instances prédéfinies qui effectuent des comparaisons de chaînes avec différentes combinaisons de culture et respectant la casse.  Le respect de la casse et de la culture est cohérentes parmi les membres du même <see cref="T:System.StringComparer" /> instance.  
  
Pour plus d’informations sur les comparaisons propres à la culture, consultez le <see cref="N:System.Globalization" /> espace de noms et [globalisation et localisation](~/docs/standard/globalization-localization/index.md).</para></block>
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.StringComparer" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Comparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Comparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Comparer`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As T, y As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(T x, T y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : 'T * 'T -&gt; int" Usage="comparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">Premier objet à comparer.</param>
        <param name="y">Deuxième objet à comparer.</param>
        <summary>En cas de substitution dans une classe dérivée, effectue une comparaison de deux objets du même type et retourne une valeur indiquant si l'un est inférieur, égal ou supérieur à l'autre.</summary>
        <returns>Entier signé qui indique les valeurs relatives de <paramref name="x" /> et <paramref name="y" />, comme indiqué dans le tableau suivant.  
  
 <list type="table"><listheader><term> Value 
 </term><description> Signification 
 </description></listheader><item><term> Inférieure à zéro 
 </term><description><paramref name="x" /> est inférieur à <paramref name="y" />.  
  
 </description></item><item><term> Zéro 
 </term><description><paramref name="x" /> est égal à <paramref name="y" />.  
  
 </description></item><item><term> Supérieure à zéro 
 </term><description><paramref name="x" /> est supérieur à <paramref name="y" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez cette méthode pour fournir un texte personnalisé comparaison d’ordre pour le type de tri `T`.  
  
   
  
## Examples  
 L’exemple suivant définit un comparateur de `Box` objets qui peuvent être utilisés au lieu du comparateur par défaut. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Collections.Generic.Comparer%601> classe.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#5)]
 [!code-vb[System.Collections.Generic.BoxCompare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le type <paramref name="T" /> n'implémente pas l'interface générique <see cref="T:System.IComparable`1" /> ni l'interface <see cref="T:System.IComparable" />.</exception>
        <block subset="none" type="overrides"><para>Comparaison <see langword="null" /> avec toute référence de type est autorisé et ne génère pas d’exception. Une référence null est considérée comme inférieure à toute référence qui n’est pas null.  
  
Pour plus d’informations sur les comparaisons propres à la culture, consultez le <see cref="N:System.Globalization" /> espace de noms et [globalisation et localisation](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Create (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Comparer`1&lt;!T&gt; Create(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (comparison As Comparison(Of T)) As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::Comparer&lt;T&gt; ^ Create(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="static member Create : Comparison&lt;'T&gt; -&gt; System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Create comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="comparison">La comparaison à utiliser.</param>
        <summary>Crée un comparateur à partir d'une comparaison spécifiée.</summary>
        <returns>Nouveau comparateur.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.Comparer`1&lt;!T&gt; Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Comparer`1.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::Comparer&lt;T&gt; ^ Default { System::Collections::Generic::Comparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne un comparateur d'ordre de tri par défaut pour le type spécifié par l'argument générique.</summary>
        <value>Objet qui hérite de <see cref="T:System.Collections.Generic.Comparer`1" /> et sert de comparateur d'ordre de tri pour le type <paramref name="T" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Collections.Generic.Comparer%601> retourné par cette propriété utilise la <xref:System.IComparable%601?displayProperty=nameWithType> interface générique (`IComparable<T>` en c#, `IComparable(Of T)` en Visual Basic) pour comparer deux objets. Si type `T` n’implémente pas le <xref:System.IComparable%601?displayProperty=nameWithType> interface générique, cette propriété retourne un <xref:System.Collections.Generic.Comparer%601> qui utilise le <xref:System.IComparable?displayProperty=nameWithType> interface.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Collections.Generic.Comparer%601.Default%2A> propriété pour obtenir un objet qui effectue la comparaison par défaut. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Collections.Generic.Comparer%601> classe.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxCompare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Pour les comparaisons de chaînes, la <see cref="T:System.StringComparer" /> classe est préférable <c>comparateur&lt;chaîne&gt;</c> (<c>comparateur (Of String)</c> en Visual Basic).  Propriétés de la <see cref="T:System.StringComparer" /> classe retournent des instances prédéfinies qui effectuent des comparaisons de chaînes avec différentes combinaisons de culture et respectant la casse.  Le respect de la casse et de la culture est cohérentes parmi les membres du même <see cref="T:System.StringComparer" /> instance.  
  
Pour plus d’informations sur les comparaisons propres à la culture, consultez le <see cref="N:System.Globalization" /> espace de noms et [globalisation et localisation](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Premier objet à comparer.</param>
        <param name="y">Deuxième objet à comparer.</param>
        <summary>Compare deux objets et retourne une valeur indiquant si le premier est inférieur, égal ou supérieur au second.</summary>
        <returns>Entier signé qui indique les valeurs relatives de <paramref name="x" /> et <paramref name="y" />, comme indiqué dans le tableau suivant.  
  
 <list type="table"><listheader><term> Value 
 </term><description> Signification 
 </description></listheader><item><term> Inférieure à zéro 
 </term><description><paramref name="x" /> est inférieur à <paramref name="y" />.  
  
 </description></item><item><term> Zéro 
 </term><description><paramref name="x" /> est égal à <paramref name="y" />.  
  
 </description></item><item><term> Supérieure à zéro 
 </term><description><paramref name="x" /> est supérieur à <paramref name="y" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est un wrapper pour le <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> (méthode), de sorte que `obj` doit être casté en type spécifié par l’argument générique `T` de l’instance actuelle. Si elle ne peut pas être convertie en `T`, un <xref:System.ArgumentException> est levée.  
  
 Comparaison `null` avec toute référence de type est autorisé et ne génère pas d’exception. Lors du tri, `null` est considéré comme étant inférieure à n’importe quel autre objet.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> méthode pour comparer deux objets. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Collections.Generic.Comparer%601> classe.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#4)]
 [!code-vb[System.Collections.Generic.BoxCompare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="x" /> ou <paramref name="y" /> est d'un type qui ne peut pas être casté en type <paramref name="T" />.  
  
ou 
 <paramref name="x" /> et <paramref name="y" /> n'implémentent pas l'interface générique <see cref="T:System.IComparable`1" /> ni l'interface <see cref="T:System.IComparable" />.</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> et <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> se comportent différemment en termes de culture et respectant la casse.  
  
Pour les comparaisons de chaînes, la <see cref="T:System.StringComparer" /> classe est préférable <c>comparateur&lt;chaîne&gt;</c>.  Propriétés de la <see cref="T:System.StringComparer" /> classe retournent des instances prédéfinies qui effectuent des comparaisons de chaînes avec différentes combinaisons de culture et respectant la casse.  Le respect de la casse et de la culture est cohérentes parmi les membres du même <see cref="T:System.StringComparer" /> instance.  
  
Pour plus d’informations sur les comparaisons propres à la culture, consultez le <see cref="N:System.Globalization" /> espace de noms et [globalisation et localisation](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>