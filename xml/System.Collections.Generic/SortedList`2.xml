<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SortedList`2.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac572c1e1ae48ac3af90725e33b902861db5d83679a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72c1e1ae48ac3af90725e33b902861db5d83679a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The type of keys in the collection.</source>
          <target state="translated">Type de clés de la collection.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The type of values in the collection.</source>
          <target state="translated">Type de valeurs de la collection.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.SortedList`2">
          <source>Represents a collection of key/value pairs that are sorted by key based on the associated <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation.</source>
          <target state="translated">Représente une collection de paires clé/valeur triées par clé en fonction de l'implémentation <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> associée.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> generic class is an array of key/value pairs with O(log <ph id="ph2">`n`</ph>) retrieval, where n is the number of elements in the dictionary.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classe générique est un tableau de paires clé/valeur avec O (journal <ph id="ph2">`n`</ph>) extraction, où n est le nombre d’éléments dans le dictionnaire.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>In this, it is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> generic class.</source>
          <target state="translated">Dans ce cas, il est similaire à la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> classe générique.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The two classes have similar object models, and both have O(log <ph id="ph1">`n`</ph>) retrieval.</source>
          <target state="translated">Les deux classes ont des modèles d’objet semblables, et ils sont O (journal <ph id="ph1">`n`</ph>) la récupération.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Where the two classes differ is in memory use and speed of insertion and removal:</source>
          <target state="translated">Où les deux classes diffèrent se trouve dans l’utilisation de la mémoire et la vitesse d’insertion et de suppression :</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> uses less memory than <ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> utilise moins de mémoire que <ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> has faster insertion and removal operations for unsorted data, O(log <ph id="ph2">`n`</ph>) as opposed to O(<ph id="ph3">`n`</ph>) for <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> a d’insertion plus rapide et les opérations de suppression pour les données non triées, O (journal <ph id="ph2">`n`</ph>) par opposition à O (<ph id="ph3">`n`</ph>) pour <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>If the list is populated all at once from sorted data, <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is faster than <ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>.</source>
          <target state="translated">Si la liste est remplie à la fois à partir de données triées, <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> est plus rapide que <ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Another difference between the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classes is that <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> supports efficient indexed retrieval of keys and values through the collections returned by the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> properties.</source>
          <target state="translated">Une autre différence entre les <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> et <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classes est que <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> prend en charge la récupération indexée efficace des clés et valeurs via les collections retournées par la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> et <ph id="ph5">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propriétés.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values.</source>
          <target state="translated">Il n’est pas nécessaire de régénérer les listes lorsque les propriétés sont accessibles, car les listes sont simplement des wrappers pour les tableaux internes de clés et valeurs.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property for indexed retrieval of values from a sorted list of strings:</source>
          <target state="translated">Le code suivant illustre l’utilisation de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propriété pour la récupération indexée de valeurs dans une liste triée de chaînes :</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is implemented as an array of key/value pairs, sorted by the key.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> est implémenté comme un tableau de paires clé/valeur, trié par la clé.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Each element can be retrieved as a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> object.</source>
          <target state="translated">Chaque élément peut être récupéré comme un <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Key objects must be immutable as long as they are used as keys in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Les objets de clé doivent être immuables tant qu’ils sont utilisés en tant que clés dans le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique.</source>
          <target state="translated">Chaque clé dans un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> doit être unique.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be, if the type of values in the list, <ph id="ph2">`TValue`</ph>, is a reference type.</source>
          <target state="translated">Une clé ne peut pas être <ph id="ph1">`null`</ph>, mais une valeur peut être, si le type de valeurs dans la liste, <ph id="ph2">`TValue`</ph>, est un type référence.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> requires a comparer implementation to sort and to perform comparisons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> requiert l’implémentation d’un comparateur pour trier et effectuer des comparaisons.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated">Le comparateur par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type de la clé <ph id="ph2">`TKey`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type de la clé <ph id="ph2">`TKey`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>If the key type <ph id="ph1">`TKey`</ph> does not implement either interface, you can specify a <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementation in a constructor overload that accepts a <ph id="ph3">`comparer`</ph> parameter.</source>
          <target state="translated">Si le type de clé <ph id="ph1">`TKey`</ph> n’implémente pas l’interface, vous pouvez spécifier un <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implémentation dans une surcharge de constructeur qui accepte un <ph id="ph3">`comparer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can hold.</source>
          <target state="translated">La capacité d’un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> est le nombre d’éléments du <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> peut contenir.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Lorsque des éléments sont ajoutés à un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, la capacité est automatiquement augmentée si nécessaire, en réallouant le tableau interne.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">La capacité peut être diminuée en appelant <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> ou en définissant le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propriété explicitement.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Réduction de la capacité réalloue la mémoire et copie tous les éléments dans le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>For very large <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id="ph2">`enabled`</ph> attribute of the  configuration element to <ph id="ph3">`true`</ph> in the run-time environment.</source>
          <target state="translated">Pour les très volumineux <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> des objets, vous pouvez augmenter la capacité maximale de 2 milliards des éléments sur un système 64 bits en définissant le <ph id="ph2">`enabled`</ph> attribut de l’élément de configuration <ph id="ph3">`true`</ph> dans l’environnement d’exécution.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.</source>
          <target state="translated">Le <ph id="ph1">`foreach`</ph> instruction du langage c# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) retourne un objet du type des éléments dans la collection.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Since the elements of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> are key/value pairs, the element type is not the type of the key or the type of the value.</source>
          <target state="translated">Depuis les éléments de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> sont des paires clé/valeur, le type d’élément n’est pas le type de la clé ou le type de la valeur.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Instead, the element type is <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>.</source>
          <target state="translated">Au lieu de cela, le type d’élément est <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>For example:</source>
          <target state="translated">Exemple :</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The <ph id="ph1">`foreach`</ph> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</source>
          <target state="translated">La <ph id="ph1">`foreach`</ph> instruction est un wrapper autour de l’énumérateur, qui permet la lecture à partir n’écrit ne pas à la collection.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">L’exemple de code suivant crée un vide <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> de chaînes avec les clés de chaîne et utilise le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> méthode pour ajouter des éléments.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">L’exemple montre que la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> méthode lève une exception une <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> lors de la tentative d’ajout d’une clé dupliquée.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">L’exemple utilise le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propriété (l’indexeur en c#) pour récupérer des valeurs, démontrant qu’un <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> est levée lorsqu’une clé demandée n’est pas présente et indiquant que la valeur associée à une clé peut être remplacée.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list, and it shows how to use the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> method to test whether a key exists before calling the <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple montre comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> méthode comme un moyen plus efficace pour récupérer des valeurs si un programme doit souvent essayer des valeurs de clés qui ne sont pas dans la liste triée, et il montre comment utiliser la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> méthode pour tester si une clé existe avant d’appeler le <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The example shows how to enumerate the keys and values in the sorted list and how to enumerate the keys and values alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">L’exemple montre comment énumérer les clés et valeurs dans la liste triée et comment énumérer les clés et valeurs uniquement à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> propriété et le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Finally, the example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Remove%2A&gt;</ph> method.</source>
          <target state="translated">Enfin, l’exemple montre le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Remove%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">Statique public (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> en Visual Basic) de ce type sont thread-safe.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">Il n'est pas garanti que les membres d'instance soient thread-safe.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> peut prendre en charge plusieurs lecteurs simultanément, tant que la collection n’est pas modifiée.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Même dans ce cas, l’énumération d’une collection n’est intrinsèquement pas une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.SortedList`2">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that is empty, has the default initial capacity, and uses the default <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> qui est vide, possède la capacité initiale par défaut et utilise le <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> par défaut.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the default comparer.</source>
          <target state="translated">Chaque clé dans un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> doit être unique selon le comparateur par défaut.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>This constructor uses the default value for the initial capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Ce constructeur utilise la valeur par défaut pour la capacité initiale de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>To set the initial capacity, use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">Pour définir la capacité initiale, utilisez le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Si la taille finale de la collection peut être estimée, en spécifiant la capacité initiale évite d’avoir à effectuer un certain nombre d’opérations de redimensionnement lors de l’ajout d’éléments à la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>This constructor uses the default comparer for <ph id="ph1">`TKey`</ph>.</source>
          <target state="translated">Ce constructeur utilise le comparateur par défaut pour <ph id="ph1">`TKey`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>To specify a comparer, use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Pour spécifier un comparateur, utilisez le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>The default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated">Le comparateur par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type de la clé <ph id="ph2">`TKey`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type de la clé <ph id="ph2">`TKey`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>If the key type <ph id="ph1">`TKey`</ph> does not implement either interface, you can specify a <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementation in a constructor overload that accepts a <ph id="ph3">`comparer`</ph> parameter.</source>
          <target state="translated">Si le type de clé <ph id="ph1">`TKey`</ph> n’implémente pas l’interface, vous pouvez spécifier un <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implémentation dans une surcharge de constructeur qui accepte un <ph id="ph3">`comparer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Ce constructeur est une opération o (1).</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">L’exemple de code suivant crée un vide <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> de chaînes avec les clés de chaîne et utilise le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> méthode pour ajouter des éléments.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">L’exemple montre que la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> méthode lève une exception une <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> lors de la tentative d’ajout d’une clé dupliquée.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing keys.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> à utiliser lors de la comparaison de clés.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the default <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> for the type of the key.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> pour utiliser <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> par défaut pour le type de la clé.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that is empty, has the default initial capacity, and uses the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> qui est vide, possède la capacité initiale par défaut et utilise le <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the specified comparer.</source>
          <target state="translated">Chaque clé dans un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> doit être unique selon le comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>This constructor uses the default value for the initial capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Ce constructeur utilise la valeur par défaut pour la capacité initiale de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>To set the initial capacity, use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Pour définir la capacité initiale, utilisez le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Si la taille finale de la collection peut être estimée, en spécifiant la capacité initiale évite d’avoir à effectuer un certain nombre d’opérations de redimensionnement lors de l’ajout d’éléments à la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Ce constructeur est une opération o (1).</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>The following code example creates a sorted list with a case-insensitive comparer for the current culture.</source>
          <target state="translated">L’exemple de code suivant crée une liste triée avec un comparateur pas la casse pour la culture actuelle.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>The example adds four elements, some with lower-case keys and some with upper-case keys.</source>
          <target state="translated">L’exemple ajoute quatre éléments, certains avec des clés minuscules et autres avec des clés de majuscules.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</source>
          <target state="translated">L’exemple essaie ensuite d’ajouter un élément avec une clé qui diffère d’une clé existante uniquement par la casse, intercepte l’exception obtenue et affiche un message d’erreur.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>Finally, the example displays the elements in case-insensitive sort order.</source>
          <target state="translated">Enfin, l’exemple affiche les éléments dans l’ordre de tri de la casse.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> whose elements are copied to the new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> dont les éléments sont copiés dans le nouveau <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that contains elements copied from the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>, has sufficient capacity to accommodate the number of elements copied, and uses the default <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> qui contient des éléments copiés à partir du <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> spécifié, possède une capacité suffisante pour accepter le nombre d'éléments copiés et utilise le <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> par défaut.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the default comparer; likewise, every key in the source <ph id="ph2">`dictionary`</ph> must also be unique according to the default comparer.</source>
          <target state="translated">Chaque clé dans un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> doit être unique en fonction de la valeur par défaut comparateur ; de même, toutes les clés de la source <ph id="ph2">`dictionary`</ph> doit également être unique selon le comparateur par défaut.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The capacity of the new <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is set to the number of elements in <ph id="ph2">`dictionary`</ph>, so no resizing takes place while the list is being populated.</source>
          <target state="translated">La capacité de la nouvelle <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> est défini sur le nombre d’éléments dans <ph id="ph2">`dictionary`</ph>, de sorte qu’aucun redimensionnement n’intervient lors du remplissage de la liste.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>This constructor uses the default comparer for <ph id="ph1">`TKey`</ph>.</source>
          <target state="translated">Ce constructeur utilise le comparateur par défaut pour <ph id="ph1">`TKey`</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>To specify a comparer, use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Pour spécifier un comparateur, utilisez le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated">Le comparateur par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type de la clé <ph id="ph2">`TKey`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type de la clé <ph id="ph2">`TKey`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>If the key type <ph id="ph1">`TKey`</ph> does not implement either interface, you can specify a <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementation in a constructor overload that accepts a <ph id="ph3">`comparer`</ph> parameter.</source>
          <target state="translated">Si le type de clé <ph id="ph1">`TKey`</ph> n’implémente pas l’interface, vous pouvez spécifier un <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implémentation dans une surcharge de constructeur qui accepte un <ph id="ph3">`comparer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>If the data in <ph id="ph1">`dictionary`</ph> are sorted, this constructor is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is the number of elements in <ph id="ph4">`dictionary`</ph>.</source>
          <target state="translated">Si les données de <ph id="ph1">`dictionary`</ph> sont triées, ce constructeur est un O (<ph id="ph2">`n`</ph>) opération, où <ph id="ph3">`n`</ph> est le nombre d’éléments dans <ph id="ph4">`dictionary`</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>Otherwise it is an O(<ph id="ph1">`n`</ph><ph id="ph2">*</ph><ph id="ph3">`n`</ph>) operation.</source>
          <target state="translated">Dans le cas contraire, c’est un O (<ph id="ph1">`n`</ph><ph id="ph2">*</ph><ph id="ph3">`n`</ph>) opération.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The following code example shows how to use <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to create a sorted copy of the information in a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, by passing the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> to the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%29&gt;</ph> constructor.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> pour créer une copie triée des informations dans un <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, en passant le <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> à la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> contains one or more duplicate keys.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> contient une ou plusieurs clés en double.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> can contain.</source>
          <target state="translated">Nombre initial d'éléments que <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> peut contenir.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that is empty, has the specified initial capacity, and uses the default <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> qui est vide, possède la capacité initiale spécifiée et utilise le <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> par défaut.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the default comparer.</source>
          <target state="translated">Chaque clé dans un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> doit être unique selon le comparateur par défaut.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can hold before resizing.</source>
          <target state="translated">La capacité d’un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> est le nombre d’éléments qui le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> peut contenir avant redimensionnement.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Lorsque des éléments sont ajoutés à un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, la capacité est automatiquement augmentée si nécessaire, en réallouant le tableau interne.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Si la taille de la collection peut être estimée, en spécifiant la capacité initiale évite d’avoir à effectuer un certain nombre d’opérations de redimensionnement lors de l’ajout d’éléments à la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">La capacité peut être diminuée en appelant <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> ou en définissant le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propriété explicitement.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Réduction de la capacité réalloue la mémoire et copie tous les éléments dans le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>This constructor uses the default comparer for <ph id="ph1">`TKey`</ph>.</source>
          <target state="translated">Ce constructeur utilise le comparateur par défaut pour <ph id="ph1">`TKey`</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>To specify a comparer, use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Pour spécifier un comparateur, utilisez le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>The default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated">Le comparateur par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type de la clé <ph id="ph2">`TKey`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type de la clé <ph id="ph2">`TKey`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>If the key type <ph id="ph1">`TKey`</ph> does not implement either interface, you can specify a <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementation in a constructor overload that accepts a <ph id="ph3">`comparer`</ph> parameter.</source>
          <target state="translated">Si le type de clé <ph id="ph1">`TKey`</ph> n’implémente pas l’interface, vous pouvez spécifier un <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implémentation dans une surcharge de constructeur qui accepte un <ph id="ph3">`comparer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">Ce constructeur est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">`capacity`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>The following code example creates a sorted list with an initial capacity of 4 and populates it with 4 entries.</source>
          <target state="translated">L’exemple de code suivant crée une liste triée avec une capacité initiale de 4 et le remplit avec 4 entrées.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> est inférieur à zéro.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> whose elements are copied to the new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> dont les éléments sont copiés dans le nouveau <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing keys.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> à utiliser lors de la comparaison de clés.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the default <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> for the type of the key.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> pour utiliser <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> par défaut pour le type de la clé.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that contains elements copied from the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>, has sufficient capacity to accommodate the number of elements copied, and uses the specified <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> qui contient des éléments copiés à partir du <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> spécifié, possède une capacité suffisante pour accepter le nombre d'éléments copiés et utilise le <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the specified comparer; likewise, every key in the source <ph id="ph2">`dictionary`</ph> must also be unique according to the specified comparer.</source>
          <target state="translated">Chaque clé dans un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> doit être unique en fonction de l’élément spécifié comparateur ; de même, toutes les clés de la source <ph id="ph2">`dictionary`</ph> doit également être unique selon le comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>The capacity of the new <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is set to the number of elements in <ph id="ph2">`dictionary`</ph>, so no resizing takes place while the list is being populated.</source>
          <target state="translated">La capacité de la nouvelle <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> est défini sur le nombre d’éléments dans <ph id="ph2">`dictionary`</ph>, de sorte qu’aucun redimensionnement n’intervient lors du remplissage de la liste.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>If the data in <ph id="ph1">`dictionary`</ph> are sorted, this constructor is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is the number of elements in <ph id="ph4">`dictionary`</ph>.</source>
          <target state="translated">Si les données de <ph id="ph1">`dictionary`</ph> sont triées, ce constructeur est un O (<ph id="ph2">`n`</ph>) opération, où <ph id="ph3">`n`</ph> est le nombre d’éléments dans <ph id="ph4">`dictionary`</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>Otherwise it is an O(<ph id="ph1">`n`</ph><ph id="ph2">*</ph><ph id="ph3">`n`</ph>) operation.</source>
          <target state="translated">Dans le cas contraire, c’est un O (<ph id="ph1">`n`</ph><ph id="ph2">*</ph><ph id="ph3">`n`</ph>) opération.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>The following code example shows how to use <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to create a case-insensitive sorted copy of the information in a case-insensitive <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, by passing the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> to the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> pour créer un non-respect de la casse triée copie des informations dans un non-respect de la casse <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, en passant le <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> à la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>In this example, the case-insensitive comparers are for the current culture.</source>
          <target state="translated">Dans cet exemple, les comparateurs pas la casse sont pour la culture actuelle.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> contains one or more duplicate keys.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> contient une ou plusieurs clés en double.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> can contain.</source>
          <target state="translated">Nombre initial d'éléments que <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> peut contenir.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing keys.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> à utiliser lors de la comparaison de clés.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the default <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> for the type of the key.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> pour utiliser <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> par défaut pour le type de la clé.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that is empty, has the specified initial capacity, and uses the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> qui est vide, possède la capacité initiale spécifiée et utilise le <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the specified comparer.</source>
          <target state="translated">Chaque clé dans un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> doit être unique selon le comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can hold before resizing.</source>
          <target state="translated">La capacité d’un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> est le nombre d’éléments qui le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> peut contenir avant redimensionnement.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Lorsque des éléments sont ajoutés à un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, la capacité est automatiquement augmentée si nécessaire, en réallouant le tableau interne.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Si la taille de la collection peut être estimée, en spécifiant la capacité initiale évite d’avoir à effectuer un certain nombre d’opérations de redimensionnement lors de l’ajout d’éléments à la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">La capacité peut être diminuée en appelant <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> ou en définissant le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propriété explicitement.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Réduction de la capacité réalloue la mémoire et copie tous les éléments dans le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">Ce constructeur est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">`capacity`</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The following code example creates a sorted list with an initial capacity of 5 and a case-insensitive comparer for the current culture.</source>
          <target state="translated">L’exemple de code suivant crée une liste triée avec une capacité initiale de 5 et un comparateur pas la casse pour la culture actuelle.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The example adds four elements, some with lower-case keys and some with upper-case keys.</source>
          <target state="translated">L’exemple ajoute quatre éléments, certains avec des clés minuscules et autres avec des clés de majuscules.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</source>
          <target state="translated">L’exemple essaie ensuite d’ajouter un élément avec une clé qui diffère d’une clé existante uniquement par la casse, intercepte l’exception obtenue et affiche un message d’erreur.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Finally, the example displays the elements in case-insensitive sort order.</source>
          <target state="translated">Enfin, l’exemple affiche les éléments dans l’ordre de tri de la casse.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> est inférieur à zéro.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>The key of the element to add.</source>
          <target state="translated">Clé de l'élément à ajouter.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>The value of the element to add.</source>
          <target state="translated">Valeur de l'élément à ajouter.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>Adds an element with the specified key and value into the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Ajoute un élément avec la clé et la valeur spécifiées dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be, if the type of values in the sorted list, <ph id="ph2">`TValue`</ph>, is a reference type.</source>
          <target state="translated">Une clé ne peut pas être <ph id="ph1">`null`</ph>, mais une valeur peut être, si le type de valeurs dans la liste triée, <ph id="ph2">`TValue`</ph>, est un type référence.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>; for example, <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">Vous pouvez également utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>; par exemple, <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>However, if the specified key already exists in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Toutefois, si la clé spécifiée existe déjà dans le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, ce qui affecte le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propriété remplace l’ancienne valeur.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En revanche, le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> méthode ne modifie pas les éléments existants.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> already equals <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> est déjà égale à <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph>, la capacité de le <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> est augmentée en réallouant automatiquement le tableau interne, et les éléments existants sont copiés dans le nouveau tableau avant le nouvel élément est ajouté.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation for unsorted data, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<ph id="ph1">`n`</ph>) opération pour les données non triées, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>It is an O(log <ph id="ph1">`n`</ph>) operation if the new element is added at the end of the list.</source>
          <target state="translated">Il s’agit d’un O (journal <ph id="ph1">`n`</ph>) opération si le nouvel élément est ajouté à la fin de la liste.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>If insertion causes a resize, the operation is O(<ph id="ph1">`n`</ph>).</source>
          <target state="translated">Si l’insertion conduit à un redimensionnement, l’opération est O (<ph id="ph1">`n`</ph>).</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">L’exemple de code suivant crée un vide <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> de chaînes avec les clés de chaîne et utilise le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> méthode pour ajouter des éléments.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">L’exemple montre que la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> méthode lève une exception une <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> lors de la tentative d’ajout d’une clé dupliquée.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>An element with the same key already exists in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Un élément possédant la même clé existe déjà dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>Gets or sets the number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> can contain.</source>
          <target state="translated">Obtient ou définit le nombre d'éléments que <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> peut contenir.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>The number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> can contain.</source>
          <target state="translated">Nombre initial d'éléments que <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> peut contenir.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can store.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> est le nombre d’éléments qui le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> peut stocker.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> est le nombre d’éléments réellement contenus dans le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> est toujours supérieur ou égal à <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> dépasse <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> lors de l’ajout d’éléments, la capacité est augmentée en réallouant automatiquement le tableau interne avant de copier les anciens éléments et d’ajouter les nouveaux éléments.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">La capacité peut être diminuée en appelant <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> ou en définissant le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propriété explicitement.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>When the value of <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</source>
          <target state="translated">Lorsque la valeur de <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> est défini explicitement, le tableau interne est aussi réalloué pour prendre en compte la capacité spécifiée.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the new capacity.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération o (1) ; définition de la propriété est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est la nouvelle capacité.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source><ph id="ph1">&lt;see cref="P:System.Collections.Generic.SortedList`2.Capacity" /&gt;</ph> is set to a value that is less than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.SortedList`2.Count" /&gt;</ph>.</source>
          <target state="translated">La valeur affectée à <ph id="ph1">&lt;see cref="P:System.Collections.Generic.SortedList`2.Capacity" /&gt;</ph> est inférieure à <ph id="ph2">&lt;see cref="P:System.Collections.Generic.SortedList`2.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>There is not enough memory available on the system.</source>
          <target state="translated">Il n’y a pas assez de mémoire disponible sur le système.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Supprime tous les éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> est définie à zéro, et les références à d’autres objets des éléments de la collection sont également libérées.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> remains unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> reste inchangé.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, call <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or set the <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property directly.</source>
          <target state="translated">Pour rétablir la capacité de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, appelez <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> ou définir le <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propriété directement.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to the default capacity.</source>
          <target state="translated">La suppression vide <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> définit la capacité de la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> à la capacité par défaut.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Comparer">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> for the sorted list.</source>
          <target state="translated">Obtient <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> pour la liste triée.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Comparer">
          <source>The <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph> for the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph> pour la <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> actuelle.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Comparer">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Clé à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contains a specific key.</source>
          <target state="translated">Détermine si <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contient une clé spécifique.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contient un élément correspondant à la clé spécifiée ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>This method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (journal <ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> method to test whether a key exists prior to calling the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> méthode pour tester si une clé existe avant d’appeler le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>It also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the sorted list.</source>
          <target state="translated">Il montre également comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> méthode pour récupérer des valeurs, ce qui constitue un moyen efficace pour récupérer des valeurs lorsqu’un programme essaie fréquemment des clés qui ne sont pas dans la liste triée.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>Finally, it shows the least efficient way to test whether keys exist, by using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">Enfin, il montre la méthode la moins efficace pour tester si les clés existent, à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propriété (l’indexeur en c#).</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>The value to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Valeur à trouver dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contains a specific value.</source>
          <target state="translated">Détermine si <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contient une valeur spécifique.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contains an element with the specified value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contient un élément correspondant à la valeur spécifiée ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>This method determines equality using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for the value type <ph id="ph2">`TValue`</ph>.</source>
          <target state="translated">Cette méthode détermine l’égalité en utilisant le comparateur par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour le type de valeur <ph id="ph2">`TValue`</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the value type <ph id="ph2">`TValue`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si la valeur de type <ph id="ph2">`TValue`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the value type <ph id="ph2">`TValue`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si la valeur de type <ph id="ph2">`TValue`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>If the value type <ph id="ph1">`TValue`</ph> does not implement either interface, this method uses <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si la valeur de type <ph id="ph1">`TValue`</ph> n’implémente aucune interface, cette méthode utilise <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>This method performs a linear search; therefore, the average execution time is proportional to <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, le temps d’exécution moyen est proportionnel au <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>That is, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Autrement dit, cette méthode est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source>Gets the number of key/value pairs contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Obtient le nombre de paires clé/valeur contenues dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source>The number of key/value pairs contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Nombre de paires clé/valeur contenues dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can store.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> est le nombre d’éléments qui le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> peut stocker.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> est le nombre d’éléments réellement contenus dans le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> est toujours supérieur ou égal à <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> dépasse <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> lors de l’ajout d’éléments, la capacité est augmentée en réallouant automatiquement le tableau interne avant de copier les anciens éléments et d’ajouter les nouveaux éléments.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Retourne un énumérateur qui itère au sein de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> of type <ph id="ph2">&lt;see cref="T:System.Collections.Generic.KeyValuePair`2" /&gt;</ph> for the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> de type <ph id="ph2">&lt;see cref="T:System.Collections.Generic.KeyValuePair`2" /&gt;</ph> pour <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">Le <ph id="ph1">`foreach`</ph> instruction du langage c# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) masque la complexité des énumérateurs.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Il est donc recommandé d'utiliser <ph id="ph1">`foreach`</ph> plutôt que de manipuler l'énumérateur directement.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Les énumérateurs peuvent être utilisés pour lire les données de la collection, mais ils ne permettent pas de modifier la collection sous-jacente.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>The dictionary is maintained in a sorted order using an internal tree.</source>
          <target state="translated">Le dictionnaire est maintenu dans un ordre trié à l’aide d’une arborescence interne.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed.</source>
          <target state="translated">Chaque nouvel élément est positionné à la position de tri correct, et l’arborescence est ajustée pour maintenir l’ordre de tri chaque fois qu’un élément est supprimé.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>While enumerating, the sort order is maintained.</source>
          <target state="translated">Lors de l’énumération, l’ordre de tri est conservé.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Au départ, l’énumérateur est positionné avant le premier élément de la collection.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">À cette position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> n'est pas défini.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">Par conséquent, vous devez appeler <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pour avancer l'énumérateur jusqu'au premier élément de la collection avant de lire la valeur de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> retourne le même objet jusqu'à ce que <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> soit appelé.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> affecte l'élément suivant à <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> dépasse la fin de la collection, l’énumérateur est placée après le dernier élément dans la collection et <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourne <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Lorsque l’énumérateur est à cette position, les appels suivants à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourner <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si le dernier appel à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourné <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> n’est pas défini.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">Vous ne pouvez pas attribuer de nouveau <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> au premier élément de la collection ; vous devez créer une nouvelle instance de l'énumérateur à la place.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un énumérateur est valide tant que la collection demeure inchangée.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si des modifications sont apportées à la collection, telles que l'ajout, la modification ou la suppression d'éléments, l'énumérateur est définitivement invalidé et son comportement n'est pas défini.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Comme l’énumérateur ne dispose pas d’un accès exclusif à la collection, l’énumération d’une collection n’est pas intrinsèquement une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Implémentations par défaut de collections dans <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> ne sont pas synchronisées.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Cette méthode est une opération o (1).</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Clé à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
          <source>Searches for the specified key and returns the zero-based index within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Recherche la clé spécifiée et retourne l'index de base zéro dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> entier.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="key" /&gt;</ph> within the entire <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, if found; otherwise, -1.</source>
          <target state="translated">Index de base zéro de <ph id="ph1">&lt;paramref name="key" /&gt;</ph> dans le <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> entier, si elle existe ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
          <source>This method performs a binary search; therefore, this method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche binaire ; Par conséquent, cette méthode est un O (journal <ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>The value to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Valeur à trouver dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>Searches for the specified value and returns the zero-based index of the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Recherche la valeur spécifiée et retourne l'index de base zéro de la première occurrence dans l'ensemble du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> within the entire <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, if found; otherwise, -1.</source>
          <target state="translated">Index de base zéro de la première occurrence de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> dans l'ensemble du <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, s'il existe ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>This method determines equality using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for the value type <ph id="ph2">`TValue`</ph>.</source>
          <target state="translated">Cette méthode détermine l’égalité en utilisant le comparateur par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour le type de valeur <ph id="ph2">`TValue`</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the value type <ph id="ph2">`TValue`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si la valeur de type <ph id="ph2">`TValue`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the value type <ph id="ph2">`TValue`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si la valeur de type <ph id="ph2">`TValue`</ph> implémente <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>If the value type <ph id="ph1">`TValue`</ph> does not implement either interface, this method uses <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si la valeur de type <ph id="ph1">`TValue`</ph> n’implémente aucune interface, cette méthode utilise <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>This method performs a linear search; therefore, the average execution time is proportional to <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, le temps d’exécution moyen est proportionnel au <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>That is, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Autrement dit, cette méthode est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The key whose value to get or set.</source>
          <target state="translated">Clé dont la valeur doit être obtenue ou définie.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>Gets or sets the value associated with the specified key.</source>
          <target state="translated">Obtient ou définit la valeur associée à la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The value associated with the specified key.</source>
          <target state="translated">Valeur associée à la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>If the specified key is not found, a get operation throws a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.KeyNotFoundException" /&gt;</ph> and a set operation creates a new element using the specified key.</source>
          <target state="translated">Si la clé spécifiée est introuvable, une opération Get retourne <ph id="ph1">&lt;see cref="T:System.Collections.Generic.KeyNotFoundException" /&gt;</ph> et une opération Set crée un élément à l'aide de la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph>.</source>
          <target state="translated">Cette propriété permet d'accéder à un élément spécifique de la collection à l'aide de la syntaxe suivante : <ph id="ph1">`myCollection[key]`</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be, if the type of values in the list, <ph id="ph2">`TValue`</ph>, is a reference type.</source>
          <target state="translated">Une clé ne peut pas être <ph id="ph1">`null`</ph>, mais une valeur peut être, si le type de valeurs dans la liste, <ph id="ph2">`TValue`</ph>, est un type référence.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>If the key is not found when a value is being retrieved, <ph id="ph1">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown.</source>
          <target state="translated">Si la clé est introuvable lorsqu’une valeur est récupérée, <ph id="ph1">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>If the key is not found when a value is being set, the key and value are added.</source>
          <target state="translated">Si la clé est introuvable lorsqu’une valeur est définie, la clé et la valeur sont ajoutés.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>; for example, <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">Vous pouvez également utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>; par exemple, <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>However, if the specified key already exists in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Toutefois, si la clé spécifiée existe déjà dans le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, ce qui affecte le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propriété remplace l’ancienne valeur.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En revanche, le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> méthode ne modifie pas les éléments existants.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">Le langage c# utilise le mot clé pour définir les indexeurs au lieu d’implémenter la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implémente <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> comme propriété par défaut, ce qui fournit les mêmes fonctionnalités d'indexation.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>Retrieving the value of this property is an O(log <ph id="ph1">`n`</ph>) operation, where n is <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">La récupération de la valeur de cette propriété est un O (journal <ph id="ph1">`n`</ph>) opération, où n est <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>Setting the property is an O(log <ph id="ph1">`n`</ph>) operation if the key is already in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Définition de la propriété est un O (journal <ph id="ph1">`n`</ph>) opération si la clé est déjà dans le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>If the key is not in the list, setting the property is an O(<ph id="ph1">`n`</ph>) operation for unsorted data, or O(log <ph id="ph2">`n`</ph>) if the new element is added at the end of the list.</source>
          <target state="translated">Si la clé n’est pas dans la liste, la propriété est un O (<ph id="ph1">`n`</ph>) opération pour les données non triées, ou O (journal <ph id="ph2">`n`</ph>) si le nouvel élément est ajouté à la fin de la liste.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>If insertion causes a resize, the operation is O(<ph id="ph1">`n`</ph>).</source>
          <target state="translated">Si l’insertion conduit à un redimensionnement, l’opération est O (<ph id="ph1">`n`</ph>).</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">Le de code suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propriété (l’indexeur en c#) pour récupérer des valeurs, démontrant qu’un <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> est levée lorsqu’une clé demandée n’est pas présente et indiquant que la valeur associée à une clé peut être remplacée.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list.</source>
          <target state="translated">L’exemple montre également comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> méthode comme un moyen plus efficace pour récupérer des valeurs si un programme doit souvent essayer des valeurs de clés qui ne sont pas dans la liste triée.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The property is retrieved and <ph id="ph1">&lt;paramref name="key" /&gt;</ph> does not exist in the collection.</source>
          <target state="translated">La propriété est récupérée et <ph id="ph1">&lt;paramref name="key" /&gt;</ph> n'existe pas dans la collection.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>Gets a collection containing the keys in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, in sorted order.</source>
          <target state="translated">Obtient une collection contenant les clés de la <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, dans un ordre trié.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> containing the keys in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> contenant les clés de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The order of the keys in the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is the same as the order in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">L’ordre des clés dans le <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> est le même que l’ordre dans le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The returned <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is not a static copy; instead, the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> refers back to the keys in the original <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> n’est pas une copie statique ; à la place, le <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> fait référence aux clés dans l’original <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>Therefore, changes to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> continue to be reflected in the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>.</source>
          <target state="translated">Par conséquent, remplace le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> continuent d’être répercutées dans le <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The collection returned by the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property provides an efficient way to retrieve keys by index.</source>
          <target state="translated">La collection retournée par la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> propriété offre un moyen efficace de récupérer des clés par index.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys.</source>
          <target state="translated">Il n’est pas nécessaire de régénérer la liste lors de l’accès à la propriété, car la liste est un simple wrapper pour le tableau interne de clés.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property for indexed retrieval of keys from a sorted list of elements with string keys:</source>
          <target state="translated">Le code suivant illustre l’utilisation de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> propriété pour la récupération indexée de clés dans une liste triée d’éléments avec des clés de chaîne :</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The following code example shows how to enumerate the keys in the sorted list using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property, and how to enumerate the keys and values in the sorted list.</source>
          <target state="translated">L’exemple de code suivant montre comment énumérer les clés de la liste triée à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> propriété et comment énumérer les clés et valeurs dans la liste triée.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property for efficient indexed retrieval of keys.</source>
          <target state="translated">L’exemple montre également comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> propriété pour la récupération indexée efficace des clés.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Consultez <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>The key of the element to remove.</source>
          <target state="translated">Clé de l'élément à supprimer.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Supprime de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> l'élément ayant la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is successfully removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la suppression de l'élément réussit ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> was not found in the original <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Cette méthode retourne également <ph id="ph1">&lt;see langword="false" /&gt;</ph> si <ph id="ph2">&lt;paramref name="key" /&gt;</ph> est introuvable dans le <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> d'origine.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche binaire ; Toutefois, les éléments sont déplacés vers le haut pour remplir l’emplacement ouvert, donc cette méthode est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>The following code example shows how to remove a key/value pair from the sorted list using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Remove%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code suivant montre comment supprimer une paire clé/valeur à partir de la liste triée à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Remove%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source>The zero-based index of the element to remove.</source>
          <target state="translated">Index de base zéro de l'élément à supprimer.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source>Removes the element at the specified index of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Supprime l'élément au niveau de l'index spécifié de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source>This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche binaire ; Toutefois, les éléments sont déplacés vers le haut pour remplir l’emplacement ouvert, donc cette méthode est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à zéro.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.SortedList`2.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est supérieur ou égal à <ph id="ph2">&lt;see cref="P:System.Collections.Generic.SortedList`2.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensionnel qui constitue la destination des éléments copiés à partir de <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> doit avoir une indexation de base zéro.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Index de base zéro dans un <bpt id="p1">&lt;c&gt;</bpt>tableau<ept id="p1">&lt;/c&gt;</ept> auquel commencer la copie.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Copie les éléments de <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> dans <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, à partir d'un index particulier de <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the non-generic implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Si le type de la source de <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> ne peut pas être casté automatiquement au type de la destination <ph id="ph2">`array`</ph>, les implémentations non génériques de <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> lever <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, alors que les implémentations génériques lèvent <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> est inférieur à zéro.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> est multidimensionnel.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> n’a pas d’indexation de base zéro.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Le nombre d’éléments dans le <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> source est supérieur à la quantité d’espace disponible entre <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> et la fin du <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destination.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Le type du <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> source ne peut pas être converti automatiquement en type du <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destination.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Obtient une valeur indiquant si l'accès à <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> est synchronisé (thread-safe).</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'accès à <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> est synchronisé (thread-safe) ; sinon <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Dans l'implémentation par défaut de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, cette propriété retourne toujours <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Implémentations par défaut de collections dans <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> ne sont pas synchronisées.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">L’énumération d’une collection n’est intrinsèquement pas une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> propriété retourne un objet qui peut être utilisé pour synchroniser l’accès à la <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">La synchronisation est effective uniquement si tous les threads de verrouillent de cet objet avant d’accéder à la collection.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Obtient un objet qui peut être utilisé pour synchroniser l'accès à <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Objet qui peut être utilisé pour synchroniser l'accès à <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated">Dans l'implémentation par défaut de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, cette propriété retourne toujours l'instance actuelle.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Implémentations par défaut de collections dans <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> ne sont pas synchronisées.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">L’énumération d’une collection n’est intrinsèquement pas une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> propriété retourne un objet qui peut être utilisé pour synchroniser l’accès à la <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">La synchronisation est effective uniquement si tous les threads de verrouillent de cet objet avant d’accéder à la collection.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">Le code suivant illustre l’utilisation de la <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> propriété pour c#, C++ et Visual Basic.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to use as the key of the element to add.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> à utiliser comme clé de l'élément à ajouter.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to use as the value of the element to add.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> à utiliser comme valeur de l'élément à ajouter.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>Adds an element with the provided key and value to the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Ajoute un élément avec la clé et la valeur fournies à <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">Vous pouvez également utiliser le <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le dictionnaire ; par exemple, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Toutefois, si la clé spécifiée existe déjà dans le dictionnaire, l’affectation du <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propriété remplace l’ancienne valeur.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En revanche, le <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> méthode ne modifie pas les éléments existants.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation for unsorted data, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<ph id="ph1">`n`</ph>) opération pour les données non triées, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>It is an O(log <ph id="ph1">`n`</ph>) operation if the new element is added at the end of the list.</source>
          <target state="translated">Il s’agit d’un O (journal <ph id="ph1">`n`</ph>) opération si le nouvel élément est ajouté à la fin de la liste.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>If insertion causes a resize, the operation is O(<ph id="ph1">`n`</ph>).</source>
          <target state="translated">Si l’insertion conduit à un redimensionnement, l’opération est O (<ph id="ph1">`n`</ph>).</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The following code example shows how to access the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class through the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface.</source>
          <target state="translated">L’exemple de code suivant montre comment accéder à la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> par le biais du <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">L’exemple de code crée un vide <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> de chaînes avec les clés de chaîne et utilise le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> méthode pour ajouter des éléments.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key, or when a key or value of the wrong data type is supplied.</source>
          <target state="translated">L’exemple montre que la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> méthode lève une exception une <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> lors de la tentative d’ajout d’une clé dupliquée, ou lorsqu’une clé ou une valeur de type de données incorrect est fournie.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The code example demonstrates the use of several other members of the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface.</source>
          <target state="translated">L’exemple de code illustre l’utilisation de plusieurs autres membres de le <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is of a type that is not assignable to the key type <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> of the <ph id="ph3">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> a un type qui ne peut pas être assigné au type de clé <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> de <ph id="ph3">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the value type <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph> of the <ph id="ph3">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> a un type qui ne peut pas être assigné au type valeur <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph> de <ph id="ph3">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>An element with the same key already exists in the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Un élément possédant la même clé existe déjà dans <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Clé à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contains an element with the specified key.</source>
          <target state="translated">Détermine si <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contient un élément avec la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contains an element with the key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contient un élément avec la clé ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>This method returns <ph id="ph1">`false`</ph> if <ph id="ph2">`key`</ph> is of a type that is not assignable to the key type <ph id="ph3">`TKey`</ph> of the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Cette méthode retourne <ph id="ph1">`false`</ph> si <ph id="ph2">`key`</ph> est d’un type qui n’est pas assignable au type de clé <ph id="ph3">`TKey`</ph> de la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>This method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (journal <ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Contains%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Contains%2A&gt;</ph> méthode de la <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> de l’interface avec un <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The example demonstrates that the method returns <ph id="ph1">`false`</ph> if a key of the wrong data type is supplied.</source>
          <target state="translated">L’exemple montre que la méthode retourne <ph id="ph1">`false`</ph> si une clé de type de données incorrect est fournie.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code fait partie d’un exemple plus complet, y compris la sortie, fournie pour le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Retourne <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> pour l'objet <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> pour <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">Le <ph id="ph1">`foreach`</ph> instruction du langage c# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) masque la complexité des énumérateurs.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Il est donc recommandé d'utiliser <ph id="ph1">`foreach`</ph> plutôt que de manipuler l'énumérateur directement.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Les énumérateurs peuvent être utilisés pour lire les données de la collection, mais ils ne permettent pas de modifier la collection sous-jacente.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Au départ, l’énumérateur est positionné avant le premier élément de la collection.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> replace également l'énumérateur à cette position.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> is undefined.</source>
          <target state="translated">À cette position, <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> n'est pas défini.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph>.</source>
          <target state="translated">Par conséquent, vous devez appeler <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pour avancer l'énumérateur jusqu'au premier élément de la collection avant de lire la valeur de <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> retourne le même objet tant que <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> n'est pas appelé.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> affecte l'élément suivant à <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> dépasse la fin de la collection, l’énumérateur est placée après le dernier élément dans la collection et <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourne <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Lorsque l’énumérateur est à cette position, les appels suivants à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> également retourner <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si le dernier appel à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourné <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> n’est pas défini.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Pour attribuer une nouvelle fois <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> au premier élément de la collection, vous pouvez appeler <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> suivi de <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un énumérateur est valide tant que la collection demeure inchangée.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si des modifications sont apportées à la collection, telles que l'ajout, la modification ou la suppression d'éléments, l'énumérateur est définitivement invalidé et son comportement n'est pas défini.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Comme l’énumérateur ne dispose pas d’un accès exclusif à la collection, l’énumération d’une collection n’est pas intrinsèquement une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Implémentations par défaut de collections dans <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> ne sont pas synchronisées.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Cette méthode est une opération o (1).</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>The following code example shows how to enumerate the key/value pairs in the sorted list by using the <ph id="ph1">`foreach`</ph> statement (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++), which hides the use of the enumerator.</source>
          <target state="translated">L’exemple de code suivant montre comment énumérer les paires clé/valeur dans la liste triée à l’aide de la <ph id="ph1">`foreach`</ph> instruction (<ph id="ph2">`For Each`</ph> en Visual Basic, <ph id="ph3">`for each`</ph> en C++), qui masque l’utilisation de l’énumérateur.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>In particular, note that the enumerator for the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface returns <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objects rather than <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objects.</source>
          <target state="translated">En particulier, notez que l’énumérateur pour les <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface retourne <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objets plutôt que <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objets.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code fait partie d’un exemple plus complet, y compris la sortie, fournie pour le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> has a fixed size.</source>
          <target state="translated">Obtient une valeur indiquant si <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est de taille fixe.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> has a fixed size; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est de taille fixe ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Dans l'implémentation par défaut de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, cette propriété retourne toujours <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</source>
          <target state="translated">Une collection de taille fixe ne permet pas l’ajout ou la suppression d’éléments après sa création, mais permet la modification des éléments existants.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">Une collection de taille fixe est simplement une collection avec un wrapper qui empêche l’ajout et suppression d’éléments. Par conséquent, si des modifications sont apportées à la collection sous-jacente, y compris l’ajout ou la suppression d’éléments, la collection de taille fixe reflète ces modifications.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is read-only.</source>
          <target state="translated">Obtient une valeur indiquant si <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est en lecture seule ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Dans l'implémentation par défaut de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, cette propriété retourne toujours <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">Une collection en lecture seule n’autorise pas l’ajout, la suppression ou la modification d’éléments après sa création.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">Une collection est en lecture seule est simplement une collection avec un wrapper qui empêche la modification de la collection ; Par conséquent, si des modifications sont apportées à la collection sous-jacente, la collection en lecture seule reflète ces modifications.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The key of the element to get or set.</source>
          <target state="translated">Clé de l'élément à obtenir ou définir.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Gets or sets the element with the specified key.</source>
          <target state="translated">Obtient ou définit l'élément à l'aide de la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The element with the specified key, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is not in the dictionary or <ph id="ph3">&lt;paramref name="key" /&gt;</ph> is of a type that is not assignable to the key type <ph id="ph4">&lt;paramref name="TKey" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Élément avec la clé spécifiée, ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si <ph id="ph2">&lt;paramref name="key" /&gt;</ph> ne figure pas dans le dictionnaire ou si le type de <ph id="ph3">&lt;paramref name="key" /&gt;</ph> ne peut pas être assigné au type de clé <ph id="ph4">&lt;paramref name="TKey" /&gt;</ph> de <ph id="ph5">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>This property returns <ph id="ph1">`null`</ph> if <ph id="ph2">`key`</ph> is of a type that is not assignable to the key type <ph id="ph3">`TKey`</ph> of the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Cette propriété retourne <ph id="ph1">`null`</ph> si <ph id="ph2">`key`</ph> est d’un type qui n’est pas assignable au type de clé <ph id="ph3">`TKey`</ph> de la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph>.</source>
          <target state="translated">Cette propriété permet d'accéder à un élément spécifique de la collection à l'aide de la syntaxe suivante : <ph id="ph1">`myCollection[key]`</ph>.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">Vous pouvez également utiliser le <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le dictionnaire ; par exemple, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Toutefois, si la clé spécifiée existe déjà dans le dictionnaire, l’affectation du <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propriété remplace l’ancienne valeur.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En revanche, le <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> méthode ne modifie pas les éléments existants.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The C# language uses the <bpt id="p1">[</bpt>this<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> property.</source>
          <target state="translated">Le langage c# utilise le <bpt id="p1">[</bpt>cela<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> (mot clé) pour définir les indexeurs au lieu d’implémenter la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implémente <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> comme propriété par défaut, ce qui fournit les mêmes fonctionnalités d'indexation.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Retrieving the value of this property is an O(log <ph id="ph1">`n`</ph>) operation, where n is <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">La récupération de la valeur de cette propriété est un O (journal <ph id="ph1">`n`</ph>) opération, où n est <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Setting the property is an O(log <ph id="ph1">`n`</ph>) operation if the key is already in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Définition de la propriété est un O (journal <ph id="ph1">`n`</ph>) opération si la clé est déjà dans le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>If the key is not in the list, setting the property is an O(<ph id="ph1">`n`</ph>) operation for unsorted data, or O(log <ph id="ph2">`n`</ph>) if the new element is added at the end of the list.</source>
          <target state="translated">Si la clé n’est pas dans la liste, la propriété est un O (<ph id="ph1">`n`</ph>) opération pour les données non triées, ou O (journal <ph id="ph2">`n`</ph>) si le nouvel élément est ajouté à la fin de la liste.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>If insertion causes a resize, the operation is O(<ph id="ph1">`n`</ph>).</source>
          <target state="translated">Si l’insertion conduit à un redimensionnement, l’opération est O (<ph id="ph1">`n`</ph>).</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> property (the indexer in C#) of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, and ways the property differs from the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> propriété (l’indexeur en c#) de la <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface avec un <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, ainsi que les méthodes de la propriété est différente de la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The example shows that, like the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> property can change the value associated with an existing key and can be used to add a new key/value pair if the specified key is not in the sorted list.</source>
          <target state="translated">L’exemple montre que, comme le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> propriété, le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> propriété peut modifier la valeur associée à une clé existante et peut être utilisée pour ajouter une nouvelle paire clé/valeur si la clé spécifiée n’est pas dans la liste triée.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The example also shows that unlike the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> property does not throw an exception if <ph id="ph3">`key`</ph> is not in the sorted list, returning a null reference instead.</source>
          <target state="translated">L’exemple montre également que contrairement à la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> propriété, le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> propriété ne lève pas d’exception si <ph id="ph3">`key`</ph> ne figure pas dans la liste triée, mais retourne une référence null.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Finally, the example demonstrates that getting the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> property returns a null reference if <ph id="ph2">`key`</ph> is not the correct data type, and that setting the property throws an exception if <ph id="ph3">`key`</ph> is not the correct data type.</source>
          <target state="translated">Enfin, l’exemple montre que l’obtention du <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> propriété retourne une référence null si <ph id="ph2">`key`</ph> n’est pas le type de données correct, et que la définition de la propriété lève une exception si <ph id="ph3">`key`</ph> n’est pas le type de données correct.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code fait partie d’un exemple plus complet, y compris la sortie, fournie pour le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>A value is being assigned, and <ph id="ph1">&lt;paramref name="key" /&gt;</ph> is of a type that is not assignable to the key type <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> of the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Une valeur est assignée et <ph id="ph1">&lt;paramref name="key" /&gt;</ph> a un type qui ne peut pas être assigné au type de clé <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> de <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>A value is being assigned, and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the value type <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph> of the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Une valeur est assignée et <ph id="ph1">&lt;paramref name="value" /&gt;</ph> a un type qui ne peut pas être assigné au type valeur <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph> de <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the keys of the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Obtient un <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> contenant les clés de <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the keys of the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> contenant les clés de <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>The order of the keys in the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> is the same as the order in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">L’ordre des clés dans le <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> est le même que l’ordre dans le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>, to list the keys in the dictionary.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> propriété de la <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> de l’interface avec un <ph id="ph3">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>pour répertorier les clés dans le dictionnaire.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface returns <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objects rather than <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objects.</source>
          <target state="translated">L’exemple montre également comment énumérer les paires clé/valeur dans la liste triée ; Notez que l’énumérateur pour les <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface retourne <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objets plutôt que <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objets.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code fait partie d’un exemple plus complet, y compris la sortie, fournie pour le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>The key of the element to remove.</source>
          <target state="translated">Clé de l'élément à supprimer.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Supprime de <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> l'élément ayant la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche binaire ; Toutefois, les éléments sont déplacés vers le haut pour remplir l’emplacement ouvert, donc cette méthode est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Remove%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Remove%2A&gt;</ph> de la <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> de l’interface avec un <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code fait partie d’un exemple plus complet, y compris la sortie, fournie pour le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Obtient <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> contenant les valeurs de <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> contenant les valeurs de <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>The order of the values in the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> is the same as the order in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">L’ordre des valeurs dans le <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> est le même que l’ordre dans le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Values%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, to list the values in the sorted list.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Values%2A&gt;</ph> propriété de la <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> de l’interface avec un <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>pour répertorier les valeurs dans la liste triée.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface returns <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objects rather than <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objects.</source>
          <target state="translated">L’exemple montre également comment énumérer les paires clé/valeur dans la liste triée ; Notez que l’énumérateur pour les <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface retourne <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objets plutôt que <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objets.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code fait partie d’un exemple plus complet, y compris la sortie, fournie pour le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Retourne un énumérateur qui itère au sein d’une collection.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> qui peut être utilisé pour itérer au sein de la collection.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">Le <ph id="ph1">`foreach`</ph> instruction du langage c# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) masque la complexité des énumérateurs.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Il est donc recommandé d'utiliser <ph id="ph1">`foreach`</ph> plutôt que de manipuler l'énumérateur directement.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Les énumérateurs peuvent être utilisés pour lire les données de la collection, mais ils ne permettent pas de modifier la collection sous-jacente.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Au départ, l’énumérateur est positionné avant le premier élément de la collection.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> replace également l'énumérateur à cette position.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">À cette position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> n'est pas défini.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Par conséquent, vous devez appeler <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pour avancer l'énumérateur jusqu'au premier élément de la collection avant de lire la valeur de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> retourne le même objet tant que <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> n'est pas appelé.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> affecte l'élément suivant à <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> dépasse la fin de la collection, l’énumérateur est placée après le dernier élément dans la collection et <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourne <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Lorsque l’énumérateur est à cette position, les appels suivants à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> également retourner <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si le dernier appel à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourné <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> n’est pas défini.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Pour attribuer une nouvelle fois <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> au premier élément de la collection, vous pouvez appeler <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> suivi de <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un énumérateur est valide tant que la collection demeure inchangée.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si des modifications sont apportées à la collection, telles que l'ajout, la modification ou la suppression d'éléments, l'énumérateur est définitivement invalidé et son comportement n'est pas défini.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Comme l’énumérateur ne dispose pas d’un accès exclusif à la collection, l’énumération d’une collection n’est pas intrinsèquement une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Implémentations par défaut de collections dans <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> ne sont pas synchronisées.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Cette méthode est une opération o (1).</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, if that number is less than 90 percent of current capacity.</source>
          <target state="translated">Définit la capacité au nombre réel d'éléments dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, si ce nombre est inférieur à 90 pour cent de la capacité actuelle.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">Cette méthode peut être utilisée pour réduire la surcharge de mémoire d’une collection si aucun nouvel élément ne doit être ajouté à la collection.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>The cost of reallocating and copying a large <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can be considerable, however, so the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.</source>
          <target state="translated">Le coût de réallocation et de copie d’un grand <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> peut être considérable, toutefois, pour que le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> méthode ne fait rien si la liste est à plus de 90 pour cent de la capacité.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>This avoids incurring a large reallocation cost for a relatively small gain.</source>
          <target state="translated">Cela évite de supporter un coût de réallocation élevé pour un gain relativement petit.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Clear%2A&gt;</ph> method before calling <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">Pour réinitialiser un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> à son état initial, appelez le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Clear%2A&gt;</ph> méthode avant d’appeler <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to the default capacity.</source>
          <target state="translated">La suppression vide <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> définit la capacité de la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> à la capacité par défaut.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>The capacity can also be set using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property.</source>
          <target state="translated">La capacité peut également être définie à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>The key whose value to get.</source>
          <target state="translated">Clé dont la valeur doit être obtenue.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Quand cette méthode retourne une valeur, valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, valeur par défaut du type du paramètre <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ce paramètre est passé sans être initialisé.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>Gets the value associated with the specified key.</source>
          <target state="translated">Obtient la valeur associée à la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contient un élément correspondant à la clé spécifiée ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>This method combines the functionality of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">Cette méthode combine les fonctionnalités de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> (méthode) et le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>If the key is not found, then the <ph id="ph1">`value`</ph> parameter gets the appropriate default value for the value type <ph id="ph2">`TValue`</ph>; for example, zero (0) for integer types, <ph id="ph3">`false`</ph> for Boolean types, and <ph id="ph4">`null`</ph> for reference types.</source>
          <target state="translated">Si la clé est introuvable, la <ph id="ph1">`value`</ph> paramètre Obtient la valeur par défaut appropriée pour le type de valeur <ph id="ph2">`TValue`</ph>; par exemple, zéro (0) pour les types d’entiers, <ph id="ph3">`false`</ph> pour les types booléens, et <ph id="ph4">`null`</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>This method performs a binary search; therefore, this method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche binaire ; Par conséquent, cette méthode est un O (journal <ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the sorted list.</source>
          <target state="translated">L’exemple montre comment utiliser la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> méthode comme un moyen plus efficace pour récupérer des valeurs dans un programme qui essaye souvent des clés qui ne sont pas dans la liste triée.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>For contrast, the example also shows how the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.</source>
          <target state="translated">Contraste, l’exemple montre également comment la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propriété (l’indexeur en c#) lève des exceptions lors de la tentative de récupération des clés qui n’existe pas.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>Gets a collection containing the values in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Obtient une collection contenant les valeurs dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> contenant les valeurs de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>The order of the values in the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is the same as the order in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">L’ordre des valeurs dans le <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> est le même que l’ordre dans le <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>The returned <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is not a static copy; instead, the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> refers back to the values in the original <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> n’est pas une copie statique ; à la place, le <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> fait référence aux valeurs d’origine <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>Therefore, changes to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> continue to be reflected in the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>.</source>
          <target state="translated">Par conséquent, remplace le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> continuent d’être répercutées dans le <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>The collection returned by the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property provides an efficient way to retrieve values by index.</source>
          <target state="translated">La collection retournée par la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propriété offre un moyen efficace pour récupérer des valeurs par index.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values.</source>
          <target state="translated">Il n’est pas nécessaire de régénérer la liste lors de l’accès à la propriété, car la liste est un simple wrapper pour le tableau interne de valeurs.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property for indexed retrieval of values from a sorted list of strings:</source>
          <target state="translated">Le code suivant illustre l’utilisation de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propriété pour la récupération indexée de valeurs dans une liste triée de chaînes :</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>This code example shows how to enumerate the values in the sorted list using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property, and how to enumerate the keys and values in the sorted list.</source>
          <target state="translated">Cet exemple de code montre comment énumérer les valeurs dans la liste triée à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propriété et comment énumérer les clés et valeurs dans la liste triée.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property for efficient indexed retrieval of values.</source>
          <target state="translated">L’exemple montre également comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propriété pour la récupération indexée efficace des valeurs.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classe.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>