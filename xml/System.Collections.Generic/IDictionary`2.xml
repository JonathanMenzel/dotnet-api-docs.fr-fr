<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDictionary`2.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d63ca205014079b51a43184fd4357d42421abe16.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d63ca205014079b51a43184fd4357d42421abe16</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The type of keys in the dictionary.</source>
          <target state="translated">Type des clés du dictionnaire.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The type of values in the dictionary.</source>
          <target state="translated">Type des valeurs du dictionnaire.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Represents a generic collection of key/value pairs.</source>
          <target state="translated">Représente une collection générique de paires clé/valeur.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface is the base interface for generic collections of key/value pairs.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface est l’interface de base pour les collections génériques de paires clé/valeur.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Each element is a key/value pair stored in a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> object.</source>
          <target state="translated">Chaque élément est une paire clé/valeur stockée dans un <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Each pair must have a unique key.</source>
          <target state="translated">Chaque paire doit avoir une clé unique.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Les implémentations peuvent varier selon si elles que <ph id="ph1">`key`</ph> être <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The value can be <ph id="ph1">`null`</ph> and does not have to be unique.</source>
          <target state="translated">La valeur peut être <ph id="ph1">`null`</ph> et ne doivent pas être uniques.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface permet les clés et les valeurs à énumérer, mais elle n’implique pas de n’importe quel ordre de tri particulier.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++) returns an object of the type of the elements in the collection.</source>
          <target state="translated">Le <ph id="ph1">`foreach`</ph> instruction du langage c# (<ph id="ph2">`For Each`</ph> en Visual Basic, <ph id="ph3">`for each`</ph> en C++) retourne un objet du type des éléments dans la collection.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Since each element of the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> is a key/value pair, the element type is not the type of the key or the type of the value.</source>
          <target state="translated">Étant donné que chaque élément de la <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> est une paire clé/valeur, le type d’élément n’est pas le type de la clé ou le type de la valeur.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Instead, the element type is <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>.</source>
          <target state="translated">Au lieu de cela, le type d’élément est <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>For example:</source>
          <target state="translated">Exemple :</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">`foreach`</ph> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</source>
          <target state="translated">La <ph id="ph1">`foreach`</ph> instruction est un wrapper autour de l’énumérateur, qui permet la lecture à partir n’écrit ne pas à la collection.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <ph id="ph1">&lt;xref:System.Type.Equals%2A&gt;</ph> method.</source>
          <target state="translated">Étant donné que les clés peuvent être héritées et leur comportement modifié, leur unicité absolue ne peut pas être garantie par des comparaisons à l’aide de la <ph id="ph1">&lt;xref:System.Type.Equals%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> of strings, with string keys, and accesses it through the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</source>
          <target state="translated">L’exemple de code suivant crée un vide <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> de chaînes, avec des clés de chaîne et y accède via le <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">L’exemple de code utilise le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> méthode pour ajouter des éléments.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method throws <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">L’exemple montre que la <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> méthode lève une exception <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> lorsque vous essayez d’ajouter une clé dupliquée.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">L’exemple utilise le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriété (l’indexeur en c#) pour récupérer des valeurs, démontrant qu’un <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> est levée lorsqu’une clé demandée n’est pas présente et indiquant que la valeur associée à une clé peut être remplacée.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and how to use the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> method to test whether a key exists prior to calling the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple montre comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> méthode comme un moyen plus efficace pour récupérer des valeurs si un programme doit souvent essayer des valeurs de clés qui ne sont pas dans le dictionnaire et comment utiliser le <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> méthode pour tester si une clé existe avant d’appeler le <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph>(méthode).</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Finally, the example shows how to enumerate the keys and values in the dictionary, and how to enumerate the values alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">Enfin, l’exemple montre comment énumérer les clés et valeurs dans le dictionnaire et comment énumérer les valeurs uniquement à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The implementing class must have a means to compare keys.</source>
          <target state="translated">La classe d’implémentation doit avoir un moyen de comparer des clés.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The object to use as the key of the element to add.</source>
          <target state="translated">Objet à utiliser comme clé de l'élément à ajouter.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The object to use as the value of the element to add.</source>
          <target state="translated">Objet à utiliser comme valeur de l'élément à ajouter.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>Adds an element with the provided key and value to the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Ajoute un élément avec la clé et la valeur fournies à <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> in C# (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph> in Visual Basic).</source>
          <target state="translated">Vous pouvez également utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le dictionnaire ; par exemple, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> en c# (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Toutefois, si la clé spécifiée existe déjà dans le dictionnaire, l’affectation du <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriété remplace l’ancienne valeur.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En revanche, le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> méthode ne modifie pas les éléments existants.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">Les implémentations peuvent déterminer l’égalité des objets ; par exemple, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe utilise <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, alors que le <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> classe permet à l’utilisateur de spécifier le <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implémentation à utiliser pour comparer des clés.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Les implémentations peuvent varier selon si elles que <ph id="ph1">`key`</ph> être <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> of strings, with integer keys, and accesses it through the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</source>
          <target state="translated">L’exemple de code suivant crée un vide <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> de chaînes avec des clés entières et y accède via le <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">L’exemple de code utilise le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> méthode pour ajouter des éléments.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">L’exemple montre que la <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> méthode lève une exception une <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> lors de la tentative d’ajout d’une clé dupliquée.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consultez <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>An element with the same key already exists in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Un élément possédant la même clé existe déjà dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Clé à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contains an element with the specified key.</source>
          <target state="translated">Détermine si <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contient un élément avec la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contains an element with the key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contient un élément avec la clé ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">Les implémentations peuvent déterminer l’égalité des objets ; par exemple, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe utilise <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, alors que le <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> classe permet à l’utilisateur de spécifier le <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implémentation à utiliser pour comparer des clés.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Les implémentations peuvent varier selon si elles que <ph id="ph1">`key`</ph> être <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> method to test whether a key exists prior to calling the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> méthode pour tester si une clé existe avant d’appeler le <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>It also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method, which can be a more efficient way to retrieve values if a program frequently tries key values that are not in the dictionary.</source>
          <target state="translated">Il montre également comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> méthode, ce qui peut être un moyen plus efficace pour récupérer des valeurs si un programme essaie souvent des valeurs de clés qui ne sont pas dans le dictionnaire.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Finally, it shows how to insert items using <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">Enfin, il montre comment insérer des éléments à l’aide <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriété (l’indexeur en c#).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consultez <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The key of the element to get or set.</source>
          <target state="translated">Clé de l'élément à obtenir ou définir.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Gets or sets the element with the specified key.</source>
          <target state="translated">Obtient ou définit l'élément à l'aide de la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The element with the specified key.</source>
          <target state="translated">Élément correspondant à la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> in Visual Basic).</source>
          <target state="translated">Cette propriété permet d’accéder à un élément spécifique de la collection en utilisant la syntaxe suivante : <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> in C# (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph> in Visual Basic).</source>
          <target state="translated">Vous pouvez également utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le dictionnaire ; par exemple, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> en c# (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Toutefois, si la clé spécifiée existe déjà dans le dictionnaire, l’affectation du <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriété remplace l’ancienne valeur.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En revanche, le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> méthode ne modifie pas les éléments existants.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">Les implémentations peuvent déterminer l’égalité des objets ; par exemple, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe utilise <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, alors que le <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> classe permet à l’utilisateur de spécifier le <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implémentation à utiliser pour comparer des clés.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">Le langage c# utilise le mot clé pour définir les indexeurs au lieu d’implémenter la <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implémente <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> comme propriété par défaut, ce qui fournit les mêmes fonctionnalités d'indexation.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Les implémentations peuvent varier selon si elles que <ph id="ph1">`key`</ph> être <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">Le de code suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriété (l’indexeur en c#) pour récupérer des valeurs, démontrant qu’un <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> est levée lorsqu’une clé demandée n’est pas présente et indiquant que la valeur associée à une clé peut être remplacée.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</source>
          <target state="translated">L’exemple montre également comment utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> méthode comme un moyen plus efficace pour récupérer des valeurs si un programme doit souvent essayer des valeurs de clés qui ne sont pas dans le dictionnaire.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consultez <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The property is retrieved and <ph id="ph1">&lt;paramref name="key" /&gt;</ph> is not found.</source>
          <target state="translated">La propriété est récupérée et <ph id="ph1">&lt;paramref name="key" /&gt;</ph> est introuvable.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The property is set and the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> is read-only.</source>
          <target state="translated">La propriété est définie et <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the keys of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Obtient un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> contenant les clés de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the keys of the object that implements <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> contenant les clés de l'objet qui implémente <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>The order of the keys in the returned <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">L’ordre des clés dans retourné <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> n’est pas spécifié, mais il correspond systématiquement à l’ordre des valeurs correspondantes dans le <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> retournée par le <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>The following code example shows how to enumerate keys alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph> property.</source>
          <target state="translated">L’exemple de code suivant montre comment énumérer les clés uniquement à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consultez <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>The key of the element to remove.</source>
          <target state="translated">Clé de l'élément à supprimer.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Supprime de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> l'élément ayant la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is successfully removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la suppression de l'élément réussit ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> was not found in the original <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Cette méthode retourne également <ph id="ph1">&lt;see langword="false" /&gt;</ph> si <ph id="ph2">&lt;paramref name="key" /&gt;</ph> est introuvable dans le <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> d'origine.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">Les implémentations peuvent déterminer l’égalité des objets ; par exemple, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe utilise <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, alors que le <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> classe permet à l’utilisateur de spécifier le <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implémentation à utiliser pour comparer des clés.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>The following code example shows how to remove a key/value pair from a dictionary using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code suivant montre comment supprimer une paire clé/valeur à partir d’un dictionnaire à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consultez <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>The key whose value to get.</source>
          <target state="translated">Clé dont la valeur doit être obtenue.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Quand cette méthode retourne une valeur, valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, valeur par défaut du type du paramètre <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ce paramètre est passé sans être initialisé.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>Gets the value associated with the specified key.</source>
          <target state="translated">Obtient la valeur associée à la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object that implements <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l’objet qui implémente <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contient un élément correspondant à la clé spécifiée ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>This method combines the functionality of the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">Cette méthode combine les fonctionnalités de la <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> (méthode) et le <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>If the key is not found, then the <ph id="ph1">`value`</ph> parameter gets the appropriate default value for the type <ph id="ph2">`TValue`</ph>; for example, zero (0) for integer types, <ph id="ph3">`false`</ph> for Boolean types, and <ph id="ph4">`null`</ph> for reference types.</source>
          <target state="translated">Si la clé est introuvable, la <ph id="ph1">`value`</ph> paramètre Obtient la valeur par défaut appropriée pour le type <ph id="ph2">`TValue`</ph>; par exemple, zéro (0) pour les types d’entiers, <ph id="ph3">`false`</ph> pour les types booléens, et <ph id="ph4">`null`</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method to retrieve values.</source>
          <target state="translated">L’exemple montre comment utiliser la <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> méthode pour récupérer les valeurs.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>If a program frequently tries key values that are not in a dictionary, the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method can be more efficient than using the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#), which throws exceptions when attempting to retrieve nonexistent keys.</source>
          <target state="translated">Si un programme essaie souvent des valeurs de clés qui ne sont pas dans un dictionnaire, la <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> méthode peut être plus efficace que l’utilisation de la <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> propriété (l’indexeur en c#), qui lève des exceptions lors de la tentative de récupération des clés qui n’existe pas.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consultez <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">Obtient <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> contenant les valeurs de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the values in the object that implements <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> contenant les valeurs de l'objet qui implémente <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>The order of the values in the returned <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph> property.</source>
          <target state="translated">L’ordre des valeurs dans la liste retournée <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> n’est pas spécifié, mais il correspond systématiquement à l’ordre des clés correspondantes dans le <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> retournée par le <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>The following code example shows how to enumerate values alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">L’exemple de code suivant montre comment énumérer les valeurs uniquement à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Consultez <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>