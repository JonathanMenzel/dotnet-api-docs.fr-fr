<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="List`1.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e05b5b2-d481-4262-b7b7-7de7ac2afe07649dc28c23dbde95771a5a23c8feb6e1086637c4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">649dc28c23dbde95771a5a23c8feb6e1086637c4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df6cf590aa3087f6c7c202712eee781c6a3c8f96</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/07/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The type of elements in the list.</source>
          <target state="translated">Type d'éléments de la liste.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Represents a strongly typed list of objects that can be accessed by index.</source>
          <target state="translated">Représente une liste fortement typée d'objets accessibles par index.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Provides methods to search, sort, and manipulate lists.</source>
          <target state="translated">Fournit des méthodes de recherche, de tri et de manipulation de listes.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is the generic equivalent of the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> class.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe est l’équivalent générique de la <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>It implements the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface by using an array whose size is dynamically increased as required.</source>
          <target state="translated">Il implémente la <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> requis de l’interface générique à l’aide d’un tableau dont la taille est augmentée de manière dynamique.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>You can add items to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> by using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> methods.</source>
          <target state="translated">Vous pouvez ajouter des éléments à un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> à l’aide de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> méthodes.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses both an equality comparer and an ordering comparer.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe utilise un comparateur d’égalité et un comparateur de classement.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602.Remove%2A&gt;</ph> use an equality comparer for the list elements.</source>
          <target state="translated">Les méthodes telles que <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>, et <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602.Remove%2A&gt;</ph> utilisent un comparateur d’égalité pour les éléments de liste.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default equality comparer for type <ph id="ph1">`T`</ph> is determined as follows.</source>
          <target state="translated">Le comparateur d’égalité par défaut pour le type <ph id="ph1">`T`</ph> est déterminé comme suit.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface, then the equality comparer is the <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%28%600%29&gt;</ph> method of that interface; otherwise, the default equality comparer is <ph id="ph4">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si type <ph id="ph1">`T`</ph> implémente la <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> interface générique, le comparateur d’égalité est la <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%28%600%29&gt;</ph> méthode de cette interface ; sinon, le comparateur d’égalité par défaut est <ph id="ph4">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> use an ordering comparer for the list elements.</source>
          <target state="translated">Les méthodes telles que <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> utilisent un comparateur de classement pour les éléments de liste.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default comparer for type <ph id="ph1">`T`</ph> is determined as follows.</source>
          <target state="translated">Le comparateur par défaut pour le type <ph id="ph1">`T`</ph> est déterminé comme suit.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface, then the default comparer is the <ph id="ph3">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph> method of that interface; otherwise, if type <ph id="ph4">`T`</ph> implements the nongeneric <ph id="ph5">&lt;xref:System.IComparable&gt;</ph> interface, then the default comparer is the <ph id="ph6">&lt;xref:System.IComparable.CompareTo%28System.Object%29&gt;</ph> method of that interface.</source>
          <target state="translated">Si type <ph id="ph1">`T`</ph> implémente la <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface générique, le comparateur par défaut est la <ph id="ph3">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph> méthode de cette interface ; sinon, si type <ph id="ph4">`T`</ph> implémente non générique <ph id="ph5">&lt;xref:System.IComparable&gt;</ph> interface, puis la valeur par défaut comparateur est le <ph id="ph6">&lt;xref:System.IComparable.CompareTo%28System.Object%29&gt;</ph> méthode de cette interface.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If type <ph id="ph1">`T`</ph> implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.</source>
          <target state="translated">Si type <ph id="ph1">`T`</ph> n’implémente aucune interface, il n’existe aucun comparateur par défaut et un délégué de comparateur de comparaison doit être fourni explicitement.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is not guaranteed to be sorted.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> n’est pas garanti d’être triées.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>You must sort the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> before performing operations (such as <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph>) that require the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to be sorted.</source>
          <target state="translated">Vous devez trier les <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> avant d’effectuer des opérations (telles que <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph>) qui nécessitent la <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> à trier.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Elements in this collection can be accessed using an integer index.</source>
          <target state="translated">Éléments de cette collection est accessible à l’aide d’un index d’entiers.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Indexes in this collection are zero-based.</source>
          <target state="translated">Index de cette collection sont de base zéro.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For very large <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id="ph2">`enabled`</ph> attribute of the  configuration element to <ph id="ph3">`true`</ph> in the run-time environment.</source>
          <target state="translated">Pour les très volumineux <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> des objets, vous pouvez augmenter la capacité maximale de 2 milliards des éléments sur un système 64 bits en définissant le <ph id="ph2">`enabled`</ph> attribut de l’élément de configuration <ph id="ph3">`true`</ph> dans l’environnement d’exécution.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepte <ph id="ph2">`null`</ph> comme une valeur valide pour la référence de types et autorise les éléments en double.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For an immutable version of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, see <ph id="ph2">&lt;xref:System.Collections.Immutable.ImmutableList%601&gt;</ph>.</source>
          <target state="translated">Pour obtenir une version immuable de le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de classe, consultez <ph id="ph2">&lt;xref:System.Collections.Immutable.ImmutableList%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Performance Considerations</source>
          <target state="translated">Considérations sur les performances</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>In deciding whether to use the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> class, both of which have similar functionality, remember that the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class performs better in most cases and is type safe.</source>
          <target state="translated">Afin de décider s’il faut utiliser le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> ou <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> (classe), qui ont des fonctionnalités similaires, n’oubliez pas que la <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe exécute mieux dans la plupart des cas et est de type sécurisé.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If a reference type is used for type <ph id="ph1">`T`</ph> of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, the behavior of the two classes is identical.</source>
          <target state="translated">Si un type référence est utilisé pour le type <ph id="ph1">`T`</ph> de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> (classe), le comportement des deux classes est identique.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>However, if a value type is used for type <ph id="ph1">`T`</ph>, you need to consider implementation and boxing issues.</source>
          <target state="translated">Toutefois, si un type valeur est utilisé pour le type <ph id="ph1">`T`</ph>, vous devez tenir compte des problèmes d’implémentation et boxing.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If a value type is used for type <ph id="ph1">`T`</ph>, the compiler generates an implementation of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class specifically for that value type.</source>
          <target state="translated">Si un type valeur est utilisé pour le type <ph id="ph1">`T`</ph>, le compilateur génère une implémentation de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe spécifiquement pour ce type de valeur.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>That means a list element of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.</source>
          <target state="translated">Cela signifie que d’un élément de liste d’un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objet n’a pas à être convertie (boxed) avant que l’élément peut être utilisé, et après la création des éléments de liste environ 500 la mémoire économisée sans boxing des éléments de liste est supérieure à la mémoire utilisée pour générer l’implémentation de classe.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Make certain the value type used for type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface.</source>
          <target state="translated">Vérifiez le type de valeur utilisé pour le type <ph id="ph1">`T`</ph> implémente la <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> interface générique.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If not, methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> must call the <ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method, which boxes the affected list element.</source>
          <target state="translated">Si non, les méthodes telles que <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> doit appeler le <ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> (méthode), qui procède à l’élément de liste affecté.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If the value type implements the <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> interface and you own the source code, also implement the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface to prevent the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> methods from boxing list elements.</source>
          <target state="translated">Si le type de valeur implémente la <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> interface et que vous possédez le code source, implémentez également le <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface générique pour éviter le <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> et <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> méthodes de boxing des éléments de liste.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If you do not own the source code, pass an <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> methods</source>
          <target state="translated">Si vous ne possédez pas le code source, passez un <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> de l’objet à la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> méthodes</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>It is to your advantage to use the type-specific implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class instead of using the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> class or writing a strongly typed wrapper collection yourself.</source>
          <target state="translated">Il est à votre avantage d’utiliser l’implémentation spécifique au type de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe au lieu d’utiliser la <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> classe ou écrire vous-même une collection de wrappers fortement typés.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.</source>
          <target state="translated">La raison est votre implémentation doit faire ce que le .NET Framework n’existe pour vous, et le common language runtime peut partager code Microsoft intermediate language et les métadonnées, qui ne peut pas de votre implémentation.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>F# Considerations</source>
          <target state="translated">Considérations relatives à la F #</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is used infrequently in F# code.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe est rarement utilisée dans le code F #.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Instead, <bpt id="p1">[</bpt>Lists<ept id="p1">](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)</ept>, which are immutable, singly-linked lists, are typically preferred.</source>
          <target state="translated">Au lieu de cela, <bpt id="p1">[</bpt>répertorie<ept id="p1">](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)</ept>, qui sont des listes immuables, liée unique, sont généralement préférée.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development.</source>
          <target state="translated">Une liste de F # fournit une série chronologique, immuable de valeurs et est pris en charge pour une utilisation dans le développement de style fonctionnel.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>When used from F#, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is typically referred to by the  <bpt id="p1">[</bpt>ResizeArray<ph id="ph2">\&lt;</ph>'T&gt;<ept id="p1">](https://msdn.microsoft.com/library/ee353447.aspx)</ept> type abbreviation to avoid naming conflicts with F# Lists</source>
          <target state="translated">Lorsqu’il est utilisé à partir de F #, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe est généralement désigné par le <bpt id="p1">[</bpt>ResizeArray<ph id="ph2">\&lt;</ph>' t &gt;<ept id="p1">](https://msdn.microsoft.com/library/ee353447.aspx)</ept> pour éviter les conflits avec F # répertorie abréviation de type</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">L’exemple suivant montre comment ajouter, supprimer et insérer un objet métier simple dans un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The following example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class of type string.</source>
          <target state="translated">L’exemple suivant illustre plusieurs propriétés et méthodes de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe générique de type chaîne.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>(For an example of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of complex types, see the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> method.)</source>
          <target state="translated">(Pour obtenir un exemple d’un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de types complexes, consultez la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> méthode.)</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default constructor is used to create a list of strings with the default capacity.</source>
          <target state="translated">Le constructeur par défaut est utilisé pour créer une liste de chaînes avec la capacité par défaut.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method is used to add several items.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété s’affiche, puis la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> méthode est utilisée pour ajouter plusieurs éléments.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The items are listed, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again, along with the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property, to show that the capacity has been increased as needed.</source>
          <target state="translated">Les éléments sont répertoriés et la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété s’affiche à nouveau, avec le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriété, pour indiquer que la capacité a été augmentée en fonction des besoins.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> method is used to test for the presence of an item in the list, the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert a new item in the middle of the list, and the contents of the list are displayed again.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> méthode est utilisée pour tester la présence d’un élément dans la liste, le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> méthode est utilisée pour insérer un nouvel élément au milieu de la liste, et le contenu de la liste s’affiche à nouveau.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property (the indexer in C#) is used to retrieve an item, the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method is used to remove the first instance of the duplicate item added earlier, and the contents are displayed again.</source>
          <target state="translated">La valeur par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> (l’indexeur en c#) de propriété est utilisée pour récupérer un élément, le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> méthode est utilisée pour supprimer la première instance de l’élément dupliqué ajouté précédemment, et le contenu s’affiche à nouveau.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method always removes the first instance it encounters.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> méthode supprime toujours la première instance qu’elle rencontre.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method is used to reduce the capacity to match the count, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode permet de réduire la capacité à correspondre au nombre et le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriétés sont affichées.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</source>
          <target state="translated">Si la capacité inutilisée avait été inférieure à 10 % de la capacité totale, la liste n’aurait pas été redimensionnée.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method is used to remove all items from the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> méthode est utilisée pour supprimer tous les éléments dans la liste et le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriétés sont affichées.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">Statique public (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> en Visual Basic) de ce type sont thread-safe.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">Il n'est pas garanti que les membres d'instance soient thread-safe.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>It is safe to perform multiple read operations on a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, but issues can occur if the collection is modified while it’s being read.</source>
          <target state="translated">Il est possible d’effectuer plusieurs opérations de lecture sur un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, mais les problèmes qui peuvent se produire si la collection est modifiée alors qu’il est lu.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>To ensure thread safety, lock the collection during a read or write operation.</source>
          <target state="translated">Pour garantir la sécurité des threads, de verrouiller la collection pendant une lecture ou de l’opération d’écriture.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>To enable a collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour activer une collection accessible par plusieurs threads pour la lecture et en écriture, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For collections with built-in synchronization, see the classes in the <ph id="ph1">&lt;see cref="N:System.Collections.Concurrent" /&gt;</ph> namespace.</source>
          <target state="translated">Pour les collections de synchronisation intégrée, consultez les classes dans le <ph id="ph1">&lt;see cref="N:System.Collections.Concurrent" /&gt;</ph> espace de noms.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For an inherently thread–safe alternative, see the <ph id="ph1">&lt;see cref="T:System.Collections.Immutable.ImmutableList`1" /&gt;</ph> class.</source>
          <target state="translated">Pour une alternative thread-safe, consultez la <ph id="ph1">&lt;see cref="T:System.Collections.Immutable.ImmutableList`1" /&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class that is empty and has the default initial capacity.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui est vide et possède la capacité initiale par défaut.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can hold.</source>
          <target state="translated">La capacité d’un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> est le nombre d’éléments qui le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> peut contenir.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Lorsque des éléments sont ajoutés à un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, la capacité est automatiquement augmentée si nécessaire, en réallouant le tableau interne.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>If the size of the collection can be estimated, using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Si la taille de la collection peut être estimée à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph> constructeur et la spécification de la capacité initiale évite de devoir effectuer un certain nombre d’opérations de redimensionnement lors de l’ajout d’éléments à la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The capacity can be decreased by calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">La capacité peut être diminuée en appelant le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode ou en définissant le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété explicitement.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Réduction de la capacité réalloue la mémoire et copie tous les éléments dans le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Ce constructeur est une opération o (1).</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The following example demonstrates the default constructor of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">L’exemple suivant montre le constructeur par défaut de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe générique.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The default constructor creates a list with the default capacity, as demonstrated by displaying the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property.</source>
          <target state="translated">Le constructeur par défaut crée une liste avec la capacité par défaut, comme indiqué en affichant la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.</source>
          <target state="translated">L’exemple ajoute, insère et supprime les éléments en indiquant comment la capacité change à mesure que ces méthodes sont utilisées.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements are copied to the new list.</source>
          <target state="translated">Collection dont les éléments sont copiés dans la nouvelle liste.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui contient des éléments copiés à partir de la collection spécifiée et qui possède une capacité suffisante pour accepter le nombre d'éléments copiés.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> in the same order they are read by the enumerator of the collection.</source>
          <target state="translated">Les éléments sont copiés dans le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> dans le même ordre qu’ils sont lus par l’énumérateur de la collection.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>This constructor is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in <ph id="ph1">`collection`</ph>.</source>
          <target state="translated">Ce constructeur est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est le nombre d’éléments dans <ph id="ph1">`collection`</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%2A&gt;</ph> constructor and various methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%2A&gt;</ph> constructeur et diverses méthodes de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe qui agissent sur les plages.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>An array of strings is created and passed to the constructor, populating the list with the elements of the array.</source>
          <target state="translated">Un tableau de chaînes est créé et passé au constructeur, remplissage de la liste avec les éléments du tableau.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété est ensuite affichée, pour indiquer que la capacité initiale est exactement ce qui est nécessaire pour contenir les éléments d’entrée.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The number of elements that the new list can initially store.</source>
          <target state="translated">Nombre d'éléments que la nouvelle liste peut initialement stocker.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class that is empty and has the specified initial capacity.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui est vide et a la capacité initiale spécifiée.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can hold.</source>
          <target state="translated">La capacité d’un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> est le nombre d’éléments qui le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> peut contenir.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Lorsque des éléments sont ajoutés à un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, la capacité est automatiquement augmentée si nécessaire, en réallouant le tableau interne.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Si la taille de la collection peut être estimée, en spécifiant la capacité initiale évite d’avoir à effectuer un certain nombre d’opérations de redimensionnement lors de l’ajout d’éléments à la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The capacity can be decreased by calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">La capacité peut être diminuée en appelant le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode ou en définissant le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété explicitement.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Réduction de la capacité réalloue la mémoire et copie tous les éléments dans le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>This constructor is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`capacity`</ph>.</source>
          <target state="translated">Ce constructeur est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">`capacity`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes avec une capacité de 4 est créé, parce que la dernière taille de la liste doit être exactement de 4.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The list is populated with four strings, and a read-only copy is created by using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> method.</source>
          <target state="translated">La liste est remplie avec quatre chaînes, et une copie en lecture seule est créée à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The object to be added to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Objet à ajouter à la fin de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>Adds an object to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Ajoute un objet à la fin de la <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepte <ph id="ph2">`null`</ph> comme une valeur valide pour la référence de types et autorise les éléments en double.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> already equals <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> est déjà égale à <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, la capacité de le <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> est augmentée en réallouant automatiquement le tableau interne, et les éléments existants sont copiés dans le nouveau tableau avant le nouvel élément est ajouté.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is less than <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(1) operation.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> est inférieure à <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, cette méthode est une opération o (1).</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>If the capacity needs to be increased to accommodate the new element, this method becomes an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Si la capacité doit être augmentée pour intégrer le nouvel élément, cette méthode devient un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">L’exemple suivant montre comment ajouter, supprimer et insérer un objet métier simple dans un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The following example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre plusieurs propriétés et méthodes de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe générique, y compris le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The default constructor is used to create a list of strings with a capacity of 0.</source>
          <target state="translated">Le constructeur par défaut est utilisé pour créer une liste de chaînes avec une capacité de 0.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method is used to add several items.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété s’affiche, puis la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> méthode est utilisée pour ajouter plusieurs éléments.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The items are listed, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again, along with the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property, to show that the capacity has been increased as needed.</source>
          <target state="translated">Les éléments sont répertoriés et la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété s’affiche à nouveau, avec le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriété, pour indiquer que la capacité a été augmentée en fonction des besoins.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.</source>
          <target state="translated">Autres propriétés et méthodes permettent de rechercher, insérer et supprimer des éléments de la liste et enfin pour effacer la liste.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements should be added to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Collection dont les éléments devraient être ajoutés à la fin de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection itself cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, but it can contain elements that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> is a reference type.</source>
          <target state="translated">La collection elle-même ne peut pas avoir la valeur <ph id="ph1">&lt;see langword="null" /&gt;</ph>, mais elle peut contenir des éléments qui sont <ph id="ph2">&lt;see langword="null" /&gt;</ph>, si le type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> est un type référence.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>Adds the elements of the specified collection to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Ajoute les éléments de la collection spécifiée à la fin de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The order of the elements in the collection is preserved in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">L’ordre des éléments dans la collection est conservé dans le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>If the new <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (the current <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</source>
          <target state="translated">Si la nouvelle <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (actuel <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> plus la taille de la collection) sera supérieur à <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, le capacité de le <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> est augmentée en réallouant automatiquement le tableau interne pour prendre en compte les nouveaux éléments et la éléments existants sont copiés dans le nouveau tableau avant que les nouveaux éléments sont ajoutés.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can accommodate the new elements without increasing the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements to be added.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> peut prendre en charge les nouveaux éléments sans augmenter la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est le nombre d’éléments à ajouter.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> + </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is the number of elements to be added and <bpt id="p4">*</bpt>m<ept id="p4">*</ept> is <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Si la capacité doit être augmentée pour intégrer les nouveaux éléments, cette méthode devient un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> + </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) opération, où <bpt id="p3">*</bpt>n<ept id="p3">*</ept> est le nombre d’éléments doit être ajouté et <bpt id="p4">*</bpt>m<ept id="p4">*</ept> est <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> method and various other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> (méthode) et diverses autres méthodes de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe qui agissent sur les plages.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>An array of strings is created and passed to the constructor, populating the list with the elements of the array.</source>
          <target state="translated">Un tableau de chaînes est créé et passé au constructeur, remplissage de la liste avec les éléments du tableau.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> method is called, with the list as its argument.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> méthode est appelée, avec la liste en tant que son argument.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The result is that the current elements of the list are added to the end of the list, duplicating all the elements.</source>
          <target state="translated">Le résultat est que les éléments actuels de la liste sont ajoutés à la fin de la liste, la duplication de tous les éléments.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>Returns a read-only <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> wrapper for the current collection.</source>
          <target state="translated">Retourne un wrapper <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> en lecture seule pour la collection actuelle.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>An object that acts as a read-only wrapper around the current <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Objet qui joue le rôle de wrapper en lecture seule autour du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>To prevent any modifications to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object, expose it only through this wrapper.</source>
          <target state="translated">Pour empêcher les modifications apportées à la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> d’objet, exposer uniquement via ce wrapper.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>A  <ph id="ph1">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> object does not expose methods that modify the collection.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> objet n’expose pas de méthodes qui modifient la collection.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>However, if changes are made to the underlying <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object, the read-only collection reflects those changes.</source>
          <target state="translated">Toutefois, si des modifications sont apportées à sous-jacent <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de l’objet, la collection en lecture seule reflète ces modifications.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Cette méthode est une opération o (1).</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes avec une capacité de 4 est créé, parce que la dernière taille de la liste doit être exactement de 4.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>The list is populated with four strings, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> method is used to get a read-only <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface implementation that wraps the original list.</source>
          <target state="translated">La liste est remplie avec quatre chaînes et le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> méthode permet d’obtenir en lecture seule <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> implémentation d’interface générique qui encapsule la liste d’origine.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>An element of the original list is set to "Coelophysis" using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.</source>
          <target state="translated">Un élément de la liste d’origine est défini à « Coelophysis » à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriété (l’indexeur en c#) et le contenu de la liste en lecture seule s’affichent de nouveau pour montrer qu’il s’agit simplement d’un wrapper pour la liste d’origine.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Uses a binary search algorithm to locate a specific element in the sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated">Utilise un algorithme de recherche binaire pour trouver un élément spécifique dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> trié ou une partie de celui-ci.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The object to locate.</source>
          <target state="translated">Objet à trouver.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>Searches the entire sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> for an element using the default comparer and returns the zero-based index of the element.</source>
          <target state="translated">Recherche un élément utilisant le comparateur par défaut dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> entièrement trié et retourne l'index de base zéro de l'élément.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="item" /&gt;</ph> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="item" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated">Index de base zéro de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> dans le <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> trié, si <ph id="ph3">&lt;paramref name="item" /&gt;</ph> existe ; sinon, un nombre négatif qui est le complément de bits de l'index de l'élément suivant supérieur à <ph id="ph4">&lt;paramref name="item" /&gt;</ph> ou, s'il n'existe aucun élément supérieur, le complément de bits de <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>This method uses the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for type <ph id="ph2">`T`</ph> to determine the order of list elements.</source>
          <target state="translated">Cette méthode utilise le comparateur par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour le type <ph id="ph2">`T`</ph> pour déterminer l’ordre des éléments de liste.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> property checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> propriété vérifie si le type <ph id="ph2">`T`</ph> implémente la <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> interface générique et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type <ph id="ph2">`T`</ph> implémente la <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si type <ph id="ph1">`T`</ph> n’implémente pas l’interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lève une <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> doivent déjà être triés en fonction de l’implémentation du comparateur ; sinon, le résultat est incorrect.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>Comparing <ph id="ph1">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface.</source>
          <target state="translated">Comparaison <ph id="ph1">`null`</ph> avec toute référence le type est autorisée et ne génère pas d’exception lors de l’utilisation du <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface générique.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">Lors du tri, <ph id="ph1">`null`</ph> est considéré comme étant inférieure à n’importe quel autre objet.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contient plus d’un élément avec la même valeur, la méthode retourne uniquement une des occurrences, il peut retourner l’une des occurrences, pas nécessairement la première condition.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> ne contient pas la valeur spécifiée, la méthode retourne un entier négatif.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">Vous pouvez appliquer l’opération de bits (~) à cet entier négatif pour obtenir l’index du premier élément supérieur à la valeur de recherche.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">Lors de l’insertion de la valeur dans la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, cet index doit être utilisé en tant que le point d’insertion pour conserver l’ordre de tri.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>This method is an O(log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in the range.</source>
          <target state="translated">Cette méthode est un O (journal <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est le nombre d’éléments dans la plage.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> surcharge de méthode et la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> surcharge de méthode.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé et rempli avec quatre chaînes, dans aucun ordre particulier.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The list is displayed, sorted, and displayed again.</source>
          <target state="translated">La liste est affichée, triée et affiche de nouveau.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload is then used to search for two strings that are not in the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert them.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> surcharge de méthode est ensuite utilisée pour rechercher des deux chaînes qui ne sont pas dans la liste, et le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> méthode est utilisée pour les insérer.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The return value of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method is negative in each case, because the strings are not in the list.</source>
          <target state="translated">La valeur de retour de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> méthode est un nombre négative dans chaque cas, étant donné que les chaînes ne sont pas dans la liste.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>Taking the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</source>
          <target state="translated">En prenant le complément de bits (le ~ (opérateur) en c# et Visual C++, <ph id="ph1">`Xor`</ph> -1 en Visual Basic) de ce nombre négatif génère l’index du premier élément dans la liste qui est supérieure à la chaîne de recherche et l’insertion à cet emplacement conserve le tri commande.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The second search string is larger than any element in the list, so the insertion position is at the end of the list.</source>
          <target state="translated">La deuxième chaîne de recherche est supérieure à n’importe quel élément dans la liste, par conséquent, la position d’insertion est à la fin de la liste.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The default comparer <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph4">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">Le comparateur par défaut <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> ne peut pas trouver une implémentation de l’interface générique <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou de l’interface <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> pour le type <ph id="ph4">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The object to locate.</source>
          <target state="translated">Objet à trouver.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> à utiliser pendant la comparaison d'éléments.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph2">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> pour utiliser le comparateur par défaut <ph id="ph2">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Searches the entire sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.</source>
          <target state="translated">Recherche un élément utilisant le comparateur spécifié dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> entièrement trié et retourne l'index de base zéro de l'élément.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="item" /&gt;</ph> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="item" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated">Index de base zéro de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> dans le <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> trié, si <ph id="ph3">&lt;paramref name="item" /&gt;</ph> existe ; sinon, un nombre négatif qui est le complément de bits de l'index de l'élément suivant supérieur à <ph id="ph4">&lt;paramref name="item" /&gt;</ph> ou, s'il n'existe aucun élément supérieur, le complément de bits de <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer customizes how the elements are compared.</source>
          <target state="translated">Le comparateur personnalise la façon dont les éléments sont comparés.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>For example, you can use a <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.</source>
          <target state="translated">Par exemple, vous pouvez utiliser un <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance en tant que comparateur pour effectuer des recherches de chaîne pas la casse.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are compared to the specified value using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">Si <ph id="ph1">`comparer`</ph> est fourni, les éléments de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont comparées à la valeur spécifiée à l’aide de la <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implémentation.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">Si <ph id="ph1">`comparer`</ph> est <ph id="ph2">`null`</ph>, le comparateur par défaut <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type <ph id="ph4">`T`</ph> implémente la <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> interface générique et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type <ph id="ph2">`T`</ph> implémente la <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si type <ph id="ph1">`T`</ph> n’implémente pas l’interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lève <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> doivent déjà être triés en fonction de l’implémentation du comparateur ; sinon, le résultat est incorrect.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Comparing <ph id="ph1">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface.</source>
          <target state="translated">Comparaison <ph id="ph1">`null`</ph> avec toute référence le type est autorisée et ne génère pas d’exception lors de l’utilisation du <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface générique.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">Lors du tri, <ph id="ph1">`null`</ph> est considéré comme étant inférieure à n’importe quel autre objet.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contient plus d’un élément avec la même valeur, la méthode retourne uniquement une des occurrences, il peut retourner l’une des occurrences, pas nécessairement la première condition.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> ne contient pas la valeur spécifiée, la méthode retourne un entier négatif.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">Vous pouvez appliquer l’opération de bits (~) à cet entier négatif pour obtenir l’index du premier élément supérieur à la valeur de recherche.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">Lors de l’insertion de la valeur dans la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, cet index doit être utilisé en tant que le point d’insertion pour conserver l’ordre de tri.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>This method is an O(log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in the range.</source>
          <target state="translated">Cette méthode est un O (journal <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est le nombre d’éléments dans la plage.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode et la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">L’exemple définit un autre comparateur pour les chaînes nommées DinoCompare, qui implémente le <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> en Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> dans Visual C++) interface générique.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">Le comparateur fonctionne comme suit : en premier lieu, les comparateurs sont testés pour <ph id="ph1">`null`</ph>, et une référence null est traitée comme inférieure à une valeur non null.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">En second lieu, les longueurs de chaîne sont comparées, et la plus longue chaîne est jugée supérieure.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">Troisièmement, si les longueurs sont égales, la comparaison de chaînes ordinaire est utilisé.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé et rempli avec quatre chaînes, dans aucun ordre particulier.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, sorted using the alternate comparer, and displayed again.</source>
          <target state="translated">La liste est affichée, triée à l’aide de l’autre comparateur et s’affichent à nouveau.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode est ensuite utilisée pour rechercher de nombreuses chaînes qui ne figurent pas dans la liste, par le biais de l’autre comparateur.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert the strings.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> méthode est utilisée pour insérer les chaînes.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>These two methods are located in the function named <ph id="ph1">`SearchAndInsert`</ph>, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph2">`Xor`</ph> -1 in Visual Basic) of the negative number returned by <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> and use it as an index for inserting the new string.</source>
          <target state="translated">Ces deux méthodes sont situés dans la fonction nommée <ph id="ph1">`SearchAndInsert`</ph>, ainsi que du code pour prendre le complément de bits (le ~ opérateur en c# et Visual C++, <ph id="ph2">`Xor`</ph> -1 en Visual Basic) du nombre négatif retourné par <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> et l’utiliser comme un index pour Insérer la nouvelle chaîne.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>, et le comparateur par défaut <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> ne peut pas trouver une implémentation de l’interface générique <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou de l’interface <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> pour le type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based starting index of the range to search.</source>
          <target state="translated">Index de début de base zéro de la plage dans laquelle effectuer la recherche.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The length of the range to search.</source>
          <target state="translated">Longueur de la plage dans laquelle effectuer la recherche.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The object to locate.</source>
          <target state="translated">Objet à trouver.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> à utiliser pendant la comparaison d'éléments, ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> pour utiliser le comparateur par défaut <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Searches a range of elements in the sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.</source>
          <target state="translated">Recherche un élément utilisant le comparateur spécifié dans une plage d'éléments du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> trié et retourne l'index de base zéro de l'élément.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="item" /&gt;</ph> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="item" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated">Index de base zéro de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> dans le <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> trié, si <ph id="ph3">&lt;paramref name="item" /&gt;</ph> existe ; sinon, un nombre négatif qui est le complément de bits de l'index de l'élément suivant supérieur à <ph id="ph4">&lt;paramref name="item" /&gt;</ph> ou, s'il n'existe aucun élément supérieur, le complément de bits de <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer customizes how the elements are compared.</source>
          <target state="translated">Le comparateur personnalise la façon dont les éléments sont comparés.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>For example, you can use a <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.</source>
          <target state="translated">Par exemple, vous pouvez utiliser un <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance en tant que comparateur pour effectuer des recherches de chaîne pas la casse.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are compared to the specified value using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">Si <ph id="ph1">`comparer`</ph> est fourni, les éléments de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont comparées à la valeur spécifiée à l’aide de la <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implémentation.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">Si <ph id="ph1">`comparer`</ph> est <ph id="ph2">`null`</ph>, le comparateur par défaut <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type <ph id="ph4">`T`</ph> implémente la <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> interface générique et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type <ph id="ph2">`T`</ph> implémente la <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si type <ph id="ph1">`T`</ph> n’implémente pas l’interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lève <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> doivent déjà être triés en fonction de l’implémentation du comparateur ; sinon, le résultat est incorrect.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Comparing <ph id="ph1">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface.</source>
          <target state="translated">Comparaison <ph id="ph1">`null`</ph> avec toute référence le type est autorisée et ne génère pas d’exception lors de l’utilisation du <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface générique.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">Lors du tri, <ph id="ph1">`null`</ph> est considéré comme étant inférieure à n’importe quel autre objet.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contient plus d’un élément avec la même valeur, la méthode retourne uniquement une des occurrences, il peut retourner l’une des occurrences, pas nécessairement la première condition.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> ne contient pas la valeur spécifiée, la méthode retourne un entier négatif.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">Vous pouvez appliquer l’opération de bits (~) à cet entier négatif pour obtenir l’index du premier élément supérieur à la valeur de recherche.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">Lors de l’insertion de la valeur dans la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, cet index doit être utilisé en tant que le point d’insertion pour conserver l’ordre de tri.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>This method is an O(log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in the range.</source>
          <target state="translated">Cette méthode est un O (journal <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est le nombre d’éléments dans la plage.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode et la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">L’exemple définit un autre comparateur pour les chaînes nommées DinoCompare, qui implémente le <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> en Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> dans Visual C++) interface générique.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">Le comparateur fonctionne comme suit : en premier lieu, les comparateurs sont testés pour <ph id="ph1">`null`</ph>, et une référence null est traitée comme inférieure à une valeur non null.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">En second lieu, les longueurs de chaîne sont comparées, et la plus longue chaîne est jugée supérieure.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">Troisièmement, si les longueurs sont égales, la comparaison de chaînes ordinaire est utilisé.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé et rempli avec les noms de cinq dinosaures et trois dinosaures carnivores.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Within each of the two groups, the names are not in any particular sort order.</source>
          <target state="translated">Dans chacun des deux groupes, les noms ne sont pas dans l’ordre de tri particulier.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</source>
          <target state="translated">La liste est affichée, la plage d’herbivores est triée à l’aide de l’autre comparateur, et la liste s’affiche de nouveau.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search only the range of herbivores for "Brachiosaurus".</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode est ensuite utilisée pour rechercher uniquement la plage d’herbivores correspondant à « Brachiosaure ».</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of the negative number returned by the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method is used as an index for inserting the new string.</source>
          <target state="translated">La chaîne est introuvable et le complément de bits (le ~ opérateur en c# et Visual C++, <ph id="ph1">`Xor`</ph> -1 en Visual Basic) du nombre négatif retourné par la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> méthode est utilisée en tant qu’index pour insérer la nouvelle chaîne.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ne désignent pas une plage valide dans <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>, et le comparateur par défaut <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> ne peut pas trouver une implémentation de l’interface générique <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou de l’interface <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> pour le type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>Gets or sets the total number of elements the internal data structure can hold without resizing.</source>
          <target state="translated">Obtient ou définit le nombre total des éléments que la structure de données interne peut contenir sans redimensionnement.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> can contain before resizing is required.</source>
          <target state="translated">Nombre d'éléments que <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> peut contenir avant que le redimensionnement soit nécessaire.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can store before resizing is required, whereas <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> est le nombre d’éléments qui le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> peut stocker avant que le redimensionnement soit nécessaire, alors que <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> est le nombre d’éléments réellement contenus dans le <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> est toujours supérieur ou égal à <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> dépasse <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> lors de l’ajout d’éléments, la capacité est augmentée en réallouant automatiquement le tableau interne avant de copier les anciens éléments et d’ajouter les nouveaux éléments.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>If the capacity is significantly larger than the count and you want to reduce the memory used by the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>,  you can  decrease capacity by calling the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly to a lower value.</source>
          <target state="translated">Si la capacité est beaucoup plus important que le nombre et que vous souhaitez réduire la mémoire utilisée par le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, vous pouvez réduire la capacité en appelant le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode ou en définissant le <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété explicitement à une valeur inférieure.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>When the value of <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.</source>
          <target state="translated">Lorsque la valeur de <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> est défini explicitement, le tableau interne est aussi réalloué pour prendre en compte la capacité spécifiée et tous les éléments sont copiés.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the new capacity.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération o (1) ; définition de la propriété est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est la nouvelle capacité.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The following example demonstrates how to check the capacity and count of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object, and illustrates using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method to remove extra capacity.</source>
          <target state="translated">L’exemple suivant montre comment vérifier la capacité et le nombre d’un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> qui contient un objet métier simple et illustre l’utilisation de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode pour supprimer une capacité supplémentaire.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property at several points in the life of a list.</source>
          <target state="translated">L’exemple suivant montre le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété à différents points dans la durée de vie d’une liste.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The default constructor is used to create a list of strings with a capacity of 0, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed to demonstrate this.</source>
          <target state="translated">Le constructeur par défaut est utilisé pour créer une liste de chaînes avec une capacité de 0 et le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété est affichée à titre d’illustration.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>After the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method has been used to add several items, the items are listed, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again, along with the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property, to show that the capacity has been increased as needed.</source>
          <target state="translated">Après le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> méthode a été utilisée pour ajouter plusieurs éléments, les éléments sont répertoriés, puis le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété s’affiche à nouveau, avec le <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriété, pour indiquer que la capacité a été augmentée en fonction des besoins.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again after the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method is used to reduce the capacity to match the count.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété s’affiche à nouveau une fois la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode permet de réduire la capacité à correspondre au nombre.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method is used to remove all items from the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed again.</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> méthode est utilisée pour supprimer tous les éléments dans la liste et le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriétés s’affichent à nouveau.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Capacity">
          <source><ph id="ph1">&lt;see cref="P:System.Collections.Generic.List`1.Capacity" /&gt;</ph> is set to a value that is less than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated">La valeur affectée à <ph id="ph1">&lt;see cref="P:System.Collections.Generic.List`1.Capacity" /&gt;</ph> est inférieure à <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>There is not enough memory available on the system.</source>
          <target state="translated">Il n’y a pas assez de mémoire disponible sur le système.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Clear">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Supprime tous les éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is set to 0, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> a la valeur 0, et les références à d’autres objets à partir d’éléments de la collection sont également libérées.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> remains unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> reste inchangé.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or set the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property directly.</source>
          <target state="translated">Pour rétablir la capacité de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, appelez le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode ou un ensemble le <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété directement.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Réduction de la capacité réalloue la mémoire et copie tous les éléments dans le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to the default capacity.</source>
          <target state="translated">La suppression vide <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> définit la capacité de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> à la capacité par défaut.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method and various other properties and methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> (méthode) et diverses autres propriétés et méthodes de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe générique.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method is used at the end of the program, to remove all items from the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are then displayed.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> méthode est utilisée à la fin du programme, pour supprimer tous les éléments dans la liste et le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriétés sont ensuite affichées.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Objet à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Détermine si le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contient un élément.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="item" /&gt;</ph> existe dans <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>This method determines equality by using the default equality comparer, as defined by the object's implementation of the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> method for <ph id="ph2">`T`</ph> (the type of values in the list).</source>
          <target state="translated">Cette méthode détermine l’égalité à l’aide du comparateur d’égalité par défaut, comme défini par l’implémentation de l’objet de la <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> méthode pour <ph id="ph2">`T`</ph> (le type de valeurs dans la liste).</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> methods on a <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object that implements <ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> méthodes sur un <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> qui contient un objet métier simple qui implémente <ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The following example contains a list of complex objects of type <ph id="ph1">`Cube`</ph>.</source>
          <target state="translated">L’exemple suivant contient une liste d’objets complexes de type <ph id="ph1">`Cube`</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The <ph id="ph1">`Cube`</ph> class implements the <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> method so that two cubes are considered equal if their dimensions are the same.</source>
          <target state="translated">Le <ph id="ph1">`Cube`</ph> la classe implémente le <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> méthode afin que les deux cubes sont considérées comme égales si leurs dimensions sont les mêmes.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>In this example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>, because a cube that has the specified dimensions is already in the collection.</source>
          <target state="translated">Dans cet exemple, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> méthode retourne <ph id="ph2">`true`</ph>, car un cube qui possède les dimensions spécifiées est déjà dans la collection.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The type of the elements of the target array.</source>
          <target state="translated">Type des éléments du tableau cible.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Converter`2" /&gt;</ph> delegate that converts each element from one type to another type.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Converter`2" /&gt;</ph> qui convertit chaque élément d'un type vers un autre.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>Converts the elements in the current <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to another type, and returns a list containing the converted elements.</source>
          <target state="translated">Convertit les éléments du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> actuel dans un autre type et retourne une liste qui contient les éléments convertis.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> of the target type containing the converted elements from the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> du type cible contenant les éléments convertis du <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The <ph id="ph1">&lt;xref:System.Converter%602&gt;</ph> is a delegate to a method that converts an object to the target type.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Converter%602&gt;</ph> est un délégué à une méthode qui convertit un objet en type cible.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Converter%602&gt;</ph> delegate, and the converted elements are saved in the new <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Converter%602&gt;</ph> délégué et les éléments convertis sont enregistrés dans le nouveau <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> remains unchanged.</source>
          <target state="translated">En cours <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> demeure inchangée.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The following example defines a method named <ph id="ph1">`PointFToPoint`</ph> that converts a <ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph> structure to a <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> structure.</source>
          <target state="translated">L’exemple suivant définit une méthode nommée <ph id="ph1">`PointFToPoint`</ph> qui convertit un <ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph> structure un <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> structure.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The example then creates a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph> structures, creates a <ph id="ph3">`Converter\&lt;PointF, Point&gt;`</ph> delegate (<ph id="ph4">`Converter(Of PointF, Point)`</ph> in Visual Basic) to represent the <ph id="ph5">`PointFToPoint`</ph> method, and passes the delegate to the <ph id="ph6">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple crée ensuite un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de <ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph> structures, crée un <ph id="ph3">`Converter\&lt;PointF, Point&gt;`</ph> déléguer (<ph id="ph4">`Converter(Of PointF, Point)`</ph> en Visual Basic) pour représenter le <ph id="ph5">`PointFToPoint`</ph> (méthode) et passe le délégué à la <ph id="ph6">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph> method passes each element of the input list to the <ph id="ph2">`PointFToPoint`</ph> method and puts the converted elements into a new list of <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> structures.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph> méthode passe chaque élément de la liste d’entrée à la <ph id="ph2">`PointFToPoint`</ph> (méthode) et met les éléments convertis dans une nouvelle liste de <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> structures.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>Both lists are displayed.</source>
          <target state="translated">Les deux listes sont affichées.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source><ph id="ph1">&lt;paramref name="converter" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="converter" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it to an array.</source>
          <target state="translated">Copie <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou une partie de celui-ci dans un tableau.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensionnel qui constitue la destination des éléments copiés à partir de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> doit avoir une indexation de base zéro.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a compatible one-dimensional array, starting at the beginning of the target array.</source>
          <target state="translated">Copie l'ensemble du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> dans un tableau compatible unidimensionnel en partant du début du tableau cible.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">Cette méthode utilise <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> pour copier les éléments.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Les éléments sont copiés dans le <ph id="ph1">&lt;xref:System.Array&gt;</ph> dans le même ordre que celui dans lequel l’énumérateur itère au sein du <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre les trois surcharges de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with 5 strings.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé et rempli avec 5 chaînes.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>An empty string array of 15 elements is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</source>
          <target state="translated">Un tableau de chaînes vide de 15 éléments est créé et le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> surcharge de méthode est utilisée pour copier tous les éléments de la liste dans le tableau en commençant au premier élément du tableau.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour copier tous les éléments de la liste vers le tableau en commençant à l’index 6 du tableau (laissant vide index 5).</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour copier 3 éléments à partir de la liste, en commençant par l’index 2, dans le tableau en commençant à l’index 12 (laissant l’index 11 vide).</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The contents of the array are then displayed.</source>
          <target state="translated">Le contenu du tableau est ensuite affiché.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> is greater than the number of elements that the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph> can contain.</source>
          <target state="translated">Le nombre d’éléments du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> source est supérieur au nombre d’éléments que la destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph> peut contenir.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensionnel qui constitue la destination des éléments copiés à partir de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> doit avoir une indexation de base zéro.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Index de base zéro dans un <bpt id="p1">&lt;c&gt;</bpt>tableau<ept id="p1">&lt;/c&gt;</ept> auquel commencer la copie.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a compatible one-dimensional array, starting at the specified index of the target array.</source>
          <target state="translated">Copie l'ensemble du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> dans un tableau compatible unidimensionnel en partant de l'index spécifié du tableau cible.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">Cette méthode utilise <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> pour copier les éléments.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Les éléments sont copiés dans le <ph id="ph1">&lt;xref:System.Array&gt;</ph> dans le même ordre que celui dans lequel l’énumérateur itère au sein du <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre les trois surcharges de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with 5 strings.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé et rempli avec 5 chaînes.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>An empty string array of 15 elements is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</source>
          <target state="translated">Un tableau de chaînes vide de 15 éléments est créé et le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> surcharge de méthode est utilisée pour copier tous les éléments de la liste dans le tableau en commençant au premier élément du tableau.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour copier tous les éléments de la liste vers le tableau en commençant à l’index 6 du tableau (laissant vide index 5).</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour copier 3 éléments à partir de la liste, en commençant par l’index 2, dans le tableau en commençant à l’index 12 (laissant l’index 11 vide).</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The contents of the array are then displayed.</source>
          <target state="translated">Le contenu du tableau est ensuite affiché.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Le nombre d’éléments dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> source est supérieur à la quantité d’espace disponible entre <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> et la fin du <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destination.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The zero-based index in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> at which copying begins.</source>
          <target state="translated">Index de base zéro dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> source au niveau duquel la copie commence.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensionnel qui constitue la destination des éléments copiés à partir de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> doit avoir une indexation de base zéro.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Index de base zéro dans un <bpt id="p1">&lt;c&gt;</bpt>tableau<ept id="p1">&lt;/c&gt;</ept> auquel commencer la copie.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The number of elements to copy.</source>
          <target state="translated">Nombre d'éléments à copier.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>Copies a range of elements from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a compatible one-dimensional array, starting at the specified index of the target array.</source>
          <target state="translated">Copie une plage d'éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> dans un tableau compatible unidimensionnel en partant de l'index spécifié du tableau cible.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">Cette méthode utilise <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> pour copier les éléments.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Les éléments sont copiés dans le <ph id="ph1">&lt;xref:System.Array&gt;</ph> dans le même ordre que celui dans lequel l’énumérateur itère au sein du <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre les trois surcharges de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with 5 strings.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé et rempli avec 5 chaînes.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>An empty string array of 15 elements is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</source>
          <target state="translated">Un tableau de chaînes vide de 15 éléments est créé et le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> surcharge de méthode est utilisée pour copier tous les éléments de la liste dans le tableau en commençant au premier élément du tableau.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour copier tous les éléments de la liste vers le tableau en commençant à l’index 6 du tableau (laissant vide index 5).</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour copier 3 éléments à partir de la liste, en commençant par l’index 2, dans le tableau en commençant à l’index 12 (laissant l’index 11 vide).</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The contents of the array are then displayed.</source>
          <target state="translated">Le contenu du tableau est ensuite affiché.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> of the source <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est égal ou supérieur au <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> de la source <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The number of elements from <ph id="ph1">&lt;paramref name="index" /&gt;</ph> to the end of the source <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> is greater than the available space from <ph id="ph3">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph4">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Le nombre d’éléments entre <ph id="ph1">&lt;paramref name="index" /&gt;</ph> et la fin du <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> source est supérieur à l’espace disponible entre <ph id="ph3">&lt;paramref name="arrayIndex" /&gt;</ph> et la fin du <ph id="ph4">&lt;paramref name="array" /&gt;</ph> de destination.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Obtient le nombre d'éléments contenus dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Nombre d'éléments contenus dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can store before resizing is required.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> est le nombre d’éléments qui le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> peut stocker avant que le redimensionnement soit nécessaire.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> est le nombre d’éléments réellement contenus dans le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> est toujours supérieur ou égal à <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> dépasse <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> lors de l’ajout d’éléments, la capacité est augmentée en réallouant automatiquement le tableau interne avant de copier les anciens éléments et d’ajouter les nouveaux éléments.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>The following example demonstrates how to check the capacity and count of a  <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object, and illustrates using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method to remove extra capacity.</source>
          <target state="translated">L’exemple suivant montre comment vérifier la capacité et le nombre d’un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> qui contient un objet métier simple et illustre l’utilisation de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode pour supprimer une capacité supplémentaire.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>The following example shows the value of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property at various points in the life of a list.</source>
          <target state="translated">L’exemple suivant affiche la valeur de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriété à différents points dans la durée de vie d’une liste.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>After the list has been created and populated and its elements displayed, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated">Une fois que la liste a été créée et remplie et ses éléments affichés, la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriétés sont affichées.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>These properties are displayed again after the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method has been called, and again after the contents of the list are cleared.</source>
          <target state="translated">Ces propriétés sont affichées après le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode a été appelée et après le contenu de la liste est effacé.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the elements to search for.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions des éléments à rechercher.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contains elements that match the conditions defined by the specified predicate.</source>
          <target state="translated">Détermine si <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contient des éléments qui correspondent aux conditions définies par le prédicat spécifié.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contient un ou plusieurs éléments qui correspondent aux conditions définies par le prédicat spécifié ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and processing is stopped when a match is found.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> délégué et le traitement s’arrête lorsqu’une correspondance est trouvée.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> methods on a <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object that implements <ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> méthodes sur un <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> qui contient un objet métier simple qui implémente <ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method and several other methods that use the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> generic delegate.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> (méthode) et plusieurs autres méthodes qui utilisent la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> délégué générique.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé, contenant 8 noms dinosaure deux (aux emplacements 1 et 5) se terminent par « saurus ».</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The example also defines a search predicate method named <ph id="ph1">`EndsWithSaurus`</ph>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</source>
          <target state="translated">L’exemple définit également une méthode de prédicat de recherche nommée <ph id="ph1">`EndsWithSaurus`</ph>, qui accepte un paramètre de chaîne et retourne une valeur Boolean qui indique si la chaîne d’entrée se termine par « saurus ».</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph> methods are used to search the list with the search predicate method, and then the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> method is used to remove all entries ending with "saurus".</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph> méthodes sont utilisées pour rechercher la liste avec la méthode de prédicat de recherche, puis le <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> méthode est utilisée pour supprimer toutes les entrées se terminant par « saurus ».</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method is called.</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> méthode est appelée.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>It traverses the list from the beginning, passing each element in turn to the <ph id="ph1">`EndsWithSaurus`</ph> method.</source>
          <target state="translated">Il parcourt la liste à partir du début, chaque élément en passant à la <ph id="ph1">`EndsWithSaurus`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The search stops and the method returns <ph id="ph1">`true`</ph> if the <ph id="ph2">`EndsWithSaurus`</ph> method returns <ph id="ph3">`true`</ph> for any element.</source>
          <target state="translated">La recherche s’arrête et la méthode retourne <ph id="ph1">`true`</ph> si le <ph id="ph2">`EndsWithSaurus`</ph> retourne de la méthode <ph id="ph3">`true`</ph> pour n’importe quel élément.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method returns <ph id="ph2">`false`</ph> because all such elements have been removed.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> méthode retourne <ph id="ph2">`false`</ph> , car tous ces éléments ont été supprimés.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>In C# and Visual Basic, it is not necessary to create the <ph id="ph1">`Predicate&lt;string&gt;`</ph> delegate (<ph id="ph2">`Predicate(Of String)`</ph> in Visual Basic) explicitly.</source>
          <target state="translated">En c# et Visual Basic, il n’est pas nécessaire de créer le <ph id="ph1">`Predicate&lt;string&gt;`</ph> déléguer (<ph id="ph2">`Predicate(Of String)`</ph> en Visual Basic) explicitement.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>These languages infer the correct delegate from context and create it automatically.</source>
          <target state="translated">Ces langages déduisent le délégué approprié à partir du contexte et créer automatiquement.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions de l'élément à rechercher.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la première occurrence dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> entier.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">Premier élément qui correspond aux conditions définies par le prédicat spécifié, s'il est trouvé ; sinon, valeur par défaut du type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, moving forward in the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, starting with the first element and ending with the last element.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> délégué, en avançant vers le <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, en commençant par le premier élément et se terminant par le dernier élément.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Processing is stopped when a match is found.</source>
          <target state="translated">Le traitement est arrêté lorsqu’une correspondance est trouvée.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</source>
          <target state="translated">Lorsque vous recherchez une liste contenant des types valeur, assurez-vous que la valeur par défaut pour le type ne satisfait pas le prédicat de recherche.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</source>
          <target state="translated">Dans le cas contraire, il n’existe aucun moyen de faire la distinction entre une valeur par défaut indiquant qu’aucune correspondance n’a été trouvé et un élément de liste qui a la valeur par défaut pour le type.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>If the default value satisfies the search predicate, use the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method instead.</source>
          <target state="translated">Si la valeur par défaut satisfait le prédicat de recherche, utilisez la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> méthode à la place.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph> method on a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple complex object.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph> méthode sur un <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> qui contient un objet complexe simple.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">L’exemple suivant illustre les méthodes de recherche pour la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">L’exemple de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe contient <ph id="ph2">`book`</ph> les objets de classe <ph id="ph3">`Book`</ph>, en utilisant les données à partir de la <bpt id="p1">[</bpt>exemple de fichier XML : livres (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated">Le <ph id="ph1">`FillList`</ph> méthode dans l’exemple utilise <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> pour analyser les valeurs à partir du XML dans les valeurs de propriété de la <ph id="ph2">`book`</ph> objets.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">Le tableau suivant décrit les exemples fournis pour les méthodes de recherche.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">Méthode</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">Recherche un livre par un ID à l’aide de la <ph id="ph1">`IDToFind`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">Exemple c# utilise un délégué anonyme.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Rechercher tous les livres dont <ph id="ph1">`Genre`</ph> propriété est « Ordinateur » à l’aide de la <ph id="ph2">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">Recherche le dernier livre dans la collection ayant une date de publication avant 2001, à l’aide de la <ph id="ph1">`PubBefore2001`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">Exemple c# utilise un délégué anonyme.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du premier livre d’ordinateur à l’aide du <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du dernier ordinateur livre en utilisant la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du premier livre de l’ordinateur dans la seconde moitié de la collection, à l’aide de la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du dernier ordinateur livre dans la seconde moitié de la collection, à l’aide de la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the elements to search for.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions des éléments à rechercher.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Retrieves all the elements that match the conditions defined by the specified predicate.</source>
          <target state="translated">Récupère tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contenant tous les éléments qui correspondent aux conditions définies par le prédicat spécifié, le cas échéant ; sinon, <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> vide.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and the elements that match the conditions are saved in the returned <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> délégué et les éléments qui correspondent aux conditions sont enregistrés dans le texte retourné <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">L’exemple suivant illustre les méthodes de recherche pour la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">L’exemple de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe contient <ph id="ph2">`book`</ph> les objets de classe <ph id="ph3">`Book`</ph>, en utilisant les données à partir de la <bpt id="p1">[</bpt>exemple de fichier XML : livres (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated">Le <ph id="ph1">`FillList`</ph> méthode dans l’exemple utilise <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> pour analyser les valeurs à partir du XML dans les valeurs de propriété de la <ph id="ph2">`book`</ph> objets.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">Le tableau suivant décrit les exemples fournis pour les méthodes de recherche.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">Méthode</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">Recherche un livre par un ID à l’aide de la <ph id="ph1">`IDToFind`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">Exemple c# utilise un délégué anonyme.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Rechercher tous les livres dont <ph id="ph1">`Genre`</ph> propriété est « Ordinateur » à l’aide de la <ph id="ph2">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">Recherche le dernier livre dans la collection ayant une date de publication avant 2001, à l’aide de la <ph id="ph1">`PubBefore2001`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">Exemple c# utilise un délégué anonyme.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du premier livre d’ordinateur à l’aide du <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du dernier ordinateur livre en utilisant la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du premier livre de l’ordinateur dans la seconde moitié de la collection, à l’aide de la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du dernier ordinateur livre dans la seconde moitié de la collection, à l’aide de la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated">Recherche un élément qui correspond aux conditions définies par un prédicat spécifié et retourne l'index de base zéro de la première occurrence trouvée dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou une partie de celui-ci.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>This method returns -1 if an item that matches the conditions is not found.</source>
          <target state="translated">Cette méthode retourne -1 si un élément correspondant aux conditions est introuvable.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions de l'élément à rechercher.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la première occurrence trouvée dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> entier.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The zero-based index of the first occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la première occurrence d'un élément qui répond aux conditions définies par <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, si cette occurrence est trouvée ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at the first element and ending at the last element.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> recherche est effectuée vers l’avant à partir du premier élément au dernier élément.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The delegate has the signature:</source>
          <target state="translated">Le délégué a la signature :</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class with two fields, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Id`</ph>.</source>
          <target state="translated">L’exemple suivant définit un <ph id="ph1">`Employee`</ph> classe contenant deux champs, <ph id="ph2">`Name`</ph> et <ph id="ph3">`Id`</ph>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>It also defines an <ph id="ph1">`EmployeeSearch`</ph> class with a single method, <ph id="ph2">`StartsWith`</ph>, that indicates whether the <ph id="ph3">`Employee.Name`</ph> field starts with a specified substring that is supplied to the <ph id="ph4">`EmployeeSearch`</ph> class constructor.</source>
          <target state="translated">Il définit également une <ph id="ph1">`EmployeeSearch`</ph> classe avec une méthode unique, <ph id="ph2">`StartsWith`</ph>, qui indique si le <ph id="ph3">`Employee.Name`</ph> champ commence par une sous-chaîne spécifiée qui est fournie à la <ph id="ph4">`EmployeeSearch`</ph> constructeur de classe.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>Note  the signature of this method</source>
          <target state="translated">Notez la signature de cette méthode.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>corresponds to the signature of the delegate that can be passed to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method.</source>
          <target state="translated">correspond à la signature du délégué qui peut être passé à la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The example instantiates a <ph id="ph1">`List&lt;Employee&gt;`</ph> object, adds a number of <ph id="ph2">`Employee`</ph> objets to it, and then calls the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> method twice  to search the entire collection , the first time for the first <ph id="ph4">`Employee`</ph> object whose <ph id="ph5">`Name`</ph> field begins with "J", and the second time for the first <ph id="ph6">`Employee`</ph> object whose <ph id="ph7">`Name`</ph> field begins with "Ju".</source>
          <target state="translated">L’exemple instancie un <ph id="ph1">`List&lt;Employee&gt;`</ph> d’objet, ajoute un nombre de <ph id="ph2">`Employee`</ph> objets à elle, puis appelle la <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> méthode à deux reprises pour rechercher la collection entière, la première fois pour la première <ph id="ph4">`Employee`</ph> dont l’objet <ph id="ph5">`Name`</ph> champ commence par « J » et la deuxième fois pour la première <ph id="ph6">`Employee`</ph> dont l’objet <ph id="ph7">`Name`</ph> champ commence par « Ju ».</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">Index de début de base zéro de la recherche.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions de l'élément à rechercher.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the specified index to the last element.</source>
          <target state="translated">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui s'étend de l'index spécifié au dernier élément.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the first occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la première occurrence d'un élément qui répond aux conditions définies par <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, si cette occurrence est trouvée ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`startIndex`</ph> and ending at the last element.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> recherche est effectuée vers l’avant <ph id="ph2">`startIndex`</ph> et jusqu’au dernier élément.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The delegate has the signature:</source>
          <target state="translated">Le délégué a la signature :</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from <ph id="ph1">`startIndex`</ph> to the end of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est le nombre d’éléments à partir de <ph id="ph1">`startIndex`</ph> à la fin de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class with two fields, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Id`</ph>.</source>
          <target state="translated">L’exemple suivant définit un <ph id="ph1">`Employee`</ph> classe contenant deux champs, <ph id="ph2">`Name`</ph> et <ph id="ph3">`Id`</ph>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>It also defines an <ph id="ph1">`EmployeeSearch`</ph> class with a single method, <ph id="ph2">`StartsWith`</ph>, that indicates whether the <ph id="ph3">`Employee.Name`</ph> field starts with a specified substring that is supplied to the <ph id="ph4">`EmployeeSearch`</ph> class constructor.</source>
          <target state="translated">Il définit également une <ph id="ph1">`EmployeeSearch`</ph> classe avec une méthode unique, <ph id="ph2">`StartsWith`</ph>, qui indique si le <ph id="ph3">`Employee.Name`</ph> champ commence par une sous-chaîne spécifiée qui est fournie à la <ph id="ph4">`EmployeeSearch`</ph> constructeur de classe.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>Note  the signature of this method</source>
          <target state="translated">Notez la signature de cette méthode.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>corresponds to the signature of the delegate that can be passed to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method.</source>
          <target state="translated">correspond à la signature du délégué qui peut être passé à la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The example instantiates a <ph id="ph1">`List&lt;Employee&gt;`</ph> object, adds a number of <ph id="ph2">`Employee`</ph> objets to it, and then calls the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> method twice  to search the collection starting with its fifth member (that is, the member at index 4).</source>
          <target state="translated">L’exemple instancie un <ph id="ph1">`List&lt;Employee&gt;`</ph> d’objet, ajoute un nombre de <ph id="ph2">`Employee`</ph> objets à elle, puis appelle la <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> méthode à deux reprises pour rechercher dans la collection, en commençant par son membre cinquième (autrement dit, le membre à l’index 4).</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The first time, it searches for the first <ph id="ph1">`Employee`</ph> object whose <ph id="ph2">`Name`</ph> field begins with "J"; the second time, it searches for the first <ph id="ph3">`Employee`</ph> object whose <ph id="ph4">`Name`</ph> field begins with "Ju".</source>
          <target state="translated">La première fois, il recherche la première <ph id="ph1">`Employee`</ph> dont l’objet <ph id="ph2">`Name`</ph> champ commence par « J » ; la deuxième fois, il recherche la première <ph id="ph3">`Employee`</ph> dont l’objet <ph id="ph4">`Name`</ph> champ commence par « Ju ».</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> est en dehors de la plage d’index valides pour <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">Index de début de base zéro de la recherche.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The number of elements in the section to search.</source>
          <target state="translated">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions de l'élément à rechercher.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that starts at the specified index and contains the specified number of elements.</source>
          <target state="translated">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui commence à l'index spécifié et contient le nombre d'éléments spécifié.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the first occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la première occurrence d'un élément qui répond aux conditions définies par <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, si cette occurrence est trouvée ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`startIndex`</ph> and ending at <ph id="ph3">`startIndex`</ph> plus <ph id="ph4">`count`</ph> minus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> recherche est effectuée vers l’avant <ph id="ph2">`startIndex`</ph> et se terminant à <ph id="ph3">`startIndex`</ph> plus <ph id="ph4">`count`</ph> -1, si <ph id="ph5">`count`</ph> est supérieur à 0.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The delegate has the signature:</source>
          <target state="translated">Le délégué a la signature :</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class with two fields, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Id`</ph>.</source>
          <target state="translated">L’exemple suivant définit un <ph id="ph1">`Employee`</ph> classe contenant deux champs, <ph id="ph2">`Name`</ph> et <ph id="ph3">`Id`</ph>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>It also defines an <ph id="ph1">`EmployeeSearch`</ph> class with a single method, <ph id="ph2">`StartsWith`</ph>, that indicates whether the <ph id="ph3">`Employee.Name`</ph> field starts with a specified substring that is supplied to the <ph id="ph4">`EmployeeSearch`</ph> class constructor.</source>
          <target state="translated">Il définit également une <ph id="ph1">`EmployeeSearch`</ph> classe avec une méthode unique, <ph id="ph2">`StartsWith`</ph>, qui indique si le <ph id="ph3">`Employee.Name`</ph> champ commence par une sous-chaîne spécifiée qui est fournie à la <ph id="ph4">`EmployeeSearch`</ph> constructeur de classe.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Note  the signature of this method</source>
          <target state="translated">Notez la signature de cette méthode.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>corresponds to the signature of the delegate that can be passed to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method.</source>
          <target state="translated">correspond à la signature du délégué qui peut être passé à la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The example instantiates a <ph id="ph1">`List&lt;Employee&gt;`</ph> object, adds a number of <ph id="ph2">`Employee`</ph> objets to it, and then calls the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> method twice  to search the entire collection (that is, the members from index 0 to index <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> - 1).</source>
          <target state="translated">L’exemple instancie un <ph id="ph1">`List&lt;Employee&gt;`</ph> d’objet, ajoute un nombre de <ph id="ph2">`Employee`</ph> objets à elle, puis appelle la <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> à deux reprises pour rechercher la collection entière (méthode) (autrement dit, les membres de l’index 0 à l’index <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> - 1).</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The first time, it searches for the first <ph id="ph1">`Employee`</ph> object whose <ph id="ph2">`Name`</ph> field begins with "J"; the second time, it searches for the first <ph id="ph3">`Employee`</ph> object whose <ph id="ph4">`Name`</ph> field begins with "Ju".</source>
          <target state="translated">La première fois, il recherche la première <ph id="ph1">`Employee`</ph> dont l’objet <ph id="ph2">`Name`</ph> champ commence par « J » ; la deuxième fois, il recherche la première <ph id="ph3">`Employee`</ph> dont l’objet <ph id="ph4">`Name`</ph> champ commence par « Ju ».</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> est en dehors de la plage d’index valides pour <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ne spécifient pas une section valide dans <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions de l'élément à rechercher.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la dernière occurrence dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> entier.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">Dernier élément qui correspond aux conditions définies par le prédicat spécifié, s'il est trouvé ; sinon, valeur par défaut du type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, moving backward in the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, starting with the last element and ending with the first element.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> délégué, le déplacement vers l’arrière le <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, en commençant par le dernier élément et se terminant par le premier élément.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Processing is stopped when a match is found.</source>
          <target state="translated">Le traitement est arrêté lorsqu’une correspondance est trouvée.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</source>
          <target state="translated">Lorsque vous recherchez une liste contenant des types valeur, assurez-vous que la valeur par défaut pour le type ne satisfait pas le prédicat de recherche.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</source>
          <target state="translated">Dans le cas contraire, il n’existe aucun moyen de faire la distinction entre une valeur par défaut indiquant qu’aucune correspondance n’a été trouvé et un élément de liste qui a la valeur par défaut pour le type.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>If the default value satisfies the search predicate, use the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindLastIndex%2A&gt;</ph> method instead.</source>
          <target state="translated">Si la valeur par défaut satisfait le prédicat de recherche, utilisez la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindLastIndex%2A&gt;</ph> méthode à la place.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">L’exemple suivant illustre les méthodes de recherche pour la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">L’exemple de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe contient <ph id="ph2">`book`</ph> les objets de classe <ph id="ph3">`Book`</ph>, en utilisant les données à partir de la <bpt id="p1">[</bpt>exemple de fichier XML : livres (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated">Le <ph id="ph1">`FillList`</ph> méthode dans l’exemple utilise <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> pour analyser les valeurs à partir du XML dans les valeurs de propriété de la <ph id="ph2">`book`</ph> objets.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">Le tableau suivant décrit les exemples fournis pour les méthodes de recherche.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">Méthode</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">Recherche un livre par un ID à l’aide de la <ph id="ph1">`IDToFind`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">Exemple c# utilise un délégué anonyme.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Rechercher tous les livres dont <ph id="ph1">`Genre`</ph> propriété est « Ordinateur » à l’aide de la <ph id="ph2">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">Recherche le dernier livre dans la collection ayant une date de publication avant 2001, à l’aide de la <ph id="ph1">`PubBefore2001`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">Exemple c# utilise un délégué anonyme.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du premier livre d’ordinateur à l’aide du <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du dernier ordinateur livre en utilisant la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du premier livre de l’ordinateur dans la seconde moitié de la collection, à l’aide de la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du dernier ordinateur livre dans la seconde moitié de la collection, à l’aide de la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated">Recherche un élément qui correspond aux conditions définies par un prédicat spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou une partie de celui-ci.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions de l'élément à rechercher.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> entier.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The zero-based index of the last occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la dernière occurrence d'un élément qui correspond aux conditions définies par <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, si cette occurrence est trouvée ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at the last element and ending at the first element.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> recherche est effectuée vers l’arrière à partir du dernier élément du premier élément.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">L’exemple suivant illustre les méthodes de recherche pour la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">L’exemple de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe contient <ph id="ph2">`book`</ph> les objets de classe <ph id="ph3">`Book`</ph>, en utilisant les données à partir de la <bpt id="p1">[</bpt>exemple de fichier XML : livres (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated">Le <ph id="ph1">`FillList`</ph> méthode dans l’exemple utilise <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> pour analyser les valeurs à partir du XML dans les valeurs de propriété de la <ph id="ph2">`book`</ph> objets.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">Le tableau suivant décrit les exemples fournis pour les méthodes de recherche.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">Méthode</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">Recherche un livre par un ID à l’aide de la <ph id="ph1">`IDToFind`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">Exemple c# utilise un délégué anonyme.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Rechercher tous les livres dont <ph id="ph1">`Genre`</ph> propriété est « Ordinateur » à l’aide de la <ph id="ph2">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">Recherche le dernier livre dans la collection ayant une date de publication avant 2001, à l’aide de la <ph id="ph1">`PubBefore2001`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">Exemple c# utilise un délégué anonyme.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du premier livre d’ordinateur à l’aide du <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du dernier ordinateur livre en utilisant la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du premier livre de l’ordinateur dans la seconde moitié de la collection, à l’aide de la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du dernier ordinateur livre dans la seconde moitié de la collection, à l’aide de la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">Index de début de base zéro de la recherche vers le haut.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions de l'élément à rechercher.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the first element to the specified index.</source>
          <target state="translated">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans la plage d'éléments du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui s'étend du premier élément à l'index spécifié.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the last occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la dernière occurrence d'un élément qui correspond aux conditions définies par <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, si cette occurrence est trouvée ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`startIndex`</ph> and ending at the first element.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> est effectuée vers l’arrière commençant à <ph id="ph2">`startIndex`</ph> et jusqu’au premier élément.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from the beginning of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to <ph id="ph2">`startIndex`</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est le nombre d’éléments à partir du début de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> à <ph id="ph2">`startIndex`</ph>.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> est en dehors de la plage d’index valides pour <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">Index de début de base zéro de la recherche vers le haut.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The number of elements in the section to search.</source>
          <target state="translated">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions de l'élément à rechercher.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains the specified number of elements and ends at the specified index.</source>
          <target state="translated">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans la plage d'éléments du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui contient le nombre d'éléments spécifié et se termine à l'index spécifié.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the last occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la dernière occurrence d'un élément qui correspond aux conditions définies par <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, si cette occurrence est trouvée ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`startIndex`</ph> and ending at <ph id="ph3">`startIndex`</ph> minus <ph id="ph4">`count`</ph> plus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> est effectuée vers l’arrière commençant à <ph id="ph2">`startIndex`</ph> et se terminant à <ph id="ph3">`startIndex`</ph> moins <ph id="ph4">`count`</ph> + 1, si <ph id="ph5">`count`</ph> est supérieur à 0.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">L’exemple suivant illustre les méthodes de recherche pour la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">L’exemple de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe contient <ph id="ph2">`book`</ph> les objets de classe <ph id="ph3">`Book`</ph>, en utilisant les données à partir de la <bpt id="p1">[</bpt>exemple de fichier XML : livres (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated">Le <ph id="ph1">`FillList`</ph> méthode dans l’exemple utilise <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> pour analyser les valeurs à partir du XML dans les valeurs de propriété de la <ph id="ph2">`book`</ph> objets.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">Le tableau suivant décrit les exemples fournis pour les méthodes de recherche.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">Méthode</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">Recherche un livre par un ID à l’aide de la <ph id="ph1">`IDToFind`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">Exemple c# utilise un délégué anonyme.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Rechercher tous les livres dont <ph id="ph1">`Genre`</ph> propriété est « Ordinateur » à l’aide de la <ph id="ph2">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">Recherche le dernier livre dans la collection ayant une date de publication avant 2001, à l’aide de la <ph id="ph1">`PubBefore2001`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">Exemple c# utilise un délégué anonyme.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du premier livre d’ordinateur à l’aide du <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du dernier ordinateur livre en utilisant la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du premier livre de l’ordinateur dans la seconde moitié de la collection, à l’aide de la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">Recherche l’index du dernier ordinateur livre dans la seconde moitié de la collection, à l’aide de la <ph id="ph1">`FindComputer`</ph> délégué de prédicat.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> est en dehors de la plage d’index valides pour <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ne spécifient pas une section valide dans <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> delegate to perform on each element of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> à exécuter sur chaque élément de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>Performs the specified action on each element of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Exécute l'action spécifiée sur chaque élément de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> is a delegate to a method that performs an action on the object passed to it.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> est un délégué à une méthode qui effectue une action sur l’objet passé.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Action%601&gt;</ph> delegate.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Action%601&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>Modifying the underlying collection in the body of the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate is not supported and causes undefined behavior.</source>
          <target state="translated">Modification de la collection sous-jacente dans le corps de la <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> délégué n’est pas prise en charge et provoque un comportement non défini.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate to print the contents of a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">L’exemple suivant illustre l’utilisation de la <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> délégué pour imprimer le contenu d’un <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>In this example the <ph id="ph1">`Print`</ph> method is used to display the contents of the list to the console.</source>
          <target state="translated">Dans cet exemple la <ph id="ph1">`Print`</ph> méthode est utilisée pour afficher le contenu de la liste dans la console.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>In addition to displaying the contents using the <ph id="ph1">`Print`</ph> method, the C# example demonstrates the use of  to display the results to the console.</source>
          <target state="translated">En plus de l’affichage du contenu à l’aide de la <ph id="ph1">`Print`</ph> méthode, l’exemple c# illustre l’utilisation de pour afficher les résultats dans la console.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source><ph id="ph1">&lt;paramref name="action" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="action" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>An element in the collection has been modified.</source>
          <target state="translated">Un élément a été modifié dans la collection.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Retourne un énumérateur qui itère au sein de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1.Enumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1.Enumerator" /&gt;</ph> pour l'objet <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">Le <ph id="ph1">`foreach`</ph> instruction du langage c# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) masque la complexité des énumérateurs.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Il est donc recommandé d'utiliser <ph id="ph1">`foreach`</ph> plutôt que de manipuler l'énumérateur directement.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Les énumérateurs peuvent être utilisés pour lire les données de la collection, mais ils ne permettent pas de modifier la collection sous-jacente.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Au départ, l’énumérateur est positionné avant le premier élément de la collection.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">À cette position, la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> propriété n’est pas définie.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Par conséquent, vous devez appeler la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> méthode pour avancer l’énumérateur jusqu’au premier élément de la collection avant de lire la valeur de <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> property returns the same object until <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> propriété retourne le même objet jusqu'à ce que <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> affecte l'élément suivant à <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> dépasse la fin de la collection, l’énumérateur est placée après le dernier élément dans la collection et <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> retourne <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Lorsque l’énumérateur est à cette position, les appels suivants à <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> également retourner <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si le dernier appel à <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> retourné <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> n’est pas défini.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">Vous ne pouvez pas attribuer de nouveau <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> au premier élément de la collection ; vous devez créer une nouvelle instance de l'énumérateur à la place.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un énumérateur est valide tant que la collection demeure inchangée.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si des modifications sont apportées à la collection, telles que l'ajout, la modification ou la suppression d'éléments, l'énumérateur est définitivement invalidé et son comportement n'est pas défini.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Comme l’énumérateur ne dispose pas d’un accès exclusif à la collection, l’énumération d’une collection n’est pas intrinsèquement une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated">Les implémentations par défaut de collections dans l'espace de noms <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> ne sont pas synchronisées.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Cette méthode est une opération o (1).</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The zero-based <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> index at which the range starts.</source>
          <target state="translated">Index de base zéro <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> où débute la plage.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The number of elements in the range.</source>
          <target state="translated">Nombre d'éléments dans la plage.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>Creates a shallow copy of a range of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Crée une copie superficielle d'une plage d'éléments de la source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>A shallow copy of a range of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Copie superficielle d'une plage d'éléments de la source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection.</source>
          <target state="translated">Une copie superficielle d’une collection de types de référence, ou un sous-ensemble de cette collection, contient uniquement les références aux éléments de la collection.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The objects themselves are not copied.</source>
          <target state="translated">Les objets eux-mêmes ne sont pas copiés.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The references in the new list point to the same objects as the references in the original list.</source>
          <target state="translated">Les références dans la nouvelle liste désignent les mêmes objets que les références dans la liste d’origine.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection.</source>
          <target state="translated">Une copie superficielle d’une collection de types valeur, ou un sous-ensemble de cette collection, contient les éléments de la collection.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>However, if the elements of the collection contain references to other objects, those objects are not copied.</source>
          <target state="translated">Toutefois, si les éléments de la collection contiennent des références à d’autres objets, ces objets ne sont pas copiés.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.</source>
          <target state="translated">Les références dans les éléments de la nouvelle collection désignent les mêmes objets que les références dans les éléments de la collection d’origine.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">En revanche, une copie complète d’une collection copie les éléments et tous les éléments référencés directement ou indirectement par les éléments.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> method and other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> (méthode) et autres méthodes de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe qui agissent sur les plages.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>At the end of the example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> method is used to get three items from the list, beginning with index location 2.</source>
          <target state="translated">À la fin de l’exemple, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> méthode est utilisée pour obtenir les trois éléments dans la liste, en commençant à la position d’index 2.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> method is called on the resulting <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, creating an array of three elements.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> méthode est appelée sur résultant <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, création d’un tableau de trois éléments.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The elements of the array are displayed.</source>
          <target state="translated">Les éléments du tableau sont affichés.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ne désignent pas une plage valide d'éléments dans <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Returns the zero-based index of the first occurrence of a value in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or in a portion of it.</source>
          <target state="translated">Retourne l'index de base zéro de la première occurrence d'une valeur trouvée dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou dans une partie de celui-ci.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Objet à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Recherche l'objet spécifié et retourne l'index de base zéro de la première occurrence trouvée dans l'ensemble du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the entire <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la première occurrence d'<ph id="ph1">&lt;paramref name="item" /&gt;</ph> dans l'ensemble de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, s'il existe ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at the first element and ending at the last element.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> recherche est effectuée vers l’avant à partir du premier élément au dernier élément.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Cette méthode détermine l’égalité en utilisant le comparateur d’égalité par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour <ph id="ph2">`T`</ph>, le type de valeurs dans la liste.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre les trois surcharges de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé, avec une entrée qui apparaît deux fois, à l’emplacement d’index 0 et l’emplacement d’index 5.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> method overload searches the list from the beginning, and finds the first occurrence of the string.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> surcharge de méthode de recherche dans la liste à partir du début et de la première occurrence de la chaîne.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher la liste en commençant par l’emplacement d’index 3 et en continuant à la fin de la liste et la deuxième occurrence de la chaîne.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher une plage de deux entrées, en commençant à l’emplacement d’index deux ; elle retourne – 1, car il n’existe aucune instance de la chaîne de recherche dans cette plage.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Objet à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">Index de début de base zéro de la recherche.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>0 (zero) is valid in an empty list.</source>
          <target state="translated">0 (zéro) est valide dans une liste vide.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the specified index to the last element.</source>
          <target state="translated">Recherche l'objet spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui s'étend de l'index spécifié au dernier élément.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from <ph id="ph3">&lt;paramref name="index" /&gt;</ph> to the last element, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la première occurrence de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> trouvée dans la plage d'éléments de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui s'étend de <ph id="ph3">&lt;paramref name="index" /&gt;</ph> au dernier élément, le cas échéant ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`index`</ph> and ending at the last element.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> recherche est effectuée vers l’avant <ph id="ph2">`index`</ph> et jusqu’au dernier élément.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Cette méthode détermine l’égalité en utilisant le comparateur d’égalité par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour <ph id="ph2">`T`</ph>, le type de valeurs dans la liste.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from <ph id="ph1">`index`</ph> to the end of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est le nombre d’éléments à partir de <ph id="ph1">`index`</ph> à la fin de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre les trois surcharges de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé, avec une entrée qui apparaît deux fois, à l’emplacement d’index 0 et l’emplacement d’index 5.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> method overload searches the list from the beginning, and finds the first occurrence of the string.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> surcharge de méthode de recherche dans la liste à partir du début et de la première occurrence de la chaîne.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher la liste en commençant par l’emplacement d’index 3 et en continuant à la fin de la liste et la deuxième occurrence de la chaîne.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher une plage de deux entrées, en commençant à l’emplacement d’index deux ; elle retourne – 1, car il n’existe aucune instance de la chaîne de recherche dans cette plage.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est en dehors de la plage d’index valides pour <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Objet à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">Index de début de base zéro de la recherche.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>0 (zero) is valid in an empty list.</source>
          <target state="translated">0 (zéro) est valide dans une liste vide.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The number of elements in the section to search.</source>
          <target state="translated">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that starts at the specified index and contains the specified number of elements.</source>
          <target state="translated">Recherche l'objet spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui commence à l'index spécifié et qui contient le nombre d'éléments spécifié.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that starts at <ph id="ph3">&lt;paramref name="index" /&gt;</ph> and contains <ph id="ph4">&lt;paramref name="count" /&gt;</ph> number of elements, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la première occurrence de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> trouvée dans la plage d'éléments de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui commence à <ph id="ph3">&lt;paramref name="index" /&gt;</ph> et contient le nombre <ph id="ph4">&lt;paramref name="count" /&gt;</ph> d'éléments, le cas échéant ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`index`</ph> and ending at <ph id="ph3">`index`</ph> plus <ph id="ph4">`count`</ph> minus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> recherche est effectuée vers l’avant <ph id="ph2">`index`</ph> et se terminant à <ph id="ph3">`index`</ph> plus <ph id="ph4">`count`</ph> -1, si <ph id="ph5">`count`</ph> est supérieur à 0.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Cette méthode détermine l’égalité en utilisant le comparateur d’égalité par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour <ph id="ph2">`T`</ph>, le type de valeurs dans la liste.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre les trois surcharges de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé, avec une entrée qui apparaît deux fois, à l’emplacement d’index 0 et l’emplacement d’index 5.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> method overload searches the list from the beginning, and finds the first occurrence of the string.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> surcharge de méthode de recherche dans la liste à partir du début et de la première occurrence de la chaîne.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher la liste en commençant par l’emplacement d’index 3 et en continuant à la fin de la liste et la deuxième occurrence de la chaîne.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher une plage de deux entrées, en commençant à l’emplacement d’index deux ; elle retourne – 1, car il n’existe aucune instance de la chaîne de recherche dans cette plage.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est en dehors de la plage d’index valides pour <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ne spécifient pas une section valide dans <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated">Index de base zéro auquel <bpt id="p1">&lt;c&gt;</bpt>l’élément<ept id="p1">&lt;/c&gt;</ept> doit être inséré.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The object to insert.</source>
          <target state="translated">Objet à insérer.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>Inserts an element into the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> at the specified index.</source>
          <target state="translated">Insère un élément dans la classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> au niveau de l'index spécifié.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepte <ph id="ph2">`null`</ph> comme une valeur valide pour la référence de types et autorise les éléments en double.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> already equals <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> est déjà égale à <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, la capacité de le <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> est augmentée en réallouant automatiquement le tableau interne, et les éléments existants sont copiés dans le nouveau tableau avant le nouvel élément est ajouté.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> is added to the end of <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Si <ph id="ph1">`index`</ph> est égal à <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> est ajouté à la fin de <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">L’exemple suivant montre comment ajouter, supprimer et insérer un objet métier simple dans un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method, along with various other properties and methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> (méthode), ainsi que de nombreuses autres propriétés et méthodes de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe générique.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>After the list is created, elements are added.</source>
          <target state="translated">Une fois que la liste est créée, les éléments sont ajoutés.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert an item into the middle of the list.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> méthode est utilisée pour insérer un élément dans le milieu de la liste.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The item inserted is a duplicate, which is later removed using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method.</source>
          <target state="translated">L’élément inséré est un doublon, qui est supprimé ultérieurement à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est supérieur à <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The zero-based index at which the new elements should be inserted.</source>
          <target state="translated">Index de base zéro au niveau duquel les nouveaux éléments devraient être insérés.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements should be inserted into the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Collection dont les éléments doivent être insérés dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The collection itself cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, but it can contain elements that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> is a reference type.</source>
          <target state="translated">La collection elle-même ne peut pas avoir la valeur <ph id="ph1">&lt;see langword="null" /&gt;</ph>, mais elle peut contenir des éléments qui sont <ph id="ph2">&lt;see langword="null" /&gt;</ph>, si le type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> est un type référence.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>Inserts the elements of a collection into the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> at the specified index.</source>
          <target state="translated">Insère les éléments d'une collection dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> au niveau de l'index spécifié.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepte <ph id="ph2">`null`</ph> comme une valeur valide pour la référence de types et autorise les éléments en double.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>If the new <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (the current <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</source>
          <target state="translated">Si la nouvelle <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (actuel <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> plus la taille de la collection) sera supérieur à <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, le capacité de le <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> est augmentée en réallouant automatiquement le tableau interne pour prendre en compte les nouveaux éléments et la éléments existants sont copiés dans le nouveau tableau avant que les nouveaux éléments sont ajoutés.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, the elements are added to the end of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Si <ph id="ph1">`index`</ph> est égal à <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, les éléments sont ajoutés à la fin de <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The order of the elements in the collection is preserved in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">L’ordre des éléments dans la collection est conservé dans le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> * </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is the number of elements to be added and <bpt id="p4">*</bpt>m<ept id="p4">*</ept> is <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> * </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) opération, où <bpt id="p3">*</bpt>n<ept id="p3">*</ept> est le nombre d’éléments à ajouter et <bpt id="p4">*</bpt>m<ept id="p4">*</ept> est <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The following example demonstrates <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph> method and various other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">L’exemple suivant montre comment <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph> (méthode) et diverses autres méthodes de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe qui agissent sur les plages.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph> method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3.</source>
          <target state="translated">Une fois que la liste a été créée et remplie avec les noms de plusieurs pacifiques plant dinosaures, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph> méthode est utilisée pour insérer un tableau de trois dinosaures féroces dans la liste, en commençant à l’emplacement d’index 3.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est supérieur à <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">Index de base zéro de l'élément à obtenir ou à définir.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">Obtient ou définit l'élément au niveau de l'index spécifié.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The element at the specified index.</source>
          <target state="translated">Élément au niveau de l'index spécifié.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepte <ph id="ph2">`null`</ph> comme une valeur valide pour la référence de types et autorise les éléments en double.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[index]`</ph>.</source>
          <target state="translated">Cette propriété permet d'accéder à un élément spécifique de la collection à l'aide de la syntaxe suivante : <ph id="ph1">`myCollection[index]`</ph>.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération o (1) ; définition de la propriété est également une opération o (1).</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The example in this section demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property (the indexer in C#) and various other properties and methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">L’exemple de cette section montre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriété (l’indexeur en c#) et diverses autres propriétés et méthodes de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe générique.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>After the list has been created and populated using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method, an element is retrieved and displayed using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">Une fois que la liste a été créée et remplie à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> (méthode), un élément est récupéré et affiché à l’aide de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>(For an example that uses the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property to set the value of a list element, see <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph>.)</source>
          <target state="translated">(Pour obtenir un exemple qui utilise le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriété pour définir la valeur d’un élément de liste, voir <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Visual Basic, C#, and C++ all have syntax for accessing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property without using its name.</source>
          <target state="translated">Visual Basic, c# et C++ tous ont la syntaxe permettant d’accéder à la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriété sans utiliser son nom.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Instead, the variable containing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is used as if it were an array.</source>
          <target state="translated">Au lieu de cela, la variable contenant le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> est utilisée comme s’il s’agissait d’un tableau.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">Le langage c# utilise le mot clé pour définir les indexeurs au lieu d’implémenter la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implémente <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> comme propriété par défaut, ce qui fournit les mêmes fonctionnalités d'indexation.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est supérieur ou égal à <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Returns the zero-based index of the last occurrence of a value in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or in a portion of it.</source>
          <target state="translated">Retourne l'index de base zéro de la dernière occurrence d'une valeur trouvée dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou une partie de celui-ci.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Objet à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Recherche l'objet spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans l'ensemble de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the entire the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la dernière occurrence de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> trouvée dans l'ensemble de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, le cas échéant ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at the last element and ending at the first element.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> recherche est effectuée vers l’arrière à partir du dernier élément du premier élément.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Cette méthode détermine l’égalité en utilisant le comparateur d’égalité par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour <ph id="ph2">`T`</ph>, le type de valeurs dans la liste.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre les trois surcharges de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé, avec une entrée qui apparaît deux fois, à l’emplacement d’index 0 et l’emplacement d’index 5.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> method overload searches the entire list from the end, and finds the second occurrence of the string.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> surcharge de méthode recherche toute la liste à partir de la fin et la deuxième occurrence de la chaîne.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher la liste en commençant à la position d’index 3 et en remontant vers le début de la liste, afin qu’il recherche la première occurrence de la chaîne dans la liste.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher une plage de quatre entrées, en commençant à l’emplacement d’index 4 et en poursuivant vers le bas (autrement dit, il recherche les éléments aux emplacements 4, 3, 2 et 1) ; cette recherche retourne -1, car il n’existe aucune instance de la recherche chaîne dans cette plage.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Objet à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">Index de début de base zéro de la recherche vers le haut.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the first element to the specified index.</source>
          <target state="translated">Recherche l'objet spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans la plage d'éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui s'étend du premier élément à l'index spécifié.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the first element to <ph id="ph3">&lt;paramref name="index" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la dernière occurrence de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> trouvée dans la plage d'éléments de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui s'étend du premier élément à <ph id="ph3">&lt;paramref name="index" /&gt;</ph>, le cas échéant ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`index`</ph> and ending at the first element.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> est effectuée vers l’arrière commençant à <ph id="ph2">`index`</ph> et jusqu’au premier élément.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Cette méthode détermine l’égalité en utilisant le comparateur d’égalité par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour <ph id="ph2">`T`</ph>, le type de valeurs dans la liste.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from the beginning of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to <ph id="ph2">`index`</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est le nombre d’éléments à partir du début de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> à <ph id="ph2">`index`</ph>.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre les trois surcharges de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé, avec une entrée qui apparaît deux fois, à l’emplacement d’index 0 et l’emplacement d’index 5.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> method overload searches the entire list from the end, and finds the second occurrence of the string.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> surcharge de méthode recherche toute la liste à partir de la fin et la deuxième occurrence de la chaîne.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher la liste en commençant à la position d’index 3 et en remontant vers le début de la liste, afin qu’il recherche la première occurrence de la chaîne dans la liste.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher une plage de quatre entrées, en commençant à l’emplacement d’index 4 et en poursuivant vers le bas (autrement dit, il recherche les éléments aux emplacements 4, 3, 2 et 1) ; cette recherche retourne -1, car il n’existe aucune instance de la recherche chaîne dans cette plage.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est en dehors de la plage d’index valides pour <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Objet à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">Index de début de base zéro de la recherche vers le haut.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The number of elements in the section to search.</source>
          <target state="translated">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains the specified number of elements and ends at the specified index.</source>
          <target state="translated">Recherche l'objet spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans la plage d'éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui contient le nombre spécifié d'éléments et se termine à l'index spécifié.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains <ph id="ph3">&lt;paramref name="count" /&gt;</ph> number of elements and ends at <ph id="ph4">&lt;paramref name="index" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated">Index de base zéro de la dernière occurrence de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> trouvée dans la plage d'éléments de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> qui contient le nombre d'éléments <ph id="ph3">&lt;paramref name="count" /&gt;</ph> et se termine à <ph id="ph4">&lt;paramref name="index" /&gt;</ph>, le cas échéant ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`index`</ph> and ending at <ph id="ph3">`index`</ph> minus <ph id="ph4">`count`</ph> plus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> est effectuée vers l’arrière commençant à <ph id="ph2">`index`</ph> et se terminant à <ph id="ph3">`index`</ph> moins <ph id="ph4">`count`</ph> + 1, si <ph id="ph5">`count`</ph> est supérieur à 0.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Cette méthode détermine l’égalité en utilisant le comparateur d’égalité par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour <ph id="ph2">`T`</ph>, le type de valeurs dans la liste.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre les trois surcharges de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé, avec une entrée qui apparaît deux fois, à l’emplacement d’index 0 et l’emplacement d’index 5.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> method overload searches the entire list from the end, and finds the second occurrence of the string.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> surcharge de méthode recherche toute la liste à partir de la fin et la deuxième occurrence de la chaîne.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher la liste en commençant à la position d’index 3 et en remontant vers le début de la liste, afin qu’il recherche la première occurrence de la chaîne dans la liste.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour rechercher une plage de 4 entrées, en commençant à l’emplacement d’index 4 et en poursuivant vers le bas (autrement dit, il recherche les éléments aux emplacements 4, 3, 2 et 1) ; cette recherche retourne -1, car il n’existe aucune instance de la recherche chaîne dans cette plage.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est en dehors de la plage d’index valides pour <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ne spécifient pas une section valide dans <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The object to remove from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Objet à supprimer de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">La valeur peut être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les types référence.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Supprime la première occurrence d'un objet spécifique de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is successfully removed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="item" /&gt;</ph> est bien supprimé ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> was not found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Cette méthode retourne également <ph id="ph1">&lt;see langword="false" /&gt;</ph> si <ph id="ph2">&lt;paramref name="item" /&gt;</ph> est introuvable dans <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>If type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface, the equality comparer is the <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method of that interface; otherwise, the default equality comparer is <ph id="ph4">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si type <ph id="ph1">`T`</ph> implémente la <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> est d’interface générique, le comparateur d’égalité le <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> méthode de cette interface ; sinon, le comparateur d’égalité par défaut est <ph id="ph4">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">L’exemple suivant montre comment ajouter, supprimer et insérer un objet métier simple dans un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The following example demonstrates <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant montre comment <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>Several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class are used to add, insert, and search the list.</source>
          <target state="translated">Plusieurs propriétés et méthodes de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe générique sont utilisées pour ajouter, d’insérer et de recherche dans la liste.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>After these operations, the list contains a duplicate.</source>
          <target state="translated">Une fois ces opérations, la liste contient un doublon.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method is used to remove the first instance of the duplicate item, and the contents are displayed.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> méthode est utilisée pour supprimer la première instance de l’élément en double, et le contenu est affiché.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method always removes the first instance it encounters.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> méthode supprime toujours la première instance qu’elle rencontre.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the elements to remove.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions des éléments à supprimer.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>Removes all the elements that match the conditions defined by the specified predicate.</source>
          <target state="translated">Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The number of elements removed from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> .</source>
          <target state="translated">Nombre d'éléments supprimés de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and the elements that match the conditions are removed from the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> délégué et les éléments qui correspondent aux conditions sont supprimés de la <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> method and several other methods that use the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> generic delegate.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> (méthode) et plusieurs autres méthodes qui utilisent la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> délégué générique.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé, contenant 8 noms dinosaure deux (aux emplacements 1 et 5) se terminent par « saurus ».</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The example also defines a search predicate method named <ph id="ph1">`EndsWithSaurus`</ph>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</source>
          <target state="translated">L’exemple définit également une méthode de prédicat de recherche nommée <ph id="ph1">`EndsWithSaurus`</ph>, qui accepte un paramètre de chaîne et retourne une valeur Boolean qui indique si la chaîne d’entrée se termine par « saurus ».</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph> methods are used to search the list with the search predicate method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph> méthodes sont utilisées pour rechercher la liste avec la méthode de prédicat de recherche.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> method is used to remove all entries ending with "saurus".</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> méthode est utilisée pour supprimer toutes les entrées se terminant par « saurus ».</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>It traverses the list from the beginning, passing each element in turn to the <ph id="ph1">`EndsWithSaurus`</ph> method.</source>
          <target state="translated">Il parcourt la liste à partir du début, chaque élément en passant à la <ph id="ph1">`EndsWithSaurus`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The element is removed if the <ph id="ph1">`EndsWithSaurus`</ph> method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">L’élément est supprimé si le <ph id="ph1">`EndsWithSaurus`</ph> méthode renvoie <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>In C# and Visual Basic, it is not necessary to create the <ph id="ph1">`Predicate&lt;string&gt;`</ph> delegate (<ph id="ph2">`Predicate(Of String)`</ph> in Visual Basic) explicitly.</source>
          <target state="translated">En c# et Visual Basic, il n’est pas nécessaire de créer le <ph id="ph1">`Predicate&lt;string&gt;`</ph> déléguer (<ph id="ph2">`Predicate(Of String)`</ph> en Visual Basic) explicitement.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>These languages infer the correct delegate from context, and create it automatically.</source>
          <target state="translated">Ces langages déduisent le délégué approprié à partir du contexte et créer automatiquement.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method verifies that there are no strings in the list that end with "saurus".</source>
          <target state="translated">Enfin, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> méthode vérifie qu’il n’y a pas de chaînes dans la liste qui se terminent par « saurus ».</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>The zero-based index of the element to remove.</source>
          <target state="translated">Index de base zéro de l'élément à supprimer.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>Removes the element at the specified index of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Supprime l'élément au niveau de l'index spécifié de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>When you call <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAt%2A&gt;</ph> to remove an item, the remaining items in the list are renumbered to replace the removed item.</source>
          <target state="translated">Lorsque vous appelez <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAt%2A&gt;</ph> pour supprimer un élément, les éléments restants dans la liste sont renumérotés pour remplacer l’élément supprimé.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position.</source>
          <target state="translated">Par exemple, si vous supprimez l’élément à l’index 3, l’élément au niveau de l’index 4 est déplacé vers la position 3.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>In addition, the number of items in the list (as represented by the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property) is reduced by 1.</source>
          <target state="translated">En outre, le nombre d’éléments dans la liste (telle que représentée par le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriété) est décrémentée de 1.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is (<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">`index`</ph>).</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est (<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">`index`</ph>).</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">L’exemple suivant montre comment ajouter, supprimer et insérer un objet métier simple dans un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est supérieur ou égal à <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The zero-based starting index of the range of elements to remove.</source>
          <target state="translated">Index de début de base zéro de la plage d'éléments à supprimer.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The number of elements to remove.</source>
          <target state="translated">Nombre d'éléments à supprimer.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>Removes a range of elements from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Supprime une plage d'éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The items are removed and all the elements following them in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> have their indexes reduced by <ph id="ph2">`count`</ph>.</source>
          <target state="translated">Les éléments sont supprimés et tous les éléments qui suivent dans le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> ont leurs index réduits par <ph id="ph2">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph> method and various other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph> (méthode) et diverses autres méthodes de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe qui agissent sur les plages.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>After the list has been created and modified, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph> method is used to remove two elements from the list, beginning at index location 2.</source>
          <target state="translated">Une fois que la liste a été créée et modifiée, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph> méthode est utilisée pour supprimer les deux éléments dans la liste, en commençant à l’emplacement d’index 2.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ne désignent pas une plage valide d'éléments dans <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Reverses the order of the elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated">Inverse l'ordre des éléments dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou une partie de celui-ci.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>Reverses the order of the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Inverse l'ordre des éléments dans l'ensemble de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> to reverse the order of the elements.</source>
          <target state="translated">Cette méthode utilise <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> pour inverser l’ordre des éléments.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>The following example demonstrates both overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre les deux surcharges de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings and adds six strings.</source>
          <target state="translated">L’exemple crée un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes et ajoute six chaînes.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph> method overload is used to reverse the list, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph> surcharge de méthode est utilisée pour inverser la liste, puis le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour inverser le milieu de la liste, en commençant par l’élément 1 et en englobant quatre éléments.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The zero-based starting index of the range to reverse.</source>
          <target state="translated">Index de début de base zéro de la plage à inverser.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The number of elements in the range to reverse.</source>
          <target state="translated">Nombre d'éléments à inverser dans la plage.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>Reverses the order of the elements in the specified range.</source>
          <target state="translated">Inverse l'ordre des éléments dans la plage spécifiée.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> to reverse the order of the elements.</source>
          <target state="translated">Cette méthode utilise <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> pour inverser l’ordre des éléments.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The following example demonstrates both overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre les deux surcharges de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings and adds six strings.</source>
          <target state="translated">L’exemple crée un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes et ajoute six chaînes.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph> method overload is used to reverse the list, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph> surcharge de méthode est utilisée pour inverser la liste, puis le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph> surcharge de méthode est utilisée pour inverser le milieu de la liste, en commençant par l’élément 1 et en englobant quatre éléments.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ne désignent pas une plage valide d'éléments dans <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Sorts the elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated">Trie les éléments dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> ou une partie de celui-ci.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Overloaded method syntax</source>
          <target state="translated">Syntaxe de la méthode surchargée</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The  <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> methods enable you to sort with the default comparer for the object type in the list, or specify a customer sort method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> méthodes vous permettent de trier avec le comparateur par défaut pour le type d’objet dans la liste, ou spécifier une méthode de tri du client.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort()<ept id="p1">](xref:System.Collections.Generic.List`1.Sort*)</ept> Sorts the elements in the entire list using the default comparer of the object type held in the list.</source>
          <target state="translated"><bpt id="p1">[</bpt>Liste<ph id="ph1">\&lt;</ph>T &gt;. Sort()<ept id="p1">](xref:System.Collections.Generic.List`1.Sort*)</ept> trie les éléments dans l’intégralité de la liste à l’aide du comparateur par défaut du type d’objet conservées dans la liste.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort M(Comparison<ph id="ph2">\&lt;</ph>T&gt; comparison)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29)</ept> Sorts the elements in the entire list using the specified comparer.</source>
          <target state="translated"><bpt id="p1">[</bpt>Liste<ph id="ph1">\&lt;</ph>T &gt;. Tri M (comparaison<ph id="ph2">\&lt;</ph>T &gt; comparaison)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29)</ept> trie les éléments dans l’intégralité de la liste à l’aide du comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort(IComparer<ph id="ph2">\&lt;</ph>T&gt; comparer)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29)</ept> Sorts the elements in the entire list using the specified <ph id="ph3">&lt;xref:System.Comparison%601?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Liste<ph id="ph1">\&lt;</ph>T &gt;. Sort (IComparer<ph id="ph2">\&lt;</ph>T &gt; comparateur)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29)</ept> trie les éléments dans l’intégralité de la liste à l’aide du <ph id="ph3">&lt;xref:System.Comparison%601?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort(Int32 index, Int32 count, IComparer<ph id="ph2">\&lt;</ph>T&gt; comparer)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29)</ept> Sorts the elements in a range of elements in list using the specified comparer.</source>
          <target state="translated"><bpt id="p1">[</bpt>Liste<ph id="ph1">\&lt;</ph>T &gt;. Tri (Int32 index, Int32, nombre, IComparer<ph id="ph2">\&lt;</ph>T &gt; comparateur)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29)</ept> trie les éléments dans une plage d’éléments de liste à l’aide du comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Parameters</source>
          <target state="translated">Paramètres</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Parameter</source>
          <target state="translated">Paramètre</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Type</source>
          <target state="translated">Type</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Description</source>
          <target state="translated">Description </target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The delegate method to use when comparing elements</source>
          <target state="translated">La méthode du délégué à utiliser lors de la comparaison d’éléments</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>comparer</source>
          <target state="translated">comparateur</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use when comparing elements, or null to use the default comparer <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implémentation à utiliser lors de la comparaison d’éléments, ou null pour utiliser le comparateur par défaut <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The zero-based starting index of the range to sort.</source>
          <target state="translated">Index de début de base zéro de la plage à trier.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The length of the range to sort.</source>
          <target state="translated">Longueur de la plage à trier.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Exception</source>
          <target state="translated">Exception</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Condition</source>
          <target state="translated">Condition</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`comparer`</ph> is not specified or <ph id="ph2">`null`</ph>, and the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> cannot find implementation of the <ph id="ph4">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> generic interface or the <ph id="ph5">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph> interface for type T.</source>
          <target state="translated"><ph id="ph1">`comparer`</ph> n’est pas spécifié ou <ph id="ph2">`null`</ph>et le comparateur par défaut <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> ne peut pas trouver une implémentation de la <ph id="ph4">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> interface générique ou <ph id="ph5">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph> interface pour le type T.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`comparison`</ph> is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`comparison`</ph> est <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The implementation of <ph id="ph1">`comparison`</ph> or <ph id="ph2">`comparer`</ph> caused an error during the sort.</source>
          <target state="translated">L’implémentation de <ph id="ph1">`comparison`</ph> ou <ph id="ph2">`comparer`</ph> a provoqué une erreur pendant le tri.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For example, <ph id="ph1">`comparison`</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">Par exemple, <ph id="ph1">`comparison`</ph> peut ne pas retourner 0 pendant la comparaison d’un élément à lui-même.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`index`</ph> and <ph id="ph2">`count`</ph> do not specify a valid range in the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`index`</ph> et <ph id="ph2">`count`</ph> ne spécifient pas une plage valide dans le <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`index`</ph> is less than 0 or <ph id="ph2">`count`</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">`index`</ph> est inférieur à 0 ou <ph id="ph2">`count`</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Sorts the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the default comparer.</source>
          <target state="translated">Trie les éléments dans l'ensemble de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> à l'aide du comparateur par défaut.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>This method uses the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for type <ph id="ph2">`T`</ph> to determine the order of list elements.</source>
          <target state="translated">Cette méthode utilise le comparateur par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour le type <ph id="ph2">`T`</ph> pour déterminer l’ordre des éléments de liste.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> property checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> propriété vérifie si le type <ph id="ph2">`T`</ph> implémente la <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> interface générique et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type <ph id="ph2">`T`</ph> implémente la <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si type <ph id="ph1">`T`</ph> n’implémente pas l’interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lève une <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>This method uses the <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> method, which applies the introspective sort as follows:</source>
          <target state="translated">Cette méthode utilise le <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> méthode qui applique le tri approfondie comme suit :</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</source>
          <target state="translated">Si la taille de la partition est inférieur à 16 éléments, il utilise un algorithme de tri d’insertion.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a Heapsort algorithm.</source>
          <target state="translated">Si le nombre de partitions dépasse 2 journal <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> correspond à la plage du tableau d’entrée, il utilise un algorithme Heapsort.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">Sinon, il utilise un algorithme de tri rapide.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">Cette implémentation effectue un tri instable ; Autrement dit, si deux éléments sont égaux, leur ordre n’est pas conservée.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">En revanche, un tri stable conserve l’ordre des éléments qui sont identiques.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">En moyenne, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept> journal <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) opération, où <bpt id="p3">*</bpt>n<ept id="p3">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; dans le pire des cas il s’agit d’un O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) opération.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The following example adds some names to a <ph id="ph1">`List&lt;String&gt;`</ph> object, displays the list in unsorted order, calls the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method, and then displays the sorted list.</source>
          <target state="translated">L’exemple suivant ajoute des noms à un <ph id="ph1">`List&lt;String&gt;`</ph> object, affiche la liste dans un ordre non trié, appelle le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> (méthode), puis affiche la liste triée.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The following code demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> method overloads on a simple business object.</source>
          <target state="translated">Le code suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> et <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> des surcharges de méthode sur un objet métier simple.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> method results in the use of the default comparer for the Part type, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> method is implemented by using an anonymous method.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> méthode entraîne l’utilisation du comparateur par défaut pour le type de composant et le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> méthode est implémentée à l’aide d’une méthode anonyme.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> surcharge de méthode et la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> surcharge de méthode.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé et rempli avec quatre chaînes, dans aucun ordre particulier.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The list is displayed, sorted, and displayed again.</source>
          <target state="translated">La liste est affichée, triée et affiche de nouveau.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload is then used to search for two strings that are not in the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert them.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> surcharge de méthode est ensuite utilisée pour rechercher des deux chaînes qui ne sont pas dans la liste, et le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> méthode est utilisée pour les insérer.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The return value of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> method is negative in each case, because the strings are not in the list.</source>
          <target state="translated">La valeur de retour de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> méthode est un nombre négative dans chaque cas, étant donné que les chaînes ne sont pas dans la liste.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Taking the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</source>
          <target state="translated">En prenant le complément de bits (le ~ (opérateur) en c# et Visual C++, <ph id="ph1">`Xor`</ph> -1 en Visual Basic) de ce nombre négatif génère l’index du premier élément dans la liste qui est supérieure à la chaîne de recherche et l’insertion à cet emplacement conserve le tri commande.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The second search string is larger than any element in the list, so the insertion position is at the end of the list.</source>
          <target state="translated">La deuxième chaîne de recherche est supérieure à n’importe quel élément dans la liste, par conséquent, la position d’insertion est à la fin de la liste.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The default comparer <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph4">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">Le comparateur par défaut <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> ne peut pas trouver une implémentation de l’interface générique <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou de l’interface <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> pour le type <ph id="ph4">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> à utiliser pendant la comparaison d'éléments, ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> pour utiliser le comparateur par défaut <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Sorts the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the specified comparer.</source>
          <target state="translated">Trie les éléments dans l'ensemble de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> à l'aide du comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">Si <ph id="ph1">`comparer`</ph> est fourni, les éléments de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont triés à l’aide de la <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implémentation.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">Si <ph id="ph1">`comparer`</ph> est <ph id="ph2">`null`</ph>, le comparateur par défaut <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type <ph id="ph4">`T`</ph> implémente la <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> interface générique et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type <ph id="ph2">`T`</ph> implémente la <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si type <ph id="ph1">`T`</ph> n’implémente pas l’interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lève une <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>This method uses the <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> method, which applies the introspective sort as follows:</source>
          <target state="translated">Cette méthode utilise le <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> méthode qui applique le tri approfondie comme suit :</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</source>
          <target state="translated">Si la taille de la partition est inférieur à 16 éléments, il utilise un algorithme de tri d’insertion.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a Heapsort algorithm.</source>
          <target state="translated">Si le nombre de partitions dépasse 2 journal <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> correspond à la plage du tableau d’entrée, il utilise un algorithme Heapsort.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">Sinon, il utilise un algorithme de tri rapide.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">Cette implémentation effectue un tri instable ; Autrement dit, si deux éléments sont égaux, leur ordre n’est pas conservée.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">En revanche, un tri stable conserve l’ordre des éléments qui sont identiques.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">En moyenne, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept> journal <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) opération, où <bpt id="p3">*</bpt>n<ept id="p3">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; dans le pire des cas il s’agit d’un O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) opération.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode et la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">L’exemple définit un autre comparateur pour les chaînes nommées DinoCompare, qui implémente le <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> en Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> dans Visual C++) interface générique.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">Le comparateur fonctionne comme suit : en premier lieu, les comparateurs sont testés pour <ph id="ph1">`null`</ph>, et une référence null est traitée comme inférieure à une valeur non null.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">En second lieu, les longueurs de chaîne sont comparées, et la plus longue chaîne est jugée supérieure.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">Troisièmement, si les longueurs sont égales, la comparaison de chaînes ordinaire est utilisé.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé et rempli avec quatre chaînes, dans aucun ordre particulier.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, sorted using the alternate comparer, and displayed again.</source>
          <target state="translated">La liste est affichée, triée à l’aide de l’autre comparateur et s’affichent à nouveau.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode est ensuite utilisée pour rechercher de nombreuses chaînes qui ne figurent pas dans la liste, par le biais de l’autre comparateur.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert the strings.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> méthode est utilisée pour insérer les chaînes.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>These two methods are located in the function named <ph id="ph1">`SearchAndInsert`</ph>, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph2">`Xor`</ph> -1 in Visual Basic) of the negative number returned by <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> and use it as an index for inserting the new string.</source>
          <target state="translated">Ces deux méthodes sont situés dans la fonction nommée <ph id="ph1">`SearchAndInsert`</ph>, ainsi que du code pour prendre le complément de bits (le ~ opérateur en c# et Visual C++, <ph id="ph2">`Xor`</ph> -1 en Visual Basic) du nombre négatif retourné par <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> et l’utiliser comme un index pour Insérer la nouvelle chaîne.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>, et le comparateur par défaut <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> ne peut pas trouver d’implémentation de l’interface générique <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou de l’interface <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> pour le type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The implementation of <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> caused an error during the sort.</source>
          <target state="translated">L’implémentation de <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> a provoqué une erreur pendant le tri.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>For example, <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">Par exemple, <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> peut ne pas retourner 0 pendant la comparaison d’un élément à lui-même.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Comparison`1" /&gt;</ph> to use when comparing elements.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Comparison`1" /&gt;</ph> à utiliser pendant la comparaison d'éléments.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Sorts the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.Comparison`1" /&gt;</ph>.</source>
          <target state="translated">Trie les éléments dans l'ensemble de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> à l'aide du <ph id="ph2">&lt;see cref="T:System.Comparison`1" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If <ph id="ph1">`comparison`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the method represented by the delegate.</source>
          <target state="translated">Si <ph id="ph1">`comparison`</ph> est fourni, les éléments de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont triés à l’aide de la méthode représentée par le délégué.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If <ph id="ph1">`comparison`</ph> is <ph id="ph2">`null`</ph>, an <ph id="ph3">&lt;xref:System.ArgumentNullException&gt;</ph> is thrown.</source>
          <target state="translated">Si <ph id="ph1">`comparison`</ph> est <ph id="ph2">`null`</ph>, un <ph id="ph3">&lt;xref:System.ArgumentNullException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, which applies the introspective sort as follows:</source>
          <target state="translated">Cette méthode utilise <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, auquel s’applique le tri approfondie comme suit :</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</source>
          <target state="translated">Si la taille de la partition est inférieur à 16 éléments, il utilise un algorithme de tri d’insertion</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a <bpt id="p3">[</bpt>Heapsort<ept id="p3">](https://en.wikipedia.org/wiki/Heapsort)</ept> algorithm.</source>
          <target state="translated">Si le nombre de partitions dépasse 2 journal <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> correspond à la plage du tableau d’entrée, il utilise un <bpt id="p3">[</bpt>Heapsort<ept id="p3">](https://en.wikipedia.org/wiki/Heapsort)</ept> algorithme.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">Sinon, il utilise un algorithme de tri rapide.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">Cette implémentation effectue un tri instable ; Autrement dit, si deux éléments sont égaux, leur ordre n’est pas conservée.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">En revanche, un tri stable conserve l’ordre des éléments qui sont identiques.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">En moyenne, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept> journal <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) opération, où <bpt id="p3">*</bpt>n<ept id="p3">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; dans le pire des cas il s’agit d’un O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) opération.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The following code demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method overloads on a simple business object.</source>
          <target state="translated">Le code suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> des surcharges de méthode sur un objet métier simple.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method results in the use of the default comparer for the Part type, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method is implemented using an anonymous method.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> méthode entraîne l’utilisation du comparateur par défaut pour le type de composant et le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> méthode est implémentée à l’aide d’une méthode anonyme.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> surcharge de méthode.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The example defines an alternative comparison method for strings, named <ph id="ph1">`CompareDinosByLength`</ph>.</source>
          <target state="translated">L’exemple définit une autre méthode de comparaison des chaînes, nommée <ph id="ph1">`CompareDinosByLength`</ph>.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>This method works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">Cette méthode fonctionne comme suit : en premier lieu, les comparateurs sont testés pour <ph id="ph1">`null`</ph>, et une référence null est traitée comme inférieure à une valeur non null.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">En second lieu, les longueurs de chaîne sont comparées, et la plus longue chaîne est jugée supérieure.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">Troisièmement, si les longueurs sont égales, la comparaison de chaînes ordinaire est utilisé.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé et rempli avec quatre chaînes, dans aucun ordre particulier.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The list also includes an empty string and a null reference.</source>
          <target state="translated">La liste inclut également une chaîne vide et une référence null.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The list is displayed, sorted using a <ph id="ph1">&lt;xref:System.Comparison%601&gt;</ph> generic delegate representing the <ph id="ph2">`CompareDinosByLength`</ph> method, and displayed again.</source>
          <target state="translated">La liste est affichée, trié à l’aide un <ph id="ph1">&lt;xref:System.Comparison%601&gt;</ph> délégué générique représentant le <ph id="ph2">`CompareDinosByLength`</ph> (méthode) et affiche à nouveau.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source><ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The implementation of <ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> caused an error during the sort.</source>
          <target state="translated">L’implémentation de <ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> a provoqué une erreur pendant le tri.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>For example, <ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">Par exemple, <ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> peut ne pas retourner 0 pendant la comparaison d’un élément à lui-même.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based starting index of the range to sort.</source>
          <target state="translated">Index de début de base zéro de la plage à trier.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The length of the range to sort.</source>
          <target state="translated">Longueur de la plage à trier.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> à utiliser pendant la comparaison d'éléments, ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> pour utiliser le comparateur par défaut <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Sorts the elements in a range of elements in <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the specified comparer.</source>
          <target state="translated">Trie les éléments dans une plage d'éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> à l'aide du comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">Si <ph id="ph1">`comparer`</ph> est fourni, les éléments de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont triés à l’aide de la <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implémentation.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">Si <ph id="ph1">`comparer`</ph> est <ph id="ph2">`null`</ph>, le comparateur par défaut <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type <ph id="ph4">`T`</ph> implémente la <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> interface générique et utilise cette implémentation, si elle est disponible.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Si ce n’est pas le cas, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> vérifie si le type <ph id="ph2">`T`</ph> implémente la <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si type <ph id="ph1">`T`</ph> n’implémente pas l’interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> lève une <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, which applies the introspective sort as follows:</source>
          <target state="translated">Cette méthode utilise <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, auquel s’applique le tri approfondie comme suit :</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</source>
          <target state="translated">Si la taille de la partition est inférieur à 16 éléments, il utilise un algorithme de tri d’insertion</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a <bpt id="p3">[</bpt>Heapsort<ept id="p3">](https://en.wikipedia.org/wiki/Heapsort)</ept> algorithm.</source>
          <target state="translated">Si le nombre de partitions dépasse 2 journal <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> correspond à la plage du tableau d’entrée, il utilise un <bpt id="p3">[</bpt>Heapsort<ept id="p3">](https://en.wikipedia.org/wiki/Heapsort)</ept> algorithme.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">Sinon, il utilise un algorithme de tri rapide.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">Cette implémentation effectue un tri instable ; Autrement dit, si deux éléments sont égaux, leur ordre n’est pas conservée.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">En revanche, un tri stable conserve l’ordre des éléments qui sont identiques.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">En moyenne, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept> journal <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) opération, où <bpt id="p3">*</bpt>n<ept id="p3">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; dans le pire des cas il s’agit d’un O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) opération.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode et la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">L’exemple définit un autre comparateur pour les chaînes nommées DinoCompare, qui implémente le <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> en Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> dans Visual C++) interface générique.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">Le comparateur fonctionne comme suit : en premier lieu, les comparateurs sont testés pour <ph id="ph1">`null`</ph>, et une référence null est traitée comme inférieure à une valeur non null.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">En second lieu, les longueurs de chaîne sont comparées, et la plus longue chaîne est jugée supérieure.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">Troisièmement, si les longueurs sont égales, la comparaison de chaînes ordinaire est utilisé.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé et rempli avec les noms de cinq dinosaures et trois dinosaures carnivores.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Within each of the two groups, the names are not in any particular sort order.</source>
          <target state="translated">Dans chacun des deux groupes, les noms ne sont pas dans l’ordre de tri particulier.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</source>
          <target state="translated">La liste est affichée, la plage d’herbivores est triée à l’aide de l’autre comparateur, et la liste s’affiche de nouveau.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search only the range of herbivores for "Brachiosaurus".</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> surcharge de méthode est ensuite utilisée pour rechercher uniquement la plage d’herbivores correspondant à « Brachiosaure ».</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of the negative number returned by the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method is used as an index for inserting the new string.</source>
          <target state="translated">La chaîne est introuvable et le complément de bits (le ~ opérateur en c# et Visual C++, <ph id="ph1">`Xor`</ph> -1 en Visual Basic) du nombre négatif retourné par la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> méthode est utilisée en tant qu’index pour insérer la nouvelle chaîne.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid range in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ne spécifient pas une plage valide dans le <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The implementation of <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> caused an error during the sort.</source>
          <target state="translated">L’implémentation de <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> a provoqué une erreur pendant le tri.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>For example, <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">Par exemple, <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> peut ne pas retourner 0 lors de la comparaison d’un élément à lui-même.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>, et le comparateur par défaut <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> ne peut pas trouver d’implémentation de l’interface générique <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ou de l’interface <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> pour le type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only.</source>
          <target state="translated">Obtient une valeur indiquant si <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> est en lecture seule ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Dans l'implémentation par défaut de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, cette propriété retourne toujours <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">Une collection en lecture seule n’autorise pas l’ajout, la suppression ou la modification d’éléments après sa création.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">Une collection est en lecture seule est simplement une collection avec un wrapper qui empêche la modification de la collection ; Par conséquent, si des modifications sont apportées à la collection sous-jacente, la collection en lecture seule reflète ces modifications.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Retourne un énumérateur qui itère au sein d'une collection.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> qui peut être utilisé pour itérer au sein de la collection.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">Le <ph id="ph1">`foreach`</ph> instruction du langage c# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) masque la complexité des énumérateurs.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Il est donc recommandé d'utiliser <ph id="ph1">`foreach`</ph> plutôt que de manipuler l'énumérateur directement.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Les énumérateurs peuvent être utilisés pour lire les données de la collection, mais ils ne permettent pas de modifier la collection sous-jacente.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Au départ, l’énumérateur est positionné avant le premier élément de la collection.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">À cette position, la <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> propriété n’est pas définie.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">Par conséquent, vous devez appeler la <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> méthode pour avancer l’énumérateur jusqu’au premier élément de la collection avant de lire la valeur de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> propriété retourne le même objet jusqu'à ce que <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> affecte l'élément suivant à <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> dépasse la fin de la collection, l’énumérateur est placée après le dernier élément dans la collection et <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourne <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Lorsque l’énumérateur est à cette position, les appels suivants à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> également retourner <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si le dernier appel à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourné <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> n’est pas défini.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">Vous ne pouvez pas attribuer de nouveau <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> au premier élément de la collection ; vous devez créer une nouvelle instance de l'énumérateur à la place.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un énumérateur est valide tant que la collection demeure inchangée.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si des modifications sont apportées à la collection, telles que l'ajout, la modification ou la suppression d'éléments, l'énumérateur est définitivement invalidé et son comportement n'est pas défini.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Comme l’énumérateur ne dispose pas d’un accès exclusif à la collection, l’énumération d’une collection n’est pas intrinsèquement une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated">Les implémentations par défaut de collections dans l'espace de noms <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> ne sont pas synchronisées.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Cette méthode est une opération o (1).</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensionnel qui constitue la destination des éléments copiés à partir de <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> doit avoir une indexation de base zéro.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Index de base zéro dans un <bpt id="p1">&lt;c&gt;</bpt>tableau<ept id="p1">&lt;/c&gt;</ept> auquel commencer la copie.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Copie les éléments de <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> dans <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, à partir d'un index particulier de <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the nongeneric implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Si le type de la source de <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> ne peut pas être casté automatiquement au type de la destination <ph id="ph2">`array`</ph>, les implémentations non génériques de <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> lever <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, alors que les implémentations génériques lèvent <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> est multidimensionnel.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> n’a pas d’indexation de base zéro.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Le nombre d’éléments dans le <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> source est supérieur à la quantité d’espace disponible entre <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> et la fin du <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destination.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Le type du <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> source ne peut pas être converti automatiquement en type du <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destination.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Obtient une valeur indiquant si l'accès à <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> est synchronisé (thread-safe).</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'accès à <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> est synchronisé (thread-safe) ; sinon <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Dans l'implémentation par défaut de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, cette propriété retourne toujours <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated">Les implémentations par défaut de collections dans l'espace de noms <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> ne sont pas synchronisées.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">L’énumération d’une collection n’est intrinsèquement pas une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Dans les rares cas où l’énumération gère avec accès en écriture, vous pouvez verrouiller la collection pendant l’ensemble de l’énumération.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Retourne un objet qui peut être utilisé pour synchroniser l’accès à la <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">La synchronisation est effective uniquement si tous les threads de verrouillent de cet objet avant d’accéder à la collection.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Obtient un objet qui peut être utilisé pour synchroniser l'accès à <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Objet qui peut être utilisé pour synchroniser l'accès à <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated">Dans l'implémentation par défaut de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, cette propriété retourne toujours l'instance actuelle.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated">Les implémentations par défaut de collections dans l'espace de noms <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> ne sont pas synchronisées.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">L’énumération d’une collection n’est intrinsèquement pas une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Retourne un objet qui peut être utilisé pour synchroniser l’accès à la <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">La synchronisation est effective uniquement si tous les threads de verrouillent de cet objet avant d’accéder à la collection.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">Le code suivant illustre l’utilisation de la <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> propriété pour c#, C++ et Visual Basic.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Retourne un énumérateur qui itère au sein d'une collection.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> qui peut être utilisé pour itérer au sein de la collection.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">Le <ph id="ph1">`foreach`</ph> instruction du langage c# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) masque la complexité des énumérateurs.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Il est donc recommandé d'utiliser <ph id="ph1">`foreach`</ph> plutôt que de manipuler l'énumérateur directement.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Les énumérateurs peuvent être utilisés pour lire les données de la collection, mais ils ne permettent pas de modifier la collection sous-jacente.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Au départ, l’énumérateur est positionné avant le premier élément de la collection.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> replace également l'énumérateur à cette position.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">À cette position, la <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propriété n’est pas définie.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Par conséquent, vous devez appeler la <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> méthode pour avancer l’énumérateur jusqu’au premier élément de la collection avant de lire la valeur de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propriété retourne le même objet tant que <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> affecte l'élément suivant à <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> dépasse la fin de la collection, l’énumérateur est placée après le dernier élément dans la collection et <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourne <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Lorsque l’énumérateur est à cette position, les appels suivants à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> également retourner <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si le dernier appel à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourné <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> n’est pas défini.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Pour attribuer une nouvelle fois <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> au premier élément de la collection, vous pouvez appeler <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> suivi de <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un énumérateur est valide tant que la collection demeure inchangée.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si des modifications sont apportées à la collection, telles que l'ajout, la modification ou la suppression d'éléments, l'énumérateur est définitivement invalidé et son comportement n'est pas défini.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Comme l’énumérateur ne dispose pas d’un accès exclusif à la collection, l’énumération d’une collection n’est pas intrinsèquement une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated">Les implémentations par défaut de collections dans l'espace de noms <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> ne sont pas synchronisées.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Cette méthode est une opération o (1).</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> à ajouter à <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>Adds an item to the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">Ajoute un élément à <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>The position into which the new element was inserted.</source>
          <target state="translated">Position à laquelle le nouvel élément est inséré.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is less than <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(1) operation.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> est inférieure à <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, cette méthode est une opération o (1).</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>If the capacity needs to be increased to accommodate the new element, this method becomes an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Si la capacité doit être augmentée pour intégrer le nouvel élément, cette méthode devient un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> a un type qui ne peut pas être assigné à <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> à rechercher dans <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> contains a specific value.</source>
          <target state="translated">Détermine si <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> contient une valeur spécifique.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.IList" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="item" /&gt;</ph> existe dans <ph id="ph3">&lt;see cref="T:System.Collections.IList" /&gt;</ph> ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Cette méthode détermine l’égalité en utilisant le comparateur d’égalité par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour <ph id="ph2">`T`</ph>, le type de valeurs dans la liste.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">Objet à rechercher dans <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>Determines the index of a specific item in the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">Détermine l'index d'un élément spécifique d'<ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>The index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> if found in the list; otherwise, –1.</source>
          <target state="translated">Index de <ph id="ph1">&lt;paramref name="item" /&gt;</ph> s'il figure dans la liste ; sinon, -1.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Cette méthode détermine l’égalité en utilisant le comparateur d’égalité par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour <ph id="ph2">`T`</ph>, le type de valeurs dans la liste.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> a un type qui ne peut pas être assigné à <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated">Index de base zéro auquel <bpt id="p1">&lt;c&gt;</bpt>l’élément<ept id="p1">&lt;/c&gt;</ept> doit être inséré.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>The object to insert into the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">Objet à insérer dans <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>Inserts an item to the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> at the specified index.</source>
          <target state="translated">Insère un élément dans <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> à l'index spécifié.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>If <ph id="ph1">`index`</ph> equals the number of items in the <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>, then <ph id="ph3">`item`</ph> is appended to the end.</source>
          <target state="translated">Si <ph id="ph1">`index`</ph> est égal au nombre d'éléments dans <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>, <ph id="ph3">`item`</ph> est ajouté à la fin.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> n'est pas un index valide dans <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> a un type qui ne peut pas être assigné à <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> has a fixed size.</source>
          <target state="translated">Obtient une valeur indiquant si <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> est de taille fixe.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> has a fixed size; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> est de taille fixe ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Dans l'implémentation par défaut de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, cette propriété retourne toujours <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</source>
          <target state="translated">Une collection de taille fixe ne permet pas l’ajout ou la suppression d’éléments après sa création, mais permet la modification des éléments existants.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">Une collection de taille fixe est simplement une collection avec un wrapper qui empêche l’ajout et suppression d’éléments. Par conséquent, si des modifications sont apportées à la collection sous-jacente, y compris l’ajout ou la suppression d’éléments, la collection de taille fixe reflète ces modifications.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only.</source>
          <target state="translated">Obtient une valeur indiquant si <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> est en lecture seule ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Dans l'implémentation par défaut de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, cette propriété retourne toujours <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">Une collection en lecture seule n’autorise pas l’ajout, la suppression ou la modification d’éléments après sa création.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">Une collection est en lecture seule est simplement une collection avec un wrapper qui empêche la modification de la collection ; Par conséquent, si des modifications sont apportées à la collection sous-jacente, la collection en lecture seule reflète ces modifications.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération O(1).</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">Index de base zéro de l'élément à obtenir ou à définir.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">Obtient ou définit l'élément au niveau de l'index spécifié.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The element at the specified index.</source>
          <target state="translated">Élément au niveau de l'index spécifié.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The C# language uses the <bpt id="p1">[</bpt>this<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> property.</source>
          <target state="translated">Le langage c# utilise le <bpt id="p1">[</bpt>cela<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> (mot clé) pour définir les indexeurs au lieu d’implémenter la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implémente <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> comme propriété par défaut, ce qui fournit les mêmes fonctionnalités d'indexation.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">La récupération de la valeur de cette propriété est une opération o (1) ; définition de la propriété est également une opération o (1).</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> n'est pas un index valide dans <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The property is set and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">La propriété est définie et <ph id="ph1">&lt;paramref name="value" /&gt;</ph> a un type qui ne peut pas être assigné à <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>The object to remove from the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">Objet à supprimer de <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">Supprime la première occurrence d'un objet spécifique de <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Cette méthode détermine l’égalité en utilisant le comparateur d’égalité par défaut <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> pour <ph id="ph2">`T`</ph>, le type de valeurs dans la liste.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode effectue une recherche linéaire ; Par conséquent, cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> a un type qui ne peut pas être assigné à <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a new array.</source>
          <target state="translated">Copie les éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> dans un nouveau tableau.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>An array containing copies of the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">Tableau contenant les copies des éléments de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The elements are copied using <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>, which is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Les éléments sont copiés à l’aide de <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>, qui est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> method and other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> (méthode) et autres méthodes de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe qui agissent sur les plages.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>At the end of the example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> method is used to get three items from the list, beginning with index location 2.</source>
          <target state="translated">À la fin de l’exemple, le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> méthode est utilisée pour obtenir les trois éléments dans la liste, en commençant à la position d’index 2.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> method is called on the resulting <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, creating an array of three elements.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> méthode est appelée sur résultant <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, création d’un tableau de trois éléments.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The elements of the array are displayed.</source>
          <target state="translated">Les éléments du tableau sont affichés.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if that number is less than a threshold value.</source>
          <target state="translated">Définit la capacité en fonction du nombre effectif d'éléments situés dans <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, si ce nombre est inférieur à une valeur de seuil.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">Cette méthode peut être utilisée pour réduire la surcharge de mémoire d’une collection si aucun nouvel élément ne doit être ajouté à la collection.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The cost of reallocating and copying a large <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can be considerable, however, so the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.</source>
          <target state="translated">Le coût de réallocation et de copie d’un grand <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> peut être considérable, toutefois, pour que le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode ne fait rien si la liste est à plus de 90 pour cent de la capacité.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>This avoids incurring a large reallocation cost for a relatively small gain.</source>
          <target state="translated">Cela évite de supporter un coût de réallocation élevé pour un gain relativement petit.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The current threshold of 90 percent might change in future releases.</source>
          <target state="translated">Le seuil actuel de 90 pour cent peut-être changer dans les futures versions.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method before calling the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">Pour réinitialiser un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> à son état initial, appelez le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> méthode avant d’appeler le <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to the default capacity.</source>
          <target state="translated">La suppression vide <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> définit la capacité de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> à la capacité par défaut.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The capacity can also be set using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property.</source>
          <target state="translated">La capacité peut également être définie à l’aide de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The following example demonstrates how to check the capacity and count of a  <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object, and illustrates using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method to remove extra capacity.</source>
          <target state="translated">L’exemple suivant montre comment vérifier la capacité et le nombre d’un <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> qui contient un objet métier simple et illustre l’utilisation de la <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode pour supprimer une capacité supplémentaire.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class are used to add, insert, and remove items from a list of strings.</source>
          <target state="translated">Plusieurs propriétés et méthodes de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe sont utilisés pour ajouter, insérer et supprimer des éléments à partir d’une liste de chaînes.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Then the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method is used to reduce the capacity to match the count, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> méthode permet de réduire la capacité à correspondre au nombre et le <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> propriétés sont affichées.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</source>
          <target state="translated">Si la capacité inutilisée avait été inférieure à 10 % de la capacité totale, la liste n’aurait pas été redimensionnée.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Finally, the contents of the list are cleared.</source>
          <target state="translated">Enfin, le contenu de la liste est effacé.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions to check against the elements.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> qui définit les conditions à vérifier par rapport aux éléments.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>Determines whether every element in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> matches the conditions defined by the specified predicate.</source>
          <target state="translated">Détermine si chaque élément de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> correspond aux conditions définies par le prédicat spécifié.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if every element in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> matches the conditions defined by the specified predicate; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si chaque élément de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> correspond aux conditions définies par le prédicat spécifié ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>If the list has no elements, the return value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Si la liste ne comporte pas d'éléments, la valeur de retour est <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> est un délégué à une méthode qui retourne <ph id="ph2">`true`</ph> si l’objet passé à elle correspond aux conditions définies dans ce délégué.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and processing is stopped when the delegate returns <ph id="ph3">`false`</ph> for any element.</source>
          <target state="translated">Les éléments d’actuel <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sont passés individuellement à la <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> délégué et le traitement s’arrête lorsque le délégué retourne <ph id="ph3">`false`</ph> pour n’importe quel élément.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The elements are processed in order, and all calls are made on a single thread.</source>
          <target state="translated">Les éléments sont traités dans l’ordre, et tous les appels sont effectués sur un seul thread.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) opération, où <bpt id="p2">*</bpt>n<ept id="p2">*</ept> est <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph> method and several other methods that use <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> generic delegate.</source>
          <target state="translated">L’exemple suivant illustre la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph> (méthode) et plusieurs autres méthodes qui utilisent <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> délégué générique.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de chaînes est créé, contenant 8 noms dinosaure deux (aux emplacements 1 et 5) se terminent par « saurus ».</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The example also defines a search predicate method named <ph id="ph1">`EndsWithSaurus`</ph>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</source>
          <target state="translated">L’exemple définit également une méthode de prédicat de recherche nommée <ph id="ph1">`EndsWithSaurus`</ph>, qui accepte un paramètre de chaîne et retourne une valeur Boolean qui indique si la chaîne d’entrée se termine par « saurus ».</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph> method traverses the list from the beginning, passing each element in turn to the <ph id="ph2">`EndsWithSaurus`</ph> method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph> méthode parcourt la liste à partir du début, chaque élément en passant à la <ph id="ph2">`EndsWithSaurus`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The search stops when the <ph id="ph1">`EndsWithSaurus`</ph> method returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">La recherche s’arrête lorsque la <ph id="ph1">`EndsWithSaurus`</ph> méthode renvoie <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>In C# and Visual Basic, it is not necessary to create the <ph id="ph1">`Predicate&lt;string&gt;`</ph> delegate (<ph id="ph2">`Predicate(Of String)`</ph> in Visual Basic) explicitly.</source>
          <target state="translated">En c# et Visual Basic, il n’est pas nécessaire de créer le <ph id="ph1">`Predicate&lt;string&gt;`</ph> déléguer (<ph id="ph2">`Predicate(Of String)`</ph> en Visual Basic) explicitement.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>These languages infer the correct delegate from context and create it automatically.</source>
          <target state="translated">Ces langages déduisent le délégué approprié à partir du contexte et créer automatiquement.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>