<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="adb912232f4b1cc24aae06820581a339fe0c8e29" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37701592" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Type des objets à énumérer.</typeparam>
    <summary>Expose l’énumérateur, qui prend en charge une itération simple sur une collection d’un type spécifié.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> est l’interface de base pour les collections dans le <xref:System.Collections.Generic> espace de noms comme <xref:System.Collections.Generic.List%601>, <xref:System.Collections.Generic.Dictionary%602>, et <xref:System.Collections.Generic.Stack%601> et d’autres collections génériques comme <xref:System.Collections.ObjectModel.ObservableCollection%601> et <xref:System.Collections.Concurrent.ConcurrentStack%601>. Les collections qui implémentent <xref:System.Collections.Generic.IEnumerable%601> peuvent être énumérés à l’aide de la `foreach` instruction.  
  
 Pour la version non générique de cette interface, consultez <xref:System.Collections.IEnumerable?displayProperty=nameWithType>.  
  
 <xref:System.Collections.Generic.IEnumerable%601> contient une seule méthode que vous devez implémenter lors de l’implémentation de cette interface ; <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>, qui retourne un <xref:System.Collections.Generic.IEnumerator%601> objet. Retourné <xref:System.Collections.Generic.IEnumerator%601> offre la possibilité d’effectuer une itération dans la collection en exposant un <xref:System.Collections.Generic.IEnumerator%601.Current%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant montre comment implémenter la <xref:System.Collections.Generic.IEnumerable%601> interface et comment utiliser cette implémentation pour créer une requête LINQ. Lorsque vous implémentez <xref:System.Collections.Generic.IEnumerable%601>, vous devez également implémenter <xref:System.Collections.Generic.IEnumerator%601> ou, pour c# uniquement, vous pouvez utiliser la [yield](~/docs/csharp/language-reference/keywords/yield.md) mot clé. Implémentation <xref:System.Collections.Generic.IEnumerator%601> requiert également <xref:System.IDisposable> à mettre en oeuvre, qui s’affiche dans cet exemple.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Pour un autre exemple c# qui montre comment implémenter la <xref:System.Collections.Generic.IEnumerable%601> l’interface, consultez la [génériques, exemple](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). Cet exemple utilise le `yield` mot-clé au lieu d’implémenter <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> est inclus pour la parité avec les collections non génériques ; implémentation <see cref="T:System.Collections.Generic.IEnumerable`1" /> permet une collection générique d’être passée à une méthode qui attend un <see cref="T:System.Collections.IEnumerable" /> objet.</para>
    </block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
        <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Retourné <xref:System.Collections.Generic.IEnumerator%601> offre la possibilité d’effectuer une itération dans la collection en exposant un <xref:System.Collections.Generic.IEnumerator%601.Current%2A> propriété. Vous pouvez utiliser les énumérateurs pour lire les données dans une collection, mais ne pas de modifier la collection.  
  
 Au départ, l’énumérateur est positionné avant le premier élément de la collection. À cette position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> n'est pas défini. Par conséquent, vous devez appeler la <xref:System.Collections.IEnumerator.MoveNext%2A> méthode pour avancer l’énumérateur vers le premier élément de la collection avant de lire la valeur de <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> Retourne le même objet jusqu'à ce que <xref:System.Collections.IEnumerator.MoveNext%2A> est appelé à nouveau <xref:System.Collections.IEnumerator.MoveNext%2A> définit <xref:System.Collections.Generic.IEnumerator%601.Current%2A> jusqu'à l’élément suivant.  
  
 Si <xref:System.Collections.IEnumerator.MoveNext%2A> passe à la fin de la collection, l’énumérateur est positionnée après le dernier élément dans la collection et <xref:System.Collections.IEnumerator.MoveNext%2A> retourne `false`. Lorsque l’énumérateur se trouve à cette position, les appels suivants à <xref:System.Collections.IEnumerator.MoveNext%2A> également retourner `false`. Si le dernier appel à <xref:System.Collections.IEnumerator.MoveNext%2A> retourné `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> n’est pas défini. Vous ne pouvez pas attribuer de nouveau <xref:System.Collections.Generic.IEnumerator%601.Current%2A> au premier élément de la collection ; vous devez créer une nouvelle instance de l'énumérateur à la place.  

 Si des modifications sont apportées à la collection, telles que l’ajout, modification ou suppression d’éléments, le comportement de l’énumérateur est indéfini.  
  
 Un énumérateur ne dispose pas d’un accès exclusif à la collection pour un énumérateur reste valid aussi longtemps que la collection demeure inchangée. Si des modifications sont apportées à la collection, en ajoutant, modifiant ou supprimant des éléments, l’énumérateur est invalidé et vous pouvez obtenir des résultats inattendus. En outre, l’énumération d’une collection n’est pas une procédure thread-safe. Pour garantir la cohérence de thread, vous devez verrouiller la collection pendant l’énumérateur ou implémenter la synchronisation sur la collection.  
  
 Implémentations par défaut de collections dans le <xref:System.Collections.Generic?displayProperty=nameWithType> espace de noms ne sont pas synchronisées.  
  
   
  
## Examples  
 L’exemple suivant montre comment implémenter la <xref:System.Collections.Generic.IEnumerable%601> interface et utilise cette implémentation pour créer une requête LINQ. Lorsque vous implémentez <xref:System.Collections.Generic.IEnumerable%601>, vous devez également implémenter <xref:System.Collections.Generic.IEnumerator%601> ou, pour c# uniquement, vous pouvez utiliser la [yield](~/docs/csharp/language-reference/keywords/yield.md) mot clé. Implémentation <xref:System.Collections.Generic.IEnumerator%601> requiert également <xref:System.IDisposable> à mettre en oeuvre, qui s’affiche dans cet exemple.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Pour un autre exemple c# qui montre comment implémenter la <xref:System.Collections.Generic.IEnumerable%601> l’interface, consultez la [génériques, exemple](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). Cet exemple utilise de la `yield` mot-clé au lieu d’implémenter <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
  </Members>
</Type>