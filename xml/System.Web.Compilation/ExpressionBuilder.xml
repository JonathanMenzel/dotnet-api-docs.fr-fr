<Type Name="ExpressionBuilder" FullName="System.Web.Compilation.ExpressionBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a39e97c83d91647815f83d50e83bed7d53113de1" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39738941" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionBuilder abstract" />
  <TypeSignature Language="F#" Value="type ExpressionBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Évalue des expressions pendant l'analyse de page.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Compilation.ExpressionBuilder> classe est la classe de base pour les générateurs d’expressions, telles que le <xref:System.Web.Compilation.AppSettingsExpressionBuilder> (classe), qui crée des expressions de code pendant l’analyse de page.  
  
 Générateurs d’expressions analysent des expressions déclaratives et créer du code pour récupérer des valeurs liées à une propriété de contrôle. Dans les scénarios sans compilation, un générateur d’expressions qui prend en charge une fonctionnalité sans compilation évalue l’expression pendant l’exécution.  
  
 Lorsque l’Analyseur de page rencontre une expression qui est délimitée par la chaîne `<%$ %>`, il crée un générateur d’expressions pour l’expression en fonction du préfixe dans la chaîne. Le préfixe est la partie de la chaîne qui est à gauche du signe deux-points ( :)). Par exemple, lorsque l’analyseur rencontre la chaîne `<%$ ConnectionStrings:MessageDB %>`, il crée un <xref:System.Web.Compilation.ConnectionStringsExpressionBuilder> objet. Les préfixes sont associés aux générateurs d’expressions dans le fichier Web.config dans le <xref:System.Web.Configuration.CompilationSection.ExpressionBuilders%2A> section.  
  
 Le côté droit de l’expression déclarative est passé au Générateur d’expressions pour l’évaluation. Remplacer le <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> méthode pour générer le code qui doit être compilé avec la page.  
  
 Si vous souhaitez que le Générateur d’expressions personnalisées soit actif sur les pages qui ne sont pas compilées, vous devez également substituer la <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> méthode pour retourner un objet qui représente les résultats de l’expression. Vous devez également substituer la <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> propriété pour indiquer que le Générateur d’expressions personnalisées prend en charge les pages sans compilation.  
  
 Vous pouvez définir un ensemble de propriétés et méthodes pour sélectionner et évaluer une expression qui est associée à une propriété du contrôle au moment du design en implémentant un éditeur d’expressions. L’éditeur est marqué sur le Générateur d’expressions dans les métadonnées de niveau classe. Pour plus d'informations, consultez <xref:System.Web.UI.Design.ExpressionEditor>.  
  
   
  
## Examples  
 Les exemples de code suivants montrent comment générer un générateur d’expressions personnalisées en implémentant la <xref:System.Web.Compilation.ExpressionBuilder> classe abstraite. Cette implémentation de <xref:System.Web.Compilation.ExpressionBuilder> retourne une instruction évaluée qui est passée à l’expression. Pour exécuter cet exemple, vous devez tout d’abord inscrire le Générateur d’expressions personnalisé dans le fichier Web.config. Le premier exemple de code montre comment inscrire le Générateur d’expressions personnalisé dans le fichier Web.config.  
  
```  
<configuration>  
    <system.web>  
       <compilation>  
          <expressionBuilders>  
              <add expressionPrefix="MyCustomExpression"  
               type="MyCustomExpressionBuilder"/>  
          </expressionBuilders>  
       </compilation>  
    </system.web>  
</configuration>  
```  
  
 Le deuxième exemple de code montre comment référencer l’expression dans un fichier .aspx.  
  
```  
<asp:Label ID="Label1" runat="server"   
Text="<%$ MyCustomExpression:Hello, world! %>" />  
```  
  
 Le troisième exemple de code montre comment développer un générateur d’expressions personnalisé en dérivant de <xref:System.Web.Compilation.ExpressionBuilder>. Pour exécuter cet exemple de code, vous devez placer la classe dans le dossier App_Code.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#1)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#1)]   
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Lorsque vous héritez de la <see cref="T:System.Web.Compilation.ExpressionBuilder" /> (classe), vous devez substituer la <see cref="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> (méthode).</para></block>
    <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
    <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
    <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Compilation.ExpressionBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que le <xref:System.Web.Compilation.ExpressionBuilder> classe est abstraite, vous ne pouvez pas créer une instance de <xref:System.Web.Compilation.ExpressionBuilder> directement à l’aide du <xref:System.Web.Compilation.ExpressionBuilder.%23ctor%2A> constructeur.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Lorsque vous dérivez de la <see cref="T:System.Web.Compilation.ExpressionBuilder" /> classe, substituez le <see cref="M:System.Web.Compilation.ExpressionBuilder.#ctor" /> constructeur pour implémenter des actions d’initialisation personnalisées pour votre implémentation de générateur d’expressions.</para></block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
        <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public virtual object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(object target, class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluateExpression (target As Object, entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EvaluateExpression(System::Object ^ target, System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.EvaluateExpression (target, entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="target">Objet contenant l'expression.</param>
        <param name="entry">Objet représentant des informations à propos de la propriété liée par l'expression.</param>
        <param name="parsedData">Objet contenant des données analysées telles qu'elles sont retournées par <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Informations contextuelles pour l'évaluation de l'expression.</param>
        <summary>En cas de substitution dans une classe dérivée, retourne un objet qui représente une expression évaluée.</summary>
        <returns>Objet représentant l'expression évaluée ; sinon, <see langword="null" /> si l'héritier n'implémente pas <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous souhaitez que votre <xref:System.Web.Compilation.ExpressionBuilder> objet d’être actives sur une page qui prend en charge la fonctionnalité sans compilation, vous pouvez remplacer le <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> (méthode) et le <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> propriété. Le <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> méthode doit retourner la version d’évaluation de l’expression actuelle.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser substituées <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> méthode pour retourner une expression évaluée.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#3)]    
 [!code-vb[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#3)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Si vous remplacez le <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> (méthode), vous devez également substituer la <see cref="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" /> propriété.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetCodeExpression">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression GetCodeExpression(class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCodeExpression (entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::CodeExpression ^ GetCodeExpression(System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member GetCodeExpression : System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; System.CodeDom.CodeExpression" Usage="expressionBuilder.GetCodeExpression (entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="entry">Objet représentant des informations à propos de la propriété liée par l'expression.</param>
        <param name="parsedData">Objet contenant des données analysées telles qu'elles sont retournées par <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Informations contextuelles pour l'évaluation de l'expression.</param>
        <summary>En cas de substitution dans une classe dérivée, retourne du code qui est utilisé pendant l'exécution de la page pour obtenir l'expression évaluée.</summary>
        <returns><see cref="T:System.CodeDom.CodeExpression" /> utilisée pour l'assignation de propriété.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de la <xref:System.Web.Compilation.ExpressionBuilder> classe doit implémenter la <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> méthode abstraite.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment retourner un <xref:System.CodeDom.CodeExpression> objet en substituant le <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> (méthode).  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#4)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#4)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Si vous implémentez un générateur d’expressions personnalisées, vous devez effectuer le cast de type approprié pour la propriété du contrôle et retourner l’opération de conversion dans le <see cref="T:System.CodeDom.CodeExpression" /> objet.</para></block>
      </Docs>
    </Member>
    <Member MemberName="ParseExpression">
      <MemberSignature Language="C#" Value="public virtual object ParseExpression (string expression, Type propertyType, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseExpression(string expression, class System.Type propertyType, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ParseExpression (expression As String, propertyType As Type, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ParseExpression(System::String ^ expression, Type ^ propertyType, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.ParseExpression (expression, propertyType, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="expression">Valeur de l'expression déclarative.</param>
        <param name="propertyType">Type de la propriété liée par l'expression.</param>
        <param name="context">Informations contextuelles pour l'évaluation de l'expression.</param>
        <summary>En cas de substitution dans une classe dérivée, retourne un objet qui représente l'expression analysée.</summary>
        <returns><see cref="T:System.Object" /> contenant la représentation analysée de l'expression ; sinon, <see langword="null" /> si <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> n'est pas implémenté.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En cas de substitution dans une classe dérivée, cette méthode analyse l’expression et retourne un objet qui peut être utilisé comme le `parsedData` paramètre dans un <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> ou <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsEvaluate">
      <MemberSignature Language="C#" Value="public virtual bool SupportsEvaluate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEvaluate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsEvaluate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsEvaluate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsEvaluate : bool" Usage="System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, retourne une valeur indiquant si l'objet <see cref="T:System.Web.Compilation.ExpressionBuilder" /> en cours prend en charge les pages sans compilation.</summary>
        <value><see langword="true" /> si le <see cref="T:System.Web.Compilation.ExpressionBuilder" /> prend en charge l'évaluation d'expressions ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur par défaut pour le <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> propriété est `false`. Pour prendre en charge les pages sans compilation, vous devez substituer les deux le <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> (méthode) et le <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> propriété.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#2)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#2)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>