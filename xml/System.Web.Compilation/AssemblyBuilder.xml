<Type Name="AssemblyBuilder" FullName="System.Web.Compilation.AssemblyBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="456ad81232191490a81d464eda1ece8e505731bf" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52235293" /></Metadata><TypeSignature Language="C#" Value="public class AssemblyBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AssemblyBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.AssemblyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class AssemblyBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AssemblyBuilder" />
  <TypeSignature Language="F#" Value="type AssemblyBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un conteneur pour générer un assembly à partir d'un ou de plusieurs chemins d'accès virtuel dans un projet ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Instances de la <xref:System.Web.Compilation.AssemblyBuilder> classe sont utilisés avec <xref:System.Web.Compilation.BuildProvider> classe les méthodes pour créer un ou plusieurs fichiers dans un assembly compilé.  
  
 Le <xref:System.Web.Compilation.BuildProvider> classe définit la fonctionnalité de génération pour les fichiers individuels et le <xref:System.Web.Compilation.AssemblyBuilder> classe combine le code source apporté par chaque <xref:System.Web.Compilation.BuildProvider> instance dans un assembly unique. ASP.NET environnement de génération passe un <xref:System.Web.Compilation.AssemblyBuilder> de l’objet à la <xref:System.Web.Compilation.BuildProvider> méthodes lors de la création d’un assembly à partir d’un ou plusieurs fichiers, afin que chaque <xref:System.Web.Compilation.BuildProvider> instance peut apporter du code source pour son fichier à l’assembly global.  
  
 L’environnement de génération ASP.NET détermine la langue et le compilateur requis par les fichiers dans le projet, selon le <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A?displayProperty=nameWithType> propriété. Les fichiers de groupes d’environnement build en fonction de leurs paramètres de compilateur et génère un assembly à partir de fichiers qui nécessitent le même compilateur.  
  
 Le <xref:System.Web.Compilation.AssemblyBuilder.CodeDomProvider%2A> propriété indique le <xref:System.CodeDom.Compiler.CodeDomProvider> implémentation de l’environnement de génération ASP.NET utilise pour compiler un assembly à partir du code source apporté par chaque <xref:System.Web.Compilation.BuildProvider> implémentation.  
  
 Un <xref:System.Web.Compilation.BuildProvider> objet apporte le code source sous la forme d’un graphique CodeDOM à l’aide du <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> (méthode). Un <xref:System.Web.Compilation.BuildProvider> objet apporte le code source stocké dans un fichier physique à l’aide de la <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> (méthode).  
  
 Après chaque <xref:System.Web.Compilation.BuildProvider> objet apporte le code source en utilisant la <xref:System.Web.Compilation.AssemblyBuilder> méthodes, ASP.NET environnement de génération utilise le <xref:System.Web.Compilation.AssemblyBuilder> classe pour compiler le code source collectées dans un assembly.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de fournisseur de génération simple, qui héritent de la classe abstraite <xref:System.Web.Compilation.BuildProvider> classe de base. Le fournisseur de générations substitue le <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>, <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>, et <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> membres de la classe de base.  
  
 Dans le <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> implémentation de méthode, le fournisseur de générations ajoute le code généré pour la compilation d’assembly à l’aide du <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> (méthode). L’exemple n’inclut pas l’implémentation de la `SampleClassGenerator` classe. Pour plus d'informations, consultez <xref:System.CodeDom.CodeCompileUnit>.  
  
 [!code-csharp[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/CS/samplebuildprovider.cs#2)]
 [!code-vb[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/VB/samplebuildprovider.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.BuildProvider" />
    <altmember cref="T:System.Web.Compilation.BuildManager" />
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
  </Docs>
  <Members>
    <Member MemberName="AddAssemblyReference">
      <MemberSignature Language="C#" Value="public void AddAssemblyReference (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAssemblyReference(class System.Reflection.Assembly a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAssemblyReference (a As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAssemblyReference(System::Reflection::Assembly ^ a);" />
      <MemberSignature Language="F#" Value="member this.AddAssemblyReference : System.Reflection.Assembly -&gt; unit" Usage="assemblyBuilder.AddAssemblyReference a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="a">Assembly référencé par une unité de compilation de code ou le fichier source inclus dans la compilation de l'assembly.</param>
        <summary>Ajoute un assembly qui est référencé par le code source généré pour un fichier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Web.Compilation.BuildProvider> implémentation utilise la <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> méthode lors de la génération de code source qui référence des types dans l’assembly d’entrée.  
  
 ASP.NET environnement de génération initialise la collection par défaut des assemblys disponibles pour référence via le fournisseur de générations dans le <xref:System.Web.Compilation.BuildProvider.ReferencedAssemblies%2A?displayProperty=nameWithType> propriété. Si le fournisseur de générations génère le code source qui référence des assemblys supplémentaires, le fournisseur de générations ajoute les assemblys supplémentaires à l’aide de la <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> (méthode). L’environnement de génération ASP.NET résout les types externes pendant la compilation de l’assembly à l’aide des assemblys référencés ajoutés par fournisseur de générations et la collection par défaut d’assemblys disponibles pour référence.  
  
 En règle générale, un <xref:System.Web.Compilation.BuildProvider> objet ajoute le code source pour le <xref:System.Web.Compilation.AssemblyBuilder> de l’objet dans le <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> (méthode). Si un fournisseur de générations génère le code source qui utilise un type externe, le fournisseur de générations ajoute l’assembly du type à l’aide de la <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A?displayProperty=nameWithType> (méthode).  
  
 Utilisez le <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> méthode pour ajouter un assembly référencé requis dans le code source généré par un <xref:System.Web.Compilation.BuildProvider> instance pour un type de fichier spécifique. Utilisez le [assemblies, élément de compilation (schéma des paramètres ASP.NET)](https://msdn.microsoft.com/library/3811c448-af1c-498d-be2b-6ed2634c51e9) élément de configuration pour configurer un assembly de référence sur plusieurs types de fichier dans un projet.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Compilation.BuildProvider.ReferencedAssemblies" />
      </Docs>
    </Member>
    <Member MemberName="AddCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void AddCodeCompileUnit (System.Web.Compilation.BuildProvider buildProvider, System.CodeDom.CodeCompileUnit compileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCodeCompileUnit(class System.Web.Compilation.BuildProvider buildProvider, class System.CodeDom.CodeCompileUnit compileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCodeCompileUnit(System::Web::Compilation::BuildProvider ^ buildProvider, System::CodeDom::CodeCompileUnit ^ compileUnit);" />
      <MemberSignature Language="F#" Value="member this.AddCodeCompileUnit : System.Web.Compilation.BuildProvider * System.CodeDom.CodeCompileUnit -&gt; unit" Usage="assemblyBuilder.AddCodeCompileUnit (buildProvider, compileUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buildProvider" Type="System.Web.Compilation.BuildProvider" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="buildProvider">Fournisseur de générations générant <paramref name="compileUnit" />.</param>
        <param name="compileUnit">Unité de compilation de code à inclure dans la compilation d'assembly.</param>
        <summary>Ajoute le code source pour l'assembly sous la forme d'un graphique CodeDOM.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Web.Compilation.BuildProvider> implémentation appelle le <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> méthode lors de la génération d’un graphique CodeDOM pour un chemin d’accès virtuel. Code source ajouté avec <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> est inclus dans la compilation de l’assembly.  
  
 En règle générale, un fournisseur de générations <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> implémentation de méthode lit le <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> propriété, analyse le contenu, puis ajoute le code source généré spécifié <xref:System.Web.Compilation.AssemblyBuilder> objet. Le fournisseur de générations utilise le <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> méthode pour ajouter le code source comme un graphique CodeDOM à l’assembly. Le fournisseur de générations pouvez également utiliser le <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> méthode pour ajouter le code source sous forme de fichier physique à l’assembly.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="M:System.Web.Compilation.AssemblyBuilder.CreateCodeFile(System.Web.Compilation.BuildProvider)" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenReader" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenStream" />
      </Docs>
    </Member>
    <Member MemberName="CodeDomProvider">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.CodeDomProvider CodeDomProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.CodeDomProvider CodeDomProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.AssemblyBuilder.CodeDomProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDomProvider As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::CodeDomProvider ^ CodeDomProvider { System::CodeDom::Compiler::CodeDomProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDomProvider : System.CodeDom.Compiler.CodeDomProvider" Usage="System.Web.Compilation.AssemblyBuilder.CodeDomProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le compilateur utilisé pour générer le code source dans un assembly.</summary>
        <value>Implémentation <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> en lecture seule utilisée pour compiler le code source apporté par tous les fournisseurs de générations dans un assembly.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Compilation.AssemblyBuilder.CodeDomProvider%2A> propriété indique le <xref:System.CodeDom.Compiler.CodeDomProvider?displayProperty=nameWithType> implémentation de l’environnement de génération ASP.NET utilise pour compiler un assembly à partir du code source apporté par chaque <xref:System.Web.Compilation.BuildProvider> implémentation.  
  
 L’environnement de génération ASP.NET détermine la langue et le compilateur requis par les fichiers dans le projet, selon le <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A?displayProperty=nameWithType> propriété. Les fichiers de groupes d’environnement build en fonction de leurs paramètres de compilateur et génère un assembly à partir de fichiers qui nécessitent le même compilateur.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.CodeCompilerType" />
        <altmember cref="T:System.Web.Compilation.CompilerType" />
        <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
        <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
      </Docs>
    </Member>
    <Member MemberName="CreateCodeFile">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter CreateCodeFile (System.Web.Compilation.BuildProvider buildProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.TextWriter CreateCodeFile(class System.Web.Compilation.BuildProvider buildProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.CreateCodeFile(System.Web.Compilation.BuildProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::TextWriter ^ CreateCodeFile(System::Web::Compilation::BuildProvider ^ buildProvider);" />
      <MemberSignature Language="F#" Value="member this.CreateCodeFile : System.Web.Compilation.BuildProvider -&gt; System.IO.TextWriter" Usage="assemblyBuilder.CreateCodeFile buildProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buildProvider" Type="System.Web.Compilation.BuildProvider" />
      </Parameters>
      <Docs>
        <param name="buildProvider">Fournisseur de générations générant le fichier source de code.</param>
        <summary>Permet à un fournisseur de générations de créer un fichier source temporaire et inclut le fichier source dans la compilation de l'assembly.</summary>
        <returns><see cref="T:System.IO.TextWriter" /> ouvert qui peut être utilisé pour écrire le code source dans un fichier temporaire.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Web.Compilation.BuildProvider> implémentation appelle le <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> méthode lors de la génération d’un fichier source pour un chemin d’accès virtuel. Code source ajouté avec <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> est inclus dans la compilation de l’assembly.  
  
 En règle générale, un fournisseur de générations <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> implémentation de méthode lit le <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> propriété, analyse le contenu, puis ajoute le code source généré spécifié <xref:System.Web.Compilation.AssemblyBuilder> objet. Le fournisseur de générations utilise le <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> méthode pour ajouter le code source sous forme de fichier physique à l’assembly. Le fournisseur de générations pouvez également utiliser le <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> méthode pour ajouter le code source comme un graphique CodeDOM à l’assembly.  
  
 Après avoir appelé <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>, le fournisseur de générations écrit à la source de contenu à l’aide d’un fichier <xref:System.IO.TextWriter> objet. Après avoir écrit le fichier source, le <xref:System.Web.Compilation.BuildProvider> objet doit utiliser le <xref:System.IO.TextWriter.Close%2A> méthode pour fermer le <xref:System.IO.TextWriter> de l’objet et libérer les ressources système associées.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de fournisseur de génération simple, qui héritent de la classe abstraite <xref:System.Web.Compilation.BuildProvider> classe de base. Le fournisseur de générations substitue le <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>, <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>, et <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> membres de la classe de base.  
  
 Dans le <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> implémentation de méthode, le fournisseur de générations ajoute le code généré pour la compilation d’assembly à l’aide du <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> (méthode). L’exemple n’inclut pas l’implémentation de la `SampleClassGenerator` classe. Pour plus d'informations, consultez <xref:System.CodeDom.CodeCompileUnit>.  
  
 [!code-csharp[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/CS/samplebuildprovider.cs#2)]
 [!code-vb[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/VB/samplebuildprovider.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenReader" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenStream" />
        <altmember cref="M:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)" />
      </Docs>
    </Member>
    <Member MemberName="CreateEmbeddedResource">
      <MemberSignature Language="C#" Value="public System.IO.Stream CreateEmbeddedResource (System.Web.Compilation.BuildProvider buildProvider, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream CreateEmbeddedResource(class System.Web.Compilation.BuildProvider buildProvider, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource(System.Web.Compilation.BuildProvider,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ CreateEmbeddedResource(System::Web::Compilation::BuildProvider ^ buildProvider, System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.CreateEmbeddedResource : System.Web.Compilation.BuildProvider * string -&gt; System.IO.Stream" Usage="assemblyBuilder.CreateEmbeddedResource (buildProvider, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buildProvider" Type="System.Web.Compilation.BuildProvider" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="buildProvider">Fournisseur de générations qui génère la ressource.</param>
        <param name="name">Nom du fichier de ressources à créer.</param>
        <summary>Permet à un fournisseur de générations de créer un fichier de ressources à inclure dans la compilation de l'assembly.</summary>
        <returns><see cref="T:System.IO.Stream" /> ouvert qui peut être utilisé pour écrire des ressources qui sont incluses dans la compilation de l'assembly.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Après avoir appelé la <xref:System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource%2A> (méthode), un <xref:System.Web.Compilation.BuildProvider> objet écrit la ressource de contenu à l’aide d’un fichier <xref:System.IO.Stream> objet. Par exemple, le fournisseur de générations peut écrire les ressources à l’aide un <xref:System.Resources.ResourceWriter> objet. Après avoir écrit le fichier de ressources, le fournisseur de générations doit utiliser le <xref:System.IO.Stream.Close%2A> méthode pour fermer le <xref:System.IO.Stream> de l’objet et libérer les ressources système associées.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> n'est pas un nom de fichier valide.</exception>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="T:System.Resources.ResourceWriter" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeFactory">
      <MemberSignature Language="C#" Value="public void GenerateTypeFactory (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GenerateTypeFactory(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GenerateTypeFactory (typeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GenerateTypeFactory(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GenerateTypeFactory : string -&gt; unit" Usage="assemblyBuilder.GenerateTypeFactory typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">Nom du type à générer.</param>
        <summary>Insère un modèle de fabrique d'objet rapide pour un type dans l'assembly compilé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Web.Compilation.BuildProvider> implémentation appelle le <xref:System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory%2A> méthode pour optimiser les performances pour les créations fréquentes d’instances de type.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" />
      </Docs>
    </Member>
    <Member MemberName="GetTempFilePhysicalPath">
      <MemberSignature Language="C#" Value="public string GetTempFilePhysicalPath (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTempFilePhysicalPath(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTempFilePhysicalPath (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTempFilePhysicalPath(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="member this.GetTempFilePhysicalPath : string -&gt; string" Usage="assemblyBuilder.GetTempFilePhysicalPath extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">Extension de fichier à utiliser pour le fichier temporaire.</param>
        <summary>Génère un chemin de fichier temporaire.</summary>
        <returns>Chemin d'accès à un fichier temporaire, avec l'extension de fichier spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Web.Compilation.BuildProvider> implémentation appelle le <xref:System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath%2A> méthode pour obtenir un chemin d’accès de fichier temporaire est automatiquement supprimé une fois que l’assembly est compilé.  
  
 Le <xref:System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath%2A> méthode génère un chemin d’accès de fichier temporaire unique, mais ne crée pas le fichier.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="T:System.CodeDom.Compiler.TempFileCollection" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.TempFiles" />
        <altmember cref="P:System.Web.Compilation.CompilerType.CompilerParameters" />
      </Docs>
    </Member>
  </Members>
</Type>