<Type Name="RouteUrlExpressionBuilder" FullName="System.Web.Compilation.RouteUrlExpressionBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5a3052e841adffb84b4b46b6f5304060517749bc" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39783573" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RouteUrlExpressionBuilder : System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RouteUrlExpressionBuilder extends System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.RouteUrlExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class RouteUrlExpressionBuilder&#xA;Inherits ExpressionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class RouteUrlExpressionBuilder : System::Web::Compilation::ExpressionBuilder" />
  <TypeSignature Language="F#" Value="type RouteUrlExpressionBuilder = class&#xA;    inherit ExpressionBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Compilation.ExpressionBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Web.Compilation.ExpressionEditor("System.Web.UI.Design.RouteUrlExpressionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Web.Compilation.ExpressionPrefix("Routes")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Crée une URL qui correspond aux valeurs de paramètre d'URL spécifiées.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Compilation.RouteUrlExpressionBuilder> classe rend possible de définir la propriété d’un contrôle serveur à l’URL d’un itinéraire en fournissant une liste de valeurs de paramètre d’URL.  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un balisage qui génère un lien hypertexte avec une URL qui est mis en forme pour un itinéraire. L’itinéraire est défini à l’aide de `http://www.contoso.com/search/{searchterm}` comme modèle d’URL.  
  
```  
<asp:HyperLink ID="HyperLink1" runat="server"  
               NavigateUrl="<%$ RouteUrl:searchterm=Bicycles %>">  
  Search for Bicycles  
</asp:HyperLink>  
```  
  
 L’URL générée pour ce lien hypertexte serait `http://www.contoso.com/search/Bicycles`.  
  
 Si les paramètres d’URL fourni à la `RouteUrl` expression ne sont pas suffisantes pour identifier un itinéraire, vous devez inclure le nom d’itinéraire. Par exemple, si une application Web a deux itinéraires avec `searchterm` en tant que paramètre d’URL seul, les itinéraires devraient être défini à l’aide des noms d’itinéraires, et le balisage de lien hypertexte peut se présenter comme l’exemple suivant :  
  
```  
<asp:HyperLink ID="HyperLink1" runat="server"  
               NavigateUrl="<%$ RouteUrl:searchterm=Bicycles,  
               routename=BasicSearchRoute %>">  
  Search for Bicycles  
</asp:HyperLink>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RouteUrlExpressionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RouteUrlExpressionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Compilation.RouteUrlExpressionBuilder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public override object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object EvaluateExpression(object target, class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EvaluateExpression (target As Object, entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ EvaluateExpression(System::Object ^ target, System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="routeUrlExpressionBuilder.EvaluateExpression (target, entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="target">Non utilisé dans cette implémentation.</param>
        <param name="entry">Propriété à laquelle l'expression est liée.</param>
        <param name="parsedData">Non utilisé dans cette implémentation.</param>
        <param name="context">Propriétés pour le contrôle ou la page.</param>
        <summary>Crée une URL qui correspond aux valeurs de paramètre d'URL spécifiées et à un format d'URL de routage.</summary>
        <returns>URL qui correspond aux valeurs de paramètre d'URL spécifiées et à l'itinéraire sélectionné. L'itinéraire est sélectionné en faisant correspondre les modèles d'URL de routage à la liste de paramètres spécifiée. Au cas où plusieurs itinéraires correspondraient à la liste de paramètres spécifiée, un nom d'itinéraire peut également être ajouté pour indiquer l'itinéraire à sélectionner.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET appelle cette méthode lorsqu’une expression sous la forme suivante est rencontrée dans le balisage :  
  
 `<%$ RouteUrl: urlparameter=value %>`  
  
 Cette méthode génère l’URL appropriée pour les valeurs de clé d’itinéraire spécifiées pour le cours <xref:System.Web.Routing.Route> objet. Cette méthode remplace la <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> (méthode). Il obtient de la `entry` paramètre une référence au contrôle auquel l’expression est liée, il obtient de la `context` paramètre l’expression à évaluer et il appelle la <xref:System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl%2A> méthode permettant de générer l’URL.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.CompilationMode" />
      </Docs>
    </Member>
    <Member MemberName="GetCodeExpression">
      <MemberSignature Language="C#" Value="public override System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.CodeDom.CodeExpression GetCodeExpression(class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCodeExpression (entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::CodeDom::CodeExpression ^ GetCodeExpression(System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.GetCodeExpression : System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; System.CodeDom.CodeExpression" Usage="routeUrlExpressionBuilder.GetCodeExpression (entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="entry">Propriété à laquelle l'expression est liée.</param>
        <param name="parsedData">Objet représentant des données analysées telles qu'elles sont retournées par <see cref="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />.</param>
        <param name="context">Propriétés pour le contrôle ou la page.</param>
        <summary>Retourne une expression de code utilisée pour effectuer l'assignation de propriété dans la classe de la page générée.</summary>
        <returns>Instance de <see cref="T:System.CodeDom.CodeExpression" /> utilisée dans l'assignation de propriété.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée lors de la création de CodeDOM pour une page ou un contrôle. Le <xref:System.CodeDom.CodeExpression> objet qui est retourné représente l’expression de code à ajouter à l’assignation de propriété dans la classe de page générée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRouteUrl">
      <MemberSignature Language="C#" Value="public static string GetRouteUrl (System.Web.UI.Control control, string expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRouteUrl(class System.Web.UI.Control control, string expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRouteUrl(System::Web::UI::Control ^ control, System::String ^ expression);" />
      <MemberSignature Language="F#" Value="static member GetRouteUrl : System.Web.UI.Control * string -&gt; string" Usage="System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl (control, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Contrôle auquel l'expression est liée.</param>
        <param name="expression">Expression telle qu'elle est spécifiée dans la balise.</param>
        <summary>Crée une URL qui correspond aux clés de routage spécifiées pour un format d'URL de routage.</summary>
        <returns>URL qui correspond au format d'URL de routage de l'objet <see cref="T:System.Web.Routing.Route" /> actif.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode génère la valeur appropriée pour l’URL en appelant le <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> méthode de la <xref:System.Web.Routing.RouteCollection> objet. Il obtient le <xref:System.Web.Routing.RequestContext> de l’objet à partir de la `control` paramètre et il analyse les paramètres de nom et l’itinéraire de routage à partir de la `expression` paramètre.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="control" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La méthode ne pouvait pas analyser l'expression spécifiée dans la balise. Pour plus d'informations, consultez <see cref="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsEvaluate">
      <MemberSignature Language="C#" Value="public override bool SupportsEvaluate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEvaluate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SupportsEvaluate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsEvaluate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsEvaluate : bool" Usage="System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si une expression peut être évaluée dans une page qui n'est pas compilée.</summary>
        <value>Toujours <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate%2A> propriété indique si le <xref:System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression%2A> méthode a été implémentée dans la classe et peut retourner une valeur pour l’expression dans une page qui n’est pas compilée. Le <xref:System.Web.Compilation.RouteUrlExpressionBuilder> classe peut évaluer une expression dans une page qui n’est pas compilée. Par conséquent, le <xref:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate%2A> propriété retourne toujours `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseRouteExpression">
      <MemberSignature Language="C#" Value="public static bool TryParseRouteExpression (string expression, System.Web.Routing.RouteValueDictionary routeValues, out string routeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseRouteExpression(string expression, class System.Web.Routing.RouteValueDictionary routeValues, [out] string&amp; routeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseRouteExpression (expression As String, routeValues As RouteValueDictionary, ByRef routeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseRouteExpression(System::String ^ expression, System::Web::Routing::RouteValueDictionary ^ routeValues, [Runtime::InteropServices::Out] System::String ^ % routeName);" />
      <MemberSignature Language="F#" Value="static member TryParseRouteExpression : string * System.Web.Routing.RouteValueDictionary *  -&gt; bool" Usage="System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression (expression, routeValues, routeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="routeValues" Type="System.Web.Routing.RouteValueDictionary" />
        <Parameter Name="routeName" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="expression">Expression telle qu'elle est spécifiée dans la balise.</param>
        <param name="routeValues">Collection de clés de routage et leurs valeurs associées.</param>
        <param name="routeName">Quand cette méthode retourne une valeur, contient une chaîne qui représente le nom de l’itinéraire, si <c>expression</c> contient une clé d’itinéraire nommée <c>RouteName</c>. Ce paramètre est passé sans être initialisé.</param>
        <summary>Analyse une expression sous la forme d'une collection de clés et de valeurs de routage, et éventuellement sous la forme d'un nom d'itinéraire.</summary>
        <returns>
          <see langword="true" /> si l'analyse a réussi ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression%2A> méthode supprime leader et final à partir de l’expression et ensuite le fractionne en paires clé/valeur en utilisant des virgules comme délimiteurs. Si la clé d’itinéraire nommé `RouteName` est trouvée, cette valeur est transmise dans le `routeName` paramètre et non dans `routeValues`. Sinon, `null` est retournée pour `routeName`. Espaces à gauche et sont également supprimés des valeurs et des clés individuelles.  
  
 Le <xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression%2A> retourne de la méthode `false` si l’expression n’est pas composée de paire clé/valeur au moins un qui est au format *clé*`=`*valeur*, et qui utilise des virgules pour Séparez plusieurs paires.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>