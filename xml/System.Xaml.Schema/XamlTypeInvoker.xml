<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d908be848800de954203e3d83f4d2005b60a7c55" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39916358" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un point d'extension qui peut construire des instances d'un type XAML via des techniques autres que la réflexion et des constructeurs.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objectif de <xref:System.Xaml.Schema.XamlTypeInvoker> consiste à activer un système de type XAML extensible, un schéma et une exécution qui ne reposent pas autant sur les fonctionnalités CLR telles que les attributs CLR, les informations de réflexion via <xref:System.Type> et <xref:System.Reflection.MemberInfo>, et ainsi de suite. Les sous-classes de <xref:System.Xaml.Schema.XamlTypeInvoker> sont utilisés comme paramètres d’entrée pour les autres constructeurs de classes de schéma XAML comme <xref:System.Xaml.XamlType>. Vous créez une sous-classe <xref:System.Xaml.XamlType> et passer le <xref:System.Xaml.Schema.XamlTypeInvoker> via au constructeur de base. Ainsi que la définition d’un <xref:System.Xaml.Schema.XamlTypeInvoker> pour le constructeur, vous devez également fournir des substitutions pour certaines de la `Lookup` méthodes de <xref:System.Xaml.XamlType>.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> a une implémentation par défaut. L’implémentation par défaut suit un modèle semblable à l’implémentation par défaut des types de schéma XAML <xref:System.Xaml.XamlType> et <xref:System.Xaml.XamlMember>: le système de type CLR est utilisé pour l’instanciation, les valeurs et les recherches, notamment l’utilisation d’attributs CLR, <xref:System.Type> et <xref:System.Reflection.MemberInfo>, et ainsi de suite.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> Fournit des méthodes pour les instanciations de base (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) et des méthodes qui sont pertinentes pour les types où le <xref:System.Xaml.XamlType> représente une collection, un dictionnaire ou un tableau (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implémentation par défaut est vide.  
  
 Ce constructeur est appelé en interne pour fournir une valeur pour <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>. Pour un <xref:System.Xaml.Schema.XamlTypeInvoker> sous-classe, il est probable que vous utilisez soit le <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> signature pour la construction ou fournir une substitution qui appelle <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> comme base. En fournissant la <xref:System.Xaml.XamlType> implémente une valeur par défaut de modèle où <xref:System.Xaml.Schema.XamlTypeInvoker> est immuable.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">Valeur de <see cref="T:System.Xaml.XamlType" /> pour le type XAML spécifique pertinent à ce <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> en fonction d'un <see cref="T:System.Xaml.XamlType" /> fourni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur est appelé en interne en fonction de la <xref:System.Xaml.XamlType> où le <xref:System.Xaml.Schema.XamlTypeInvoker> est utilisé pour la construction. Le `type` fourni ici s’applique à tous les autres méthode appelle pour <xref:System.Xaml.Schema.XamlTypeInvoker>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Instance du type spécifié par le <see cref="T:System.Xaml.XamlType" /> utilisé pour construire ce <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="item">Élément à ajouter.</param>
        <summary>Ajoute l’élément fourni à une instance du type adapté à ce <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez uniquement appeler cette méthode sur un <xref:System.Xaml.XamlType> qui représente une collection.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">A appelé cette méthode sur un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basé sur un <see cref="T:System.Xaml.XamlType" /> inconnu.  
  
 **ou**  
  
A appelé cette méthode sur un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> où le type pertinent n’est pas une collection.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> pour ce <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> retourne <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>L’implémentation de base inclut un appel à l’application d’assistance interne <c>ThrowIfUnknown</c>. Ce programme d’assistance levé pour les cas où un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> repose sur une inconnue <see cref="T:System.Xaml.XamlType" />, qui inclut les cas où le <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> est <see langword="null" />.  En interne, l’implémentation de base appelle <see cref="P:System.Xaml.XamlType.IsCollection" />et lève une exception si le résultat est <see langword="false" />.  L’implémentation de base n’utilise pas nécessairement sa propre <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implémentation. Tout d’abord, un cast de <paramref name="instance" /> à <see cref="T:System.Collections.IList" /> est tentée. Si cette opération réussit, un appel à <see cref="M:System.Collections.IList.Add(System.Object)" /> est effectuée et la méthode retourne. Sinon, l’implémentation de base utilise CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> pour appeler sous-jacent <see langword="Add" /> (méthode), tel qu’obtenu à partir d’un appel à <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> pour ce <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  Dans l’implémentation de base, aucune exception n’est levée à ce niveau si <paramref name="item" /> est <see langword="null" />. Il est toujours possible que sous-jacent <see langword="Add" /> méthode lève une exception lorsqu’elle est appelée. Autres exceptions au moment de l’exécution sont possibles si <see cref="P:System.Xaml.XamlType.ItemType" /> ne retourne pas un résultat valide.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Instance du type spécifié par le <see cref="T:System.Xaml.XamlType" /> utilisé pour construire ce <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="key">Clé de dictionnaire pour l’élément à ajouter.</param>
        <param name="item">La valeur d’élément à ajouter.</param>
        <summary>Ajoute la valeur de clé et d’élément fournie à une instance du type adapté à ce <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez uniquement appeler cette méthode sur un <xref:System.Xaml.XamlType> qui représente un dictionnaire.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">A appelé cette méthode sur un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basé sur un <see cref="T:System.Xaml.XamlType" /> inconnu.  
  
 **ou**  
  
A appelé cette méthode sur un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> où le type pertinent n’est pas un dictionnaire.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> pour ce <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> retourne <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>L’implémentation de base inclut un appel à l’application d’assistance interne <c>ThrowIfUnknown</c>. Ce programme d’assistance levé pour les cas où un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> repose sur une inconnue <see cref="T:System.Xaml.XamlType" />, qui inclut les cas où le <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> est <see langword="null" />.  En interne, l’implémentation de base appelle <see cref="P:System.Xaml.XamlType.IsDictionary" />et lève une exception si le résultat est <see langword="false" />.  L’implémentation de base n’utilise pas nécessairement sa propre <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implémentation. Tout d’abord, un cast de <paramref name="instance" /> à <see cref="T:System.Collections.IDictionary" /> est tentée. Si cette opération réussit, un appel à <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> est effectuée et la méthode retourne. Sinon, l’implémentation de base utilise CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> pour appeler sous-jacent <see langword="Add" /> (méthode), tel qu’obtenu à partir d’un appel à <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> pour ce <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  Dans l’implémentation de base, aucune exception n’est levée à ce niveau si <paramref name="item" /> ou <paramref name="key" /> sont <see langword="null" />. Il est toujours possible que sous-jacent <see langword="Add" /> méthode lève une exception lorsqu’elle est appelée. Autres exceptions au moment de l’exécution sont possibles si <see cref="P:System.Xaml.XamlType.ItemType" /> ne retourne pas un résultat valide.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">Tableau d'objets qui fournissent <see langword="x:ConstructorArgs" /> pour l'instance. Peut être <see langword="null" /> pour les types qui ne requièrent pas ou n'utilisent pas <see langword="x:ConstructorArgs" />.</param>
        <summary>Crée une instance d'objet basée sur le <see cref="T:System.Xaml.XamlType" /> initié par la construction pour ce <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <returns>Instance créée sur la base du<see cref="T:System.Xaml.XamlType" /> initié par construction pour ce <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">Impossible de résoudre le constructeur.</exception>
        <block subset="none" type="overrides">
          <para>L’implémentation de base inclut un appel à l’application d’assistance interne <c>ThrowIfUnknown</c>. Ce programme d’assistance levé pour les cas où un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> repose sur une inconnue <see cref="T:System.Xaml.XamlType" />, qui inclut les cas où le <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> est <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType">
          <see cref="T:System.Xaml.XamlType" /> pour le type d'élément utilisé par la méthode <see langword="Add" />.</param>
        <summary>Retourne la méthode <see langword="Add" /> pertinente pour un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> qui est pertinent à une collection ou un dictionnaire.</summary>
        <returns>Informations de CLR <see cref="T:System.Reflection.MethodInfo" /> pour la méthode <see langword="Add" />, ou null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode doit retourner `null` pour les cas où le <xref:System.Xaml.XamlType> pour ce <xref:System.Xaml.Schema.XamlTypeInvoker> n’est pas une collection accessible en écriture ou un dictionnaire. Plus précisément, doit retourner `null` pour les cas où <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> retourne `None`.  
  
> [!IMPORTANT]
>  Si vous accédez pas à un système de type XAML entièrement fiable, cette méthode présente un risque de signaler les fausses <xref:System.Reflection.MethodInfo> informations aux appelants.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contentType" /> est <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>L’implémentation de base retourne <see langword="null" /> pour les cas où un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> repose sur une inconnue <see cref="T:System.Xaml.XamlType" />, qui inclut les cas où le <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> est <see langword="null" />. Elle retourne également <see langword="null" /> si <see cref="P:System.Xaml.XamlType.ItemType" /> est <see langword="null" />.  Les collections XAML susceptibles d’avoir plusieurs <see langword="Add" /> (méthode), car une collection XAML peut potentiellement prendre en charge des plus d’un type de contenu (consultez <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, ou consultez <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> pour plus d’informations sur une implémentation de ce concept dans WPF). L’implémentation par défaut utilise la logique interne pour retourner la meilleure correspondance basée sur les signatures et le type de l’élément <paramref name="contentType" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un objet représentant une méthode qui peut effectuer une énumération sur des éléments.</summary>
        <returns>
          <see cref="T:System.Reflection.MethodInfo" /> pour une méthode d'énumérateur, ou <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Doit retourner `null` pour les cas où <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> retourne `None`.  
  
> [!IMPORTANT]
>  Si vous accédez pas à un système de type XAML entièrement fiable, cette méthode présente un risque de signaler les fausses <xref:System.Reflection.MethodInfo> informations aux appelants.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L’implémentation de base appelle une méthode d’assistance interne. Ce programme d’assistance retourne <see langword="null" /> pour les cas où un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> repose sur une inconnue <see cref="T:System.Xaml.XamlType" />, qui inclut les cas où le <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> est <see langword="null" />. Elle retourne également <see langword="null" /> pour les cas où <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> retourne <see langword="None" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Instance du type spécifié par le <see cref="T:System.Xaml.XamlType" /> utilisé pour construire ce <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Retourne un objet <see cref="T:System.Collections.IEnumerator" /> représentant le jeu d'éléments.</summary>
        <returns>Objet <see cref="T:System.Collections.IEnumerator" />, ou <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">A appelé cette méthode sur un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basé sur un <see cref="T:System.Xaml.XamlType" /> inconnu.  
  
 **ou**  
  
Appelé cette méthode sur un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> où le type pertinent n'est pas une collection ni un dictionnaire.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> est <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>L’implémentation de base inclut un appel à l’application d’assistance interne <c>ThrowIfUnknown</c>. Ce programme d’assistance levé pour les cas où un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> repose sur une inconnue <see cref="T:System.Xaml.XamlType" />, qui inclut les cas où le <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> est <see langword="null" />.  L’implémentation de base n’utilise pas nécessairement sa propre <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implémentation. Tout d’abord, un cast de <paramref name="instance" /> à <see cref="T:System.Collections.IEnumerable" /> est tentée. Si cette opération réussit, un appel à <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> est effectuée et la méthode retourne cette valeur de retour. Sinon, l’implémentation de base utilise CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> pour appeler sous-jacent <see langword="GetEnumerator" /> (méthode), tel qu’obtenu à partir d’un appel à <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> pour ce <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le gestionnaire à utiliser lorsqu'un <see cref="T:System.Xaml.XamlObjectWriter" /> effectue un appel dans un <see cref="T:System.Windows.Markup.MarkupExtension" /> implémenté.</summary>
        <value>Implémentation de gestionnaire qui gère ce cas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le Gestionnaire d’événements est basé sur <xref:System.EventHandler%601> contraint à l’aide <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> données d’événement.  
  
 La valeur retournée appelle le <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> comportement de la <xref:System.Xaml.XamlType> qui le <xref:System.Xaml.Schema.XamlTypeInvoker> repose sur.  
  
 La valeur de retour est `null` pour un <xref:System.Xaml.Schema.XamlTypeInvoker> qui repose sur une inconnue <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le gestionnaire à utiliser lorsqu'un <see cref="T:System.Xaml.XamlObjectWriter" /> effectue un appel dans un <see cref="T:System.ComponentModel.TypeConverter" /> implémenté par le CLR.</summary>
        <value>Implémentation de gestionnaire qui gère ce cas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le Gestionnaire d’événements est basé sur <xref:System.EventHandler%601> contraint à l’aide <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> données d’événement.  
  
 La valeur retournée appelle le <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> comportement de la <xref:System.Xaml.XamlType> qui le <xref:System.Xaml.Schema.XamlTypeInvoker> repose sur.  
  
 La valeur de retour est `null` pour un <xref:System.Xaml.Schema.XamlTypeInvoker> qui repose sur une inconnue <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Fournit une valeur statique qui représente un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> inconnu et non  implémenté pleinement.</summary>
        <value>Valeur statique qui représente un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> inconnu et non  implémenté pleinement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En fournissant cette valeur pour un <xref:System.Xaml.Schema.XamlTypeInvoker> paramètre de System.Xaml défini API entraînent généralement le code appelé lever des exceptions.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>