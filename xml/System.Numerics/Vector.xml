<Type Name="Vector" FullName="System.Numerics.Vector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="95e1267a9f59f96ee76094302da88cdb96a63f2e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30474453" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Vector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Vector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Vector" />
  <TypeSignature Language="VB.NET" Value="Public Class Vector" />
  <TypeSignature Language="C++ CLI" Value="public ref class Vector abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Numerics.Vectors</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e56be-101">Fournit une collection de méthodes d’usage statiques pour créer, manipuler, combiner et convertir des vecteurs génériques.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e56be-101">Provides a collection of static convenience methods for creating, manipulating, combining, and converting generic vectors.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abs&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Abs&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Abs&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Abs(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-102">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-102">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-103">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-103">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-104">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-104">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-105">Retourne un nouveau vecteur dont les éléments sont les valeurs absolues des éléments du vecteur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-105">Returns a new vector whose elements are the absolute values of the given vector's elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-106">Vecteur de valeurs absolues.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-106">The absolute value vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Add&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Add&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Add(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-107">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-107">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-108">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-108">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-109">Premier vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-109">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-110">Deuxième vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-110">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-111">Retourne un nouveau vecteur dont les valeurs correspondent à la somme de chaque paire d'éléments de deux vecteurs donnés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-111">Returns a new vector whose values are the sum of each pair of elements from two given vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-112">Vecteur résultant de l'addition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-112">The summed vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndNot&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; AndNot&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; AndNot&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndNot(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; AndNot(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-113">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-113">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-114">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-114">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-115">Premier vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-115">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-116">Deuxième vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-116">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-117">Retourne un nouveau vecteur en effectuant une opération Et Pas au niveau du bit sur chaque paire d'éléments correspondants dans deux vecteurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-117">Returns a new vector by performing a bitwise And Not operation on each pair of corresponding elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-118">Vecteur résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-118">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorByte&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;byte&gt; AsVectorByte&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int8&gt; AsVectorByte&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorByte(Of T As Structure) (value As Vector(Of T)) As Vector(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::Byte&gt; AsVectorByte(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-119">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-119">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-120">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-120">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-121">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-121">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-122">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'octets non signés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-122">Reinterprets the bits of a specified vector into those of a vector of unsigned bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-123">Vecteur réinterprété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-123">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorDouble&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; AsVectorDouble&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; AsVectorDouble&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorDouble(Of T As Structure) (value As Vector(Of T)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;double&gt; AsVectorDouble(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-124">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-124">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-125">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-125">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-126">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-126">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-127">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur à virgule flottante double précision.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-127">Reinterprets the bits of a specified vector into those of a double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-128">Vecteur réinterprété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-128">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorInt16&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;short&gt; AsVectorInt16&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int16&gt; AsVectorInt16&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorInt16(Of T As Structure) (value As Vector(Of T)) As Vector(Of Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;short&gt; AsVectorInt16(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int16&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-129">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-129">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-130">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-130">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-131">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-131">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-132">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers 16 bits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-132">Reinterprets the bits of a specified vector into those of a vector of 16-bit integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-133">Vecteur réinterprété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-133">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorInt32&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; AsVectorInt32&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; AsVectorInt32&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorInt32(Of T As Structure) (value As Vector(Of T)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;int&gt; AsVectorInt32(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-134">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-134">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-135">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-135">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-136">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-136">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-137">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-137">Reinterprets the bits of a specified vector into those of a vector of integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-138">Vecteur réinterprété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-138">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorInt64&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; AsVectorInt64&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; AsVectorInt64&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorInt64(Of T As Structure) (value As Vector(Of T)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;long&gt; AsVectorInt64(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-139">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-139">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-140">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-140">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-141">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-141">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-142">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers longs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-142">Reinterprets the bits of a specified vector into those of a vector of long integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-143">Vecteur réinterprété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-143">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorSByte&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;sbyte&gt; AsVectorSByte&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int8&gt; AsVectorSByte&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorSByte(Of T As Structure) (value As Vector(Of T)) As Vector(Of SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::SByte&gt; AsVectorSByte(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.SByte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-144">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-144">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-145">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-145">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-146">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-146">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-147">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'octets signés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-147">Reinterprets the bits of a specified vector into those of a vector of signed bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-148">Vecteur réinterprété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-148">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorSingle&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; AsVectorSingle&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; AsVectorSingle&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorSingle(Of T As Structure) (value As Vector(Of T)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;float&gt; AsVectorSingle(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-149">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-149">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-150">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-150">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-151">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-151">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-152">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur à virgule flottante simple précision.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-152">Reinterprets the bits of a specified vector into those of a single-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-153">Vecteur réinterprété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-153">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorUInt16&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ushort&gt; AsVectorUInt16&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; AsVectorUInt16&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorUInt16(Of T As Structure) (value As Vector(Of T)) As Vector(Of UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::UInt16&gt; AsVectorUInt16(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-154">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-154">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-155">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-155">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-156">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-156">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-157">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers 16 bits non signés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-157">Reinterprets the bits of a specified vector into those of a vector of unsigned 16-bit integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-158">Vecteur réinterprété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-158">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorUInt32&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;uint&gt; AsVectorUInt32&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; AsVectorUInt32&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorUInt32(Of T As Structure) (value As Vector(Of T)) As Vector(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::UInt32&gt; AsVectorUInt32(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-159">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-159">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-160">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-160">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-161">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-161">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-162">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers non signés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-162">Reinterprets the bits of a specified vector into those of a vector of unsigned integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-163">Vecteur réinterprété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-163">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorUInt64&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ulong&gt; AsVectorUInt64&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; AsVectorUInt64&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorUInt64(Of T As Structure) (value As Vector(Of T)) As Vector(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::UInt64&gt; AsVectorUInt64(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-164">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-164">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-165">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-165">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-166">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-166">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-167">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers longs non signés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-167">Reinterprets the bits of a specified vector into those of a vector of unsigned long integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-168">Vecteur réinterprété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-168">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseAnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; BitwiseAnd&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; BitwiseAnd&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitwiseAnd(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; BitwiseAnd(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-169">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-169">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-170">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-170">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-171">Premier vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-171">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-172">Deuxième vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-172">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-173">Retourne un nouveau vecteur en effectuant une opération <see langword="And" /> au niveau du bit sur chaque paire d'éléments dans deux vecteurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-173">Returns a new vector by performing a bitwise <see langword="And" /> operation on each pair of elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-174">Vecteur résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-174">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseOr&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; BitwiseOr&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; BitwiseOr&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitwiseOr(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; BitwiseOr(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-175">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-175">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-176">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-176">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-177">Premier vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-177">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-178">Deuxième vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-178">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-179">Retourne un nouveau vecteur en effectuant une opération <see langword="Or" /> au niveau du bit sur chaque paire d'éléments dans deux vecteurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-179">Returns a new vector by performing a bitwise <see langword="Or" /> operation on each pair of elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-180">Vecteur résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-180">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalSelect">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; ConditionalSelect (System.Numerics.Vector&lt;int&gt; condition, System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; ConditionalSelect(valuetype System.Numerics.Vector`1&lt;int32&gt; condition, valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalSelect (condition As Vector(Of Integer), left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; ConditionalSelect(System::Numerics::Vector&lt;int&gt; condition, System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e56be-181">Vecteur de masque intégral utilisé pour gérer la sélection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-181">The integral mask vector used to drive selection.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="e56be-182">Premier vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-182">The first source vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-183">Deuxième vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-183">The second source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-184">Crée un vecteur simple précision avec des éléments sélectionnés parmi deux vecteurs sources simple précision spécifiés sur la base d'un vecteur de masque intégral.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-184">Creates a new single-precision vector with elements selected between two specified single-precision source vectors based on an integral mask vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-185">Nouveau vecteur avec des éléments sélectionnés en fonction du masque.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-185">The new vector with elements selected based on the mask.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalSelect">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; ConditionalSelect (System.Numerics.Vector&lt;long&gt; condition, System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; ConditionalSelect(valuetype System.Numerics.Vector`1&lt;int64&gt; condition, valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalSelect (condition As Vector(Of Long), left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;double&gt; ConditionalSelect(System::Numerics::Vector&lt;long&gt; condition, System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e56be-186">Vecteur de masque intégral utilisé pour gérer la sélection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-186">The integral mask vector used to drive selection.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="e56be-187">Premier vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-187">The first source vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-188">Deuxième vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-188">The second source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-189">Crée un vecteur double précision avec des éléments sélectionnés parmi deux vecteurs sources double précision spécifiés sur la base d'un vecteur de masque intégral.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-189">Creates a new double-precision vector with elements selected between two specified double-precision source vectors based on an integral mask vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-190">Nouveau vecteur avec des éléments sélectionnés en fonction du masque.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-190">The new vector with elements selected based on the mask.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalSelect&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; ConditionalSelect&lt;T&gt; (System.Numerics.Vector&lt;T&gt; condition, System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; ConditionalSelect&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; condition, valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalSelect(Of T As Structure) (condition As Vector(Of T), left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; ConditionalSelect(System::Numerics::Vector&lt;T&gt; condition, System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="condition" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-191">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-191">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-192">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-192">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="condition">
          <span data-ttu-id="e56be-193">Vecteur de masque intégral utilisé pour gérer la sélection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-193">The integral mask vector used to drive selection.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="e56be-194">Premier vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-194">The first source vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-195">Deuxième vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-195">The second source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-196">Crée un vecteur d'un type spécifié avec des éléments sélectionnés parmi deux vecteurs sources spécifiés du même type sur la base d'un vecteur de masque intégral.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-196">Creates a new vector of a specified type with elements selected between two specified source vectors of the same type based on an integral mask vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-197">Nouveau vecteur avec des éléments sélectionnés en fonction du masque.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-197">The new vector with elements selected based on the mask.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToDouble">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; ConvertToDouble (System.Numerics.Vector&lt;long&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; ConvertToDouble(valuetype System.Numerics.Vector`1&lt;int64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToDouble (value As Vector(Of Long)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;double&gt; ConvertToDouble(System::Numerics::Vector&lt;long&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToDouble">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; ConvertToDouble (System.Numerics.Vector&lt;ulong&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; ConvertToDouble(valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToDouble (value As Vector(Of ULong)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;double&gt; ConvertToDouble(System::Numerics::Vector&lt;System::UInt64&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.UInt64&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToInt32">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; ConvertToInt32 (System.Numerics.Vector&lt;float&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; ConvertToInt32(valuetype System.Numerics.Vector`1&lt;float32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToInt32 (value As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; ConvertToInt32(System::Numerics::Vector&lt;float&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToInt64">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; ConvertToInt64 (System.Numerics.Vector&lt;double&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; ConvertToInt64(valuetype System.Numerics.Vector`1&lt;float64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToInt64 (value As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; ConvertToInt64(System::Numerics::Vector&lt;double&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToSingle">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; ConvertToSingle (System.Numerics.Vector&lt;int&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; ConvertToSingle(valuetype System.Numerics.Vector`1&lt;int32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToSingle (value As Vector(Of Integer)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; ConvertToSingle(System::Numerics::Vector&lt;int&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToSingle">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; ConvertToSingle (System.Numerics.Vector&lt;uint&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; ConvertToSingle(valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToSingle (value As Vector(Of UInteger)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; ConvertToSingle(System::Numerics::Vector&lt;System::UInt32&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToUInt32">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;uint&gt; ConvertToUInt32 (System.Numerics.Vector&lt;float&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; ConvertToUInt32(valuetype System.Numerics.Vector`1&lt;float32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUInt32 (value As Vector(Of Single)) As Vector(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt32&gt; ConvertToUInt32(System::Numerics::Vector&lt;float&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToUInt64">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ulong&gt; ConvertToUInt64 (System.Numerics.Vector&lt;double&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; ConvertToUInt64(valuetype System.Numerics.Vector`1&lt;float64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUInt64 (value As Vector(Of Double)) As Vector(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt64&gt; ConvertToUInt64(System::Numerics::Vector&lt;double&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Divide&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Divide&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Divide(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-198">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-198">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-199">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-199">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-200">Premier vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-200">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-201">Deuxième vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-201">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-202">Retourne un nouveau vecteur dont les valeurs sont le résultat de la division des éléments du premier vecteur par les éléments correspondants du second vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-202">Returns a new vector whose values are the result of dividing the first vector's elements by the corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-203">Vecteur divisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-203">The divided vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dot&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Dot&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Dot&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dot(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Dot(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-204">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-204">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-205">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-205">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-206">Premier vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-206">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-207">Deuxième vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-207">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-208">Retourne le produit scalaire de deux vecteurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-208">Returns the dot product of two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-209">Produit scalaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-209">The dot product.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; Equals (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; Equals(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; Equals(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-210">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-210">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-211">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-211">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-212">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments de deux vecteurs double précision spécifiés sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-212">Returns a new integral vector whose elements signal whether the elements in two specified double-precision vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-213">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-213">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; Equals (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; Equals(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; Equals(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-214">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-214">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-215">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-215">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-216">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments de deux vecteurs intégraux spécifiés sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-216">Returns a new integral vector whose elements signal whether the elements in two specified integral vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-217">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-217">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; Equals (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; Equals(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; Equals(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-218">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-218">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-219">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-219">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-220">Retourne un nouveau vecteur dont les éléments indiquent si les éléments de deux vecteurs entiers longs spécifiés sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-220">Returns a new vector whose elements signal whether the elements in two specified long integer vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-221">Vecteur entier long résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-221">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; Equals (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; Equals(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; Equals(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-222">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-222">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-223">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-223">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-224">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments de deux vecteurs simple précision spécifiés sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-224">Returns a new integral vector whose elements signal whether the elements in two specified single-precision vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-225">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-225">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Equals&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Equals&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Equals(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-226">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-226">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-227">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-227">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-228">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-228">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-229">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-229">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-230">Retourne un nouveau vecteur d'un type spécifié dont les éléments indiquent si les éléments de deux vecteurs spécifiés du même type sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-230">Returns a new vector of a specified type whose elements signal whether the elements in two specified vectors of the same type are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-231">Vecteur résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-231">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool EqualsAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EqualsAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool EqualsAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-232">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-232">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-233">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-233">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-234">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-234">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-235">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-235">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-236">Retourne une valeur qui indique si chaque paire d'éléments dans les vecteurs spécifiés est égale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-236">Returns a value that indicates whether each pair of elements in the given vectors is equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-237">
            <see langword="true" /> si tous les éléments dans <paramref name="left" /> et <paramref name="right" /> sont égaux ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-237">
              <see langword="true" /> if all elements in <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool EqualsAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EqualsAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool EqualsAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-238">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-238">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-239">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-239">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-240">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-240">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-241">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-241">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-242">Retourne une valeur qui indique si au moins deux paires d'éléments dans les vecteurs spécifiés sont égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-242">Returns a value that indicates whether any single pair of elements in the given vectors is equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-243">
            <see langword="true" /> si des paires d'éléments dans <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-243">
              <see langword="true" /> if any element pair in <paramref name="left" /> and <paramref name="right" /> is equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThan (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThan(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-244">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-244">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-245">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-245">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-246">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante double précision sont supérieurs à leurs éléments correspondants dans un second vecteur à virgule flottante double précision.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-246">Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are greater than their corresponding elements in a second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-247">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-247">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThan (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThan(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-248">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-248">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-249">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-249">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-250">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont supérieurs à leurs éléments correspondants dans un second vecteur intégral.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-250">Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than their corresponding elements in a second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-251">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-251">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThan (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThan(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-252">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-252">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-253">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-253">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-254">Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont supérieurs à leurs éléments correspondants dans un second vecteur entier long.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-254">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than their corresponding elements in a second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-255">Vecteur entier long résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-255">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThan (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThan(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-256">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-256">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-257">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-257">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-258">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante simple précision sont supérieurs à leurs éléments correspondants dans un second vecteur à virgule flottante simple précision.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-258">Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are greater than their corresponding elements in a second single-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-259">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-259">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; GreaterThan&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; GreaterThan&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; GreaterThan(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-260">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-260">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-261">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-261">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-262">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-262">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-263">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-263">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-264">Retourne un nouveau vecteur dont les éléments indiquent si les éléments d'un vecteur d'un type spécifié sont supérieurs à leurs éléments correspondants dans le second vecteur du même type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-264">Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than their corresponding elements in the second vector of the same time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-265">Vecteur résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-265">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-266">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-266">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-267">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-267">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-268">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-268">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-269">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-269">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-270">Retourne une valeur qui indique si tous les éléments du premier vecteur sont supérieurs aux éléments correspondants dans le second vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-270">Returns a value that indicates whether all elements in the first vector are greater than the corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-271">
            <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont supérieurs aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-271">
              <see langword="true" /> if all elements in <paramref name="left" /> are greater than the corresponding elements in <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-272">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-272">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-273">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-273">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-274">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-274">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-275">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-275">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-276">Retourne une valeur qui indique si un élément du premier vecteur est supérieur à l'élément correspondant dans le second vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-276">Returns a value that indicates whether any element in the first vector is greater than the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-277">
            <see langword="true" /> si un élément de <paramref name="left" /> est supérieur à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-277">
              <see langword="true" /> if any element in <paramref name="left" /> is greater than the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-278">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-278">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-279">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-279">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-280">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur à virgule flottante double précision.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-280">Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-281">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-281">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-282">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-282">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-283">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-283">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-284">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur intégral.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-284">Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than or equal to their corresponding elements in the second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-285">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-285">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-286">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-286">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-287">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-287">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-288">Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur entier long.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-288">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than or equal to their corresponding elements in the second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-289">Vecteur entier long résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-289">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-290">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-290">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-291">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-291">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-292">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur à virgule flottante simple précision.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-292">Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the single-precision floating-point second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-293">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-293">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; GreaterThanOrEqual&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; GreaterThanOrEqual&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-294">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-294">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-295">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-295">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-296">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-296">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-297">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-297">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-298">Retourne un nouveau vecteur dont les éléments indiquent si les éléments d'un vecteur d'un type spécifié sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur du même type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-298">Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than or equal to their corresponding elements in the second vector of the same type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-299">Vecteur résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-299">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqualAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanOrEqualAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanOrEqualAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqualAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanOrEqualAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-300">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-300">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-301">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-301">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-302">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-302">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-303">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-303">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-304">Retourne une valeur qui indique si tous les éléments du premier vecteur sont supérieurs ou égaux à tous les éléments correspondants dans le second vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-304">Returns a value that indicates whether all elements in the first vector are greater than or equal to all the corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-305">
            <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont supérieurs ou égaux aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-305">
              <see langword="true" /> if all elements in <paramref name="left" /> are greater than or equal to the corresponding elements in <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqualAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanOrEqualAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanOrEqualAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqualAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanOrEqualAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-306">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-306">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-307">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-307">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-308">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-308">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-309">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-309">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-310">Retourne une valeur qui indique si un élément du premier vecteur est supérieur ou égal à l'élément correspondant dans le second vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-310">Returns a value that indicates whether any element in the first vector is greater than or equal to the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-311">
            <see langword="true" /> si un élément de <paramref name="left" /> est supérieur ou égal à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-311">
              <see langword="true" /> if any element in <paramref name="left" /> is greater than or equal to the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHardwareAccelerated">
      <MemberSignature Language="C#" Value="public static bool IsHardwareAccelerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsHardwareAccelerated" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Vector.IsHardwareAccelerated" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsHardwareAccelerated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsHardwareAccelerated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e56be-312">Obtient une valeur qui indique si les opérations de vecteur sont soumises à l'accélération matérielle via la prise en charge intrinsèque JIT.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-312">Gets a value that indicates whether vector operations are subject to hardware acceleration through JIT intrinsic support.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e56be-313">
            <see langword="true" /> si les opérations de vecteur sont soumises à l'accélération matérielle ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-313">
              <see langword="true" /> if vector operations are subject to hardware acceleration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e56be-314">Opérations de vecteur sont soumises à l’accélération matérielle sur les systèmes qui prennent en charge de la seule Instruction, les instructions SIMD (Multiple Data) et le compilateur juste-à-temps RyiJIT est utilisé pour compiler le code managé.</span><span class="sxs-lookup"><span data-stu-id="e56be-314">Vector operations are subject to hardware acceleration on systems that support Single Instruction, Multiple Data (SIMD) instructions and the RyiJIT just-in-time compiler is used to compile managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThan (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThan(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThan(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-315">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-315">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-316">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-316">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-317">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante double précision sont inférieurs à leurs éléments correspondants dans un second vecteur à virgule flottante double précision.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-317">Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than their corresponding elements in a second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-318">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-318">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThan (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThan(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThan(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-319">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-319">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-320">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-320">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-321">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont inférieurs à leurs éléments correspondants dans un second vecteur intégral.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-321">Returns a new integral vector whose elements signal whether the elements in one integral vector are less than their corresponding elements in a second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-322">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-322">The resulting integral vector</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThan (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThan(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThan(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-323">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-323">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-324">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-324">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-325">Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont inférieurs à leurs éléments correspondants dans un second vecteur entier long.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-325">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less than their corresponding elements in a second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-326">Vecteur entier long résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-326">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThan (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThan(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThan(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-327">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-327">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-328">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-328">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-329">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur simple précision sont inférieurs à leurs éléments correspondants dans un second vecteur simple précision.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-329">Returns a new integral vector whose elements signal whether the elements in one single-precision vector are less than their corresponding elements in a second single-precision vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-330">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-330">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; LessThan&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; LessThan&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; LessThan(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-331">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-331">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-332">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-332">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-333">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-333">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-334">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-334">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-335">Retourne un nouveau vecteur d'un type spécifié dont les éléments indiquent si les éléments d'un vecteur sont inférieurs à leurs éléments correspondants dans le second vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-335">Returns a new vector of a specified type whose elements signal whether the elements in one vector are less than their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-336">Vecteur résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-336">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-337">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-337">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-338">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-338">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-339">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-339">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-340">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-340">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-341">Retourne une valeur qui indique si tous les éléments du premier vecteur sont inférieurs à leurs éléments correspondants dans le second vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-341">Returns a value that indicates whether all of the elements in the first vector are less than their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-342">
            <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont inférieurs aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-342">
              <see langword="true" /> if all of the elements in <paramref name="left" /> are less than the corresponding elements in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-343">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-343">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-344">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-344">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-345">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-345">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-346">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-346">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-347">Retourne une valeur qui indique si un élément du premier vecteur est inférieur à l'élément correspondant dans le second vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-347">Returns a value that indicates whether any element in the first vector is less than the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-348">
            <see langword="true" /> si un élément de <paramref name="left" /> est inférieur à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-348">
              <see langword="true" /> if any element in <paramref name="left" /> is less than the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThanOrEqual (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThanOrEqual(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-349">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-349">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-350">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-350">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-351">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante double précision sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur à virgule flottante double précision.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-351">Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than or equal to their corresponding elements in a second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-352">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-352">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThanOrEqual (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThanOrEqual(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-353">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-353">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-354">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-354">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-355">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur intégral.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-355">Returns a new integral vector whose elements signal whether the elements in one integral vector are less than or equal to their corresponding elements in a second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-356">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-356">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThanOrEqual (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThanOrEqual(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-357">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-357">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-358">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-358">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-359">Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur entier long.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-359">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less or equal to their corresponding elements in a second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-360">Vecteur entier long résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-360">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThanOrEqual (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThanOrEqual(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e56be-361">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-361">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-362">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-362">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-363">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante simple précision sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur à virgule flottante simple précision.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-363">Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are less than or equal to their corresponding elements in a second single-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-364">Vecteur intégral résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-364">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; LessThanOrEqual&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; LessThanOrEqual&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; LessThanOrEqual(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-365">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-365">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-366">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-366">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-367">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-367">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-368">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-368">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-369">Retourne un nouveau vecteur dont les éléments indiquent si les éléments d'un vecteur sont inférieurs ou égaux à leurs éléments correspondants dans le second vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-369">Returns a new vector whose elements signal whether the elements in one vector are less than or equal to their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-370">Vecteur résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-370">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqualAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanOrEqualAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanOrEqualAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqualAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanOrEqualAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-371">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-371">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-372">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-372">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-373">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-373">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-374">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-374">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-375">Retourne une valeur qui indique si tous les éléments du premier vecteur sont inférieurs ou égaux à leurs éléments correspondants dans le second vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-375">Returns a value that indicates whether all elements in the first vector are less than or equal to their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-376">
            <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont inférieurs ou égaux aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-376">
              <see langword="true" /> if all of the elements in <paramref name="left" /> are less than or equal to the corresponding elements in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqualAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanOrEqualAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanOrEqualAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqualAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanOrEqualAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-377">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-377">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-378">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-378">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-379">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-379">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-380">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-380">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-381">Retourne une valeur qui indique si un élément du premier vecteur est inférieur ou égal à l'élément correspondant dans le second vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-381">Returns a value that indicates whether any element in the first vector is less than or equal to the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-382">
            <see langword="true" /> si un élément de <paramref name="left" /> est inférieur ou égal à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-382">
              <see langword="true" /> if any element in <paramref name="left" /> is less than or equal to the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Max&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Max&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Max(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-383">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-383">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-384">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-384">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-385">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-385">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-386">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-386">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-387">Retourne un nouveau vecteur dont les valeurs sont le maximum de chaque paire d'éléments dans deux vecteurs donnés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-387">Returns a new vector whose elements are the maximum of each pair of elements in the two given vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-388">Vecteur maximal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-388">The maximum vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Min&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Min&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Min(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-389">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-389">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-390">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-390">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-391">Premier vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-391">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-392">Deuxième vecteur à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-392">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-393">Retourne un nouveau vecteur dont les valeurs sont le minimum de chaque paire d'éléments dans deux vecteurs donnés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-393">Returns a new vector whose elements are the minimum of each pair of elements in the two given vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-394">Vecteur minimal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-394">The minimum vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Multiply&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Multiply&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Multiply(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-395">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-395">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-396">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-396">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-397">Premier vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-397">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-398">Deuxième vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-398">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-399">Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-399">Returns a new vector whose values are the product of each pair of elements in two specified vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-400">Vecteur résultant du produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-400">The product vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Multiply&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, T right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Multiply&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, !!T right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply(Of T As Structure) (left As Vector(Of T), right As T) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Multiply(System::Numerics::Vector&lt;T&gt; left, T right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-401">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-401">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-402">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-402">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-403">Le vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-403">The vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-404">Valeur scalaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-404">The scalar value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-405">Retourne un nouveau vecteur dont les valeurs sont les valeurs d'un vecteur spécifié multipliées chacune par une valeur scalaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-405">Returns a new vector whose values are the values of a specified vector each multiplied by a scalar value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-406">Vecteur mis à l'échelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-406">The scaled vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Multiply&lt;T&gt; (T left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Multiply&lt;struct .ctor (class System.ValueType) T&gt;(!!T left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply(Of T As Structure) (left As T, right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Multiply(T left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-407">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-407">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-408">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-408">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-409">Valeur scalaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-409">The scalar value.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-410">Le vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-410">The vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-411">Retourne un nouveau vecteur dont les valeurs sont une valeur scalaire multipliée par chacune des valeurs d'un vecteur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-411">Returns a new vector whose values are a scalar value multiplied by each of the values of a specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-412">Vecteur mis à l'échelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-412">The scaled vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; Narrow (System.Numerics.Vector&lt;double&gt; source1, System.Numerics.Vector&lt;double&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; Narrow(valuetype System.Numerics.Vector`1&lt;float64&gt; source1, valuetype System.Numerics.Vector`1&lt;float64&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Double), source2 As Vector(Of Double)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; Narrow(System::Numerics::Vector&lt;double&gt; source1, System::Numerics::Vector&lt;double&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;sbyte&gt; Narrow (System.Numerics.Vector&lt;short&gt; source1, System.Numerics.Vector&lt;short&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int8&gt; Narrow(valuetype System.Numerics.Vector`1&lt;int16&gt; source1, valuetype System.Numerics.Vector`1&lt;int16&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Short), source2 As Vector(Of Short)) As Vector(Of SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::SByte&gt; Narrow(System::Numerics::Vector&lt;short&gt; source1, System::Numerics::Vector&lt;short&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.SByte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Int16&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Int16&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;short&gt; Narrow (System.Numerics.Vector&lt;int&gt; source1, System.Numerics.Vector&lt;int&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int16&gt; Narrow(valuetype System.Numerics.Vector`1&lt;int32&gt; source1, valuetype System.Numerics.Vector`1&lt;int32&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Integer), source2 As Vector(Of Integer)) As Vector(Of Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;short&gt; Narrow(System::Numerics::Vector&lt;int&gt; source1, System::Numerics::Vector&lt;int&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int16&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; Narrow (System.Numerics.Vector&lt;long&gt; source1, System.Numerics.Vector&lt;long&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; Narrow(valuetype System.Numerics.Vector`1&lt;int64&gt; source1, valuetype System.Numerics.Vector`1&lt;int64&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Long), source2 As Vector(Of Long)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; Narrow(System::Numerics::Vector&lt;long&gt; source1, System::Numerics::Vector&lt;long&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;byte&gt; Narrow (System.Numerics.Vector&lt;ushort&gt; source1, System.Numerics.Vector&lt;ushort&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int8&gt; Narrow(valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; source1, valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of UShort), source2 As Vector(Of UShort)) As Vector(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::Byte&gt; Narrow(System::Numerics::Vector&lt;System::UInt16&gt; source1, System::Numerics::Vector&lt;System::UInt16&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.UInt16&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.UInt16&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ushort&gt; Narrow (System.Numerics.Vector&lt;uint&gt; source1, System.Numerics.Vector&lt;uint&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; Narrow(valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; source1, valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of UInteger), source2 As Vector(Of UInteger)) As Vector(Of UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt16&gt; Narrow(System::Numerics::Vector&lt;System::UInt32&gt; source1, System::Numerics::Vector&lt;System::UInt32&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;uint&gt; Narrow (System.Numerics.Vector&lt;ulong&gt; source1, System.Numerics.Vector&lt;ulong&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; Narrow(valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; source1, valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of ULong), source2 As Vector(Of ULong)) As Vector(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt32&gt; Narrow(System::Numerics::Vector&lt;System::UInt64&gt; source1, System::Numerics::Vector&lt;System::UInt64&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.UInt64&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.UInt64&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Negate&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Negate&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Negate(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-413">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-413">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-414">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-414">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-415">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-415">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-416">Retourne un nouveau vecteur dont les éléments sont l'opposé de l'élément correspondant dans le vecteur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-416">Returns a new vector whose elements are the negation of the corresponding element in the specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-417">Vecteur dont le signe a été inversé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-417">The negated vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; OnesComplement&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; OnesComplement&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnesComplement(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; OnesComplement(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-418">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-418">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-419">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-419">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-420">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-420">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-421">Retourne un nouveau vecteur dont les éléments sont obtenus en prenant le complément des éléments d'un vecteur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-421">Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-422">Vecteur résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-422">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SquareRoot&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; SquareRoot&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; SquareRoot&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SquareRoot(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; SquareRoot(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-423">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-423">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-424">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-424">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e56be-425">Vecteur source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-425">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-426">Retourne un nouveau vecteur dont les éléments sont la racine carrée des éléments d'un vecteur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-426">Returns a new vector whose elements are the square roots of a specified vector's elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-427">Racine carrée du vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-427">The square root vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Subtract&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Subtract&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Subtract(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-428">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-428">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-429">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-429">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-430">Premier vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-430">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-431">Deuxième vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-431">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-432">Retourne un nouveau vecteur dont les valeurs correspondent à la différence entre les éléments du second vecteur et leurs éléments correspondants dans le premier vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-432">Returns a new vector whose values are the difference between the elements in the second vector and their corresponding elements in the first vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-433">Vecteur de différence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-433">The difference vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;byte&gt; source, out System.Numerics.Vector&lt;ushort&gt; dest1, out System.Numerics.Vector&lt;ushort&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;unsigned int8&gt; source, [out] valuetype System.Numerics.Vector`1&lt;unsigned int16&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;unsigned int16&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Byte), ByRef dest1 As Vector(Of UShort), ByRef dest2 As Vector(Of UShort))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt16&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt16&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Byte&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.UInt16&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.UInt16&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;short&gt; source, out System.Numerics.Vector&lt;int&gt; dest1, out System.Numerics.Vector&lt;int&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;int16&gt; source, [out] valuetype System.Numerics.Vector`1&lt;int32&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;int32&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Short), ByRef dest1 As Vector(Of Integer), ByRef dest2 As Vector(Of Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;short&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;int&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;int&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Int16&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Int32&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Int32&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;int&gt; source, out System.Numerics.Vector&lt;long&gt; dest1, out System.Numerics.Vector&lt;long&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;int32&gt; source, [out] valuetype System.Numerics.Vector`1&lt;int64&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;int64&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Integer), ByRef dest1 As Vector(Of Long), ByRef dest2 As Vector(Of Long))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;int&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;long&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;long&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Int64&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Int64&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;sbyte&gt; source, out System.Numerics.Vector&lt;short&gt; dest1, out System.Numerics.Vector&lt;short&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;int8&gt; source, [out] valuetype System.Numerics.Vector`1&lt;int16&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;int16&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of SByte), ByRef dest1 As Vector(Of Short), ByRef dest2 As Vector(Of Short))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::SByte&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;short&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;short&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.SByte&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Int16&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Int16&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;float&gt; source, out System.Numerics.Vector&lt;double&gt; dest1, out System.Numerics.Vector&lt;double&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;float32&gt; source, [out] valuetype System.Numerics.Vector`1&lt;float64&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;float64&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Single), ByRef dest1 As Vector(Of Double), ByRef dest2 As Vector(Of Double))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;float&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;double&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;double&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Double&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Double&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;ushort&gt; source, out System.Numerics.Vector&lt;uint&gt; dest1, out System.Numerics.Vector&lt;uint&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; source, [out] valuetype System.Numerics.Vector`1&lt;unsigned int32&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;unsigned int32&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of UShort), ByRef dest1 As Vector(Of UInteger), ByRef dest2 As Vector(Of UInteger))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::UInt16&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt32&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt32&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.UInt16&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.UInt32&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.UInt32&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;uint&gt; source, out System.Numerics.Vector&lt;ulong&gt; dest1, out System.Numerics.Vector&lt;ulong&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; source, [out] valuetype System.Numerics.Vector`1&lt;unsigned int64&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;unsigned int64&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of UInteger), ByRef dest1 As Vector(Of ULong), ByRef dest2 As Vector(Of ULong))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::UInt32&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt64&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt64&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.UInt64&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.UInt64&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Xor&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Xor&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Xor(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Xor(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e56be-434">Type de vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-434">The vector type.</span>
          </span>
          <span data-ttu-id="e56be-435">
            <c>T</c> peut être tout type numérique primitif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-435">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="e56be-436">Premier vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-436">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e56be-437">Deuxième vecteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-437">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e56be-438">Retourne un nouveau vecteur en effectuant une opération Ou Exclusif au niveau du bit (<see langword="XOr" />) sur chaque paire d'éléments dans deux vecteurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-438">Returns a new vector by performing a bitwise exclusive Or (<see langword="XOr" />) operation on each pair of elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e56be-439">Vecteur résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e56be-439">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>