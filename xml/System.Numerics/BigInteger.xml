<Type Name="BigInteger" FullName="System.Numerics.BigInteger">
  <TypeSignature Language="C#" Value="public struct BigInteger : IComparable, IComparable&lt;System.Numerics.BigInteger&gt;, IEquatable&lt;System.Numerics.BigInteger&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit BigInteger extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IEquatable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.BigInteger" />
  <TypeSignature Language="VB.NET" Value="Public Structure BigInteger&#xA;Implements IComparable, IComparable(Of BigInteger), IEquatable(Of BigInteger), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class BigInteger : IComparable, IComparable&lt;System::Numerics::BigInteger&gt;, IEquatable&lt;System::Numerics::BigInteger&gt;, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Numerics</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Numerics</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="90062-101">Représente un entier signé arbitrairement grand.</span><span class="sxs-lookup"><span data-stu-id="90062-101">Represents an arbitrarily large signed integer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-102">Le <xref:System.Numerics.BigInteger> type est un type immuable qui représente un entier arbitrairement grand dont la valeur en théorie n’a aucune limite supérieure ou inférieure.</span><span class="sxs-lookup"><span data-stu-id="90062-102">The <xref:System.Numerics.BigInteger> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds.</span></span> <span data-ttu-id="90062-103">Les membres de la <xref:System.Numerics.BigInteger> type proches de celles des autres types intégraux (le <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, et <xref:System.UInt64> types).</span><span class="sxs-lookup"><span data-stu-id="90062-103">The members of the <xref:System.Numerics.BigInteger> type closely parallel those of other integral types (the <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, and <xref:System.UInt64> types).</span></span> <span data-ttu-id="90062-104">Ce type diffère des autres types intégraux dans le [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], qui ont une plage indiquée par leurs `MinValue` et `MaxValue` propriétés.</span><span class="sxs-lookup"><span data-stu-id="90062-104">This type differs from the other integral types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], which have a range indicated by their `MinValue` and `MaxValue` properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90062-105">Étant donné que le <xref:System.Numerics.BigInteger> type est immuable (consultez [mutabilité et BigInteger Structure](#mutability)) et parce qu’il n’a aucune limite supérieure ou inférieure, une <xref:System.OutOfMemoryException> peut être levée pour toute opération qui entraîne un <xref:System.Numerics.BigInteger> valeur trop grand.</span><span class="sxs-lookup"><span data-stu-id="90062-105">Because the <xref:System.Numerics.BigInteger> type is immutable (see [Mutability and the BigInteger Structure](#mutability)) and because it has no upper or lower bounds, an <xref:System.OutOfMemoryException> can be thrown for any operation that causes a <xref:System.Numerics.BigInteger> value to grow too large.</span></span>  
  
## <a name="instantiating-a-biginteger-object"></a><span data-ttu-id="90062-106">Instanciation d’un objet BigInteger</span><span class="sxs-lookup"><span data-stu-id="90062-106">Instantiating a BigInteger Object</span></span>  
 <span data-ttu-id="90062-107">Vous pouvez instancier un <xref:System.Numerics.BigInteger> objet de plusieurs façons :</span><span class="sxs-lookup"><span data-stu-id="90062-107">You can instantiate a <xref:System.Numerics.BigInteger> object in several ways:</span></span>  
  
-   <span data-ttu-id="90062-108">Vous pouvez utiliser la `new` (mot clé) et fournir n’importe quelle valeur intégrale ou à virgule flottante en tant que paramètre à la <xref:System.Numerics.BigInteger> constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-108">You can use the `new` keyword and provide any integral or floating-point value as a parameter to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="90062-109">(Les valeurs à virgule flottante sont tronquées avant qu’elles sont assignées à la <xref:System.Numerics.BigInteger>.) L’exemple suivant illustre l’utilisation de la `new` mot clé pour instancier <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-109">(Floating-point values are truncated before they are assigned to the <xref:System.Numerics.BigInteger>.) The following example illustrates how to use the `new` keyword to instantiate <xref:System.Numerics.BigInteger> values.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)]
     [!code-vb[System.Numerics.BigInteger.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)]  
  
-   <span data-ttu-id="90062-110">Vous pouvez déclarer un <xref:System.Numerics.BigInteger> variable et assigner une valeur comme vous que tout type numérique, tant que cette valeur est un type intégral.</span><span class="sxs-lookup"><span data-stu-id="90062-110">You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type.</span></span> <span data-ttu-id="90062-111">L’exemple suivant utilise l’attribution pour créer un <xref:System.Numerics.BigInteger> valeur un <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="90062-111">The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)]
     [!code-vb[System.Numerics.BigInteger.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)]  
  
-   <span data-ttu-id="90062-112">Vous pouvez affecter une valeur décimale ou à virgule flottante à un <xref:System.Numerics.BigInteger> si vous effectuez un cast de la valeur ou convertissez en premier lieu de l’objet.</span><span class="sxs-lookup"><span data-stu-id="90062-112">You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first.</span></span> <span data-ttu-id="90062-113">L’exemple suivant effectue un cast (en c#) ou convertit (en Visual Basic) explicitement un <xref:System.Double> et un <xref:System.Decimal> valeur un <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="90062-113">The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)]
     [!code-vb[System.Numerics.BigInteger.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)]  
  
 <span data-ttu-id="90062-114">Ces méthodes permettent d’instancier un <xref:System.Numerics.BigInteger> types uniquement de l’objet dont la valeur est dans la plage de l’un des numériques existants.</span><span class="sxs-lookup"><span data-stu-id="90062-114">These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only.</span></span> <span data-ttu-id="90062-115">Vous pouvez instancier un <xref:System.Numerics.BigInteger> objet dont la valeur peut dépasser la plage des types numériques existants de l’une des trois façons :</span><span class="sxs-lookup"><span data-stu-id="90062-115">You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:</span></span>  
  
-   <span data-ttu-id="90062-116">Vous pouvez utiliser la `new` (mot clé) et fournir un tableau d’octets de n’importe quelle taille la <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType> constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-116">You can use the `new` keyword and provide a byte array of any size to the <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="90062-117">Exemple :</span><span class="sxs-lookup"><span data-stu-id="90062-117">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)]
     [!code-vb[System.Numerics.BigInteger.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)]  
  
-   <span data-ttu-id="90062-118">Vous pouvez appeler la <xref:System.Numerics.BigInteger.Parse%2A> ou <xref:System.Numerics.BigInteger.TryParse%2A> des méthodes pour convertir la représentation sous forme de chaîne d’un nombre en une <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="90062-118">You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>.</span></span> <span data-ttu-id="90062-119">Exemple :</span><span class="sxs-lookup"><span data-stu-id="90062-119">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)]
     [!code-vb[System.Numerics.BigInteger.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)]  
  
-   <span data-ttu-id="90062-120">Vous pouvez appeler une `static` (`Shared` en Visual Basic) <xref:System.Numerics.BigInteger> méthode qui effectue une opération sur une expression numérique et retourne un calculé <xref:System.Numerics.BigInteger> résultat.</span><span class="sxs-lookup"><span data-stu-id="90062-120">You can call a `static` (`Shared` in Visual Basic) <xref:System.Numerics.BigInteger> method that performs some operation on a numeric expression and returns a calculated <xref:System.Numerics.BigInteger> result.</span></span> <span data-ttu-id="90062-121">L’exemple suivant fait cela en création de cubes <xref:System.UInt64.MaxValue?displayProperty=nameWithType> et assigne le résultat à un <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="90062-121">The following example does this by cubing <xref:System.UInt64.MaxValue?displayProperty=nameWithType> and assigning the result to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)]
     [!code-vb[System.Numerics.BigInteger.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)]  
  
 <span data-ttu-id="90062-122">La valeur non initialisée d’un <xref:System.Numerics.BigInteger> est <xref:System.Numerics.BigInteger.Zero%2A>.</span><span class="sxs-lookup"><span data-stu-id="90062-122">The uninitialized value of a <xref:System.Numerics.BigInteger> is <xref:System.Numerics.BigInteger.Zero%2A>.</span></span>  
  
## <a name="performing-operations-on-biginteger-values"></a><span data-ttu-id="90062-123">Exécution d’opérations sur des valeurs BigInteger</span><span class="sxs-lookup"><span data-stu-id="90062-123">Performing Operations on BigInteger Values</span></span>  
 <span data-ttu-id="90062-124">Vous pouvez utiliser un <xref:System.Numerics.BigInteger> comme vous utiliseriez n’importe quel autre type intégral de l’instance.</span><span class="sxs-lookup"><span data-stu-id="90062-124">You can use a <xref:System.Numerics.BigInteger> instance as you would use any other integral type.</span></span> <span data-ttu-id="90062-125"><xref:System.Numerics.BigInteger> surcharge les opérateurs numériques standards pour vous permettent d’effectuer des opérations mathématiques de base telles que l’addition, soustraction, division, multiplication, soustraction, négation et négation unaire.</span><span class="sxs-lookup"><span data-stu-id="90062-125"><xref:System.Numerics.BigInteger> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation.</span></span> <span data-ttu-id="90062-126">Vous pouvez également utiliser les opérateurs numériques standard pour comparer deux <xref:System.Numerics.BigInteger> valeurs entre eux.</span><span class="sxs-lookup"><span data-stu-id="90062-126">You can also use the standard numeric operators to compare two <xref:System.Numerics.BigInteger> values with each other.</span></span> <span data-ttu-id="90062-127">Comme les autres types intégraux, <xref:System.Numerics.BigInteger> prend également en charge l’opérateur de bits `And`, `Or`, `XOr`, gauche MAJ et les opérateurs de décalage vers la droite.</span><span class="sxs-lookup"><span data-stu-id="90062-127">Like the other integral types, <xref:System.Numerics.BigInteger> also supports the bitwise `And`, `Or`, `XOr`, left shift, and right shift operators.</span></span> <span data-ttu-id="90062-128">Pour les langages qui ne prennent pas en charge les opérateurs personnalisés, le <xref:System.Numerics.BigInteger> structure fournit également des méthodes équivalentes pour effectuer des opérations mathématiques.</span><span class="sxs-lookup"><span data-stu-id="90062-128">For languages that do not support custom operators, the <xref:System.Numerics.BigInteger> structure also provides equivalent methods for performing mathematical operations.</span></span> <span data-ttu-id="90062-129">Ceux-ci incluent <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>et plusieurs autres.</span><span class="sxs-lookup"><span data-stu-id="90062-129">These include <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>, and several others.</span></span>  
  
 <span data-ttu-id="90062-130">De nombreux membres de la <xref:System.Numerics.BigInteger> structure correspondent directement aux membres des autres types intégraux.</span><span class="sxs-lookup"><span data-stu-id="90062-130">Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types.</span></span> <span data-ttu-id="90062-131">En outre, <xref:System.Numerics.BigInteger> ajoute des membres tels que les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="90062-131">In addition, <xref:System.Numerics.BigInteger> adds members such as the following:</span></span>  
  
-   <span data-ttu-id="90062-132"><xref:System.Numerics.BigInteger.Sign%2A>, qui retourne une valeur qui indique le signe d’un <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-132"><xref:System.Numerics.BigInteger.Sign%2A>, which returns a value that indicates the sign of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="90062-133"><xref:System.Numerics.BigInteger.Abs%2A>, qui retourne la valeur absolue d’un <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-133"><xref:System.Numerics.BigInteger.Abs%2A>, which returns the absolute value of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="90062-134"><xref:System.Numerics.BigInteger.DivRem%2A>, qui retourne le quotient et le reste d’une opération de division.</span><span class="sxs-lookup"><span data-stu-id="90062-134"><xref:System.Numerics.BigInteger.DivRem%2A>, which returns both the quotient and remainder of a division operation.</span></span>  
  
-   <span data-ttu-id="90062-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, qui retourne le plus grand commun diviseur de deux <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, which returns the greatest common divisor of two <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="90062-136">La plupart de ces membres supplémentaires correspondent aux membres de le <xref:System.Math> (classe), qui fournit les fonctionnalités pour travailler avec les types numériques primitifs.</span><span class="sxs-lookup"><span data-stu-id="90062-136">Many of these additional members correspond to the members of the <xref:System.Math> class, which provides the functionality to work with the primitive numeric types.</span></span>  
  
<a name="mutability"></a>   
## <a name="mutability-and-the-biginteger-structure"></a><span data-ttu-id="90062-137">Mutabilité et Structure BigInteger</span><span class="sxs-lookup"><span data-stu-id="90062-137">Mutability and the BigInteger Structure</span></span>  
 <span data-ttu-id="90062-138">L’exemple suivant instancie un <xref:System.Numerics.BigInteger> de l’objet, puis incrémente sa valeur d’une unité.</span><span class="sxs-lookup"><span data-stu-id="90062-138">The following example instantiates a <xref:System.Numerics.BigInteger> object and then increments its value by one.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)]  
  
 <span data-ttu-id="90062-139">Bien que cet exemple s’affiche pour modifier la valeur de l’objet existant, il n’est pas le cas.</span><span class="sxs-lookup"><span data-stu-id="90062-139">Although this example appears to modify the value of the existing object, this is not the case.</span></span> <span data-ttu-id="90062-140"><xref:System.Numerics.BigInteger> les objets sont immuables, ce qui signifie qu’en interne, le common language runtime crée en fait un <xref:System.Numerics.BigInteger> de l’objet et lui assigne une valeur supérieure à sa valeur précédente.</span><span class="sxs-lookup"><span data-stu-id="90062-140"><xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value.</span></span> <span data-ttu-id="90062-141">Ce nouvel objet est ensuite retourné à l’appelant.</span><span class="sxs-lookup"><span data-stu-id="90062-141">This new object is then returned to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90062-142">Les autres types numériques du .NET Framework sont également immuables.</span><span class="sxs-lookup"><span data-stu-id="90062-142">The other numeric types in the .NET Framework are also immutable.</span></span> <span data-ttu-id="90062-143">Toutefois, étant donné que le <xref:System.Numerics.BigInteger> type n’a aucune limite supérieure ou inférieure, ses valeurs peuvent considérablement augmenter et avoir un impact mesurable sur les performances.</span><span class="sxs-lookup"><span data-stu-id="90062-143">However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.</span></span>  
  
 <span data-ttu-id="90062-144">Bien que ce processus est transparent pour l’appelant, il entraîne une baisse des performances.</span><span class="sxs-lookup"><span data-stu-id="90062-144">Although this process is transparent to the caller, it does incur a performance penalty.</span></span> <span data-ttu-id="90062-145">Dans certains cas, particulièrement lorsque des opérations répétées sont exécutées dans une boucle sur très volumineux <xref:System.Numerics.BigInteger> valeurs, cette altération des performances peut être significative.</span><span class="sxs-lookup"><span data-stu-id="90062-145">In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant.</span></span> <span data-ttu-id="90062-146">Par exemple, dans l’exemple suivant, une opération est effectuée de façon répétée un million de fois et un <xref:System.Numerics.BigInteger> valeur est incrémentée d’une unité chaque fois que l’opération réussit.</span><span class="sxs-lookup"><span data-stu-id="90062-146">For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)]  
  
 <span data-ttu-id="90062-147">Dans ce cas, vous pouvez améliorer les performances en exécutant toutes les assignations intermédiaires à une <xref:System.Int32> variable.</span><span class="sxs-lookup"><span data-stu-id="90062-147">In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable.</span></span> <span data-ttu-id="90062-148">La valeur finale de la variable peut ensuite être assignée à la <xref:System.Numerics.BigInteger> de l’objet lors de la boucle s’arrête.</span><span class="sxs-lookup"><span data-stu-id="90062-148">The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits.</span></span> <span data-ttu-id="90062-149">L'exemple suivant illustre cette situation.</span><span class="sxs-lookup"><span data-stu-id="90062-149">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)]  
  
## <a name="working-with-byte-arrays-and-hexadecimal-strings"></a><span data-ttu-id="90062-150">Utilisation des chaînes hexadécimales et des tableaux d’octets</span><span class="sxs-lookup"><span data-stu-id="90062-150">Working with Byte Arrays and Hexadecimal Strings</span></span>  
 <span data-ttu-id="90062-151">Si vous convertissez <xref:System.Numerics.BigInteger> valeurs à des tableaux d’octets, ou si vous convertissez des tableaux d’octets à <xref:System.Numerics.BigInteger> valeurs, vous devez prendre en compte l’ordre des octets.</span><span class="sxs-lookup"><span data-stu-id="90062-151">If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes.</span></span> <span data-ttu-id="90062-152">Le <xref:System.Numerics.BigInteger> structure attend les octets individuels dans un tableau d’octets à afficher dans un ordre little-endian (autrement dit, les octets de poids faible de la valeur précèdent les octets d’ordre supérieur).</span><span class="sxs-lookup"><span data-stu-id="90062-152">The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes).</span></span> <span data-ttu-id="90062-153">Vous pouvez effectuer un aller-retour un <xref:System.Numerics.BigInteger> valeur en appelant le <xref:System.Numerics.BigInteger.ToByteArray%2A> (méthode) et à passer l’octet résultant de tableau pour le <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructeur, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-153">You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)]  
  
 <span data-ttu-id="90062-154">Pour instancier un <xref:System.Numerics.BigInteger> valeur à partir d’un tableau d’octets qui représente une valeur d’un autre type intégral, vous pouvez passer la valeur intégrale à la <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> (méthode), puis passer le résultant tableau d’octets à la <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-154">To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span> <span data-ttu-id="90062-155">L’exemple suivant instancie un <xref:System.Numerics.BigInteger> valeur à partir d’un tableau d’octets qui représente un <xref:System.Int16> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-155">The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)]  
  
 <span data-ttu-id="90062-156">Le <xref:System.Numerics.BigInteger> structure suppose que les valeurs négatives sont stockées à l’aide de représentation de complément à deux.</span><span class="sxs-lookup"><span data-stu-id="90062-156">The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation.</span></span> <span data-ttu-id="90062-157">Étant donné que la <xref:System.Numerics.BigInteger> structure représente une valeur numérique sans longueur fixe, la <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructeur interprète toujours le bit le plus significatif du dernier octet dans le tableau comme un bit de signe.</span><span class="sxs-lookup"><span data-stu-id="90062-157">Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit.</span></span> <span data-ttu-id="90062-158">Pour empêcher le <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> valeurs de constructeur à partir de la confusion entre des deux complément représentation sous forme d’une valeur négative par la représentation sous forme de signe et magnitude d’une valeur positive, positive dans lequel le plus bit significatif du dernier octet dans le tableau d’octets serait normalement jeu doit inclure un octet supplémentaire dont la valeur est 0.</span><span class="sxs-lookup"><span data-stu-id="90062-158">To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0.</span></span> <span data-ttu-id="90062-159">Par exemple, 0xC0 0xBD 0xF0 0xFF est la représentation hexadécimale little-endian-1,000,000 ou 4,293,967,296.</span><span class="sxs-lookup"><span data-stu-id="90062-159">For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296.</span></span> <span data-ttu-id="90062-160">Le bit le plus significatif du dernier octet dans ce tableau étant activé, la valeur du tableau d’octets serait interprétée par le <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructeur comme -1,000,000.</span><span class="sxs-lookup"><span data-stu-id="90062-160">Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000.</span></span> <span data-ttu-id="90062-161">Pour instancier un <xref:System.Numerics.BigInteger> dont la valeur est positive, un tableau d’octets dont les éléments sont des 0xC0 0xBD 0xF0 0xFF 0x00 doit être passé au constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-161">To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor.</span></span> <span data-ttu-id="90062-162">L'exemple suivant illustre ce comportement.</span><span class="sxs-lookup"><span data-stu-id="90062-162">The following example illustrates this.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)]  
  
 <span data-ttu-id="90062-163">Tableaux d’octets créés par la <xref:System.Numerics.BigInteger.ToByteArray%2A> méthode à partir des valeurs positives incluent cet octet de valeur zéro supplémentaire.</span><span class="sxs-lookup"><span data-stu-id="90062-163">Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte.</span></span> <span data-ttu-id="90062-164">Par conséquent, le <xref:System.Numerics.BigInteger> structure peut correctement aller-retour (valeurs) en les assignant puis de les restaurer à partir de tableaux d’octets, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-164">Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)]  
  
 <span data-ttu-id="90062-165">Toutefois, vous devrez peut-être ajouter cet octet de valeur zéro supplémentaire aux tableaux d’octets qui sont créés dynamiquement par le développeur ou qui sont retournés par les méthodes qui convertissent des entiers non signés en tableaux d’octets (tel que <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>, et <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="90062-165">However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>, and <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="90062-166">Lors de l’analyse d’une chaîne hexadécimale, la <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> et <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> méthodes supposent que si le bit le plus significatif du premier octet dans la chaîne est défini, ou si le premier chiffre hexadécimal de la chaîne représente les quatre bits inférieurs d’une valeur d’octet, la valeur est représenté à l’aide de représentation de complément à deux.</span><span class="sxs-lookup"><span data-stu-id="90062-166">When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation.</span></span> <span data-ttu-id="90062-167">Par exemple, « FF01 » et « F01 » représentent la valeur décimale -255.</span><span class="sxs-lookup"><span data-stu-id="90062-167">For example, both "FF01" and "F01" represent the decimal value -255.</span></span> <span data-ttu-id="90062-168">Pour différencier les valeurs positives des valeurs négatives, les valeurs positives doivent inclure un zéro non significatif.</span><span class="sxs-lookup"><span data-stu-id="90062-168">To differentiate positive from negative values, positive values should include a leading zero.</span></span> <span data-ttu-id="90062-169">Les surcharges appropriées de la <xref:System.Numerics.BigInteger.ToString%2A> (méthode), lorsqu’ils sont passés à la chaîne de format « X », ajoutez un zéro non significatif à la chaîne hexadécimale retournée pour les valeurs positives.</span><span class="sxs-lookup"><span data-stu-id="90062-169">The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the "X" format string, add a leading zero to the returned hexadecimal string for positive values.</span></span> <span data-ttu-id="90062-170">Cela permet à l’aller-retour <xref:System.Numerics.BigInteger> valeurs à l’aide de la <xref:System.Numerics.BigInteger.ToString%2A> et <xref:System.Numerics.BigInteger.Parse%2A> méthodes, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-170">This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)]  
  
 <span data-ttu-id="90062-171">Toutefois, les chaînes hexadécimales créées en appelant le `ToString` méthodes d’autres types intégraux ou des surcharges de la <xref:System.Convert.ToString%2A> méthode qui incluent un `toBase` paramètre n’indiquent pas le signe de la valeur ou le type de source de données à partir de laquelle la chaîne hexadécimale a été dérivée.</span><span class="sxs-lookup"><span data-stu-id="90062-171">However, the hexadecimal strings created by calling the `ToString` methods of the other integral types or the overloads of the <xref:System.Convert.ToString%2A> method that include a `toBase` parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived.</span></span> <span data-ttu-id="90062-172">Instanciation avec succès une <xref:System.Numerics.BigInteger> valeur d’une telle chaîne requiert une logique supplémentaire.</span><span class="sxs-lookup"><span data-stu-id="90062-172">Successfully instantiating a <xref:System.Numerics.BigInteger> value from such a string requires some additional logic.</span></span> <span data-ttu-id="90062-173">L’exemple suivant fournit une implémentation possible.</span><span class="sxs-lookup"><span data-stu-id="90062-173">The following example provides one possible implementation.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-174">Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-174">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-175">Tableau de valeurs d'octets respectant un ordre avec primauté des octets de poids faible (little-endian).</span><span class="sxs-lookup"><span data-stu-id="90062-175">An array of byte values in little-endian order.</span></span></param>
        <summary><span data-ttu-id="90062-176">Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide des valeurs d'un tableau d'octets.</span><span class="sxs-lookup"><span data-stu-id="90062-176">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-177">Les octets individuels dans le `value` tableau doit être dans l’ordre little-endian, à partir de l’octet de poids le plus bas à l’octet de poids le plus élevé.</span><span class="sxs-lookup"><span data-stu-id="90062-177">The individual bytes in the `value` array should be in little-endian order, from lowest-order byte to highest-order byte.</span></span> <span data-ttu-id="90062-178">Par exemple, la valeur numérique 1,000,000,000,000 est représentée comme indiqué dans le tableau suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-178">For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="90062-179">Chaîne hexadécimale</span><span class="sxs-lookup"><span data-stu-id="90062-179">Hexadecimal string</span></span>|<span data-ttu-id="90062-180">E8D4A51000</span><span class="sxs-lookup"><span data-stu-id="90062-180">E8D4A51000</span></span>|  
|<span data-ttu-id="90062-181">Tableau d’octets (index le moins élevé tout d’abord)</span><span class="sxs-lookup"><span data-stu-id="90062-181">Byte array (lowest index first)</span></span>|<span data-ttu-id="90062-182">00 E8 DE D4 A5 10 00</span><span class="sxs-lookup"><span data-stu-id="90062-182">00 10 A5 D4 E8 00</span></span>|  
  
 <span data-ttu-id="90062-183">La plupart des méthodes qui convertissent des valeurs numériques pour les tableaux d’octets, tel que <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> et <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>, retournent des tableaux d’octets dans l’ordre little-endian.</span><span class="sxs-lookup"><span data-stu-id="90062-183">Most methods that convert numeric values to byte arrays, such as <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> and <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>, return byte arrays in little-endian order.</span></span>  
  
 <span data-ttu-id="90062-184">Le constructeur attend des valeurs positives dans le tableau d’octets à utiliser la représentation « signe et magnitude » et les valeurs négatives pour utiliser la représentation de complément à deux.</span><span class="sxs-lookup"><span data-stu-id="90062-184">The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation.</span></span> <span data-ttu-id="90062-185">En d’autres termes, si l’ordre le plus élevé de bits de l’octet de poids le plus élevé dans `value` est défini, résultant <xref:System.Numerics.BigInteger> valeur est négative.</span><span class="sxs-lookup"><span data-stu-id="90062-185">In other words, if the highest-order bit of the highest-order byte in `value` is set, the resulting <xref:System.Numerics.BigInteger> value is negative.</span></span> <span data-ttu-id="90062-186">Selon la source du tableau d’octets, cela peut entraîner une valeur positive pour être interprété à tort comme une valeur négative.</span><span class="sxs-lookup"><span data-stu-id="90062-186">Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value.</span></span> <span data-ttu-id="90062-187">Tableaux d’octets sont généralement générés comme suit :</span><span class="sxs-lookup"><span data-stu-id="90062-187">Byte arrays are typically generated in the following ways:</span></span>  
  
-   <span data-ttu-id="90062-188">En appelant le <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-188">By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90062-189">Étant donné que cette méthode retourne un tableau d’octets avec le bit d’ordre le plus élevé de l’octet de poids le plus élevé dans le tableau défini à zéro pour les valeurs positives, il n’existe aucun risque d’une mauvaise interprétation d’une valeur positive comme négative.</span><span class="sxs-lookup"><span data-stu-id="90062-189">Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative.</span></span> <span data-ttu-id="90062-190">Non modifié de tableaux d’octets créés par la <xref:System.Numerics.BigInteger.ToByteArray%2A> méthode toujours un aller-retour lorsqu’ils sont passés à la <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-190">Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
-   <span data-ttu-id="90062-191">En appelant le <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> (méthode) et en lui passant un entier signé en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="90062-191">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it a signed integer as a parameter.</span></span> <span data-ttu-id="90062-192">Étant donné que les entiers signés gèrent la représentation « signe et magnitude » et représentation de complément à deux, il n’existe aucun risque d’une mauvaise interprétation d’une valeur positive comme négative.</span><span class="sxs-lookup"><span data-stu-id="90062-192">Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.</span></span>  
  
-   <span data-ttu-id="90062-193">En appelant le <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> (méthode) et en lui passant un entier non signé en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="90062-193">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it an unsigned integer as a parameter.</span></span> <span data-ttu-id="90062-194">Étant donné que les entiers non signés sont représentés par leur ordre de grandeur uniquement, les valeurs positives peuvent être mal interprétés comme des valeurs négatives.</span><span class="sxs-lookup"><span data-stu-id="90062-194">Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values.</span></span> <span data-ttu-id="90062-195">Pour empêcher cette interprétation erronée, vous pouvez ajouter une valeur de zéro octet à la fin du tableau.</span><span class="sxs-lookup"><span data-stu-id="90062-195">To prevent this misinterpretation, you can add a zero-byte value to the end of the array.</span></span> <span data-ttu-id="90062-196">L’exemple dans la section suivante fournit une illustration.</span><span class="sxs-lookup"><span data-stu-id="90062-196">The example in the next section provides an illustration.</span></span>  
  
-   <span data-ttu-id="90062-197">En créant un tableau d’octets soit statique ou dynamique, sans nécessairement appel à l’une des méthodes précédentes, ou en modifiant un tableau d’octets.</span><span class="sxs-lookup"><span data-stu-id="90062-197">By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array.</span></span> <span data-ttu-id="90062-198">Pour empêcher des valeurs positives d’être interprétées comme des valeurs négatives, vous pouvez ajouter une valeur de zéro octet à la fin du tableau.</span><span class="sxs-lookup"><span data-stu-id="90062-198">To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.</span></span>  
  
 <span data-ttu-id="90062-199">Si `value` est vide <xref:System.Byte> tableau, la nouvelle <xref:System.Numerics.BigInteger> objet est initialisé à une valeur de <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-199">If `value` is an empty <xref:System.Byte> array, the new <xref:System.Numerics.BigInteger> object is initialized to a value of <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90062-200">Si `value` est `null`, le constructeur lève une <xref:System.ArgumentNullException>.</span><span class="sxs-lookup"><span data-stu-id="90062-200">If `value` is `null`, the constructor throws an <xref:System.ArgumentNullException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-201">L’exemple suivant instancie un <xref:System.Numerics.BigInteger> objet à partir d’un tableau d’octets de 5 éléments dont la valeur est {5, 4, 3, 2, 1}.</span><span class="sxs-lookup"><span data-stu-id="90062-201">The following example instantiates a <xref:System.Numerics.BigInteger> object from a 5-element byte array whose value is {5, 4, 3, 2, 1}.</span></span> <span data-ttu-id="90062-202">Il affiche ensuite le <xref:System.Numerics.BigInteger> représentées sous forme de nombres décimaux et hexadécimaux, dans la console.</span><span class="sxs-lookup"><span data-stu-id="90062-202">It then displays the <xref:System.Numerics.BigInteger> value, represented as both decimal and hexadecimal numbers, to the console.</span></span> <span data-ttu-id="90062-203">Une comparaison du tableau d’entrée avec la sortie de texte indique clairement la raison pour laquelle cette surcharge de la <xref:System.Numerics.BigInteger> constructeur de classe crée un <xref:System.Numerics.BigInteger> objet dont la valeur est 4328719365 (ou 0 x 102030405).</span><span class="sxs-lookup"><span data-stu-id="90062-203">A comparison of the input array with the text output makes it clear why this overload of the <xref:System.Numerics.BigInteger> class constructor creates a <xref:System.Numerics.BigInteger> object whose value is 4328719365 (or 0x102030405).</span></span> <span data-ttu-id="90062-204">Le premier élément du tableau d’octets, dont la valeur est 5, définit la valeur de l’octet de poids le plus bas de la <xref:System.Numerics.BigInteger> objet, qui est 0 x 05.</span><span class="sxs-lookup"><span data-stu-id="90062-204">The first element of the byte array, whose value is 5, defines the value of the lowest-order byte of the <xref:System.Numerics.BigInteger> object, which is 0x05.</span></span> <span data-ttu-id="90062-205">Le deuxième élément du tableau d’octets, dont la valeur est 4, définit la valeur du deuxième octet de la <xref:System.Numerics.BigInteger> objet, qui est 0 x 04 et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="90062-205">The second element of the byte array, whose value is 4, defines the value of the second byte of the <xref:System.Numerics.BigInteger> object, which is 0x04, and so on.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#1)]  
  
 <span data-ttu-id="90062-206">L’exemple suivant instancie un nombre positif et négatif <xref:System.Numerics.BigInteger> valeur, et les transmet à la <xref:System.Numerics.BigInteger.ToByteArray%2A> (méthode), puis restaure la version d’origine <xref:System.Numerics.BigInteger> valeurs du tableau d’octets résultant.</span><span class="sxs-lookup"><span data-stu-id="90062-206">The following example instantiates a positive and a negative <xref:System.Numerics.BigInteger> value, passes them to the <xref:System.Numerics.BigInteger.ToByteArray%2A> method, and then restores the original <xref:System.Numerics.BigInteger> values from the resulting byte array.</span></span> <span data-ttu-id="90062-207">Notez que les deux valeurs sont représentées par des tableaux d’octets identiques.</span><span class="sxs-lookup"><span data-stu-id="90062-207">Note that the two values are represented by identical byte arrays.</span></span> <span data-ttu-id="90062-208">La seule différence entre eux est dans le bit le plus significatif du dernier élément du tableau d’octets.</span><span class="sxs-lookup"><span data-stu-id="90062-208">The only difference between them is in the most significant bit of the last element in the byte array.</span></span> <span data-ttu-id="90062-209">Ce bit est défini (la valeur de l’octet est 0xFF) si le tableau est créé à partir d’une valeur négative <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-209">This bit is set (the value of the byte is 0xFF) if the array is created from a negative <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="90062-210">Le bit n’est pas défini (la valeur de l’octet est zéro), si le tableau est créé à partir d’un nombre positif <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-210">The bit is not set (the value of the byte is zero), if the array is created from a positive <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#2)]  
  
 <span data-ttu-id="90062-211">L’exemple suivant illustre comment vous assurer qu’une valeur positive n'est pas instanciée incorrectement comme une valeur négative en ajoutant un octet dont la valeur est égale à zéro à la fin du tableau.</span><span class="sxs-lookup"><span data-stu-id="90062-211">The following example illustrates how to make sure that a positive value is not incorrectly instantiated as a negative value by adding a byte whose value is zero to the end of the array.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90062-212"><paramref name="value" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="90062-212"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.ToByteArray" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::Decimal value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-213">Nombre décimal.</span><span class="sxs-lookup"><span data-stu-id="90062-213">A decimal number.</span></span></param>
        <summary><span data-ttu-id="90062-214">Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="90062-214">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a <see cref="T:System.Decimal" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-215">Le résultat de l’appel de ce constructeur est identique à l’assignation explicite un <xref:System.Decimal> valeur un <xref:System.Numerics.BigInteger> variable.</span><span class="sxs-lookup"><span data-stu-id="90062-215">The result of calling this constructor is identical to explicitly assigning a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger> variable.</span></span>  
  
 <span data-ttu-id="90062-216">Appel de ce constructeur peut entraîner une perte de données ; toute partie fractionnaire de `value` est tronquée lors de l’instanciation d’un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-216">Calling this constructor can cause data loss; any fractional part of `value` is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-217">L’exemple suivant illustre l’utilisation de la <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructeur pour instancier un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-217">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="90062-218">Il définit un tableau de <xref:System.Decimal> de valeurs et transmet ensuite chaque valeur à la <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-218">It defines an array of <xref:System.Decimal> values, and then passes each value to the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor.</span></span> <span data-ttu-id="90062-219">Notez que la <xref:System.Decimal> valeur est tronquée et non arrondie lorsqu’elle est assignée à la <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-219">Note that the <xref:System.Decimal> value is truncated instead of rounded when it is assigned to the <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(double value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-220">Valeur à virgule flottante double précision.</span><span class="sxs-lookup"><span data-stu-id="90062-220">A double-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="90062-221">Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur à virgule flottante double précision.</span><span class="sxs-lookup"><span data-stu-id="90062-221">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a double-precision floating-point value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-222">Toute partie fractionnaire de la `value` paramètre est tronqué lors de l’instanciation d’un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-222">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="90062-223">En raison du manque de précision de la <xref:System.Double> type de données, appel de ce constructeur peut entraîner une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-223">Because of the lack of precision of the <xref:System.Double> data type, calling this constructor can cause data loss.</span></span>  
  
 <span data-ttu-id="90062-224">Le <xref:System.Numerics.BigInteger> valeur qui résulte de l’appel de ce constructeur est identique à la valeur qui résulte de l’assignation explicite un <xref:System.Double> la valeur en un <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="90062-224">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Double> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-225">L’exemple suivant illustre l’utilisation de la <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> constructeur pour instancier un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-225">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="90062-226">Il illustre également la perte de précision peut se produire lorsque vous utilisez la <xref:System.Double> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-226">It also illustrates the loss of precision that may occur when you use the <xref:System.Double> data type.</span></span> <span data-ttu-id="90062-227">A <xref:System.Double> est affectée une valeur élevée, qui est ensuite assignée à un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-227">A <xref:System.Double> is assigned a large value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="90062-228">Comme le montre la sortie, cette assignation implique une perte de précision.</span><span class="sxs-lookup"><span data-stu-id="90062-228">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="90062-229">Les deux valeurs sont ensuite incrémentés d’un.</span><span class="sxs-lookup"><span data-stu-id="90062-229">Both values are then incremented by one.</span></span> <span data-ttu-id="90062-230">La sortie montre que le <xref:System.Numerics.BigInteger> objet reflète la valeur modifiée, tandis que le <xref:System.Double> n’est pas le cas de l’objet.</span><span class="sxs-lookup"><span data-stu-id="90062-230">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Double> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#5)]
 [!code-vb[System.Numerics.BigInteger.ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-231">La valeur de <paramref name="value" /> est <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="90062-231">The value of <paramref name="value" /> is <see cref="F:System.Double.NaN" />.</span></span>  
  
 <span data-ttu-id="90062-232">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-232">-or-</span></span>  
  
 <span data-ttu-id="90062-233">La valeur de <paramref name="value" /> est <see cref="F:System.Double.NegativeInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="90062-233">The value of <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</span></span>  
  
 <span data-ttu-id="90062-234">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-234">-or-</span></span>  
  
 <span data-ttu-id="90062-235">La valeur de <paramref name="value" /> est <see cref="F:System.Double.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="90062-235">The value of <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(int value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-236">Entier signé 32 bits.</span><span class="sxs-lookup"><span data-stu-id="90062-236">A 32-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="90062-237">Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur d'entier 32 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-237">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 32-bit signed integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-238">Il n’existe aucune perte de précision lorsque vous instanciez un <xref:System.Numerics.BigInteger> objet à l’aide de ce constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-238">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="90062-239">Le <xref:System.Numerics.BigInteger> valeur qui résulte de l’appel de ce constructeur est identique à la valeur qui résulte de l’assignation d’un <xref:System.Int32> la valeur en un <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="90062-239">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
 <span data-ttu-id="90062-240">Le <xref:System.Numerics.BigInteger> structure n’inclut pas de constructeurs avec un paramètre de type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, ou <xref:System.UInt16>.</span><span class="sxs-lookup"><span data-stu-id="90062-240">The <xref:System.Numerics.BigInteger> structure does not include constructors with a parameter of type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, or <xref:System.UInt16>.</span></span> <span data-ttu-id="90062-241">Toutefois, le <xref:System.Int32> type prend en charge la conversion implicite d’entiers signés et non signés de 8 et 16 bits en entiers 32 bits signés.</span><span class="sxs-lookup"><span data-stu-id="90062-241">However, the <xref:System.Int32> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers.</span></span> <span data-ttu-id="90062-242">Par conséquent, ce constructeur est appelé si `value` est l’un de ces quatre types intégraux.</span><span class="sxs-lookup"><span data-stu-id="90062-242">As a result, this constructor is called if `value` is any one of these four integral types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-243">L’exemple suivant appelle la <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> constructeur pour instancier <xref:System.Numerics.BigInteger> valeurs à partir d’un tableau d’entiers 32 bits.</span><span class="sxs-lookup"><span data-stu-id="90062-243">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 32-bit integers.</span></span> <span data-ttu-id="90062-244">Il utilise également la conversion implicite pour assigner chaque valeur d’entier 32 bits à un <xref:System.Numerics.BigInteger> variable.</span><span class="sxs-lookup"><span data-stu-id="90062-244">It also uses implicit conversion to assign each 32-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="90062-245">Il compare alors les deux valeurs pour déterminer que résultant <xref:System.Numerics.BigInteger> valeurs sont identiques.</span><span class="sxs-lookup"><span data-stu-id="90062-245">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.ctors#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(long value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-246">Entier signé 64 bits.</span><span class="sxs-lookup"><span data-stu-id="90062-246">A 64-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="90062-247">Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l’aide d’une valeur d’entier 64 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-247">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 64-bit signed integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-248">Il n’existe aucune perte de précision lorsque vous instanciez un <xref:System.Numerics.BigInteger> objet à l’aide de ce constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-248">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="90062-249">Le <xref:System.Numerics.BigInteger> valeur qui résulte de l’appel de ce constructeur est identique à la valeur qui résulte de l’assignation d’un <xref:System.Int64> la valeur en un <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="90062-249">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-250">L’exemple suivant appelle la <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> constructeur pour instancier <xref:System.Numerics.BigInteger> valeurs à partir d’un tableau d’entiers 64 bits.</span><span class="sxs-lookup"><span data-stu-id="90062-250">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 64-bit integers.</span></span> <span data-ttu-id="90062-251">Il utilise également la conversion implicite pour assigner chaque valeur d’entier 64 bits à un <xref:System.Numerics.BigInteger> variable.</span><span class="sxs-lookup"><span data-stu-id="90062-251">It also uses implicit conversion to assign each 64-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="90062-252">Il compare alors les deux valeurs pour déterminer que résultant <xref:System.Numerics.BigInteger> valeurs sont identiques.</span><span class="sxs-lookup"><span data-stu-id="90062-252">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#7)]
 [!code-vb[System.Numerics.BigInteger.ctors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(float value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-253">Valeur à virgule flottante simple précision.</span><span class="sxs-lookup"><span data-stu-id="90062-253">A single-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="90062-254">Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur à virgule flottante simple précision.</span><span class="sxs-lookup"><span data-stu-id="90062-254">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a single-precision floating-point value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-255">Toute partie fractionnaire de la `value` paramètre est tronqué lors de l’instanciation d’un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-255">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="90062-256">En raison du manque de précision de la <xref:System.Single> type de données, appel de ce constructeur peut entraîner une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-256">Because of the lack of precision of the <xref:System.Single> data type, calling this constructor can result in data loss.</span></span>  
  
 <span data-ttu-id="90062-257">Le <xref:System.Numerics.BigInteger> valeur qui résulte de l’appel de ce constructeur est identique à la valeur qui résulte de l’assignation explicite un <xref:System.Single> la valeur en un <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="90062-257">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Single> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-258">L’exemple suivant illustre l’utilisation de la <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> constructeur pour instancier un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-258">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="90062-259">Il illustre également la perte de précision peut se produire lorsque vous utilisez la <xref:System.Single> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-259">It also illustrates the loss of precision that may occur when you use the <xref:System.Single> data type.</span></span> <span data-ttu-id="90062-260">A <xref:System.Single> est affectée à une valeur négative élevée, qui est ensuite assignée à un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-260">A <xref:System.Single> is assigned a large negative value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="90062-261">Comme le montre la sortie, cette assignation implique une perte de précision.</span><span class="sxs-lookup"><span data-stu-id="90062-261">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="90062-262">Les deux valeurs sont ensuite incrémentés d’un.</span><span class="sxs-lookup"><span data-stu-id="90062-262">Both values are then incremented by one.</span></span> <span data-ttu-id="90062-263">La sortie montre que le <xref:System.Numerics.BigInteger> objet reflète la valeur modifiée, tandis que le <xref:System.Single> n’est pas le cas de l’objet.</span><span class="sxs-lookup"><span data-stu-id="90062-263">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Single> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#8)]
 [!code-vb[System.Numerics.BigInteger.ctors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-264">La valeur de <paramref name="value" /> est <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="90062-264">The value of <paramref name="value" /> is <see cref="F:System.Single.NaN" />.</span></span>  
  
 <span data-ttu-id="90062-265">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-265">-or-</span></span>  
  
 <span data-ttu-id="90062-266">La valeur de <paramref name="value" /> est <see cref="F:System.Single.NegativeInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="90062-266">The value of <paramref name="value" /> is <see cref="F:System.Single.NegativeInfinity" />.</span></span>  
  
 <span data-ttu-id="90062-267">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-267">-or-</span></span>  
  
 <span data-ttu-id="90062-268">La valeur de <paramref name="value" /> est <see cref="F:System.Single.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="90062-268">The value of <paramref name="value" /> is <see cref="F:System.Single.PositiveInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt32 value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-269">Valeur d'entier 32 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-269">An unsigned 32-bit integer value.</span></span></param>
        <summary><span data-ttu-id="90062-270">Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur entière 32 bits non signée.</span><span class="sxs-lookup"><span data-stu-id="90062-270">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using an unsigned 32-bit integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-271">Il n’existe aucune perte de précision lorsque vous instanciez un <xref:System.Numerics.BigInteger> à l’aide de ce constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-271">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="90062-272">Le <xref:System.Numerics.BigInteger> valeur qui résulte de l’appel de ce constructeur est identique à la valeur qui résulte de l’assignation d’un <xref:System.UInt32> la valeur en un <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="90062-272">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-273">L’exemple suivant utilise le <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> constructeur et une instruction d’assignation pour initialiser <xref:System.Numerics.BigInteger> valeurs à partir d’un tableau d’entiers 32 bits non signés.</span><span class="sxs-lookup"><span data-stu-id="90062-273">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> constructor and an assignment statement to initialize <xref:System.Numerics.BigInteger> values from an array of unsigned 32-bit integers.</span></span> <span data-ttu-id="90062-274">Il compare alors les deux valeurs de démontrer que les deux méthodes d’initialisation un <xref:System.Numerics.BigInteger> valeur produisent des résultats identiques.</span><span class="sxs-lookup"><span data-stu-id="90062-274">It then compares the two values to demonstrate that the two methods of initializing a <xref:System.Numerics.BigInteger> value produce identical results.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#9)]
 [!code-vb[System.Numerics.BigInteger.ctors#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#9)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt64 value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-275">Entier 64 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-275">An unsigned 64-bit integer.</span></span></param>
        <summary><span data-ttu-id="90062-276">Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur entière 64 bits non signée.</span><span class="sxs-lookup"><span data-stu-id="90062-276">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure with an unsigned 64-bit integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-277">Il n’existe aucune perte de précision lorsque vous instanciez un <xref:System.Numerics.BigInteger> à l’aide de ce constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-277">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="90062-278">Le <xref:System.Numerics.BigInteger> valeur qui résulte de l’appel de ce constructeur est identique à la valeur qui résulte de l’assignation d’un <xref:System.UInt64> la valeur en un <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="90062-278">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-279">L’exemple suivant utilise le <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> constructeur pour instancier un <xref:System.Numerics.BigInteger> objet dont la valeur est égale à <xref:System.UInt64.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="90062-279">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object whose value is equal to <xref:System.UInt64.MaxValue>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#10)]
 [!code-vb[System.Numerics.BigInteger.ctors#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ReadOnlySpan&lt;byte&gt; value, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ReadOnlySpan(Of Byte), Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="isUnsigned" Type="System.Boolean" />
        <Parameter Name="isBigEndian" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Abs (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Abs(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Abs(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-280">Nombre.</span><span class="sxs-lookup"><span data-stu-id="90062-280">A number.</span></span></param>
        <summary><span data-ttu-id="90062-281">Obtient la valeur absolue d'un objet <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-281">Gets the absolute value of a <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <returns><span data-ttu-id="90062-282">Valeur absolue de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-282">The absolute value of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-283">La valeur absolue d’un nombre est ce nombre sans son signe, comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-283">The absolute value of a number is that number without its sign, as shown in the following table.</span></span>  
  
|<span data-ttu-id="90062-284">Paramètre `value`</span><span class="sxs-lookup"><span data-stu-id="90062-284">`value` parameter</span></span>|<span data-ttu-id="90062-285">Valeur de retour</span><span class="sxs-lookup"><span data-stu-id="90062-285">Return value</span></span>|  
|-----------------------|------------------|  
|<span data-ttu-id="90062-286">`value` >= 0</span><span class="sxs-lookup"><span data-stu-id="90062-286">`value` >= 0</span></span>|`value`|  
|<span data-ttu-id="90062-287">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="90062-287">`value` < 0</span></span>|<span data-ttu-id="90062-288">`value` \* -1</span><span class="sxs-lookup"><span data-stu-id="90062-288">`value` \* -1</span></span>|  
  
 <span data-ttu-id="90062-289">Le <xref:System.Numerics.BigInteger.Abs%2A> méthode est équivalente à la <xref:System.Math.Abs%2A?displayProperty=nameWithType> méthode pour les types numériques primitifs.</span><span class="sxs-lookup"><span data-stu-id="90062-289">The <xref:System.Numerics.BigInteger.Abs%2A> method is equivalent to the <xref:System.Math.Abs%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-290">L’exemple suivant utilise le <xref:System.Numerics.BigInteger.Abs%2A> méthode pour convertir un <xref:System.Numerics.BigInteger> valeur à partir de la représentation de complément à deux en représentation « signe et magnitude » avant sérialisant dans un fichier.</span><span class="sxs-lookup"><span data-stu-id="90062-290">The following example uses the <xref:System.Numerics.BigInteger.Abs%2A> method to convert a <xref:System.Numerics.BigInteger> value from two's complement representation to sign-and-magnitude representation before serializing it to a file.</span></span> <span data-ttu-id="90062-291">Les données dans le fichier sont ensuite désérialisées et affectées à la nouvelle <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-291">Data in the file is then deserialized and assigned to a new <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Abs(System.SByte)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Add (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Add(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Add(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-292">Première valeur à ajouter.</span><span class="sxs-lookup"><span data-stu-id="90062-292">The first value to add.</span></span></param>
        <param name="right"><span data-ttu-id="90062-293">Seconde valeur à ajouter.</span><span class="sxs-lookup"><span data-stu-id="90062-293">The second value to add.</span></span></param>
        <summary><span data-ttu-id="90062-294">Ajoute deux valeurs <see cref="T:System.Numerics.BigInteger" /> et retourne le résultat.</span><span class="sxs-lookup"><span data-stu-id="90062-294">Adds two <see cref="T:System.Numerics.BigInteger" /> values and returns the result.</span></span></summary>
        <returns><span data-ttu-id="90062-295">Somme de <paramref name="left" /> et <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="90062-295">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-296">Les langages qui ne prennent pas en charge la surcharge d’opérateur ou les opérateurs personnalisés peuvent utiliser la <xref:System.Numerics.BigInteger.Add%2A> méthode à l’aide de l’addition <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-296">Languages that do not support operator overloading or custom operators can use the <xref:System.Numerics.BigInteger.Add%2A> method to perform addition using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="90062-297">Le <xref:System.Numerics.BigInteger.Add%2A> méthode est un substitut utile pour l’opérateur d’addition lors de l’instanciation une <xref:System.Numerics.BigInteger> variable en lui assignant une somme qui résulte d’une addition, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-297">The <xref:System.Numerics.BigInteger.Add%2A> method is a useful substitute for the addition operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a sum that results from addition, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (left As BigInteger, right As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-298">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-298">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-299">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-299">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-300">Compare deux valeurs <see cref="T:System.Numerics.BigInteger" /> et retourne un entier qui indique si la première valeur est inférieure, égale ou supérieure à la seconde valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-300">Compares two <see cref="T:System.Numerics.BigInteger" /> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</span></span></summary>
        <returns><span data-ttu-id="90062-301">Entier signé qui indique les valeurs relatives de <paramref name="left" /> et <paramref name="right" />, comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-301">A signed integer that indicates the relative values of <paramref name="left" /> and <paramref name="right" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="90062-302"><list type="table"><listheader><term> Valeur</span><span class="sxs-lookup"><span data-stu-id="90062-302"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="90062-303"></term><description> Condition</span><span class="sxs-lookup"><span data-stu-id="90062-303"></term><description> Condition</span></span>  
  
 <span data-ttu-id="90062-304"></description></listheader><item><term> Inférieur à zéro</span><span class="sxs-lookup"><span data-stu-id="90062-304"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="90062-305"></term><description><paramref name="left" /> est inférieur à <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="90062-305"></term><description><paramref name="left" /> is less than <paramref name="right" />.</span></span>  
  
 <span data-ttu-id="90062-306"></description></item><item><term> Zéro</span><span class="sxs-lookup"><span data-stu-id="90062-306"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="90062-307"></term><description><paramref name="left" /> est égal à <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="90062-307"></term><description><paramref name="left" /> equals <paramref name="right" />.</span></span>  
  
 <span data-ttu-id="90062-308"></description></item><item><term> Supérieur à zéro</span><span class="sxs-lookup"><span data-stu-id="90062-308"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="90062-309"></term><description><paramref name="left" /> est supérieur à <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="90062-309"></term><description><paramref name="left" /> is greater than <paramref name="right" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-310">Bien que le <xref:System.Numerics.BigInteger> type ait aucune plage fixe, les comparaisons de <xref:System.Numerics.BigInteger> valeurs ne sont pas caractérisées par le manque de précision qui caractérise la comparaison des nombres à virgule flottante.</span><span class="sxs-lookup"><span data-stu-id="90062-310">Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers.</span></span> <span data-ttu-id="90062-311">L’exemple suivant compare deux <xref:System.Numerics.BigInteger> valeurs qui diffèrent par un et que chacun ont 1 896 chiffres.</span><span class="sxs-lookup"><span data-stu-id="90062-311">The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits.</span></span> <span data-ttu-id="90062-312">Le <xref:System.Numerics.BigInteger.Compare%2A> méthode signale correctement que les deux valeurs ne sont pas égaux.</span><span class="sxs-lookup"><span data-stu-id="90062-312">The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.CompareTo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-313">Compare la valeur de cette instance à une autre valeur et retourne un entier qui indique si la valeur de l'instance est inférieure, égale ou supérieure à l'autre valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-313">Compares the value of this instance with another value and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the other value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(long other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="90062-314">Entier 64 bits signé à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-314">The signed 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="90062-315">Compare cette instance à un entier 64 bits signé et retourne un entier qui indique si la valeur de cette instance est inférieure, égale ou supérieure à la valeur de l'entier 64 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-315">Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="90062-316">Valeur entière signée qui indique la relation de cette instance par rapport à <paramref name="other" />, comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-316">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="90062-317"><list type="table"><listheader><term> Valeur de retour</span><span class="sxs-lookup"><span data-stu-id="90062-317"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="90062-318"></term><description> Description</span><span class="sxs-lookup"><span data-stu-id="90062-318"></term><description> Description</span></span>  
  
 <span data-ttu-id="90062-319"></description></listheader><item><term> Inférieur à zéro</span><span class="sxs-lookup"><span data-stu-id="90062-319"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="90062-320"></term><description> L’instance actuelle est inférieure à <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="90062-320"></term><description> The current instance is less than <paramref name="other" />.</span></span>  
  
 <span data-ttu-id="90062-321"></description></item><item><term> Zéro</span><span class="sxs-lookup"><span data-stu-id="90062-321"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="90062-322"></term><description> L’instance actuelle est égale à <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="90062-322"></term><description> The current instance equals <paramref name="other" />.</span></span>  
  
 <span data-ttu-id="90062-323"></description></item><item><term> Supérieur à zéro</span><span class="sxs-lookup"><span data-stu-id="90062-323"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="90062-324"></term><description> L’instance actuelle est supérieure à <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="90062-324"></term><description> The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-325">Si `other` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque le <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="90062-325">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-326">L’exemple suivant illustre le résultat de l’appel de la <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> méthode avec des valeurs intégrales.</span><span class="sxs-lookup"><span data-stu-id="90062-326">The following example illustrates the result of calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method with integral values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#3)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Numerics::BigInteger other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="90062-327">Objet à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-327">The object to compare.</span></span></param>
        <summary><span data-ttu-id="90062-328">Compare cette instance à un second <see cref="T:System.Numerics.BigInteger" /> et retourne un entier qui indique si la valeur de l'instance est inférieure, égale ou supérieure à la valeur de l'objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="90062-328">Compares this instance to a second <see cref="T:System.Numerics.BigInteger" /> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="90062-329">Valeur entière signée qui indique la relation de cette instance par rapport à <paramref name="other" />, comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-329">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="90062-330"><list type="table"><listheader><term> Valeur de retour</span><span class="sxs-lookup"><span data-stu-id="90062-330"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="90062-331"></term><description> Description</span><span class="sxs-lookup"><span data-stu-id="90062-331"></term><description> Description</span></span>  
  
 <span data-ttu-id="90062-332"></description></listheader><item><term> Inférieur à zéro</span><span class="sxs-lookup"><span data-stu-id="90062-332"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="90062-333"></term><description> L’instance actuelle est inférieure à <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="90062-333"></term><description> The current instance is less than <paramref name="other" />.</span></span>  
  
 <span data-ttu-id="90062-334"></description></item><item><term> Zéro</span><span class="sxs-lookup"><span data-stu-id="90062-334"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="90062-335"></term><description> L’instance actuelle est égale à <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="90062-335"></term><description> The current instance equals <paramref name="other" />.</span></span>  
  
 <span data-ttu-id="90062-336"></description></item><item><term> Supérieur à zéro</span><span class="sxs-lookup"><span data-stu-id="90062-336"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="90062-337"></term><description> L’instance actuelle est supérieure à <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="90062-337"></term><description> The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-338">Cette surcharge de la <xref:System.Numerics.BigInteger.CompareTo%2A> méthode implémente la <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-338">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90062-339">Il est utilisé par les objets de collection générique pour classer les éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="90062-339">It is used by generic collection objects to order the items in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-340">L’exemple suivant illustre l’utilisation de la <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> méthode pour trier une liste de `StarInfo` objets.</span><span class="sxs-lookup"><span data-stu-id="90062-340">The following example illustrates the use of the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> method to order a list of `StarInfo` objects.</span></span> <span data-ttu-id="90062-341">Chaque `StarInfo` objet fournit des informations sur le nom d’une étoile et sa distance à partir de la terre en miles.</span><span class="sxs-lookup"><span data-stu-id="90062-341">Each `StarInfo` object provides information about a star's name and its distance from the Earth in miles.</span></span> <span data-ttu-id="90062-342">`StarInfo` implémente le <xref:System.IComparable%601> de l’interface, qui permet aux `StarInfo` les objets à trier par les classes de collection génériques.</span><span class="sxs-lookup"><span data-stu-id="90062-342">`StarInfo` implements the <xref:System.IComparable%601> interface, which enables `StarInfo` objects to be sorted by generic collection classes.</span></span> <span data-ttu-id="90062-343">Son <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> implémentation encapsule simplement un appel à <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>.</span><span class="sxs-lookup"><span data-stu-id="90062-343">Its <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> implementation just wraps a call to <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#1)]  
  
 <span data-ttu-id="90062-344">Le code suivant instancie ensuite quatre `StarInfo` des objets et les stocke dans un type générique <xref:System.Collections.Generic.List%601> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-344">The following code then instantiates four `StarInfo` objects and stores them in a generic <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="90062-345">Après le <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> méthode est appelée, `StarInfo` les objets sont affichés dans l’ordre de leur distance par rapport à la terre.</span><span class="sxs-lookup"><span data-stu-id="90062-345">After the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> method is called, `StarInfo` objects are displayed in order of their distance from the Earth.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="90062-346">Objet à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-346">The object to compare.</span></span></param>
        <summary><span data-ttu-id="90062-347">Compare cette instance à un objet spécifié et retourne un entier qui indique si la valeur de cette instance est inférieure, égale ou supérieure à la valeur de l'objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="90062-347">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="90062-348">Entier signé qui indique la relation de l'instance actuelle par rapport au paramètre <paramref name="obj" />, comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-348">A signed integer that indicates the relationship of the current instance to the <paramref name="obj" /> parameter, as shown in the following table.</span></span>  
  
 <span data-ttu-id="90062-349"><list type="table"><listheader><term> Valeur de retour</span><span class="sxs-lookup"><span data-stu-id="90062-349"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="90062-350"></term><description> Description</span><span class="sxs-lookup"><span data-stu-id="90062-350"></term><description> Description</span></span>  
  
 <span data-ttu-id="90062-351"></description></listheader><item><term> Inférieur à zéro</span><span class="sxs-lookup"><span data-stu-id="90062-351"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="90062-352"></term><description> L’instance actuelle est inférieure à <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="90062-352"></term><description> The current instance is less than <paramref name="obj" />.</span></span>  
  
 <span data-ttu-id="90062-353"></description></item><item><term> Zéro</span><span class="sxs-lookup"><span data-stu-id="90062-353"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="90062-354"></term><description> L’instance actuelle est égale à <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="90062-354"></term><description> The current instance equals <paramref name="obj" />.</span></span>  
  
 <span data-ttu-id="90062-355"></description></item><item><term> Supérieur à zéro</span><span class="sxs-lookup"><span data-stu-id="90062-355"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="90062-356"></term><description>L’instance actuelle est supérieure à <paramref name="obj" /> ou le paramètre <paramref name="obj" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="90062-356"></term><description> The current instance is greater than <paramref name="obj" />, or the <paramref name="obj" /> parameter is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-357">Cette surcharge de la <xref:System.Numerics.BigInteger.CompareTo%2A> méthode implémente la <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-357">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90062-358">Il est utilisé par les objets de collection non générique pour classer les éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="90062-358">It is used by non-generic collection objects to order the items in the collection.</span></span>  
  
 <span data-ttu-id="90062-359">Le `obj` paramètre doit être une des valeurs suivantes :</span><span class="sxs-lookup"><span data-stu-id="90062-359">The `obj` parameter must be one of the following:</span></span>  
  
-   <span data-ttu-id="90062-360">Objet dont le type d’exécution est <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="90062-360">An object whose run-time type is <xref:System.Numerics.BigInteger>.</span></span>  
  
-   <span data-ttu-id="90062-361">Un <xref:System.Object> variable dont la valeur est `null`.</span><span class="sxs-lookup"><span data-stu-id="90062-361">An <xref:System.Object> variable whose value is `null`.</span></span> <span data-ttu-id="90062-362">Si la valeur de la `obj` paramètre est `null`, la méthode retourne 1, ce qui indique que l’instance actuelle est supérieure à `obj`.</span><span class="sxs-lookup"><span data-stu-id="90062-362">If the value of the `obj` parameter is `null`, the method returns 1, which indicates that that the current instance is greater than `obj`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-363">L’exemple suivant appelle la <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> méthode pour comparer un <xref:System.Numerics.BigInteger> valeur à chaque élément dans un tableau d’objets</span><span class="sxs-lookup"><span data-stu-id="90062-363">The following example calls the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method to compare a <xref:System.Numerics.BigInteger> value with each element in an object array</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90062-364"><paramref name="obj" /> n'est pas un <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-364"><paramref name="obj" /> is not a <see cref="T:System.Numerics.BigInteger" />.</span></span></exception>
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::UInt64 other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="90062-365">Entier 64 bits non signé à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-365">The unsigned 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="90062-366">Compare cette instance à un entier 64 bits non signé et retourne un entier qui indique si la valeur de cette instance est inférieure, égale ou supérieure à la valeur de l'entier 64 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-366">Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="90062-367">Entier signé qui indique la valeur relative de cette instance et de <paramref name="other" />, comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-367">A signed integer that indicates the relative value of this instance and <paramref name="other" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="90062-368"><list type="table"><listheader><term> Valeur de retour</span><span class="sxs-lookup"><span data-stu-id="90062-368"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="90062-369"></term><description> Description</span><span class="sxs-lookup"><span data-stu-id="90062-369"></term><description> Description</span></span>  
  
 <span data-ttu-id="90062-370"></description></listheader><item><term> Inférieur à zéro</span><span class="sxs-lookup"><span data-stu-id="90062-370"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="90062-371"></term><description> L’instance actuelle est inférieure à <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="90062-371"></term><description> The current instance is less than <paramref name="other" />.</span></span>  
  
 <span data-ttu-id="90062-372"></description></item><item><term> Zéro</span><span class="sxs-lookup"><span data-stu-id="90062-372"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="90062-373"></term><description> L’instance actuelle est égale à <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="90062-373"></term><description> The current instance equals <paramref name="other" />.</span></span>  
  
 <span data-ttu-id="90062-374"></description></item><item><term> Supérieur à zéro</span><span class="sxs-lookup"><span data-stu-id="90062-374"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="90062-375"></term><description> L’instance actuelle est supérieure à <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="90062-375"></term><description> The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Divide (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Divide(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Divide(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="90062-376">Valeur à diviser.</span><span class="sxs-lookup"><span data-stu-id="90062-376">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="90062-377">Valeur par laquelle diviser.</span><span class="sxs-lookup"><span data-stu-id="90062-377">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="90062-378">Divise une valeur <see cref="T:System.Numerics.BigInteger" /> par une autre et retourne le résultat.</span><span class="sxs-lookup"><span data-stu-id="90062-378">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="90062-379">Quotient de la division.</span><span class="sxs-lookup"><span data-stu-id="90062-379">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-380">Le <xref:System.Numerics.BigInteger.Divide%2A> méthode effectue une division d’entier ; le reste de la division est ignoré.</span><span class="sxs-lookup"><span data-stu-id="90062-380">The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded.</span></span> <span data-ttu-id="90062-381">Pour effectuer la division d’entier en conservant le reste, appelez le <xref:System.Numerics.BigInteger.DivRem%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-381">To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span> <span data-ttu-id="90062-382">Pour extraire uniquement le reste, appelez le <xref:System.Numerics.BigInteger.Remainder%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-382">To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="90062-383">Le <xref:System.Numerics.BigInteger.Divide%2A> méthode peut être utilisée par les langages qui ne prennent pas en charge la surcharge d’opérateur.</span><span class="sxs-lookup"><span data-stu-id="90062-383">The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading.</span></span> <span data-ttu-id="90062-384">Son comportement est identique à la division à l’aide de l’opérateur de division.</span><span class="sxs-lookup"><span data-stu-id="90062-384">Its behavior is identical to division using the division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-385">L’exemple suivant crée un tableau de <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-385">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-386">Il utilise alors chaque élément comme quotient dans une opération de division qui utilise le <xref:System.Numerics.BigInteger.Divide%2A> méthode, l’opérateur de division (/) et le <xref:System.Numerics.BigInteger.DivRem%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-386">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="90062-387"><paramref name="divisor" /> est égal à 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="90062-387"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger DivRem (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor, out System.Numerics.BigInteger remainder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger DivRem(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor, [out] valuetype System.Numerics.BigInteger&amp; remainder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (dividend As BigInteger, divisor As BigInteger, ByRef remainder As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger DivRem(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor, [Runtime::InteropServices::Out] System::Numerics::BigInteger % remainder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
        <Parameter Name="remainder" Type="System.Numerics.BigInteger&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="90062-388">Valeur à diviser.</span><span class="sxs-lookup"><span data-stu-id="90062-388">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="90062-389">Valeur par laquelle diviser.</span><span class="sxs-lookup"><span data-stu-id="90062-389">The value to divide by.</span></span></param>
        <param name="remainder"><span data-ttu-id="90062-390">Lorsque cette méthode est retournée, contient une valeur <see cref="T:System.Numerics.BigInteger" /> qui représente le modulo de la division.</span><span class="sxs-lookup"><span data-stu-id="90062-390">When this method returns, contains a <see cref="T:System.Numerics.BigInteger" /> value that represents the remainder from the division.</span></span> <span data-ttu-id="90062-391">Ce paramètre est passé sans être initialisé.</span><span class="sxs-lookup"><span data-stu-id="90062-391">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="90062-392">Divise une valeur <see cref="T:System.Numerics.BigInteger" /> par une autre, retourne le résultat, puis retourne le modulo dans un paramètre de sortie.</span><span class="sxs-lookup"><span data-stu-id="90062-392">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another, returns the result, and returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="90062-393">Quotient de la division.</span><span class="sxs-lookup"><span data-stu-id="90062-393">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-394">Cette méthode permet de conserver le quotient et le reste de la division d’entier.</span><span class="sxs-lookup"><span data-stu-id="90062-394">This method preserves both the quotient and the remainder that results from integer division.</span></span> <span data-ttu-id="90062-395">Si vous n’êtes pas intéressé par la suite, utilisez le <xref:System.Numerics.BigInteger.Divide%2A> méthode ou l’opérateur de division ; si vous êtes uniquement intéressé par la suite, utilisez le <xref:System.Numerics.BigInteger.Remainder%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-395">If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="90062-396">Le signe de retourné `remainder` valeur est identique à celui de le `dividend` paramètre.</span><span class="sxs-lookup"><span data-stu-id="90062-396">The sign of the returned `remainder` value is the same as the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="90062-397">Le comportement de la <xref:System.Numerics.BigInteger.DivRem%2A> méthode est identique à celui de la <xref:System.Math.DivRem%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-397">The behavior of the <xref:System.Numerics.BigInteger.DivRem%2A> method is identical to that of the <xref:System.Math.DivRem%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-398">L’exemple suivant crée un tableau de <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-398">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-399">Il utilise alors chaque élément comme quotient dans une opération de division qui utilise le <xref:System.Numerics.BigInteger.Divide%2A> méthode, l’opérateur de division (/) et le <xref:System.Numerics.BigInteger.DivRem%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-399">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="90062-400"><paramref name="divisor" /> est égal à 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="90062-400"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-401">Retourne une valeur qui indique si deux valeurs numériques sont égales.</span><span class="sxs-lookup"><span data-stu-id="90062-401">Returns a value that indicates whether two numeric values are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(long other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="90062-402">Valeur entière 64 bits signée à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-402">The signed 64-bit integer value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-403">Retourne une valeur qui indique si l'instance actuelle et un entier 64 bits signé ont la même valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-403">Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-404"><see langword="true" /> si l'entier 64 bits signé et l'instance actuelle ont la même valeur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-404"><see langword="true" /> if the signed 64-bit integer and the current instance have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-405">Si `other` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque la méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="90062-405">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the method is called.</span></span>  
  
 <span data-ttu-id="90062-406">Pour déterminer la relation entre les deux objets au lieu d’un simple test d’égalité, appelez le <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-406">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-407">L’exemple suivant instancie un <xref:System.Numerics.BigInteger> objet à partir de chaque type intégral sauf <xref:System.UInt64>.</span><span class="sxs-lookup"><span data-stu-id="90062-407">The following example instantiates a <xref:System.Numerics.BigInteger> object from each integral type except <xref:System.UInt64>.</span></span> <span data-ttu-id="90062-408">Il appelle ensuite la <xref:System.Numerics.BigInteger.Equals%28System.Int64%29> méthode pour comparer la <xref:System.Numerics.BigInteger> valeur avec la valeur entière d’origine qui a été passée à la <xref:System.Numerics.BigInteger> constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-408">It then calls the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29> method to compare the <xref:System.Numerics.BigInteger> value with the original integer value that was passed to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="90062-409">Comme le montre la sortie, les valeurs sont égales dans chaque cas.</span><span class="sxs-lookup"><span data-stu-id="90062-409">As the output shows, the values are equal in each case.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals.cpp#1)]
 [!code-csharp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Numerics::BigInteger other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="90062-410">Objet à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-410">The object to compare.</span></span></param>
        <summary><span data-ttu-id="90062-411">Retourne une valeur qui indique si l'instance actuelle et un objet <see cref="T:System.Numerics.BigInteger" /> spécifié ont la même valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-411">Returns a value that indicates whether the current instance and a specified <see cref="T:System.Numerics.BigInteger" /> object have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-412"><see langword="true" /> si cet objet <see cref="T:System.Numerics.BigInteger" /> et <paramref name="other" /> ont la même valeur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-412"><see langword="true" /> if this <see cref="T:System.Numerics.BigInteger" /> object and <paramref name="other" /> have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-413">Cette méthode implémente la <xref:System.IEquatable%601> de l’interface et effectue légèrement meilleures que <xref:System.Numerics.BigInteger.Equals%28System.Object%29> , car il n’a pas à convertir le `other` paramètre à un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-413">This method implements the <xref:System.IEquatable%601> interface and performs slightly better than <xref:System.Numerics.BigInteger.Equals%28System.Object%29> because it does not have to convert the `other` parameter to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="90062-414">Pour déterminer la relation entre les deux <xref:System.Numerics.BigInteger> des objets au lieu d’un simple test d’égalité, appelez le <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-414">To determine the relationship between the two <xref:System.Numerics.BigInteger> objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-415">L’exemple suivant compare la distance approximative d’étoiles attribué à plusieurs à partir de la terre à la distance Epsilon Indi terre pour déterminer s’ils sont égaux.</span><span class="sxs-lookup"><span data-stu-id="90062-415">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="90062-416">L’exemple utilise chaque surcharge de la <xref:System.Numerics.BigInteger.Equals%2A> méthode pour tester l’égalité.</span><span class="sxs-lookup"><span data-stu-id="90062-416">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="90062-417">Objet à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-417">The object to compare.</span></span></param>
        <summary><span data-ttu-id="90062-418">Retourne une valeur qui indique si l'instance actuelle et un objet spécifié ont la même valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-418">Returns a value that indicates whether the current instance and a specified object have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-419"><see langword="true" /> si l’argument <paramref name="obj" /> est un objet <see cref="T:System.Numerics.BigInteger" /> et si sa valeur est égale à la valeur de l’instance <see cref="T:System.Numerics.BigInteger" /> actuelle ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-419"><see langword="true" /> if the <paramref name="obj" /> argument is a <see cref="T:System.Numerics.BigInteger" /> object, and its value is equal to the value of the current <see cref="T:System.Numerics.BigInteger" /> instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-420">Si le `obj` argument n’est pas un <xref:System.Numerics.BigInteger> valeur, la méthode retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="90062-420">If the `obj` argument is not a <xref:System.Numerics.BigInteger> value, the method returns `false`.</span></span> <span data-ttu-id="90062-421">La méthode retourne `true` uniquement si `obj` est un <xref:System.Numerics.BigInteger> instance dont la valeur est égale à l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-421">The method returns `true` only if `obj` is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance.</span></span>  
  
 <span data-ttu-id="90062-422">Pour déterminer la relation entre les deux objets au lieu d’un simple test d’égalité, appelez le <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-422">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-423">L’exemple suivant définit parallèle <xref:System.Object> et <xref:System.Numerics.BigInteger> tableaux.</span><span class="sxs-lookup"><span data-stu-id="90062-423">The following example defines parallel <xref:System.Object> and <xref:System.Numerics.BigInteger> arrays.</span></span> <span data-ttu-id="90062-424">Chaque élément d’un tableau possède la même valeur que l’élément correspondant du deuxième tableau.</span><span class="sxs-lookup"><span data-stu-id="90062-424">Each element of one array has the same value as the corresponding element of the second array.</span></span> <span data-ttu-id="90062-425">Comme la sortie de l’exemple, l’instance dans le <xref:System.Numerics.BigInteger> tableau est considéré comme étant égal à l’instance dans le <xref:System.Object> tableau uniquement si ce dernier est un <xref:System.Numerics.BigInteger> et leurs valeurs sont égales.</span><span class="sxs-lookup"><span data-stu-id="90062-425">As the output from the example shows, the instance in the <xref:System.Numerics.BigInteger> array is considered to be equal to the instance in the <xref:System.Object> array only if the latter is a <xref:System.Numerics.BigInteger> and their values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/Equals_Obj1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/Equals_Obj1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::UInt64 other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="90062-426">Entier 64 bits non signé à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-426">The unsigned 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="90062-427">Retourne une valeur qui indique si l'instance actuelle et un entier 64 bits non signé ont la même valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-427">Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-428"><see langword="true" /> si l'instance actuelle et l'entier 64 bits non signé ont la même valeur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-428"><see langword="true" /> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-429">Pour déterminer la relation entre les deux objets au lieu d’un simple test d’égalité, appelez le <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-429">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-430">L’exemple suivant compare la distance approximative d’étoiles attribué à plusieurs à partir de la terre à la distance Epsilon Indi terre pour déterminer s’ils sont égaux.</span><span class="sxs-lookup"><span data-stu-id="90062-430">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="90062-431">L’exemple utilise chaque surcharge de la <xref:System.Numerics.BigInteger.Equals%2A> méthode pour tester l’égalité.</span><span class="sxs-lookup"><span data-stu-id="90062-431">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public int GetByteCount (bool isUnsigned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetByteCount(bool isUnsigned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteCount (Optional isUnsigned As Boolean = false) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isUnsigned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90062-432">Retourne le code de hachage pour l'objet <see cref="T:System.Numerics.BigInteger" /> actuel.</span><span class="sxs-lookup"><span data-stu-id="90062-432">Returns the hash code for the current <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <returns><span data-ttu-id="90062-433">Code de hachage d'un entier signé 32 bits.</span><span class="sxs-lookup"><span data-stu-id="90062-433">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreatestCommonDivisor">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger GreatestCommonDivisor (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger GreatestCommonDivisor(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreatestCommonDivisor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger GreatestCommonDivisor(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-434">Première valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-434">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="90062-435">Seconde valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-435">The second value.</span></span></param>
        <summary><span data-ttu-id="90062-436">Recherche le plus grand commun diviseur de deux valeurs <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-436">Finds the greatest common divisor of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="90062-437">Plus grand dénominateur commun de <paramref name="left" /> et <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="90062-437">The greatest common divisor of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-438">Le plus grand commun diviseur est le plus grand nombre dans lequel les deux <xref:System.Numerics.BigInteger> valeurs peuvent être divisés sans retourner de reste.</span><span class="sxs-lookup"><span data-stu-id="90062-438">The greatest common divisor is the largest number into which the two <xref:System.Numerics.BigInteger> values can be divided without returning a remainder.</span></span>  
  
 <span data-ttu-id="90062-439">Si le `left` et `right` paramètres sont des nombres de zéro, la méthode retourne toujours au moins une valeur de 1, car tous les nombres peuvent être divisés par 1.</span><span class="sxs-lookup"><span data-stu-id="90062-439">If the `left` and `right` parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1.</span></span> <span data-ttu-id="90062-440">Si un paramètre est égal à zéro, la méthode retourne la valeur absolue du paramètre non nulle.</span><span class="sxs-lookup"><span data-stu-id="90062-440">If either parameter is zero, the method returns the absolute value of the non-zero parameter.</span></span> <span data-ttu-id="90062-441">Si les deux valeurs sont nulles, la méthode retourne zéro.</span><span class="sxs-lookup"><span data-stu-id="90062-441">If both values are zero, the method returns zero.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90062-442">Calcul le plus grand commun diviseur de très grandes valeurs de `left` et `right` peut être une opération très longue.</span><span class="sxs-lookup"><span data-stu-id="90062-442">Computing the greatest common divisor of very large values of `left` and `right` can be a very time-consuming operation.</span></span>  
  
 <span data-ttu-id="90062-443">La valeur retournée par la <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> (méthode) est toujours positive, quelle que soit le signe de la `left` et `right` paramètres.</span><span class="sxs-lookup"><span data-stu-id="90062-443">The value returned by the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method is always positive regardless of the sign of the `left` and `right` parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-444">L’exemple suivant illustre un appel à la <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> (méthode) et la gestion des exceptions nécessaire pour fournir des informations utiles sur un <xref:System.ArgumentOutOfRangeException>.</span><span class="sxs-lookup"><span data-stu-id="90062-444">The following example illustrates a call to the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method and the exception handling necessary to provide useful information about an <xref:System.ArgumentOutOfRangeException>.</span></span> <span data-ttu-id="90062-445">Le résultat indique que le plus grand commun diviseur de ces deux nombres est 1.</span><span class="sxs-lookup"><span data-stu-id="90062-445">The result indicates that the greatest common divisor of these two numbers is 1.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#10)]
 [!code-vb[System.Numeric.BigInteger.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEven" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsEven" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEven As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEven { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90062-446">Indique si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> actif est un nombre pair.</span><span class="sxs-lookup"><span data-stu-id="90062-446">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is an even number.</span></span></summary>
        <value>
          <span data-ttu-id="90062-447"><see langword="true" /> si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> est un nombre pair ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-447"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is an even number; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-448">Cette propriété est une fonctionnalité pratique qui indique si un <xref:System.Numerics.BigInteger> valeur est divisible par deux.</span><span class="sxs-lookup"><span data-stu-id="90062-448">This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two.</span></span> <span data-ttu-id="90062-449">Elle est équivalente à l’expression suivante :</span><span class="sxs-lookup"><span data-stu-id="90062-449">It is equivalent to the following expression:</span></span>  
  
```csharp   
value % 2 == 0;  
```  
  
```vb  
value Mod 2 = 0  
```  
  
 <span data-ttu-id="90062-450">Si la valeur de la <xref:System.Numerics.BigInteger> objet est <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>, la propriété renvoie `true`.</span><span class="sxs-lookup"><span data-stu-id="90062-450">If the value of the current <xref:System.Numerics.BigInteger> object is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>, the property returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOne">
      <MemberSignature Language="C#" Value="public bool IsOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsOne" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOne As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOne { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90062-451">Indique si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> actif est <see cref="P:System.Numerics.BigInteger.One" />.</span><span class="sxs-lookup"><span data-stu-id="90062-451">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />.</span></span></summary>
        <value>
          <span data-ttu-id="90062-452"><see langword="true" /> si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> est <see cref="P:System.Numerics.BigInteger.One" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-452"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-453">Cette propriété offre de bien meilleures performances que d’autres, tels que `thisBigInteger.Equals(BigInteger.One)`.</span><span class="sxs-lookup"><span data-stu-id="90062-453">This property offers significantly better performance than other comparisons with one, such as `thisBigInteger.Equals(BigInteger.One)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
      </Docs>
    </Member>
    <Member MemberName="IsPowerOfTwo">
      <MemberSignature Language="C#" Value="public bool IsPowerOfTwo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerOfTwo" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerOfTwo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerOfTwo { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90062-454">Indique si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> actif est une puissance de deux.</span><span class="sxs-lookup"><span data-stu-id="90062-454">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is a power of two.</span></span></summary>
        <value>
          <span data-ttu-id="90062-455"><see langword="true" /> si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> est une puissance de deux ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-455"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is a power of two; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-456">Cette propriété détermine si un <xref:System.Numerics.BigInteger> valeur a un seul bit non nulle à définir.</span><span class="sxs-lookup"><span data-stu-id="90062-456">This property determines whether a <xref:System.Numerics.BigInteger> value has a single non-zero bit set.</span></span> <span data-ttu-id="90062-457">Cela signifie qu’il retourne `true` si la valeur de la <xref:System.Numerics.BigInteger> objet est 1 (autrement dit, 2<sup>0</sup>) ou toute autre puissance de deux.</span><span class="sxs-lookup"><span data-stu-id="90062-457">This means that it returns `true` if the value of the current <xref:System.Numerics.BigInteger> object is 1 (that is, 2<sup>0</sup>) or any greater power of two.</span></span> <span data-ttu-id="90062-458">Elle retourne `false` si la valeur de la <xref:System.Numerics.BigInteger> objet est 0.</span><span class="sxs-lookup"><span data-stu-id="90062-458">It returns `false` if the value of the current <xref:System.Numerics.BigInteger> object is 0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsZero">
      <MemberSignature Language="C#" Value="public bool IsZero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsZero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsZero" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsZero As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsZero { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90062-459">Indique si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> actif est <see cref="P:System.Numerics.BigInteger.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="90062-459">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />.</span></span></summary>
        <value>
          <span data-ttu-id="90062-460"><see langword="true" /> si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> est <see cref="P:System.Numerics.BigInteger.Zero" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-460"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-461">Cette propriété offre de bien meilleures performances que `BigInteger.Equals(BigInteger.Zero)`.</span><span class="sxs-lookup"><span data-stu-id="90062-461">This property offers significantly better performance than `BigInteger.Equals(BigInteger.Zero)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.Zero" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-462">Retourne le logarithme d'un nombre spécifié.</span><span class="sxs-lookup"><span data-stu-id="90062-462">Returns the logarithm of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-463">Nombre dont le logarithme doit être recherché.</span><span class="sxs-lookup"><span data-stu-id="90062-463">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="90062-464">Retourne le logarithme naturel (base <see langword="e" />) d'un nombre spécifié.</span><span class="sxs-lookup"><span data-stu-id="90062-464">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="90062-465">Logarithme népérien (de base <see langword="e" />) de <paramref name="value" />, comme indiqué dans le tableau de la section Notes.</span><span class="sxs-lookup"><span data-stu-id="90062-465">The natural (base <see langword="e" />) logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-466">Le `value` paramètre est spécifié comme un nombre de base 10.</span><span class="sxs-lookup"><span data-stu-id="90062-466">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="90062-467">Retourne la précision dépend de la valeur de cette méthode sur le signe de `value`, comme le montre le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-467">The precise return value of this method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="90062-468">Signer de `value` paramètre</span><span class="sxs-lookup"><span data-stu-id="90062-468">Sign of `value` parameter</span></span>|<span data-ttu-id="90062-469">Valeur de retour</span><span class="sxs-lookup"><span data-stu-id="90062-469">Return value</span></span>|  
|-------------------------------|------------------|  
|<span data-ttu-id="90062-470">Positif</span><span class="sxs-lookup"><span data-stu-id="90062-470">Positive</span></span>|<span data-ttu-id="90062-471">Le logarithme naturel de `value`; autrement dit, ln `value`, ou de journal e`value`.</span><span class="sxs-lookup"><span data-stu-id="90062-471">The natural logarithm of `value`; that is, ln `value`, or log e`value`.</span></span>|  
|<span data-ttu-id="90062-472">Zéro</span><span class="sxs-lookup"><span data-stu-id="90062-472">Zero</span></span>|<span data-ttu-id="90062-473"><xref:System.Double.NegativeInfinity>.</span><span class="sxs-lookup"><span data-stu-id="90062-473"><xref:System.Double.NegativeInfinity>.</span></span>|  
|<span data-ttu-id="90062-474">Négatif</span><span class="sxs-lookup"><span data-stu-id="90062-474">Negative</span></span>|<span data-ttu-id="90062-475"><xref:System.Double.NaN>.</span><span class="sxs-lookup"><span data-stu-id="90062-475"><xref:System.Double.NaN>.</span></span>|  
  
 <span data-ttu-id="90062-476">Pour calculer le logarithme de base 10 d’un <xref:System.Numerics.BigInteger> valeur, appelez le <xref:System.Numerics.BigInteger.Log10%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-476">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="90062-477">Pour calculer le logarithme d’un nombre dans une autre base, appelez le <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-477">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method.</span></span>  
  
 <span data-ttu-id="90062-478">Vous pouvez trouver la racine carrée d’un nombre en appelant le <xref:System.Numerics.BigInteger.Log%2A> méthode avec la <xref:System.Math.Exp%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-478">You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90062-479">Notez que le résultat est <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> si le résultat est supérieur à <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-479">Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if the result is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90062-480">L’exemple suivant calcule la racine carrée de chaque élément dans un tableau de <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-480">The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)]
  
 <span data-ttu-id="90062-481">Cette méthode correspond à la <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> méthode pour les types numériques primitifs.</span><span class="sxs-lookup"><span data-stu-id="90062-481">This method corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90062-482">Le logarithme népérien de <paramref name="value" /> est hors des limites du type de données <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="90062-482">The natural log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value, double baseValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value, float64 baseValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger, baseValue As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value, double baseValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="baseValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-483">Nombre dont le logarithme doit être recherché.</span><span class="sxs-lookup"><span data-stu-id="90062-483">A number whose logarithm is to be found.</span></span></param>
        <param name="baseValue"><span data-ttu-id="90062-484">Base du logarithme.</span><span class="sxs-lookup"><span data-stu-id="90062-484">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="90062-485">Retourne le logarithme d'un nombre spécifié dans une base spécifiée.</span><span class="sxs-lookup"><span data-stu-id="90062-485">Returns the logarithm of a specified number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="90062-486">Logarithme de base <paramref name="baseValue" /> de <paramref name="value" />, comme indiqué dans le tableau de la section Notes.</span><span class="sxs-lookup"><span data-stu-id="90062-486">The base <paramref name="baseValue" /> logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-487">Le `value` et `baseValue` paramètres sont spécifiés en tant que base 10 chiffres.</span><span class="sxs-lookup"><span data-stu-id="90062-487">The `value` and `baseValue` parameters are specified as base 10 numbers.</span></span>  
  
 <span data-ttu-id="90062-488">Retourne la précision dépend de la valeur de la méthode sur le signe de `value` et sur la connexion et la valeur de `baseValue`, comme le montre le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-488">The precise return value of the method depends on the sign of `value` and on the sign and value of `baseValue`, as the following table shows.</span></span>  
  
|<span data-ttu-id="90062-489">Paramètre `value`</span><span class="sxs-lookup"><span data-stu-id="90062-489">`value` parameter</span></span>|<span data-ttu-id="90062-490">Paramètre `baseValue`</span><span class="sxs-lookup"><span data-stu-id="90062-490">`baseValue` parameter</span></span>|<span data-ttu-id="90062-491">Valeur de retour</span><span class="sxs-lookup"><span data-stu-id="90062-491">Return value</span></span>|  
|-----------------------|---------------------------|------------------|  
|<span data-ttu-id="90062-492">`value` > 0</span><span class="sxs-lookup"><span data-stu-id="90062-492">`value` > 0</span></span>|<span data-ttu-id="90062-493">(0 < `baseValue` < 1) - ou -(`baseValue` > 1)</span><span class="sxs-lookup"><span data-stu-id="90062-493">(0 < `baseValue` < 1) -or-(`baseValue` > 1)</span></span>|<span data-ttu-id="90062-494">logbaseValue(`value`)</span><span class="sxs-lookup"><span data-stu-id="90062-494">logbaseValue(`value`)</span></span>|  
|<span data-ttu-id="90062-495">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="90062-495">`value` < 0</span></span>|<span data-ttu-id="90062-496">(toute valeur)</span><span class="sxs-lookup"><span data-stu-id="90062-496">(any value)</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="90062-497">(toute valeur)</span><span class="sxs-lookup"><span data-stu-id="90062-497">(any value)</span></span>|<span data-ttu-id="90062-498">`baseValue` < 0</span><span class="sxs-lookup"><span data-stu-id="90062-498">`baseValue` < 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="90062-499">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="90062-499">`value` != 1</span></span>|<span data-ttu-id="90062-500">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="90062-500">`baseValue` = 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="90062-501">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="90062-501">`value` != 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="90062-502">(toute valeur)</span><span class="sxs-lookup"><span data-stu-id="90062-502">(any value)</span></span>|`baseValue` = <xref:System.Double.NaN?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="90062-503">(toute valeur)</span><span class="sxs-lookup"><span data-stu-id="90062-503">(any value)</span></span>|<span data-ttu-id="90062-504">`baseValue` = 1</span><span class="sxs-lookup"><span data-stu-id="90062-504">`baseValue` = 1</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="90062-505">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="90062-505">`value` = 0</span></span>|<span data-ttu-id="90062-506">0 < `baseValue` < 1</span><span class="sxs-lookup"><span data-stu-id="90062-506">0 < `baseValue` < 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="90062-507">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="90062-507">`value` = 0</span></span>|<span data-ttu-id="90062-508">`baseValue` > 1</span><span class="sxs-lookup"><span data-stu-id="90062-508">`baseValue` > 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="90062-509">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="90062-509">`value` = 1</span></span>|<span data-ttu-id="90062-510">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="90062-510">`baseValue` = 0</span></span>|<span data-ttu-id="90062-511">0</span><span class="sxs-lookup"><span data-stu-id="90062-511">0</span></span>|  
|<span data-ttu-id="90062-512">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="90062-512">`value` = 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<span data-ttu-id="90062-513">0</span><span class="sxs-lookup"><span data-stu-id="90062-513">0</span></span>|  
  
 <span data-ttu-id="90062-514">Pour calculer le logarithme de base 10 d’un <xref:System.Numerics.BigInteger> valeur, appelez le <xref:System.Numerics.BigInteger.Log10%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-514">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="90062-515">Pour calculer le logarithme népérien d’un nombre, appelez le <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-515">To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method.</span></span>  
  
 <span data-ttu-id="90062-516">Cette méthode correspond à la <xref:System.Math.Log%2A?displayProperty=nameWithType> méthode pour les types numériques primitifs.</span><span class="sxs-lookup"><span data-stu-id="90062-516">This method corresponds to the <xref:System.Math.Log%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90062-517">Le logarithme de <paramref name="value" /> est hors des limites du type de données <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="90062-517">The log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-518">Nombre dont le logarithme doit être recherché.</span><span class="sxs-lookup"><span data-stu-id="90062-518">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="90062-519">Retourne le logarithme de base 10 d'un nombre spécifié.</span><span class="sxs-lookup"><span data-stu-id="90062-519">Returns the base 10 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="90062-520">Logarithme de base 10 de <paramref name="value" />, comme indiqué dans le tableau de la section Notes.</span><span class="sxs-lookup"><span data-stu-id="90062-520">The base 10 logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-521">Le `value` paramètre est spécifié comme un nombre de base 10.</span><span class="sxs-lookup"><span data-stu-id="90062-521">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="90062-522">Retourne la précision dépend de la valeur de la méthode sur le signe de `value`, comme le montre le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-522">The precise return value of the method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="90062-523">Signe du paramètre de valeur</span><span class="sxs-lookup"><span data-stu-id="90062-523">Sign of value parameter</span></span>|<span data-ttu-id="90062-524">Valeur de retour</span><span class="sxs-lookup"><span data-stu-id="90062-524">Return value</span></span>|  
|-----------------------------|------------------|  
|<span data-ttu-id="90062-525">Positif</span><span class="sxs-lookup"><span data-stu-id="90062-525">Positive</span></span>|<span data-ttu-id="90062-526">Le logarithme base 10 de `value`; autrement dit, log10`value`.</span><span class="sxs-lookup"><span data-stu-id="90062-526">The base 10 log of `value`; that is, log10`value`.</span></span>|  
|<span data-ttu-id="90062-527">Zéro</span><span class="sxs-lookup"><span data-stu-id="90062-527">Zero</span></span>|<span data-ttu-id="90062-528"><xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-528"><xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>|  
|<span data-ttu-id="90062-529">Négatif</span><span class="sxs-lookup"><span data-stu-id="90062-529">Negative</span></span>|<span data-ttu-id="90062-530"><xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-530"><xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>|  
  
 <span data-ttu-id="90062-531">Pour calculer le logarithme népérien d’un <xref:System.Numerics.BigInteger> valeur, appelez le <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-531">To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90062-532">Pour calculer le logarithme d’un nombre dans une autre base, appelez le <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-532">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="90062-533">Cette méthode correspond à la <xref:System.Math.Log10%2A?displayProperty=nameWithType> méthode pour les types numériques primitifs.</span><span class="sxs-lookup"><span data-stu-id="90062-533">This method corresponds to the <xref:System.Math.Log10%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90062-534">Le logarithme de base 10 de <paramref name="value" /> est hors des limites du type de données <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="90062-534">The base 10 log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Max (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Max(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Max(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-535">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-535">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-536">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-536">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-537">Retourne la plus grande des deux valeurs <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-537">Returns the larger of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="90062-538">Paramètre <paramref name="left" /> ou <paramref name="right" /> (selon celui qui est le plus grand).</span><span class="sxs-lookup"><span data-stu-id="90062-538">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-539">Cette méthode correspond à la <xref:System.Math.Max%2A?displayProperty=nameWithType> méthode pour les types numériques primitifs.</span><span class="sxs-lookup"><span data-stu-id="90062-539">This method corresponds to the <xref:System.Math.Max%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-540">L’exemple suivant utilise le <xref:System.Numerics.BigInteger.Max%2A> (méthode) pour sélectionner le plus grand nombre dans un tableau de <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-540">The following example uses the <xref:System.Numerics.BigInteger.Max%2A> method to select the largest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/cs/Max1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/vb/Max1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Min (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Min(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Min(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-541">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-541">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-542">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-542">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-543">Retourne la plus petite des deux valeurs <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-543">Returns the smaller of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="90062-544">Paramètre <paramref name="left" /> ou <paramref name="right" /> (selon celui qui est le plus petit).</span><span class="sxs-lookup"><span data-stu-id="90062-544">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-545">Cette méthode correspond à la <xref:System.Math.Min%2A?displayProperty=nameWithType> méthode pour les types numériques primitifs.</span><span class="sxs-lookup"><span data-stu-id="90062-545">This method corresponds to the <xref:System.Math.Min%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-546">L’exemple suivant utilise le <xref:System.Numerics.BigInteger.Min%2A> (méthode) pour sélectionner le plus petit nombre dans un tableau de <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-546">The following example uses the <xref:System.Numerics.BigInteger.Min%2A> method to select the smallest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/cs/Min1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/vb/Min1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="MinusOne">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger MinusOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger MinusOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.MinusOne" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinusOne As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger MinusOne { System::Numerics::BigInteger get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90062-547">Obtient une valeur qui représente le nombre moins un (-1).</span><span class="sxs-lookup"><span data-stu-id="90062-547">Gets a value that represents the number negative one (-1).</span></span></summary>
        <value><span data-ttu-id="90062-548">Entier dont la valeur est moins un (-1).</span><span class="sxs-lookup"><span data-stu-id="90062-548">An integer whose value is negative one (-1).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-549">Le <xref:System.Numerics.BigInteger.MinusOne%2A> propriété est utilisée pour comparer un <xref:System.Numerics.BigInteger> valeur-1 ou assigner -1 à un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-549">The <xref:System.Numerics.BigInteger.MinusOne%2A> property is used to compare a <xref:System.Numerics.BigInteger> value to -1 or to assign -1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
      </Docs>
    </Member>
    <Member MemberName="ModPow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger ModPow (System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger ModPow(valuetype System.Numerics.BigInteger value, valuetype System.Numerics.BigInteger exponent, valuetype System.Numerics.BigInteger modulus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModPow (value As BigInteger, exponent As BigInteger, modulus As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger ModPow(System::Numerics::BigInteger value, System::Numerics::BigInteger exponent, System::Numerics::BigInteger modulus);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Numerics.BigInteger" />
        <Parameter Name="modulus" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-550">Nombre à élever à la puissance <c>exponent</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-550">The number to raise to the <c>exponent</c> power.</span></span></param>
        <param name="exponent"><span data-ttu-id="90062-551">Exposant de <c>value</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-551">The exponent to raise <c>value</c> by.</span></span></param>
        <param name="modulus"><span data-ttu-id="90062-552">Nombre par lequel diviser <c>value</c> élevé à la puissance <c>exponent</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-552">The number by which to divide <c>value</c> raised to the <c>exponent</c> power.</span></span></param>
        <summary><span data-ttu-id="90062-553">Effectue une division avec coefficient sur un nombre élevé à la puissance d'un autre nombre.</span><span class="sxs-lookup"><span data-stu-id="90062-553">Performs modulus division on a number raised to the power of another number.</span></span></summary>
        <returns><span data-ttu-id="90062-554">Reste de la division de <paramref name="value" /><sup>exposant</sup> par <paramref name="modulus" />.</span><span class="sxs-lookup"><span data-stu-id="90062-554">The remainder after dividing <paramref name="value" /><sup>exponent</sup> by <paramref name="modulus" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-555">Le <xref:System.Numerics.BigInteger.ModPow%2A> méthode évalue l’expression suivante :</span><span class="sxs-lookup"><span data-stu-id="90062-555">The <xref:System.Numerics.BigInteger.ModPow%2A> method evaluates the following expression:</span></span>  
  
 <span data-ttu-id="90062-556">(baseValue ^ exposant) Modulo MOD</span><span class="sxs-lookup"><span data-stu-id="90062-556">(baseValue ^ exponent) Mod modulus</span></span>  
  
 <span data-ttu-id="90062-557">Pour effectuer l’élévation à la puissance sur <xref:System.Numerics.BigInteger> valeurs sans division modulo, utilisez la <xref:System.Numerics.BigInteger.Pow%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-557">To perform exponentiation on <xref:System.Numerics.BigInteger> values without modulus division, use the <xref:System.Numerics.BigInteger.Pow%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-558">L’exemple suivant fournit une illustration simple de l’appel de la <xref:System.Numerics.BigInteger.ModPow%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-558">The following example provides a simple illustration of calling the <xref:System.Numerics.BigInteger.ModPow%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/cs/ModPow1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/vb/ModPow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="90062-559"><paramref name="modulus" /> est égal à zéro.</span><span class="sxs-lookup"><span data-stu-id="90062-559"><paramref name="modulus" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90062-560"><paramref name="exponent" /> est un nombre négatif.</span><span class="sxs-lookup"><span data-stu-id="90062-560"><paramref name="exponent" /> is negative.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Multiply(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-561">Premier nombre à multiplier.</span><span class="sxs-lookup"><span data-stu-id="90062-561">The first number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="90062-562">Second nombre à multiplier.</span><span class="sxs-lookup"><span data-stu-id="90062-562">The second number to multiply.</span></span></param>
        <summary><span data-ttu-id="90062-563">Retourne le produit de deux valeurs <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-563">Returns the product of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="90062-564">Produit des paramètres <paramref name="left" /> et <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="90062-564">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-565">Le <xref:System.Numerics.BigInteger.Multiply%2A> méthode est implémentée pour les langages qui ne prennent pas en charge la surcharge d’opérateur.</span><span class="sxs-lookup"><span data-stu-id="90062-565">The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading.</span></span> <span data-ttu-id="90062-566">Son comportement est identique à la multiplication à l’aide de l’opérateur de multiplication.</span><span class="sxs-lookup"><span data-stu-id="90062-566">Its behavior is identical to multiplication using the multiplication operator.</span></span> <span data-ttu-id="90062-567">En outre, le <xref:System.Numerics.BigInteger.Multiply%2A> méthode est un substitut utile pour l’opérateur de multiplication lorsque vous instanciez une <xref:System.Numerics.BigInteger> variable en lui assignant un produit qui résulte de la multiplication, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-567">In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)]  
  
 <span data-ttu-id="90062-568">Si nécessaire, cette méthode exécute automatiquement une conversion implicite d’autres types intégraux pour <xref:System.Numerics.BigInteger> objets.</span><span class="sxs-lookup"><span data-stu-id="90062-568">If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="90062-569">Ceci est illustré dans l’exemple dans la section suivante, où le <xref:System.Numerics.BigInteger.Multiply%2A> méthode est passée de deux <xref:System.Int64> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-569">This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-570">L’exemple suivant tente d’effectuer une multiplication avec deux entiers longs.</span><span class="sxs-lookup"><span data-stu-id="90062-570">The following example tries to perform multiplication with two long integers.</span></span> <span data-ttu-id="90062-571">Étant donné que le résultat dépasse la plage d’un entier long, un <xref:System.OverflowException> est levée et le <xref:System.Numerics.BigInteger.Multiply%2A> méthode est appelée pour gérer la multiplication.</span><span class="sxs-lookup"><span data-stu-id="90062-571">Because the result exceeds the range of a long integer, an <xref:System.OverflowException> is thrown, and the <xref:System.Numerics.BigInteger.Multiply%2A> method is called to handle the multiplication.</span></span> <span data-ttu-id="90062-572">Notez que c# requiert que vous utilisez le `checked` (mot clé) (comme dans cet exemple) ou le `/checked+` option du compilateur pour vous assurer d’une exception est levée sur un dépassement de capacité numérique.</span><span class="sxs-lookup"><span data-stu-id="90062-572">Note that C# requires that you use either the `checked` keyword (as in this example) or the `/checked+` compiler option to make sure an exception is thrown on a numeric overflow.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#7)]
 [!code-vb[System.Numeric.BigInteger.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Negate (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Negate(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Negate(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-573">Valeur à rendre négative.</span><span class="sxs-lookup"><span data-stu-id="90062-573">The value to negate.</span></span></param>
        <summary><span data-ttu-id="90062-574">Rend négative la valeur <see cref="T:System.Numerics.BigInteger" /> spécifiée.</span><span class="sxs-lookup"><span data-stu-id="90062-574">Negates a specified <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-575">Résultat de la multiplication du paramètre <paramref name="value" /> par moins un (-1).</span><span class="sxs-lookup"><span data-stu-id="90062-575">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-576">Négation Obtient l’inverse additif d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="90062-576">Negation obtains the additive inverse of a number.</span></span> <span data-ttu-id="90062-577">L’inverse additif d’un nombre est un nombre qui génère une valeur égale à zéro lorsqu’il est ajouté au nombre d’origine.</span><span class="sxs-lookup"><span data-stu-id="90062-577">The additive inverse of a number is a number that produces a value of zero when it is added to the original number.</span></span>  
  
 <span data-ttu-id="90062-578">Le <xref:System.Numerics.BigInteger.Negate%2A> méthode est implémentée pour les langages qui ne prennent pas en charge les opérateurs personnalisés.</span><span class="sxs-lookup"><span data-stu-id="90062-578">The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="90062-579">Son comportement est identique à l’aide de l’opérateur de négation unaire de négation.</span><span class="sxs-lookup"><span data-stu-id="90062-579">Its behavior is identical to negation using the unary negation operator.</span></span> <span data-ttu-id="90062-580">En outre, le <xref:System.Numerics.BigInteger.Negate%2A> méthode est un substitut utile pour l’opérateur de négation lors de l’instanciation un <xref:System.Numerics.BigInteger> variable, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-580">In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="90062-581">L’exemple suivant illustre trois façons d’exclure la valeur d’un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-581">The following example illustrates three ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger One { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger One" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property One As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger One { System::Numerics::BigInteger get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90062-582">Obtient une valeur qui représente le nombre un (1).</span><span class="sxs-lookup"><span data-stu-id="90062-582">Gets a value that represents the number one (1).</span></span></summary>
        <value><span data-ttu-id="90062-583">Objet dont la valeur est un (1).</span><span class="sxs-lookup"><span data-stu-id="90062-583">An object whose value is one (1).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-584">Le <xref:System.Numerics.BigInteger.One%2A> propriété est généralement utilisée pour comparer un <xref:System.Numerics.BigInteger> valeur sur 1 ou assigner 1 à un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-584">The <xref:System.Numerics.BigInteger.One%2A> property is usually used to compare a <xref:System.Numerics.BigInteger> value to 1 or to assign 1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
        <altmember cref="P:System.Numerics.BigInteger.MinusOne" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Addition(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-585">Première valeur à ajouter.</span><span class="sxs-lookup"><span data-stu-id="90062-585">The first value to add.</span></span></param>
        <param name="right"><span data-ttu-id="90062-586">Seconde valeur à ajouter.</span><span class="sxs-lookup"><span data-stu-id="90062-586">The second value to add.</span></span></param>
        <summary><span data-ttu-id="90062-587">Ajoute les valeurs des deux objets <see cref="T:System.Numerics.BigInteger" /> spécifiés.</span><span class="sxs-lookup"><span data-stu-id="90062-587">Adds the values of two specified <see cref="T:System.Numerics.BigInteger" /> objects.</span></span></summary>
        <returns><span data-ttu-id="90062-588">Somme de <paramref name="left" /> et <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="90062-588">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-589">Le <xref:System.Numerics.BigInteger.op_Addition%2A> méthode définit l’opération d’addition pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-589">The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-590">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-590">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)]
 [!code-vb[System.Numeric.BigInteger.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)]  
  
 <span data-ttu-id="90062-591">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Add%2A> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-591">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Add%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseAnd">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &amp; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseAnd(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator And (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &amp;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-592">Première valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-592">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="90062-593">Seconde valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-593">The second value.</span></span></param>
        <summary><span data-ttu-id="90062-594">Effectue une opération de bits <see langword="And" /> sur deux valeurs <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-594">Performs a bitwise <see langword="And" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="90062-595">Résultat de l'opération de bits <see langword="And" />.</span><span class="sxs-lookup"><span data-stu-id="90062-595">The result of the bitwise <see langword="And" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-596">Le <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> méthode définit l’opérateur de bits `And` opération pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-596">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-597">L’opérateur de bits `And` opération définit un bit de résultat uniquement si les bits correspondants `left` et `right` sont également définies, comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-597">The bitwise `And` operation sets a result bit only if the corresponding bits in `left` and `right` are also set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="90062-598">Bit dans `left`</span><span class="sxs-lookup"><span data-stu-id="90062-598">Bit in `left`</span></span>|<span data-ttu-id="90062-599">Bit dans `right`</span><span class="sxs-lookup"><span data-stu-id="90062-599">Bit in `right`</span></span>|<span data-ttu-id="90062-600">Bit de résultat</span><span class="sxs-lookup"><span data-stu-id="90062-600">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="90062-601">0</span><span class="sxs-lookup"><span data-stu-id="90062-601">0</span></span>|<span data-ttu-id="90062-602">0</span><span class="sxs-lookup"><span data-stu-id="90062-602">0</span></span>|<span data-ttu-id="90062-603">0</span><span class="sxs-lookup"><span data-stu-id="90062-603">0</span></span>|  
|<span data-ttu-id="90062-604">1</span><span class="sxs-lookup"><span data-stu-id="90062-604">1</span></span>|<span data-ttu-id="90062-605">0</span><span class="sxs-lookup"><span data-stu-id="90062-605">0</span></span>|<span data-ttu-id="90062-606">0</span><span class="sxs-lookup"><span data-stu-id="90062-606">0</span></span>|  
|<span data-ttu-id="90062-607">1</span><span class="sxs-lookup"><span data-stu-id="90062-607">1</span></span>|<span data-ttu-id="90062-608">1</span><span class="sxs-lookup"><span data-stu-id="90062-608">1</span></span>|<span data-ttu-id="90062-609">1</span><span class="sxs-lookup"><span data-stu-id="90062-609">1</span></span>|  
|<span data-ttu-id="90062-610">0</span><span class="sxs-lookup"><span data-stu-id="90062-610">0</span></span>|<span data-ttu-id="90062-611">1</span><span class="sxs-lookup"><span data-stu-id="90062-611">1</span></span>|<span data-ttu-id="90062-612">0</span><span class="sxs-lookup"><span data-stu-id="90062-612">0</span></span>|  
  
 <span data-ttu-id="90062-613">Le <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> méthode autorise le code suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-613">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)]  
  
 <span data-ttu-id="90062-614">Le <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> méthode effectue les opérations de bits `And` opération sur deux <xref:System.Numerics.BigInteger> valeurs comme si elles étaient toutes deux dans la représentation du deux complément avec extension de signe virtuel.</span><span class="sxs-lookup"><span data-stu-id="90062-614">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method performs the bitwise `And` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator | (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Or (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator |(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-615">Première valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-615">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="90062-616">Seconde valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-616">The second value.</span></span></param>
        <summary><span data-ttu-id="90062-617">Effectue une opération de bits <see langword="Or" /> sur deux valeurs <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-617">Performs a bitwise <see langword="Or" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="90062-618">Résultat de l'opération de bits <see langword="Or" />.</span><span class="sxs-lookup"><span data-stu-id="90062-618">The result of the bitwise <see langword="Or" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-619">Le <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> méthode définit l’opérateur de bits `Or` opération pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-619">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-620">L’opérateur de bits `Or` opération définit un bit de résultat uniquement si une ou les deux bits correspondants dans `left` et `right` sont définis, comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-620">The bitwise `Or` operation sets a result bit only if either or both of the corresponding bits in `left` and `right` are set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="90062-621">Bit dans `left`</span><span class="sxs-lookup"><span data-stu-id="90062-621">Bit in `left`</span></span>|<span data-ttu-id="90062-622">Bit dans `right`</span><span class="sxs-lookup"><span data-stu-id="90062-622">Bit in `right`</span></span>|<span data-ttu-id="90062-623">Bit de résultat</span><span class="sxs-lookup"><span data-stu-id="90062-623">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="90062-624">0</span><span class="sxs-lookup"><span data-stu-id="90062-624">0</span></span>|<span data-ttu-id="90062-625">0</span><span class="sxs-lookup"><span data-stu-id="90062-625">0</span></span>|<span data-ttu-id="90062-626">0</span><span class="sxs-lookup"><span data-stu-id="90062-626">0</span></span>|  
|<span data-ttu-id="90062-627">1</span><span class="sxs-lookup"><span data-stu-id="90062-627">1</span></span>|<span data-ttu-id="90062-628">0</span><span class="sxs-lookup"><span data-stu-id="90062-628">0</span></span>|<span data-ttu-id="90062-629">1</span><span class="sxs-lookup"><span data-stu-id="90062-629">1</span></span>|  
|<span data-ttu-id="90062-630">1</span><span class="sxs-lookup"><span data-stu-id="90062-630">1</span></span>|<span data-ttu-id="90062-631">1</span><span class="sxs-lookup"><span data-stu-id="90062-631">1</span></span>|<span data-ttu-id="90062-632">1</span><span class="sxs-lookup"><span data-stu-id="90062-632">1</span></span>|  
|<span data-ttu-id="90062-633">0</span><span class="sxs-lookup"><span data-stu-id="90062-633">0</span></span>|<span data-ttu-id="90062-634">1</span><span class="sxs-lookup"><span data-stu-id="90062-634">1</span></span>|<span data-ttu-id="90062-635">1</span><span class="sxs-lookup"><span data-stu-id="90062-635">1</span></span>|  
  
 <span data-ttu-id="90062-636">Le <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> méthode autorise le code suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-636">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)]  
  
 <span data-ttu-id="90062-637">Le <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> méthode effectue les opérations de bits `Or` opération sur deux <xref:System.Numerics.BigInteger> valeurs comme si elles étaient toutes deux dans la représentation du deux complément avec extension de signe virtuel.</span><span class="sxs-lookup"><span data-stu-id="90062-637">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method performs the bitwise `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator -- (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Decrement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Decrement (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator --(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-638">Valeur à décrémenter.</span><span class="sxs-lookup"><span data-stu-id="90062-638">The value to decrement.</span></span></param>
        <summary><span data-ttu-id="90062-639">Décrémente une valeur <see cref="T:System.Numerics.BigInteger" /> de 1.</span><span class="sxs-lookup"><span data-stu-id="90062-639">Decrements a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span></span></summary>
        <returns><span data-ttu-id="90062-640">Valeur du paramètre <paramref name="value" /> décrémenté de 1.</span><span class="sxs-lookup"><span data-stu-id="90062-640">The value of the <paramref name="value" /> parameter decremented by 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-641">Le <xref:System.Numerics.BigInteger.op_Decrement%2A> méthode définit l’opération de décrémentation pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-641">The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-642">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-642">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)]  
  
 <span data-ttu-id="90062-643">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Subtract%2A> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-643">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead.</span></span> <span data-ttu-id="90062-644">Exemple :</span><span class="sxs-lookup"><span data-stu-id="90062-644">For example:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)]  
  
 <span data-ttu-id="90062-645">Étant donné que <xref:System.Numerics.BigInteger> les objets sont immuables, le <xref:System.Numerics.BigInteger.op_Decrement%2A> opérateur crée un nouveau <xref:System.Numerics.BigInteger> objet dont la valeur est inférieure à la <xref:System.Numerics.BigInteger> objet représenté par `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-645">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Decrement%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one less than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="90062-646">Cela signifie que les appels répétés à <xref:System.Numerics.BigInteger.op_Decrement%2A> peut s’avérer coûteux.</span><span class="sxs-lookup"><span data-stu-id="90062-646">This means that repeated calls to <xref:System.Numerics.BigInteger.op_Decrement%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="90062-647">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-647">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator / (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Division(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator /(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="90062-648">Valeur à diviser.</span><span class="sxs-lookup"><span data-stu-id="90062-648">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="90062-649">Valeur par laquelle diviser.</span><span class="sxs-lookup"><span data-stu-id="90062-649">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="90062-650">Divise une valeur <see cref="T:System.Numerics.BigInteger" /> spécifique par une autre valeur <see cref="T:System.Numerics.BigInteger" /> spécifique à l'aide d'une division entière.</span><span class="sxs-lookup"><span data-stu-id="90062-650">Divides a specified <see cref="T:System.Numerics.BigInteger" /> value by another specified <see cref="T:System.Numerics.BigInteger" /> value by using integer division.</span></span></summary>
        <returns><span data-ttu-id="90062-651">Résultat intégral de la division.</span><span class="sxs-lookup"><span data-stu-id="90062-651">The integral result of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-652">Le <xref:System.Numerics.BigInteger.op_Division%2A> méthode définit l’opération de division pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-652">The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-653">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-653">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)]
 [!code-vb[System.Numeric.BigInteger.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)]  
  
 <span data-ttu-id="90062-654">Les langages qui ne prennent pas en charge les opérateurs personnalisés et la surcharge d’opérateur peuvent appeler la <xref:System.Numerics.BigInteger.Divide%2A> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-654">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.BigInteger.Divide%2A> method instead.</span></span>  
  
 <span data-ttu-id="90062-655">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="90062-655">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="90062-656">L’exemple suivant crée un tableau de <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-656">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-657">Il utilise alors chaque élément comme quotient dans une opération de division qui utilise le <xref:System.Numerics.BigInteger.Divide%2A> méthode, l’opérateur de division (/) et le <xref:System.Numerics.BigInteger.DivRem%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-657">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="90062-658"><paramref name="divisor" /> est égal à 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="90062-658"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Equality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-659">Retourne une valeur qui indique si deux valeurs sont égales.</span><span class="sxs-lookup"><span data-stu-id="90062-659">Returns a value that indicates whether two values are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(long left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-660">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-660">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-661">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-661">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-662">Retourne une valeur qui indique si la valeur d'un entier long signé et la valeur <see cref="T:System.Numerics.BigInteger" /> sont égales.</span><span class="sxs-lookup"><span data-stu-id="90062-662">Returns a value that indicates whether a signed long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-663"><see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> ont la même valeur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-663"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-664">Le <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> méthode définit l’opération de comparaison d’égalité pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-664">The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-665">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-665">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)]  
  
 <span data-ttu-id="90062-666">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> méthode d’instance à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-666">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="90062-667">Si `left` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-667">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="90062-668">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-668">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, long right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-669">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-669">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-670">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-670">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-671">Retourne une valeur qui indique si la valeur <see cref="T:System.Numerics.BigInteger" /> et la valeur d'un entier long signé sont égales.</span><span class="sxs-lookup"><span data-stu-id="90062-671">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a signed long integer value are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-672"><see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> ont la même valeur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-672"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-673">Le <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> méthode définit l’opération de comparaison d’égalité pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-673">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-674">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-674">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)]  
  
 <span data-ttu-id="90062-675">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> méthode d’instance à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-675">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="90062-676">Si `right` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-676">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="90062-677">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-677">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-678">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-678">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-679">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-679">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-680">Retourne une valeur qui indique si les valeurs de deux objets <see cref="T:System.Numerics.BigInteger" /> sont égales.</span><span class="sxs-lookup"><span data-stu-id="90062-680">Returns a value that indicates whether the values of two <see cref="T:System.Numerics.BigInteger" /> objects are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-681"><see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> ont la même valeur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-681"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-682">Le <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> méthode définit l’opération de l’opérateur d’égalité pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-682">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-683">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-683">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)]
 [!code-vb[System.Numeric.BigInteger.Class#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)]  
  
 <span data-ttu-id="90062-684">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> méthode d’instance à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-684">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="90062-685">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-685">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.Equals" />
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-686">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-686">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-687">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-687">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-688">Retourne une valeur qui indique si la valeur <see cref="T:System.Numerics.BigInteger" /> et la valeur d'un entier long non signé sont égales.</span><span class="sxs-lookup"><span data-stu-id="90062-688">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and an unsigned long integer value are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-689"><see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> ont la même valeur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-689"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-690">Le <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> méthode définit l’opération de comparaison d’égalité pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-690">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-691">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-691">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)]  
  
 <span data-ttu-id="90062-692">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> méthode d’instance à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-692">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-693">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-693">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-694">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-694">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-695">Retourne une valeur qui indique si la valeur d'un entier long non signé et la valeur <see cref="T:System.Numerics.BigInteger" /> sont égales.</span><span class="sxs-lookup"><span data-stu-id="90062-695">Returns a value that indicates whether an unsigned long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-696"><see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> ont la même valeur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-696"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-697">Le <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> méthode définit l’opération de comparaison d’égalité pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-697">The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-698">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-698">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)]
 [!code-vb[System.Numerics.BigInteger.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)]  
  
 <span data-ttu-id="90062-699">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> méthode d’instance à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-699">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ^ (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_ExclusiveOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Xor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ^(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-700">Première valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-700">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="90062-701">Seconde valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-701">The second value.</span></span></param>
        <summary><span data-ttu-id="90062-702">Effectue une opération de bits <see langword="Or" /> (<see langword="XOr" />) exclusive sur deux valeurs <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-702">Performs a bitwise exclusive <see langword="Or" /> (<see langword="XOr" />) operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="90062-703">Résultat de l'opération de bits <see langword="Or" />.</span><span class="sxs-lookup"><span data-stu-id="90062-703">The result of the bitwise <see langword="Or" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-704">Le résultat d’un exclusif au niveau du bit `Or` opération est `true` si les valeurs des deux bits sont différentes ; sinon, il est `false`.</span><span class="sxs-lookup"><span data-stu-id="90062-704">The result of a bitwise exclusive `Or` operation is `true` if the values of the two bits are different; otherwise, it is `false`.</span></span> <span data-ttu-id="90062-705">Le tableau suivant illustre l’exclusif `Or` opération.</span><span class="sxs-lookup"><span data-stu-id="90062-705">The following table illustrates the exclusive `Or` operation.</span></span>  
  
|<span data-ttu-id="90062-706">Bit x dans `left`</span><span class="sxs-lookup"><span data-stu-id="90062-706">Bit x in `left`</span></span>|<span data-ttu-id="90062-707">Bit x dans `right`</span><span class="sxs-lookup"><span data-stu-id="90062-707">Bit x in `right`</span></span>|<span data-ttu-id="90062-708">Valeur de retour</span><span class="sxs-lookup"><span data-stu-id="90062-708">Return value</span></span>|  
|---------------------|----------------------|------------------|  
|<span data-ttu-id="90062-709">0</span><span class="sxs-lookup"><span data-stu-id="90062-709">0</span></span>|<span data-ttu-id="90062-710">0</span><span class="sxs-lookup"><span data-stu-id="90062-710">0</span></span>|<span data-ttu-id="90062-711">0</span><span class="sxs-lookup"><span data-stu-id="90062-711">0</span></span>|  
|<span data-ttu-id="90062-712">0</span><span class="sxs-lookup"><span data-stu-id="90062-712">0</span></span>|<span data-ttu-id="90062-713">1</span><span class="sxs-lookup"><span data-stu-id="90062-713">1</span></span>|<span data-ttu-id="90062-714">1</span><span class="sxs-lookup"><span data-stu-id="90062-714">1</span></span>|  
|<span data-ttu-id="90062-715">1</span><span class="sxs-lookup"><span data-stu-id="90062-715">1</span></span>|<span data-ttu-id="90062-716">0</span><span class="sxs-lookup"><span data-stu-id="90062-716">0</span></span>|<span data-ttu-id="90062-717">1</span><span class="sxs-lookup"><span data-stu-id="90062-717">1</span></span>|  
|<span data-ttu-id="90062-718">1</span><span class="sxs-lookup"><span data-stu-id="90062-718">1</span></span>|<span data-ttu-id="90062-719">1</span><span class="sxs-lookup"><span data-stu-id="90062-719">1</span></span>|<span data-ttu-id="90062-720">0</span><span class="sxs-lookup"><span data-stu-id="90062-720">0</span></span>|  
  
 <span data-ttu-id="90062-721">Le <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> méthode autorise le code suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-721">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)]
 [!code-vb[System.Numerics.BigInteger.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)]  
  
 <span data-ttu-id="90062-722">Le <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> méthode effectue l’exclusif au niveau du bit `Or` opération sur deux <xref:System.Numerics.BigInteger> valeurs comme si elles étaient toutes deux dans la représentation du deux complément avec extension de signe virtuel.</span><span class="sxs-lookup"><span data-stu-id="90062-722">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method performs the bitwise exclusive `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-723">Définit une conversion explicite entre un objet <see cref="T:System.Numerics.BigInteger" /> et un autre type.</span><span class="sxs-lookup"><span data-stu-id="90062-723">Defines an explicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-724">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-724">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="90062-725">Définit une conversion explicite d'un objet <see cref="T:System.Decimal" /> en valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-725">Defines an explicit conversion of a <see cref="T:System.Decimal" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-726">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-726">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-727">Toute partie fractionnaire de la `value` paramètre est tronqué avant la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-727">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="90062-728">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-728">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-729">Étant donné que la conversion de <xref:System.Decimal> à <xref:System.Numerics.BigInteger> peut impliquer de tronquer la partie décimale de `value`, les compilateurs de langage n’exécutent pas automatiquement cette conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-729">Because the conversion from <xref:System.Decimal> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="90062-730">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-730">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-731">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-731">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="90062-732">Pour les langages qui ne prennent pas en charge les opérateurs personnalisés, la méthode de remplacement est <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-732">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="90062-733">L’exemple suivant convertit les éléments individuels dans un tableau de <xref:System.Decimal> valeurs <xref:System.Numerics.BigInteger> objets, puis affiche le résultat de chaque conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-733">The following example converts the individual elements in an array of <xref:System.Decimal> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="90062-734">Notez que toute fractions de seconde dans le cadre d’un <xref:System.Decimal> valeur est tronquée lors de la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-734">Note that any fractional part of a <xref:System.Decimal> value is truncated during the conversion.</span></span>   

 [!code-csharp[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#1)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Double) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-735">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-735">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="90062-736">Définit une conversion explicite d'une valeur <see cref="T:System.Double" /> en valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-736">Defines an explicit conversion of a <see cref="T:System.Double" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-737">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-737">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-738">Toute partie fractionnaire de la `value` paramètre est tronqué avant la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-738">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="90062-739">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-739">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-740">Étant donné que la conversion de <xref:System.Double> à <xref:System.Numerics.BigInteger> peut impliquer de tronquer la partie décimale de `value`, les compilateurs de langage n’exécutent pas automatiquement cette conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-740">Because the conversion from <xref:System.Double> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="90062-741">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-741">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-742">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-742">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="90062-743">Pour les langages qui ne prennent pas en charge les opérateurs personnalisés, la méthode de remplacement est <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-743">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="90062-744">L’exemple suivant convertit les éléments individuels dans un tableau de <xref:System.Double> valeurs <xref:System.Numerics.BigInteger> objets, puis affiche le résultat de chaque conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-744">The following example converts the individual elements in an array of <xref:System.Double> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="90062-745">Notez que toute fractions de seconde dans le cadre d’un <xref:System.Double> valeur est tronquée lors de la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-745">Note that any fractional part of a <xref:System.Double> value is truncated during the conversion.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#2)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#2)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-746">La valeur de <paramref name="value" /> est <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="90062-746">The value of <paramref name="value" /> is <see cref="F:System.Double.NaN" />.</span></span>  
  
 <span data-ttu-id="90062-747">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-747">-or-</span></span>  
  
 <span data-ttu-id="90062-748">La valeur de <paramref name="value" /> est <see cref="F:System.Double.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="90062-748">The value of <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.</span></span>
  
 <span data-ttu-id="90062-749">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-749">-or-</span></span>  
  
 <span data-ttu-id="90062-750">La valeur de <paramref name="value" /> est <see cref="F:System.Double.NegativeInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="90062-750">The value of <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator byte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Byte(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-751">Valeur à convertir en <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="90062-751">The value to convert to a <see cref="T:System.Byte" />.</span></span></param>
        <summary><span data-ttu-id="90062-752">Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d'octet non signée.</span><span class="sxs-lookup"><span data-stu-id="90062-752">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned byte value.</span></span></summary>
        <returns><span data-ttu-id="90062-753">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-753">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-754">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-754">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-755">Compilateurs de langage n’exécutent pas automatiquement cette conversion, car elle peut impliquer une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-755">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="90062-756">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` ou `CByte` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-756">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CByte` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-757">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-757">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="90062-758">Étant donné que cette opération définit une conversion restrictive, elle peut lever une <xref:System.OverflowException> au moment de l’exécution si le <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Byte> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-758">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span> <span data-ttu-id="90062-759">Il n’existe aucune perte de précision dans la boîte <xref:System.Byte> valeur si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="90062-759">There is no loss of precision in the resulting <xref:System.Byte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="90062-760">L’exemple suivant illustre la conversion de <xref:System.Numerics.BigInteger> à <xref:System.Byte> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-760">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Byte> values.</span></span> <span data-ttu-id="90062-761">Il gère également une <xref:System.OverflowException> qui est levée car la <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Byte> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-761">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#1)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-762">La valeur de <paramref name="value" /> est inférieure à <see cref="F:System.Byte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-762">The value of <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" />.</span></span>  
  
 <span data-ttu-id="90062-763">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-763">-or-</span></span>  
  
 <span data-ttu-id="90062-764">La valeur de <paramref name="value" /> est supérieure à <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-764">The value of <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-765">Valeur à convertir en <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="90062-765">The value to convert to a <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="90062-766">Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="90062-766">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-767">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-767">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-768">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-768">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-769">Compilateurs de langage n’exécutent pas automatiquement cette conversion, car elle peut impliquer une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-769">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="90062-770">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` ou `CDec` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-770">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDec` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="90062-771">Étant donné que cette opération définit une conversion restrictive, elle peut lever une <xref:System.OverflowException> au moment de l’exécution si le <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Decimal> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-771">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span> 

## Examples
 <span data-ttu-id="90062-772">L’exemple suivant illustre la conversion de <xref:System.Numerics.BigInteger> à <xref:System.Decimal> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-772">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Decimal> values.</span></span> <span data-ttu-id="90062-773">Il gère également une <xref:System.OverflowException> qui est levée car la <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Decimal> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-773">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#2)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-774">La valeur de <paramref name="value" /> est inférieure à <see cref="F:System.Decimal.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-774">The value of <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" />.</span></span>  
  
 <span data-ttu-id="90062-775">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-775">-or-</span></span>  
  
 <span data-ttu-id="90062-776">La valeur de <paramref name="value" /> est supérieure à <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-776">The value of <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-777">Valeur à convertir en <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="90062-777">The value to convert to a <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="90062-778">Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="90062-778">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-779">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-779">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-780">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-780">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-781">Compilateurs de langage n’exécutent pas automatiquement cette conversion, car elle peut impliquer une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-781">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="90062-782">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` ou `CDbl` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-782">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDbl` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="90062-783">Étant donné que la <xref:System.Numerics.BigInteger> valeur peut être à l’extérieur de la plage de la <xref:System.Double> de type de données, cette opération est une conversion restrictive.</span><span class="sxs-lookup"><span data-stu-id="90062-783">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Double> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="90062-784">Si la conversion échoue, il ne lève pas une <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="90062-784">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="90062-785">Au lieu de cela, si le <xref:System.Numerics.BigInteger> la valeur est inférieure à <xref:System.Double.MinValue?displayProperty=nameWithType>, résultant <xref:System.Double> valeur est <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-785">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Double.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90062-786">Si le <xref:System.Numerics.BigInteger> valeur est supérieure à <xref:System.Double.MaxValue?displayProperty=nameWithType>, résultant <xref:System.Double> valeur est <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-786">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>
 
 <span data-ttu-id="90062-787">La conversion d’un <xref:System.Numerics.BigInteger> à un <xref:System.Double> peut impliquer une perte de précision.</span><span class="sxs-lookup"><span data-stu-id="90062-787">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Double> may involve a loss of precision.</span></span> <span data-ttu-id="90062-788">Dans certains cas, la perte de précision peut entraîner l’opération de conversion réussisse même si le <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Double> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-788">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="90062-789">L'exemple suivant illustre cette situation.</span><span class="sxs-lookup"><span data-stu-id="90062-789">The following example provides an illustration.</span></span> <span data-ttu-id="90062-790">Il assigne la valeur maximale d’un <xref:System.Double> à deux <xref:System.Numerics.BigInteger> variables, incrémente une <xref:System.Numerics.BigInteger> variable par 9, 999e291 et teste l’égalité les deux variables.</span><span class="sxs-lookup"><span data-stu-id="90062-790">It assigns the maximum value of a <xref:System.Double> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="90062-791">Comme prévu, l’appel à la <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> méthode montre qu’elles sont inégales.</span><span class="sxs-lookup"><span data-stu-id="90062-791">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="90062-792">Toutefois, la conversion de la plus grande <xref:System.Numerics.BigInteger> valeur en un <xref:System.Double> réussit, bien que le <xref:System.Numerics.BigInteger> valeur dépasse maintenant <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-792">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Double> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#4)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#4)]   



## Examples
 <span data-ttu-id="90062-793">L’exemple suivant illustre la conversion de <xref:System.Numerics.BigInteger> à <xref:System.Double> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-793">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Double> values.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator short (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator short(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-794">Valeur à convertir en entier 16 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-794">The value to convert to a 16-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="90062-795">Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d'entier 16 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-795">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 16-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="90062-796">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-796">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-797">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-797">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-798">Compilateurs de langage n’exécutent pas automatiquement cette conversion, car elle peut impliquer une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-798">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="90062-799">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` ou `CShort` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-799">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CShort` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-800">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-800">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="90062-801">Étant donné que cette opération définit une conversion restrictive, elle peut lever une <xref:System.OverflowException> au moment de l’exécution si le <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Int16> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-801">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span> <span data-ttu-id="90062-802">Il n’existe aucune perte de précision dans la boîte <xref:System.Int16> valeur si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="90062-802">There is no loss of precision in the resulting <xref:System.Int16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="90062-803">L’exemple suivant illustre la conversion de <xref:System.Numerics.BigInteger> à <xref:System.Int16> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-803">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int16> values.</span></span> <span data-ttu-id="90062-804">Il gère également une <xref:System.OverflowException> qui est levée car la <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Int16> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-804">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#4)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-805">La valeur de <paramref name="value" /> est inférieure à <see cref="F:System.Int16.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-805">The value of <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" />.</span></span>  
  
 <span data-ttu-id="90062-806">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-806">-or-</span></span>  
  
 <span data-ttu-id="90062-807">La valeur de <paramref name="value" /> est supérieure à <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-807">The value of <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-808">Valeur à convertir en entier 32 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-808">The value to convert to a 32-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="90062-809">Définit une conversion explicite d’un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d’entier 32 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-809">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 32-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="90062-810">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-810">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-811">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-811">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-812">Compilateurs de langage n’exécutent pas automatiquement cette conversion, car elle peut impliquer une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-812">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="90062-813">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` ou `CInt` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-813">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CInt` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-814">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-814">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="90062-815">Étant donné que cette opération définit une conversion restrictive, elle peut lever une <xref:System.OverflowException> au moment de l’exécution si le <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Int32> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-815">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span> <span data-ttu-id="90062-816">Il n’existe aucune perte de précision dans la boîte <xref:System.Int16> valeur si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="90062-816">There is no loss of precision in the resulting <xref:System.Int16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="90062-817">L’exemple suivant illustre la conversion de <xref:System.Numerics.BigInteger> à <xref:System.Int32> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-817">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int32> values.</span></span> <span data-ttu-id="90062-818">Il gère également une <xref:System.OverflowException> qui est levée car la <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Int32> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-818">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#5)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-819">La valeur de <paramref name="value" /> est inférieure à <see cref="F:System.Int32.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-819">The value of <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" />.</span></span>  
  
 <span data-ttu-id="90062-820">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-820">-or-</span></span>  
  
 <span data-ttu-id="90062-821">La valeur de <paramref name="value" /> est supérieure à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-821">The value of <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-822">Valeur à convertir en entier 64 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-822">The value to convert to a 64-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="90062-823">Définit une conversion explicite d’un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d’entier 64 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-823">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="90062-824">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-824">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-825">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-825">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-826">Compilateurs de langage n’exécutent pas automatiquement cette conversion, car elle peut impliquer une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-826">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="90062-827">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` ou `CLng` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-827">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CLng` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-828">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-828">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="90062-829">Étant donné que cette opération définit une conversion restrictive, elle peut lever une <xref:System.OverflowException> au moment de l’exécution si le <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Int64> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-829">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span> 

## Examples
 <span data-ttu-id="90062-830">L’exemple suivant illustre la conversion de <xref:System.Numerics.BigInteger> à <xref:System.Int64> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-830">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int64> values.</span></span> <span data-ttu-id="90062-831">Il gère également une <xref:System.OverflowException> qui est levée car la <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Int64> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-831">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#6)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-832">La valeur de <paramref name="value" /> est inférieure à <see cref="F:System.Int64.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-832">The value of <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" />.</span></span>  
  
 <span data-ttu-id="90062-833">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-833">-or-</span></span>  
  
 <span data-ttu-id="90062-834">La valeur de <paramref name="value" /> est supérieure à <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-834">The value of <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator sbyte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::SByte(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-835">Valeur à convertir en valeur 8 bits signée.</span><span class="sxs-lookup"><span data-stu-id="90062-835">The value to convert to a signed 8-bit value.</span></span></param>
        <summary><span data-ttu-id="90062-836">Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur 8 bits signée.</span><span class="sxs-lookup"><span data-stu-id="90062-836">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a signed 8-bit value.</span></span>  
  
 <span data-ttu-id="90062-837">Cette API n'est pas conforme CLS.</span><span class="sxs-lookup"><span data-stu-id="90062-837">This API is not CLS-compliant.</span></span> <span data-ttu-id="90062-838">L’alternative conforme est <see cref="T:System.Int16" />.</span><span class="sxs-lookup"><span data-stu-id="90062-838">The compliant alternative is <see cref="T:System.Int16" />.</span></span></summary>
        <returns><span data-ttu-id="90062-839">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-839">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-840">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-840">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-841">Compilateurs de langage n’exécutent pas automatiquement cette conversion, car elle peut impliquer une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-841">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="90062-842">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` ou `CSByte` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-842">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSByte` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-843">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-843">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="90062-844">Étant donné que cette opération définit une conversion restrictive, elle peut lever une <xref:System.OverflowException> au moment de l’exécution si le <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.SByte> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-844">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span> <span data-ttu-id="90062-845">Il n’existe aucune perte de précision dans la boîte <xref:System.SByte> valeur si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="90062-845">There is no loss of precision in the resulting <xref:System.SByte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="90062-846">L’exemple suivant illustre la conversion de <xref:System.Numerics.BigInteger> à <xref:System.SByte> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-846">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.SByte> values.</span></span> <span data-ttu-id="90062-847">Il gère également une <xref:System.OverflowException> qui est levée car la <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.SByte> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-847">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#7)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-848">La valeur de <paramref name="value" /> est inférieure à <see cref="F:System.SByte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-848">The value of <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" />.</span></span>  
  
 <span data-ttu-id="90062-849">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-849">-or-</span></span>  
  
 <span data-ttu-id="90062-850">La valeur de <paramref name="value" /> est supérieure à <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-850">The value of <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-851">Valeur à convertir en valeur à virgule flottante simple précision.</span><span class="sxs-lookup"><span data-stu-id="90062-851">The value to convert to a single-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="90062-852">Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur à virgule flottante simple précision.</span><span class="sxs-lookup"><span data-stu-id="90062-852">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a single-precision floating-point value.</span></span></summary>
        <returns><span data-ttu-id="90062-853">Objet qui contient la représentation la plus proche possible du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-853">An object that contains the closest possible representation of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-854">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-854">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-855">Compilateurs de langage n’exécutent pas automatiquement cette conversion, car elle peut impliquer une perte de données ou une perte de précision.</span><span class="sxs-lookup"><span data-stu-id="90062-855">Language compilers do not perform this conversion automatically because it can involve data loss or a loss of precision.</span></span> <span data-ttu-id="90062-856">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` ou `CSng` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-856">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSng` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-857">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-857">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="90062-858">Étant donné que la <xref:System.Numerics.BigInteger> valeur peut être à l’extérieur de la plage de la <xref:System.Single> de type de données, cette opération est une conversion restrictive.</span><span class="sxs-lookup"><span data-stu-id="90062-858">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Single> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="90062-859">Si la conversion échoue, il ne lève pas une <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="90062-859">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="90062-860">Au lieu de cela, si le <xref:System.Numerics.BigInteger> la valeur est inférieure à <xref:System.Single.MinValue?displayProperty=nameWithType>, résultant <xref:System.Single> valeur est <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-860">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Single.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90062-861">Si le <xref:System.Numerics.BigInteger> valeur est supérieure à <xref:System.Single.MaxValue?displayProperty=nameWithType>, résultant <xref:System.Single> valeur est <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-861">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="90062-862">La conversion d’un <xref:System.Numerics.BigInteger> à un <xref:System.Single> peut impliquer une perte de précision.</span><span class="sxs-lookup"><span data-stu-id="90062-862">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Single> may involve a loss of precision.</span></span> <span data-ttu-id="90062-863">Dans certains cas, la perte de précision peut entraîner l’opération de conversion réussisse même si le <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.Single> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-863">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Single> data type.</span></span> <span data-ttu-id="90062-864">L'exemple suivant illustre cette situation.</span><span class="sxs-lookup"><span data-stu-id="90062-864">The following example provides an illustration.</span></span> <span data-ttu-id="90062-865">Il assigne la valeur maximale d’un <xref:System.Single> à deux <xref:System.Numerics.BigInteger> variables, incrémente une <xref:System.Numerics.BigInteger> variable par 9, 999e291 et teste l’égalité les deux variables.</span><span class="sxs-lookup"><span data-stu-id="90062-865">It assigns the maximum value of a <xref:System.Single> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="90062-866">Comme prévu, l’appel à la <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> méthode montre qu’elles sont inégales.</span><span class="sxs-lookup"><span data-stu-id="90062-866">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="90062-867">Toutefois, la conversion de la plus grande <xref:System.Numerics.BigInteger> valeur en un <xref:System.Single> réussit, bien que le <xref:System.Numerics.BigInteger> valeur dépasse maintenant <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-867">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Single> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#5)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#5)]   



## Examples
 <span data-ttu-id="90062-868">L’exemple suivant illustre la conversion de <xref:System.Numerics.BigInteger> à <xref:System.Single> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-868">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Single> values.</span></span>   
     
 [!code-csharp[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#8)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ushort (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt16(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-869">Valeur à convertir en entier 16 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-869">The value to convert to an unsigned 16-bit integer.</span></span></param>
        <summary><span data-ttu-id="90062-870">Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur entière 16 bits non signée.</span><span class="sxs-lookup"><span data-stu-id="90062-870">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 16-bit integer value.</span></span>  
  
 <span data-ttu-id="90062-871">Cette API n'est pas conforme CLS.</span><span class="sxs-lookup"><span data-stu-id="90062-871">This API is not CLS-compliant.</span></span> <span data-ttu-id="90062-872">L’alternative conforme est <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="90062-872">The compliant alternative is <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="90062-873">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-873">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-874">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-874">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-875">Compilateurs de langage n’exécutent pas automatiquement cette conversion, car elle peut impliquer une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-875">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="90062-876">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` ou `CUShort` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-876">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUShort` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-877">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-877">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="90062-878">Étant donné que cette opération définit une conversion restrictive, elle peut lever une <xref:System.OverflowException> au moment de l’exécution si le <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.UInt16> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-878">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span> <span data-ttu-id="90062-879">Il n’existe aucune perte de précision dans la boîte <xref:System.UInt16> valeur si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="90062-879">There is no loss of precision in the resulting <xref:System.UInt16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="90062-880">L’exemple suivant illustre la conversion de <xref:System.Numerics.BigInteger> à <xref:System.UInt16> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-880">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt16> values.</span></span> <span data-ttu-id="90062-881">Il gère également une <xref:System.OverflowException> qui est levée car la <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.UInt16> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-881">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#9)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#9)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-882">La valeur de <paramref name="value" /> est inférieure à <see cref="F:System.UInt16.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-882">The value of <paramref name="value" /> is less than <see cref="F:System.UInt16.MinValue" />.</span></span>  
  
 <span data-ttu-id="90062-883">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-883">-or-</span></span>  
  
 <span data-ttu-id="90062-884">La valeur de <paramref name="value" /> est supérieure à <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-884">The value of <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-885">Valeur à convertir en entier 32 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-885">The value to convert to an unsigned 32-bit integer.</span></span></param>
        <summary><span data-ttu-id="90062-886">Définit une conversion explicite d’un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d’entier 32 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-886">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 32-bit integer value.</span></span>  
  
 <span data-ttu-id="90062-887">Cette API n'est pas conforme CLS.</span><span class="sxs-lookup"><span data-stu-id="90062-887">This API is not CLS-compliant.</span></span> <span data-ttu-id="90062-888">L’alternative conforme est <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="90062-888">The compliant alternative is <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="90062-889">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-889">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-890">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-890">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-891">Compilateurs de langage n’exécutent pas automatiquement cette conversion, car elle peut impliquer une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-891">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="90062-892">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` ou `CUInt` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-892">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUInt` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-893">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-893">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="90062-894">Étant donné que cette opération définit une conversion restrictive, elle peut lever une <xref:System.OverflowException> au moment de l’exécution si le <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.UInt32> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-894">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span> <span data-ttu-id="90062-895">Il n’existe aucune perte de précision dans la boîte <xref:System.UInt32> valeur si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="90062-895">There is no loss of precision in the resulting <xref:System.UInt32> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="90062-896">L’exemple suivant illustre la conversion de <xref:System.Numerics.BigInteger> à <xref:System.UInt32> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-896">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt32> values.</span></span> <span data-ttu-id="90062-897">Il gère également une <xref:System.OverflowException> qui est levée car la <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.UInt32> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-897">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#10)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#10)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-898">La valeur de <paramref name="value" /> est inférieure à <see cref="F:System.UInt32.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-898">The value of <paramref name="value" /> is less than <see cref="F:System.UInt32.MinValue" />.</span></span>  
  
 <span data-ttu-id="90062-899">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-899">-or-</span></span>  
  
 <span data-ttu-id="90062-900">La valeur de <paramref name="value" /> est supérieure à <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-900">The value of <paramref name="value" /> is greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-901">Valeur à convertir en entier 64 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-901">The value to convert to an unsigned 64-bit integer.</span></span></param>
        <summary><span data-ttu-id="90062-902">Définit une conversion explicite d’un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d’entier 64 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-902">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 64-bit integer value.</span></span>  
  
 <span data-ttu-id="90062-903">Cette API n'est pas conforme CLS.</span><span class="sxs-lookup"><span data-stu-id="90062-903">This API is not CLS-compliant.</span></span> <span data-ttu-id="90062-904">L’alternative conforme est <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="90062-904">The compliant alternative is <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="90062-905">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-905">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-906">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-906">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-907">Compilateurs de langage n’exécutent pas automatiquement cette conversion, car elle peut impliquer une perte de données.</span><span class="sxs-lookup"><span data-stu-id="90062-907">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="90062-908">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` ou `CULng` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-908">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CULng` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-909">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-909">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="90062-910">Étant donné que cette opération définit une conversion restrictive, elle peut lever une <xref:System.OverflowException> au moment de l’exécution si le <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.UInt64> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-910">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span> <span data-ttu-id="90062-911">Il n’existe aucune perte de précision dans la boîte <xref:System.UInt64> valeur si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="90062-911">There is no loss of precision in the resulting <xref:System.UInt64> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="90062-912">L’exemple suivant illustre la conversion de <xref:System.Numerics.BigInteger> à <xref:System.UInt64> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-912">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt64> values.</span></span> <span data-ttu-id="90062-913">Il gère également une <xref:System.OverflowException> qui est levée car la <xref:System.Numerics.BigInteger> valeur est en dehors de la plage de la <xref:System.UInt64> type de données.</span><span class="sxs-lookup"><span data-stu-id="90062-913">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#11)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#11)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-914">La valeur de <paramref name="value" /> est inférieure à <see cref="F:System.UInt64.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-914">The value of <paramref name="value" /> is less than <see cref="F:System.UInt64.MinValue" />.</span></span>  
  
 <span data-ttu-id="90062-915">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-915">-or-</span></span>  
  
 <span data-ttu-id="90062-916">La valeur de <paramref name="value" /> est supérieure à <see cref="F:System.UInt64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="90062-916">The value of <paramref name="value" /> is greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Single) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-917">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-917">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="90062-918">Définit une conversion explicite d'une valeur <see cref="T:System.Single" /> en valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-918">Defines an explicit conversion of a <see cref="T:System.Single" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-919">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-919">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-920">Toute partie fractionnaire de la `value` paramètre est tronqué avant la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-920">Any fractional part of the `value` parameter is truncated before conversion.</span></span>
 
 <span data-ttu-id="90062-921">Les surcharges de la <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> méthode définissent les types auxquels ou à partir de laquelle un <xref:System.Numerics.BigInteger> objet peut être converti.</span><span class="sxs-lookup"><span data-stu-id="90062-921">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="90062-922">Étant donné que la conversion de <xref:System.Single> à <xref:System.Numerics.BigInteger> peut impliquer de tronquer la partie décimale de `value`, les compilateurs de langage n’exécutent pas automatiquement cette conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-922">Because the conversion from <xref:System.Single> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="90062-923">Au lieu de cela, ils effectuent la conversion uniquement si un opérateur de cast (en c#) ou une fonction de conversion (tel que `CType` en Visual Basic) est utilisée.</span><span class="sxs-lookup"><span data-stu-id="90062-923">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="90062-924">Sinon, ils affichent une erreur du compilateur.</span><span class="sxs-lookup"><span data-stu-id="90062-924">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="90062-925">Pour les langages qui ne prennent pas en charge les opérateurs personnalisés, la méthode de remplacement est <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-925">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="90062-926">L’exemple suivant convertit les éléments individuels dans un tableau de <xref:System.Single> valeurs <xref:System.Numerics.BigInteger> objets, puis affiche le résultat de chaque conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-926">The following example converts the individual elements in an array of <xref:System.Single> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="90062-927">Notez que toute fractions de seconde dans le cadre d’un <xref:System.Single> valeur est tronquée lors de la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-927">Note that any fractional part of a <xref:System.Single> value is truncated during the conversion.</span></span>
 
 [!code-csharp[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#3)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#3)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="90062-928">La valeur de <paramref name="value" /> est <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="90062-928">The value of <paramref name="value" /> is <see cref="F:System.Single.NaN" />.</span></span>  
  
 <span data-ttu-id="90062-929">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-929">-or-</span></span>  
  
 <span data-ttu-id="90062-930">La valeur de <paramref name="value" /> est <see cref="F:System.Single.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="90062-930">The value of <paramref name="value" /> is <see cref="F:System.Single.PositiveInfinity" />.</span></span>
  
 <span data-ttu-id="90062-931">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-931">-or-</span></span>  
  
 <span data-ttu-id="90062-932">La valeur de <paramref name="value" /> est <see cref="F:System.Single.NegativeInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="90062-932">The value of <paramref name="value" /> is <see cref="F:System.Single.NegativeInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-933">Retourne une valeur qui indique si une valeur spécifique est supérieure à une autre valeur spécifique.</span><span class="sxs-lookup"><span data-stu-id="90062-933">Returns a value that indicates whether a specified value is greater than another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(long left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-934">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-934">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-935">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-935">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-936">Retourne une valeur qui indique si un entier 64 bits signé est supérieur à une valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-936">Returns a value that indicates whether a 64-bit signed integer is greater than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-937"><see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-937"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-938">Le <xref:System.Numerics.BigInteger.op_GreaterThan%2A> méthode définit l’opération de l’opérateur supérieur à pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-938">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-939">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-939">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)]
 [!code-vb[System.Numerics.BigInteger.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)]  
  
 <span data-ttu-id="90062-940">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> méthode d’instance à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-940">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span> <span data-ttu-id="90062-941">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-941">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)]  
  
 <span data-ttu-id="90062-942">Si `left` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-942">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="90062-943">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-943">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, long right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-944">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-944">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-945">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-945">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-946">Retourne une valeur qui indique si <see cref="T:System.Numerics.BigInteger" /> est supérieur à une valeur d'entier 64 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-946">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> is greater than a 64-bit signed integer value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-947"><see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-947"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-948">Le <xref:System.Numerics.BigInteger.op_GreaterThan%2A> méthode définit l’opération de l’opérateur supérieur à pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-948">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-949">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-949">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)]
 [!code-vb[System.Numerics.BigInteger.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)]  
  
 <span data-ttu-id="90062-950">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-950">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-951">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-951">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)]  
  
 <span data-ttu-id="90062-952">Si `right` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-952">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="90062-953">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-953">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-954">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-954">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-955">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-955">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-956">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure à une autre valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-956">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-957"><see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-957"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-958">Le <xref:System.Numerics.BigInteger.op_GreaterThan%2A> méthode définit l’opération de l’opérateur supérieur à pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-958">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-959">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-959">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)]
 [!code-vb[System.Numeric.BigInteger.Class#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)]  
  
 <span data-ttu-id="90062-960">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-960">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-961">Elles peuvent également appeler le <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-961">They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)]  
  
 <span data-ttu-id="90062-962">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-962">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-963">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-963">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-964">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-964">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-965">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure à un entier 64 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-965">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-966"><see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-966"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-967">Le <xref:System.Numerics.BigInteger.op_GreaterThan%2A> méthode définit l’opération de l’opérateur supérieur à pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-967">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-968">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-968">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)]
 [!code-vb[System.Numerics.BigInteger.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)]  
  
 <span data-ttu-id="90062-969">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-969">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-970">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-970">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-971">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-971">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-972">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-972">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-973">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure à un entier 64 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-973">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-974"><see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-974"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-975">Le <xref:System.Numerics.BigInteger.op_GreaterThan%2A> méthode définit l’opération de l’opérateur supérieur à pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-975">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-976">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-976">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)]
 [!code-vb[System.Numerics.BigInteger.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)]  
  
 <span data-ttu-id="90062-977">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-977">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-978">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-978">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-979">Retourne une valeur qui indique si une valeur spécifique est supérieure ou égale à une autre valeur spécifique.</span><span class="sxs-lookup"><span data-stu-id="90062-979">Returns a value that indicates whether a specified value is greater than or equal to another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(long left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-980">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-980">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-981">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-981">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-982">Retourne une valeur qui indique si un entier 64 bits signé est supérieur ou égal à une valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-982">Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-983"><see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-983"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-984">Le <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> méthode définit l’opération de la valeur supérieure ou égale à l’opérateur pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-984">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-985">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-985">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)]
 [!code-vb[System.Numerics.BigInteger.Operators#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)]  
  
 <span data-ttu-id="90062-986">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-986">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-987">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-987">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)]  
  
 <span data-ttu-id="90062-988">Si `left` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-988">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="90062-989">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-989">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, long right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-990">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-990">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-991">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-991">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-992">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure ou égale à une valeur d'entier 64 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-992">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit signed integer value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-993"><see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-993"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-994">Le <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> méthode définit l’opération de la valeur supérieure ou égale à l’opérateur pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-994">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-995">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-995">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)]
 [!code-vb[System.Numerics.BigInteger.Operators#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)]  
  
 <span data-ttu-id="90062-996">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-996">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-997">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-997">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)]  
  
 <span data-ttu-id="90062-998">Si `right` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-998">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="90062-999">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-999">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1000">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1000">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1001">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1001">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1002">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure ou égale à une autre valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1002">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1003"><see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1003"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1004">Le <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> méthode définit l’opération de la valeur supérieure ou égale à l’opérateur pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1004">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1005">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1005">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)]
 [!code-vb[System.Numeric.BigInteger.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)]  
  
 <span data-ttu-id="90062-1006">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1006">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1007">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1007">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)]  
  
 <span data-ttu-id="90062-1008">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1008">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1009">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1009">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1010">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1010">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1011">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure ou égale à une valeur entière 64 bits non signée.</span><span class="sxs-lookup"><span data-stu-id="90062-1011">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit unsigned integer value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1012"><see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1012"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1013">Le <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> méthode définit l’opération de la valeur supérieure ou égale à l’opérateur pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1013">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1014">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1014">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)]
 [!code-vb[System.Numerics.BigInteger.Operators#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)]  
  
 <span data-ttu-id="90062-1015">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1015">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1016">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1016">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)]  
  
 <span data-ttu-id="90062-1017">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1017">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1018">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1018">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1019">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1019">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1020">Retourne une valeur qui indique si un entier 64 bits non signé est supérieur ou égal à une valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1020">Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1021"><see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1021"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1022">Le <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> méthode définit l’opération de la valeur supérieure ou égale à l’opérateur pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1022">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1023">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1023">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)]
 [!code-vb[System.Numerics.BigInteger.Operators#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)]  
  
 <span data-ttu-id="90062-1024">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1024">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1025">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1025">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)]  
  
 <span data-ttu-id="90062-1026">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1026">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-1027">Définit une conversion implicite entre un objet <see cref="T:System.Numerics.BigInteger" /> et un autre type.</span><span class="sxs-lookup"><span data-stu-id="90062-1027">Defines an implicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1028">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1028">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="90062-1029">Définit une conversion implicite d'un octet non signé en valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1029">Defines an implicit conversion of an unsigned byte to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-1030">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1030">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1031">Toute partie fractionnaire de la `value` paramètre est tronqué avant la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-1031">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="90062-1032">Pour les langages qui ne prennent pas en charge les opérateurs implicites, la méthode de remplacement est <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1032">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="90062-1033">Les surcharges de la <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> méthode définissent les types dans ou depuis lequel un compilateur peut convertir automatiquement un <xref:System.Numerics.BigInteger> valeur sans opérateur de cast explicite (en c#) ou un appel à une fonction de conversion (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="90062-1033">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="90062-1034">Ils sont des conversions étendues qui n’impliquent pas de perte de données et ne lèvent pas d’un <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="90062-1034">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="90062-1035">Cette surcharge permet au compilateur de gérer les conversions d’un <xref:System.Byte> valeur un <xref:System.Numerics.BigInteger> valeur, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-1035">This overload lets the compiler handle conversions from a <xref:System.Byte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1036">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1036">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="90062-1037">Définit une conversion implicite d'un entier 16 bits signé en valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1037">Defines an implicit conversion of a signed 16-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-1038">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1038">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1039">Pour les langages qui ne prennent pas en charge les opérateurs implicites, la méthode de remplacement est <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1039">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="90062-1040">Les surcharges de la <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> méthode définissent les types dans ou depuis lequel un compilateur peut convertir automatiquement un <xref:System.Numerics.BigInteger> valeur sans opérateur de cast explicite (en c#) ou un appel à une fonction de conversion (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="90062-1040">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="90062-1041">Ils sont des conversions étendues qui n’impliquent pas de perte de données et ne lèvent pas d’un <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="90062-1041">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="90062-1042">Cette surcharge permet au compilateur de gérer les conversions d’un <xref:System.Int16> valeur un <xref:System.Numerics.BigInteger> valeur, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-1042">This overload lets the compiler handle conversions from a <xref:System.Int16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#2)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1043">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1043">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="90062-1044">Définit une conversion implicite d’un entier 32 bits signé en valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1044">Defines an implicit conversion of a signed 32-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-1045">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1045">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1046">Pour les langages qui ne prennent pas en charge les opérateurs implicites, la méthode de remplacement est <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1046">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>  

 <span data-ttu-id="90062-1047">Les surcharges de la <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> méthode définissent les types dans ou depuis lequel un compilateur peut convertir automatiquement un <xref:System.Numerics.BigInteger> valeur sans opérateur de cast explicite (en c#) ou un appel à une fonction de conversion (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="90062-1047">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="90062-1048">Ils sont des conversions étendues qui n’impliquent pas de perte de données et ne lèvent pas d’un <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="90062-1048">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="90062-1049">Cette surcharge permet au compilateur de gérer les conversions d’un <xref:System.Int32> valeur un <xref:System.Numerics.BigInteger> valeur, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-1049">This overload lets the compiler handle conversions from a <xref:System.Int32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1050">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1050">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="90062-1051">Définit une conversion implicite d’un entier 64 bits signé en valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1051">Defines an implicit conversion of a signed 64-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-1052">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1052">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1053">Pour les langages qui ne prennent pas en charge les opérateurs implicites, la méthode de remplacement est <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1053">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>.</span></span>   
 
 <span data-ttu-id="90062-1054">Les surcharges de la <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> méthode définissent les types dans ou depuis lequel un compilateur peut convertir automatiquement un <xref:System.Numerics.BigInteger> valeur sans opérateur de cast explicite (en c#) ou un appel à une fonction de conversion (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="90062-1054">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="90062-1055">Ils sont des conversions étendues qui n’impliquent pas de perte de données et ne lèvent pas d’un <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="90062-1055">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="90062-1056">Cette surcharge permet au compilateur de gérer les conversions d’un <xref:System.Int64> valeur un <xref:System.Numerics.BigInteger> valeur, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-1056">This overload lets the compiler handle conversions from a <xref:System.Int64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#4)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1057">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1057">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="90062-1058">Définit une conversion implicite d'un entier 8 bits signé en valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1058">Defines an implicit conversion of an 8-bit signed integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
 <span data-ttu-id="90062-1059">Cette API n'est pas conforme CLS.</span><span class="sxs-lookup"><span data-stu-id="90062-1059">This API is not CLS-compliant.</span></span> <span data-ttu-id="90062-1060">L’alternative conforme est <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1060">The compliant alternative is <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</span></span></summary>
        <returns><span data-ttu-id="90062-1061">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1061">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1062">Pour les langages qui ne prennent pas en charge les opérateurs implicites, la méthode de remplacement est <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1062">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="90062-1063">Les surcharges de la <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> méthode définissent les types dans ou depuis lequel un compilateur peut convertir automatiquement un <xref:System.Numerics.BigInteger> valeur sans opérateur de cast explicite (en c#) ou un appel à une fonction de conversion (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="90062-1063">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="90062-1064">Ils sont des conversions étendues qui n’impliquent pas de perte de données et ne lèvent pas d’un <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="90062-1064">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="90062-1065">Cette surcharge permet au compilateur de gérer les conversions d’un <xref:System.SByte> valeur un <xref:System.Numerics.BigInteger> valeur, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-1065">This overload lets the compiler handle conversions from a <xref:System.SByte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#5)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1066">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1066">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="90062-1067">Définit une conversion implicite d'un entier 16 bits non signé en valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1067">Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
 <span data-ttu-id="90062-1068">Cette API n'est pas conforme CLS.</span><span class="sxs-lookup"><span data-stu-id="90062-1068">This API is not CLS-compliant.</span></span> <span data-ttu-id="90062-1069">L’alternative conforme est <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1069">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</span></span></summary>
        <returns><span data-ttu-id="90062-1070">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1070">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1071">Pour les langages qui ne prennent pas en charge les opérateurs implicites, la méthode de remplacement est <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1071">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="90062-1072">Les surcharges de la <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> méthode définissent les types dans ou depuis lequel un compilateur peut convertir automatiquement un <xref:System.Numerics.BigInteger> valeur sans opérateur de cast explicite (en c#) ou un appel à une fonction de conversion (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="90062-1072">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="90062-1073">Ils sont des conversions étendues qui n’impliquent pas de perte de données et ne lèvent pas d’un <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="90062-1073">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="90062-1074">Cette surcharge permet au compilateur de gérer les conversions d’un <xref:System.UInt16> valeur un <xref:System.Numerics.BigInteger> valeur, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-1074">This overload lets the compiler handle conversions from a <xref:System.UInt16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#6)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1075">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1075">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="90062-1076">Définit une conversion implicite d’un entier 32 bits non signé en valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1076">Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
 <span data-ttu-id="90062-1077">Cette API n'est pas conforme CLS.</span><span class="sxs-lookup"><span data-stu-id="90062-1077">This API is not CLS-compliant.</span></span> <span data-ttu-id="90062-1078">L’alternative conforme est <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1078">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</span></span></summary>
        <returns><span data-ttu-id="90062-1079">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1079">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1080">Pour les langages qui ne prennent pas en charge les opérateurs implicites, la méthode de remplacement est <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1080">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="90062-1081">Les surcharges de la <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> méthode définissent les types dans ou depuis lequel un compilateur peut convertir automatiquement un <xref:System.Numerics.BigInteger> valeur sans opérateur de cast explicite (en c#) ou un appel à une fonction de conversion (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="90062-1081">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="90062-1082">Ils sont des conversions étendues qui n’impliquent pas de perte de données et ne lèvent pas d’un <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="90062-1082">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="90062-1083">Cette surcharge permet au compilateur de gérer les conversions d’un <xref:System.UInt32> valeur un <xref:System.Numerics.BigInteger> valeur, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-1083">This overload lets the compiler handle conversions from a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#7)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1084">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1084">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="90062-1085">Définit une conversion implicite d’un entier 64 bits non signé en valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1085">Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
 <span data-ttu-id="90062-1086">Cette API n'est pas conforme CLS.</span><span class="sxs-lookup"><span data-stu-id="90062-1086">This API is not CLS-compliant.</span></span> <span data-ttu-id="90062-1087">L’alternative conforme est <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1087">The compliant alternative is <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="90062-1088">Objet qui contient la valeur du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1088">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1089">Pour les langages qui ne prennent pas en charge les opérateurs implicites, la méthode de remplacement est <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1089">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="90062-1090">Les surcharges de la <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> méthode définissent les types dans ou depuis lequel un compilateur peut convertir automatiquement un <xref:System.Numerics.BigInteger> valeur sans opérateur de cast explicite (en c#) ou un appel à une fonction de conversion (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="90062-1090">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="90062-1091">Ils sont des conversions étendues qui n’impliquent pas de perte de données et ne lèvent pas d’un <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="90062-1091">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="90062-1092">Cette surcharge permet au compilateur de gérer les conversions d’un <xref:System.UInt64> valeur un <xref:System.Numerics.BigInteger> valeur, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-1092">This overload lets the compiler handle conversions from a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#8)]   

 ]]></format>
        </remarks>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ++ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Increment(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Increment (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ++(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1093">Valeur à incrémenter.</span><span class="sxs-lookup"><span data-stu-id="90062-1093">The value to increment.</span></span></param>
        <summary><span data-ttu-id="90062-1094">Incrémente une valeur <see cref="T:System.Numerics.BigInteger" /> de 1.</span><span class="sxs-lookup"><span data-stu-id="90062-1094">Increments a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span></span></summary>
        <returns><span data-ttu-id="90062-1095">Valeur du paramètre <paramref name="value" /> incrémenté de 1.</span><span class="sxs-lookup"><span data-stu-id="90062-1095">The value of the <paramref name="value" /> parameter incremented by 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1096">Le <xref:System.Numerics.BigInteger.op_Increment%2A> méthode définit l’opération d’incrémentation pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1096">The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1097">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1097">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)]  
  
 <span data-ttu-id="90062-1098">Certains langages (par exemple, Visual Basic) qui ne disposent pas d’opérateur d’incrémentation ou ne prennent pas en charge la surcharge d’opérateur peuvent appeler la <xref:System.Numerics.BigInteger.op_Increment%2A> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1098">Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref:System.Numerics.BigInteger.op_Increment%2A> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)]  
  
 <span data-ttu-id="90062-1099">Étant donné que <xref:System.Numerics.BigInteger> les objets sont immuables, le <xref:System.Numerics.BigInteger.op_Increment%2A> opérateur crée un nouveau <xref:System.Numerics.BigInteger> objet dont la valeur est supérieur à la <xref:System.Numerics.BigInteger> objet représenté par `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1099">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Increment%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one more than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="90062-1100">Par conséquent, les appels répétés à <xref:System.Numerics.BigInteger.op_Increment%2A> peut s’avérer coûteux.</span><span class="sxs-lookup"><span data-stu-id="90062-1100">Therefore, repeated calls to <xref:System.Numerics.BigInteger.op_Increment%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="90062-1101">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1101">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Inequality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-1102">Retourne une valeur qui indique si deux valeurs numériques ne sont pas égales.</span><span class="sxs-lookup"><span data-stu-id="90062-1102">Returns a value that indicates whether two numeric values are not equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(long left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1103">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1103">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1104">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1104">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1105">Retourne une valeur qui indique si un entier 64 bits signé et une valeur <see cref="T:System.Numerics.BigInteger" /> ne sont pas égaux.</span><span class="sxs-lookup"><span data-stu-id="90062-1105">Returns a value that indicates whether a 64-bit signed integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1106"><see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1106"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1107">Le <xref:System.Numerics.BigInteger.op_Inequality%2A> méthode définit l’opération de l’opérateur d’inégalité pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1107">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1108">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1108">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)]
 [!code-vb[System.Numerics.BigInteger.Operators#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)]  
  
 <span data-ttu-id="90062-1109">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent tester l’inégalité en utilisant l’une des techniques suivantes :</span><span class="sxs-lookup"><span data-stu-id="90062-1109">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="90062-1110">Appel de la <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> l’instance de méthode, qui indique la relation entre un <xref:System.Numerics.BigInteger> et une valeur d’entier long signé.</span><span class="sxs-lookup"><span data-stu-id="90062-1110">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="90062-1111">Appel de la <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> méthode et en inversant sa valeur de l’instance.</span><span class="sxs-lookup"><span data-stu-id="90062-1111">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method and reversing its value.</span></span>  
  
 <span data-ttu-id="90062-1112">Si `left` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-1112">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, long right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1113">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1113">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1114">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1114">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1115">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> et un entier 64 bits signé ne sont pas égaux.</span><span class="sxs-lookup"><span data-stu-id="90062-1115">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit signed integer are not equal.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1116"><see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1116"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1117">Le <xref:System.Numerics.BigInteger.op_Inequality%2A> méthode définit l’opération de l’opérateur d’inégalité pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1117">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1118">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1118">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)]
 [!code-vb[System.Numerics.BigInteger.Operators#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)]  
  
 <span data-ttu-id="90062-1119">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent tester l’inégalité en utilisant l’une des techniques suivantes :</span><span class="sxs-lookup"><span data-stu-id="90062-1119">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="90062-1120">Appel de la <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> (méthode), ce qui indique la relation entre un <xref:System.Numerics.BigInteger> et une valeur d’entier long signé.</span><span class="sxs-lookup"><span data-stu-id="90062-1120">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="90062-1121">Appel de la <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> méthode et en inversant sa valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1121">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="90062-1122">Si `right` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-1122">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="90062-1123">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1123">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1124">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1124">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1125">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1125">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1126">Retourne une valeur qui indique si deux objets <see cref="T:System.Numerics.BigInteger" /> ont des valeurs différentes.</span><span class="sxs-lookup"><span data-stu-id="90062-1126">Returns a value that indicates whether two <see cref="T:System.Numerics.BigInteger" /> objects have different values.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1127"><see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1127"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1128">Le <xref:System.Numerics.BigInteger.op_Inequality%2A> méthode définit l’opération de l’opérateur d’inégalité pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1128">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1129">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1129">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)]
 [!code-vb[System.Numeric.BigInteger.Class#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)]  
  
 <span data-ttu-id="90062-1130">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent tester l’inégalité en utilisant l’une des techniques suivantes :</span><span class="sxs-lookup"><span data-stu-id="90062-1130">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="90062-1131">Appel de la <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> (méthode), ce qui indique la relation entre deux <xref:System.Numerics.BigInteger> objets.</span><span class="sxs-lookup"><span data-stu-id="90062-1131">Calling the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method, which indicates the relationship between two <xref:System.Numerics.BigInteger> objects.</span></span>  
  
-   <span data-ttu-id="90062-1132">Appel de la <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> méthode et en inversant sa valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1132">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="90062-1133">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1133">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1134">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1134">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1135">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1135">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1136">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> et un entier 64 bits non signé ne sont pas égaux.</span><span class="sxs-lookup"><span data-stu-id="90062-1136">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit unsigned integer are not equal.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1137"><see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1137"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1138">Le <xref:System.Numerics.BigInteger.op_Inequality%2A> méthode définit l’opération de l’opérateur d’inégalité pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1138">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1139">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1139">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)]
 [!code-vb[System.Numerics.BigInteger.Operators#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)]  
  
 <span data-ttu-id="90062-1140">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent tester l’inégalité en utilisant l’une des techniques suivantes :</span><span class="sxs-lookup"><span data-stu-id="90062-1140">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="90062-1141">Appel de la <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> (méthode), ce qui indique la relation entre un <xref:System.Numerics.BigInteger> et une valeur d’entier long non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-1141">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="90062-1142">Appel de la <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> méthode et en inversant sa valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1142">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1143">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1143">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1144">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1144">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1145">Retourne une valeur qui indique si un entier 64 bits non signé et une valeur <see cref="T:System.Numerics.BigInteger" /> ne sont pas égaux.</span><span class="sxs-lookup"><span data-stu-id="90062-1145">Returns a value that indicates whether a 64-bit unsigned integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1146"><see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1146"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1147">Le <xref:System.Numerics.BigInteger.op_Inequality%2A> méthode définit l’opération de l’opérateur d’inégalité pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1147">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1148">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1148">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)]
 [!code-vb[System.Numerics.BigInteger.Operators#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)]  
  
 <span data-ttu-id="90062-1149">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent tester l’inégalité en utilisant l’une des techniques suivantes :</span><span class="sxs-lookup"><span data-stu-id="90062-1149">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="90062-1150">Appel de la <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> (méthode), ce qui indique la relation entre un <xref:System.Numerics.BigInteger> et une valeur d’entier long non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-1150">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="90062-1151">Appel de la <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> méthode et en inversant sa valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1151">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_LeftShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &lt;&lt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_LeftShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;&lt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &lt;&lt;(System::Numerics::BigInteger value, int shift);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1152">Valeur dont les bits doivent être décalés.</span><span class="sxs-lookup"><span data-stu-id="90062-1152">The value whose bits are to be shifted.</span></span></param>
        <param name="shift"><span data-ttu-id="90062-1153">Nombre de bits de décalage vers la gauche de <c>value</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1153">The number of bits to shift <c>value</c> to the left.</span></span></param>
        <summary><span data-ttu-id="90062-1154">Décale une valeur <see cref="T:System.Numerics.BigInteger" /> d'un certain nombre de bits vers la gauche.</span><span class="sxs-lookup"><span data-stu-id="90062-1154">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the left.</span></span></summary>
        <returns><span data-ttu-id="90062-1155">Valeur décalée vers la gauche en fonction du nombre de bits spécifié.</span><span class="sxs-lookup"><span data-stu-id="90062-1155">A value that has been shifted to the left by the specified number of bits.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1156">Le <xref:System.Numerics.BigInteger.op_LeftShift%2A> méthode définit l’opération de l’opérateur de décalage vers la gauche au niveau du bit pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1156">The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1157">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1157">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)]
 [!code-vb[System.Numerics.BigInteger.Operators#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)]  
  
> [!NOTE]
>  <span data-ttu-id="90062-1158">Contrairement à l’opération de décalage vers la gauche au niveau du bit avec les primitives entières, la <xref:System.Numerics.BigInteger.op_LeftShift%2A> méthode conserve le signe de l’original <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1158">Unlike the bitwise left-shift operation with integer primitives, the <xref:System.Numerics.BigInteger.op_LeftShift%2A> method preserves the sign of the original <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="90062-1159">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent exécuter une opération de décalage vers la gauche au niveau du bit en multipliant `value` par `BigInteger.Pow(2, shift)`.</span><span class="sxs-lookup"><span data-stu-id="90062-1159">Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying `value` by `BigInteger.Pow(2, shift)`.</span></span> <span data-ttu-id="90062-1160">L’exemple suivant montre que les résultats sont identiques à ceux de l’utilisation de cet opérateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1160">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)]
 [!code-vb[System.Numerics.BigInteger.Operators#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-1161">Retourne une valeur qui indique si une valeur spécifique est inférieure à une seconde valeur spécifique.</span><span class="sxs-lookup"><span data-stu-id="90062-1161">Returns a value that indicates whether a specified value is less than a second specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(long left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1162">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1162">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1163">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1163">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1164">Retourne une valeur qui indique si un entier 64 bits signé est inférieur à une valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1164">Returns a value that indicates whether a 64-bit signed integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1165"><see langword="true" /> si <paramref name="left" /> est inférieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1165"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1166">Le <xref:System.Numerics.BigInteger.op_LessThan%2A> méthode définit l’opération de l’opérateur inférieur à pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1166">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1167">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1167">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)]
 [!code-vb[System.Numerics.BigInteger.Operators#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)]  
  
 <span data-ttu-id="90062-1168">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1168">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1169">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1169">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)]  
  
 <span data-ttu-id="90062-1170">Si `left` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-1170">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="90062-1171">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1171">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, long right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1172">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1172">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1173">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1173">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1174">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure à un entier 64 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-1174">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1175"><see langword="true" /> si <paramref name="left" /> est inférieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1175"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1176">Le <xref:System.Numerics.BigInteger.op_LessThan%2A> méthode définit l’opération de l’opérateur inférieur à pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1176">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1177">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1177">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)]
 [!code-vb[System.Numerics.BigInteger.Operators#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)]  
  
 <span data-ttu-id="90062-1178">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1178">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1179">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1179">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)]  
  
 <span data-ttu-id="90062-1180">Si `right` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-1180">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="90062-1181">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1181">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1182">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1182">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1183">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1183">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1184">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure à une autre valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1184">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1185"><see langword="true" /> si <paramref name="left" /> est inférieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1185"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1186">Le <xref:System.Numerics.BigInteger.op_LessThan%2A> méthode définit l’opération de l’opérateur inférieur à pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1186">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1187">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1187">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)]
 [!code-vb[System.Numeric.BigInteger.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)]  
  
 <span data-ttu-id="90062-1188">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1188">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1189">Certains langages peuvent également appeler le <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1189">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)]  
  
 <span data-ttu-id="90062-1190">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1190">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1191">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1191">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1192">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1192">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1193">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure à un entier 64 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-1193">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1194"><see langword="true" /> si <paramref name="left" /> est inférieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1194"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1195">Le <xref:System.Numerics.BigInteger.op_LessThan%2A> méthode définit l’opération de l’opérateur inférieur à pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1195">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1196">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1196">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)]
 [!code-vb[System.Numerics.BigInteger.Operators#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)]  
  
 <span data-ttu-id="90062-1197">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1197">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1198">Elles peuvent également appeler le <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1198">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)]  
  
 <span data-ttu-id="90062-1199">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1199">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1200">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1200">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1201">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1201">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1202">Retourne une valeur qui indique si un entier 64 bits non signé est inférieur à une valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1202">Returns a value that indicates whether a 64-bit unsigned integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1203"><see langword="true" /> si <paramref name="left" /> est inférieur à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1203"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1204">Le <xref:System.Numerics.BigInteger.op_LessThan%2A> méthode définit l’opération de l’opérateur inférieur à pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1204">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1205">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1205">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)]
 [!code-vb[System.Numerics.BigInteger.Operators#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)]  
  
 <span data-ttu-id="90062-1206">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1206">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1207">Elles peuvent également appeler le <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1207">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)]  
  
 <span data-ttu-id="90062-1208">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1208">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-1209">Retourne une valeur qui indique si une valeur spécifique est inférieure ou égale à une autre valeur spécifique.</span><span class="sxs-lookup"><span data-stu-id="90062-1209">Returns a value that indicates whether a specified value is less than or equal to another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(long left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1210">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1210">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1211">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1211">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1212">Retourne une valeur qui indique si un entier 64 bits signé est inférieur ou égal à une valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1212">Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1213"><see langword="true" /> si <paramref name="left" /> est inférieur ou égal à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1213"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1214">Le <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> méthode définit l’opération de l’inférieur ou égal à l’opérateur pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1214">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1215">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1215">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)]
 [!code-vb[System.Numerics.BigInteger.Operators#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)]  
  
 <span data-ttu-id="90062-1216">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1216">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1217">Elles peuvent également appeler le <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1217">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)]  
  
 <span data-ttu-id="90062-1218">Si `left` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-1218">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="90062-1219">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1219">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, long right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1220">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1220">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1221">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1221">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1222">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure ou égale à un entier 64 bits signé.</span><span class="sxs-lookup"><span data-stu-id="90062-1222">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1223"><see langword="true" /> si <paramref name="left" /> est inférieur ou égal à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1223"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1224">Le <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> méthode définit l’opération de l’inférieur ou égal à l’opérateur pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1224">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1225">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1225">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)]
 [!code-vb[System.Numerics.BigInteger.Operators#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)]  
  
 <span data-ttu-id="90062-1226">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1226">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1227">Elles peuvent également appeler le <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1227">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)]  
  
 <span data-ttu-id="90062-1228">Si `right` est un <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, ou <xref:System.UInt32> valeur, il est converti implicitement en un <xref:System.Int64> valeur lorsque l’opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="90062-1228">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="90062-1229">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1229">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1230">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1230">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1231">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1231">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1232">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure ou égale à une autre valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1232">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1233"><see langword="true" /> si <paramref name="left" /> est inférieur ou égal à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1233"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1234">Le <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> méthode définit l’opération de l’inférieur ou égal à l’opérateur pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1234">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1235">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1235">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)]
 [!code-vb[System.Numeric.BigInteger.Class#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)]  
  
 <span data-ttu-id="90062-1236">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Compare%2A> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1236">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead.</span></span> <span data-ttu-id="90062-1237">Elles peuvent également appeler le <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1237">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)]  
  
 <span data-ttu-id="90062-1238">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1238">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1239">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1239">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1240">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1240">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1241">Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure ou égale à un entier 64 bits non signé.</span><span class="sxs-lookup"><span data-stu-id="90062-1241">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1242"><see langword="true" /> si <paramref name="left" /> est inférieur ou égal à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1242"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1243">Le <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> méthode définit l’opération de l’inférieur ou égal à l’opérateur pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1243">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1244">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1244">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)]
 [!code-vb[System.Numerics.BigInteger.Operators#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)]  
  
 <span data-ttu-id="90062-1245">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1245">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1246">Elles peuvent également appeler le <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1246">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)]  
  
 <span data-ttu-id="90062-1247">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1247">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1248">Première valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1248">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1249">Deuxième valeur à comparer.</span><span class="sxs-lookup"><span data-stu-id="90062-1249">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="90062-1250">Retourne une valeur qui indique si un entier 64 bits non signé est inférieur ou égal à une valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1250">Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1251"><see langword="true" /> si <paramref name="left" /> est inférieur ou égal à <paramref name="right" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1251"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1252">Le <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> méthode définit l’opération de l’inférieur ou égal à l’opérateur pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1252">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1253">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1253">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)]
 [!code-vb[System.Numerics.BigInteger.Operators#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)]  
  
 <span data-ttu-id="90062-1254">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1254">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="90062-1255">Elles peuvent également appeler le <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> (méthode) directement, comme l’exemple suivant montre le.</span><span class="sxs-lookup"><span data-stu-id="90062-1255">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)]  
  
 <span data-ttu-id="90062-1256">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1256">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_Modulus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator % (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Modulus(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Mod (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator %(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="90062-1257">Valeur à diviser.</span><span class="sxs-lookup"><span data-stu-id="90062-1257">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="90062-1258">Valeur par laquelle diviser.</span><span class="sxs-lookup"><span data-stu-id="90062-1258">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="90062-1259">Retourne le modulo de la division de deux valeurs <see cref="T:System.Numerics.BigInteger" /> spécifiques.</span><span class="sxs-lookup"><span data-stu-id="90062-1259">Returns the remainder that results from division with two specified <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="90062-1260">Reste de la division.</span><span class="sxs-lookup"><span data-stu-id="90062-1260">The remainder that results from the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1261">Le <xref:System.Numerics.BigInteger.op_Modulus%2A> méthode définit l’opération de l’opérateur modulo pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1261">The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1262">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1262">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)]
 [!code-vb[System.Numeric.BigInteger.Class#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)]  
  
 <span data-ttu-id="90062-1263">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1263">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="90062-1264">Le signe de la valeur retournée par l’opération modulo dépend du signe du `dividend`: si `dividend` est un nombre positif, l’opération modulo retourne un résultat positif ; s’il est négatif, l’opération modulo retourne un résultat négatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1264">The sign of the value returned by the modulus operation depends on the sign of `dividend`: If `dividend` is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result.</span></span> <span data-ttu-id="90062-1265">Le comportement de l’opération modulo avec <xref:System.Numerics.BigInteger> valeurs est identique à l’opération modulo avec d’autres types intégraux.</span><span class="sxs-lookup"><span data-stu-id="90062-1265">The behavior of the modulus operation with <xref:System.Numerics.BigInteger> values is identical to the modulus operation with other integral types.</span></span>  
  
 <span data-ttu-id="90062-1266">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1266">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="90062-1267"><paramref name="divisor" /> est égal à 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="90062-1267"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator * (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator *(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1268">Première valeur à multiplier.</span><span class="sxs-lookup"><span data-stu-id="90062-1268">The first value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="90062-1269">Seconde valeur à multiplier.</span><span class="sxs-lookup"><span data-stu-id="90062-1269">The second value to multiply.</span></span></param>
        <summary><span data-ttu-id="90062-1270">Multiplie deux valeurs <see cref="T:System.Numerics.BigInteger" /> spécifiées.</span><span class="sxs-lookup"><span data-stu-id="90062-1270">Multiplies two specified <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="90062-1271">Produit de <paramref name="left" /> et <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1271">The product of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1272">Le <xref:System.Numerics.BigInteger.op_Multiply%2A> méthode définit l’opération de l’opérateur de multiplication pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1272">The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1273">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1273">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)]
 [!code-vb[System.Numeric.BigInteger.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)]  
  
 <span data-ttu-id="90062-1274">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1274">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ~ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_OnesComplement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Not (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ~(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1275">Valeur entière.</span><span class="sxs-lookup"><span data-stu-id="90062-1275">An integer value.</span></span></param>
        <summary><span data-ttu-id="90062-1276">Retourne le complément à un au niveau du bit d'une valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1276">Returns the bitwise one's complement of a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-1277">Complément à un au niveau du bit de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1277">The bitwise one's complement of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1278">Le <xref:System.Numerics.BigInteger.op_OnesComplement%2A> méthode définit l’opération de bits d’un autre opérateur de complément pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1278">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method defines the operation of the bitwise one's complement operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1279">Inverse de l’opérateur de complément de bits de chaque bit d’une valeur numérique.</span><span class="sxs-lookup"><span data-stu-id="90062-1279">The bitwise one's complement operator reverses each bit in a numeric value.</span></span> <span data-ttu-id="90062-1280">Autrement dit, les bits dans `value` qui sont 0 sont définis sur 1 dans le résultat, et les bits sont 1 sont définies sur 0 dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="90062-1280">That is, bits in `value` that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result.</span></span> <span data-ttu-id="90062-1281">Le <xref:System.Numerics.BigInteger.op_OnesComplement%2A> méthode autorise le code suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1281">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)]  
  
 <span data-ttu-id="90062-1282">Les langues qui ne prennent pas en charge les opérateurs personnalisés peuvent être en mesure d’appeler le <xref:System.Numerics.BigInteger.op_OnesComplement%2A> (méthode) directement pour effectuer une opération de bits de compléter l’opération.</span><span class="sxs-lookup"><span data-stu-id="90062-1282">Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation.</span></span> <span data-ttu-id="90062-1283">Exemple :</span><span class="sxs-lookup"><span data-stu-id="90062-1283">For example:</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.OnesComplement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_RightShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &gt;&gt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_RightShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;&gt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &gt;&gt;(System::Numerics::BigInteger value, int shift);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1284">Valeur dont les bits doivent être décalés.</span><span class="sxs-lookup"><span data-stu-id="90062-1284">The value whose bits are to be shifted.</span></span></param>
        <param name="shift"><span data-ttu-id="90062-1285">Nombre de bits de décalage vers la droite de <c>value</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1285">The number of bits to shift <c>value</c> to the right.</span></span></param>
        <summary><span data-ttu-id="90062-1286">Décale une valeur <see cref="T:System.Numerics.BigInteger" /> d'un certain nombre de bits vers la droite.</span><span class="sxs-lookup"><span data-stu-id="90062-1286">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the right.</span></span></summary>
        <returns><span data-ttu-id="90062-1287">Valeur décalée vers la droite en fonction du nombre de bits spécifié.</span><span class="sxs-lookup"><span data-stu-id="90062-1287">A value that has been shifted to the right by the specified number of bits.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1288">Le <xref:System.Numerics.BigInteger.op_RightShift%2A> méthode définit l’opération de l’opérateur de décalage vers la droite au niveau du bit pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1288">The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1289">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1289">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)]
 [!code-vb[System.Numerics.BigInteger.Operators#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)]  
  
 <span data-ttu-id="90062-1290">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent exécuter une opération de décalage vers la droite au niveau du bit en divisant `value` par `BigInteger.Pow(2, shift)` et en soustrayant 1 fois `shift` pour les valeurs négatives.</span><span class="sxs-lookup"><span data-stu-id="90062-1290">Languages that do not support custom operators can perform a bitwise right-shift operation by dividing `value` by `BigInteger.Pow(2, shift)` and subtracting 1 times `shift` for negative values.</span></span> <span data-ttu-id="90062-1291">L’exemple suivant montre que les résultats sont identiques à ceux de l’utilisation de cet opérateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1291">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)]
 [!code-vb[System.Numerics.BigInteger.Operators#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)]  
  
 <span data-ttu-id="90062-1292">Si `shift` est supérieur ou égal au nombre de bits dans un nombre positif <xref:System.Numerics.BigInteger> valeur, le résultat de l’opération de décalage vers la droite est <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1292">If `shift` is greater than or equal to the number of bits in a positive <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90062-1293">Si `shift` est supérieur au nombre de bits dans un négatif <xref:System.Numerics.BigInteger> valeur, le résultat de l’opération de décalage vers la droite est <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1293">If `shift` is greater than the number of bits in a negative <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Subtraction(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1294">Valeur à laquelle appliquer la soustraction (diminuende).</span><span class="sxs-lookup"><span data-stu-id="90062-1294">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="90062-1295">Valeur à soustraire (diminuteur).</span><span class="sxs-lookup"><span data-stu-id="90062-1295">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="90062-1296">Soustrait une valeur <see cref="T:System.Numerics.BigInteger" /> d'une autre valeur <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1296">Subtracts a <see cref="T:System.Numerics.BigInteger" /> value from another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="90062-1297">Résultat de la soustraction de <paramref name="right" /> de <paramref name="left" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1297">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1298">Le <xref:System.Numerics.BigInteger.op_Subtraction%2A> méthode définit l’opération de l’opérateur de soustraction de <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1298">The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1299">Il permet de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1299">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)]
 [!code-vb[System.Numeric.BigInteger.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)]  
  
 <span data-ttu-id="90062-1300">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1300">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="90062-1301">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1301">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryNegation(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1302">Valeur à rendre négative.</span><span class="sxs-lookup"><span data-stu-id="90062-1302">The value to negate.</span></span></param>
        <summary><span data-ttu-id="90062-1303">Rend négative la valeur BigInteger spécifiée.</span><span class="sxs-lookup"><span data-stu-id="90062-1303">Negates a specified BigInteger value.</span></span></summary>
        <returns><span data-ttu-id="90062-1304">Résultat de la multiplication du paramètre <paramref name="value" /> par moins un (-1).</span><span class="sxs-lookup"><span data-stu-id="90062-1304">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1305">Le <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> méthode définit l’opération de l’opérateur de négation unaire (ou l’opérateur inverse additif) pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1305">The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1306">L’opération génère une valeur qui correspond à 0 (zéro) lorsqu’il est ajouté au nombre d’origine.</span><span class="sxs-lookup"><span data-stu-id="90062-1306">The operation produces a value that results in 0 (zero) when it is added to the original number.</span></span> <span data-ttu-id="90062-1307">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.Numerics.BigInteger.Negate%2A> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="90062-1307">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead.</span></span>  
  
 <span data-ttu-id="90062-1308">La méthode équivalente pour cet opérateur est <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="90062-1308">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="90062-1309">L’exemple suivant illustre trois façons d’exclure la valeur d’un <xref:System.Numerics.BigInteger> objet.</span><span class="sxs-lookup"><span data-stu-id="90062-1309">The following example illustrates three different ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryPlus(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1310">Valeur entière.</span><span class="sxs-lookup"><span data-stu-id="90062-1310">An integer value.</span></span></param>
        <summary><span data-ttu-id="90062-1311">Retourne la valeur de l'opérande <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1311">Returns the value of the <see cref="T:System.Numerics.BigInteger" /> operand.</span></span> <span data-ttu-id="90062-1312">(Le signe de l’opérande est inchangé.)</span><span class="sxs-lookup"><span data-stu-id="90062-1312">(The sign of the operand is unchanged.)</span></span></summary>
        <returns><span data-ttu-id="90062-1313">Valeur de l'opérande <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1313">The value of the <paramref name="value" /> operand.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1314">Le <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> méthode définit l’opération de l’opérateur positif unaire pour <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1314">The <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> method defines the operation of the unary positive operator for <xref:System.Numerics.BigInteger> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-1315">Convertit la représentation sous forme de chaîne d'un nombre en sa représentation <see cref="T:System.Numerics.BigInteger" /> équivalente.</span><span class="sxs-lookup"><span data-stu-id="90062-1315">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1316">Chaîne contenant le nombre à convertir.</span><span class="sxs-lookup"><span data-stu-id="90062-1316">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="90062-1317">Convertit la représentation sous forme de chaîne d'un nombre en sa représentation <see cref="T:System.Numerics.BigInteger" /> équivalente.</span><span class="sxs-lookup"><span data-stu-id="90062-1317">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="90062-1318">Valeur équivalente au nombre spécifié dans le paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1318">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1319">Le `value` paramètre doit être la représentation sous forme de chaîne d’un nombre sous la forme suivante.</span><span class="sxs-lookup"><span data-stu-id="90062-1319">The `value` parameter should be the string representation of a number in the following form.</span></span>  
  
 <span data-ttu-id="90062-1320">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="90062-1320">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="90062-1321">Les éléments entre crochets ([ et ]) sont facultatifs.</span><span class="sxs-lookup"><span data-stu-id="90062-1321">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="90062-1322">Le tableau suivant décrit chaque élément.</span><span class="sxs-lookup"><span data-stu-id="90062-1322">The following table describes each element.</span></span>  
  
|<span data-ttu-id="90062-1323">Élément</span><span class="sxs-lookup"><span data-stu-id="90062-1323">Element</span></span>|<span data-ttu-id="90062-1324">Description </span><span class="sxs-lookup"><span data-stu-id="90062-1324">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="90062-1325">*ws*</span><span class="sxs-lookup"><span data-stu-id="90062-1325">*ws*</span></span>|<span data-ttu-id="90062-1326">Espace blanc facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1326">Optional white space.</span></span>|  
|<span data-ttu-id="90062-1327">*sign*</span><span class="sxs-lookup"><span data-stu-id="90062-1327">*sign*</span></span>|<span data-ttu-id="90062-1328">Un signe facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1328">An optional sign.</span></span> <span data-ttu-id="90062-1329">Caractères de signe valides sont déterminés par le <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> et <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> propriétés de la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1329">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="90062-1330">*digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1330">*digits*</span></span>|<span data-ttu-id="90062-1331">Une séquence de chiffres allant de 0 à 9.</span><span class="sxs-lookup"><span data-stu-id="90062-1331">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="90062-1332">Des zéros non significatifs sont ignorés.</span><span class="sxs-lookup"><span data-stu-id="90062-1332">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="90062-1333">La chaîne spécifiée par le `value` paramètre est interprété à l’aide de la <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span><span class="sxs-lookup"><span data-stu-id="90062-1333">The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="90062-1334">Il ne peut pas contenir de séparateurs de groupes ou séparateur décimal, et il ne peut pas avoir de partie décimale.</span><span class="sxs-lookup"><span data-stu-id="90062-1334">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="90062-1335">Le `value` paramètre est analysé en utilisant les informations de mise en forme dans un <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> objet initialisé pour la culture système actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1335">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> object that is initialized for the current system culture.</span></span> <span data-ttu-id="90062-1336">Pour plus d'informations, consultez <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1336">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90062-1337">Pour analyser une chaîne en utilisant les informations de mise en forme d’une culture spécifique, utilisez le <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-1337">To parse a string by using the formatting information of a specific culture, use the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90062-1338">Si vous utilisez la <xref:System.Numerics.BigInteger.Parse%2A> méthode pour effectuer un aller-retour la représentation sous forme de chaîne d’un <xref:System.Numerics.BigInteger> valeur générée par le <xref:System.Numerics.BigInteger.ToString%2A> (méthode), vous devez utiliser le <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> méthode avec le spécificateur de format « R » pour générer la représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1338">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="90062-1339">Dans le cas contraire, la représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> conserve uniquement les 50 chiffres les plus significatifs de la valeur d’origine et les données peuvent être perdues lorsque vous utilisez la <xref:System.Numerics.BigInteger.Parse%2A> méthode pour restaurer le <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1339">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1340">L’exemple suivant utilise le <xref:System.Numerics.BigInteger.Parse%28System.String%29> méthode pour instancier deux <xref:System.Numerics.BigInteger> objets.</span><span class="sxs-lookup"><span data-stu-id="90062-1340">The following example uses the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="90062-1341">Il multiplie chaque objet par un autre nombre, puis appelle la <xref:System.Numerics.BigInteger.Compare%2A> méthode pour déterminer la relation entre les deux valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1341">It multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90062-1342"><paramref name="value" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1342"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="90062-1343">Le format de <paramref name="value" /> est incorrect.</span><span class="sxs-lookup"><span data-stu-id="90062-1343"><paramref name="value" /> is not in the correct format.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1344">Chaîne contenant un nombre à convertir.</span><span class="sxs-lookup"><span data-stu-id="90062-1344">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="90062-1345">Combinaison de bits de valeurs d’énumération qui spécifie le format autorisé de <c>value</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1345">A bitwise combination of the enumeration values that specify the permitted format of <c>value</c>.</span></span></param>
        <summary><span data-ttu-id="90062-1346">Convertit la représentation d'un nombre sous forme de chaîne dans un style spécifié en son équivalent <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1346">Converts the string representation of a number in a specified style to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="90062-1347">Valeur équivalente au nombre spécifié dans le paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1347">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1348">Le `style` paramètre définit les éléments de style (par exemple, un espace blanc, le symbole du signe positif ou négatif, le symbole de séparateur de groupes ou le symbole de virgule décimale) autorisées dans le `value` paramètre pour l’opération d’analyse.</span><span class="sxs-lookup"><span data-stu-id="90062-1348">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="90062-1349">`styles` doit être une combinaison de bits indicateurs de le <xref:System.Globalization.NumberStyles> énumération.</span><span class="sxs-lookup"><span data-stu-id="90062-1349">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="90062-1350">Le `style` paramètre rend cette méthode de surcharge utile quand `value` contient la représentation sous forme de chaîne d’une valeur hexadécimale, lorsque le système de nombre (décimal ou hexadécimal) représenté par `value` est connu uniquement au moment de l’exécution, ou lorsque vous interdire les espaces blancs ou un symbole dans `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1350">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="90062-1351">Selon la valeur de `style`, le `value` paramètre peut inclure les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="90062-1351">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="90062-1352">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="90062-1352">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="90062-1353">Si `style` inclut <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, le `value` paramètre peut contenir les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="90062-1353">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may contain the following elements:</span></span>  
  
 <span data-ttu-id="90062-1354">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="90062-1354">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="90062-1355">Les éléments entre crochets ([ et ]) sont facultatifs.</span><span class="sxs-lookup"><span data-stu-id="90062-1355">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="90062-1356">Le tableau suivant décrit chaque élément.</span><span class="sxs-lookup"><span data-stu-id="90062-1356">The following table describes each element.</span></span>  
  
|<span data-ttu-id="90062-1357">Élément</span><span class="sxs-lookup"><span data-stu-id="90062-1357">Element</span></span>|<span data-ttu-id="90062-1358">Description </span><span class="sxs-lookup"><span data-stu-id="90062-1358">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="90062-1359">*ws*</span><span class="sxs-lookup"><span data-stu-id="90062-1359">*ws*</span></span>|<span data-ttu-id="90062-1360">Espace blanc facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1360">Optional white space.</span></span> <span data-ttu-id="90062-1361">Espace blanc peut apparaître au début de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> indicateur, qui peuvent apparaître à la fin de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1361">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="90062-1362">Un symbole monétaire spécifique à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1362">A culture-specific currency symbol.</span></span> <span data-ttu-id="90062-1363">Sa position dans la chaîne est définie par le <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> et <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> propriétés de la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1363">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="90062-1364">Symbole de devise de la culture actuelle peut apparaître dans `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1364">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1365">*sign*</span><span class="sxs-lookup"><span data-stu-id="90062-1365">*sign*</span></span>|<span data-ttu-id="90062-1366">Un signe facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1366">An optional sign.</span></span> <span data-ttu-id="90062-1367">Le signe peut apparaître au début de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> indicateur, qui peuvent apparaître à la fin de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1367">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="90062-1368">Parenthèses peuvent être utilisées dans `value` pour indiquer une valeur négative si `style` inclut la <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1368">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1369">*digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1369">*digits*</span></span><br /><br /> <span data-ttu-id="90062-1370">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1370">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="90062-1371">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1371">*exponential_digits*</span></span>|<span data-ttu-id="90062-1372">Une séquence de chiffres de 0 à 9.</span><span class="sxs-lookup"><span data-stu-id="90062-1372">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="90062-1373">Pour *chiffres fractionnaires*, seul le chiffre 0 est valide.</span><span class="sxs-lookup"><span data-stu-id="90062-1373">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="90062-1374">*,*</span><span class="sxs-lookup"><span data-stu-id="90062-1374">*,*</span></span>|<span data-ttu-id="90062-1375">Un symbole de séparateur de groupes spécifique à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1375">A culture-specific group separator symbol.</span></span> <span data-ttu-id="90062-1376">Séparateur de groupes de la culture actuelle peut apparaître dans `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1376">The current culture's group separator can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1377">*.*</span><span class="sxs-lookup"><span data-stu-id="90062-1377">*.*</span></span>|<span data-ttu-id="90062-1378">Un symbole décimal spécifiques à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1378">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="90062-1379">Symbole de virgule décimale de la culture actuelle peut apparaître dans `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1379">The current culture's decimal point symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="90062-1380">Seul le chiffre 0 peut apparaître comme un chiffre de fractions de seconde pour l’opération d’analyse ; Si *chiffres fractionnaires* incluent un autre chiffre, un <xref:System.FormatException> est levée.</span><span class="sxs-lookup"><span data-stu-id="90062-1380">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="90062-1381">E</span><span class="sxs-lookup"><span data-stu-id="90062-1381">E</span></span>|<span data-ttu-id="90062-1382">Le « e » ou un caractère « E », ce qui indique que la valeur est représentée dans la notation exponentielle (scientifique).</span><span class="sxs-lookup"><span data-stu-id="90062-1382">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="90062-1383">Le `value` paramètre peut représenter un nombre en notation exponentielle si `style` inclut la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1383">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1384">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="90062-1384">*hexdigits*</span></span>|<span data-ttu-id="90062-1385">Une séquence de chiffres hexadécimaux compris entre 0 et f, ou 0 et F.</span><span class="sxs-lookup"><span data-stu-id="90062-1385">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
 <span data-ttu-id="90062-1386">Une chaîne contenant uniquement des chiffres (qui correspond à la <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) toujours analysée avec succès.</span><span class="sxs-lookup"><span data-stu-id="90062-1386">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="90062-1387">La plupart des restant <xref:System.Globalization.NumberStyles> membres contrôlent des éléments qui peuvent être présents, mais ne doivent pas être présents dans la chaîne d’entrée.</span><span class="sxs-lookup"><span data-stu-id="90062-1387">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="90062-1388">Le tableau suivant indique comment chaque <xref:System.Globalization.NumberStyles> membres affectent les éléments qui peuvent être présents dans `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1388">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="90062-1389">Valeur `NumberStyles`</span><span class="sxs-lookup"><span data-stu-id="90062-1389">`NumberStyles` value</span></span>|<span data-ttu-id="90062-1390">Éléments autorisés dans `value` en plus des chiffres</span><span class="sxs-lookup"><span data-stu-id="90062-1390">Elements permitted in `value` in addition to digits</span></span>|  
|--------------------------|---------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="90062-1391">Le *chiffres* élément uniquement.</span><span class="sxs-lookup"><span data-stu-id="90062-1391">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="90062-1392">Virgule décimale (.) et *chiffres fractionnaires* éléments.</span><span class="sxs-lookup"><span data-stu-id="90062-1392">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="90062-1393">Le « e » ou un caractère « E », ce qui indique la notation exponentielle avec *chiffres_exponentiels*.</span><span class="sxs-lookup"><span data-stu-id="90062-1393">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="90062-1394">Le *ws* élément au début de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1394">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="90062-1395">Le *ws* élément à la fin de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1395">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="90062-1396">Le *signe* élément au début de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1396">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="90062-1397">Le *signe* élément à la fin de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1397">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="90062-1398">Le *signe* élément sous la forme de parenthèses entourant la valeur numérique.</span><span class="sxs-lookup"><span data-stu-id="90062-1398">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="90062-1399">L’élément le séparateur de groupe.</span><span class="sxs-lookup"><span data-stu-id="90062-1399">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="90062-1400">Élément de devise ($).</span><span class="sxs-lookup"><span data-stu-id="90062-1400">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="90062-1401">Tous les éléments.</span><span class="sxs-lookup"><span data-stu-id="90062-1401">All elements.</span></span> <span data-ttu-id="90062-1402">Toutefois, `value` ne peut pas représenter un nombre hexadécimal ou un nombre en notation exponentielle.</span><span class="sxs-lookup"><span data-stu-id="90062-1402">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="90062-1403">Le *ws* élément au début ou à la fin de `value`, *signe* au début de `value`et la virgule décimale (*.*) symbole.</span><span class="sxs-lookup"><span data-stu-id="90062-1403">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="90062-1404">Le `value` paramètre peut également utiliser la notation exponentielle.</span><span class="sxs-lookup"><span data-stu-id="90062-1404">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="90062-1405">Le `ws`, `sign`, séparateur de groupes (*,*) et le point décimal (*.*) éléments.</span><span class="sxs-lookup"><span data-stu-id="90062-1405">The `ws`, `sign`, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="90062-1406">Tous les éléments.</span><span class="sxs-lookup"><span data-stu-id="90062-1406">All elements.</span></span> <span data-ttu-id="90062-1407">Toutefois, `value` ne peut pas représenter un nombre hexadécimal.</span><span class="sxs-lookup"><span data-stu-id="90062-1407">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="90062-1408">Si vous utilisez la <xref:System.Numerics.BigInteger.Parse%2A> méthode pour effectuer un aller-retour la représentation sous forme de chaîne d’un <xref:System.Numerics.BigInteger> valeur générée par le <xref:System.Numerics.BigInteger.ToString%2A> (méthode), vous devez utiliser le <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> méthode avec le spécificateur de format « R » pour générer la représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1408">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="90062-1409">Dans le cas contraire, la représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> conserve uniquement les 50 chiffres les plus significatifs de la valeur d’origine et les données peuvent être perdues lorsque vous utilisez la <xref:System.Numerics.BigInteger.Parse%2A> méthode pour restaurer le <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1409">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="90062-1410">Contrairement aux autres <xref:System.Globalization.NumberStyles> des valeurs, qui permettent, mais ne nécessitent pas la présence d’éléments de style particuliers dans `value`, le <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> valeur de style signifie que les caractères numériques dans `value` sont toujours interprétées comme caractères hexadécimaux.</span><span class="sxs-lookup"><span data-stu-id="90062-1410">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="90062-1411">Les caractères hexadécimaux valides sont 0-9, A-F et a-f.</span><span class="sxs-lookup"><span data-stu-id="90062-1411">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="90062-1412">Les seuls autres indicateurs qui peuvent être combinés avec le `style` paramètre sont <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> et <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1412">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90062-1413">(Le <xref:System.Globalization.NumberStyles> énumération inclut un style de numérotation composite, <xref:System.Globalization.NumberStyles.HexNumber>, qui inclut les deux indicateurs d’espace blanc.)</span><span class="sxs-lookup"><span data-stu-id="90062-1413">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90062-1414">Si `value` est la représentation sous forme de chaîne d’un nombre hexadécimal, il ne peut pas être précédé d’aucune décoration (tel que `0x` ou `&h`) différenciant comme un nombre hexadécimal.</span><span class="sxs-lookup"><span data-stu-id="90062-1414">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="90062-1415">Cela provoque l’échec de la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-1415">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="90062-1416">Si `value` est une chaîne hexadécimale, la <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> méthode interprète `value` comme un nombre négatif stocké à l’aide de représentation de complément à deux si ses deux premiers chiffres hexadécimaux sont supérieur ou égal à `0x80`.</span><span class="sxs-lookup"><span data-stu-id="90062-1416">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="90062-1417">En d’autres termes, la méthode interprète le bit d’ordre le plus élevé du premier octet dans `value` comme bit de signe.</span><span class="sxs-lookup"><span data-stu-id="90062-1417">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="90062-1418">Pour vous assurer qu’une chaîne hexadécimale est correctement interprétée comme un nombre positif, le premier chiffre de `value` doit avoir une valeur égale à zéro.</span><span class="sxs-lookup"><span data-stu-id="90062-1418">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="90062-1419">Par exemple, la méthode interprète `0x80` comme une valeur négative, mais il interprète `0x080` ou `0x0080` comme une valeur positive.</span><span class="sxs-lookup"><span data-stu-id="90062-1419">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="90062-1420">L’exemple suivant illustre la différence entre des chaînes hexadécimales qui représentent les valeurs positives et négatives.</span><span class="sxs-lookup"><span data-stu-id="90062-1420">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="90062-1421">Le `value` paramètre est analysé en utilisant les informations de mise en forme dans un <xref:System.Globalization.NumberFormatInfo> objet initialisé pour la culture système actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1421">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="90062-1422">Pour spécifier la culture dont les informations de mise en forme sont utilisées pour l’opération d’analyse, appelez le <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> de surcharge.</span><span class="sxs-lookup"><span data-stu-id="90062-1422">To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1423">L’exemple suivant illustre des appels à la <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> méthode avec plusieurs valeurs possibles pour le `style` paramètre.</span><span class="sxs-lookup"><span data-stu-id="90062-1423">The following example illustrates calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method with several possible values for the `style` parameter.</span></span> <span data-ttu-id="90062-1424">Il illustre comment interpréter une chaîne comme une valeur hexadécimale et comment refuser les espaces et les symboles de signe.</span><span class="sxs-lookup"><span data-stu-id="90062-1424">It illustrates how to interpret a string as a hexadecimal value, and how to disallow spaces and sign symbols.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#5)]
 [!code-vb[System.Numeric.BigInteger.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90062-1425"><paramref name="style" /> n’est pas une valeur <see cref="T:System.Globalization.NumberStyles" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1425"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
 <span data-ttu-id="90062-1426">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-1426">-or-</span></span>  
  
 <span data-ttu-id="90062-1427"><paramref name="style" /> inclut l'indicateur <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> avec une autre valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1427"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90062-1428"><paramref name="value" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1428"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="90062-1429"><paramref name="value" /> ne se conforme pas avec le modèle d'entrée spécifié par <see cref="T:System.Globalization.NumberStyles" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1429"><paramref name="value" /> does not comply with the input pattern specified by <see cref="T:System.Globalization.NumberStyles" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1430">Chaîne contenant un nombre à convertir.</span><span class="sxs-lookup"><span data-stu-id="90062-1430">A string that contains a number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="90062-1431">Objet qui fournit des informations de mise en forme propres à la culture concernant <c>value</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1431">An object that provides culture-specific formatting information about <c>value</c>.</span></span></param>
        <summary><span data-ttu-id="90062-1432">Convertit la représentation sous forme de chaîne d'un nombre, ayant un format spécifique à la culture spécifié, en sa représentation <see cref="T:System.Numerics.BigInteger" /> équivalente.</span><span class="sxs-lookup"><span data-stu-id="90062-1432">Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="90062-1433">Valeur équivalente au nombre spécifié dans le paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1433">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1434">Le `value` paramètre doit être la représentation sous forme de chaîne d’un nombre sous la forme suivante :</span><span class="sxs-lookup"><span data-stu-id="90062-1434">The `value` parameter should be the string representation of a number in the following form:</span></span>  
  
 <span data-ttu-id="90062-1435">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="90062-1435">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="90062-1436">Les éléments entre crochets ([ et ]) sont facultatifs.</span><span class="sxs-lookup"><span data-stu-id="90062-1436">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="90062-1437">Le tableau suivant décrit chaque élément.</span><span class="sxs-lookup"><span data-stu-id="90062-1437">The following table describes each element.</span></span>  
  
|<span data-ttu-id="90062-1438">Élément</span><span class="sxs-lookup"><span data-stu-id="90062-1438">Element</span></span>|<span data-ttu-id="90062-1439">Description </span><span class="sxs-lookup"><span data-stu-id="90062-1439">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="90062-1440">*ws*</span><span class="sxs-lookup"><span data-stu-id="90062-1440">*ws*</span></span>|<span data-ttu-id="90062-1441">Espace blanc facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1441">Optional white space.</span></span>|  
|<span data-ttu-id="90062-1442">*sign*</span><span class="sxs-lookup"><span data-stu-id="90062-1442">*sign*</span></span>|<span data-ttu-id="90062-1443">Un signe facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1443">An optional sign.</span></span> <span data-ttu-id="90062-1444">Caractères de signe valides sont déterminés par le <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> et <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> propriétés de la <xref:System.Globalization.NumberFormatInfo> objet qui est retourné par la `provider` l’objet <xref:System.IFormatProvider.GetFormat%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-1444">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the `provider` object's <xref:System.IFormatProvider.GetFormat%2A> method.</span></span>|  
|<span data-ttu-id="90062-1445">*digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1445">*digits*</span></span>|<span data-ttu-id="90062-1446">Une séquence de chiffres allant de 0 à 9.</span><span class="sxs-lookup"><span data-stu-id="90062-1446">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="90062-1447">Des zéros non significatifs sont ignorés.</span><span class="sxs-lookup"><span data-stu-id="90062-1447">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="90062-1448">La chaîne spécifiée par le `value` paramètre est interprété à l’aide de la <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span><span class="sxs-lookup"><span data-stu-id="90062-1448">The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="90062-1449">Il ne peut pas contenir de séparateurs de groupes ou séparateur décimal, et il ne peut pas avoir de partie décimale.</span><span class="sxs-lookup"><span data-stu-id="90062-1449">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="90062-1450">Si vous utilisez la <xref:System.Numerics.BigInteger.Parse%2A> méthode pour effectuer un aller-retour la représentation sous forme de chaîne d’un <xref:System.Numerics.BigInteger> valeur générée par le <xref:System.Numerics.BigInteger.ToString%2A> (méthode), vous devez utiliser le <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> méthode avec le spécificateur de format « R » pour générer la représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1450">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="90062-1451">Dans le cas contraire, la représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> conserve uniquement les 50 chiffres les plus significatifs de la valeur d’origine et les données peuvent être perdues lorsque vous utilisez la <xref:System.Numerics.BigInteger.Parse%2A> méthode pour restaurer le <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1451">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="90062-1452">Le `provider` paramètre est un <xref:System.IFormatProvider> implémentation dont <xref:System.IFormatProvider.GetFormat%2A> méthode retourne un <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1452">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="90062-1453">Lorsque le <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> méthode est appelée, elle appelle la `provider` du paramètre <xref:System.IFormatProvider.GetFormat%2A> (méthode) et lui passe un <xref:System.Type> objet qui représente le <xref:System.Globalization.NumberFormatInfo> type.</span><span class="sxs-lookup"><span data-stu-id="90062-1453">When the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="90062-1454">Le <xref:System.IFormatProvider.GetFormat%2A> méthode renvoie alors le <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations sur le format de le `value` paramètre.</span><span class="sxs-lookup"><span data-stu-id="90062-1454">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `value` parameter.</span></span> <span data-ttu-id="90062-1455">Il existe trois façons d’utiliser le `provider` paramètre pour fournir des informations de mise en forme personnalisées à l’opération d’analyse :</span><span class="sxs-lookup"><span data-stu-id="90062-1455">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="90062-1456">Vous pouvez passer un <xref:System.Globalization.CultureInfo> objet qui représente la culture qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1456">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="90062-1457">Son <xref:System.Globalization.CultureInfo.GetFormat%2A> méthode retourne la <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme numériques pour cette culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1457">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="90062-1458">Vous pouvez passer le réel <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme numériques.</span><span class="sxs-lookup"><span data-stu-id="90062-1458">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="90062-1459">(Son implémentation de <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> retourne simplement lui-même.)</span><span class="sxs-lookup"><span data-stu-id="90062-1459">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="90062-1460">Vous pouvez passer un objet personnalisé qui implémente <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="90062-1460">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="90062-1461">Son <xref:System.IFormatProvider.GetFormat%2A> méthode instancie et retourne le <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1461">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="90062-1462">Si `provider` est `null`, la mise en forme de `value` est interprété en fonction de la <xref:System.Globalization.NumberFormatInfo> objet de la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1462">If `provider` is `null`, the formatting of `value` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1463">Les exemples suivants montrent deux façons de définir le tilde (~) comme un signe négatif pour la mise en forme <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1463">The following examples show two ways to define the tilde (~) as a negative sign for formatting <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="90062-1464">Notez que pour afficher les <xref:System.Numerics.BigInteger> valeurs dans le même format que les chaînes d’origine, votre code doit appeler la <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> (méthode) et lui passer le <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1464">Note that to display the <xref:System.Numerics.BigInteger> values in the same format as the original strings, your code must call the <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> method and pass it the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="90062-1465">Le premier exemple définit une classe qui implémente <xref:System.IFormatProvider> et utilise le <xref:System.IFormatProvider.GetFormat%2A> méthode pour retourner le <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1465">The first example defines a class that implements <xref:System.IFormatProvider> and uses the <xref:System.IFormatProvider.GetFormat%2A> method to return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#2)]  
  
 <span data-ttu-id="90062-1466">A <xref:System.Numerics.BigInteger> objet peut ensuite être instancié avec le code suivant :</span><span class="sxs-lookup"><span data-stu-id="90062-1466">A <xref:System.Numerics.BigInteger> object can then be instantiated with the following code:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#3)]
 [!code-vb[System.Numeric.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#3)]  
  
 <span data-ttu-id="90062-1467">Le deuxième exemple est plus simple.</span><span class="sxs-lookup"><span data-stu-id="90062-1467">The second example is more straightforward.</span></span> <span data-ttu-id="90062-1468">Il transmet le <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme à le `provider` paramètre.</span><span class="sxs-lookup"><span data-stu-id="90062-1468">It passes the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information to the `provider` parameter.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#4)]
 [!code-vb[System.Numeric.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90062-1469"><paramref name="value" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1469"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="90062-1470">Le format de <paramref name="value" /> est incorrect.</span><span class="sxs-lookup"><span data-stu-id="90062-1470"><paramref name="value" /> is not in the correct format.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1471">Chaîne contenant un nombre à convertir.</span><span class="sxs-lookup"><span data-stu-id="90062-1471">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="90062-1472">Combinaison de bits de valeurs d’énumération qui spécifie le format autorisé de <c>value</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1472">A bitwise combination of the enumeration values that specify the permitted format of <c>value</c>.</span></span></param>
        <param name="provider"><span data-ttu-id="90062-1473">Objet qui fournit des informations de mise en forme propres à la culture concernant <c>value</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1473">An object that provides culture-specific formatting information about <c>value</c>.</span></span></param>
        <summary><span data-ttu-id="90062-1474">Convertit la représentation sous forme de chaîne d'un nombre, ayant un style et un format propre à la culture spécifiés, en sa représentation <see cref="T:System.Numerics.BigInteger" /> équivalente.</span><span class="sxs-lookup"><span data-stu-id="90062-1474">Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="90062-1475">Valeur équivalente au nombre spécifié dans le paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1475">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1476">Le `style` paramètre définit les éléments de style (par exemple, un espace blanc, le symbole du signe positif ou négatif, le symbole de séparateur de groupes ou le symbole de virgule décimale) autorisées dans le `value` paramètre pour l’opération d’analyse.</span><span class="sxs-lookup"><span data-stu-id="90062-1476">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="90062-1477">`styles` doit être une combinaison de bits indicateurs de le <xref:System.Globalization.NumberStyles> énumération.</span><span class="sxs-lookup"><span data-stu-id="90062-1477">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="90062-1478">Le `style` paramètre rend cette méthode de surcharge utile quand `value` contient la représentation sous forme de chaîne d’une valeur hexadécimale, lorsque le système de nombre (décimal ou hexadécimal) représenté par `value` est connu uniquement au moment de l’exécution, ou lorsque vous interdire les espaces blancs ou un symbole dans `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1478">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="90062-1479">Selon la valeur de `style`, le `value` paramètre peut inclure les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="90062-1479">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="90062-1480">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="90062-1480">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="90062-1481">Si `style` inclut <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, le `value` paramètre peut inclure les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="90062-1481">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="90062-1482">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="90062-1482">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="90062-1483">Les éléments entre crochets ([ et ]) sont facultatifs.</span><span class="sxs-lookup"><span data-stu-id="90062-1483">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="90062-1484">Le tableau suivant décrit chaque élément.</span><span class="sxs-lookup"><span data-stu-id="90062-1484">The following table describes each element.</span></span>  
  
|<span data-ttu-id="90062-1485">Élément</span><span class="sxs-lookup"><span data-stu-id="90062-1485">Element</span></span>|<span data-ttu-id="90062-1486">Description </span><span class="sxs-lookup"><span data-stu-id="90062-1486">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="90062-1487">*ws*</span><span class="sxs-lookup"><span data-stu-id="90062-1487">*ws*</span></span>|<span data-ttu-id="90062-1488">Espace blanc facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1488">Optional white space.</span></span> <span data-ttu-id="90062-1489">Espace blanc peut apparaître au début de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> indicateur, qui peuvent apparaître à la fin de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1489">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="90062-1490">Un symbole monétaire spécifique à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1490">A culture-specific currency symbol.</span></span> <span data-ttu-id="90062-1491">Sa position dans la chaîne est définie par le <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> et <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> propriétés de la culture indiquaient par le `provider` paramètre.</span><span class="sxs-lookup"><span data-stu-id="90062-1491">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the culture indicated by the `provider` parameter.</span></span> <span data-ttu-id="90062-1492">Symbole de devise de la culture actuelle peut apparaître dans `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1492">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1493">*sign*</span><span class="sxs-lookup"><span data-stu-id="90062-1493">*sign*</span></span>|<span data-ttu-id="90062-1494">Un signe facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1494">An optional sign.</span></span> <span data-ttu-id="90062-1495">Le signe peut apparaître au début de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> indicateur, qui peuvent apparaître à la fin de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1495">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="90062-1496">Parenthèses peuvent être utilisées dans `value` pour indiquer une valeur négative si `style` inclut la <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1496">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1497">*digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1497">*digits*</span></span><br /><br /> <span data-ttu-id="90062-1498">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1498">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="90062-1499">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1499">*exponential_digits*</span></span>|<span data-ttu-id="90062-1500">Une séquence de chiffres de 0 à 9.</span><span class="sxs-lookup"><span data-stu-id="90062-1500">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="90062-1501">Pour *chiffres fractionnaires*, seul le chiffre 0 est valide.</span><span class="sxs-lookup"><span data-stu-id="90062-1501">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="90062-1502">*,*</span><span class="sxs-lookup"><span data-stu-id="90062-1502">*,*</span></span>|<span data-ttu-id="90062-1503">Un symbole de séparateur de groupes spécifique à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1503">A culture-specific group separator symbol.</span></span> <span data-ttu-id="90062-1504">Le symbole de séparateur de groupes de la culture spécifiée par `provider` peut apparaître dans `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1504">The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1505">*.*</span><span class="sxs-lookup"><span data-stu-id="90062-1505">*.*</span></span>|<span data-ttu-id="90062-1506">Un symbole décimal spécifiques à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1506">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="90062-1507">Le symbole de virgule décimale de la culture désignée par `provider` peut apparaître dans `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1507">The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="90062-1508">Seul le chiffre 0 peut apparaître comme un chiffre de fractions de seconde pour l’opération d’analyse ; Si *chiffres fractionnaires* incluent un autre chiffre, un <xref:System.FormatException> est levée.</span><span class="sxs-lookup"><span data-stu-id="90062-1508">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="90062-1509">E</span><span class="sxs-lookup"><span data-stu-id="90062-1509">E</span></span>|<span data-ttu-id="90062-1510">Le « e » ou un caractère « E », ce qui indique que la valeur est représentée dans la notation exponentielle (scientifique).</span><span class="sxs-lookup"><span data-stu-id="90062-1510">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="90062-1511">Le `value` paramètre peut représenter un nombre en notation exponentielle si `style` inclut la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1511">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1512">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="90062-1512">*hexdigits*</span></span>|<span data-ttu-id="90062-1513">Une séquence de chiffres hexadécimaux compris entre 0 et f, ou 0 et F.</span><span class="sxs-lookup"><span data-stu-id="90062-1513">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
 <span data-ttu-id="90062-1514">Une chaîne contenant uniquement des chiffres (qui correspond à la <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) toujours analysée avec succès.</span><span class="sxs-lookup"><span data-stu-id="90062-1514">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="90062-1515">La plupart des restant <xref:System.Globalization.NumberStyles> membres contrôlent des éléments qui peuvent être présents, mais ne doivent pas être présents dans la chaîne d’entrée.</span><span class="sxs-lookup"><span data-stu-id="90062-1515">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="90062-1516">Le tableau suivant indique comment chaque <xref:System.Globalization.NumberStyles> membres affectent les éléments qui peuvent être présents dans `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1516">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="90062-1517">Valeur NumberStyles</span><span class="sxs-lookup"><span data-stu-id="90062-1517">NumberStyles value</span></span>|<span data-ttu-id="90062-1518">Éléments autorisés dans la valeur en plus des chiffres</span><span class="sxs-lookup"><span data-stu-id="90062-1518">Elements permitted in value in addition to digits</span></span>|  
|------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="90062-1519">Le *chiffres* élément uniquement.</span><span class="sxs-lookup"><span data-stu-id="90062-1519">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="90062-1520">Virgule décimale (.) et *chiffres fractionnaires* éléments.</span><span class="sxs-lookup"><span data-stu-id="90062-1520">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="90062-1521">Le « e » ou un caractère « E », ce qui indique la notation exponentielle.</span><span class="sxs-lookup"><span data-stu-id="90062-1521">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="90062-1522">avec *chiffres_exponentiels*.</span><span class="sxs-lookup"><span data-stu-id="90062-1522">along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="90062-1523">Le *ws* élément au début de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1523">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="90062-1524">Le *ws* élément à la fin de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1524">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="90062-1525">Le *signe* élément au début de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1525">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="90062-1526">Le *signe* élément à la fin de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1526">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="90062-1527">Le *signe* élément sous la forme de parenthèses entourant la valeur numérique.</span><span class="sxs-lookup"><span data-stu-id="90062-1527">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="90062-1528">L’élément le séparateur de groupe.</span><span class="sxs-lookup"><span data-stu-id="90062-1528">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="90062-1529">Élément de devise ($).</span><span class="sxs-lookup"><span data-stu-id="90062-1529">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="90062-1530">Tous les éléments.</span><span class="sxs-lookup"><span data-stu-id="90062-1530">All elements.</span></span> <span data-ttu-id="90062-1531">Toutefois, `value` ne peut pas représenter un nombre hexadécimal ou un nombre en notation exponentielle.</span><span class="sxs-lookup"><span data-stu-id="90062-1531">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="90062-1532">Le *ws* élément au début ou à la fin de `value`, *signe* au début de `value`et le symbole de virgule décimale (.).</span><span class="sxs-lookup"><span data-stu-id="90062-1532">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="90062-1533">Le `value` paramètre peut également utiliser la notation exponentielle.</span><span class="sxs-lookup"><span data-stu-id="90062-1533">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="90062-1534">Le `ws`, `sign`, le séparateur de groupes (,) et des éléments de virgule décimale (.).</span><span class="sxs-lookup"><span data-stu-id="90062-1534">The `ws`, `sign`, group separator (,), and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="90062-1535">Tous les éléments.</span><span class="sxs-lookup"><span data-stu-id="90062-1535">All elements.</span></span> <span data-ttu-id="90062-1536">Toutefois, `value` ne peut pas représenter un nombre hexadécimal.</span><span class="sxs-lookup"><span data-stu-id="90062-1536">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="90062-1537">Si vous utilisez la <xref:System.Numerics.BigInteger.Parse%2A> méthode pour effectuer un aller-retour la représentation sous forme de chaîne d’un <xref:System.Numerics.BigInteger> valeur générée par le <xref:System.Numerics.BigInteger.ToString%2A> (méthode), vous devez utiliser le <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> méthode avec le spécificateur de format « R » pour générer la représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1537">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="90062-1538">Dans le cas contraire, la représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> conserve uniquement les 50 chiffres les plus significatifs de la valeur d’origine et les données peuvent être perdues lorsque vous utilisez la <xref:System.Numerics.BigInteger.Parse%2A> méthode pour restaurer le <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1538">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="90062-1539">Contrairement aux autres <xref:System.Globalization.NumberStyles> valeurs, qui permettent mais ne nécessitent pas la présence d’éléments de style particuliers dans `value`, le <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> valeur de style signifie que les caractères numériques dans `value` sont toujours interprétées comme caractères hexadécimaux.</span><span class="sxs-lookup"><span data-stu-id="90062-1539">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="90062-1540">Les caractères hexadécimaux valides sont 0-9, A-F et a-f.</span><span class="sxs-lookup"><span data-stu-id="90062-1540">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="90062-1541">Les seuls autres indicateurs qui peuvent être combinés avec le `style` paramètre sont <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> et <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1541">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90062-1542">(Le <xref:System.Globalization.NumberStyles> énumération inclut un style de numérotation composite, <xref:System.Globalization.NumberStyles.HexNumber>, qui inclut les deux indicateurs d’espace blanc.)</span><span class="sxs-lookup"><span data-stu-id="90062-1542">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90062-1543">Si `value` est la représentation sous forme de chaîne d’un nombre hexadécimal, il ne peut pas être précédé d’aucune décoration (tel que `0x` ou `&h`) différenciant comme un nombre hexadécimal.</span><span class="sxs-lookup"><span data-stu-id="90062-1543">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="90062-1544">Cela provoque l’échec de la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-1544">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="90062-1545">Si `value` est une chaîne hexadécimale, la <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> méthode interprète `value` comme un nombre négatif stocké à l’aide de représentation de complément à deux si ses deux premiers chiffres hexadécimaux sont supérieur ou égal à `0x80`.</span><span class="sxs-lookup"><span data-stu-id="90062-1545">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="90062-1546">En d’autres termes, la méthode interprète le bit d’ordre le plus élevé du premier octet dans `value` comme bit de signe.</span><span class="sxs-lookup"><span data-stu-id="90062-1546">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="90062-1547">Pour vous assurer qu’une chaîne hexadécimale est correctement interprétée comme un nombre positif, le premier chiffre de `value` doit avoir une valeur égale à zéro.</span><span class="sxs-lookup"><span data-stu-id="90062-1547">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="90062-1548">Par exemple, la méthode interprète `0x80` comme une valeur négative, mais il interprète `0x080` ou `0x0080` comme une valeur positive.</span><span class="sxs-lookup"><span data-stu-id="90062-1548">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="90062-1549">L’exemple suivant illustre la différence entre des chaînes hexadécimales qui représentent les valeurs positives et négatives.</span><span class="sxs-lookup"><span data-stu-id="90062-1549">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="90062-1550">Le `provider` paramètre est un <xref:System.IFormatProvider> mise en œuvre.</span><span class="sxs-lookup"><span data-stu-id="90062-1550">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="90062-1551">Son <xref:System.IFormatProvider.GetFormat%2A> méthode retourne un <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations spécifiques à la culture concernant le format de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1551">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="90062-1552">En règle générale, `provider` peut prendre l’une des opérations suivantes :</span><span class="sxs-lookup"><span data-stu-id="90062-1552">Typically, `provider` can be any one of the following:</span></span>  
  
-   <span data-ttu-id="90062-1553">A <xref:System.Globalization.CultureInfo> objet qui représente la culture qui fournit des informations de mise en forme numériques.</span><span class="sxs-lookup"><span data-stu-id="90062-1553">A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information.</span></span> <span data-ttu-id="90062-1554">Son <xref:System.Globalization.CultureInfo.GetFormat%2A> méthode retourne la <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme numériques.</span><span class="sxs-lookup"><span data-stu-id="90062-1554">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span>  
  
-   <span data-ttu-id="90062-1555">A <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1555">A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span> <span data-ttu-id="90062-1556">(Son implémentation de <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> retourne simplement lui-même.)</span><span class="sxs-lookup"><span data-stu-id="90062-1556">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="90062-1557">Un objet personnalisé qui implémente <xref:System.IFormatProvider> et utilise le <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> méthode pour instancier et retourner le <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1557">A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="90062-1558">Si `provider` est `null`, le <xref:System.Globalization.NumberFormatInfo> de l’objet de la culture actuelle est utilisé.</span><span class="sxs-lookup"><span data-stu-id="90062-1558">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1559">L’exemple suivant effectue plusieurs appels à la <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> méthode à l’aide de différentes combinaisons de valeurs pour le `style` et `provider` paramètres.</span><span class="sxs-lookup"><span data-stu-id="90062-1559">The following example makes several calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#2)]  
  
 <span data-ttu-id="90062-1560">Un nombre d’appels individuels à la <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> méthode passer une instance de la commande suivante `BigIntegerFormatProvider` (classe), qui définit un tilde (~) comme signe négatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1560">A number of the individual calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90062-1561"><paramref name="style" /> n’est pas une valeur <see cref="T:System.Globalization.NumberStyles" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1561"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
 <span data-ttu-id="90062-1562">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-1562">-or-</span></span>  
  
 <span data-ttu-id="90062-1563"><paramref name="style" /> inclut l'indicateur <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> avec une autre valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1563"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90062-1564"><paramref name="value" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1564"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="90062-1565"><paramref name="value" /> ne se conforme pas avec le modèle d'entrée spécifié par <paramref name="style" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1565"><paramref name="value" /> does not comply with the input pattern specified by <paramref name="style" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Pow (System.Numerics.BigInteger value, int exponent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Pow(valuetype System.Numerics.BigInteger value, int32 exponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As BigInteger, exponent As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Pow(System::Numerics::BigInteger value, int exponent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1566">Nombre à élever à la puissance <c>exponent</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1566">The number to raise to the <c>exponent</c> power.</span></span></param>
        <param name="exponent"><span data-ttu-id="90062-1567">Exposant de <c>value</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1567">The exponent to raise <c>value</c> by.</span></span></param>
        <summary><span data-ttu-id="90062-1568">Élève une valeur <see cref="T:System.Numerics.BigInteger" /> à la puissance de la valeur spécifiée.</span><span class="sxs-lookup"><span data-stu-id="90062-1568">Raises a <see cref="T:System.Numerics.BigInteger" /> value to the power of a specified value.</span></span></summary>
        <returns><span data-ttu-id="90062-1569">Résultat de l'élévation de <paramref name="value" /> à la puissance représentée par <paramref name="exponent" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1569">The result of raising <paramref name="value" /> to the <paramref name="exponent" /> power.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1570">Le <xref:System.Numerics.BigInteger.Pow%2A> méthode retourne 1 si la valeur du paramètre d’exposant est 0, ou si les valeurs de la `value` et `exponent` paramètres sont 0.</span><span class="sxs-lookup"><span data-stu-id="90062-1570">The <xref:System.Numerics.BigInteger.Pow%2A> method returns 1 if the value of the exponent parameter is 0, or if the values of both the `value` and `exponent` parameters are 0.</span></span> <span data-ttu-id="90062-1571">Si `exponent` est 1, le <xref:System.Numerics.BigInteger.Pow%2A> méthode renvoie `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1571">If `exponent` is 1, the <xref:System.Numerics.BigInteger.Pow%2A> method returns `value`.</span></span> <span data-ttu-id="90062-1572">Si `value` est négatif, la méthode retourne un résultat négatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1572">If `value` is negative, the method returns a negative result.</span></span>  
  
 <span data-ttu-id="90062-1573">Cette méthode correspond à la <xref:System.Math.Pow%2A?displayProperty=nameWithType> méthode pour les types numériques primitifs.</span><span class="sxs-lookup"><span data-stu-id="90062-1573">This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1574">L’exemple suivant illustre l’élévation à la puissance à l’aide un <xref:System.Numerics.BigInteger> valeur et un exposant dont la valeur est comprise entre 0 et 10.</span><span class="sxs-lookup"><span data-stu-id="90062-1574">The following example illustrates exponentiation using a <xref:System.Numerics.BigInteger> value and an exponent whose value ranges from 0 to 10.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#32)]
 [!code-vb[System.Numeric.BigInteger.Class#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90062-1575">La valeur du paramètre <paramref name="exponent" /> est négative.</span><span class="sxs-lookup"><span data-stu-id="90062-1575">The value of the <paramref name="exponent" /> parameter is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Remainder (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Remainder(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remainder (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Remainder(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="90062-1576">Valeur à diviser.</span><span class="sxs-lookup"><span data-stu-id="90062-1576">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="90062-1577">Valeur par laquelle diviser.</span><span class="sxs-lookup"><span data-stu-id="90062-1577">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="90062-1578">Effectue une division entière sur deux valeurs <see cref="T:System.Numerics.BigInteger" /> et retourne le modulo.</span><span class="sxs-lookup"><span data-stu-id="90062-1578">Performs integer division on two <see cref="T:System.Numerics.BigInteger" /> values and returns the remainder.</span></span></summary>
        <returns><span data-ttu-id="90062-1579">Reste de la division de <paramref name="dividend" /> par <paramref name="divisor" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1579">The remainder after dividing <paramref name="dividend" /> by <paramref name="divisor" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1580">Le signe du reste est le signe de le `dividend` paramètre.</span><span class="sxs-lookup"><span data-stu-id="90062-1580">The sign of the remainder is the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="90062-1581">Le <xref:System.Numerics.BigInteger.Remainder%2A> méthode est implémentée pour les langages qui ne prennent pas en charge les opérateurs personnalisés.</span><span class="sxs-lookup"><span data-stu-id="90062-1581">The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="90062-1582">Son comportement est identique à la division à l’aide de l’opérateur modulo.</span><span class="sxs-lookup"><span data-stu-id="90062-1582">Its behavior is identical to division using the modulus operator.</span></span>  
  
 <span data-ttu-id="90062-1583">Si nécessaire, la méthode effectue automatiquement une conversion implicite d’autres types intégraux pour <xref:System.Numerics.BigInteger> objets avant d’effectuer l’opération modulo.</span><span class="sxs-lookup"><span data-stu-id="90062-1583">If necessary, the method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects before it performs the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1584">L’exemple suivant compare le reste de la <xref:System.Numerics.BigInteger.DivRem%2A> méthode avec le reste retourné par la <xref:System.Numerics.BigInteger.Remainder%2A> méthode pour établir que les deux méthodes calculent des restes identiques.</span><span class="sxs-lookup"><span data-stu-id="90062-1584">The following example compares the remainder from the <xref:System.Numerics.BigInteger.DivRem%2A> method with the remainder returned by the <xref:System.Numerics.BigInteger.Remainder%2A> method to establish that the two methods calculate identical remainders.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/cs/Remainder1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/vb/Remainder1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="90062-1585"><paramref name="divisor" /> est égal à 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="90062-1585"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public int Sign { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Sign" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Sign" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sign As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Sign { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90062-1586">Obtient un nombre qui indique le signe (négatif, positif ou zéro) de l'objet <see cref="T:System.Numerics.BigInteger" /> actif.</span><span class="sxs-lookup"><span data-stu-id="90062-1586">Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <value><span data-ttu-id="90062-1587">Nombre qui indique le signe de l'objet <see cref="T:System.Numerics.BigInteger" />, comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-1587">A number that indicates the sign of the <see cref="T:System.Numerics.BigInteger" /> object, as shown in the following table.</span></span>  
  
 <span data-ttu-id="90062-1588"><list type="table"><listheader><term> Nombre</span><span class="sxs-lookup"><span data-stu-id="90062-1588"><list type="table"><listheader><term> Number</span></span>  
  
 <span data-ttu-id="90062-1589"></term><description> Description</span><span class="sxs-lookup"><span data-stu-id="90062-1589"></term><description> Description</span></span>  
  
 <span data-ttu-id="90062-1590"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="90062-1590"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="90062-1591"></term><description> La valeur de cet objet est un nombre négative.</span><span class="sxs-lookup"><span data-stu-id="90062-1591"></term><description> The value of this object is negative.</span></span>  
  
 <span data-ttu-id="90062-1592"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="90062-1592"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="90062-1593"></term><description> La valeur de cet objet est 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="90062-1593"></term><description> The value of this object is 0 (zero).</span></span>  
  
 <span data-ttu-id="90062-1594"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="90062-1594"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="90062-1595"></term><description> La valeur de cet objet est un nombre positive.</span><span class="sxs-lookup"><span data-stu-id="90062-1595"></term><description> The value of this object is positive.</span></span>  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1596">Le <xref:System.Numerics.BigInteger.Sign%2A> propriété est équivalente à la <xref:System.Math.Sign%2A?displayProperty=nameWithType> méthode pour les types numériques primitifs.</span><span class="sxs-lookup"><span data-stu-id="90062-1596">The <xref:System.Numerics.BigInteger.Sign%2A> property is equivalent to the <xref:System.Math.Sign%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Subtract (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Subtract(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Subtract(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="90062-1597">Valeur à laquelle appliquer la soustraction (diminuende).</span><span class="sxs-lookup"><span data-stu-id="90062-1597">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="90062-1598">Valeur à soustraire (diminuteur).</span><span class="sxs-lookup"><span data-stu-id="90062-1598">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="90062-1599">Soustrait une valeur <see cref="T:System.Numerics.BigInteger" /> d'une autre valeur et retourne le résultat.</span><span class="sxs-lookup"><span data-stu-id="90062-1599">Subtracts one <see cref="T:System.Numerics.BigInteger" /> value from another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="90062-1600">Résultat de la soustraction de <paramref name="right" /> de <paramref name="left" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1600">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1601">Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent utiliser la <xref:System.Numerics.BigInteger.Subtract%2A> méthode à l’aide de la soustraction <xref:System.Numerics.BigInteger> valeurs.</span><span class="sxs-lookup"><span data-stu-id="90062-1601">Languages that do not support custom operators can use the <xref:System.Numerics.BigInteger.Subtract%2A> method to perform subtraction using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="90062-1602">Le <xref:System.Numerics.BigInteger.Subtract%2A> méthode est un substitut utile pour l’opérateur de soustraction lors de l’instanciation une <xref:System.Numerics.BigInteger> variable en lui assignant la différence qui résulte d’une soustraction, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="90062-1602">The <xref:System.Numerics.BigInteger.Subtract%2A> method is a useful substitute for the subtraction operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it the difference that results from subtraction, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ToByteArray();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90062-1603">Convertit une valeur <see cref="T:System.Numerics.BigInteger" /> en tableau d'octets.</span><span class="sxs-lookup"><span data-stu-id="90062-1603">Converts a <see cref="T:System.Numerics.BigInteger" /> value to a byte array.</span></span></summary>
        <returns><span data-ttu-id="90062-1604">Valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> actif convertie en tableau d'octets.</span><span class="sxs-lookup"><span data-stu-id="90062-1604">The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1605">Les octets individuels dans le tableau retourné par cette méthode s’affichent par ordre little-endian.</span><span class="sxs-lookup"><span data-stu-id="90062-1605">The individual bytes in the array returned by this method appear in little-endian order.</span></span> <span data-ttu-id="90062-1606">Autrement dit, les octets de poids faible de la valeur précèdent les octets d’ordre supérieur.</span><span class="sxs-lookup"><span data-stu-id="90062-1606">That is, the lower-order bytes of the value precede the higher-order bytes.</span></span> <span data-ttu-id="90062-1607">Le premier octet du tableau reflète les huit premiers bits de la <xref:System.Numerics.BigInteger> valeur, le deuxième octet reflète les huit bits suivants et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="90062-1607">The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on.</span></span> <span data-ttu-id="90062-1608">Par exemple, la valeur 1024, ou 0 x 0400, est stockée comme le tableau suivant de deux octets :</span><span class="sxs-lookup"><span data-stu-id="90062-1608">For example, the value 1024, or 0x0400, is stored as the following array of two bytes:</span></span>  
  
|<span data-ttu-id="90062-1609">Élément</span><span class="sxs-lookup"><span data-stu-id="90062-1609">Element</span></span>|<span data-ttu-id="90062-1610">Valeur d’octet</span><span class="sxs-lookup"><span data-stu-id="90062-1610">Byte value</span></span>|  
|-------------|----------------|  
|<span data-ttu-id="90062-1611">0</span><span class="sxs-lookup"><span data-stu-id="90062-1611">0</span></span>|<span data-ttu-id="90062-1612">0x00</span><span class="sxs-lookup"><span data-stu-id="90062-1612">0x00</span></span>|  
|<span data-ttu-id="90062-1613">1</span><span class="sxs-lookup"><span data-stu-id="90062-1613">1</span></span>|<span data-ttu-id="90062-1614">0x04</span><span class="sxs-lookup"><span data-stu-id="90062-1614">0x04</span></span>|  
  
 <span data-ttu-id="90062-1615">Les valeurs négatives sont écrites dans le tableau à l’aide de la représentation de complément à deux dans le plus compact possible de formulaire.</span><span class="sxs-lookup"><span data-stu-id="90062-1615">Negative values are written to the array using two's complement representation in the most compact form possible.</span></span> <span data-ttu-id="90062-1616">Par exemple, -1 est représenté comme un octet unique dont la valeur est `0xFF` et non sous forme de tableau avec plusieurs éléments, tels que `0xFF`, `0xFF` ou `0xFF`, `0xFF`, `0xFF`, `0xFF`.</span><span class="sxs-lookup"><span data-stu-id="90062-1616">For example, -1 is represented as a single byte whose value is `0xFF` instead of as an array with multiple elements, such as `0xFF`, `0xFF` or `0xFF`, `0xFF`, `0xFF`, `0xFF`.</span></span>  
  
 <span data-ttu-id="90062-1617">Étant donné que la représentation sous forme de toujours complément à deux interprète le bit d’ordre le plus élevé du dernier octet dans le tableau (octet à la position <xref:System.Array.Length%2A?displayProperty=nameWithType> `- 1`) en tant que le bit de signe, la méthode retourne un tableau d’octets avec un élément supplémentaire dont la valeur est égale à zéro pour lever l’ambiguïté des valeurs positives sinon être interprétées comme ayant leurs bits de signe à définir.</span><span class="sxs-lookup"><span data-stu-id="90062-1617">Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref:System.Array.Length%2A?displayProperty=nameWithType>`- 1`) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set.</span></span> <span data-ttu-id="90062-1618">Par exemple, la valeur 120 ou `0x78` est représenté sous forme de tableau sur un octet : `0x78`.</span><span class="sxs-lookup"><span data-stu-id="90062-1618">For example, the value 120 or `0x78` is represented as a single-byte array: `0x78`.</span></span> <span data-ttu-id="90062-1619">Toutefois, 128, ou `0x80`, est représentée comme un tableau à deux octets : `0x80`, `0x00`.</span><span class="sxs-lookup"><span data-stu-id="90062-1619">However, 128, or `0x80`, is represented as a two-byte array: `0x80`, `0x00`.</span></span>  
  
 <span data-ttu-id="90062-1620">Vous pouvez effectuer un aller-retour un <xref:System.Numerics.BigInteger> valeur en les stockant dans un tableau d’octets et la restauration à l’aide de la <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1620">You can round-trip a <xref:System.Numerics.BigInteger> value by storing it to a byte array and then restoring it using the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="90062-1621">Si votre code modifie la valeur d’octets individuels dans le tableau retourné par cette méthode avant qu’il restaure la valeur, il se peut que vous devez vous assurer que vous ne modifiez pas involontairement le bit de signe.</span><span class="sxs-lookup"><span data-stu-id="90062-1621">If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit.</span></span> <span data-ttu-id="90062-1622">Par exemple, si vos modifications augmentent une valeur positive afin que l’ordre le plus élevé de bits dans le dernier élément du tableau d’octets est défini, que vous pouvez ajouter un nouvel octet dont la valeur est égale à zéro à la fin du tableau.</span><span class="sxs-lookup"><span data-stu-id="90062-1622">For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1623">L’exemple suivant illustre comment certaines <xref:System.Numerics.BigInteger> les valeurs sont représentées dans les tableaux d’octets.</span><span class="sxs-lookup"><span data-stu-id="90062-1623">The following example illustrates how some <xref:System.Numerics.BigInteger> values are represented in byte arrays.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/cs/ToByteArray1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/vb/ToByteArray1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray (bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray(bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray (Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Byte()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" />
        <Parameter Name="isBigEndian" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-1624">Convertit la valeur numérique de l'objet <see cref="T:System.Numerics.BigInteger" /> actuel dans sa représentation sous forme chaîne équivalente.</span><span class="sxs-lookup"><span data-stu-id="90062-1624">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90062-1625">Convertit la valeur numérique de l'objet <see cref="T:System.Numerics.BigInteger" /> actuel dans sa représentation sous forme chaîne équivalente.</span><span class="sxs-lookup"><span data-stu-id="90062-1625">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="90062-1626">Représentation sous forme de chaîne de la valeur actuelle de <see cref="T:System.Numerics.BigInteger" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1626">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1627">Le <xref:System.Numerics.BigInteger.ToString> méthode formats un <xref:System.Numerics.BigInteger> valeur dans le « R », ou aller-retour, format de la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1627">The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format of the current culture.</span></span> <span data-ttu-id="90062-1628">Si vous souhaitez spécifier un autre format ou la culture, utilisez les autres surcharges de la <xref:System.Numerics.BigInteger.ToString%2A> méthode, comme suit :</span><span class="sxs-lookup"><span data-stu-id="90062-1628">If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="90062-1629">Pour utiliser le format</span><span class="sxs-lookup"><span data-stu-id="90062-1629">To use format</span></span>|<span data-ttu-id="90062-1630">Pour la culture</span><span class="sxs-lookup"><span data-stu-id="90062-1630">For culture</span></span>|<span data-ttu-id="90062-1631">Utilisez la surcharge</span><span class="sxs-lookup"><span data-stu-id="90062-1631">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="90062-1632">Format de Round-Trip ("R")</span><span class="sxs-lookup"><span data-stu-id="90062-1632">Round-trip ("R") format</span></span>|<span data-ttu-id="90062-1633">Une culture spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1633">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%2A>|  
|<span data-ttu-id="90062-1634">Un format spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1634">A specific format</span></span>|<span data-ttu-id="90062-1635">Culture (actuel) par défaut</span><span class="sxs-lookup"><span data-stu-id="90062-1635">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="90062-1636">Un format spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1636">A specific format</span></span>|<span data-ttu-id="90062-1637">Une culture spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1637">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="90062-1638">La représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> valeur comprend un signe négatif si sa valeur est négative et une séquence de chiffres allant de 0 à 9 sans zéros non significatifs.</span><span class="sxs-lookup"><span data-stu-id="90062-1638">The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros.</span></span> <span data-ttu-id="90062-1639">Le signe négatif est défini par le <xref:System.Globalization.NumberFormatInfo> objet pour la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1639">The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1640">L’exemple suivant affiche un <xref:System.Numerics.BigInteger> à l’aide de la valeur par défaut <xref:System.Numerics.BigInteger.ToString> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-1640">The following example displays a <xref:System.Numerics.BigInteger> value by using the default <xref:System.Numerics.BigInteger.ToString> method.</span></span> <span data-ttu-id="90062-1641">Elle affiche également les représentations sous forme de chaîne de la <xref:System.Numerics.BigInteger> valeur obtenue à l’aide des spécificateurs de format standard.</span><span class="sxs-lookup"><span data-stu-id="90062-1641">It also displays the string representations of the <xref:System.Numerics.BigInteger> value that results from using some standard format specifiers.</span></span> <span data-ttu-id="90062-1642">Les exemples sont affichés à l’aide des conventions de format de la culture en-US.</span><span class="sxs-lookup"><span data-stu-id="90062-1642">The examples are displayed using the formatting conventions of the en-US culture.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="90062-1643">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1643">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="90062-1644">Convertit la valeur numérique de l’objet <see cref="T:System.Numerics.BigInteger" /> actuel en sa représentation sous forme de chaîne équivalente à l’aide des informations spécifiées de mise en forme spécifiques à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1644">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="90062-1645">Représentation sous forme de chaîne de la valeur actuelle de <see cref="T:System.Numerics.BigInteger" /> au format spécifié par le paramètre <paramref name="provider" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1645">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="provider" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1646">Le <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> méthode formats un <xref:System.Numerics.BigInteger> valeur dans le « R », ou aller-retour, mettre en forme à l’aide de le <xref:System.Globalization.NumberFormatInfo> l’objet d’une culture spécifiée.</span><span class="sxs-lookup"><span data-stu-id="90062-1646">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="90062-1647">Si vous souhaitez spécifier un autre format ou la culture actuelle, utilisez les autres surcharges de la <xref:System.Numerics.BigInteger.ToString%2A> méthode, comme suit :</span><span class="sxs-lookup"><span data-stu-id="90062-1647">If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="90062-1648">Pour utiliser le format</span><span class="sxs-lookup"><span data-stu-id="90062-1648">To use format</span></span>|<span data-ttu-id="90062-1649">Pour la culture</span><span class="sxs-lookup"><span data-stu-id="90062-1649">For culture</span></span>|<span data-ttu-id="90062-1650">Utilisez la surcharge</span><span class="sxs-lookup"><span data-stu-id="90062-1650">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="90062-1651">Format de Round-Trip ("R")</span><span class="sxs-lookup"><span data-stu-id="90062-1651">Round-trip ("R") format</span></span>|<span data-ttu-id="90062-1652">Culture (actuel) par défaut</span><span class="sxs-lookup"><span data-stu-id="90062-1652">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="90062-1653">Un format spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1653">A specific format</span></span>|<span data-ttu-id="90062-1654">Culture (actuel) par défaut</span><span class="sxs-lookup"><span data-stu-id="90062-1654">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="90062-1655">Un format spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1655">A specific format</span></span>|<span data-ttu-id="90062-1656">Une culture spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1656">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="90062-1657">Le `provider` paramètre est un <xref:System.IFormatProvider> mise en œuvre.</span><span class="sxs-lookup"><span data-stu-id="90062-1657">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="90062-1658">Son <xref:System.IFormatProvider.GetFormat%2A> méthode retourne un <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée par cette méthode.</span><span class="sxs-lookup"><span data-stu-id="90062-1658">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="90062-1659">Si `provider` est `null`, le <xref:System.Numerics.BigInteger> valeur est mise en forme à l’aide de la <xref:System.Globalization.NumberFormatInfo> objet de la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1659">If `provider` is `null`, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span> <span data-ttu-id="90062-1660">La seule propriété de la <xref:System.Globalization.NumberFormatInfo> objet qui contrôle la représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> valeur à l’aide du spécificateur de format général est <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, qui définit le caractère qui représente le signe négatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1660">The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, which defines the character that represents the negative sign.</span></span>  
  
 <span data-ttu-id="90062-1661">Le `provider` paramètre peut prendre l’une des opérations suivantes :</span><span class="sxs-lookup"><span data-stu-id="90062-1661">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="90062-1662">A <xref:System.Globalization.CultureInfo> objet qui représente la culture qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1662">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="90062-1663">Le <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1663">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="90062-1664">Un objet personnalisé qui implémente <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="90062-1664">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="90062-1665">Son <xref:System.IFormatProvider.GetFormat%2A> méthode retourne la <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1665">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1666">L’exemple suivant instancie un personnalisé <xref:System.Globalization.NumberFormatInfo> objet qui définit le tilde (~) comme un signe négatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1666">The following example instantiates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span> <span data-ttu-id="90062-1667">Le <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> méthode utilise ensuite personnalisé <xref:System.Globalization.NumberFormatInfo> objet pour afficher une valeur négative <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1667">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method then uses the custom <xref:System.Globalization.NumberFormatInfo> object to display a negative <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/cs/System.Numeric.BigInteger.ToString.cs#1)]
 [!code-vb[System.Numeric.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/vb/System.Numeric.BigInteger.ToString.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="90062-1668">Chaîne de format numérique standard ou personnalisée.</span><span class="sxs-lookup"><span data-stu-id="90062-1668">A standard or custom numeric format string.</span></span></param>
        <summary><span data-ttu-id="90062-1669">Convertit la valeur numérique de l’objet <see cref="T:System.Numerics.BigInteger" /> actuel en sa représentation sous forme de chaîne équivalente en utilisant le format spécifié.</span><span class="sxs-lookup"><span data-stu-id="90062-1669">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format.</span></span></summary>
        <returns><span data-ttu-id="90062-1670">Représentation sous forme de chaîne de la valeur actuelle de <see cref="T:System.Numerics.BigInteger" /> au format spécifié par le paramètre <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1670">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="format" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1671">Le <xref:System.Numerics.BigInteger.ToString%28System.String%29> méthode formats un <xref:System.Numerics.BigInteger> valeur dans un format spécifié à l’aide un <xref:System.Globalization.NumberFormatInfo> objet qui représente les conventions de la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1671">The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture.</span></span> <span data-ttu-id="90062-1672">Si vous souhaitez utiliser le « R », ou aller-retour, mettre en forme ou spécifiez une autre culture, utilisez les autres surcharges de la <xref:System.Numerics.BigInteger.ToString%2A> méthode, comme suit :</span><span class="sxs-lookup"><span data-stu-id="90062-1672">If you want to use the "R", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="90062-1673">Pour utiliser le format</span><span class="sxs-lookup"><span data-stu-id="90062-1673">To use format</span></span>|<span data-ttu-id="90062-1674">Pour la culture</span><span class="sxs-lookup"><span data-stu-id="90062-1674">For culture</span></span>|<span data-ttu-id="90062-1675">Utilisez la surcharge</span><span class="sxs-lookup"><span data-stu-id="90062-1675">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="90062-1676">Format de Round-Trip ("R")</span><span class="sxs-lookup"><span data-stu-id="90062-1676">Round-trip ("R") format</span></span>|<span data-ttu-id="90062-1677">Culture (actuel) par défaut</span><span class="sxs-lookup"><span data-stu-id="90062-1677">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="90062-1678">Format de Round-Trip ("R")</span><span class="sxs-lookup"><span data-stu-id="90062-1678">Round-trip ("R") format</span></span>|<span data-ttu-id="90062-1679">Une culture spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1679">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="90062-1680">Un format spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1680">A specific format</span></span>|<span data-ttu-id="90062-1681">Une culture spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1681">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="90062-1682">Le `format` paramètre peut être valide [chaîne numérique standard](~/docs/standard/base-types/standard-numeric-format-strings.md), ou toute combinaison de [les chaînes de format numériques personnalisées](~/docs/standard/base-types/custom-numeric-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="90062-1682">The `format` parameter can be any valid [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="90062-1683">Si `format` est égal à <xref:System.String.Empty?displayProperty=nameWithType> ou `null`, la valeur de retour du courant <xref:System.Numerics.BigInteger> objet est mis en forme avec le spécificateur de format aller-retour (« R »).</span><span class="sxs-lookup"><span data-stu-id="90062-1683">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="90062-1684">Si `format` une autre valeur, la méthode lève une exception un <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="90062-1684">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="90062-1685">Le .NET Framework fournit une prise en charge complète de la mise en forme, est décrite en détail dans les rubriques de mise en forme suivantes :</span><span class="sxs-lookup"><span data-stu-id="90062-1685">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="90062-1686">Pour plus d’informations sur les spécificateurs de format numérique, consultez [des chaînes de Format numériques Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) et [les chaînes de Format numériques personnalisées](~/docs/standard/base-types/custom-numeric-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="90062-1686">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="90062-1687">Pour plus d’informations sur la prise en charge de la mise en forme dans le .NET Framework, consultez [mise en forme des Types](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="90062-1687">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="90062-1688">Le format de la chaîne retournée est déterminé par le <xref:System.Globalization.NumberFormatInfo> objet pour la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1688">The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="90062-1689">Selon le `format` paramètre, cet objet contrôle les symboles tels que le signe négatif, le séparateur de groupes et le symbole de séparateur décimal dans la chaîne de sortie.</span><span class="sxs-lookup"><span data-stu-id="90062-1689">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="90062-1690">Pour fournir des informations de mise en forme pour les cultures autres que la culture actuelle, appelez la <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> de surcharge.</span><span class="sxs-lookup"><span data-stu-id="90062-1690">To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1691">L’exemple suivant initialise un <xref:System.Numerics.BigInteger> valeur et l’affiche à l’aide de chaque chaîne de format standard et des chaînes de format personnalisé.</span><span class="sxs-lookup"><span data-stu-id="90062-1691">The following example initializes a <xref:System.Numerics.BigInteger> value and displays it by using each standard format string and some custom format strings.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="90062-1692"><paramref name="format" /> n’est pas une chaîne de format valide.</span><span class="sxs-lookup"><span data-stu-id="90062-1692"><paramref name="format" /> is not a valid format string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="90062-1693">Chaîne de format numérique standard ou personnalisée.</span><span class="sxs-lookup"><span data-stu-id="90062-1693">A standard or custom numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="90062-1694">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1694">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="90062-1695">Convertit la valeur numérique de l’objet <see cref="T:System.Numerics.BigInteger" /> actuel en sa représentation sous forme de chaîne équivalente à l’aide du format spécifié et des informations de mise en forme spécifiques à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1695">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format and culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="90062-1696">La représentation sous forme de chaîne de la valeur <see cref="T:System.Numerics.BigInteger" /> actuelle spécifiée par les paramètres <paramref name="format" /> et <paramref name="provider" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1696">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1697">Le <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> méthode formats un <xref:System.Numerics.BigInteger> valeur dans un format spécifié à l’aide de le <xref:System.Globalization.NumberFormatInfo> l’objet d’une culture spécifiée.</span><span class="sxs-lookup"><span data-stu-id="90062-1697">The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="90062-1698">Si vous souhaitez utiliser le format aller-retour ou les paramètres de culture par défaut, utilisez les autres surcharges de la <xref:System.Numerics.BigInteger.ToString%2A> méthode, comme suit :</span><span class="sxs-lookup"><span data-stu-id="90062-1698">If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="90062-1699">Pour utiliser le format</span><span class="sxs-lookup"><span data-stu-id="90062-1699">To use format</span></span>|<span data-ttu-id="90062-1700">Pour la culture</span><span class="sxs-lookup"><span data-stu-id="90062-1700">For culture</span></span>|<span data-ttu-id="90062-1701">Utilisez la surcharge</span><span class="sxs-lookup"><span data-stu-id="90062-1701">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="90062-1702">Format de Round-Trip ("R")</span><span class="sxs-lookup"><span data-stu-id="90062-1702">Round-trip ("R") format</span></span>|<span data-ttu-id="90062-1703">Culture (actuel) par défaut</span><span class="sxs-lookup"><span data-stu-id="90062-1703">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="90062-1704">Format de Round-Trip ("R")</span><span class="sxs-lookup"><span data-stu-id="90062-1704">Round-trip ("R") format</span></span>|<span data-ttu-id="90062-1705">Une culture spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1705">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="90062-1706">Un format spécifique</span><span class="sxs-lookup"><span data-stu-id="90062-1706">A specific format</span></span>|<span data-ttu-id="90062-1707">Culture (actuel) par défaut</span><span class="sxs-lookup"><span data-stu-id="90062-1707">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
  
 <span data-ttu-id="90062-1708">Le `format` paramètre peut être valide [chaîne numérique standard](~/docs/standard/base-types/standard-numeric-format-strings.md), ou toute combinaison de [les chaînes de format numériques personnalisées](~/docs/standard/base-types/custom-numeric-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="90062-1708">The `format` parameter can be any valid  [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="90062-1709">Si `format` est égal à <xref:System.String.Empty?displayProperty=nameWithType> ou `null`, la valeur de retour du courant <xref:System.Numerics.BigInteger> objet est mis en forme avec le spécificateur de format aller-retour (« R »).</span><span class="sxs-lookup"><span data-stu-id="90062-1709">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="90062-1710">Si `format` une autre valeur, la méthode lève une exception un <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="90062-1710">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="90062-1711">Le .NET Framework fournit une prise en charge complète de la mise en forme, est décrite en détail dans les rubriques de mise en forme suivantes :</span><span class="sxs-lookup"><span data-stu-id="90062-1711">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="90062-1712">Pour plus d’informations sur les spécificateurs de format numérique, consultez [des chaînes de Format numériques Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) et [les chaînes de Format numériques personnalisées](~/docs/standard/base-types/custom-numeric-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="90062-1712">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="90062-1713">Pour plus d’informations sur la prise en charge de la mise en forme dans le .NET Framework, consultez [mise en forme des Types](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="90062-1713">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="90062-1714">Le `provider` paramètre est un <xref:System.IFormatProvider> mise en œuvre.</span><span class="sxs-lookup"><span data-stu-id="90062-1714">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="90062-1715">Son <xref:System.IFormatProvider.GetFormat%2A> méthode retourne un <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée par cette méthode.</span><span class="sxs-lookup"><span data-stu-id="90062-1715">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="90062-1716">Lorsque le <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> méthode est appelée, elle appelle la `provider` du paramètre <xref:System.IFormatProvider.GetFormat%2A> (méthode) et lui passe un <xref:System.Type> objet qui représente le <xref:System.Globalization.NumberFormatInfo> type.</span><span class="sxs-lookup"><span data-stu-id="90062-1716">When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="90062-1717">Le <xref:System.IFormatProvider.GetFormat%2A> méthode renvoie alors le <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme le `value` paramètre, comme le symbole du signe négatif, le symbole de séparateur de groupes ou le symbole de virgule décimale.</span><span class="sxs-lookup"><span data-stu-id="90062-1717">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the `value` parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol.</span></span> <span data-ttu-id="90062-1718">Il existe trois façons d’utiliser le `provider` paramètre pour fournir des informations de mise en forme à la <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> méthode :</span><span class="sxs-lookup"><span data-stu-id="90062-1718">There are three ways to use the `provider` parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:</span></span>  
  
-   <span data-ttu-id="90062-1719">Vous pouvez passer un <xref:System.Globalization.CultureInfo> objet qui représente la culture qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1719">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="90062-1720">Son <xref:System.Globalization.CultureInfo.GetFormat%2A> méthode retourne la <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme numériques pour cette culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1720">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="90062-1721">Vous pouvez passer le réel <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme numériques.</span><span class="sxs-lookup"><span data-stu-id="90062-1721">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="90062-1722">(Son implémentation de <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> retourne simplement lui-même.)</span><span class="sxs-lookup"><span data-stu-id="90062-1722">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="90062-1723">Vous pouvez passer un objet personnalisé qui implémente <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="90062-1723">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="90062-1724">Son <xref:System.IFormatProvider.GetFormat%2A> méthode instancie et retourne le <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1724">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="90062-1725">Si `provider` est `null`, la mise en forme de la chaîne retournée est basée sur la <xref:System.Globalization.NumberFormatInfo> objet de la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1725">If `provider` is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1726">L’exemple suivant initialise un <xref:System.Numerics.BigInteger> valeur et l’affiche dans la console à l’aide d’une chaîne de format standard et un <xref:System.Globalization.NumberFormatInfo> objet qui définit le tilde (~) comme un signe négatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1726">The following example initializes a <xref:System.Numerics.BigInteger> value, and displays it to the console using a standard format string and a <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="90062-1727"><paramref name="format" /> n’est pas une chaîne de format valide.</span><span class="sxs-lookup"><span data-stu-id="90062-1727"><paramref name="format" /> is not a valid format string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90062-1728">Essaie de convertir la représentation sous forme de chaîne d'un nombre en son équivalent <see cref="T:System.Numerics.BigInteger" /> et retourne une valeur indiquant si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="90062-1728">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Numerics.BigInteger&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Numerics.BigInteger&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1729">Représentation sous forme de chaîne d'un nombre.</span><span class="sxs-lookup"><span data-stu-id="90062-1729">The string representation of a number.</span></span></param>
        <param name="result"><span data-ttu-id="90062-1730">Quand cette méthode est retournée, contient la valeur <see cref="T:System.Numerics.BigInteger" /> équivalente au nombre contenu dans <c>value</c>, ou zéro (0) en cas d’échec de la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-1730">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <c>value</c>, or zero (0) if the conversion fails.</span></span> <span data-ttu-id="90062-1731">La conversion échoue si le paramètre <c>value</c> a la valeur <see langword="null" /> ou s’il n’est pas au format approprié.</span><span class="sxs-lookup"><span data-stu-id="90062-1731">The conversion fails if the <c>value</c> parameter is <see langword="null" /> or is not of the correct format.</span></span> <span data-ttu-id="90062-1732">Ce paramètre est passé sans être initialisé.</span><span class="sxs-lookup"><span data-stu-id="90062-1732">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="90062-1733">Essaie de convertir la représentation sous forme de chaîne d'un nombre en son équivalent <see cref="T:System.Numerics.BigInteger" /> et retourne une valeur indiquant si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="90062-1733">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1734"><see langword="true" /> si la conversion de <paramref name="value" /> est réussie ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1734"><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1735">Le <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> méthode est similaire à la <xref:System.Numerics.BigInteger.Parse%28System.String%29> (méthode), à ceci près qu’elle ne lève pas d’exception si la conversion échoue.</span><span class="sxs-lookup"><span data-stu-id="90062-1735">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="90062-1736">Cette méthode élimine le besoin d’utiliser la gestion des exceptions pour tester un <xref:System.FormatException> si `value` n’est pas valide et ne peut pas être analysée avec succès.</span><span class="sxs-lookup"><span data-stu-id="90062-1736">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="90062-1737">Le `value` paramètre doit être la représentation sous forme de chaîne d’un nombre décimal sous la forme suivante :</span><span class="sxs-lookup"><span data-stu-id="90062-1737">The `value` parameter should be the string representation of a decimal number in the following form:</span></span>  
  
 <span data-ttu-id="90062-1738">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="90062-1738">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="90062-1739">Les éléments entre crochets ([ et ]) sont facultatifs.</span><span class="sxs-lookup"><span data-stu-id="90062-1739">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="90062-1740">Le tableau suivant décrit chaque élément.</span><span class="sxs-lookup"><span data-stu-id="90062-1740">The following table describes each element.</span></span>  
  
|<span data-ttu-id="90062-1741">Élément</span><span class="sxs-lookup"><span data-stu-id="90062-1741">Element</span></span>|<span data-ttu-id="90062-1742">Description </span><span class="sxs-lookup"><span data-stu-id="90062-1742">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="90062-1743">*ws*</span><span class="sxs-lookup"><span data-stu-id="90062-1743">*ws*</span></span>|<span data-ttu-id="90062-1744">Espace blanc facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1744">Optional white space.</span></span>|  
|<span data-ttu-id="90062-1745">*sign*</span><span class="sxs-lookup"><span data-stu-id="90062-1745">*sign*</span></span>|<span data-ttu-id="90062-1746">Un signe facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1746">An optional sign.</span></span> <span data-ttu-id="90062-1747">Caractères de signe valides sont déterminés par le <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> et <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> propriétés de la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1747">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="90062-1748">*digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1748">*digits*</span></span>|<span data-ttu-id="90062-1749">Une séquence de chiffres décimaux compris entre 0 et 9.</span><span class="sxs-lookup"><span data-stu-id="90062-1749">A sequence of decimal digits ranging from 0 to 9.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="90062-1750">La chaîne spécifiée par le `value` paramètre ne peut pas contenir de séparateurs de groupes ou séparateur décimal, et il ne peut pas avoir de partie décimale.</span><span class="sxs-lookup"><span data-stu-id="90062-1750">The string specified by the `value` parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="90062-1751">Le `value` paramètre est interprété à l’aide de la <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span><span class="sxs-lookup"><span data-stu-id="90062-1751">The `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="90062-1752">Outre les chiffres décimaux, uniquement espaces à gauche et avec un signe de début sont autorisés.</span><span class="sxs-lookup"><span data-stu-id="90062-1752">In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed.</span></span> <span data-ttu-id="90062-1753">Pour définir explicitement les éléments de style avec les informations de mise en forme propres à la culture qui peuvent être présents dans `value`, appelez le <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="90062-1753">To explicitly define the style elements with the culture-specific formatting information that can be present in `value`, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method.</span></span>  
  
 <span data-ttu-id="90062-1754">Le `value` paramètre est analysé en utilisant les informations de mise en forme dans un <xref:System.Globalization.NumberFormatInfo> objet pour la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="90062-1754">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="90062-1755">Pour plus d'informations, consultez <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1755">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="90062-1756">Cette surcharge interprète tous les chiffres dans le `value` paramètre en tant que chiffres décimaux.</span><span class="sxs-lookup"><span data-stu-id="90062-1756">This overload interprets all digits in the `value` parameter as decimal digits.</span></span> <span data-ttu-id="90062-1757">Pour analyser la représentation sous forme de chaîne d’un nombre hexadécimal, appelez le <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> à la place de surcharge.</span><span class="sxs-lookup"><span data-stu-id="90062-1757">To parse the string representation of a hexadecimal number, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> overload instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1758">L’exemple suivant utilise le <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> méthode pour instancier deux <xref:System.Numerics.BigInteger> objets.</span><span class="sxs-lookup"><span data-stu-id="90062-1758">The following example uses the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="90062-1759">Si les conversions réussissent, il multiplie chaque objet par un autre nombre, puis appelle la <xref:System.Numerics.BigInteger.Compare%2A> méthode pour déterminer la relation entre les deux objets.</span><span class="sxs-lookup"><span data-stu-id="90062-1759">If the conversions succeed, it multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two objects.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/cs/System.Numeric.BigInteger.TryParse.cs#1)]
 [!code-vb[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/vb/System.Numeric.BigInteger.TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90062-1760"><paramref name="value" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1760"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.ToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Numerics.BigInteger&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Numerics.BigInteger&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="90062-1761">Représentation sous forme de chaîne d'un nombre.</span><span class="sxs-lookup"><span data-stu-id="90062-1761">The string representation of a number.</span></span> <span data-ttu-id="90062-1762">La chaîne est interprétée à l’aide du style spécifié par <c>style</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1762">The string is interpreted using the style specified by <c>style</c>.</span></span></param>
        <param name="style"><span data-ttu-id="90062-1763">Combinaison de bits de valeurs d’énumération qui indique les éléments de style qui peuvent être présents dans <c>value</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1763">A bitwise combination of enumeration values that indicates the style elements that can be present in <c>value</c>.</span></span> <span data-ttu-id="90062-1764">Une valeur typique à spécifier est <see cref="F:System.Globalization.NumberStyles.Integer" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1764">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</span></span></param>
        <param name="provider"><span data-ttu-id="90062-1765">Objet qui fournit des informations de mise en forme propres à la culture sur <c>value</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1765">An object that supplies culture-specific formatting information about <c>value</c>.</span></span></param>
        <param name="result"><span data-ttu-id="90062-1766">Quand cette méthode est retournée, contient la valeur <see cref="T:System.Numerics.BigInteger" /> équivalente au nombre contenu dans <c>value</c>, ou <see cref="P:System.Numerics.BigInteger.Zero" /> en cas d’échec de la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-1766">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <c>value</c>, or <see cref="P:System.Numerics.BigInteger.Zero" /> if the conversion failed.</span></span> <span data-ttu-id="90062-1767">La conversion échoue si le paramètre <c>value</c> a la valeur <see langword="null" /> ou s’il n’est pas dans un format compatible avec <c>style</c>.</span><span class="sxs-lookup"><span data-stu-id="90062-1767">The conversion fails if the <c>value</c> parameter is <see langword="null" /> or is not in a format that is compliant with <c>style</c>.</span></span> <span data-ttu-id="90062-1768">Ce paramètre est passé sans être initialisé.</span><span class="sxs-lookup"><span data-stu-id="90062-1768">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="90062-1769">Essaie de convertir la représentation sous forme de chaîne d'un nombre ayant un style et un format spécifique à la culture spécifiés en son équivalent <see cref="T:System.Numerics.BigInteger" /> et retourne une valeur qui indique si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="90062-1769">Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="90062-1770"><see langword="true" /> si la conversion du paramètre <paramref name="value" /> a réussi ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1770"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1771">Le <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> méthode est similaire à la <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> (méthode), à ceci près qu’elle ne lève pas d’exception si la conversion échoue.</span><span class="sxs-lookup"><span data-stu-id="90062-1771">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="90062-1772">Cette méthode élimine le besoin d’utiliser la gestion des exceptions pour tester un <xref:System.FormatException> si `value` n’est pas valide et ne peut pas être analysée avec succès.</span><span class="sxs-lookup"><span data-stu-id="90062-1772">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.</span></span>  
  
 <span data-ttu-id="90062-1773">Le `style` paramètre définit les éléments de style (par exemple, un espace blanc ou un signe positif ou négatif) qui sont autorisés dans les `value` paramètre pour l’opération d’analyse.</span><span class="sxs-lookup"><span data-stu-id="90062-1773">The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="90062-1774">Il doit être une combinaison de bits indicateurs de le <xref:System.Globalization.NumberStyles> énumération.</span><span class="sxs-lookup"><span data-stu-id="90062-1774">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="90062-1775">Selon la valeur de `style`, le `value` paramètre peut inclure les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="90062-1775">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="90062-1776">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="90062-1776">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="90062-1777">Si le `style` paramètre inclut <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, le `value` paramètre peut inclure les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="90062-1777">If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="90062-1778">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="90062-1778">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="90062-1779">Les éléments entre crochets ([ et ]) sont facultatifs.</span><span class="sxs-lookup"><span data-stu-id="90062-1779">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="90062-1780">Le tableau suivant décrit chaque élément.</span><span class="sxs-lookup"><span data-stu-id="90062-1780">The following table describes each element.</span></span>  
  
|<span data-ttu-id="90062-1781">Élément</span><span class="sxs-lookup"><span data-stu-id="90062-1781">Element</span></span>|<span data-ttu-id="90062-1782">Description </span><span class="sxs-lookup"><span data-stu-id="90062-1782">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="90062-1783">*ws*</span><span class="sxs-lookup"><span data-stu-id="90062-1783">*ws*</span></span>|<span data-ttu-id="90062-1784">Espace blanc facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1784">Optional white space.</span></span> <span data-ttu-id="90062-1785">Espace blanc peut apparaître au début de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> indicateur, ou à la fin de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1785">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="90062-1786">Un symbole monétaire spécifique à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1786">A culture-specific currency symbol.</span></span> <span data-ttu-id="90062-1787">Sa position dans la chaîne est définie par le <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> propriété de la <xref:System.Globalization.NumberFormatInfo> objet retourné par la <xref:System.IFormatProvider.GetFormat%2A> méthode de le `provider` paramètre.</span><span class="sxs-lookup"><span data-stu-id="90062-1787">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter.</span></span> <span data-ttu-id="90062-1788">Le symbole monétaire peut apparaître dans `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1788">The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1789">*sign*</span><span class="sxs-lookup"><span data-stu-id="90062-1789">*sign*</span></span>|<span data-ttu-id="90062-1790">Un signe facultatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1790">An optional sign.</span></span> <span data-ttu-id="90062-1791">Le signe peut apparaître au début de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> indicateur, qui peuvent apparaître à la fin de `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1791">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="90062-1792">Parenthèses peuvent être utilisées dans `value` pour indiquer une valeur négative si `style` inclut la <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1792">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1793">*digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1793">*digits*</span></span>|<span data-ttu-id="90062-1794">Une séquence de chiffres de 0 à 9.</span><span class="sxs-lookup"><span data-stu-id="90062-1794">A sequence of digits from 0 through 9.</span></span>|  
|<span data-ttu-id="90062-1795">*,*</span><span class="sxs-lookup"><span data-stu-id="90062-1795">*,*</span></span>|<span data-ttu-id="90062-1796">Un séparateur de groupes spécifique à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1796">A culture-specific group separator.</span></span> <span data-ttu-id="90062-1797">Le séparateur de groupes de la culture spécifiée par `provider` peut apparaître dans `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1797">The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1798">*.*</span><span class="sxs-lookup"><span data-stu-id="90062-1798">*.*</span></span>|<span data-ttu-id="90062-1799">Un symbole décimal spécifiques à la culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1799">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="90062-1800">Le symbole de virgule décimale de la culture spécifiée par `provider` peut apparaître dans `value` si `style` inclut la <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1800">The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1801">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1801">*fractional_digits*</span></span>|<span data-ttu-id="90062-1802">Une ou plusieurs occurrences du chiffre 0.</span><span class="sxs-lookup"><span data-stu-id="90062-1802">One or more occurrences of the digit 0.</span></span> <span data-ttu-id="90062-1803">Chiffres fractionnaires peuvent apparaître dans `value` uniquement si `style` inclut la <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1803">Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1804">E</span><span class="sxs-lookup"><span data-stu-id="90062-1804">E</span></span>|<span data-ttu-id="90062-1805">Le « e » ou un caractère « E », ce qui indique que la valeur est représentée dans la notation exponentielle (scientifique).</span><span class="sxs-lookup"><span data-stu-id="90062-1805">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="90062-1806">Le `value` paramètre peut représenter un nombre en notation exponentielle si `style` inclut la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1806">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1807">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="90062-1807">*exponential_digits*</span></span>|<span data-ttu-id="90062-1808">Une séquence de chiffres de 0 à 9.</span><span class="sxs-lookup"><span data-stu-id="90062-1808">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="90062-1809">Le `value` paramètre peut représenter un nombre en notation exponentielle si `style` inclut la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="90062-1809">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="90062-1810">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="90062-1810">*hexdigits*</span></span>|<span data-ttu-id="90062-1811">Une séquence de chiffres hexadécimaux compris entre 0 et f, ou 0 et F.</span><span class="sxs-lookup"><span data-stu-id="90062-1811">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
 <span data-ttu-id="90062-1812">Une chaîne contenant uniquement des chiffres décimaux (ce qui correspond à la <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> indicateur) toujours analysée avec succès.</span><span class="sxs-lookup"><span data-stu-id="90062-1812">A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> flag) always parses successfully.</span></span> <span data-ttu-id="90062-1813">La plupart des restant <xref:System.Globalization.NumberStyles> membres contrôlent des éléments qui peuvent être présents, mais ne doivent pas être présents dans cette chaîne d’entrée.</span><span class="sxs-lookup"><span data-stu-id="90062-1813">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string.</span></span> <span data-ttu-id="90062-1814">Le tableau suivant indique comment chaque <xref:System.Globalization.NumberStyles> membres affectent les éléments qui peuvent être présents dans `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1814">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="90062-1815">Non composites `NumberStyles` valeurs</span><span class="sxs-lookup"><span data-stu-id="90062-1815">Non-composite `NumberStyles` values</span></span>|<span data-ttu-id="90062-1816">Éléments autorisés dans la valeur en plus des chiffres</span><span class="sxs-lookup"><span data-stu-id="90062-1816">Elements permitted in value in addition to digits</span></span>|  
|------------------------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="90062-1817">Uniquement des chiffres décimaux.</span><span class="sxs-lookup"><span data-stu-id="90062-1817">Decimal digits only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="90062-1818">Le point décimal (*.*) et *chiffres fractionnaires* éléments.</span><span class="sxs-lookup"><span data-stu-id="90062-1818">The decimal point (*.*) and *fractional_digits* elements.</span></span> <span data-ttu-id="90062-1819">Toutefois, *chiffres fractionnaires* doit comporter un ou plusieurs chiffres 0, ou la méthode retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="90062-1819">However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="90062-1820">Le « e » ou un caractère « E », ce qui indique la notation exponentielle avec *chiffres_exponentiels*.</span><span class="sxs-lookup"><span data-stu-id="90062-1820">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span> <span data-ttu-id="90062-1821">Si `value` représente un nombre en notation exponentielle, il ne peut pas avoir un composant différent de zéro et fractionnaire.</span><span class="sxs-lookup"><span data-stu-id="90062-1821">If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="90062-1822">Le *ws* élément au début de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1822">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="90062-1823">Le *ws* élément à la fin de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1823">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="90062-1824">Le *signe* élément avant *chiffres*.</span><span class="sxs-lookup"><span data-stu-id="90062-1824">The *sign* element before *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="90062-1825">Le *signe* élément après *chiffres*.</span><span class="sxs-lookup"><span data-stu-id="90062-1825">The *sign* element after *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="90062-1826">Le *signe* élément sous la forme de parenthèses entourant la valeur numérique.</span><span class="sxs-lookup"><span data-stu-id="90062-1826">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="90062-1827">Le séparateur de groupes (*,*) élément.</span><span class="sxs-lookup"><span data-stu-id="90062-1827">The group separator (*,*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="90062-1828">La devise (*$*) élément.</span><span class="sxs-lookup"><span data-stu-id="90062-1828">The currency (*$*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="90062-1829">Tous les éléments.</span><span class="sxs-lookup"><span data-stu-id="90062-1829">All elements.</span></span> <span data-ttu-id="90062-1830">Toutefois, `value` ne peut pas représenter un nombre hexadécimal ou un nombre en notation exponentielle.</span><span class="sxs-lookup"><span data-stu-id="90062-1830">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="90062-1831">Le *ws* élément au début ou à la fin de `value`, *signe* au début de `value`et la virgule décimale (*.*) symbole.</span><span class="sxs-lookup"><span data-stu-id="90062-1831">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="90062-1832">Le `value` paramètre peut également utiliser la notation exponentielle.</span><span class="sxs-lookup"><span data-stu-id="90062-1832">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="90062-1833">Le *ws*, *signe*, séparateur de groupes (*,*) et le point décimal (*.*) éléments.</span><span class="sxs-lookup"><span data-stu-id="90062-1833">The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="90062-1834">Tous les éléments.</span><span class="sxs-lookup"><span data-stu-id="90062-1834">All elements.</span></span> <span data-ttu-id="90062-1835">Toutefois, `value` ne peut pas représenter un nombre hexadécimal.</span><span class="sxs-lookup"><span data-stu-id="90062-1835">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="90062-1836">Si vous utilisez la <xref:System.Numerics.BigInteger.TryParse%2A> méthode pour effectuer un aller-retour la représentation sous forme de chaîne d’un <xref:System.Numerics.BigInteger> valeur générée par le <xref:System.Numerics.BigInteger.ToString%2A> (méthode), vous devez utiliser le <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> méthode avec le spécificateur de format « R » pour générer la représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1836">If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="90062-1837">Dans le cas contraire, la représentation sous forme de chaîne de la <xref:System.Numerics.BigInteger> conserve uniquement les 50 chiffres les plus significatifs de la valeur d’origine et les données peuvent être perdues lorsque vous utilisez la <xref:System.Numerics.BigInteger.TryParse%2A> méthode pour restaurer le <xref:System.Numerics.BigInteger> valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1837">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="90062-1838">Si le <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> indicateur est utilisé, `value` doit être une valeur hexadécimale.</span><span class="sxs-lookup"><span data-stu-id="90062-1838">If the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> flag is used, `value` must be a hexadecimal value.</span></span> <span data-ttu-id="90062-1839">Les seuls autres indicateurs qui peuvent être présents dans `style` sont <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> et <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="90062-1839">The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90062-1840">(Le <xref:System.Globalization.NumberStyles> énumération a un style composite, <xref:System.Globalization.NumberStyles.HexNumber>, qui inclut les deux indicateurs d’espace blanc.)</span><span class="sxs-lookup"><span data-stu-id="90062-1840">(The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90062-1841">Si `value` est la représentation sous forme de chaîne d’un nombre hexadécimal, il ne peut pas être précédé d’aucune décoration (tel que `0x` ou `&h`) différenciant comme un nombre hexadécimal.</span><span class="sxs-lookup"><span data-stu-id="90062-1841">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="90062-1842">Cela provoque l’échec de la conversion.</span><span class="sxs-lookup"><span data-stu-id="90062-1842">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="90062-1843">Si `value` est une chaîne hexadécimale, la <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> méthode interprète `value` comme un nombre négatif stocké à l’aide de représentation de complément à deux si ses deux premiers chiffres hexadécimaux sont supérieur ou égal à `0x80`.</span><span class="sxs-lookup"><span data-stu-id="90062-1843">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="90062-1844">En d’autres termes, la méthode interprète le bit d’ordre le plus élevé du premier octet dans `value` comme bit de signe.</span><span class="sxs-lookup"><span data-stu-id="90062-1844">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="90062-1845">Pour vous assurer qu’une chaîne hexadécimale est correctement interprétée comme un nombre positif, le premier chiffre de `value` doit avoir une valeur égale à zéro.</span><span class="sxs-lookup"><span data-stu-id="90062-1845">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="90062-1846">Par exemple, la méthode interprète `0x80` comme une valeur négative, mais il interprète `0x080` ou `0x0080` comme une valeur positive.</span><span class="sxs-lookup"><span data-stu-id="90062-1846">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="90062-1847">L’exemple suivant illustre la différence entre des chaînes hexadécimales qui représentent les valeurs positives et négatives.</span><span class="sxs-lookup"><span data-stu-id="90062-1847">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)]  
  
 <span data-ttu-id="90062-1848">Le `provider` paramètre est un <xref:System.IFormatProvider> mise en œuvre.</span><span class="sxs-lookup"><span data-stu-id="90062-1848">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="90062-1849">Son <xref:System.IFormatProvider.GetFormat%2A> méthode retourne un <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations spécifiques à la culture concernant le format de `value`.</span><span class="sxs-lookup"><span data-stu-id="90062-1849">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="90062-1850">Le `provider` paramètre peut prendre l’une des opérations suivantes :</span><span class="sxs-lookup"><span data-stu-id="90062-1850">The `provider` parameter can be any one of the following:</span></span>  
  
-   <span data-ttu-id="90062-1851">A <xref:System.Globalization.CultureInfo> objet qui représente la culture qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1851">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="90062-1852">Son <xref:System.Globalization.CultureInfo.GetFormat%2A> méthode retourne la <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme numériques pour cette culture.</span><span class="sxs-lookup"><span data-stu-id="90062-1852">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="90062-1853">A <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme numériques.</span><span class="sxs-lookup"><span data-stu-id="90062-1853">A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="90062-1854">(Son implémentation de <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> retourne simplement lui-même.)</span><span class="sxs-lookup"><span data-stu-id="90062-1854">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="90062-1855">Un objet personnalisé qui implémente <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="90062-1855">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="90062-1856">Son <xref:System.IFormatProvider.GetFormat%2A> méthode instancie et retourne le <xref:System.Globalization.NumberFormatInfo> objet qui fournit des informations de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="90062-1856">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="90062-1857">Si `provider` est `null`, le <xref:System.Globalization.NumberFormatInfo> de l’objet de la culture actuelle est utilisé.</span><span class="sxs-lookup"><span data-stu-id="90062-1857">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90062-1858">L’exemple suivant effectue des appels à la <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> méthode à l’aide de différentes combinaisons de valeurs pour le `style` et `provider` paramètres.</span><span class="sxs-lookup"><span data-stu-id="90062-1858">The following example makes some calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#2)]  
  
 <span data-ttu-id="90062-1859">Un nombre d’appels individuels à la <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> méthode passer une instance de la commande suivante `BigIntegerFormatProvider` (classe), qui définit un tilde (~) comme signe négatif.</span><span class="sxs-lookup"><span data-stu-id="90062-1859">A number of the individual calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90062-1860"><paramref name="style" /> n’est pas une valeur <see cref="T:System.Globalization.NumberStyles" />.</span><span class="sxs-lookup"><span data-stu-id="90062-1860"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
 <span data-ttu-id="90062-1861">- ou -</span><span class="sxs-lookup"><span data-stu-id="90062-1861">-or-</span></span>  
  
 <span data-ttu-id="90062-1862"><paramref name="style" /> inclut l'indicateur <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> avec une autre valeur.</span><span class="sxs-lookup"><span data-stu-id="90062-1862"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public bool TryWriteBytes (Span&lt;byte&gt; destination, out int bytesWritten, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryWriteBytes (destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="isUnsigned" Type="System.Boolean" />
        <Parameter Name="isBigEndian" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Zero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger Zero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Zero As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger Zero { System::Numerics::BigInteger get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90062-1863">Obtient une valeur qui représente le nombre 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="90062-1863">Gets a value that represents the number 0 (zero).</span></span></summary>
        <value><span data-ttu-id="90062-1864">Entier dont la valeur est 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="90062-1864">An integer whose value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90062-1865">Le <xref:System.Numerics.BigInteger> objet retourné par cette propriété fournit une source commode d’une valeur zéro pour une utilisation dans les assignations et les comparaisons.</span><span class="sxs-lookup"><span data-stu-id="90062-1865">The <xref:System.Numerics.BigInteger> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsZero" />
      </Docs>
    </Member>
  </Members>
</Type>