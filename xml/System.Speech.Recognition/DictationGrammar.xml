<Type Name="DictationGrammar" FullName="System.Speech.Recognition.DictationGrammar">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d5c28c7dfec51de61f92b6ce9ce6ae8cdb22688d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="37756010" /></Metadata><TypeSignature Language="C#" Value="public class DictationGrammar : System.Speech.Recognition.Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DictationGrammar extends System.Speech.Recognition.Grammar" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.DictationGrammar" />
  <TypeSignature Language="VB.NET" Value="Public Class DictationGrammar&#xA;Inherits Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class DictationGrammar : System::Speech::Recognition::Grammar" />
  <TypeSignature Language="F#" Value="type DictationGrammar = class&#xA;    inherit Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.Grammar</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente une syntaxe de reconnaissance vocale utilisée pour la dictée de texte libre.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette classe fournit des applications avec un modèle de langage prédéfini qui peut traiter l’entrée utilisateur parlée en texte. Cette classe prend en charge par défaut et personnalisées <xref:System.Speech.Recognition.DictationGrammar> objets. Pour plus d’informations sur la sélection d’une syntaxe de dictée, consultez le <xref:System.Speech.Recognition.DictationGrammar.%23ctor%28System.String%29> constructeur.  
  
 Par défaut, le <xref:System.Speech.Recognition.DictationGrammar> modèle linguistique est libre de contexte. Il ne fait pas utiliser de mots spécifiques ou le mot d’ordre à identifier et à interpréter l’entrée audio. Pour ajouter le contexte à la syntaxe de dictée, utilisez le <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> (méthode).  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.DictationGrammar> objets ne gèrent pas la <xref:System.Speech.Recognition.Grammar.Priority%2A> propriété. <xref:System.Speech.Recognition.DictationGrammar> lève une <xref:System.NotSupportedException> si <xref:System.Speech.Recognition.Grammar.Priority%2A> est défini.  
  
   
  
## Examples  
 L’exemple suivant crée trois grammaires de dictée, les ajoute à une nouvelle <xref:System.Speech.Recognition.SpeechRecognitionEngine> de l’objet et retourne le nouvel objet. La première syntaxe est la syntaxe de dictée par défaut. La deuxième syntaxe est la syntaxe de dictée orthographe. La grammaire troisième est la syntaxe de dictée par défaut qui inclut une expression de contexte. Le <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> méthode est utilisée pour associer l’expression de contexte à la syntaxe de dictée après qu’il est chargé pour la <xref:System.Speech.Recognition.SpeechRecognitionEngine> objet.  
  
```csharp  
  
private SpeechRecognitionEngine LoadDictationGrammars()  
{  
  
  // Create a default dictation grammar.  
  DictationGrammar defaultDictationGrammar = new DictationGrammar();  
  defaultDictationGrammar.Name = "default dictation";  
  defaultDictationGrammar.Enabled = true;  
  
  // Create the spelling dictation grammar.  
  DictationGrammar spellingDictationGrammar =  
    new DictationGrammar("grammar:dictation#spelling");  
  spellingDictationGrammar.Name = "spelling dictation";  
  spellingDictationGrammar.Enabled = true;  
  
  // Create the question dictation grammar.  
  DictationGrammar customDictationGrammar =  
    new DictationGrammar("grammar:dictation");  
  customDictationGrammar.Name = "question dictation";  
  customDictationGrammar.Enabled = true;  
  
  // Create a SpeechRecognitionEngine object and add the grammars to it.  
  SpeechRecognitionEngine recoEngine = new SpeechRecognitionEngine();  
  recoEngine.LoadGrammar(defaultDictationGrammar);  
  recoEngine.LoadGrammar(spellingDictationGrammar);  
  recoEngine.LoadGrammar(customDictationGrammar);  
  
  // Add a context to customDictationGrammar.  
  customDictationGrammar.SetDictationContext("How do you", null);  
  
  return recoEngine;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.DictationGrammar" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.DictationGrammar" /> pour la syntaxe de dictée par défaut fournie par la technologie vocale du bureau Windows.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La syntaxe de dictée par défaut émule les pratiques de dictée standard, y compris les signes de ponctuation. Il ne prend pas en charge l’orthographe d’un mot.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar (string topic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string topic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (topic As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar(System::String ^ topic);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.DictationGrammar : string -&gt; System.Speech.Recognition.DictationGrammar" Usage="new System.Speech.Recognition.DictationGrammar topic" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="topic" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topic">URI (Universal Resource Identifier) conforme à la norme XML qui spécifie la syntaxe de dictée (<c>grammar:dictation</c> ou <c>grammar:dictation#spelling</c>).</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.DictationGrammar" /> avec une syntaxe de dictée spécifique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La plateforme de reconnaissance vocale utilise une syntaxe d’URI spécialisée pour définir la syntaxe de dictée personnalisé. La valeur `grammar:dictation` indique la syntaxe de dictée par défaut. La valeur `grammar:dictation#spelling` indique la syntaxe de dictée orthographe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDictationContext">
      <MemberSignature Language="C#" Value="public void SetDictationContext (string precedingText, string subsequentText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDictationContext(string precedingText, string subsequentText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDictationContext (precedingText As String, subsequentText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDictationContext(System::String ^ precedingText, System::String ^ subsequentText);" />
      <MemberSignature Language="F#" Value="member this.SetDictationContext : string * string -&gt; unit" Usage="dictationGrammar.SetDictationContext (precedingText, subsequentText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precedingText" Type="System.String" />
        <Parameter Name="subsequentText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="precedingText">Texte qui indique le début d'un contexte de dictée.</param>
        <param name="subsequentText">Texte qui indique la fin d'un contexte de dictée.</param>
        <summary>Ajoute un contexte à une syntaxe de dictée qui a été chargée par un objet <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> ou <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, la syntaxe de dictée ne rend pas utiliser de mots spécifiques ou le mot d’ordre à identifier et à interpréter l’entrée audio. Lorsqu’un contexte est ajouté à une syntaxe de dictée, le moteur de reconnaissance utilise le `precedingText` et `subsequentText` pour identifier quand interpréter vocale comme dictée.  
  
> [!NOTE]
>  Une syntaxe de dictée doit être chargée par un <xref:System.Speech.Recognition.SpeechRecognizer> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine> avant de pouvoir utiliser l’objet <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> pour ajouter un contexte.  
  
 Le tableau suivant décrit comment le moteur de reconnaissance utilise les deux paramètres pour déterminer quand utiliser la syntaxe de dictée.  
  
|`precedingText`|`subsequentText`|Description |  
|---------------------|----------------------|-----------------|  
|non `null`|non `null`|Le moteur de reconnaissance utilise les termes du contrat pour mettre entre parenthèses d’expressions de candidats possibles.|  
|`null`|non `null`|Le moteur de reconnaissance utilise le `subsequentText` pour terminer la dictée.|  
|non `null`|`null`|Le moteur de reconnaissance utilise le `precedingText` pour démarrer la dictée.|  
|`null`|`null`|Le moteur de reconnaissance n’utilise pas un contexte lors de l’utilisation de la syntaxe de dictée.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
  </Members>
</Type>