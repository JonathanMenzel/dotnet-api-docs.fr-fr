<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68d8adcbb951b916fb8741f4e20d6c90b9461f90" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529333" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Associe une chaîne clé aux valeurs <see cref="T:System.Speech.Recognition.SemanticResultValue" /> pour définir des objets <see cref="T:System.Speech.Recognition.SemanticValue" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’unité de base d’une expression sémantique dans System.Speech est le <xref:System.Speech.Recognition.SemanticValue>, qui est une paire clé/valeur.  
  
 À l’aide de <xref:System.Speech.Recognition.SemanticResultKey> des objets, vous la balise <xref:System.Speech.Recognition.SemanticResultValue> instances contenues dans <xref:System.Speech.Recognition.GrammarBuilder> des objets et des chaînes afin que les valeurs sont facilement accessibles à partir de <xref:System.Speech.Recognition.SemanticValue> instances de reconnaissance.  
  
 Vous pouvez utiliser <xref:System.Speech.Recognition.SemanticResultValue> et <xref:System.Speech.Recognition.SemanticResultKey> conjointement avec les objets <xref:System.Speech.Recognition.GrammarBuilder> et <xref:System.Speech.Recognition.Choices> objets, pour définir la structure sémantique pour une grammaire de reconnaissance vocale. Pour accéder aux informations de sémantique dans un résultat de reconnaissance, obtenir une instance de <xref:System.Speech.Recognition.SemanticValue> via la <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> propriété sur <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
 Pour plus d’informations sur l’utilisation de <xref:System.Speech.Recognition.SemanticResultValue> et <xref:System.Speech.Recognition.SemanticResultKey> , consultez [SemanticResultValue de présentation et les objets de SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c) et [à l’aide d’un SemanticResultKey pour extraire un SemanticResultValue](http://msdn.microsoft.com/library/198e29b8-845f-4cec-a25e-f55c0eaf46aa) dans les [Guide de programmation système vocale pour .NET Framework 4.0](http://msdn.microsoft.com/library/610116c7-3817-40ff-857b-5d41e8511043).  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Speech.Recognition.Grammar> à reconnaître entrée de mot de passe sous la forme « mon mot de passe est... », où l’entrée réelle est mis en correspondance avec un caractère générique.  
  
 Le caractère générique est marqué avec une clé sémantique et le <xref:System.Speech.Recognition.Grammar.SpeechRecognized> gestionnaire vérifie la présence de cette balise pour vérifier qu’une entrée de mot de passe s’est produite.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Construit une instance <see cref="T:System.Speech.Recognition.SemanticResultKey" /> et associe la clé avec des composants de grammaire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les constructeurs de <xref:System.Speech.Recognition.SemanticResultKey> spécifier une étiquette de texte (la clé sémantique) et un ensemble de composants de grammaire à ajouter à une grammaire de reconnaissance vocale.  
  
 La grammaire composants peuvent être spécifié comme un tableau de <xref:System.Speech.Recognition.GrammarBuilder> objets, ou sous forme de tableau de <xref:System.String> instances.  
  
 Si les composants de la grammaire sont utilisés dans la reconnaissance, vous pouvez accéder à la liste retournée <xref:System.Speech.Recognition.SemanticValue> à l’aide de la balise de texte fournie au constructeur de <xref:System.Speech.Recognition.SemanticResultKey> comme clé sémantique. Le <xref:System.Speech.Recognition.SemanticValue.Value%2A> propriété de la <xref:System.Speech.Recognition.SemanticValue> instance sera déterminée par les composants de grammaire utilisés dans la définition de <xref:System.Speech.Recognition.SemanticResultKey>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">Balise à utiliser comme clé sémantique pour accéder à l’instance <see cref="T:System.Speech.Recognition.SemanticValue" /> associée aux objets <see cref="T:System.Speech.Recognition.GrammarBuilder" /> spécifiés par l’argument <c>builders</c>.</param>
        <param name="builders">Tableau des composants de grammaire qui seront associés à un objet <see cref="T:System.Speech.Recognition.SemanticValue" /> accessible avec la balise définie dans <c>semanticResultKey</c>.</param>
        <summary>Assigne une clé sémantique à un ou plusieurs objets <see cref="T:System.Speech.Recognition.GrammarBuilder" /> utilisés pour créer une syntaxe de reconnaissance vocale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En raison de conversions implicites, la `builders` prend en charge l’argument <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, et <xref:System.String> également des objets. Pour plus d’informations sur les conversions implicites, consultez <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.  
  
 Lorsque vous effectuez une opération de reconnaissance, le <xref:System.Speech.Recognition.GrammarBuilder> objets fournis dans le `builders` argument sont traités comme séquentielles. Par exemple, si les éléments suivants <xref:System.Speech.Recognition.SemanticResultValue> est utilisée pour construire un <xref:System.Speech.Recognition.Grammar>, entrée pour le moteur de reconnaissance doit contenir les mots « le renard brun » dans la séquence à reconnaître.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 Le `semanticResultKey` argument contient la balise utilisée pour accéder à la <xref:System.Speech.Recognition.SemanticValue> qui peut être retourné.  
  
 Le <xref:System.Speech.Recognition.SemanticValue.Value%2A> de la <xref:System.Speech.Recognition.SemanticValue> est déterminée par le <xref:System.Speech.Recognition.GrammarBuilder> instances fournies par le `builders` paramètre.  
  
 Si le <xref:System.Speech.Recognition.GrammarBuilder> objets ne contiennent aucune instance de définition de <xref:System.Speech.Recognition.SemanticResultValue>, la valeur de la <xref:System.Speech.Recognition.SemanticValue> est `null`.  
  
 Si le <xref:System.Speech.Recognition.GrammarBuilder> objets fournis dans le `builders` paramètre fournissent une non marqué (non associé à un <xref:System.Speech.Recognition.SemanticResultKey> objet) <xref:System.Speech.Recognition.SemanticResultValue> instance qui est utilisée par la logique de reconnaissance, qu’une instance de <xref:System.Speech.Recognition.SemanticResultValue> définira la <xref:System.Speech.Recognition.SemanticValue.Value%2A>propriété de la <xref:System.Speech.Recognition.SemanticValue> qui est générée.  
  
 Il doit y avoir une, et sans qu’une seule balise <xref:System.Speech.Recognition.SemanticResultValue> d’instance dans le <xref:System.Speech.Recognition.GrammarBuilder> objets spécifiés par le `builders` paramètre. Si plusieurs instances de sans balise <xref:System.Speech.Recognition.SemanticResultValue> sont associés les <xref:System.Speech.Recognition.SemanticResultKey>, chacun tentera de l’ensemble de la valeur de la <xref:System.Speech.Recognition.SemanticValue> produit dans le résultat de la reconnaissance. Cela n’est pas autorisé, et le module de reconnaissance générera une exception lorsqu’il tente d’utiliser un <xref:System.Speech.Recognition.Grammar> créé à l’aide de ces un <xref:System.Speech.Recognition.SemanticResultKey> instance.  
  
 Instances de <xref:System.Speech.Recognition.SemanticResultValue> contenus dans le <xref:System.Speech.Recognition.GrammarBuilder> objets spécifiés par le `builders` paramètre et déjà associé à un autre <xref:System.Speech.Recognition.SemanticResultKey> n’ont aucun effet sur actuel <xref:System.Speech.Recognition.SemanticResultKey> instance.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Speech.Recognition.Grammar> à reconnaître entrée de mot de passe sous la forme « mon mot de passe est... », où l’entrée réelle est mis en correspondance avec un caractère générique.  
  
 Le caractère générique est marqué par un <xref:System.Speech.Recognition.SpeechRecognizer> dont la valeur clée est « Password ». Le <xref:System.Speech.Recognition.Grammar.SpeechRecognized> gestionnaire vérifie la présence de cette balise, obtient l’entrée audio du mot de passe et vérifie le mot de passe.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">Balise à utiliser pour accéder à l’instance <see cref="T:System.Speech.Recognition.SemanticValue" /> associée aux objets <see cref="T:System.String" /> spécifiés par l’argument <c>phrases</c>.</param>
        <param name="phrases">Un ou plusieurs objets <see cref="T:System.String" />, dont le texte concaténé est associé à un objet <see cref="T:System.Speech.Recognition.SemanticValue" /> accessible avec la balise définie dans <c>semanticResultKey</c>.</param>
        <summary>Assigne une clé sémantique à une ou plusieurs instances <see cref="T:System.String" /> utilisées pour créer une syntaxe de reconnaissance vocale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous effectuez une opération de reconnaissance, le <xref:System.String> objets utilisés dans le `phrases` paramètre sont traitées comme séquentielles. Par exemple, si les éléments suivants <xref:System.Speech.Recognition.SemanticResultValue> est utilisée pour construire un <xref:System.Speech.Recognition.Grammar>, entrée pour le moteur de reconnaissance doit contenir les mots « le renard brun » dans la séquence à reconnaître.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 Le `semanticResultKey` argument détermine la clé utilisée pour accéder à la <xref:System.Speech.Recognition.SemanticValue> qui peut être retourné.  
  
 Si vous construisez un <xref:System.Speech.Recognition.Grammar> à l’aide un <xref:System.Speech.Recognition.GrammarBuilder> objet qui contient une clé sémantique avec un tableau d’objets string, le <xref:System.Speech.Recognition.SemanticValue.Value%2A> de la <xref:System.Speech.Recognition.SemanticValue> produite par une opération de reconnaissance sera la chaîne utilisée dans la reconnaissance. Dans l’exemple précédent, cela signifie que <xref:System.Speech.Recognition.SemanticValue.Value%2A> serait « le renard brun ».  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Speech.Recognition.Grammar> d’un <xref:System.Speech.Recognition.GrammarBuilder> objet qui utilise un <xref:System.Speech.Recognition.SemanticResultKey>, qui est défini par un tableau de <xref:System.String> objets.  
  
 Un moteur de reconnaissance à l’aide de la <xref:System.Speech.Recognition.Grammar> créé sera reconnaît la phrase « couleur rouge de zéro bleu vert ». La sémantique de la <xref:System.Speech.Recognition.RecognizedPhrase> retourné par reconnaissance contiendra un <xref:System.Speech.Recognition.SemanticValue> avec un <xref:System.Speech.Recognition.SemanticValue.Value%2A> de « rouge vert bleu ». Vous pouvez accéder à la <xref:System.Speech.Recognition.SemanticValue> à l’aide de la balise « code ».  
  
 Raison de la `SemanticResultValue("zero", 5)` ajouté à la <xref:System.Speech.Recognition.GrammarBuilder>, la racine <xref:System.Speech.Recognition.SemanticValue> de l’objet dans le <xref:System.Speech.Recognition.RecognizedPhrase> aura une valeur de 5.  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une instance de <see cref="T:System.Speech.Recognition.GrammarBuilder" /> construite à partir de l'instance <see cref="T:System.Speech.Recognition.SemanticResultKey" /> actuelle.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’utilisation de <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> équivaut à l’aide de la <xref:System.Speech.Recognition.GrammarBuilder> constructeur qui accepte <xref:System.Speech.Recognition.SemanticResultKey> en tant qu’argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Speech.Recognition.Grammar> objet qui prend en charge les commandes permettant de modifier la couleur d’arrière-plan.  
  
 A <xref:System.Speech.Recognition.Choices> objet (`colorChoice`) contenant la liste des options pour les couleurs d’arrière-plan est remplie à l’aide de la <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> méthode avec <xref:System.Speech.Recognition.GrammarBuilder> instances. Le <xref:System.Speech.Recognition.GrammarBuilder> les instances sont obtenues via le <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> méthode sur le <xref:System.Speech.Recognition.SemanticResultValue> objets créés à partir de chaînes de couleur.  
  
 A <xref:System.Speech.Recognition.GrammarBuilder> est ensuite obtenu en appelant <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> sur un <xref:System.Speech.Recognition.SemanticResultKey> instance, ce qui sera utilisé pour les choix sémantiques dans la clé `colorChoice`.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>