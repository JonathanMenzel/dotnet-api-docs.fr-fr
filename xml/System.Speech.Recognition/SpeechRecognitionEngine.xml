<Type Name="SpeechRecognitionEngine" FullName="System.Speech.Recognition.SpeechRecognitionEngine">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="be014c85d02a07a67ca6be9974b57f4f74bba5ba" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48725586" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognitionEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognitionEngine&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechRecognitionEngine = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="4e6a9-101">Fournit le moyen d'accéder et de gérer à un module de reconnaissance vocale in-process.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4e6a9-101">Provides the means to access and manage an in-process speech recognition engine.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-102">Vous pouvez créer une instance de cette classe pour tous les modules de reconnaissance vocale installé.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-102">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="4e6a9-103">Pour obtenir des informations sur les modules de reconnaissance sont installés, utilisez la méthode statique <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-103">To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="4e6a9-104">Cette classe est pour l’exécution de moteurs dans-processus de reconnaissance vocale et fournit un contrôle sur les différents aspects de la reconnaissance vocale, comme suit :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-104">This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:</span></span>  
  
-   <span data-ttu-id="4e6a9-105">Pour créer un module de reconnaissance vocale d’intra-processus, utilisez une de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructeurs.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-105">To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors.</span></span>  
  
-   <span data-ttu-id="4e6a9-106">Pour gérer le syntaxe de reconnaissance vocale, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> méthodes et le <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-106">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
-   <span data-ttu-id="4e6a9-107">Pour configurer l’entrée dans le module de reconnaissance, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-107">To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method.</span></span>  
  
-   <span data-ttu-id="4e6a9-108">Pour effectuer la reconnaissance vocale, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-108">To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="4e6a9-109">Pour modifier comment reconnaissance gère la latence ou entrée inattendue, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-109">To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="4e6a9-110">Pour modifier le nombre de variantes retourne le module de reconnaissance, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-110">To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property.</span></span> <span data-ttu-id="4e6a9-111">Le module de reconnaissance retourne des résultats de reconnaissance dans un <xref:System.Speech.Recognition.RecognitionResult> objet.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-111">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="4e6a9-112">Pour synchroniser les modifications dans le module de reconnaissance, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-112">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="4e6a9-113">Le module de reconnaissance utilise plusieurs threads pour effectuer des tâches.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-113">The recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="4e6a9-114">Pour émuler l’entrée dans le module de reconnaissance, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-114">To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="4e6a9-115">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine> objet est le seul utilisez du processus qui a instancié l’objet.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-115">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object is for the sole use of the process that instantiated the object.</span></span> <span data-ttu-id="4e6a9-116">En revanche, le <xref:System.Speech.Recognition.SpeechRecognizer> partage un module de reconnaissance unique avec n’importe quelle application qui souhaite utiliser.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-116">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e6a9-117">Appelez toujours <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> avant de libérer votre dernière référence à la reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-117">Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="4e6a9-118">Sinon, les ressources qu’il utilise ne seront pas libérées tant que le garbage collector n’appelle l’objet de module de reconnaissance `Finalize` (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-119">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-119">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="4e6a9-120">Étant donné que cet exemple utilise le `Multiple` mode de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> (méthode), il effectue la reconnaissance jusqu'à ce que vous fermez la fenêtre de console ou arrêtez le débogage.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-120">Because this example uses the `Multiple` mode of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method, it performs recognition until you close the console window or stop debugging.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-121">Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-121">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-122">Vous pouvez construire un <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance à partir d’une des opérations suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-122">You can construct a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance from any of the following:</span></span>  
  
-   <span data-ttu-id="4e6a9-123">Le moteur de reconnaissance vocale par défaut pour le système</span><span class="sxs-lookup"><span data-stu-id="4e6a9-123">The default speech recognition engine for the system</span></span>  
  
-   <span data-ttu-id="4e6a9-124">Un module de reconnaissance vocale spécifique que vous spécifiez par nom</span><span class="sxs-lookup"><span data-stu-id="4e6a9-124">A specific speech recognition engine that you specify by name</span></span>  
  
-   <span data-ttu-id="4e6a9-125">Le moteur de reconnaissance vocale par défaut pour les paramètres régionaux que vous spécifiez</span><span class="sxs-lookup"><span data-stu-id="4e6a9-125">The default speech recognition engine for a locale that you specify</span></span>  
  
-   <span data-ttu-id="4e6a9-126">Un moteur de reconnaissance spécifique qui répond aux critères que vous spécifiez dans un <xref:System.Speech.Recognition.RecognizerInfo> objet.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-126">A specific recognition engine that meets the criteria that you specify in a <xref:System.Speech.Recognition.RecognizerInfo> object.</span></span>  
  
 <span data-ttu-id="4e6a9-127">Avant de commencer la reconnaissance de la reconnaissance vocale, vous devez charger la grammaire de reconnaissance vocale au moins un et configurer l’entrée pour le module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-127">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="4e6a9-128">Pour charger une grammaire, appelez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-128">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="4e6a9-129">Pour configurer l’entrée audio, utilisez une des méthodes suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-129">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-130">Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> à l'aide du mode de reconnaissance vocale par défaut pour le système.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-130">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for the system.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-131">Avant de commencer la reconnaissance vocale, la reconnaissance vocale, vous devez charger au moins une grammaire de reconnaissance et configurer l’entrée pour le module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-131">Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="4e6a9-132">Pour charger une grammaire, appelez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-132">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="4e6a9-133">Pour configurer l’entrée audio, utilisez une des méthodes suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-133">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Globalization.CultureInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="4e6a9-134">Paramètres régionaux que le module de reconnaissance vocale doit prendre en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-134">The locale that the speech recognizer must support.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-135">Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> à l'aide du mode de reconnaissance vocale par défaut pour les paramètres régionaux spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-135">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for a specified locale.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-136">Microsoft Windows et l’API System.Speech acceptent tous les codes de langue-pays valides.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-136">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="4e6a9-137">Pour effectuer la reconnaissance vocale à l’aide de la langue spécifiée dans le `CultureInfo` argument, un moteur de reconnaissance vocale qui prend en charge que le code de langue-pays doit être installé.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-137">To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="4e6a9-138">Le module de reconnaissance vocale fournis avec Microsoft Windows 7 fonctionne avec les codes de langue-pays suivants.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-138">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="4e6a9-139">en-GB.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-139">en-GB.</span></span> <span data-ttu-id="4e6a9-140">Anglais (Royaume-Uni)</span><span class="sxs-lookup"><span data-stu-id="4e6a9-140">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="4e6a9-141">en-US.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-141">en-US.</span></span> <span data-ttu-id="4e6a9-142">Anglais (États-Unis)</span><span class="sxs-lookup"><span data-stu-id="4e6a9-142">English (United States)</span></span>  
  
-   <span data-ttu-id="4e6a9-143">fr-fr.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-143">de-DE.</span></span> <span data-ttu-id="4e6a9-144">Allemand (Allemagne)</span><span class="sxs-lookup"><span data-stu-id="4e6a9-144">German (Germany)</span></span>  
  
-   <span data-ttu-id="4e6a9-145">es-ES.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-145">es-ES.</span></span> <span data-ttu-id="4e6a9-146">Espagnol (Espagne)</span><span class="sxs-lookup"><span data-stu-id="4e6a9-146">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="4e6a9-147">fr-FR.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-147">fr-FR.</span></span> <span data-ttu-id="4e6a9-148">Français (France)</span><span class="sxs-lookup"><span data-stu-id="4e6a9-148">French (France)</span></span>  
  
-   <span data-ttu-id="4e6a9-149">ja-JP.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-149">ja-JP.</span></span> <span data-ttu-id="4e6a9-150">Japonais (Japon)</span><span class="sxs-lookup"><span data-stu-id="4e6a9-150">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="4e6a9-151">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-151">zh-CN.</span></span> <span data-ttu-id="4e6a9-152">Chinois (Chine)</span><span class="sxs-lookup"><span data-stu-id="4e6a9-152">Chinese (China)</span></span>  
  
-   <span data-ttu-id="4e6a9-153">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-153">zh-TW.</span></span> <span data-ttu-id="4e6a9-154">Chinois (Taïwan)</span><span class="sxs-lookup"><span data-stu-id="4e6a9-154">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="4e6a9-155">Codes de langue à deux lettres tels que « fr », « fr », ou « es » sont également autorisées.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-155">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
 <span data-ttu-id="4e6a9-156">Avant de commencer la reconnaissance de la reconnaissance vocale, vous devez charger la grammaire de reconnaissance vocale au moins un et configurer l’entrée pour le module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-156">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="4e6a9-157">Pour charger une grammaire, appelez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-157">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="4e6a9-158">Pour configurer l’entrée audio, utilisez une des méthodes suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-158">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-159">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire et initialise un module de reconnaissance vocale pour les paramètres régionaux en-US.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-159">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer for the en-US locale.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e6a9-160">Aucun des modules de reconnaissance vocale installés prend en charge les paramètres régionaux spécifiés ou la <paramref name="culture" /> est la culture dite indifférente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-160">None of the installed speech recognizers support the specified locale, or <paramref name="culture" /> is the invariant culture.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-161">
            <paramref name="Culture" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-161">
              <paramref name="Culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Speech.Recognition.RecognizerInfo recognizerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.RecognizerInfo recognizerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Speech::Recognition::RecognizerInfo ^ recognizerInfo);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Speech.Recognition.RecognizerInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerInfo" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerInfo" Type="System.Speech.Recognition.RecognizerInfo" />
      </Parameters>
      <Docs>
        <param name="recognizerInfo">
          <span data-ttu-id="4e6a9-162">Informations sur le module de reconnaissance vocale spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-162">The information for the specific speech recognizer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-163">Initialise une nouvelle instance de <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> à l'aide des informations d'un objet <see cref="T:System.Speech.Recognition.RecognizerInfo" /> pour spécifier le module de reconnaissance à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-163">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> using the information in a <see cref="T:System.Speech.Recognition.RecognizerInfo" /> object to specify the recognizer to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-164">Vous pouvez créer une instance de cette classe pour tous les modules de reconnaissance vocale installé.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-164">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="4e6a9-165">Pour obtenir des informations sur les modules de reconnaissance sont installés, utilisez la <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-165">To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="4e6a9-166">Avant de commencer la reconnaissance de la reconnaissance vocale, vous devez charger la grammaire de reconnaissance vocale au moins un et configurer l’entrée pour le module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-166">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="4e6a9-167">Pour charger une grammaire, appelez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-167">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="4e6a9-168">Pour configurer l’entrée audio, utilisez une des méthodes suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-168">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-169">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire et initialise un module de reconnaissance vocale qui prend en charge de la langue anglaise.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-169">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer that supports the English language.</span></span>  
  
```csharp  
 using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (string recognizerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string recognizerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recognizerId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::String ^ recognizerId);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : string -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerId" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recognizerId">
          <span data-ttu-id="4e6a9-170">Nom de jeton du module de reconnaissance vocale à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-170">The token name of the speech recognizer to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-171">Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> avec un paramètre de chaîne qui spécifie le nom du module de reconnaissance à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-171">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class with a string parameter that specifies the name of the recognizer to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-172">Le nom du jeton du module de reconnaissance est la valeur de la <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> propriété de la <xref:System.Speech.Recognition.RecognizerInfo> objet retourné par la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> propriété du module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-172">The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer.</span></span> <span data-ttu-id="4e6a9-173">Pour obtenir une collection de tous les modules de reconnaissance installés, utilisez la méthode statique <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-173">To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="4e6a9-174">Avant de commencer la reconnaissance de la reconnaissance vocale, vous devez charger la grammaire de reconnaissance vocale au moins un et configurer l’entrée pour le module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-174">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="4e6a9-175">Pour charger une grammaire, appelez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-175">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="4e6a9-176">Pour configurer l’entrée audio, utilisez une des méthodes suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-176">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-177">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire et crée une instance de la 8.0 de module de reconnaissance vocale pour Windows (anglais - US).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-177">The following example shows part of a console application that demonstrates basic speech recognition, and creates an instance of the Speech Recognizer 8.0 for Windows (English - US).</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an instance of the Microsoft Speech Recognizer 8.0 for  
      // Windows (English - US).  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine("MS-1033-80-DESK"))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized += new EventHandler(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e6a9-178">Aucun module de reconnaissance vocale installé avec ce nom de jeton ou l'<paramref name="recognizerId" /> est la chaîne vide ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-178">No speech recognizer with that token name is installed, or <paramref name="recognizerId" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-179">
            <paramref name="recognizerId" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-179">
              <paramref name="recognizerId" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioFormat : System.Speech.AudioFormat.SpeechAudioFormatInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-180">Obtient le format de l'audio reçu par le <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-180">Gets the format of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-181">Le format de l'audio au niveau de l'entrée de l'instance <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> , ou <see langword="null" /> si l'entrée n'est pas configurée ou est définie sur l'entrée null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-181">The format of audio at the input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance, or <see langword="null" /> if the input is not configured or set to the null input.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-182">Pour configurer l’entrée audio, utilisez une des méthodes suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-182">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-183">L’exemple ci-dessous utilise <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> pour obtenir et afficher des données au format audio.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-183">The example below uses <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> to obtain and display audio format data.</span></span>  
  
```  
static void DisplayAudioDeviceFormat(Label label, SpeechRecognitionEngine recognitionEngine)   
{  
  
  if (recognitionEngine != null && label != null)   
  {  
    label.Text = String.Format("Encoding Format:         {0}\n" +  
          "AverageBytesPerSecond    {1}\n" +  
          "BitsPerSample            {2}\n" +  
          "BlockAlign               {3}\n" +  
          "ChannelCount             {4}\n" +  
          "SamplesPerSecond         {5}",  
          recognitionEngine.AudioFormat.EncodingFormat.ToString(),  
          recognitionEngine.AudioFormat.AverageBytesPerSecond,  
          recognitionEngine.AudioFormat.BitsPerSample,  
          recognitionEngine.AudioFormat.BlockAlign,  
          recognitionEngine.AudioFormat.ChannelCount,  
          recognitionEngine.AudioFormat.SamplesPerSecond);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioLevel : int" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-184">Obtient le niveau de l'audio reçu par le <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-184">Gets the level of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-185">Niveau sonore de l'entrée fournie au module de reconnaissance vocale, compris entre 0 et 100.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-185">The audio level of the input to the speech recognizer, from 0 through 100.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-186">La valeur 0 représente la latence, et 100 représente le volume d’entrée maximal.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-186">The value 0 represents silence, and 100 represents the maximum input volume.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberSignature Language="F#" Value="member this.AudioLevelUpdated : EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " Usage="member this.AudioLevelUpdated : System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-187">Déclenché lorsque <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> stocke le niveau de son entrée audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-187">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> reports the level of its audio input.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-188">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine> déclenche cet événement plusieurs fois par seconde.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-188">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second.</span></span> <span data-ttu-id="4e6a9-189">La fréquence avec laquelle l’événement est déclenché dépend de l’ordinateur sur lequel l’application est en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-189">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="4e6a9-190">Pour obtenir le niveau audio au moment de l’événement, utilisez le <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> propriété associé <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-190">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="4e6a9-191">Pour obtenir le niveau audio actuel de l’entrée dans le module de reconnaissance, utilisez le module de reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-191">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="4e6a9-192">Lorsque vous créez un délégué <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated>, vous identifiez la méthode qui gérera l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-192">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="4e6a9-193">Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-193">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="4e6a9-194">Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-194">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="4e6a9-195">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [événements et délégués](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-195">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-196">L’exemple suivant ajoute un gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> événement à un <xref:System.Speech.Recognition.SpeechRecognitionEngine> objet.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-196">The following example adds a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> event to a <xref:System.Speech.Recognition.SpeechRecognitionEngine> object.</span></span> <span data-ttu-id="4e6a9-197">Le gestionnaire génère le nouveau niveau audio à la console.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-197">The handler outputs the new audio level to the console.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the SpeechRecognitionEngine object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
   new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-198">Obtient la position actuelle dans le flux audio généré par le périphérique qui gère les entrées pour <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-198">Gets the current location in the audio stream being generated by the device that is providing input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-199">Emplacement actuel dans le flux audio généré par le périphérique d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-199">The current location in the audio stream being generated by the input device.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-200">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> propriété référence la position du périphérique d’entrée dans son flux audio généré.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-200">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="4e6a9-201">En revanche, le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> propriété référence la position du module de reconnaissance dans son entrée audio.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-201">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input.</span></span> <span data-ttu-id="4e6a9-202">Ces positions peuvent être différentes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-202">These positions can be different.</span></span> <span data-ttu-id="4e6a9-203">Par exemple, si le module de reconnaissance a reçu d’entrée pour lesquels il n’a pas encore généré un résultat de reconnaissance ensuite la valeur de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> propriété est inférieure à la valeur de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-203">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-204">Dans l’exemple suivant, le module de reconnaissance vocale de dans le processus utilise une syntaxe de dictée pour faire correspondre la saisie vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-204">In the following example, the in-process speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="4e6a9-205">Un gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> événement écrit dans la console le <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> lorsque le module de reconnaissance vocale détecte une reconnaissance vocale à son entrée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-205">A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine for US English.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create a grammar for finding services in different cities.  
        Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
        Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
        GrammarBuilder findServices = new GrammarBuilder("Find");  
        findServices.Append(services);  
        findServices.Append("near");  
        findServices.Append(cities);  
  
        // Create a Grammar object from the GrammarBuilder and load it to the recognizer.  
        Grammar servicesGrammar = new Grammar(findServices);  
        recognizer.LoadGrammarAsync(servicesGrammar);  
  
        // Add handlers for events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position at the event: " + e.AudioPosition);  
      Console.WriteLine("  Current audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Current recognizer audio position: " +   
        recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("\nSpeech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberSignature Language="F#" Value="member this.AudioSignalProblemOccurred : EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " Usage="member this.AudioSignalProblemOccurred : System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-206">Déclenché lorsque <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> détecte un problème dans le signal audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-206">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects a problem in the audio signal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-207">Pour obtenir le problème s’est produit, utilisez le <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> propriété associé <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-207">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="4e6a9-208">Lorsque vous créez un délégué <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred>, vous identifiez la méthode qui gérera l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-208">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="4e6a9-209">Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-209">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="4e6a9-210">Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-210">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="4e6a9-211">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [événements et délégués](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-211">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-212">L’exemple suivant définit un gestionnaire d’événements qui rassemble des informations sur un <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-212">The following example defines an event handler that gathers information about an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> event.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioState : System.Speech.Recognition.AudioState" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-213">Obtient l'état de l'audio reçu par le <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-213">Gets the state of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-214">État de l'entrée audio dans le module de reconnaissance vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-214">The state of the audio input to the speech recognizer.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-215">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> propriété représente l’état audio avec un membre de la <xref:System.Speech.Recognition.AudioState> énumération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-215">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberSignature Language="F#" Value="member this.AudioStateChanged : EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " Usage="member this.AudioStateChanged : System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-216">Déclenché lorsque l'état audio reçu par le <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-216">Raised when the state changes in the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-217">Pour obtenir l’état audio au moment de l’événement, utilisez le <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> propriété associé <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-217">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="4e6a9-218">Pour obtenir l’état audio actuel de l’entrée dans le module de reconnaissance, utilisez le module de reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-218">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property.</span></span> <span data-ttu-id="4e6a9-219">Pour plus d’informations sur l’état audio, consultez le <xref:System.Speech.Recognition.AudioState> énumération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-219">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="4e6a9-220">Lorsque vous créez un délégué <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>, vous identifiez la méthode qui gérera l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-220">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="4e6a9-221">Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-221">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="4e6a9-222">Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-222">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="4e6a9-223">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [événements et délégués](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-223">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-224">L’exemple suivant utilise un gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> événement à écrire le module de reconnaissance du nouveau <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> à la console chaque fois que cela change, à l’aide d’un membre de la <xref:System.Speech.Recognition.AudioState> énumération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-224">The following example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> to the console each time it changes, using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder("On this farm he had a");  
        farm.Append(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="BabbleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan BabbleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BabbleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BabbleTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BabbleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.BabbleTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-225">Obtient ou définit l'intervalle de temps pendant lequel <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepte une entrée contenant uniquement un son d'arrière-plan, avant la finalisation de la reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-225">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only background noise, before finalizing recognition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-226">Durée de l'intervalle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-226">The duration of the time interval.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-227">Chaque module de reconnaissance vocale dispose d’un algorithme pour faire la distinction entre la latence et de reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-227">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="4e6a9-228">Le module de reconnaissance classifie qu’aucun silence non-d’entrée qui ne correspond pas à la règle initiale d’un du module de reconnaissance de bruit de fond chargé et syntaxe de reconnaissance vocale est activée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-228">The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="4e6a9-229">Si le module de reconnaissance reçoit uniquement le bruit de fond et silence dans l’intervalle de délai d’attente de rumeur a, puis le module de reconnaissance finalise ce module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-229">If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="4e6a9-230">Pour les opérations de reconnaissance asynchrone, le module de reconnaissance déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> événement, où le <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> propriété est `true`et le <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> propriété est `null`.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-230">For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="4e6a9-231">Pour les opérations de reconnaissance synchrone et émulation, retourne le module de reconnaissance `null`, au lieu d’une commande valide <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-231">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="4e6a9-232">Si la période de délai d’attente de rumeur a est définie sur 0, le module de reconnaissance n’effectue pas une vérification de délai d’attente de rumeur a.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-232">If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check.</span></span> <span data-ttu-id="4e6a9-233">L’intervalle de délai d’attente peut être n’importe quelle valeur non négative.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-233">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="4e6a9-234">La valeur par défaut est 0 seconde.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-234">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-235">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire qui définit le <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> et <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriétés d’un <xref:System.Speech.Recognition.SpeechRecognitionEngine> avant de lancer la reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-235">The following example shows part of a console application that demonstrates basic speech recognition that sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="4e6a9-236">Gestionnaires pour le module de reconnaissance vocale <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> et <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> événements des informations sur la console pour illustrer les événements de sortie comment les <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriétés d’un <xref:System.Speech.Recognition.SpeechRecognitionEngine> affectent les opérations de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-236">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4e6a9-237">Cette propriété a une valeur inférieure à 0 seconde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-237">This property is set to less than 0 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-238">Supprime l'objet <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-238">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechRecognitionEngine.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-239">Supprime l'objet <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-239">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="speechRecognitionEngine.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="4e6a9-240">
            <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-240">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-241">Supprime l’objet <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> et libère les ressources utilisées pendant la session.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-241">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object and releases resources used during the session.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-242">Émule l'entrée dans le module de reconnaissance vocale, en utilisant le texte à la place de l'audio pour la reconnaissance vocale synchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-242">Emulates input to the speech recognizer, using text in place of audio for synchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-243">Ces méthodes contourner l’entrée audio du système et saisissez un texte dans le module de reconnaissance en tant que <xref:System.String> objets ou sous forme de tableau de <xref:System.Speech.Recognition.RecognizedWordUnit> objets.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-243">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="4e6a9-244">Cela peut être utile lorsque vous testez ou le débogage d’une application ou grammaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-244">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="4e6a9-245">Par exemple, vous pouvez utiliser l’émulation pour déterminer si un mot dans une syntaxe et les sémantiques sont retournés lorsque le mot est reconnu.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-245">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="4e6a9-246">Utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> méthode permettant de désactiver l’entrée audio pour le moteur de reconnaissance vocale pendant les opérations d’émulation.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-246">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="4e6a9-247">Le déclenche de module de reconnaissance vocale le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événements comme si l’opération de reconnaissance n’est pas émulée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-247">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="4e6a9-248">Le module de reconnaissance ignore les nouvelles lignes et l’espace blanc superflu et traite des signes de ponctuation en tant qu’entrée littéral.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-248">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e6a9-249">Le <xref:System.Speech.Recognition.RecognitionResult> objet généré par le module de reconnaissance vocale en réponse à l’entrée émulée a la valeur `null` pour son <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-249">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="4e6a9-250">Pour émuler le module de reconnaissance asynchrone, utilisez la <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-250">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="4e6a9-251">Entrée de l'opération de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-251">The input for the recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-252">Émule l'entrée d'une expression dans le module de reconnaissance vocale, en utilisant le texte à la place de l'audio pour la reconnaissance vocale synchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-252">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4e6a9-253">Résultat de l'opération de reconnaissance ou <see langword="null" /> si l'opération n'est pas réussie ou si le module de reconnaissance n'est pas activé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-253">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-254">Le déclenche de module de reconnaissance vocale le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événements comme si l’opération de reconnaissance n’est pas émulée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-254">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="4e6a9-255">Les modules de reconnaissance fournis avec Vista et Windows 7 ignorent la casse et la largeur de caractères lors de l’application des règles de grammaire à l’expression d’entrée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-255">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="4e6a9-256">Pour plus d’informations sur ce type de comparaison, consultez le <xref:System.Globalization.CompareOptions> valeurs d’énumération <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> et <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-256">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="4e6a9-257">Les modules de reconnaissance également ignorent les nouvelles lignes et les espaces superflus et traitent des signes de ponctuation en tant qu’entrée littéral.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-257">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-258">L’exemple de code suivant fait partie d’une application console qui illustre l’entrée émulée, les résultats de reconnaissance associées et les événements associés déclenchés par le module de reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-258">The code example below is part of a console application that demonstrates emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="4e6a9-259">L’exemple génère la sortie suivante.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-259">The example generates the following output.</span></span>  
  
```  
TestRecognize("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
...Recognition result text = Smith  
  
TestRecognize("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
...Recognition result text = Jones  
  
TestRecognize("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
...No recognition result.  
  
TestRecognize("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
...Recognition result text = mister Smith  
  
press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace Sre_EmulateRecognize  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Disable audio input to the recognizer.  
        recognizer.SetInputToNull();  
  
        // Add handlers for events raised by the EmulateRecognize method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
  
        // Start four synchronous emulated recognition operations.  
        TestRecognize(recognizer, "Smith");  
        TestRecognize(recognizer, "Jones");  
        TestRecognize(recognizer, "Mister");  
        TestRecognize(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for synchronous recognition.  
    private static void TestRecognize(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      Console.WriteLine("TestRecognize(\"{0}\")...", input);  
      RecognitionResult result =  
        recognizer.EmulateRecognize(input,CompareOptions.IgnoreCase);  
      if (result != null)  
      {  
        Console.WriteLine("...Recognition result text = {0}",  
          result.Text ?? "<null>");  
      }  
      else  
      {  
        Console.WriteLine("...No recognition result.");  
      }  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    // Handle events.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4e6a9-260">Le module de reconnaissance n'a aucune syntaxe de reconnaissance vocale chargée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-260">The recognizer has no speech recognition grammars loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-261">
            <paramref name="inputText" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-261">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e6a9-262">
            <paramref name="inputText" /> est la chaîne vide ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-262">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits">
          <span data-ttu-id="4e6a9-263">Un tableau d'unités de mot qui contient l'entrée pour l'opération de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-263">An array of word units that contains the input for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="4e6a9-264">Combinaison d'opérations de bits des valeurs d'énumération qui décrivent le type de comparaison à utiliser pour la reconnaissance émulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-264">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-265">Émule l'entrée de mots spécifiques dans le module de reconnaissance vocale partagé, en utilisant le texte à la place de l'audio pour la reconnaissance vocale synchrone, et spécifie comment le module de reconnaissance gère la comparaison Unicode entre les mots et les grammaires de la reconnaissance vocale chargées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-265">Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4e6a9-266">Résultat de l'opération de reconnaissance ou <see langword="null" /> si l'opération n'est pas réussie ou si le module de reconnaissance n'est pas activé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-266">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-267">Le déclenche de module de reconnaissance vocale le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événements comme si l’opération de reconnaissance n’est pas émulée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-267">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="4e6a9-268">Utilise le module de reconnaissance `compareOptions` quand elle s’applique les règles de grammaire à l’expression d’entrée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-268">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="4e6a9-269">Les modules de reconnaissance fournis avec Vista et Windows 7 ignorent la casse si le <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> ou <xref:System.Globalization.CompareOptions.IgnoreCase> valeur est présente.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-269">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="4e6a9-270">Le module de reconnaissance ignore toujours la largeur des caractères et jamais ignore le type Kana.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-270">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="4e6a9-271">Le module de reconnaissance également ignore les nouvelles lignes et l’espace blanc superflu et traite des signes de ponctuation en tant qu’entrée littéral.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-271">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="4e6a9-272">Pour plus d’informations sur la largeur des caractères et le type Kana, consultez le <xref:System.Globalization.CompareOptions> énumération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-272">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4e6a9-273">Le module de reconnaissance n'a aucune syntaxe de reconnaissance vocale chargée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-273">The recognizer has no speech recognition grammars loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-274">
            <paramref name="wordUnits" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-274">
              <paramref name="wordUnits" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e6a9-275">
            <paramref name="wordUnits" /> contient un ou plusieurs éléments <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-275">
              <paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4e6a9-276">
            <paramref name="compareOptions" /> contient l'indicateur <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> ou <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-276">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="4e6a9-277">Expression d'entrée de l'opération de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-277">The input phrase for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="4e6a9-278">Combinaison d'opérations de bits des valeurs d'énumération qui décrivent le type de comparaison à utiliser pour la reconnaissance émulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-278">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-279">Émule l'entrée d'une expression dans le module de reconnaissance vocale partagé, en utilisant le texte à la place de l'audio pour la reconnaissance vocale synchrone, et spécifie comment le module de reconnaissance gère la comparaison Unicode entre l'expression et les grammaires de la reconnaissance vocale chargées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-279">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4e6a9-280">Résultat de l'opération de reconnaissance ou <see langword="null" /> si l'opération n'est pas réussie ou si le module de reconnaissance n'est pas activé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-280">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-281">Le déclenche de module de reconnaissance vocale le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événements comme si l’opération de reconnaissance n’est pas émulée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-281">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="4e6a9-282">Utilise le module de reconnaissance `compareOptions` quand elle s’applique les règles de grammaire à l’expression d’entrée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-282">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="4e6a9-283">Les modules de reconnaissance fournis avec Vista et Windows 7 ignorent la casse si le <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> ou <xref:System.Globalization.CompareOptions.IgnoreCase> valeur est présente.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-283">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="4e6a9-284">Le module de reconnaissance ignore toujours la largeur des caractères et jamais ignore le type Kana.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-284">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="4e6a9-285">Le module de reconnaissance également ignore les nouvelles lignes et l’espace blanc superflu et traite des signes de ponctuation en tant qu’entrée littéral.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-285">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="4e6a9-286">Pour plus d’informations sur la largeur des caractères et le type Kana, consultez le <xref:System.Globalization.CompareOptions> énumération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-286">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4e6a9-287">Le module de reconnaissance n'a aucune syntaxe de reconnaissance vocale chargée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-287">The recognizer has no speech recognition grammars loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-288">
            <paramref name="inputText" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-288">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e6a9-289">
            <paramref name="inputText" /> est la chaîne vide ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-289">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4e6a9-290">
            <paramref name="compareOptions" /> contient l'indicateur <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> ou <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-290">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-291">Émule l'entrée dans le module de reconnaissance vocale, en utilisant le texte à la place de l'audio pour la reconnaissance vocale asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-291">Emulates input to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-292">Ces méthodes contourner l’entrée audio du système et saisissez un texte dans le module de reconnaissance en tant que <xref:System.String> objets ou sous forme de tableau de <xref:System.Speech.Recognition.RecognizedWordUnit> objets.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-292">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="4e6a9-293">Cela peut être utile lorsque vous testez ou le débogage d’une application ou grammaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-293">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="4e6a9-294">Par exemple, vous pouvez utiliser l’émulation pour déterminer si un mot dans une syntaxe et les sémantiques sont retournés lorsque le mot est reconnu.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-294">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="4e6a9-295">Utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> méthode permettant de désactiver l’entrée audio pour le moteur de reconnaissance vocale pendant les opérations d’émulation.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-295">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="4e6a9-296">Le déclenche de module de reconnaissance vocale le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événements comme si l’opération de reconnaissance n’est pas émulée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-296">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="4e6a9-297">Lorsque le module de reconnaissance termine l’opération de reconnaissance asynchrone, il déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-297">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="4e6a9-298">Le module de reconnaissance ignore les nouvelles lignes et l’espace blanc superflu et traite des signes de ponctuation en tant qu’entrée littéral.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-298">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e6a9-299">Le <xref:System.Speech.Recognition.RecognitionResult> objet généré par le module de reconnaissance vocale en réponse à l’entrée émulée a la valeur `null` pour son <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-299">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="4e6a9-300">Pour émuler la reconnaissance synchrone, utilisez la <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-300">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="4e6a9-301">Entrée de l'opération de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-301">The input for the recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-302">Émule l'entrée d'une expression dans le module de reconnaissance vocale, en utilisant le texte à la place de l'audio pour la reconnaissance vocale asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-302">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-303">Le déclenche de module de reconnaissance vocale le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événements comme si l’opération de reconnaissance n’est pas émulée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-303">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="4e6a9-304">Lorsque le module de reconnaissance termine l’opération de reconnaissance asynchrone, il déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-304">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="4e6a9-305">Les modules de reconnaissance fournis avec Vista et Windows 7 ignorent la casse et la largeur de caractères lors de l’application des règles de grammaire à l’expression d’entrée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-305">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="4e6a9-306">Pour plus d’informations sur ce type de comparaison, consultez le <xref:System.Globalization.CompareOptions> valeurs d’énumération <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> et <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-306">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="4e6a9-307">Les modules de reconnaissance également ignorent les nouvelles lignes et les espaces superflus et traitent des signes de ponctuation en tant qu’entrée littéral.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-307">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-308">L’exemple de code suivant fait partie d’une application console qui illustre l’entrée émulée asynchrone, les résultats de reconnaissance associées et les événements associés déclenchés par le module de reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-308">The code example below is part of a console application that demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="4e6a9-309">L’exemple génère la sortie suivante.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-309">The example generates the following output.</span></span>  
  
```  
  
TestRecognizeAsync("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = Smith  
 Done.  
  
TestRecognizeAsync("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
 EmulateRecognizeCompleted event raised.  
  Grammar = Jones; Text = Jones  
 Done.  
  
TestRecognizeAsync("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
 EmulateRecognizeCompleted event raised.  
  No recognition result available.  
 Done.  
  
TestRecognizeAsync("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = mister Smith  
 Done.  
  
press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SreEmulateRecognizeAsync  
{  
  class Program  
  {  
    // Indicate when an asynchronous operation is finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Configure the audio input.  
        recognizer.SetInputToNull();  
  
        // Add event handlers for the events raised by the  
        // EmulateRecognizeAsync method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHander);  
  
        // Start four asynchronous emulated recognition operations.  
        TestRecognizeAsync(recognizer, "Smith");  
        TestRecognizeAsync(recognizer, "Jones");  
        TestRecognizeAsync(recognizer, "Mister");  
        TestRecognizeAsync(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for asynchronous  
    // recognition.  
    private static void TestRecognizeAsync(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      completed = false;  
  
      Console.WriteLine("TestRecognizeAsync(\"{0}\")...", input);  
      recognizer.EmulateRecognizeAsync(input);  
  
      // Wait for the operation to complete.  
      while (!completed)  
      {  
        Thread.Sleep(333);  
      }  
  
      Console.WriteLine(" Done.");  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    // Handle events.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text );  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void EmulateRecognizeCompletedHander(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" EmulateRecognizeCompleted event raised.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("  {0} exception encountered: {1}:",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      else if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      else if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4e6a9-310">Le module de reconnaissance n'a aucune syntaxe de reconnaissance vocale chargée, ou le module de reconnaissance a une opération de reconnaissance asynchrone qui n'est pas encore terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-310">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-311">
            <paramref name="inputText" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-311">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e6a9-312">
            <paramref name="inputText" /> est la chaîne vide ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-312">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits">
          <span data-ttu-id="4e6a9-313">Un tableau d'unités de mot qui contient l'entrée pour l'opération de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-313">An array of word units that contains the input for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="4e6a9-314">Combinaison d'opérations de bits des valeurs d'énumération qui décrivent le type de comparaison à utiliser pour la reconnaissance émulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-314">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-315">Émule l'entrée de mots spécifiques dans le module de reconnaissance vocale partagé, en utilisant un tableau d'objets <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> à la place de l'audio pour la reconnaissance vocale synchrone, et spécifie comment le module de reconnaissance gère la comparaison Unicode entre les mots et les grammaires de la reconnaissance vocale chargées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-315">Emulates input of specific words to the speech recognizer, using an array of <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-316">Le déclenche de module de reconnaissance vocale le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événements comme si l’opération de reconnaissance n’est pas émulée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-316">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="4e6a9-317">Lorsque le module de reconnaissance termine l’opération de reconnaissance asynchrone, il déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-317">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="4e6a9-318">Utilise le module de reconnaissance `compareOptions` quand elle s’applique les règles de grammaire à l’expression d’entrée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-318">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="4e6a9-319">Les modules de reconnaissance fournis avec Vista et Windows 7 ignorent la casse si le <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> ou <xref:System.Globalization.CompareOptions.IgnoreCase> valeur est présente.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-319">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="4e6a9-320">Les modules de reconnaissance toujours ignorent la largeur des caractères et jamais ignorent le type Kana.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-320">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="4e6a9-321">Les modules de reconnaissance également ignorent les nouvelles lignes et les espaces superflus et traitent des signes de ponctuation en tant qu’entrée littéral.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-321">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="4e6a9-322">Pour plus d’informations sur la largeur des caractères et le type Kana, consultez le <xref:System.Globalization.CompareOptions> énumération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-322">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4e6a9-323">Le module de reconnaissance n'a aucune syntaxe de reconnaissance vocale chargée, ou le module de reconnaissance a une opération de reconnaissance asynchrone qui n'est pas encore terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-323">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-324">
            <paramref name="wordUnits" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-324">
              <paramref name="wordUnits" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e6a9-325">
            <paramref name="wordUnits" /> contient un ou plusieurs éléments <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-325">
              <paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4e6a9-326">
            <paramref name="compareOptions" /> contient l'indicateur <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> ou <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-326">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="4e6a9-327">Expression d'entrée de l'opération de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-327">The input phrase for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="4e6a9-328">Combinaison d'opérations de bits des valeurs d'énumération qui décrivent le type de comparaison à utiliser pour la reconnaissance émulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-328">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-329">Émule l'entrée d'une expression dans le module de reconnaissance vocale partagé, en utilisant le texte à la place de l'audio pour la reconnaissance vocale asynchrone, et spécifie comment le module de reconnaissance gère la comparaison Unicode entre l'expression et les grammaires de la reconnaissance vocale chargées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-329">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-330">Le déclenche de module de reconnaissance vocale le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événements comme si l’opération de reconnaissance n’est pas émulée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-330">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="4e6a9-331">Lorsque le module de reconnaissance termine l’opération de reconnaissance asynchrone, il déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-331">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="4e6a9-332">Utilise le module de reconnaissance `compareOptions` quand elle s’applique les règles de grammaire à l’expression d’entrée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-332">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="4e6a9-333">Les modules de reconnaissance fournis avec Vista et Windows 7 ignorent la casse si le <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> ou <xref:System.Globalization.CompareOptions.IgnoreCase> valeur est présente.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-333">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="4e6a9-334">Les modules de reconnaissance toujours ignorent la largeur des caractères et jamais ignorent le type Kana.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-334">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="4e6a9-335">Les modules de reconnaissance également ignorent les nouvelles lignes et les espaces superflus et traitent des signes de ponctuation en tant qu’entrée littéral.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-335">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="4e6a9-336">Pour plus d’informations sur la largeur des caractères et le type Kana, consultez le <xref:System.Globalization.CompareOptions> énumération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-336">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4e6a9-337">Le module de reconnaissance n'a aucune syntaxe de reconnaissance vocale chargée, ou le module de reconnaissance a une opération de reconnaissance asynchrone qui n'est pas encore terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-337">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-338">
            <paramref name="inputText" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-338">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e6a9-339">
            <paramref name="inputText" /> est la chaîne vide ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-339">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4e6a9-340">
            <paramref name="compareOptions" /> contient l'indicateur <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> ou <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-340">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeCompleted : EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " Usage="member this.EmulateRecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-341">Déclenché lorsque <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalise un module de reconnaissance asynchrone d'entrée émulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-341">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation of emulated input.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-342">Chaque <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> méthode commence une opération de reconnaissance asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-342">Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="4e6a9-343">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine> déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> événement lorsqu’il finalise l’opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-343">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="4e6a9-344">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> opération peut déclencher la <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événements.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-344">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events.</span></span> <span data-ttu-id="4e6a9-345">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> événement est le dernier événement de ce type que le module de reconnaissance se déclenche pour une opération donnée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-345">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="4e6a9-346">Si la reconnaissance émulée a réussi, vous pouvez accéder le résultat de la reconnaissance à l’aide de l’une des opérations suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-346">If emulated recognition was successful, you can access the recognition result using the either of the following:</span></span>  
  
-   <span data-ttu-id="4e6a9-347">Le <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> propriété dans le <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> objet dans le gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-347">The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
-   <span data-ttu-id="4e6a9-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propriété dans le <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> objet dans le gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="4e6a9-349">Si la reconnaissance émulée n’a pas réussie, le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement n’est pas déclenché et le <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> sera null.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-349">If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null.</span></span>  
  
 <span data-ttu-id="4e6a9-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> dérive de <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="4e6a9-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> dérive de <xref:System.Speech.Recognition.RecognitionEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="4e6a9-352">Lorsque vous créez un délégué <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>, vous identifiez la méthode qui gérera l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-352">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="4e6a9-353">Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-353">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="4e6a9-354">Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-354">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="4e6a9-355">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [événements et délégués](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-355">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-356">L’exemple suivant fait partie d’une application console qui charge une syntaxe de reconnaissance vocale et illustre l’entrée émulée asynchrone, les résultats de reconnaissance associées et les événements associés déclenchés par le module de reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-356">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InProcessRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of an in-process recognizer.  
      using (SpeechRecognitionEngine recognizer =   
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call mathches the grammar  
        // and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Result of 1st call to EmulateRecognizeAsync = {0}",  
          e.Result.Text ?? "<no text>");  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("Result of 2nd call to EmulateRecognizeAsync = No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-357">Obtient ou définit l'intervalle de silence que <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> acceptera à la fin de l'entrée sans ambiguïté avant de finaliser une opération de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-357">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of unambiguous input before finalizing a recognition operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-358">Durée de l'intervalle de silence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-358">The duration of the interval of silence.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-359">Le module de reconnaissance vocale utilise cet intervalle de délai d’expiration lors de l’entrée de reconnaissance est sans équivoque.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-359">The speech recognizer uses this timeout interval when the recognition input is unambiguous.</span></span> <span data-ttu-id="4e6a9-360">Par exemple, pour une grammaire de reconnaissance vocale qui prend en charge la reconnaissance de le » nouvelle de jeux, » ou « nouvelle partie, » » nouvelle, de jeux » est une entrée non équivoque, et « nouvelle game » est une entrée ambiguë.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-360">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="4e6a9-361">Cette propriété détermine la durée pendant laquelle le moteur de reconnaissance vocale attendra une entrée supplémentaire avant de finaliser une opération de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-361">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="4e6a9-362">L’intervalle de délai peut provenir de 0 secondes à 10 secondes, inclusifs.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-362">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="4e6a9-363">La valeur par défaut est 150 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-363">The default is 150 milliseconds.</span></span>  
  
 <span data-ttu-id="4e6a9-364">Pour définir l’intervalle de délai d’expiration pour l’entrée ambiguë, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-364">To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4e6a9-365">Cette propriété a une valeur inférieure à 0 ou supérieure à 10 secondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-365">This property is set to less than 0 seconds or greater than 10 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeoutAmbiguous">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeoutAmbiguous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeoutAmbiguous As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeoutAmbiguous { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeoutAmbiguous : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-366">Obtient ou définit l'intervalle de silence que <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> acceptera à la fin de l'entrée ambiguë avant de finaliser une opération de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-366">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of ambiguous input before finalizing a recognition operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-367">Durée de l'intervalle de silence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-367">The duration of the interval of silence.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-368">Le module de reconnaissance vocale utilise cet intervalle de délai d’expiration lors de l’entrée de reconnaissance est AMBIGUE.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-368">The speech recognizer uses this timeout interval when the recognition input is ambiguous.</span></span> <span data-ttu-id="4e6a9-369">Par exemple, pour une grammaire de reconnaissance vocale qui prend en charge la reconnaissance de le » nouvelle de jeux, » ou « nouvelle partie, » » nouvelle, de jeux » est une entrée non équivoque, et « nouvelle game » est une entrée ambiguë.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-369">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="4e6a9-370">Cette propriété détermine la durée pendant laquelle le moteur de reconnaissance vocale attendra une entrée supplémentaire avant de finaliser une opération de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-370">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="4e6a9-371">L’intervalle de délai peut provenir de 0 secondes à 10 secondes, inclusifs.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-371">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="4e6a9-372">La valeur par défaut est 500 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-372">The default is 500 milliseconds.</span></span>  
  
 <span data-ttu-id="4e6a9-373">Pour définir l’intervalle de délai d’expiration pour l’entrée sans ambiguïté, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-373">To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4e6a9-374">Cette propriété a une valeur inférieure à 0 ou supérieure à 10 secondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-374">This property is set to less than 0 seconds or greater than 10 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammars : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-375">Obtient une collection des objets <see cref="T:System.Speech.Recognition.Grammar" /> chargés dans cette instance <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-375">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-376">Collection d'objets <see cref="T:System.Speech.Recognition.Grammar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-376">The collection of <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4e6a9-377">L’exemple suivant génère des informations sur la console pour chaque syntaxe de reconnaissance vocale est actuellement chargé par un module de reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-377">The following example outputs information to the console for each speech recognition grammar that is currently loaded by a speech recognizer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e6a9-378">Copier la collection de grammaire pour éviter les erreurs si la collection est modifiée pendant que cette méthode énumère les éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-378">Copy the grammar collection to avoid errors if the collection is modified while this method enumerates the elements of the collection.</span></span>  
  
```csharp  
  
private static void ListGrammars(SpeechRecognitionEngine recognizer)  
{  
  string qualifier;  
  List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
  foreach (Grammar g in grammars)  
  {  
    qualifier = (g.Enabled) ? "enabled" : "disabled";  
  
    Console.WriteLine("Grammar {0} is loaded and is {1}.",  
      g.Name, qualifier);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="InitialSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan InitialSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan InitialSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan InitialSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.InitialSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-379">Obtient ou définit l'intervalle de temps pendant lequel <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepte une entrée contenant uniquement un silence, avant la finalisation de la reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-379">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only silence before finalizing recognition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-380">Durée de l'intervalle de silence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-380">The duration of the interval of silence.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-381">Chaque module de reconnaissance vocale dispose d’un algorithme pour faire la distinction entre la latence et de reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-381">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="4e6a9-382">Si l’entrée de module de reconnaissance est silence pendant la période de délai d’attente de silence initial, puis le module de reconnaissance finalise ce module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-382">If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="4e6a9-383">Pour les opérations de reconnaissance asynchrone et émulation, déclenche le module de reconnaissance le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> événement, où le <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> propriété est `true`et le <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> propriété est `null`.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-383">For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="4e6a9-384">Pour les opérations de reconnaissance synchrone et émulation, retourne le module de reconnaissance `null`, au lieu d’une commande valide <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-384">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="4e6a9-385">Si l’intervalle de délai d’attente de silence initial est définie sur 0, le module de reconnaissance n’effectue pas une vérification de délai d’attente de silence initial.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-385">If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check.</span></span> <span data-ttu-id="4e6a9-386">L’intervalle de délai d’attente peut être n’importe quelle valeur non négative.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-386">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="4e6a9-387">La valeur par défaut est 0 seconde.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-387">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-388">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-388">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="4e6a9-389">L’exemple définit le <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> et <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriétés d’un <xref:System.Speech.Recognition.SpeechRecognitionEngine> avant de lancer la reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-389">The example sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="4e6a9-390">Gestionnaires pour le module de reconnaissance vocale <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> et <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> événements de sortie des informations d’événement dans la console pour illustrer comment la <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriétés d’un <xref:System.Speech.Recognition.SpeechRecognitionEngine> propriétés affectent les opérations de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-390">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> properties affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4e6a9-391">Cette propriété a une valeur inférieure à 0 seconde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-391">This property is set to less than 0 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="InstalledRecognizers">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstalledRecognizers () As ReadOnlyCollection(Of RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizerInfo ^&gt; ^ InstalledRecognizers();" />
      <MemberSignature Language="F#" Value="static member InstalledRecognizers : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-392">Retourne les informations sur tous les modules de reconnaissance vocale installés sur le système actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-392">Returns information for all of the installed speech recognizers on the current system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4e6a9-393">Collection d'objets <see cref="T:System.Speech.Recognition.RecognizerInfo" /> en lecture seule qui décrivent les modules de reconnaissance installés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-393">A read-only collection of the <see cref="T:System.Speech.Recognition.RecognizerInfo" /> objects that describe the installed recognizers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-394">Pour obtenir des informations sur le module de reconnaissance actuel, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-394">To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-395">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-395">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="4e6a9-396">L’exemple utilise la collection retournée par la <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> méthode pour rechercher un module de reconnaissance vocale qui prend en charge de la langue anglaise.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-396">The example uses the collection returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method to find a speech recognizer that supports the English language.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="4e6a9-397">Objet de grammaire à charger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-397">The grammar object to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-398">Charge un objet <see cref="T:System.Speech.Recognition.Grammar" /> de façon synchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-398">Synchronously loads a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-399">Le module de reconnaissance lève une exception si le <xref:System.Speech.Recognition.Grammar> objet est déjà chargé, est en cours de chargement en mode asynchrone ou n’a pas pu charger dans n’importe quel module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-399">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="4e6a9-400">Vous ne pouvez pas charger le même <xref:System.Speech.Recognition.Grammar> objet dans plusieurs instances de <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-400">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="4e6a9-401">Au lieu de cela, créez un <xref:System.Speech.Recognition.Grammar> pour chaque objet <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-401">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="4e6a9-402">Si le module de reconnaissance est en cours d’exécution, les applications doivent utiliser <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> pour suspendre le moteur de reconnaissance vocale avant le chargement, déchargement, activer ou désactiver une grammaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-402">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="4e6a9-403">Lorsque vous chargez une grammaire, il est activé par défaut.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-403">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="4e6a9-404">Pour désactiver une grammaire chargée, utilisez le <xref:System.Speech.Recognition.Grammar.Enabled%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-404">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="4e6a9-405">Pour charger un <xref:System.Speech.Recognition.Grammar> objet de façon asynchrone, utilisez la <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-405">To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-406">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-406">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="4e6a9-407">L’exemple crée un <xref:System.Speech.Recognition.DictationGrammar> et les charge dans un module de reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-407">The example creates a <xref:System.Speech.Recognition.DictationGrammar> and loads it into a speech recognizer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-408">
            <paramref name="Grammar" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-408">
              <paramref name="Grammar" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4e6a9-409">
            <paramref name="Grammar" /> n'est pas un état valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-409">
              <paramref name="Grammar" /> is not in a valid state.</span>
          </span>
        </exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarAsync : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammarAsync grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="4e6a9-410">Syntaxe de reconnaissance vocale à charger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-410">The speech recognition grammar to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-411">Charge une syntaxe de reconnaissance vocale de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-411">Asynchronously loads a speech recognition grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-412">Lorsque le module de reconnaissance termine le chargement un <xref:System.Speech.Recognition.Grammar> de l’objet, il déclenche une <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-412">When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="4e6a9-413">Le module de reconnaissance lève une exception si le <xref:System.Speech.Recognition.Grammar> objet est déjà chargé, est en cours de chargement en mode asynchrone ou n’a pas pu charger dans n’importe quel module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-413">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="4e6a9-414">Vous ne pouvez pas charger le même <xref:System.Speech.Recognition.Grammar> objet dans plusieurs instances de <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-414">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="4e6a9-415">Au lieu de cela, créez un <xref:System.Speech.Recognition.Grammar> pour chaque objet <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-415">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="4e6a9-416">Si le module de reconnaissance est en cours d’exécution, les applications doivent utiliser <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> pour suspendre le moteur de reconnaissance vocale avant le chargement, déchargement, activer ou désactiver une grammaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-416">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="4e6a9-417">Lorsque vous chargez une grammaire, il est activé par défaut.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-417">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="4e6a9-418">Pour désactiver une grammaire chargée, utilisez le <xref:System.Speech.Recognition.Grammar.Enabled%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-418">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="4e6a9-419">Pour charger une grammaire de reconnaissance vocale de façon synchrone, utilisez la <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-419">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-420">
            <paramref name="Grammar" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-420">
              <paramref name="Grammar" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4e6a9-421">
            <paramref name="Grammar" /> n'est pas un état valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-421">
              <paramref name="Grammar" /> is not in a valid state.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="4e6a9-422">L'opération d'annulation asynchrone a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-422">The asynchronous operation was canceled.</span>
          </span>
        </exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarCompleted : EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " Usage="member this.LoadGrammarCompleted : System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-423">Déclenché lorsque <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> termine le chargement asynchrone d'un objet <see cref="T:System.Speech.Recognition.Grammar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-423">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finishes the asynchronous loading of a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-424">Le module de reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> méthode lance une opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-424">The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="4e6a9-425">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine> déclenche cet événement lorsqu’il termine l’opération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-425">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation.</span></span> <span data-ttu-id="4e6a9-426">Pour obtenir le <xref:System.Speech.Recognition.Grammar> que le module de reconnaissance est chargé de l’objet, utilisez le <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> propriété associé <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-426">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="4e6a9-427">Pour obtenir des cours <xref:System.Speech.Recognition.Grammar> objets le module de reconnaissance a chargé, utilisez le module de reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-427">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="4e6a9-428">Si le module de reconnaissance est en cours d’exécution, les applications doivent utiliser <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> pour suspendre le moteur de reconnaissance vocale avant le chargement, déchargement, activer ou désactiver une grammaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-428">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="4e6a9-429">Lorsque vous créez un délégué <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted>, vous identifiez la méthode qui gérera l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-429">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="4e6a9-430">Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-430">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="4e6a9-431">Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-431">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="4e6a9-432">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [événements et délégués](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-432">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-433">L’exemple suivant crée un module de reconnaissance vocale d’intra-processus et crée ensuite deux types de grammaires pour reconnaître des mots spécifiques et pour accepter de dictée gratuite.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-433">The following example creates an in-process speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="4e6a9-434">L’exemple construit un <xref:System.Speech.Recognition.Grammar> objet à partir de chacun des grammaires de reconnaissance vocale terminée, puis charge de façon asynchrone le <xref:System.Speech.Recognition.Grammar> des objets sur le <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-434">The example constructs a <xref:System.Speech.Recognition.Grammar> object from each of the completed speech recognition grammars, then asynchronously loads the <xref:System.Speech.Recognition.Grammar> objects to the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span> <span data-ttu-id="4e6a9-435">Gestionnaires pour le module de reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> et <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> écrire des événements dans la console le nom de la <xref:System.Speech.Recognition.Grammar> objet qui a été utilisé pour effectuer la reconnaissance et le texte de résultat de reconnaissance, respectivement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-435">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events write to the console the name of the <xref:System.Speech.Recognition.Grammar> object that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and set its input.  
      recognizer = new SpeechRecognitionEngine();  
      recognizer.SetInputToDefaultAudioDevice();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted +=  
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Create the "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
      SemanticResultValue noValue =  
          new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create the "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Start asynchronous, continuous recognition.  
      recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxAlternates : int with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-436">Obtient ou définit le nombre maximal de résultats de reconnaissance de substitution retournés pour chaque opération de reconnaissance par le <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-436">Gets or sets the maximum number of alternate recognition results that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> returns for each recognition operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-437">Nombre d'autres résultats à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-437">The number of alternate results to return.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-438">Le <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> propriété de la <xref:System.Speech.Recognition.RecognitionResult> classe contient la collection de <xref:System.Speech.Recognition.RecognizedPhrase> objets qui représentent des interprétations possibles de l’entrée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-438">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.</span></span>  
  
 <span data-ttu-id="4e6a9-439">La valeur par défaut <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> est 10.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-439">The default value for <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4e6a9-440">
            <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> a une valeur inférieure à 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-440">
              <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> is set to a value less than 0.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      </Docs>
    </Member>
    <Member MemberName="QueryRecognizerSetting">
      <MemberSignature Language="C#" Value="public object QueryRecognizerSetting (string settingName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QueryRecognizerSetting(string settingName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryRecognizerSetting (settingName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ QueryRecognizerSetting(System::String ^ settingName);" />
      <MemberSignature Language="F#" Value="member this.QueryRecognizerSetting : string -&gt; obj" Usage="speechRecognitionEngine.QueryRecognizerSetting settingName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName">
          <span data-ttu-id="4e6a9-441">Nom du paramètre à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-441">The name of the setting to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-442">Retourne les valeurs des paramètres pour le module de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-442">Returns the values of settings for the recognizer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4e6a9-443">La valeur du paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-443">The value of the setting.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-444">Paramètres de module de reconnaissance peuvent contenir des données de chaîne, entier 64 bits ou mémoire adresse.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-444">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="4e6a9-445">Le tableau suivant décrit les paramètres qui sont définis pour une API Microsoft Speech (SAPI)-module de reconnaissance conforme.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-445">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="4e6a9-446">Les paramètres suivants doivent avoir la même plage pour chaque module de reconnaissance qui prend en charge le paramètre.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-446">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="4e6a9-447">Un module de reconnaissance vocale compatible SAPI n’est pas nécessaire pour prendre en charge ces paramètres et peut prendre en charge les autres paramètres.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-447">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="4e6a9-448">Name</span><span class="sxs-lookup"><span data-stu-id="4e6a9-448">Name</span></span>|<span data-ttu-id="4e6a9-449">Description </span><span class="sxs-lookup"><span data-stu-id="4e6a9-449">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="4e6a9-450">Spécifie la consommation du processeur du module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-450">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="4e6a9-451">La plage est comprise entre 0 et 100.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-451">The range is from 0 to 100.</span></span> <span data-ttu-id="4e6a9-452">La valeur par défaut est 50.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-452">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="4e6a9-453">Indique la longueur de silence à la fin de l’entrée sans ambiguïté avant que le module de reconnaissance vocale termine une opération de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-453">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="4e6a9-454">La plage est comprise entre 0 et 10 000 millisecondes (ms).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-454">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="4e6a9-455">Ce paramètre correspond à la reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-455">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  <span data-ttu-id="4e6a9-456">Par défaut = 150ms.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-456">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="4e6a9-457">Indique la longueur de silence à la fin de l’entrée ambiguë avant que le module de reconnaissance vocale termine une opération de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-457">Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="4e6a9-458">La plage est comprise entre 0 à 10 000 ms.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-458">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="4e6a9-459">Ce paramètre correspond à la reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-459">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="4e6a9-460">Par défaut = 500 ms.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-460">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="4e6a9-461">Indique si une adaptation du modèle acoustique est activé (valeur = `1`) ou OFF (valeur = `0`).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-461">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="4e6a9-462">La valeur par défaut est `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-462">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="4e6a9-463">Indique si une adaptation en arrière-plan est activé (valeur = `1`) ou OFF (valeur = `0`), et conserve le paramètre dans le Registre.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-463">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="4e6a9-464">La valeur par défaut est `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-464">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="4e6a9-465">Pour mettre à jour un paramètre pour le module de reconnaissance, utilisez une de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-465">To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-466">L’exemple suivant fait partie d’une application console qui génère les valeurs pour un nombre de paramètres définis pour le module de reconnaissance qui prend en charge les paramètres régionaux en-US.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-466">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="4e6a9-467">L’exemple génère la sortie suivante.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-467">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation"  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        foreach (string setting in settings)  
        {  
          try  
          {  
            object value = recognizer.QueryRecognizerSetting(setting);  
            Console.WriteLine("  {0,-30} = {1}", setting, value);  
          }  
          catch  
          {  
            Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
              setting);  
          }  
        }  
      }  
      Console.WriteLine();  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-468">
            <paramref name="settingName" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-468">
              <paramref name="settingName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e6a9-469">
            <paramref name="settingName" /> est la chaîne vide ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-469">
              <paramref name="settingName" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="4e6a9-470">Le module de reconnaissance n'a pas de paramètre correspondant à ce nom.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-470">The recognizer does not have a setting by that name.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Recognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-471">Démarre une opération de reconnaissance vocale synchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-471">Starts a synchronous speech recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-472">Ces méthodes effectuent une opération de reconnaissance unique, synchrone.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-472">These methods perform a single, synchronous recognition operation.</span></span> <span data-ttu-id="4e6a9-473">Le module de reconnaissance effectue cette opération sur sa syntaxe de reconnaissance vocale chargés et activés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-473">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="4e6a9-474">Pendant un appel à cette méthode, le module de reconnaissance peut déclencher des événements suivants :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-474">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="4e6a9-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="4e6a9-476">Déclenché lorsque le module de reconnaissance détecte l’entrée qu’il peut identifier comme vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-476">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="4e6a9-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="4e6a9-478">Déclenché lorsque l’entrée crée une correspondance ambiguë avec l’une des grammaires actives.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-478">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="4e6a9-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="4e6a9-480">Déclenché lorsque le module de reconnaissance finalise un module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-480">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="4e6a9-481">Le module de reconnaissance ne déclenche pas le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> événement lorsque l’un de le <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-481">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 <span data-ttu-id="4e6a9-482">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> méthodes retournent un <xref:System.Speech.Recognition.RecognitionResult> objet, ou `null` si l’opération n’a pas réussi, ou le module de reconnaissance n’est pas activé.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-482">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods return a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful or the recognizer is not enabled.</span></span>  
  
 <span data-ttu-id="4e6a9-483">Une opération de reconnaissance synchrone peut échouer pour les raisons suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-483">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="4e6a9-484">Reconnaissance vocale n’est pas détecté avant l’expirent des intervalles de délai d’attente pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriétés, ou pour le `initialSilenceTimeout` paramètre de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-484">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties, or for the `initialSilenceTimeout` parameter of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> method.</span></span>  
  
-   <span data-ttu-id="4e6a9-485">Le moteur de reconnaissance vocale de détecte, mais ne trouve aucune correspondance dans un de ses chargés et activés <xref:System.Speech.Recognition.Grammar> objets.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-485">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="4e6a9-486">Pour modifier la façon dont le module de reconnaissance gère le minutage de reconnaissance vocale ou silence en ce qui concerne la reconnaissance, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-486">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="4e6a9-487">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine> doit avoir au moins un <xref:System.Speech.Recognition.Grammar> objet chargé avant d’effectuer la reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-487">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="4e6a9-488">Pour charger une grammaire de reconnaissance vocale, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-488">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="4e6a9-489">Pour effectuer la reconnaissance asynchrone, utilisez une de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-489">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize () As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize();" />
      <MemberSignature Language="F#" Value="member this.Recognize : unit -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-490">Effectue une opération de reconnaissance vocale synchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-490">Performs a synchronous speech recognition operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4e6a9-491">Résultat de la reconnaissance pour l'entrée ou <see langword="null" /> si l'opération n'est pas réussie ou que le module de reconnaissance n'est pas activé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-491">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-492">Cette méthode effectue une opération de reconnaissance unique.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-492">This method performs a single recognition operation.</span></span> <span data-ttu-id="4e6a9-493">Le module de reconnaissance effectue cette opération sur sa syntaxe de reconnaissance vocale chargés et activés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-493">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="4e6a9-494">Pendant un appel à cette méthode, le module de reconnaissance peut déclencher des événements suivants :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-494">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="4e6a9-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="4e6a9-496">Déclenché lorsque le module de reconnaissance détecte l’entrée qu’il peut identifier comme vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-496">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="4e6a9-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="4e6a9-498">Déclenché lorsque l’entrée crée une correspondance ambiguë avec l’une des grammaires actives.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-498">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="4e6a9-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="4e6a9-500">Déclenché lorsque le module de reconnaissance finalise un module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-500">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="4e6a9-501">Le module de reconnaissance ne déclenche pas le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> événement lors de l’utilisation de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-501">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="4e6a9-502">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> méthode retourne un <xref:System.Speech.Recognition.RecognitionResult> objet, ou `null` si l’opération n’a pas réussi.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-502">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="4e6a9-503">Une opération de reconnaissance synchrone peut échouer pour les raisons suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-503">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="4e6a9-504">Reconnaissance vocale n’est pas détecté avant l’expirent des intervalles de délai d’attente pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-504">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="4e6a9-505">Le moteur de reconnaissance vocale de détecte, mais ne trouve aucune correspondance dans un de ses chargés et activés <xref:System.Speech.Recognition.Grammar> objets.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-505">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="4e6a9-506">Pour effectuer la reconnaissance asynchrone, utilisez une de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-506">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-507">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-507">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="4e6a9-508">L’exemple crée un <xref:System.Speech.Recognition.DictationGrammar>, il charge dans un module de reconnaissance vocale d’intra-processus et effectue une opération de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-508">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Modify the initial silence time-out value.  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5);  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize();  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize (TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize(valuetype System.TimeSpan initialSilenceTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize (initialSilenceTimeout As TimeSpan) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize(TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="F#" Value="member this.Recognize : TimeSpan -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize initialSilenceTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialSilenceTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="initialSilenceTimeout">
          <span data-ttu-id="4e6a9-509">Intervalle de temps pendant lequel un module de reconnaissance vocale accepte une entrée contenant uniquement un silence, avant la finalisation de la reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-509">The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-510">Effectue une opération de reconnaissance vocale synchrone avec un délai d'attente de silence initial spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-510">Performs a synchronous speech recognition operation with a specified initial silence timeout period.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4e6a9-511">Résultat de la reconnaissance pour l'entrée ou <see langword="null" /> si l'opération n'est pas réussie ou que le module de reconnaissance n'est pas activé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-511">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-512">Si le moteur de reconnaissance vocale détecte vocale au sein de l’intervalle de temps spécifié par `initialSilenceTimeout` argument, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> effectue une opération de reconnaissance unique, puis termine.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-512">If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> performs a single recognition operation and then terminates.</span></span>  <span data-ttu-id="4e6a9-513">Le `initialSilenceTimeout` paramètre remplace le module de reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-513">The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property.</span></span>  
  
 <span data-ttu-id="4e6a9-514">Pendant un appel à cette méthode, le module de reconnaissance peut déclencher des événements suivants :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-514">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="4e6a9-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="4e6a9-516">Déclenché lorsque le module de reconnaissance détecte l’entrée qu’il peut identifier comme vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-516">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="4e6a9-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="4e6a9-518">Déclenché lorsque l’entrée crée une correspondance ambiguë avec l’une des grammaires actives.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-518">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="4e6a9-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="4e6a9-520">Déclenché lorsque le module de reconnaissance finalise un module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-520">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="4e6a9-521">Le module de reconnaissance ne déclenche pas le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> événement lors de l’utilisation de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-521">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="4e6a9-522">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> méthode retourne un <xref:System.Speech.Recognition.RecognitionResult> objet, ou `null` si l’opération n’a pas réussi.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-522">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="4e6a9-523">Une opération de reconnaissance synchrone peut échouer pour les raisons suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-523">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="4e6a9-524">Reconnaissance vocale n’est pas détecté avant l’expirent des intervalles de délai d’attente pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> ou pour le `initialSilenceTimeout` paramètre.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-524">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter.</span></span>  
  
-   <span data-ttu-id="4e6a9-525">Le moteur de reconnaissance vocale de détecte, mais ne trouve aucune correspondance dans un de ses chargés et activés <xref:System.Speech.Recognition.Grammar> objets.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-525">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="4e6a9-526">Pour effectuer la reconnaissance asynchrone, utilisez une de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-526">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-527">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-527">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="4e6a9-528">L’exemple crée un <xref:System.Speech.Recognition.DictationGrammar>, il charge dans un module de reconnaissance vocale d’intra-processus et effectue une opération de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-528">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize(TimeSpan.FromSeconds(5));  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-529">Démarre une opération de reconnaissance vocale asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-529">Starts an asynchronous speech recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-530">Ces méthodes effectuent unique ou plusieurs opérations de reconnaissance asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-530">These methods perform single or multiple, asynchronous recognition operations.</span></span> <span data-ttu-id="4e6a9-531">Le module de reconnaissance effectue chaque opération sur sa syntaxe de reconnaissance vocale chargés et activés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-531">The recognizer performs each operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="4e6a9-532">Pendant un appel à cette méthode, le module de reconnaissance peut déclencher des événements suivants :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-532">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="4e6a9-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="4e6a9-534">Déclenché lorsque le module de reconnaissance détecte l’entrée qu’il peut identifier comme vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-534">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="4e6a9-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="4e6a9-536">Déclenché lorsque l’entrée crée une correspondance ambiguë avec l’une des grammaires actives.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-536">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="4e6a9-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="4e6a9-538">Déclenché lorsque le module de reconnaissance finalise un module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-538">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="4e6a9-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="4e6a9-540">Déclenché lorsqu’un <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> fin de l’opération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-540">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="4e6a9-541">Pour récupérer le résultat d’une opération de reconnaissance asynchrone, attacher un gestionnaire d’événements pour le module de reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-541">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="4e6a9-542">Le module de reconnaissance déclenche cet événement chaque fois qu’il a terminé une opération de reconnaissance synchrones ou asynchrones.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-542">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="4e6a9-543">Si la reconnaissance n’a pas réussie, le <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> propriété sur <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> objet auquel vous pouvez accéder dans le gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> , cette manifestation se déroulera `null`.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-543">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="4e6a9-544">Une opération de reconnaissance asynchrone peut échouer pour les raisons suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-544">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="4e6a9-545">Reconnaissance vocale n’est pas détecté avant l’expirent des intervalles de délai d’attente pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-545">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="4e6a9-546">Le moteur de reconnaissance vocale de détecte, mais ne trouve aucune correspondance dans un de ses chargés et activés <xref:System.Speech.Recognition.Grammar> objets.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-546">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
-   <span data-ttu-id="4e6a9-547">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine> doit avoir au moins un <xref:System.Speech.Recognition.Grammar> objet chargé avant d’effectuer la reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-547">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="4e6a9-548">Pour charger une grammaire de reconnaissance vocale, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-548">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="4e6a9-549">Pour modifier la façon dont le module de reconnaissance gère le minutage de reconnaissance vocale ou silence en ce qui concerne la reconnaissance, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-549">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="4e6a9-550">Pour effectuer la reconnaissance synchrone, utilisez une de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-550">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-551">Effectue une opération de reconnaissance vocale unique et asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-551">Performs a single, asynchronous speech recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-552">Cette méthode effectue une opération de reconnaissance unique et asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-552">This method performs a single, asynchronous recognition operation.</span></span> <span data-ttu-id="4e6a9-553">Le module de reconnaissance effectue l’opération par rapport à sa syntaxe de reconnaissance vocale chargés et activés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-553">The recognizer performs the operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="4e6a9-554">Pendant un appel à cette méthode, le module de reconnaissance peut déclencher des événements suivants :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-554">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="4e6a9-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="4e6a9-556">Déclenché lorsque le module de reconnaissance détecte l’entrée qu’il peut identifier comme vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-556">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="4e6a9-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="4e6a9-558">Déclenché lorsque l’entrée crée une correspondance ambiguë avec l’une des grammaires actives.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-558">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="4e6a9-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="4e6a9-560">Déclenché lorsque le module de reconnaissance finalise un module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-560">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="4e6a9-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="4e6a9-562">Déclenché lorsqu’un <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> fin de l’opération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-562">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="4e6a9-563">Pour récupérer le résultat d’une opération de reconnaissance asynchrone, attacher un gestionnaire d’événements pour le module de reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-563">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="4e6a9-564">Le module de reconnaissance déclenche cet événement chaque fois qu’il a terminé une opération de reconnaissance synchrones ou asynchrones.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-564">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="4e6a9-565">Si la reconnaissance n’a pas réussie, le <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> propriété sur <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> objet auquel vous pouvez accéder dans le gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> , cette manifestation se déroulera `null`.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-565">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="4e6a9-566">Pour effectuer la reconnaissance synchrone, utilisez une de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-566">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-567">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale asynchrone élémentaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-567">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="4e6a9-568">L’exemple crée un <xref:System.Speech.Recognition.DictationGrammar>, il charge dans un module de reconnaissance vocale d’intra-processus et effectue une opération de reconnaissance asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-568">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one asynchronous recognition operation.</span></span> <span data-ttu-id="4e6a9-569">Gestionnaires d’événements sont inclus pour illustrer les événements que le module de reconnaissance déclenche pendant l’opération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-569">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[]   
        { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start an asynchronous  
        // recognition operation.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync (System.Speech.Recognition.RecognizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync(valuetype System.Speech.Recognition.RecognizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync (mode As RecognizeMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync(System::Speech::Recognition::RecognizeMode mode);" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : System.Speech.Recognition.RecognizeMode -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Speech.Recognition.RecognizeMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="4e6a9-570">Indique s'il faut exécuter une ou de plusieurs opérations de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-570">Indicates whether to perform one or multiple recognition operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-571">Exécute une ou plusieurs opérations de reconnaissance vocale asynchrones.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-571">Performs one or more asynchronous speech recognition operations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-572">Si `mode` est <xref:System.Speech.Recognition.RecognizeMode.Multiple>, le module de reconnaissance continue d’effectuer des opérations de reconnaissance asynchrone jusqu'à ce que le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-572">If `mode` is <xref:System.Speech.Recognition.RecognizeMode.Multiple>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called.</span></span>  
  
 <span data-ttu-id="4e6a9-573">Pendant un appel à cette méthode, le module de reconnaissance peut déclencher des événements suivants :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-573">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="4e6a9-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="4e6a9-575">Déclenché lorsque le module de reconnaissance détecte l’entrée qu’il peut identifier comme vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-575">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="4e6a9-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="4e6a9-577">Déclenché lorsque l’entrée crée une correspondance ambiguë avec l’une des grammaires actives.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-577">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="4e6a9-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="4e6a9-579">Déclenché lorsque le module de reconnaissance finalise un module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-579">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="4e6a9-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="4e6a9-581">Déclenché lorsqu’un <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> fin de l’opération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-581">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="4e6a9-582">Pour récupérer le résultat d’une opération de reconnaissance asynchrone, attacher un gestionnaire d’événements pour le module de reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-582">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="4e6a9-583">Le module de reconnaissance déclenche cet événement chaque fois qu’il a terminé une opération de reconnaissance synchrones ou asynchrones.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-583">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="4e6a9-584">Si la reconnaissance n’a pas réussie, le <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> propriété sur <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> objet auquel vous pouvez accéder dans le gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> , cette manifestation se déroulera `null`.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-584">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="4e6a9-585">Une opération de reconnaissance asynchrone peut échouer pour les raisons suivantes :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-585">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="4e6a9-586">Reconnaissance vocale n’est pas détecté avant l’expirent des intervalles de délai d’attente pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-586">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="4e6a9-587">Le moteur de reconnaissance vocale de détecte, mais ne trouve aucune correspondance dans un de ses chargés et activés <xref:System.Speech.Recognition.Grammar> objets.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-587">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="4e6a9-588">Pour effectuer la reconnaissance synchrone, utilisez une de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-588">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-589">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale asynchrone élémentaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-589">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="4e6a9-590">L’exemple crée un <xref:System.Speech.Recognition.DictationGrammar>, il charge dans un module de reconnaissance vocale d’intra-processus et effectue plusieurs opérations de reconnaissance asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-590">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs multiple asynchronous recognition operations.</span></span> <span data-ttu-id="4e6a9-591">Les opérations asynchrones sont annulées après 30 secondes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-591">The asynchronous operations are cancelled after 30 seconds.</span></span> <span data-ttu-id="4e6a9-592">Gestionnaires d’événements sont inclus pour illustrer les événements que le module de reconnaissance déclenche pendant l’opération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-592">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[] { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start asynchronous  
        // recognition.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 30 seconds, and then cancel asynchronous recognition.  
        Thread.Sleep(TimeSpan.FromSeconds(30));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncCancel">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncCancel : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-593">Met fin à la reconnaissance asynchrone sans attendre que l'opération de reconnaissance en cours se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-593">Terminates asynchronous recognition without waiting for the current recognition operation to complete.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-594">Cette méthode finalise immédiatement le module de reconnaissance asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-594">This method immediately finalizes asynchronous recognition.</span></span> <span data-ttu-id="4e6a9-595">Si l’opération de reconnaissance asynchrone actuelle reçoit l’entrée, l’entrée est tronquée et l’opération se termine avec l’entrée existante.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-595">If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input.</span></span> <span data-ttu-id="4e6a9-596">Le module de reconnaissance déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> événement lorsqu’une opération asynchrone est annulée et définit le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriété de la <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> à `true`.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-596">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="4e6a9-597">Cette méthode annule les opérations asynchrones initiées par le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-597">This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="4e6a9-598">Pour arrêter le module de reconnaissance asynchrone sans tronquer l’entrée, utilisez la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-598">To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-599">L’exemple suivant montre une partie d’une application console qui illustre l’utilisation de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-599">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span> <span data-ttu-id="4e6a9-600">L’exemple crée et charge une syntaxe de reconnaissance vocale, lance une opération de reconnaissance asynchrone continue, puis s’interrompt 2 secondes avant d’annuler l’opération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-600">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it cancels the operation.</span></span> <span data-ttu-id="4e6a9-601">Le module de reconnaissance reçoit l’entrée à partir du fichier, c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-601">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="4e6a9-602">Gestionnaires d’événements sont inclus pour illustrer les événements que le module de reconnaissance déclenche pendant l’opération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-602">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then cancel the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncStop">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncStop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncStop();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncStop : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-603">Arrête la reconnaissance asynchrone lorsque l'opération de reconnaissance active se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-603">Stops asynchronous recognition after the current recognition operation completes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-604">Cette méthode finalise un module de reconnaissance asynchrone sans troncation d’entrée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-604">This method finalizes asynchronous recognition without truncating input.</span></span> <span data-ttu-id="4e6a9-605">Si l’opération de reconnaissance asynchrone actuelle reçoit l’entrée, le module de reconnaissance continue d’accepter une entrée avant la fin de l’opération de reconnaissance en cours.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-605">If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed.</span></span> <span data-ttu-id="4e6a9-606">Le module de reconnaissance déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> événement lorsqu’une opération asynchrone est arrêtée et définit le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriété de la <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> à `true`.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-606">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="4e6a9-607">Cette méthode arrête les opérations asynchrones initiées par le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-607">This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="4e6a9-608">Pour annuler immédiatement le module de reconnaissance asynchrone avec uniquement l’entrée existante, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-608">To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-609">L’exemple suivant montre une partie d’une application console qui illustre l’utilisation de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-609">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span> <span data-ttu-id="4e6a9-610">L’exemple crée et charge une syntaxe de reconnaissance vocale, lance une opération de reconnaissance asynchrone continue, puis s’interrompt 2 secondes avant d’arrêter l’opération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-610">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it stops the operation.</span></span> <span data-ttu-id="4e6a9-611">Le module de reconnaissance reçoit l’entrée à partir du fichier, c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-611">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="4e6a9-612">Gestionnaires d’événements sont inclus pour illustrer les événements que le module de reconnaissance déclenche pendant l’opération.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-612">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then stop the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncStop();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizeCompleted As EventHandler(Of RecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizeCompletedEventArgs ^&gt; ^ RecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.RecognizeCompleted : EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " Usage="member this.RecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-613">Déclenché lorsque <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalise un module de reconnaissance asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-613">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-614">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine> l’objet <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> méthode lance une opération de reconnaissance asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-614">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation.</span></span> <span data-ttu-id="4e6a9-615">Lorsque le module de reconnaissance finalise l’opération asynchrone, il déclenche cet événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-615">When the recognizer finalizes the asynchronous operation, it raises this event.</span></span>  
  
 <span data-ttu-id="4e6a9-616">À l’aide du gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> événement, vous pouvez accéder à la <xref:System.Speech.Recognition.RecognitionResult> dans le <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> objet.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-616">Using the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object.</span></span> <span data-ttu-id="4e6a9-617">Si la reconnaissance n’a pas réussie, <xref:System.Speech.Recognition.RecognitionResult> sera `null`.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-617">If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`.</span></span> <span data-ttu-id="4e6a9-618">Pour déterminer si un délai d’attente ou une interruption de l’entrée audio a provoqué la reconnaissance à échouer, vous pouvez accéder aux propriétés pour <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, ou <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-618">To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span></span>  
  
 <span data-ttu-id="4e6a9-619">Pour plus d'informations, consultez la classe <xref:System.Speech.Recognition.RecognizeCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-619">See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information.</span></span>  
  
 <span data-ttu-id="4e6a9-620">Pour obtenir plus d’informations sur les meilleurs candidats de reconnaissance rejetés, attacher un gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-620">To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event.</span></span>  
  
 <span data-ttu-id="4e6a9-621">Lorsque vous créez un délégué <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>, vous identifiez la méthode qui gérera l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-621">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="4e6a9-622">Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-622">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="4e6a9-623">Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-623">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="4e6a9-624">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [événements et délégués](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-624">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-625">L’exemple suivant reconnaît des expressions telles que « Affichent la liste des artistes dans la catégorie jazz » ou « Affichent les êtes albums ».</span><span class="sxs-lookup"><span data-stu-id="4e6a9-625">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="4e6a9-626">L’exemple utilise un gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> événement pour afficher des informations sur les résultats de la reconnaissance dans la console.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-626">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event to display information about the results of recognition in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted, error occurred during recognition: {0}", e.Error);  
        return;  
      }  
  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
  
      if (e.Result != null)  
      {  
        Console.WriteLine("RecognizeCompleted:");  
        Console.WriteLine("  Grammar: " + e.Result.Grammar.Name);  
        Console.WriteLine("  Recognized text: " + e.Result.Text);  
        Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
        Console.WriteLine("  Audio position: " + e.AudioPosition);  
      }  
  
      else  
      {  
        Console.WriteLine("RecognizeCompleted: No result.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded:  " + e.Grammar.Name);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerAudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-627">Obtient la position actuelle du <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> dans l'entrée audio qu'il gère.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-627">Gets the current location of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> in the audio input that it is processing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-628">Position du module de reconnaissance dans l'entrée audio qu'il gère.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-628">The position of the recognizer in the audio input that it is processing.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-629">La position audio est spécifique à chaque module de reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-629">The audio position is specific to each speech recognizer.</span></span> <span data-ttu-id="4e6a9-630">La valeur zéro d’un flux d’entrée est établie lorsqu’il est activé.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-630">The zero value of an input stream is established when it is enabled.</span></span>  
  
 <span data-ttu-id="4e6a9-631">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> références de propriété le <xref:System.Speech.Recognition.SpeechRecognitionEngine> position de l’objet dans son entrée audio.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-631">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input.</span></span> <span data-ttu-id="4e6a9-632">En revanche, le <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> propriété référence la position du périphérique d’entrée dans son flux audio généré.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-632">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="4e6a9-633">Ces positions peuvent être différentes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-633">These positions can be different.</span></span> <span data-ttu-id="4e6a9-634">Par exemple, si le module de reconnaissance a reçu d’entrée pour lesquels il n’a pas encore généré un résultat de reconnaissance ensuite la valeur de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> propriété est inférieure à la valeur de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-634">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerInfo : System.Speech.Recognition.RecognizerInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-635">Obtient des informations sur l'instance actuelle de <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-635">Gets information about the current instance of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e6a9-636">Informations sur le module de reconnaissance vocale actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-636">Information about the current speech recognizer.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-637">Pour obtenir des informations sur tous les modules de reconnaissance vocale installés pour le système actuel, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-637">To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-638">L’exemple suivant obtient une liste partielle des données pour le moteur de reconnaissance vocale de dans le processus actuel.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-638">The following example gets a partial list of data for the current in-process speech recognition engine.</span></span> <span data-ttu-id="4e6a9-639">Pour plus d'informations, consultez <xref:System.Speech.Recognition.RecognizerInfo>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-639">For more information, see <xref:System.Speech.Recognition.RecognizerInfo>.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace RecognitionEngine  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
        Console.WriteLine("Information for the current speech recognition engine:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberSignature Language="F#" Value="member this.RecognizerUpdateReached : EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " Usage="member this.RecognizerUpdateReached : System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-640">Déclenché lorsque <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> en cours d'exécution est suspendu pour accepter les modifications.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-640">Raised when a running <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pauses to accept modifications.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-641">Les applications doivent utiliser <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> pour suspendre une instance en cours d’exécution de <xref:System.Speech.Recognition.SpeechRecognitionEngine> avant de modifier ses paramètres ou son <xref:System.Speech.Recognition.Grammar> objets.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-641">Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="4e6a9-642">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine> déclenche cet événement lorsqu’il est prêt à accepter les modifications.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-642">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="4e6a9-643">Par exemple, bien que le <xref:System.Speech.Recognition.SpeechRecognitionEngine> est suspendu, vous pouvez charger, décharger, activer et désactiver <xref:System.Speech.Recognition.Grammar> objets et modifier des valeurs pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-643">For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties.</span></span> <span data-ttu-id="4e6a9-644">Pour plus d'informations, voir la méthode <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-644">For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="4e6a9-645">Lorsque vous créez un délégué <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>, vous identifiez la méthode qui gérera l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-645">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="4e6a9-646">Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-646">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="4e6a9-647">Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-647">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="4e6a9-648">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [événements et délégués](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-648">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-649">L’exemple suivant montre une application console qui charge et décharge <xref:System.Speech.Recognition.Grammar> objets.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-649">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="4e6a9-650">L’application utilise le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> méthode pour demander le moteur de reconnaissance vocale en pause afin qu’elle peut recevoir une mise à jour.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-650">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="4e6a9-651">L’application, puis charge ou décharge un <xref:System.Speech.Recognition.Grammar> objet.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-651">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="4e6a9-652">À chaque mise à jour, un gestionnaire pour <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> d’événement écrit le nom et l’état d’actuellement chargés <xref:System.Speech.Recognition.Grammar> objets dans la console.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-652">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="4e6a9-653">Comme les grammaires sont chargées et déchargées, l’application reconnaît tout d’abord les noms des animaux de batterie de serveurs, puis les noms des animaux de batterie de serveurs et les noms des fruits, puis uniquement les noms de fruits.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-653">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-654">Demande que le module de reconnaissance soit suspendu pour mettre à jour son état.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-654">Requests that the recognizer pauses to update its state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-655">Utilisez cette méthode pour synchroniser les modifications apportées au module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-655">Use this method to synchronize changes to the recognizer.</span></span> <span data-ttu-id="4e6a9-656">Par exemple, si vous chargez ou déchargez une grammaire de reconnaissance vocale pendant que le module de reconnaissance traite l’entrée, utilisez cette méthode et la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> événement pour synchroniser le comportement de votre application avec l’état du module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-656">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="4e6a9-657">Lorsque cette méthode est appelée, le module de reconnaissance suspend ou termine les opérations asynchrones et génère un <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-657">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="4e6a9-658">Un <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> Gestionnaire d’événements pouvez ensuite modifier l’état du module de reconnaissance entre les opérations de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-658">A <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span> <span data-ttu-id="4e6a9-659">Lors de la gestion <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> événements, le module de reconnaissance s’interrompt jusqu'à ce que le Gestionnaire d’événements retourne.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-659">When handling <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> events, the recognizer pauses until the event handler returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e6a9-660">Si l’entrée dans le module de reconnaissance est modifiée avant le module de reconnaissance déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> événement, la demande est ignorée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-660">If the input to the recognizer is changed before the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the request is discarded.</span></span>  
  
 <span data-ttu-id="4e6a9-661">Lorsque cette méthode est appelée :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-661">When this method is called:</span></span>  
  
-   <span data-ttu-id="4e6a9-662">Si le module de reconnaissance ne traite pas d’entrée, le module de reconnaissance génère immédiatement la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-662">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="4e6a9-663">Si le module de reconnaissance est le traitement d’entrée qui se compose de silence ou de bruit de fond, le module de reconnaissance s’interrompt l’opération de reconnaissance et génère le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-663">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="4e6a9-664">Si le module de reconnaissance est le traitement d’entrée qui n’est pas constitué de silence ou de bruit de fond, le module de reconnaissance termine l’opération de reconnaissance, puis génère le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-664">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="4e6a9-665">Bien que le module de reconnaissance gère la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> événement :</span><span class="sxs-lookup"><span data-stu-id="4e6a9-665">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="4e6a9-666">Le module de reconnaissance ne traite pas d’entrée et la valeur de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> propriété reste le même.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-666">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="4e6a9-667">Le module de reconnaissance continue à collecter d’entrée et la valeur de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> propriété peut être modifiée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-667">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property can change.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : unit -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-668">Demande que le module de reconnaissance soit suspendu pour mettre à jour son état.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-668">Requests that the recognizer pauses to update its state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-669">Lorsque le module de reconnaissance génère le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> événement, le <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> propriété de la <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> est `null`.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-669">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="4e6a9-670">Pour fournir un jeton d’utilisateur, utilisez la <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-670">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="4e6a9-671">Pour spécifier un décalage de position audio, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-671">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-672">L’exemple suivant montre une application console qui charge et décharge <xref:System.Speech.Recognition.Grammar> objets.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-672">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="4e6a9-673">L’application utilise le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> méthode pour demander le moteur de reconnaissance vocale en pause afin qu’elle peut recevoir une mise à jour.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-673">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="4e6a9-674">L’application, puis charge ou décharge un <xref:System.Speech.Recognition.Grammar> objet.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-674">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="4e6a9-675">À chaque mise à jour, un gestionnaire pour <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> d’événement écrit le nom et l’état d’actuellement chargés <xref:System.Speech.Recognition.Grammar> objets dans la console.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-675">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="4e6a9-676">Comme les grammaires sont chargées et déchargées, l’application reconnaît tout d’abord les noms des animaux de batterie de serveurs, puis les noms des animaux de batterie de serveurs et les noms des fruits, puis uniquement les noms de fruits.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-676">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate userToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="4e6a9-677">Informations définies par l'utilisateur qui comporte des informations sur l'opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-677">User-defined information that contains information for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-678">Demande que le module de reconnaissance soit suspendu pour mettre à jour son état et fournisse un jeton utilisateur pour l'événement associé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-678">Requests that the recognizer pauses to update its state and provides a user token for the associated event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-679">Lorsque le module de reconnaissance génère le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> événement, le <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> propriété de la <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contient la valeur de la `userToken` paramètre.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-679">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="4e6a9-680">Pour spécifier un décalage de position audio, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-680">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj * TimeSpan -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate (userToken, audioPositionAheadToRaiseUpdate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="4e6a9-681">Informations définies par l'utilisateur qui comporte des informations sur l'opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-681">User-defined information that contains information for the operation.</span>
          </span>
        </param>
        <param name="audioPositionAheadToRaiseUpdate">
          <span data-ttu-id="4e6a9-682">Offset de la <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> actuelle pour différer la demande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-682">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> to delay the request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-683">Demande que le module de reconnaissance soit suspendu pour mettre à jour son état et fournisse un offset et un jeton utilisateur pour l'événement associé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-683">Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-684">Le module de reconnaissance n’initie pas la demande de mise à jour du module de reconnaissance jusqu'à ce que le module de reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> est égal à actuel <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-684">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span></span>  
  
 <span data-ttu-id="4e6a9-685">Lorsque le module de reconnaissance génère le <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> événement, le <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> propriété de la <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contient la valeur de la `userToken` paramètre.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-685">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetInputToAudioStream (System.IO.Stream audioSource, System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToAudioStream(class System.IO.Stream audioSource, class System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToAudioStream (audioSource As Stream, audioFormat As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToAudioStream(System::IO::Stream ^ audioSource, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ audioFormat);" />
      <MemberSignature Language="F#" Value="member this.SetInputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechRecognitionEngine.SetInputToAudioStream (audioSource, audioFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
        <Parameter Name="audioFormat" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioSource">
          <span data-ttu-id="4e6a9-686">Flux d'entrée audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-686">The audio input stream.</span>
          </span>
        </param>
        <param name="audioFormat">
          <span data-ttu-id="4e6a9-687">Format de l'entrée audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-687">The format of the audio input.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-688">Configure l'objet <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pour recevoir l'entrée d'un flux audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-688">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from an audio stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-689">Si le module de reconnaissance a atteint la fin du flux d’entrée pendant une opération de reconnaissance, l’opération de reconnaissance finalise avec l’entrée disponible.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-689">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="4e6a9-690">Toutes les opérations ultérieures de reconnaissance peuvent générer une exception, sauf si vous mettez à jour l’entrée dans le module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-690">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-691">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-691">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="4e6a9-692">L’exemple utilise l’entrée à partir d’un fichier audio, example.wav, qui contient les expressions, « test du test d’un deux trois » et « laissez tomber cooper », séparés par une pause.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-692">The example uses input from an audio file, example.wav, that contains the phrases, "testing testing one two three" and "mister cooper", separated by a pause.</span></span> <span data-ttu-id="4e6a9-693">L’exemple génère la sortie suivante.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-693">The example generates the following output.</span></span>  
  
```  
  
Starting asynchronous recognition...  
  Recognized text =  Testing testing 123  
  Recognized text =  Mr. Cooper  
  End of stream encountered.  
Done.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.IO;  
using System.Speech.AudioFormat;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InputExamples  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToAudioStream(  
          File.OpenRead(@"c:\temp\audioinput\example.wav"),  
          new SpeechAudioFormatInfo(  
            44100, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Perform recognition of the whole file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetInputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetInputToDefaultAudioDevice : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-694">Configure l'objet <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pour recevoir l'entrée du périphérique audio par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-694">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from the default audio device.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4e6a9-695">L’exemple suivant montre une partie d’une application console qui montre une reconnaissance vocale élémentaire.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-695">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="4e6a9-696">L’exemple utilise la sortie à partir du périphérique audio par défaut, effectue plusieurs opérations de reconnaissance asynchrone et s’arrête quand un utilisateur dicte la phrase, « exit ».</span><span class="sxs-lookup"><span data-stu-id="4e6a9-696">The example uses output from the default audio device, performs multiple, asynchronous recognition operations, and exits when a user utters the phrase, "exit".</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace DefaultInput  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition has finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load the exit grammar.  
        Grammar exitGrammar = new Grammar(new GrammarBuilder("exit"));  
        exitGrammar.Name = "Exit Grammar";  
        recognizer.LoadGrammar(exitGrammar);  
  
        // Create and load the dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers to the recognizer.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Begin asynchronous recognition.  
        Console.WriteLine("Starting recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait for recognition to finish.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized:");  
      string grammarName = "<not available>";  
      if (e.Result.Grammar.Name != null &&  
        !e.Result.Grammar.Name.Equals(string.Empty))  
      {  
        grammarName = e.Result.Grammar.Name;  
      }  
      Console.WriteLine("    {0,-17} - {1}",  
        grammarName, e.Result.Text);  
  
      if (grammarName.Equals("Exit Grammar"))  
      {  
        ((SpeechRecognitionEngine)sender).RecognizeAsyncCancel();  
      }  
    }  
  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("  Recognition completed.");  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToNull">
      <MemberSignature Language="C#" Value="public void SetInputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetInputToNull : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-697">Désactive l'entrée au module de reconnaissance vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-697">Disables the input to the speech recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-698">Configurer le <xref:System.Speech.Recognition.SpeechRecognitionEngine> objet pour aucune entrée lorsque vous utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> méthodes, ou lorsque vous prenez un moteur de reconnaissance temporairement hors connexion.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-698">Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetInputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveFile : string -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="4e6a9-699">Chemin d'accès du fichier à utiliser en entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-699">The path of the file to use as input.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-700">Configure l'objet <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pour recevoir l'entrée d'un fichier au format audio Waveform (.wav).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-700">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a Waveform audio format (.wav) file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-701">Si le module de reconnaissance a atteint la fin du fichier d’entrée pendant une opération de reconnaissance, l’opération de reconnaissance finalise avec l’entrée disponible.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-701">If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="4e6a9-702">Toutes les opérations ultérieures de reconnaissance peuvent générer une exception, sauf si vous mettez à jour l’entrée dans le module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-702">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-703">L’exemple suivant effectue la reconnaissance de l’audio dans un fichier .wav et écrit le texte reconnu dans la console.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-703">The following example performs recognition on the audio in a .wav file and writes the recognized text to the console.</span></span>  
  
```  
using System;  
using System.IO;  
using System.Speech.Recognition;  
using System.Speech.AudioFormat;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
recognizer.SetInputToWaveFile(@"c:\temp\SampleWAVInput.wav");  
  
        // Attach event handlers for the results of recognition.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizeCompleted +=   
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
  
        // Perform recognition on the entire file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        while (!completed)  
        {  
          Console.ReadLine();  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
        e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetInputToWaveStream (System.IO.Stream audioSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveStream(class System.IO.Stream audioSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveStream (audioSource As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveStream(System::IO::Stream ^ audioSource);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveStream audioSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioSource">
          <span data-ttu-id="4e6a9-704">Flux contenant les données audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-704">The stream containing the audio data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-705">Configure l'objet <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pour recevoir l'entrée d'un flux qui contient des données au format audio Waveform (.wav).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-705">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a stream that contains Waveform audio format (.wav) data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-706">Si le module de reconnaissance a atteint la fin du flux d’entrée pendant une opération de reconnaissance, l’opération de reconnaissance finalise avec l’entrée disponible.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-706">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="4e6a9-707">Toutes les opérations ultérieures de reconnaissance peuvent générer une exception, sauf si vous mettez à jour l’entrée dans le module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-707">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberSignature Language="F#" Value="member this.SpeechDetected : EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " Usage="member this.SpeechDetected : System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-708">Déclenché lorsque <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> détecte l'entrée qu'il peut identifier comme vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-708">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects input that it can identify as speech.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-709">Chaque module de reconnaissance vocale dispose d’un algorithme pour faire la distinction entre la latence et de reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-709">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="4e6a9-710">Lorsque le <xref:System.Speech.Recognition.SpeechRecognitionEngine> effectue une opération de reconnaissance vocale, il déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> événement lors de son algorithme identifie l’entrée comme vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-710">When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event when its algorithm identifies the input as speech.</span></span> <span data-ttu-id="4e6a9-711">Le <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> propriété associé <xref:System.Speech.Recognition.SpeechDetectedEventArgs> objet indique l’emplacement dans le flux d’entrée où le module de reconnaissance détectée vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-711">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="4e6a9-712">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine> déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> événement avant de déclencher de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> événements.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-712">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events.</span></span>  
  
 <span data-ttu-id="4e6a9-713">Pour plus d’informations, consultez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-713">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="4e6a9-714">Lorsque vous créez un délégué <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, vous identifiez la méthode qui gérera l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-714">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="4e6a9-715">Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-715">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="4e6a9-716">Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-716">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="4e6a9-717">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [événements et délégués](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-717">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-718">L’exemple suivant fait partie d’une application de console pour le choix des villes d’origine et de destination pour un vol.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-718">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="4e6a9-719">L’application reconnaît des expressions telles que « Je veux passage vers Miami à Chicago ».</span><span class="sxs-lookup"><span data-stu-id="4e6a9-719">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="4e6a9-720">L’exemple utilise le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> événement en rapport le <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> chaque heure de voix est détectée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-720">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("  Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberSignature Language="F#" Value="member this.SpeechHypothesized : EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " Usage="member this.SpeechHypothesized : System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-721">Déclenché lorsque <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> a identifié un mot ou des mots qui peuvent être un composant de plusieurs expressions complètes dans une syntaxe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-721">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-722">Le <xref:System.Speech.Recognition.SpeechRecognitionEngine> génère de nombreux <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> événements tel qu’il tente d’identifier une phrase d’entrée.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-722">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> events as it attempts to identify an input phrase.</span></span> <span data-ttu-id="4e6a9-723">Vous pouvez accéder au texte d’expressions partiellement reconnus dans le <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propriété de la <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> objet dans le gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-723">You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event.</span></span> <span data-ttu-id="4e6a9-724">En règle générale, la gestion de ces événements est utile uniquement pour le débogage.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-724">Typically, handling these events is useful only for debugging.</span></span>  
  
 <span data-ttu-id="4e6a9-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> dérive de <xref:System.Speech.Recognition.RecognitionEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="4e6a9-726">Pour plus d’informations, consultez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriété et la <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-726">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="4e6a9-727">Lorsque vous créez un délégué <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, vous identifiez la méthode qui gérera l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-727">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="4e6a9-728">Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-728">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="4e6a9-729">Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-729">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="4e6a9-730">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [événements et délégués](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-730">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-731">L’exemple suivant reconnaît des expressions telles que « Afficher la liste des artistes dans la catégorie jazz ».</span><span class="sxs-lookup"><span data-stu-id="4e6a9-731">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="4e6a9-732">L’exemple utilise le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> événement pour afficher des fragments de phrase incomplètes dans la console qu’elles sont reconnues.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-732">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine();   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognitionRejected : EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " Usage="member this.SpeechRecognitionRejected : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-733">Déclenché lorsque l'objet <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> reçoit l'entrée qui ne correspond pas à l'un de ses objets <see cref="T:System.Speech.Recognition.Grammar" /> chargés et activés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-733">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that does not match any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-734">Le module de reconnaissance déclenche cet événement s’il détermine qu’entrée ne correspond pas à une confiance suffisante des ses chargés et activés <xref:System.Speech.Recognition.Grammar> objets.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-734">The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="4e6a9-735">Le <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propriété de la <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contient le rejet <xref:System.Speech.Recognition.RecognitionResult> objet.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-735">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="4e6a9-736">Vous pouvez utiliser le gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> événement afin de récupérer la reconnaissance <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> qui ont été rejetés et leur <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-736">You can use the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.</span></span>  
  
 <span data-ttu-id="4e6a9-737">Si votre application utilise un <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, vous pouvez modifier le niveau de confiance à quels vocale entrée est acceptée ou rejetée avec l’un de le <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-737">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="4e6a9-738">Vous pouvez modifier la façon dont la reconnaissance vocale répond aux non-reconnaissance vocale d’entrée à l’aide de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-738">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="4e6a9-739">Lorsque vous créez un délégué <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, vous identifiez la méthode qui gérera l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-739">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="4e6a9-740">Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-740">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="4e6a9-741">Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-741">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="4e6a9-742">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [événements et délégués](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-742">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-743">L’exemple suivant reconnaît des expressions telles que « Affichent la liste des artistes dans la catégorie jazz » ou « Affichent les êtes albums ».</span><span class="sxs-lookup"><span data-stu-id="4e6a9-743">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="4e6a9-744">L’exemple utilise un gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> événement pour afficher une notification dans la console lorsque la voix d’entrée ne peut pas être mis en correspondance avec le contenu de la grammaire avec suffisamment <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> pour produire un module de reconnaissance réussi.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-744">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> to produce a successful recognition.</span></span> <span data-ttu-id="4e6a9-745">Le gestionnaire affiche également le résultat de la reconnaissance <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> qui ont été rejetés en raison des scores de confiance faible.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-745">The handler also displays recognition result <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected because of low confidence scores.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
      foreach (RecognizedPhrase phrase in e.Result.Alternates)  
      {  
      Console.WriteLine("  Rejected phrase: " + phrase.Text);  
      Console.WriteLine("  Confidence score: " + phrase.Confidence);  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-746">Déclenché lorsque l'objet <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> reçoit l'entrée qui correspond à l'un de ses objets <see cref="T:System.Speech.Recognition.Grammar" /> chargés et activés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-746">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that matches any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-747">Vous pouvez lancer une opération de reconnaissance à l’aide de l’une de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-747">You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span> <span data-ttu-id="4e6a9-748">Le module de reconnaissance déclenche le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement s’il détermine qu’entrée correspond à l’un de ses chargé <xref:System.Speech.Recognition.Grammar> objets avec un niveau de confiance pour constituer la reconnaissance suffisant.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-748">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition.</span></span> <span data-ttu-id="4e6a9-749">Le <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propriété de la <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contient du acceptées <xref:System.Speech.Recognition.RecognitionResult> objet.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-749">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="4e6a9-750">Gestionnaires de <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événements peuvent obtenir l’expression reconnue, ainsi qu’une liste de la reconnaissance <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> avec des scores de confiance inférieur.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-750">Handlers of <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores.</span></span>  
  
 <span data-ttu-id="4e6a9-751">Si votre application utilise un <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, vous pouvez modifier le niveau de confiance à quels vocale entrée est acceptée ou rejetée avec l’un de le <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-751">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  <span data-ttu-id="4e6a9-752">Vous pouvez modifier la façon dont la reconnaissance vocale répond aux non-reconnaissance vocale d’entrée à l’aide de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-752">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="4e6a9-753">Lorsque le module de reconnaissance reçoit l’entrée qui correspond à une grammaire, le <xref:System.Speech.Recognition.Grammar> objet peut déclencher son <xref:System.Speech.Recognition.Grammar.SpeechRecognized> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-753">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="4e6a9-754">Le <xref:System.Speech.Recognition.Grammar> l’objet <xref:System.Speech.Recognition.Grammar.SpeechRecognized> événement est déclenché avant la reconnaissance vocale <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-754">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="4e6a9-755">Toutes les tâches spécifiques à une syntaxe spécifique doivent toujours être effectuées par un gestionnaire pour le <xref:System.Speech.Recognition.Grammar.SpeechRecognized> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-755">Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="4e6a9-756">Lorsque vous créez un délégué <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, vous identifiez la méthode qui gérera l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-756">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="4e6a9-757">Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-757">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="4e6a9-758">Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-758">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="4e6a9-759">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [événements et délégués](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-759">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-760">L’exemple suivant fait partie d’une application console qui crée la grammaire de reconnaissance vocale, constructions un <xref:System.Speech.Recognition.Grammar> de l’objet et les charge dans le <xref:System.Speech.Recognition.SpeechRecognitionEngine> pour effectuer la reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-760">The following example is part of a console application that creates speech recognition grammar, constructs a <xref:System.Speech.Recognition.Grammar> object, and loads it into the <xref:System.Speech.Recognition.SpeechRecognitionEngine> to perform recognition.</span></span> <span data-ttu-id="4e6a9-761">L’exemple montre la saisie vocale pour un <xref:System.Speech.Recognition.SpeechRecognitionEngine>, les résultats de reconnaissance associées et les événements associés déclenchés par le module de reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-761">The example demonstrates speech input to a <xref:System.Speech.Recognition.SpeechRecognitionEngine>, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
 <span data-ttu-id="4e6a9-762">Parlée entrée comme « Je veux passage de Chicago à Miami » déclenchera un <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-762">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="4e6a9-763">À propos de l’expression « Piloter me de Houston à Chicago » ne déclenche pas une <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-763">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="4e6a9-764">L’exemple utilise un gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement pour afficher correctement reconnu des expressions et la sémantique qu’ils contiennent dans la console.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-764">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberSignature Language="F#" Value="member this.UnloadAllGrammars : unit -&gt; unit" Usage="speechRecognitionEngine.UnloadAllGrammars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-765">Décharge tous les objets <see cref="T:System.Speech.Recognition.Grammar" /> du module de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-765">Unloads all <see cref="T:System.Speech.Recognition.Grammar" /> objects from the recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-766">Si le module de reconnaissance charge actuellement un <xref:System.Speech.Recognition.Grammar> attend de façon asynchrone, cette méthode jusqu'à ce que le <xref:System.Speech.Recognition.Grammar> est chargée, avant qu’il décharge toutes le <xref:System.Speech.Recognition.Grammar> objets à partir de la <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-766">If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="4e6a9-767">Pour décharger une syntaxe spécifique, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-767">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-768">L’exemple suivant montre une partie d’une application console qui montre le chargement synchrone et le déchargement des grammaires de la reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-768">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.UnloadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.UnloadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="4e6a9-769">Objet de grammaire à décharger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-769">The grammar object to unload.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-770">Décharge un objet <see cref="T:System.Speech.Recognition.Grammar" /> spécifié de l'instance <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-770">Unloads a specified <see cref="T:System.Speech.Recognition.Grammar" /> object from the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-771">Si le module de reconnaissance est en cours d’exécution, les applications doivent utiliser <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> pour suspendre la <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance avant le chargement, déchargement, activer ou désactiver un <xref:System.Speech.Recognition.Grammar> objet.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-771">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="4e6a9-772">À décharger tout <xref:System.Speech.Recognition.Grammar> objets, utiliser le <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-772">To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-773">L’exemple suivant montre une partie d’une application console qui montre le chargement synchrone et le déchargement des grammaires de la reconnaissance vocale.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-773">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-774">
            <paramref name="Grammar" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-774">
              <paramref name="Grammar" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4e6a9-775">La grammaire n'est pas chargée dans ce module de reconnaissance, ou ce module de reconnaissance charge actuellement la grammaire de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-775">The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateRecognizerSetting">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4e6a9-776">Met à jour la valeur d'un paramètre du module de reconnaissance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-776">Updates the value of a setting for the recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-777">Paramètres de module de reconnaissance peuvent contenir des données de chaîne, entier 64 bits ou mémoire adresse.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-777">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="4e6a9-778">Le tableau suivant décrit les paramètres qui sont définis pour une API Microsoft Speech (SAPI)-module de reconnaissance conforme.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-778">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="4e6a9-779">Les paramètres suivants doivent avoir la même plage pour chaque module de reconnaissance qui prend en charge le paramètre.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-779">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="4e6a9-780">Un module de reconnaissance vocale compatible SAPI n’est pas nécessaire pour prendre en charge ces paramètres et peut prendre en charge les autres paramètres.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-780">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="4e6a9-781">Name</span><span class="sxs-lookup"><span data-stu-id="4e6a9-781">Name</span></span>|<span data-ttu-id="4e6a9-782">Description </span><span class="sxs-lookup"><span data-stu-id="4e6a9-782">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="4e6a9-783">Spécifie la consommation du processeur du module de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-783">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="4e6a9-784">La plage est comprise entre 0 et 100.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-784">The range is from 0 to 100.</span></span> <span data-ttu-id="4e6a9-785">La valeur par défaut est 50.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-785">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="4e6a9-786">Indique la longueur de silence à la fin de l’entrée sans ambiguïté avant que le module de reconnaissance vocale termine une opération de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-786">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="4e6a9-787">La plage est comprise entre 0 et 10 000 millisecondes (ms).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-787">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="4e6a9-788">Ce paramètre correspond à la reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-788">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span> <span data-ttu-id="4e6a9-789">Par défaut = 150ms.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-789">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="4e6a9-790">Indique la longueur de la latence en millisecondes (ms) à la fin de l’entrée ambiguë avant que le module de reconnaissance vocale termine une opération de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-790">Indicates the length of silence in milliseconds (ms) at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="4e6a9-791">La plage est comprise entre 0 à 10 000 ms.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-791">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="4e6a9-792">Ce paramètre correspond à la reconnaissance <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-792">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="4e6a9-793">Par défaut = 500 ms.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-793">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="4e6a9-794">Indique si une adaptation du modèle acoustique est activé (valeur = `1`) ou OFF (valeur = `0`).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-794">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="4e6a9-795">La valeur par défaut est `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-795">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="4e6a9-796">Indique si une adaptation en arrière-plan est activé (valeur = `1`) ou OFF (valeur = `0`), et conserve le paramètre dans le Registre.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-796">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="4e6a9-797">La valeur par défaut est `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-797">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="4e6a9-798">Pour retourner un des paramètres du module de reconnaissance, utilisez le <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4e6a9-798">To return one of the recognizer's settings, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> method.</span></span>  
  
 <span data-ttu-id="4e6a9-799">À l’exception de `PersistedBackgroundAdaptation`, les valeurs de propriété définies à l’aide de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> méthodes restent effectives uniquement pour l’instance actuelle de <xref:System.Speech.Recognition.SpeechRecognitionEngine>, après laquelle ils revenir à leurs paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-799">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span>  
  
 <span data-ttu-id="4e6a9-800">Vous pouvez modifier la façon dont la reconnaissance vocale répond aux non-reconnaissance vocale d’entrée à l’aide de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-800">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, int updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, int32 updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, int updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * int -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="settingName">
          <span data-ttu-id="4e6a9-801">Nom du paramètre à mettre à jour.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-801">The name of the setting to update.</span>
          </span>
        </param>
        <param name="updatedValue">
          <span data-ttu-id="4e6a9-802">Nouvelle valeur du paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-802">The new value for the setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-803">Met à jour le paramètre spécifié pour <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> avec la valeur entière spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-803">Updates the specified setting for the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> with the specified integer value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-804">À l’exception de `PersistedBackgroundAdaptation`, les valeurs de propriété définies à l’aide de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> méthode restent effectives uniquement pour l’instance actuelle de <xref:System.Speech.Recognition.SpeechRecognitionEngine>, après laquelle ils revenir à leurs paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-804">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="4e6a9-805">Consultez <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> pour obtenir une description des paramètres pris en charge.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-805">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e6a9-806">L’exemple suivant fait partie d’une application console qui génère les valeurs pour un nombre de paramètres définis pour le module de reconnaissance qui prend en charge les paramètres régionaux en-US.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-806">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="4e6a9-807">L’exemple met à jour les paramètres de niveau de confiance et interroge ensuite le module de reconnaissance pour vérifier les valeurs mises à jour.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-807">The example updates the confidence level settings, and then queries the recognizer to check the updated values.</span></span> <span data-ttu-id="4e6a9-808">L’exemple génère la sortie suivante.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-808">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Updated settings:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 200  
  ComplexResponseSpeed           = 300  
  AdaptationOn                   = 0  
  PersistedBackgroundAdaptation  = 0  
  
Press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation",  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        // List the current settings.  
        ListSettings(recognizer);  
  
        // Change some of the settings.  
        recognizer.UpdateRecognizerSetting("ResponseSpeed", 200);  
        recognizer.UpdateRecognizerSetting("ComplexResponseSpeed", 300);  
        recognizer.UpdateRecognizerSetting("AdaptationOn", 1);  
        recognizer.UpdateRecognizerSetting("PersistedBackgroundAdaptation", 0);  
  
        Console.WriteLine("Updated settings:");  
        Console.WriteLine();  
  
        // List the updated settings.  
        ListSettings(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListSettings(SpeechRecognitionEngine recognizer)  
    {  
      foreach (string setting in settings)  
      {  
        try  
        {  
          object value = recognizer.QueryRecognizerSetting(setting);  
          Console.WriteLine("  {0,-30} = {1}", setting, value);  
        }  
        catch  
        {  
          Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
            setting);  
        }  
      }  
      Console.WriteLine();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-809">
            <paramref name="settingName" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-809">
              <paramref name="settingName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e6a9-810">
            <paramref name="settingName" /> est la chaîne vide ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-810">
              <paramref name="settingName" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="4e6a9-811">Le module de reconnaissance n'a pas de paramètre correspondant à ce nom.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-811">The recognizer does not have a setting by that name.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, string updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, string updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, System::String ^ updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * string -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName">
          <span data-ttu-id="4e6a9-812">Nom du paramètre à mettre à jour.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-812">The name of the setting to update.</span>
          </span>
        </param>
        <param name="updatedValue">
          <span data-ttu-id="4e6a9-813">Nouvelle valeur du paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-813">The new value for the setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e6a9-814">Met à jour le paramètre du moteur de reconnaissance vocale spécifié avec la valeur de chaîne spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-814">Updates the specified speech recognition engine setting with the specified string value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e6a9-815">À l’exception de `PersistedBackgroundAdaptation`, les valeurs de propriété définies à l’aide de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> méthode restent effectives uniquement pour l’instance actuelle de <xref:System.Speech.Recognition.SpeechRecognitionEngine>, après laquelle ils revenir à leurs paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-815">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="4e6a9-816">Consultez <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> pour obtenir une description des paramètres pris en charge.</span><span class="sxs-lookup"><span data-stu-id="4e6a9-816">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4e6a9-817">
            <paramref name="settingName" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-817">
              <paramref name="settingName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e6a9-818">
            <paramref name="settingName" /> est la chaîne vide ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-818">
              <paramref name="settingName" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="4e6a9-819">Le module de reconnaissance n'a pas de paramètre correspondant à ce nom.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e6a9-819">The recognizer does not have a setting by that name.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>