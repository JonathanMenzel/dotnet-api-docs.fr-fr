<Type Name="Grammar" FullName="System.Speech.Recognition.Grammar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0590aacd1e6d847c085bb5c1a57748b1e452d7fa" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531163" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Grammar extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Grammar" />
  <TypeSignature Language="VB.NET" Value="Public Class Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Grammar: {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Objet de runtime qui référence une syntaxe de reconnaissance vocale qu'une application peut utiliser pour définir les contraintes de reconnaissance vocale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une grammaire de reconnaissance vocale est un ensemble de règles ou des contraintes qui définissent un moteur de reconnaissance vocale qui peut reconnaître en tant qu’entrée explicite. Pour plus d’informations sur la création et à l’aide des grammaires de reconnaissance vocale, consultez [la reconnaissance vocale](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919), [créer de grammaires à l’aide de XML](http://msdn.microsoft.com/library/2d799487-49c6-4cc9-b42f-f71cd3824fe1), [créer grammaires à l’aide de GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae), et [créer grammaires à l’aide de SrgsGrammar](http://msdn.microsoft.com/library/e4d9f96e-2241-4c39-b9e0-ac9ef4e9a906).  
  
 Une fois que vous créez une grammaire, vous devez le créer dans un <xref:System.Speech.Recognition.Grammar> qu’un moteur de reconnaissance vocale peut charger et que votre application peut utiliser lors de l’exécution pour gérer la reconnaissance vocale de l’objet. Vous pouvez utiliser un <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeur pour créer un <xref:System.Speech.Recognition.Grammar> à partir de l’instance un <xref:System.Speech.Recognition.GrammarBuilder> ou un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> objet, ou d’un fichier ou un <xref:System.IO.Stream> qui contient une description d’une grammaire dans un format pris en charge. Formats pris en charge sont les suivantes :  
  
-   Les fichiers au format XML qui se conforment à la W3C [spécification de grammaire de reconnaissance vocale (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammaires qui ont été compilés dans un fichier binaire avec une extension de fichier cfg  
  
 Les constructeurs de grammaire qui acceptent les fichiers de grammaire au format XML dans leurs arguments de compiler les grammaires XML dans un format binaire pour les optimiser pour le chargement et la consommation par un moteur de reconnaissance vocale. Vous pouvez réduire la quantité de temps nécessaire pour construire un <xref:System.Speech.Recognition.Grammar> objet à partir d’une grammaire au format XML en compilant la grammaire à l’avance, à l’aide d’un de le <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> méthodes.  
  
 De reconnaissance vocale d’une application, géré par un <xref:System.Speech.Recognition.SpeechRecognizer> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine> d’objet, peut charger plusieurs grammaires de reconnaissance vocale. L’application peut indépendamment activer ou désactiver les grammaires individuels en définissant le <xref:System.Speech.Recognition.Grammar.Enabled%2A> propriété et modifier le comportement de la reconnaissance via <xref:System.Speech.Recognition.Grammar> propriétés, telles que la <xref:System.Speech.Recognition.Grammar.Priority%2A> et <xref:System.Speech.Recognition.Grammar.Weight%2A> propriétés.  
  
 De la grammaire <xref:System.Speech.Recognition.Grammar.SpeechRecognized> événement est déclenché lorsque l’entrée correspond à un chemin d’accès à la grammaire.  
  
> [!NOTE]
>  Il est recommandé de vérifier la sécurité de n’importe quel URI ou une DLL utilisée pour générer un <xref:System.Speech.Recognition.Grammar> objet.  
>   
>  Windows et la plateforme de reconnaissance vocale offrent une sécurité pour les applications de construction d’un <xref:System.Speech.Recognition.Grammar> instance à partir d’une DLL ou d’une grammaire qui prend en charge l’écriture de scripts.  
>   
>  Dans les scripts <xref:System.Speech.Recognition.Grammar> objets sont toujours exécutés comme si téléchargés à partir d’une page web dans le `Internet Zone`. Le Common Language Runtime (CLR) isole les DLL chargée pour obtenir une définition de grammaire.  
  
   
  
## Examples  
 L’exemple suivant construit une <xref:System.Speech.Recognition.Grammar> objet à partir d’une grammaire de reconnaissance vocale définie dans un fichier XML (cities.xml). Le contenu du fichier cities.xml s’affiche dans l’exemple XML suivant.  
  
```csharp  
// Load a cities grammar from a local file and return the grammar object.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser un <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeur pour créer un <xref:System.Speech.Recognition.Grammar> à partir de l’instance un <xref:System.Speech.Recognition.GrammarBuilder> ou <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> objet, ou d’un fichier ou un <xref:System.IO.Stream> qui contient une description d’une grammaire dans un format pris en charge. Formats pris en charge sont les suivantes :  
  
-   Les fichiers au format XML qui se conforment à la W3C [spécification de grammaire de reconnaissance vocale (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammaires qui ont été compilés dans un fichier binaire avec une extension de fichier cfg  
  
 Les constructeurs de grammaire qui acceptent les fichiers de grammaire au format XML dans leurs arguments de compiler les grammaires XML dans un format binaire pour les optimiser pour le chargement et la consommation par un moteur de reconnaissance vocale. Vous pouvez réduire la quantité de temps nécessaire pour construire un <xref:System.Speech.Recognition.Grammar> objet à partir d’une grammaire au format XML en compilant la grammaire à l’avance, à l’aide d’un de le <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> méthodes.  
  
 Une grammaire de reconnaissance vocale peut définir une règle racine. Pour créer un <xref:System.Speech.Recognition.Grammar> objet qui spécifie la règle à utiliser en tant que sa règle racine, utilisez un constructeur qui accepte le `ruleName` paramètre.  
  
 Pour créer un <xref:System.Speech.Recognition.Grammar> objet qui spécifie un URI de base pour résoudre les références de règle relative, utilisez un constructeur qui accepte le `baseUri` paramètre.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Grammar ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Grammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Flux qui décrit une Grammaire de la Reconnaissance vocale dans un format pris en charge.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" /> à partir d'un <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur ne passe pas tous les paramètres au gestionnaire d’initialisation et la description ne doit pas définir un gestionnaire d’initialisation qui requiert des arguments.  
  
 Ce constructeur peut créer un <xref:System.Speech.Recognition.Grammar> instance à partir des formats suivants :  
  
-   Les fichiers au format XML qui se conforment à la W3C [spécification de grammaire de reconnaissance vocale (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammaires qui ont été compilés dans un fichier binaire avec une extension de fichier cfg  
  
 Ce constructeur compile les fichiers de grammaire au format XML dans un format binaire pour les optimiser pour le chargement et la consommation par un moteur de reconnaissance vocale. Vous pouvez réduire la quantité de temps nécessaire pour construire un <xref:System.Speech.Recognition.Grammar> objet à partir d’une grammaire au format XML en compilant la grammaire à l’avance, à l’aide d’un de le <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> méthodes.  
  
 Une grammaire SRGS peut définir une règle racine. Pour créer un <xref:System.Speech.Recognition.Grammar> de l’objet à partir d’un flux de données et spécifier une règle racine, utilisez la <xref:System.Speech.Recognition.Grammar.%23ctor%2A> ou <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeur.  
  
 Pour créer un <xref:System.Speech.Recognition.Grammar> de l’objet à partir d’un flux de données et spécifier un URI de base à utiliser pour résoudre les références de règle relative, utilisez le <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeur.  
  
   
  
## Examples  
 L’exemple suivant crée une grammaire de reconnaissance vocale à partir d’un fichier de SRGS (cities.xml) à l’aide d’un flux de fichier. Le contenu du fichier cities.xml s’affiche après l’exemple c#.  
  
```csharp  
  
// Load a cities grammar from an I/O stream and    
// return the new grammar.   
private static Grammar CreateGrammarFromStream()  
{  
  string fileName = @"c:\temp\cities.xml";  
  Grammar citiesGrammar =  
    new Grammar(new FileStream(fileName, FileMode.Open));  
  citiesGrammar.Name = "Stream Cities Grammar";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> décrit une syntaxe qui ne contient pas de règle racine.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Le flux ne contient pas de description valide d'une syntaxe, ou décrit une syntaxe qui contient une référence de règle qui ne peut pas être résolue.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">Instance de <see cref="T:System.Speech.Recognition.GrammarBuilder" /> qui contient les contraintes de la syntaxe de reconnaissance vocale.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" /> à partir d'un objet <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur l’utilisation de la <xref:System.Speech.Recognition.GrammarBuilder> classe pour définir une grammaire, consultez [GrammarBuilder d’à l’aide de grammaires créer](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 L’exemple suivant crée une à l’aide de la grammaire pour la reconnaissance vocale <xref:System.Speech.Recognition.Choices> et <xref:System.Speech.Recognition.GrammarBuilder> objets. Le <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeur crée un <xref:System.Speech.Recognition.Grammar> de l’objet à partir de la <xref:System.Speech.Recognition.GrammarBuilder> objet.  
  
```csharp  
  
// Create a grammar using a GrammarBuilder and return the new grammar.   
private static Grammar CreateGrammarBuilderGrammar()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  
  Choices cityChoice = new Choices (new string[]   
  {"Seattle", "New York", "Miami", "Los Angeles"});  
  
  builder.Append("I would like to fly from");  
  builder.Append(cityChoice);  
  builder.Append("to");  
  builder.Append(cityChoice);  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "GrammarBuilder Cities Grammar";  
  
  return citiesGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Contraintes pour la grammaire de reconnaissance vocale.</param>
        <summary>Initialise une nouvelle instance de <see cref="T:System.Speech.Recognition.Grammar" /> à partir d'un objet <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur ne passe pas tous les paramètres pour le Gestionnaire d’initialisation et le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> ne doit pas contenir un gestionnaire d’initialisation qui requiert des arguments.  
  
 Un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> peut avoir une règle racine. Pour créer un <xref:System.Speech.Recognition.Grammar> objet qui spécifie une règle racine, utilisez la <xref:System.Speech.Recognition.Grammar.%23ctor%2A> ou <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeur.  
  
 Pour créer une reconnaissance vocale <xref:System.Speech.Recognition.Grammar> d’un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> et spécifiez un URI de base à utiliser pour résoudre les références de règle relative, utilisez le <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeur.  
  
   
  
## Examples  
 L’exemple suivant crée une grammaire de reconnaissance vocale dans un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> instance, ce qui est ensuite utilisé pour construire un <xref:System.Speech.Recognition.Grammar> objet.  
  
```csharp  
private static Grammar CreateSrgsDocumentGrammar()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Cities rule and add it to the document.  
  SrgsRule citiesRule = new SrgsRule("Cities");  
  
  SrgsOneOf cityChoice = new SrgsOneOf();  
  cityChoice.Add(new SrgsItem("Seattle"));  
  cityChoice.Add(new SrgsItem("Los Angeles"));  
  cityChoice.Add(new SrgsItem("New York"));  
  cityChoice.Add(new SrgsItem("Miami"));  
  
  citiesRule.Add(cityChoice);  
  document.Rules.Add(citiesRule);  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("I would like to fly from");  
  item.Add(new SrgsRuleRef(citiesRule));  
  item.Add(new SrgsText("to"));  
  item.Add(new SrgsRuleRef(citiesRule));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the Grammar object.  
  Grammar citiesGrammar = new Grammar(document);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar";  
  
  return citiesGrammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="srgsDocument" /> ne contient pas de règle racine.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> contient une référence de règle qui ne peut pas être résolue.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d'accès du fichier qui décrit une grammaire de la reconnaissance vocale dans un format pris en charge.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" /> à partir d'un fichier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur ne passe pas tous les paramètres au gestionnaire d’initialisation et la description ne doit pas définir un gestionnaire d’initialisation qui requiert des arguments.  
  
 Ce constructeur peut créer un <xref:System.Speech.Recognition.Grammar> instance à partir des formats suivants :  
  
-   Les fichiers au format XML qui se conforment à la W3C [spécification de grammaire de reconnaissance vocale (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammaires qui ont été compilés dans un fichier binaire avec une extension de fichier cfg  
  
 Ce constructeur compile les fichiers de grammaire au format XML dans un format binaire pour les optimiser pour le chargement et la consommation par un moteur de reconnaissance vocale. Vous pouvez réduire la quantité de temps nécessaire pour construire un <xref:System.Speech.Recognition.Grammar> objet à partir d’une grammaire au format XML en compilant la grammaire à l’avance, à l’aide d’un de le <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> méthodes.  
  
 Une grammaire SRGS peut définir une règle racine. Pour créer un <xref:System.Speech.Recognition.Grammar> de l’objet à partir d’une chaîne et que vous spécifiez une règle racine, utilisez la <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeur.  
  
 Pour créer un <xref:System.Speech.Recognition.Grammar> objet qui spécifie un URI de base à utiliser pour résoudre les références de règle relative, ouvrez le fichier dans un flux de fichier et l’utilisation du <xref:System.Speech.Recognition.Grammar.%23ctor%2A?displayProperty=nameWithType> constructeur.  
  
   
  
## Examples  
 L’exemple suivant charge une grammaire de reconnaissance vocale à partir d’un fichier SRGS local pour générer un <xref:System.Speech.Recognition.Grammar> objet. Le contenu du fichier cities.xml s’affiche dans l’exemple XML suivant l’exemple c#.  
  
```csharp  
// Load a cities grammar from a local file and  
// return the new grammar.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> contient la chaîne vide («»), ou le fichier décrit une syntaxe qui ne contient pas de règle racine.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Le fichier ne contient pas de description valide ou décrit une grammaire qui contient une référence de règle qui ne peut pas être résolue.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">Flux qui décrit une Grammaire de la Reconnaissance vocale dans un format pris en charge.</param>
        <param name="ruleName">Identificateur de la règle à utiliser comme point d'entrée de la grammaire de reconnaissance vocale, ou <see langword="null" /> pour utiliser la règle racine par défaut de la description grammaticale.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" /> à partir de <see cref="T:System.IO.Stream" /> et spécifie une règle racine.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur ne passe pas tous les paramètres au gestionnaire d’initialisation et la description ne doit pas définir un gestionnaire d’initialisation qui requiert des arguments.  
  
 Ce constructeur peut créer un <xref:System.Speech.Recognition.Grammar> instance à partir des formats suivants :  
  
-   Les fichiers au format XML qui se conforment à la W3C [spécification de grammaire de reconnaissance vocale (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammaires qui ont été compilés dans un fichier binaire avec une extension de fichier cfg  
  
 Ce constructeur compile les fichiers de grammaire au format XML dans un format binaire pour les optimiser pour le chargement et la consommation par un moteur de reconnaissance vocale. Vous pouvez réduire la quantité de temps nécessaire pour construire un <xref:System.Speech.Recognition.Grammar> objet à partir d’une grammaire au format XML en compilant la grammaire à l’avance, à l’aide d’un de le <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> méthodes.  
  
 Pour créer un <xref:System.Speech.Recognition.Grammar> à partir d’un flux de données et spécifier un URI de base à utiliser pour résoudre les références de règle relative, utilisez le <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeur.  
  
   
  
## Examples  
 L’exemple suivant charge un fichier SRGS local (cities.xml) à partir d’un flux de fichier et spécifie une règle à utiliser comme racine de la grammaire. Le contenu du fichier cities.xml s’affiche dans l’exemple XML suivant l’exemple c#.  
  
```csharp  
  
// Load a cities grammar from an I/O stream, use a specific  
// rule as the root of the grammar, and return the new grammar.   
private static Grammar CreateGrammarFromStream2()  
{  
  FileInfo file = new FileInfo(@"c:\temp\cities.xml");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), "Main");  
  citiesGrammar.Name = "Stream Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> ne peut pas être résolu ou n'est pas public, ou <paramref name="ruleName" /> est <see langword="null" /> et la description grammaticale ne définit aucune règle racine.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Le flux ne contient pas de description valide ou décrit une grammaire qui contient une référence de règle qui ne peut pas être résolue.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Contraintes pour la grammaire de reconnaissance vocale.</param>
        <param name="ruleName">Identificateur de la règle à utiliser comme point d'entrée de la grammaire de reconnaissance vocale, ou la valeur <see langword="null" /> pour utiliser la règle racine par défaut du <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Initialise une nouvelle instance d'une classe <see cref="T:System.Speech.Recognition.Grammar" /> à partir d'un objet <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> et spécifie une règle racine.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur ne passe pas tous les paramètres pour le Gestionnaire d’initialisation et le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> ne doit pas contenir un gestionnaire d’initialisation qui requiert des arguments.  
  
 Pour créer un <xref:System.Speech.Recognition.Grammar> à partir de l’objet un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> et spécifiez un URI de base à utiliser pour résoudre les références de règle relative, utilisez le <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeur.  
  
   
  
## Examples  
 L’exemple suivant crée une grammaire de reconnaissance vocale dans un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> de l’instance et spécifie une règle à utiliser comme règle racine de la grammaire. L’exemple construit une <xref:System.Speech.Recognition.Grammar> de l’objet à partir de la <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> de l’instance et les charge dans le moteur de reconnaissance vocale.  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create the SrgsDocument.  
        SrgsDocument document = new SrgsDocument();  
  
        // Create the Cities rule and add it to the document.  
        SrgsRule citiesRule = new SrgsRule("Cities");  
        citiesRule.Scope = SrgsRuleScope.Public;  
  
        SrgsOneOf cityChoice = new SrgsOneOf();  
        cityChoice.Add(new SrgsItem("Seattle"));  
        cityChoice.Add(new SrgsItem("Los Angeles"));  
        cityChoice.Add(new SrgsItem("New York"));  
        cityChoice.Add(new SrgsItem("Miami"));  
  
        citiesRule.Add(cityChoice);  
        document.Rules.Add(citiesRule);  
  
        // Create the Main rule and add it to the document.  
        SrgsRule mainRule = new SrgsRule("Main");  
        mainRule.Scope = SrgsRuleScope.Public;  
  
        mainRule.Add(new SrgsItem("I would like to fly from"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
        mainRule.Add(new SrgsItem("to"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
  
        document.Rules.Add(mainRule);  
  
        // Create the Grammar object and specify which rule to use as the root.  
        Grammar citiesGrammar = new Grammar(document,"Main");  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(citiesGrammar);  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting aynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> ne peut pas être résolu ou n'est pas public, ou <paramref name="ruleName" /> est <see langword="null" /> et <paramref name="srgsDocument" /> ne contient pas de règle racine.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> contient une référence de règle qui ne peut pas être résolue.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d'accès du fichier qui décrit une grammaire de la reconnaissance vocale dans un format pris en charge.</param>
        <param name="ruleName">Identificateur de la règle à utiliser comme point d'entrée de la grammaire de reconnaissance vocale, ou <see langword="null" /> pour utiliser la règle racine par défaut de la description grammaticale.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" /> à partir d'un fichier et spécifie une règle racine.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur ne passe pas tous les paramètres au gestionnaire d’initialisation et la description ne doit pas définir un gestionnaire d’initialisation qui requiert des arguments.  
  
 Ce constructeur peut créer un <xref:System.Speech.Recognition.Grammar> instance à partir des formats suivants :  
  
-   Les fichiers au format XML qui se conforment à la W3C [spécification de grammaire de reconnaissance vocale (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammaires qui ont été compilés dans un fichier binaire avec une extension de fichier cfg  
  
 Ce constructeur compile les fichiers de grammaire au format XML dans un format binaire pour les optimiser pour le chargement et la consommation par un moteur de reconnaissance vocale. Vous pouvez réduire la quantité de temps nécessaire pour construire un <xref:System.Speech.Recognition.Grammar> objet à partir d’une grammaire au format XML en compilant la grammaire à l’avance, à l’aide d’un de le <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> méthodes.  
  
 Pour créer un <xref:System.Speech.Recognition.Grammar> qui spécifie un URI de base à utiliser pour résoudre les références de règle relative, ouvre un flux de fichier pour le fichier et utiliser le <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeur.  
  
   
  
## Examples  
 L’exemple suivant charge un fichier SRGS local (cities.xml) à partir d’un fichier et spécifie une règle à utiliser comme racine de la grammaire. Le contenu du fichier cities.xml s’affiche dans l’exemple XML suivant l’exemple c#.  
  
```csharp  
  
// Load a cities grammar from a local file, use a specific  
// rule as the root of the grammar, and return the new grammar.  
private static Grammar CreateGrammarFromFile2()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml", "Main");  
  citiesGrammar.Name = "SRGS File Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> ne peut pas être résolu ou n'est pas public, <paramref name="path" /> est la chaîne vide ("") ou <paramref name="ruleName" /> est <see langword="null" /> et la description grammaticale ne définit aucune règle racine.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Le fichier ne contient pas de description valide ou décrit une grammaire qui contient une référence de règle qui ne peut pas être résolue.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> connecté à un objet d'entrée/de sortie (y compris les fichiers, ressources VisualStudio et DLL) qui contient une spécification de grammaire.</param>
        <param name="ruleName">Identificateur de la règle à utiliser comme point d'entrée de la grammaire de reconnaissance vocale, ou <see langword="null" /> pour utiliser la règle racine par défaut de la description grammaticale.</param>
        <param name="parameters">Paramètres à passer au gestionnaire d'initialisation spécifié par la propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> du point d'entrée ou la règle racine de <see cref="T:System.Speech.Recognition.Grammar" /> à créer. Ce paramètre peut avoir la valeur null.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" /> à partir de <see cref="T:System.IO.Stream" /> et spécifie une règle racine.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Paramètres pour un gestionnaire d’initialisation peuvent également être spécifiés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> est connecté à une syntaxe qui :  
  
-   Ne contient pas la règle spécifiée dans <paramref name="ruleName" />  
  
-   Requiert des paramètres d'initialisation différents de ceux spécifiés dans <paramref name="parameters" />  
  
-   Contient une référence de règle relative qui ne peut pas être résolue par la règle de base par défaut <see cref="T:System.Uri" /> pour les grammaires</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="stream">Flux qui décrit une Grammaire de la Reconnaissance vocale dans un format pris en charge.</param>
        <param name="ruleName">Identificateur de la règle à utiliser comme point d'entrée de la grammaire de reconnaissance vocale, ou <see langword="null" /> pour utiliser la règle racine par défaut de la description grammaticale.</param>
        <param name="baseUri">URI de base à utiliser pour résoudre toute référence e règle relative dans la description de syntaxe ou <see langword="null" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" /> à partir d'un flux, spécifie une règle racine et définit un URI (Uniform Resource Identifier) de base pour résoudre les références de règles relatives.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur ne passe pas tous les paramètres au gestionnaire d’initialisation et la description ne doit pas définir un gestionnaire d’initialisation qui requiert des arguments.  
  
 Ce constructeur peut créer un <xref:System.Speech.Recognition.Grammar> instance à partir des formats suivants :  
  
-   Les fichiers au format XML qui se conforment à la W3C [spécification de grammaire de reconnaissance vocale (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammaires qui ont été compilés dans un fichier binaire avec une extension de fichier cfg  
  
 Ce constructeur compile les fichiers de grammaire au format XML dans un format binaire pour les optimiser pour le chargement et la consommation par un moteur de reconnaissance vocale. Vous pouvez réduire la quantité de temps nécessaire pour construire un <xref:System.Speech.Recognition.Grammar> objet à partir d’une grammaire au format XML en compilant la grammaire à l’avance, à l’aide d’un de le <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> méthodes.  
  
 Ce constructeur ne valide pas `baseUri`. Toutefois, le `LoadGrammar` méthode d’un <xref:System.Speech.Recognition.SpeechRecognitionEngine> ou <xref:System.Speech.Recognition.SpeechRecognizer> objet lève une exception si elle ne peut pas résoudre toutes les références de règle dans la description de la grammaire. Si `baseUri` n’est pas `null`, le `LoadGrammar` méthode utilise l’URI à résoudre toutes les références de règle qu’il ne peut pas résoudre dans le cas contraire. Si `baseUri` représente un fichier, puis le `LoadGrammar` utilise le fichier désigné et le répertoire du fichier lorsqu’il tente de résoudre les références de règle relative.  
  
   
  
## Examples  
 L’exemple suivant charge un fichier SRGS local (shuttle.xml) à partir d’un flux de fichier. Le fichier contient une référence de règle relative à une règle dans le fichier cities.xml et spécifie un URI de base à utiliser pour résoudre la référence de règle. Le contenu des fichiers shuttle.xml et cities.xml s’affiche dans les exemples XML qui suivent l’exemple c#.  
  
```csharp  
  
private static Grammar CreateGrammarFromStream3()  
{  
  FileInfo file = new FileInfo(@".\shuttle.xml");  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), null, baseUri);  
  citiesGrammar.Name = "Stream Cities Grammar 3";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- shuttle.xml:   
    Defines an SRGS grammar for asking about a shuttle service. This grammar  
    references a Cities rule that is defined in the cities.xml grammar. -->  
  
  <rule id="Main">  
    <item>  
      Can I get a shuttle in  
      <ruleref uri="cities.xml#Cities"/>  
    </item>  
  </rule>  
</grammar>  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> ne peut pas être résolu ou n'est pas public, ou <paramref name="ruleName" /> est <see langword="null" /> et la description grammaticale ne définit aucune règle racine.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Le flux ne contient pas de description valide ou décrit une grammaire qui contient une référence de règle qui ne peut pas être résolue.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Instance de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> qui contient les contraintes de la syntaxe de reconnaissance vocale.</param>
        <param name="ruleName">Identificateur de la règle à utiliser comme point d'entrée de la grammaire de reconnaissance vocale, ou <see langword="null" /> pour utiliser la règle racine par défaut de la description grammaticale.</param>
        <param name="parameters">Paramètres à passer au gestionnaire d'initialisation spécifié par la propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> du point d'entrée ou la règle racine de <see cref="T:System.Speech.Recognition.Grammar" /> à créer. Ce paramètre peut avoir la valeur null.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" /> d'une instance de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, puis spécifie le nom d'une règle comme point d'entrée de la grammaire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Paramètres pour un gestionnaire d’initialisation peuvent également être spécifiés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   L'un des paramètres contient une valeur non valide.  
  
-   Le <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> spécifié par <paramref name="srgsDocument" /> ne contient pas la règle spécifiée par <paramref name="ruleName" />.  
  
-   Le contenu des paramètres du tableau ne correspondent pas aux arguments des gestionnaires d'initialisation de la règle.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Contraintes pour la grammaire de reconnaissance vocale.</param>
        <param name="ruleName">Identificateur de la règle à utiliser comme point d'entrée de la grammaire de reconnaissance vocale, ou la valeur <see langword="null" /> pour utiliser la règle racine par défaut du <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <param name="baseUri">URI de base à utiliser pour résoudre toute référence de règle relative dans <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> ou <see langword="null" />.</param>
        <summary>Initialise une nouvelle instance d'une classe <see cref="T:System.Speech.Recognition.Grammar" /> à partir d'un objet <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, spécifie une règle racine et définit un URI (Uniform Resource Identifier) de base pour résoudre les références de règles relatives.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur ne passe pas tous les paramètres pour le Gestionnaire d’initialisation et le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> ne doit pas contenir un gestionnaire d’initialisation qui requiert des arguments.  
  
 Ce constructeur ne valide pas `baseUri`. Toutefois, le `LoadGrammar` méthode d’un <xref:System.Speech.Recognition.SpeechRecognitionEngine> ou <xref:System.Speech.Recognition.SpeechRecognizer> objet lève une exception si elle ne peut pas résoudre toutes les références de règle dans la description de la grammaire. Si `baseUri` n’est pas `null`, le `LoadGrammar` méthode utilise l’URI à résoudre toutes les références de règle qu’il ne peut pas résoudre dans le cas contraire. Si `baseUri` représente un fichier, puis le `LoadGrammar` méthode utilise le fichier désigné et le répertoire du fichier lorsqu’il tente de résoudre les références de règle relative.  
  
   
  
## Examples  
 L’exemple suivant crée une grammaire de reconnaissance vocale dans un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> qui contient une référence de règle relative au fichier cities.xml et spécifie un URI à utiliser pour résoudre la référence de règle. Le contenu du fichier cities.xml s’affiche dans l’exemple XML suivant l’exemple c#.  
  
```csharp  
  
private static Grammar CreateSrgsDocumentGrammar3()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("Can I get a shuttle in");  
  
  // Create a relative URI for the cities rule.  
  Uri ruleUri = new Uri("cities.xml#Cities", UriKind.Relative);  
  
  item.Add(new SrgsRuleRef(ruleUri));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the grammar.  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(document, null, baseUri);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar 3";  
  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> ne peut pas être résolu ou n'est pas public, ou <paramref name="ruleName" /> est <see langword="null" /> et <paramref name="srgsDocument" /> ne contient pas de règle racine.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> contient une référence de règle qui ne peut pas être résolue.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d'accès vers un fichier, y compris les DLL, qui contient une spécification de syntaxe.</param>
        <param name="ruleName">Identificateur de la règle à utiliser comme point d'entrée de la grammaire de reconnaissance vocale, ou <see langword="null" /> pour utiliser la règle racine par défaut de la description grammaticale.</param>
        <param name="parameters">Paramètres à passer au gestionnaire d'initialisation spécifié par la propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> du point d'entrée ou la règle racine de <see cref="T:System.Speech.Recognition.Grammar" /> à créer. Ce paramètre peut avoir la valeur null.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" /> à partir d'un fichier qui contient une définition de grammaire et spécifie le nom d'une règle comme point d'entrée de la grammaire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Paramètres pour un gestionnaire d’initialisation peuvent également être spécifiés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   L'un des paramètres contient une valeur non valide.  
  
-   Le fichier spécifié par <paramref name="path" /> ne contient pas de grammaire valide ou la règle spécifiée dans <paramref name="ruleName" />.  
  
-   Le contenu des paramètres du tableau ne correspondent pas aux arguments des gestionnaires d'initialisation de la règle.  
  
-   La grammaire a une référence de règle relative qui ne peut pas être résolue par la règle de base <see cref="T:System.Uri" /> par défaut pour les grammaires.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> connecté à un objet d'entrée/de sortie (y compris les fichiers, ressources VisualStudio et DLL) qui contient une spécification de grammaire.</param>
        <param name="ruleName">Identificateur de la règle à utiliser comme point d'entrée de la grammaire de reconnaissance vocale, ou <see langword="null" /> pour utiliser la règle racine par défaut de la description grammaticale.</param>
        <param name="baseUri">URI de base à utiliser pour résoudre toute référence e règle relative dans la description de syntaxe ou <see langword="null" />.</param>
        <param name="parameters">Paramètres à passer au gestionnaire d'initialisation spécifié par la propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> du point d'entrée ou la règle racine de <see cref="T:System.Speech.Recognition.Grammar" /> à créer. Ce paramètre peut avoir la valeur null.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" /> à partir d’une classe <see cref="T:System.IO.Stream" />, et spécifie une règle racine et un URI de base pour résoudre les références relatives.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Paramètres pour un gestionnaire d’initialisation peuvent également être spécifiés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   L'un des paramètres contient une valeur non valide.  
  
-   <paramref name="stream" /> est connecté à une syntaxe qui ne contient pas la règle spécifiée par <paramref name="ruleName" />.  
  
-   Le contenu des paramètres du tableau ne correspondent pas aux arguments des gestionnaires d'initialisation de la règle.  
  
-   La grammaire contient une référence de règle relative qui ne peut pas être résolue par la règle de base <see cref="T:System.Uri" /> par défaut pour les grammaires ou l'URI fournie par <paramref name="baseUri" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Instance de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> qui contient les contraintes de la syntaxe de reconnaissance vocale.</param>
        <param name="ruleName">Identificateur de la règle à utiliser comme point d'entrée de la grammaire de reconnaissance vocale, ou <see langword="null" /> pour utiliser la règle racine par défaut de la description grammaticale.</param>
        <param name="baseUri">URI de base à utiliser pour résoudre toute référence e règle relative dans la description de syntaxe ou <see langword="null" />.</param>
        <param name="parameters">Paramètres à passer au gestionnaire d'initialisation spécifié par la propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> du point d'entrée ou la règle racine de <see cref="T:System.Speech.Recognition.Grammar" /> à créer. Ce paramètre peut être Null.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.Grammar" /> d'une instance de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, puis spécifie le nom d'une règle comme point d'entrée de la grammaire et un URI de base pour résoudre les références relatives.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Paramètres pour un gestionnaire d’initialisation peuvent également être spécifiés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   L'un des paramètres contient une valeur non valide.  
  
-   Le <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> spécifié par <paramref name="srgsDocument" /> ne contient pas la règle spécifiée dans <paramref name="ruleName" />.  
  
-   Le contenu des paramètres du tableau ne correspondent pas aux arguments des gestionnaires d'initialisation de la règle.  
  
-   La grammaire a une référence de règle relative qui ne peut pas être résolue par la règle de base <see cref="T:System.Uri" /> par défaut pour les grammaires ou l'URI fournie par <paramref name="baseUri" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui contrôle si <see cref="T:System.Speech.Recognition.Grammar" /> peut être utilisée par un module de reconnaissance vocale pour effectuer la reconnaissance.</summary>
        <value>Le <see langword="Enabled" /> propriété renvoie <see langword="true" /> si un module de reconnaissance vocale peut effectuer la reconnaissance à l’aide de la grammaire de reconnaissance vocale ; sinon, la propriété retourne <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une instance de <xref:System.Speech.Recognition.Grammar> peut être activé ou désactivé indépendamment chargés par un moteur de reconnaissance vocale.  
  
   
  
## Examples  
 L’exemple suivant écrit des informations sur un <xref:System.Speech.Recognition.Grammar> de l’objet à la [console](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="IsStg">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsStg { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStg" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.IsStg" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property IsStg As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool IsStg { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si une grammaire est fortement typée.</summary>
        <value>La propriété <see langword="IsStg" /> retourne <see langword="true" /> si la syntaxe est fortement typée ; sinon la propriété retourne la valeur <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fortement typé <xref:System.Speech.Recognition.Grammar> objet (`IsStg` est égal à `true`) peut retourner des résultats fortement typés (objets, plutôt que du texte brut) à une application cliente. Par exemple, une grammaire fortement typé peut retourner <xref:System.DateTime> plutôt que de l’entrée reconnue brute des objets.  
  
 Vous pouvez implémenter fortement typée de grammaires en attachant le code pour les règles d’une grammaire. Un moteur de reconnaissance traite une règle donnée, prise comme entrée les résultats partiels en cours, le code associé est exécuté et les informations textuelles devient des objets de type riche. Cela permet à un client pour plus facilement utiliser de vérification de la sémantique améliorée, la prise en charge pour plusieurs cultures et la logique de grammaire interne.  
  
 Instances de fortement typée <xref:System.Speech.Recognition.Grammar> les objets sont généralement obtenus à partir des ressources dans un assembly en tant qu’un <xref:System.Type> du Common Language Runtime (CLR). Les types localisées utilisés pour prendre en charge différentes langues sont des exemples de ces <xref:System.Speech.Recognition.Grammar> objets.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Les grammaires fortement typée héritant de <see cref="T:System.Speech.Recognition.Grammar" /> besoin de remplacer le comportement par défaut de <see langword="IsStg" />, qui est de retourner <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public bool Loaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Loaded" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Loaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Loaded { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si <see cref="T:System.Speech.Recognition.Grammar" /> a été chargé par un module de reconnaissance vocale.</summary>
        <value>La propriété <see langword="Loaded" /> retourne la valeur <see langword="true" /> si la grammaire de reconnaissance vocale référencée est actuellement chargée dans un module de reconnaissance vocale ; sinon, la propriété retourne <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une fois un <xref:System.Speech.Recognition.Grammar> a été chargé, les valeurs de <xref:System.Speech.Recognition.Grammar.Weight%2A>, et <xref:System.Speech.Recognition.Grammar.Priority%2A> ne peut pas être modifié.  
  
   
  
## Examples  
 L’exemple suivant écrit des informations sur un <xref:System.Speech.Recognition.Grammar> de l’objet à la [console](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="LoadLocalizedGrammarFromType">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType (Type type, params object[] onInitParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType(class System.Type type, object[] onInitParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::Grammar ^ LoadLocalizedGrammarFromType(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ onInitParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="onInitParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">Dans un assembly, <see cref="T:System.Type" /> d'un objet basé sur <see cref="T:System.Speech.Recognition.Grammar" />.</param>
        <param name="onInitParameters">Paramètres à passer à une méthode d'initialisation du localizedobject en fonction de <see cref="T:System.Speech.Recognition.Grammar" />. Ce paramètre peut avoir la valeur null.</param>
        <summary>La méthode <see langword="LoadLocalizedGrammarFromType" /> retourne une instance localisée d'un objet <see cref="T:System.Speech.Recognition.Grammar" /> dérivé du <see cref="T:System.Type" />.</summary>
        <returns>La méthode <see langword="LoadLocalizedGrammarFromType" /> retourne un objet valide basé sur la <see cref="T:System.Speech.Recognition.Grammar" />, ou la valeur <see langword="null" /> s'il y avait une erreur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Localisée grammaires obtenus avec `LoadLocalizedGrammarFromType` sont en général fortement typée (voir <xref:System.Speech.Recognition.Grammar.IsStg%2A> pour plus d’informations sur les grammaires fortement typés). Si `onInitParameters` est une référence null (Nothing en Visual Basic) à la version localisée grammaire doit avoir aucune méthode d’initialisation, ou une méthode qui n’accepte aucun argument.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom d'un objet <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>La propriété <see langword="Name" /> retourne le nom de l'objet <see cref="T:System.Speech.Recognition.Grammar" />. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée deux <xref:System.Speech.Recognition.Grammar> objets, un pour les chiffres et un pour les fractions. Les objets de la grammaire sont affectés des noms et des poids relatif de priorités et chargés par un module de reconnaissance vocale de dans le processus. Le `CreateDigitsGrammar`, `CreateFractionsGrammar`, et `recognizer_SpeechRecognized` méthodes ne sont pas affichés ici.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur de priorité d'un objet <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>La propriété <see langword="Priority" /> retourne une valeur entière qui représente la priorité relative d'une <see cref="T:System.Speech.Recognition.Grammar" /> spécifique. La plage va de -128 à 127 inclus. La valeur par défaut est 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Priority` propriété permet de sélectionner une grammaire lorsque plusieurs grammaire produira un résultat de la reconnaissance identiques. Si un module de reconnaissance vocale a plusieurs reconnaissance grammaire vocale chargés et activés qui correspondent à l’entrée, la correspondance est le meilleur résultat dans le module de reconnaissance, puis le module de reconnaissance utilise la grammaire qui a le plus élevé `Priority`. Si les grammaires qui produisent le résultat de la reconnaissance identiques également ont le même `Priority` valeur, puis la grammaire par le module de reconnaissance n’est pas définie.  
  
   
  
## Examples  
 L’exemple suivant crée deux <xref:System.Speech.Recognition.Grammar> objets, un pour les chiffres et un pour les fractions. Le <xref:System.Speech.Recognition.Grammar> les objets sont affectés de noms et poids relatifs des priorités et chargés par un module de reconnaissance vocale de dans le processus. Le `CreateDigitsGrammar`, `CreateFractionsGrammar`, et `recognizer_SpeechRecognized` méthodes ne sont pas affichés ici.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Weight" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="ResourceName">
      <MemberSignature Language="C#" Value="protected string ResourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.ResourceName" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ResourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur avec le nom d'une ressource binaire utilisée pour charger la <see cref="T:System.Speech.Recognition.Grammar" />actuelle.</summary>
        <value>La propriété <see langword="ResourceName" /> retourne le nom de la ressource binaire à partir de laquelle la grammaire fortement typée, utilisée par <see cref="T:System.Speech.Recognition.Grammar" />, a été chargée.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuleName">
      <MemberSignature Language="C#" Value="public string RuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RuleName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.RuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RuleName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de la règle racine ou du point d'entrée d'un objet <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>La propriété <see langword="RuleName" /> retourne l'identificateur de la règle racine de la syntaxe de reconnaissance vocale référencée. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour construire un <xref:System.Speech.Recognition.Grammar> de l’objet et définir le nom de sa règle racine, utilisez une de la <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructeurs qui prend le `ruleName` paramètre.  
  
 Si la règle racine d’un <xref:System.Speech.Recognition.Grammar> a pas de nom de la propriété retourne `null`.  
  
 Les règles de la racine de <xref:System.Speech.Recognition.Grammar> instances construites à partir de <xref:System.Speech.Recognition.GrammarBuilder> objets n’ont en général aucun nom, par conséquent, <xref:System.Speech.Recognition.Grammar.RuleName%2A> retourne `null`.  
  
   
  
## Examples  
 L’exemple suivant écrit des informations sur un <xref:System.Speech.Recognition.Grammar> de l’objet à la [console](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Déclenché lorsqu'un module de reconnaissance vocale exécute la reconnaissance à l'aide de l'objet <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le module de reconnaissance vocale déclenche également un `SpeechRecognized` événement lorsqu’il reconnaît l’entrée. Le <xref:System.Speech.Recognition.Grammar> l’objet <xref:System.Speech.Recognition.Grammar.SpeechRecognized> événement est déclenché avant le module de reconnaissance vocale `SpeechRecognized` événement. Pour plus d’informations, consultez la <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, et <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> événements.  
  
 Toutes les tâches spécifiques à une grammaire particulière doivent toujours être traités par des gestionnaires pour les <xref:System.Speech.Recognition.Grammar> l’objet <xref:System.Speech.Recognition.Grammar.SpeechRecognized> événement.  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation d’un gestionnaire d’événements pour le <xref:System.Speech.Recognition.Grammar> l’objet <xref:System.Speech.Recognition.Grammar.SpeechRecognized> événement. Il génère des résultats de la reconnaissance à le [console](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
public partial class Form1 : Form  
{  
  SpeechRecognitionEngine sre;  
  
  public Form1()  
  {  
  InitializeComponent();  
  
  // Create an in-process speech recognizer.  
  sre = new SpeechRecognitionEngine();  
  
  // Configure input to the speech recognizer.  
  sre.SetInputToDefaultAudioDevice();  
  
  // Create a simple grammar and load it.  
  Grammar testGrammar = new Grammar(new GrammarBuilder("testing"));  
  sre.LoadGrammarAsync(testGrammar);  
  
  // Add a handler for the grammar's speech recognized event.  
  testGrammar.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(testGrammar_SpeechRecognized);  
  
  // Start asynchronous speech recognition.  
  sre.RecognizeAsync();  
  }  
  
  // Handle the grammar's SpeechRecognized event, output the recognized text.  
  void testGrammar_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
  {  
    Console.WriteLine("Recognized text: " + e.Result.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="StgInit">
      <MemberSignature Language="C#" Value="protected void StgInit (object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void StgInit(object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub StgInit (parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void StgInit(cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="parameters">Paramètres à passer pour initialiser la syntaxe fortement typée. Ce paramètre peut être Null.</param>
        <summary>La méthode <see langword="StgInit" /> initialise une syntaxe fortement typée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fortement typé <xref:System.Speech.Recognition.Grammar> objet (`IsStg` est égal à `true`) peut retourner des résultats fortement typés (objets, plutôt que du texte brut) à une application cliente. Par exemple, une grammaire fortement typé peut retourner <xref:System.DateTime> plutôt que de l’entrée reconnue brute des objets.  
  
 Vous pouvez implémenter fortement typée de grammaires en attachant le code pour les règles d’une grammaire. Un moteur de reconnaissance traite une règle donnée, prise comme entrée les résultats partiels en cours, le code associé est exécuté et les informations textuelles devient des objets de type riche. Cela permet à un client pour plus facilement utiliser de vérification de la sémantique améliorée, la prise en charge pour plusieurs cultures et la logique de grammaire interne.  
  
 Instances de fortement typée <xref:System.Speech.Recognition.Grammar> les objets sont généralement obtenus à partir des ressources dans un assembly en tant qu’un <xref:System.Type> du Common Language Runtime (CLR). Les types localisées utilisés pour prendre en charge différentes langues sont des exemples de ces <xref:System.Speech.Recognition.Grammar> objets.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si une grammaire fortement typée nécessite l’initialisation, <see langword="StgInit" /> doit être appelé dans un constructeur ou une méthode d’initialisation.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Weight">
      <MemberSignature Language="C#" Value="public float Weight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Weight" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Weight" />
      <MemberSignature Language="VB.NET" Value="Public Property Weight As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Weight { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur pondérée d'un objet <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>La <see langword="Weight" /> retourne de propriété qui indique le poids relatif une instance du moteur de reconnaissance doit affecter à la grammaire lors du traitement de reconnaissance vocale d’entrée de valeur à virgule flottante. La plage est comprise entre 0,0 et 1,0 inclus. La valeur par défaut est 1,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En raison de la complexité de l’utilisation d’un moteur de reconnaissance de **poids**, son effet sur les performances d’une grammaire particulière n’est pas directement prévisible que celui de <xref:System.Speech.Recognition.Grammar.Priority%2A>.  
  
 La reconnaissance vocale est un système pondéré. Il évalue tous les chemins de reconnaissance possibles selon une combinaison de l’épaisseur de la grammaire, les poids définis pour les solutions au sein de la grammaire et les probabilités définies par les modèles de reconnaissance vocale. Le moteur de reconnaissance vocale utilise la combinaison de ces poids et les probabilités de rangs potentiels reconnaissances de remplacement. Les grammaires avec des poids plus élevés contribuera plus au classement des alternatives de reconnaissance de grammaires avec un poids inférieur.  
  
 L’effet de la <xref:System.Speech.Recognition.Grammar.Weight%2A> propriété sur un module de reconnaissance vocale dépend de l’implémentation de la reconnaissance. Bien que le <xref:System.Speech.Recognition.Grammar.Weight%2A> propriété peut être utilisée pour régler la précision de la reconnaissance vocale pour une application, il doit être utilisé uniquement après avoir contrôlé étude d’un environnement particulier reconnaissance et avec des informations complètes sur le moteur de reconnaissance de diagnostic sous utilisation.  
  
   
  
## Examples  
 L’exemple suivant crée deux <xref:System.Speech.Recognition.Grammar> objets, un pour les chiffres et un pour les fractions. Le <xref:System.Speech.Recognition.Grammar> les objets sont affectés de noms et poids relatifs des priorités et chargés par un module de reconnaissance vocale de dans le processus. Le `CreateDigitsGrammar`, `CreateFractionsGrammar`, et `recognizer_SpeechRecognized` méthodes ne sont pas affichés ici.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Priority" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
  </Members>
</Type>