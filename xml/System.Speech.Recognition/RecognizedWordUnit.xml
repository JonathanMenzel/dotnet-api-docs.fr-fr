<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f52412e8d631d8da24af54bf1fab76a8bf4d7163" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52379776" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cb3f3-101">Fournit l'unité atomique de discours identifié.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-101">Provides the atomic unit of recognized speech.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb3f3-102">Tous les résultats retournés par un moteur de reconnaissance sont construites de <xref:System.Speech.Recognition.RecognizedWordUnit> objets.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-102">All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span>  
  
 <span data-ttu-id="cb3f3-103">Un tableau de <xref:System.Speech.Recognition.RecognizedWordUnit> objets est accessible pour toute opération de reconnaissance par le biais du <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriété sur le <xref:System.Speech.Recognition.RecognizedPhrase> objet.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-103">An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
 <span data-ttu-id="cb3f3-104">En plus de fournir une mesure de certitude de reconnaissance (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) un <xref:System.Speech.Recognition.RecognizedWordUnit> instance fournit :</span><span class="sxs-lookup"><span data-stu-id="cb3f3-104">In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:</span></span>  
  
-   <span data-ttu-id="cb3f3-105">Représentations sous forme de texte normalisée et exacte (ou de lexicale) pour un mot reconnu.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-105">Normalized and exact (or lexical) text representations for a recognized word.</span></span> <span data-ttu-id="cb3f3-106">Pour plus d'informations, consultez <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> et <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-106">For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span></span>  
  
-   <span data-ttu-id="cb3f3-107">Informations de prononciation à l’aide de caractères à partir d’un alphabet phonétique pris en charge, tels que l’Alphabet phonétique International (IPA) ou la valeur de téléphone universelle (UPS).</span><span class="sxs-lookup"><span data-stu-id="cb3f3-107">Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span> <span data-ttu-id="cb3f3-108">Pour plus d’informations, consultez <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-108">For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span></span>  
  
-   <span data-ttu-id="cb3f3-109">Mise en forme pour l’impression.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-109">Formatting for printing.</span></span> <span data-ttu-id="cb3f3-110">Pour plus d’informations, consultez le <xref:System.Speech.Recognition.DisplayAttributes> classe et ses <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-110">For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb3f3-111">L’exemple suivant montre une routine d’utilitaire (`stringFromWordArray`) qui génère des chaînes.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-111">The following example shows a utility routine (`stringFromWordArray`) that generates strings.</span></span> <span data-ttu-id="cb3f3-112">Les chaînes contiennent la sortie lexicale (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalisé de texte (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), ou les caractères phonétiques à partir de l’Alphabet phonétique International (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="cb3f3-112">The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="cb3f3-113">Chaînes sont mises en forme à l’aide de <xref:System.Speech.Recognition.DisplayAttributes> objets obtenus à partir de la <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriété à partir d’un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objets.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-113">Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="cb3f3-114">Le <xref:System.Speech.Recognition.RecognizedWordUnit> les objets sont obtenus à partir de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriété sur le <xref:System.Speech.Recognition.RecognizedPhrase> objet.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-114">The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="cb3f3-115">Texte normalisé pour un mot reconnu.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-115">The normalized text for a recognized word.</span></span>  
  
<span data-ttu-id="cb3f3-116">Cette valeur peut être <see langword="null" />, "" ou <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-116">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="confidence"><span data-ttu-id="cb3f3-117">Valeur <see langword="float" /> allant de 0 à 1 qui indique la certitude de la reconnaissance du mot.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-117">A <see langword="float" /> value from 0.0 through 1.0 indicating the certainty of word recognition.</span></span></param>
        <param name="pronunciation"><span data-ttu-id="cb3f3-118">Orthographe phonétique d'un mot reconnu.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-118">The phonetic spelling of a recognized word.</span></span>  
  
<span data-ttu-id="cb3f3-119">Cette valeur peut être <see langword="null" />, "" ou <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-119">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="lexicalForm"><span data-ttu-id="cb3f3-120">Texte non normalisé pour un mot reconnu.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-120">The unnormalized text for a recognized word.</span></span>  
  
<span data-ttu-id="cb3f3-121">Cet argument est requis et peut ne pas être <see langword="null" />, "", ou <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-121">This argument is required and may not be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="displayAttributes"><span data-ttu-id="cb3f3-122">Définit l'utilisation de l'espace blanc pour l'affichage des mots identifiés.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-122">Defines the use of white space to display recognized words.</span></span></param>
        <param name="audioPosition"><span data-ttu-id="cb3f3-123">Emplacement du mot reconnu dans le flux d'entrée audio.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-123">The location of the recognized word in the audio input stream.</span></span>  
  
<span data-ttu-id="cb3f3-124">Cette valeur peut être <see cref="F:System.TimeSpan.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-124">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <param name="audioDuration"><span data-ttu-id="cb3f3-125">Longueur de l'entrée audio correspondant au mot reconnu.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-125">The length of the audio input corresponding to the recognized word.</span></span>  
  
<span data-ttu-id="cb3f3-126">Cette valeur peut être <see cref="F:System.TimeSpan.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-126">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <summary><span data-ttu-id="cb3f3-127">Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-127">Initializes a new instance of the <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb3f3-128">Si `text` ou `pronunciation` sont `null`, « », ou <xref:System.String.Empty> et <xref:System.Speech.Recognition.RecognizedWordUnit> est utilisé dans une opération de reconnaissance, le moteur de reconnaissance générera les valeurs appropriées dans toute sortie <xref:System.Speech.Recognition.RecognizedWordUnit> instance.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-128">If `text` or `pronunciation` are `null`, "", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.</span></span>  
  
 <span data-ttu-id="cb3f3-129">Diriger la construction de <xref:System.Speech.Recognition.RecognizedWordUnit> instances est généralement utilisé uniquement pour l’émulation des opérations de reconnaissance à l’aide de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> méthodes de la <xref:System.Speech.Recognition.SpeechRecognitionEngine> classe et le <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> ou <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> méthodes de la <xref:System.Speech.Recognition.SpeechRecognizer> classe.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-129">Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="cb3f3-130">Pour les applications réelles, ne construisez pas de directement <xref:System.Speech.Recognition.RecognizedWordUnit>, plutôt l’obtenir via le <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriété sur le <xref:System.Speech.Recognition.RecognizedPhrase> objet.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-130">For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb3f3-131">L’exemple suivant est un test quelque peu fictif d’émulation, où nouveaux mots sont générés à partir de l’entrée passés à l’émulateur et ensuite vérifiés.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-131">The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.</span></span>  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363"><span data-ttu-id="cb3f3-132">Alphabet phonétique international</span><span class="sxs-lookup"><span data-stu-id="cb3f3-132">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb3f3-133">Obtient une valeur, assignée par le module de reconnaissance, qui représente la probabilité qu'un mot reconnu corresponde à une entrée donnée.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-133">Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.</span></span></summary>
        <value><span data-ttu-id="cb3f3-134">Mesure relative de la certitude de la reconnaissance correcte d'un mot.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-134">A relative measure of the certainty of correct recognition for a word.</span></span> <span data-ttu-id="cb3f3-135">La valeur va de 0,0 à 1,0, correspondant respectivement à la confiance faible et élevée.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-135">The value is from 0.0 to 1.0, for low to high confidence, respectively.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb3f3-136">Scores de confiance n’indiquent pas la probabilité absolue qu’un mot a été correctement reconnu.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-136">Confidence scores do not indicate the absolute likelihood that a word was recognized correctly.</span></span> <span data-ttu-id="cb3f3-137">Au lieu de cela, les scores de confiance fournissent un mécanisme pour comparer la précision relative de plusieurs variantes de reconnaissance pour une entrée donnée.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-137">Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input.</span></span> <span data-ttu-id="cb3f3-138">Cela facilite le retour du résultat de reconnaissance plus précis.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-138">This facilitates returning the most accurate recognition result.</span></span> <span data-ttu-id="cb3f3-139">Par exemple, si un mot reconnu a un score de confiance de 0,8, cela ne signifie pas que le mot a une 80 % de chance d’être la correspondance correcte pour l’entrée.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-139">For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.</span></span>  <span data-ttu-id="cb3f3-140">Cela signifie que le mot est plus susceptible d’être la correspondance correcte pour l’entrée à d’autres résultats qui ont confiance scores inférieure à 0,8.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-140">It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.</span></span>  
  
 <span data-ttu-id="cb3f3-141">Un score de confiance en soi n’est pas significatif, sauf si vous avez d’autres résultats à comparer à partir de la même opération de reconnaissance ou reconnaissances précédentes de la même entrée.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-141">A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.</span></span>  
  
 <span data-ttu-id="cb3f3-142">Les valeurs retournées par <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> sont relatif et uniques pour chaque moteur de reconnaissance.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-142">The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine.</span></span> <span data-ttu-id="cb3f3-143">Il n’existe aucune définition de comparer des valeurs de confiance entre deux moteurs de reconnaissance différents, ni comment le <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> d’individu <xref:System.Speech.Recognition.RecognizedWordUnit> des objets qui définissent le <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> d’un <xref:System.Speech.Recognition.RecognizedPhrase>.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-143">There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="cb3f3-144">Un moteur de reconnaissance vocale peut affecter un score de confiance faible pour l’entrée parlée pour différentes raisons, notamment des interférences d’arrière-plan, inarticulate vocale, ou mots imprévues ou séquences de word.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-144">A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences.</span></span> <span data-ttu-id="cb3f3-145">Si votre application utilise un <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, vous pouvez modifier le niveau de confiance à quels vocale entrée est acceptée ou rejetée avec l’un de le <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-145">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="cb3f3-146">Seuils de niveau de confiance pour le module de reconnaissance partagé, géré par <xref:System.Speech.Recognition.SpeechRecognizer>, sont associés à un profil utilisateur et stocké dans le Registre Windows.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-146">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="cb3f3-147">Les applications ne doivent pas écrire de modifications dans le Registre pour les propriétés du module de reconnaissance partagée.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-147">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb3f3-148">Obtient les informations de mise en forme utilisée pour créer la sortie de texte de l'instance actuelle de <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-148">Gets formatting information used to create the text output from the current <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> instance.</span></span></summary>
        <value><span data-ttu-id="cb3f3-149">Spécifie l'utilisation de l'espace blanc dans l'affichage du contenu d'un objet <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-149">Specifies the use of white space to display of the contents of a <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb3f3-150">Le <xref:System.Speech.Recognition.DisplayAttributes> objet retourné par la <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriété spécifie les espaces de début et de fin pour être utilisé avec un mot donné, le cas échéant.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-150">The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.</span></span>  
  
 <span data-ttu-id="cb3f3-151">Pour plus d’informations sur la façon d’utiliser ces informations de mise en forme, consultez la <xref:System.Speech.Recognition.DisplayAttributes> énumération.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-151">For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb3f3-152">L’exemple suivant montre une routine d’utilitaire (`stringFromWordArray`) qui génère une chaîne qui est mise en forme de trois manières : lexicalement (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalisé (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), ou phonétiquement (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="cb3f3-152">The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="cb3f3-153">La sortie de texte est obtenue à partir de la <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriété sur un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objets obtenu à partir de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriété sur un <xref:System.Speech.Recognition.RecognizedPhrase> objet.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-153">The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb3f3-154">Obtient le texte non normalisé d'un mot reconnu.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-154">Gets the unnormalized text of a recognized word.</span></span></summary>
        <value><span data-ttu-id="cb3f3-155">Retourne une <see cref="T:System.String" /> contenant le texte d'un mot reconnu, sans aucune normalisation.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-155">Returns a <see cref="T:System.String" /> containing the text of a recognized word, without any normalization.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb3f3-156">Dans la plupart des cas, les valeurs retournées par <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> et <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> sont identiques.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-156">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical.</span></span> <span data-ttu-id="cb3f3-157">Toutefois, moteurs de reconnaissance peuvent utiliser la normalisation de reconnaissance vocale pour retourner les représentations textuelles plus conviviale ou parties de l’entrée audio.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-157">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="cb3f3-158">Normalisation de reconnaissance vocale est l’utilisation de constructions particulières ou des symboles pour exprimer la reconnaissance vocale dans l’écriture.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-158">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="cb3f3-159">Par exemple, la normalisation peut remplacer les mots « un dollar et seize cents » avec « $1.16 » dans le texte de sortie.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-159">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb3f3-160">L’exemple suivant montre une routine d’utilitaire qui génère du texte dans un des trois formats : lexicale (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalisé (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) et phonétique (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="cb3f3-160">The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="cb3f3-161">La sortie de texte est obtenue à partir d’un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objets obtenu à partir de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriété sur le <xref:System.Speech.Recognition.RecognizedPhrase> objet.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-161">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb3f3-162">Obtient l'orthographe phonétique d'un mot reconnu.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-162">Gets the phonetic spelling of a recognized word.</span></span></summary>
        <value><span data-ttu-id="cb3f3-163">Chaîne de caractères d'un alphabet phonétique pris en charge, tel que l'alphabet phonétique international (IPA) ou UPS (Universal Phone Set).</span><span class="sxs-lookup"><span data-stu-id="cb3f3-163">A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb3f3-164">Le contenu de <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indiquer quels prononciation du moteur de reconnaissance vocale utilisé pour faire correspondre la saisie vocale à un de ses chargé <xref:System.Speech.Recognition.Grammar> objets.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-164">The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="cb3f3-165">Prononciations personnalisées peuvent être définies dans un lexique interne du moteur de reconnaissance vocale, dans un document de lexique est lié à partir d’une grammaire de reconnaissance dans un chargé <xref:System.Speech.Recognition.Grammar> objet ou inline dans une syntaxe de reconnaissance dans un chargé <xref:System.Speech.Recognition.Grammar> objet.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-165">Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="cb3f3-166">Un module de reconnaissance vocale peut également créer des prononciations des rares mots dont prononciations ne sont pas définies dans un lexique ou de la grammaire à laquelle le moteur de reconnaissance vocale a actuellement accès.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-166">A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.</span></span>  
  
 <span data-ttu-id="cb3f3-167">De polices Unicode basé sur Windows, tels que Courier New, prennent en charge l’affichage de chaînes du fichier IPA.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-167">Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings.</span></span> <span data-ttu-id="cb3f3-168">Pour plus d’informations, consultez [Alphabet phonétique International](https://go.microsoft.com/fwlink/?LinkId=58363).</span><span class="sxs-lookup"><span data-stu-id="cb3f3-168">For more information, see [International Phonetic Alphabet](https://go.microsoft.com/fwlink/?LinkId=58363).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb3f3-169">L’exemple suivant montre une routine d’utilitaire qui génère une chaîne avec un des trois formats possibles : lexicale (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalisé (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) et phonétique (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="cb3f3-169">The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="cb3f3-170">La sortie de texte est obtenue à partir d’un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objets obtenu à partir de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriété sur le <xref:System.Speech.Recognition.RecognizedPhrase> objet.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-170">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363"><span data-ttu-id="cb3f3-171">Alphabet phonétique international</span><span class="sxs-lookup"><span data-stu-id="cb3f3-171">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb3f3-172">Obtient le texte normalisé d'un mot reconnu.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-172">Gets the normalized text for a recognized word.</span></span></summary>
        <value><span data-ttu-id="cb3f3-173">Chaîne qui contient la sortie de texte normalisée pour un mot entré donné.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-173">A string that contains the normalized text output for a given input word.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb3f3-174">Dans la plupart des cas, les valeurs retournées par <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> et <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> seront identiques.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-174">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical.</span></span> <span data-ttu-id="cb3f3-175">Toutefois, moteurs de reconnaissance peuvent utiliser la normalisation de reconnaissance vocale pour retourner les représentations textuelles plus conviviale ou parties de l’entrée audio.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-175">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="cb3f3-176">Normalisation de reconnaissance vocale est l’utilisation de constructions particulières ou des symboles pour exprimer la reconnaissance vocale dans l’écriture.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-176">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="cb3f3-177">Par exemple, la normalisation peut remplacer les mots « un dollar et seize cents » avec « $1.16 » dans le texte de sortie.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-177">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb3f3-178">L’exemple suivant montre une routine d’utilitaire qui génère une chaîne dans un des trois formats : lexicale (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalisé (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) et phonétique (à l’aide de <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="cb3f3-178">The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="cb3f3-179">La sortie de texte est obtenue à partir d’un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objets obtenu à partir de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriété sur le <xref:System.Speech.Recognition.RecognizedPhrase> objet.</span><span class="sxs-lookup"><span data-stu-id="cb3f3-179">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>