<Type Name="RecognizedPhrase" FullName="System.Speech.Recognition.RecognizedPhrase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0607e312d07a09b1ab3242fe7d1d14705084ba53" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52354764" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedPhrase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedPhrase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedPhrase" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedPhrase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedPhrase" />
  <TypeSignature Language="F#" Value="type RecognizedPhrase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{Text}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Contient des informations détaillées, générées par le module de reconnaissance vocale, à propos de l'entrée reconnue.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette classe contient des informations détaillées sur les mots et expressions traitées au cours des opérations de reconnaissance vocale, y compris les éléments suivants :  
  
-   Le <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> références de propriété le <xref:System.Speech.Recognition.Grammar> que le module de reconnaissance est utilisé pour identifier l’entrée.  
  
-   Le <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> propriété contient le texte normalisé pour l’expression.  
  
-   Le <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> propriété fait référence aux sémantique d’informations contenues dans le résultat. Les informations de sémantique sont un dictionnaire de noms de clé et de données sémantiques associées.  
  
-   Le <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriété contient une collection ordonnée de <xref:System.Speech.Recognition.RecognizedWordUnit> les objets qui représentent chacune reconnu word dans l’entrée. Chaque unité de word contient le format d’affichage, le format lexicale et informations de prononciation pour le mot correspondant.  
  
-   Le <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> propriété contient des informations sur la substitution de mot spécialisé.  
  
-   Le <xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A> et <xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A> propriétés contiennent des informations sur les alternatives de reconnaissance qui ont la prononciation identiques ou similaire.  
  
-   La valeur de la <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> propriété indique le degré de certitude, attribué par le module de reconnaissance vocale, qu’une expression reconnue correspond à l’entrée.  
  
 Le module de reconnaissance vocale retourne des résultats de reconnaissance dans un <xref:System.Speech.Recognition.RecognitionResult> objet, qui hérite de <xref:System.Speech.Recognition.RecognizedPhrase>. Le résultat de la reconnaissance <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> propriété contient une collection ordonnée de <xref:System.Speech.Recognition.RecognizedPhrase> objets, chacun d’eux est une correspondance possible pour l’entrée dans le module de reconnaissance.  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire pour un <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, ou <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> événement et certaines informations liées à la <xref:System.Speech.Recognition.RecognitionResult> objet. La classe <xref:System.Speech.Recognition.RecognitionResult> dérive de la classe <xref:System.Speech.Recognition.RecognizedPhrase> .  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
  </Docs>
  <Members>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur, assignée par le module de reconnaissance, qui représente la probabilité que <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> corresponde à une entrée donnée.</summary>
        <value>Mesure relative de la certitude de la reconnaissance correcte d'une phrase. La valeur va de 0,0 à 1,0, correspondant respectivement à la confiance faible et élevée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Scores de confiance n’indiquent pas la probabilité absolue qu’une expression a été correctement reconnue. Au lieu de cela, les scores de confiance fournissent un mécanisme pour comparer la précision relative de plusieurs variantes de reconnaissance pour une entrée donnée. Cela facilite le retour du résultat de reconnaissance plus précis. Par exemple, si une expression reconnue a un score de confiance de 0,8, cela ne signifie pas que l’expression a une 80 % de chance d’être la correspondance correcte pour l’entrée.  Cela signifie que l’expression est plus susceptible d’être la correspondance correcte pour l’entrée à d’autres résultats qui ont confiance scores inférieure à 0,8.  
  
 Un score de confiance en soi n’est pas significatif, sauf si vous avez d’autres résultats à comparer à partir de la même opération de reconnaissance ou reconnaissances précédentes de la même entrée. Les valeurs sont utilisées pour classer par rang autre candidat expressions retournées par la <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> propriété sur <xref:System.Speech.Recognition.RecognitionResult> objets.  
  
 Les valeurs de niveau de confiance sont relatif et uniques pour chaque moteur de reconnaissance. Impossible de comparer les valeurs de confiance retournées par deux moteurs de reconnaissance de différentes manière significative.  
  
 Un moteur de reconnaissance vocale peut affecter un score de confiance faible pour l’entrée parlée pour différentes raisons, notamment des interférences d’arrière-plan, inarticulate vocale, ou mots imprévues ou séquences de word. Si votre application utilise un <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, vous pouvez modifier le niveau de confiance à quels vocale entrée est acceptée ou rejetée avec l’un de le <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> méthodes. Seuils de niveau de confiance pour le module de reconnaissance partagé, géré par <xref:System.Speech.Recognition.SpeechRecognizer>, sont associés à un profil utilisateur et stocké dans le Registre Windows. Les applications ne doivent pas écrire de modifications dans le Registre pour les propriétés du module de reconnaissance partagée.  
  
 Le <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> propriété de la <xref:System.Speech.Recognition.RecognitionResult> objet contient une collection ordonnée de <xref:System.Speech.Recognition.RecognizedPhrase> objets, chacun d’eux est une correspondance possible pour l’entrée dans le module de reconnaissance. Le format de remplaçants est classés du plus élevé au plus bas niveau de confiance.  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire pour un <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, ou <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> événement. L’exemple montre les informations associées à la <xref:System.Speech.Recognition.RecognitionResult> objet, certains d'entre eux est dérivée de <xref:System.Speech.Recognition.RecognizedPhrase>. Le gestionnaire affiche les scores de confiance pour une expression reconnue, ainsi que pour des remplaçants de reconnaissance.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="ConstructSmlFromSemantics">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
      <MemberSignature Language="VB.NET" Value="Public Function ConstructSmlFromSemantics () As IXPathNavigable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::IXPathNavigable ^ ConstructSmlFromSemantics();" />
      <MemberSignature Language="F#" Value="member this.ConstructSmlFromSemantics : unit -&gt; System.Xml.XPath.IXPathNavigable" Usage="recognizedPhrase.ConstructSmlFromSemantics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.IXPathNavigable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un document de langage de balisage sémantique (SML, Semantic Markup Language) pour les informations de sémantique de l'objet <see cref="T:System.Speech.Recognition.RecognizedPhrase" />.</summary>
        <returns>Retourne une description SML de la sémantique de <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> sous la forme d’un objet navigable <see href="https://msdn.microsoft.com/library/ms256115.aspx">XPath</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur le langage de balisage sémantique (SML), consultez le [référence de langage de balisage sémantique](https://msdn.microsoft.com/library/f9d83443-2cac-49bc-a447-210feda62f5d).  
  
   
  
## Examples  
 Dans l’exemple suivant, une méthode retourne une chaîne qui contient l’instruction SML de la sémantique d’une expression reconnue.  
  
```  
private string GetSemanticsSML(RecognizedPhrase result)  
{  
  if (result.Semantics.Count > 0)  
  {  
    return result.ConstructSmlFromSemantics().CreateNavigator().OuterXml;  
  }  
  else  
  {  
    return null;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Grammar">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.Grammar Grammar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.Grammar Grammar" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammar As Grammar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::Grammar ^ Grammar { System::Speech::Recognition::Grammar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammar : System.Speech.Recognition.Grammar" Usage="System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Speech.Recognition.Grammar" /> que le module de reconnaissance vocale a utilisée pour retourner le <see cref="T:System.Speech.Recognition.RecognizedPhrase" />.</summary>
        <value>Objet de grammaire que ce module de reconnaissance vocale a utilisé pour identifier l'entrée.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="HomophoneGroupId">
      <MemberSignature Language="C#" Value="public int HomophoneGroupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HomophoneGroupId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HomophoneGroupId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HomophoneGroupId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HomophoneGroupId : int" Usage="System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'identificateur du groupe d'homophones de l'expression.</summary>
        <value>Identificateur du groupe d'homophones de l'expression.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le module de reconnaissance vocale assigne un identificateur de groupe pour tous les remplaçants de reconnaissance qui ont la même prononciation. Pour chaque autre qui a une prononciation unique, le module de reconnaissance crée un groupe d’homophones. Le module de reconnaissance vocale génère le nouveau groupe d’identificateurs pour chaque opération de reconnaissance et les identificateurs ne peut pas servir à comparer les alternatives de généré à partir d’opérations de reconnaissance distinct.  
  
 Par exemple, pour un résultat de reconnaissance qui contenait le format de remplaçants « l’histoire », « tail » et « oyer une alerte », les deux premières suppléants appartient à un groupe d’homophones et la dernière alternative serait le seul membre d’un deuxième groupe d’homophones.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      </Docs>
    </Member>
    <Member MemberName="Homophones">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Homophones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Homophones" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Homophones As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Homophones { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Homophones : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection des remplaçants de reconnaissance qui ont la même prononciation que cette expression reconnue.</summary>
        <value>Collection de remplaçants de reconnaissance en lecture seule qui ont la même prononciation que cette expression reconnue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne toutes les autres alternatives de reconnaissance qui ont la même prononciation que cette expression reconnue.  
  
 Par exemple, pour un résultat de reconnaissance qui contenait les suppléants, « l’histoire » et « tail », la collection homophones lors de la première alternative, « tale », contiendrait la deuxième phrase, « tail ». La collection homophones lors de la deuxième alternative, « Queue », contient la première phrase, « l’histoire ».  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementWordUnits">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementWordUnits As Collection(Of ReplacementText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ ReplacementWordUnits { System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReplacementWordUnits : System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient des informations à propos du texte modifié par le module de reconnaissance vocale dans le cadre d'une normalisation de reconnaissance vocale.</summary>
        <value>Collection d’objets <see cref="T:System.Speech.Recognition.ReplacementText" /> qui décrivent les sections de texte que le module de reconnaissance vocale a remplacées quand il a normalisé l’entrée reconnue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans le cadre du processus de reconnaissance vocale, la reconnaissance vocale normalise l’entrée reconnue dans un formulaire d’affichage.  
  
 Par exemple, l’entrée parlée, « vingt cinq dollars », génère un résultat de reconnaissance où le <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriété contient les mots « vingt », « 5 » et « dollars » et le <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> propriété contient la phrase, « 25,00$ ». Pour plus d’informations sur la normalisation de texte, consultez la <xref:System.Speech.Recognition.ReplacementText> classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="T:System.Speech.Recognition.ReplacementText" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Semantics">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SemanticValue Semantics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SemanticValue Semantics" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Semantics As SemanticValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SemanticValue ^ Semantics { System::Speech::Recognition::SemanticValue ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Semantics : System.Speech.Recognition.SemanticValue" Usage="System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SemanticValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les informations de sémantique qui sont associées à l'expression reconnue.</summary>
        <value>Informations de sémantique associées à l'expression reconnue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une grammaire de reconnaissance vocale peut inclure des informations sémantiques. Lorsqu’un module de reconnaissance vocale génère un résultat de reconnaissance pour une syntaxe de ce type, les informations de sémantique peuvent être incluses dans le résultat de la reconnaissance, selon les règles de la grammaire et l’entrée dans le module de reconnaissance. Pour plus d’informations sur la sémantique d’informations, consultez [présentation des résultats sémantique](https://msdn.microsoft.com/library/2a9dbd8b-cf6d-42cd-bbb9-ca0b3e534005) et <xref:System.Speech.Recognition.SemanticResultKey> et <xref:System.Speech.Recognition.SemanticResultValue> classes.  
  
   
  
## Examples  
 L’exemple suivant définit une méthode qui obtient des informations sémantiques spécifiques à partir d’une expression reconnue. Lorsque cette méthode est retournée, elle contient la valeur de la clé sémantique, ou null si la valeur n’a pas été récupérée. Cette méthode vérifie uniquement pour les clés de niveau supérieur. Étant donné que les informations de sémantique sont contenues dans une arborescence de valeurs, les clés de niveau inférieur doivent être accessible via la valeur sémantique retournée.  
  
```  
static bool TryGetSemanticValue(  
      RecognizedPhrase phrase, string key, out SemanticValue value)  
{  
  value = null;  
  bool found = phrase.Semantics.ContainsKey(key);  
  if (found)  
  {  
    value = phrase.Semantics[key];  
  }  
  
  return found;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
        <altmember cref="T:System.Speech.Recognition.SemanticValue" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le texte normalisé généré par un module de reconnaissance vocale à partir de l'entrée reconnue.</summary>
        <value>Texte normalisé généré par un module de reconnaissance vocale à partir de l'entrée reconnue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans le cadre du processus de reconnaissance vocale, la reconnaissance vocale effectue la normalisation de reconnaissance vocale de l’entrée reconnue dans un formulaire d’affichage.  
  
 Par exemple, l’entrée parlée, « vingt cinq dollars », génère un résultat de reconnaissance où le <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriété contient les mots « vingt », « 5 » et « dollars » et le <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> propriété contient la phrase, « 25,00$ ». Pour plus d’informations sur la normalisation de texte, consultez <xref:System.Speech.Recognition.ReplacementText>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Words">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt; Words { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedWordUnit&gt; Words" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Words As ReadOnlyCollection(Of RecognizedWordUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ Words { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Words : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les mots générés par un module de reconnaissance vocale à partir de l'entrée reconnue.</summary>
        <value>Collection d’objets <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> générés par un module de reconnaissance vocale pour l’entrée reconnue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété contient les mots produites à partir de l’entrée par le module de reconnaissance vocale avant la normalisation de reconnaissance vocale du module de reconnaissance du résultat.  
  
 Par exemple, l’entrée parlée, « vingt cinq dollars », génère un résultat de reconnaissance où le <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriété contient les mots « vingt », « 5 » et « dollars » et le <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> propriété contient la phrase, « 25,00$ ». Pour plus d’informations sur la normalisation de texte, consultez <xref:System.Speech.Recognition.ReplacementText>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      </Docs>
    </Member>
  </Members>
</Type>