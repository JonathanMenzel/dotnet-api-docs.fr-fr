<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="653a138a06a6f44dd5fd94ba82b6a4bf339e421e" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48732697" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente une valeur sémantique et associe éventuellement la valeur au composant d'une syntaxe de reconnaissance vocale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisation de <xref:System.Speech.Recognition.SemanticResultValue> et <xref:System.Speech.Recognition.SemanticResultKey> conjointement avec les objets <xref:System.Speech.Recognition.GrammarBuilder> et <xref:System.Speech.Recognition.Choices>, est le moyen le plus simple pour concevoir une structure sémantique pour un <xref:System.Speech.Recognition.Grammar>. Informations sémantiques relatives à une expression est accessible en obtenant une instance de <xref:System.Speech.Recognition.SemanticValue>, jusqu'à la <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> propriété sur <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
> [!NOTE]
>  Valeurs gérés par <xref:System.Speech.Recognition.SemanticResultValue> objets sont définis par <xref:System.Object> instances passées à leurs constructeurs. Le type sous-jacent de ce <xref:System.Object> doit être `bool`, `int`, `float`, ou `string`. Tout autre type empêchera la construction d’un <xref:System.Speech.Recognition.Grammar> instance avec le <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 L’utilisation classique d’un <xref:System.Speech.Recognition.SemanticResultValue> instance associe l’instance à un composant inconnu d’un <xref:System.Speech.Recognition.Grammar>, comme une expression, une règle, ou un <xref:System.Speech.Recognition.Choices> objet. Si le composant associé est utilisé en tant que partie d’une opération de reconnaissance, le <xref:System.Speech.Recognition.SemanticResultValue> est utilisé pour définir une valeur dans la sémantique de l’expression retournée.  
  
 Il existe deux méthodes de base permettant d’associer un <xref:System.Speech.Recognition.SemanticResultValue> instance avec un élément de syntaxe, en fonction du constructeur utilisé pour créer le <xref:System.Speech.Recognition.SemanticResultValue>.  
  
-   Si seulement la valeur (spécifié par une instance de <xref:System.Object>) est utilisé pour construire un <xref:System.Speech.Recognition.SemanticResultValue> objet, le <xref:System.Speech.Recognition.SemanticResultValue> est associé au composant de grammaire qui l’ont précédé, en plus d’un <xref:System.Speech.Recognition.GrammarBuilder> objet.  
  
     Par exemple, dans le fragment de code ci-dessous, si un <xref:System.Speech.Recognition.Grammar> construit à l’aide de ce <xref:System.Speech.Recognition.GrammarBuilder> instance reconnaît le mot « en arrière-plan », la valeur `true` est définie dans la sémantique de l’expression reconnue.  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     Pour plus d'informations, voir la description de <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.  
  
-   Si une expression de valeur de chaîne ou le spécifiques <xref:System.Speech.Recognition.GrammarBuilder> instance est utilisé avec un <xref:System.Object> qui spécifie un <xref:System.Speech.Recognition.SemanticResultValue> que la valeur est automatiquement associé à l’expression de valeur de chaîne de la valeur ou la <xref:System.Speech.Recognition.GrammarBuilder> instance.  Si l’expression ou <xref:System.Speech.Recognition.GrammarBuilder> objet est utilisé au cours de la reconnaissance, la valeur est affectée à la sémantique de l’expression reconnue.  
  
     L’exemple suivant illustre ce comportement et est fonctionnellement équivalent à l’exemple précédent, ce qui a utilisé des appels explicites à <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> et <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>. Si la logique de reconnaissance utilise le mot « en arrière-plan », la valeur `true` sera ajouté à la sémantique reconnue.  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     Pour plus d’informations, consultez la description de <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> et <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>.  
  
 Utilisable par un <xref:System.Speech.Recognition.Grammar> dans la reconnaissance, tous les <xref:System.Speech.Recognition.SemanticResultValue> instances doivent être associés à un de le <xref:System.Speech.Recognition.SemanticValue> objets utilisés par cette <xref:System.Speech.Recognition.Grammar>. Cela est effectué en associant une clé sémantique avec le <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 Clés sémantiques peuvent être explicitement associés à un <xref:System.Speech.Recognition.SemanticResultValue>, en utilisant un <xref:System.Speech.Recognition.SemanticResultKey> objet.  <xref:System.Speech.Recognition.SemanticResultValue> les instances ne sont pas explicitement attachés à une clé sont attachés à la clé racine de la valeur par défaut <xref:System.Speech.Recognition.SemanticValue>.  
  
 Après un <xref:System.Speech.Recognition.SemanticResultValue> a été utilisé pour définir le <xref:System.Speech.Recognition.SemanticValue.Value%2A>, qu’il est marqué avec la clé de racine par défaut ou par n’importe quel <xref:System.Speech.Recognition.SemanticResultKey>, cette valeur ne doit pas être modifiée ou une exception se produit pendant les opérations de reconnaissance.  
  
 L’exemple suivant provoque une exception, car elle définit et modifie ensuite la racine <xref:System.Speech.Recognition.SemanticValue.Value%2A> d’un <xref:System.Speech.Recognition.Grammar>.  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 En revanche, le code dans l’exemple suivant est autorisé. Bien qu’il définit plusieurs instances de <xref:System.Speech.Recognition.SemanticResultValue>, ils sont inclus dans un <xref:System.Speech.Recognition.Choices> objet et qu’un seul sera jamais utilisé pour définir la valeur de la clé `bgOrfgText`.  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 L’exemple suivant retourne un <xref:System.Speech.Recognition.Grammar> qui reconnaît la commande « Set/modification/Alter premier plan/arrière-plan... [liste des couleurs] ».  <xref:System.Speech.Recognition.SemanticResultValue> et <xref:System.Speech.Recognition.SemanticResultKey> instances (conjointement avec <xref:System.Speech.Recognition.Choices> et <xref:System.Speech.Recognition.GrammarBuilder> objets) utilisées pour définir la sémantique qui peut être analysée de reconnaissance.  La sémantique analysée déterminent quelle couleur a été demandée et indique si le premier plan ou arrière-plan doit être modifié.  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">À l’aide d’un SemanticResultKey pour extraire un SemanticResultValue</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SemanticResultValue" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `SemanticResultValue` constructeurs prennent en charge la spécification d’un <xref:System.Object> instance avec un type de données sous-jacent de `bool`, `int`, `float`, ou `string`.  
  
 Un constructeur peut créer un `SemanticResultValue` instance dans deux cas :  
  
-   Le `SemanticResultValue` instance doit être explicitement associée à un élément de syntaxe lorsque vous utilisez un <xref:System.Speech.Recognition.GrammarBuilder> pour construire un <xref:System.Speech.Recognition.Grammar>.  
  
-   Le `SemanticResultValue` est déjà associé à une expression de valeur de chaîne ou un <xref:System.Speech.Recognition.GrammarBuilder> objet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valeur managée par <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Doit être de type <see langword="bool" />, <see langword="int" />, <see langword="float" /> ou <see langword="string" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SemanticResultValue" /> et spécifie une valeur sémantique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un `SemanticResultValue` retourné par ce constructeur n’est pas associé à n’importe quel élément de grammaire particulière. L’association doit être rendue explicite à l’aide de l’instance de `SemanticResultValue` conjointement avec <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Par exemple, dans le fragment de code ci-dessous, si un <xref:System.Speech.Recognition.Grammar> construit à l’aide de ce <xref:System.Speech.Recognition.GrammarBuilder> instance reconnaît le mot « en arrière-plan », la valeur `true` est définie dans la sémantique de l’expression reconnue.  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 L’exemple suivant retourne un <xref:System.Speech.Recognition.Grammar> qui reconnaît la commande « Set/modification/Alter premier plan/arrière-plan... [liste des couleurs] ». <xref:System.Speech.Recognition.SemanticResultValue> et <xref:System.Speech.Recognition.SemanticResultKey> instances (conjointement avec <xref:System.Speech.Recognition.Choices> et <xref:System.Speech.Recognition.GrammarBuilder> objets) utilisées pour définir la sémantique qui peut être analysée de reconnaissance.  La sémantique analysée déterminent quelle couleur a été demandée et indique si le premier plan ou arrière-plan doit être modifié.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">Composant de grammaire à utiliser dans la reconnaissance.</param>
        <param name="value">Valeur managée par <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Doit être de type <see langword="bool" />, <see langword="int" />, <see langword="float" /> ou <see langword="string" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SemanticResultValue" /> et associe une valeur sémantique à un objet <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’élément de grammaire spécifiée par <xref:System.Speech.Recognition.GrammarBuilder> est utilisé dans la logique de reconnaissance, `value` seront définies dans la sémantique de la sortie reconnue.  
  
 Dans le fragment de code ci-dessous, si la logique de reconnaissance construit avec la <xref:System.Speech.Recognition.GrammarBuilder> instance (`myGb`) utilise le <xref:System.Speech.Recognition.Choices> objet (`myChoice`) pour identifier d’entrée, la valeur `true` est ajouté à la sémantique reconnue.  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 En tant que <xref:System.Speech.Recognition.GrammarBuilder> prend en charge la conversion implicite pour <xref:System.Speech.Recognition.Choices>, `SemanticResultValue`, et <xref:System.Speech.Recognition.SemanticResultKey>, ce constructeur peut utiliser ces objets ainsi.  
  
   
  
## Examples  
 L’exemple suivant retourne un <xref:System.Speech.Recognition.Grammar> qui reconnaît la commande « Set/modification/Alter premier plan/arrière-plan... [liste des couleurs] ». <xref:System.Speech.Recognition.SemanticResultValue> et <xref:System.Speech.Recognition.SemanticResultKey> instances (conjointement avec <xref:System.Speech.Recognition.Choices> et <xref:System.Speech.Recognition.GrammarBuilder> objets) utilisées pour définir la sémantique qui peut être analysée de reconnaissance.  La sémantique analysée déterminent quelle couleur a été demandée et indique si le premier plan ou arrière-plan doit être modifié.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">Expression à utiliser dans la reconnaissance.</param>
        <param name="value">Valeur managée par <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Doit être de type <see langword="bool" />, <see langword="int" />, <see langword="float" /> ou <see langword="string" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SemanticResultValue" /> et associe une valeur sémantique à un objet <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la chaîne spécifiée par `phrase` est utilisé dans la logique de reconnaissance, `value` seront définies dans la sémantique de la sortie reconnue.  
  
 Dans le fragment de code suivant, si la logique de reconnaissance construit avec la <xref:System.Speech.Recognition.GrammarBuilder> instance (`myGb`) utilise la chaîne « mon crédit immobilier » pour identifier d’entrée, la valeur `true` sera ajouté à la sémantique reconnue.  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 L’exemple suivant retourne un <xref:System.Speech.Recognition.Grammar> qui reconnaît la commande « Set/modification/Alter premier plan/arrière-plan... [liste des couleurs] ». <xref:System.Speech.Recognition.SemanticResultValue> et <xref:System.Speech.Recognition.SemanticResultKey> instances (conjointement avec <xref:System.Speech.Recognition.Choices> et <xref:System.Speech.Recognition.GrammarBuilder> objets) utilisées pour définir la sémantique qui peut être analysée de reconnaissance.  La sémantique analysée déterminent quelle couleur a été demandée et indique si le premier plan ou arrière-plan doit être modifié.  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une instance de <see cref="T:System.Speech.Recognition.GrammarBuilder" /> construite à partir de l'instance <see cref="T:System.Speech.Recognition.SemanticResultValue" /> actuelle.</summary>
        <returns>Retourne une instance de <see cref="T:System.Speech.Recognition.GrammarBuilder" /> construite à partir de l'instance <see cref="T:System.Speech.Recognition.SemanticResultValue" /> actuelle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’utilisation de <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> équivaut à utiliser le <xref:System.Speech.Recognition.GrammarBuilder> constructeur qui accepte un <xref:System.Speech.Recognition.SemanticResultValue> en tant qu’argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).  
  
   
  
## Examples  
 L’exemple suivant crée <xref:System.Speech.Recognition.Grammar> objets prenant en charge les commandes permettant de modifier la couleur d’arrière-plan.  
  
 A <xref:System.Speech.Recognition.Choices> objet (`colorChoice`) contenant la liste des options pour les couleurs d’arrière-plan est rempli à l’aide la <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> méthode avec <xref:System.Speech.Recognition.GrammarBuilder> instances qui sont obtenues à partir de la <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> méthode sur le `SemanticResultValue` objets créés à partir de chaînes de couleur.  
  
 Un <xref:System.Speech.Recognition.GrammarBuilder> est ensuite obtenu en appelant <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> sur un <xref:System.Speech.Recognition.SemanticResultKey> instance, qui sera utilisé pour les choix de sémantiques dans la clé du `colorChoice` instance.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>