<Type Name="SpeechHypothesizedEventArgs" FullName="System.Speech.Recognition.SpeechHypothesizedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1e733d95cccd019d795a7424c95403ca8017d292" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52369727" /></Metadata><TypeSignature Language="C#" Value="public class SpeechHypothesizedEventArgs : System.Speech.Recognition.RecognitionEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SpeechHypothesizedEventArgs extends System.Speech.Recognition.RecognitionEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechHypothesizedEventArgs&#xA;Inherits RecognitionEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechHypothesizedEventArgs : System::Speech::Recognition::RecognitionEventArgs" />
  <TypeSignature Language="F#" Value="type SpeechHypothesizedEventArgs = class&#xA;    inherit RecognitionEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.RecognitionEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Retourne la notification des événements <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" /> et <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />.  
  
Cette classe prend en charge l'infrastructure .NET Framework et n'est pas destinée à être directement utilisée à partir du code d'application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un `SpeechHypothesized` événement est déclenché par le <xref:System.Speech.Recognition.SpeechRecognizer> et <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.  
  
 Vous pouvez obtenir des informations détaillées sur une expression reconnue provisoirement à l’aide de la <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propriété.  
  
 Nombreux `SpeechHypothesized` événements sont générés en tant qu’une reconnaissance moteur essaie d’identifier une phrase d’entrée. En règle générale, la gestion de ces événements est utile uniquement pour le débogage.  
  
 `SpeechHypothesizedEventArgs` dérive de <xref:System.Speech.Recognition.RecognitionEventArgs>.  
  
   
  
## Examples  
 L’exemple suivant crée un gestionnaire pour <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized?displayProperty=nameWithType> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized?displayProperty=nameWithType> événements. Le Gestionnaire utilise une instance de `SpeechHypothesizedEventArgs` pour renvoyer et afficher des informations sur une expression provisoirement reconnue.  
  
```  
// Create a handler for the SpeechHypothesized event.  
recognizer.SpeechHypothesized += new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
// Handle the event and display the hypothesized result.  
void recognizer_SpeechHypothesized (object sender, SpeechHypothesizedEventArgs e)  
  {  
    Console.WriteLine("Hypothesized text: " + e.Result.Text);  
  }  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
  </Docs>
  <Members />
</Type>