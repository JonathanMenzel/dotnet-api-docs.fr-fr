<Type Name="IPersistComponentSettings" FullName="System.Configuration.IPersistComponentSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="36cdd14653e8d239fcffab82331de0392616795f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30379343" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPersistComponentSettings" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersistComponentSettings" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IPersistComponentSettings" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersistComponentSettings" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersistComponentSettings" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Définit les fonctionnalités standard pour les contrôles ou les bibliothèques qui stockent et récupèrent des paramètres d'application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, vous pouvez ajouter la prise en charge des paramètres application à une application en créant une classe wrapper de paramètres, qui est dérivée de <xref:System.Configuration.ApplicationSettingsBase>, puis ajoutez des propriétés spéciales à cette classe. Toutefois, cette approche n’encapsule pas suffisamment de paramètres d’application pour un contrôle afin que son conteneur est protégé à partir des détails. Le <xref:System.Configuration.IPersistComponentSettings> interface fournit une application avec une interface standard pour communiquer les demandes de modification d’état des paramètres d’application à un module de contrôle, composant ou la bibliothèque. Outils de conception dépendent également de cette interface pour gérer correctement les contrôles et composants.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
  </Docs>
  <Members>
    <Member MemberName="LoadComponentSettings">
      <MemberSignature Language="C#" Value="public void LoadComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadComponentSettings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lit les paramètres d'application du contrôle dans leurs propriétés correspondantes et met à jour l'état du contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, le <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> méthode effectue deux opérations essentielles :  
  
-   Elle force chaque instance de paramètres d’application contenue par le contrôle pour actualiser les valeurs de ses propriétés de paramètres d’application, généralement en appelant leurs <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> méthodes.  
  
-   Si nécessaire, il met à jour ces propriétés générales qui dépendent de ces paramètres rechargées de propriétés. Par exemple, si la classe de paramètres contenue un `location` propriété de paramètres, <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> devez vous assurer que le contrôle <xref:System.Windows.Forms.Control.Location%2A> propriété est mise à jour pour refléter ce paramètre rechargé.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
      </Docs>
    </Member>
    <Member MemberName="ResetComponentSettings">
      <MemberSignature Language="C#" Value="public void ResetComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetComponentSettings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restaure les valeurs par défaut des propriétés de paramètres d'application du contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’implémentation de la <xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A> méthode appelle généralement la <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> méthode sur chaque instance d’une classe de paramètres d’application qu’il contient.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="SaveComponentSettings">
      <MemberSignature Language="C#" Value="public void SaveComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveComponentSettings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rend persistantes les propriétés de paramètres d'application du contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> méthode écrit les valeurs des propriétés de paramètres d’application du contrôle dans le magasin de données associé. La technique de sérialisation et le magasin de données utilise de la méthode est déterminée par le fournisseur de paramètres associé à chaque classe de paramètres via le <xref:System.Configuration.SettingsProviderAttribute>. Vous pouvez substituer le choix du fournisseur de paramètres à l’aide de la <xref:System.Configuration.ISettingsProviderService> interface.  
  
> [!NOTE]
>  Si le <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> propriété `true`, le contrôle doit appeler <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> dans son propre <xref:System.Windows.Forms.Control.Dispose%2A> méthode afin que les données de configuration du contrôle sont stockées automatiquement avant la fin de l’application.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="T:System.Configuration.SettingsProvider" />
        <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
      </Docs>
    </Member>
    <Member MemberName="SaveSettings">
      <MemberSignature Language="C#" Value="public bool SaveSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveSettings" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveSettings As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveSettings { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le contrôle doit rendre ses données de configuration automatiquement persistantes.</summary>
        <value>
          <see langword="true" /> si le contrôle doit rendre son état automatiquement persistant ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si un contrôle contient des données de configuration, il sera persistantes en général en réponse à un appel explicite à la <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> méthode ou parfois implicitement lors du contrôle <xref:System.Windows.Forms.Control.Dispose%2A> méthode est appelée. Le <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> propriété détermine si un contrôle est persistant automatiquement ses données de configuration lorsqu’il est supprimé.  
  
 La valeur par défaut <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> dépend de l’implémentation du contrôle. La documentation pour le contrôle doit indiquer s’il utilise des paramètres de l’application, quelles données sont persistantes et la valeur par défaut de le <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> est de la propriété.  
  
   
  
## Examples  
 L’exemple de code suivant indique la méthode appropriée pour un contrôle vérifier la valeur de la <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> propriété avant qu’il tente automatiquement de conserver ses données de configuration.  
  
 `protected override void Dispose( bool disposing ) {`  
  
 `if(disposing) {`  
  
 `try {`  
  
 `if (SaveSettings) {`  
  
 `SaveComponentSettings();`  
  
 `}`  
  
 `}`  
  
 `finally {`  
  
 `//...`  
  
 `}`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.SettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="SettingsKey">
      <MemberSignature Language="C#" Value="public string SettingsKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SettingsKey" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SettingsKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SettingsKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur de la clé de paramètres d'application pour l'instance actuelle du contrôle.</summary>
        <value>
          <see cref="T:System.String" /> contenant la clé de paramètres pour l'instance actuelle du contrôle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> propriété pour lever l’ambiguïté des groupes de propriétés de paramètres d’application lorsqu’il y a plusieurs instances de la même classe wrapper. Par exemple, si un contrôle contient une classe wrapper associée, puis placer plusieurs instances du même contrôle dans la même application provoque généralement de plusieurs instances de la classe wrapper. Une clé de paramètres est requise uniquement lorsque les données de configuration diffèrent sur une base par instance ; par exemple, l’emplacement des contrôles positionnés de manière dynamique.  
  
 Les règles générales suivantes s’appliquent à l’utilisation de <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>:  
  
-   Un contrôle, comme n’importe quelle classe, peut contenir zéro ou plusieurs classes de paramètres d’application dérivée de <xref:System.Configuration.ApplicationSettingsBase>. Chaque classe de paramètres contient sa propre <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> propriété, qui vous aide à lever l’ambiguïté entre plusieurs instances de cette classe.  
  
-   Un contrôle doit séparer ses données par instance et ses données partagées dans différentes classes de paramètres.  
  
-   Pour un contrôle avec toutes les données de configuration par instance, le `get` l’accesseur de la <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> propriété doit utiliser par défaut le <xref:System.Windows.Forms.Control.Name%2A> du contrôle. Dans la plupart des cas, le nom du contrôle sera unique dans une application. Si le contrôle contient uniquement les données de configuration, partagées `get` doit utiliser par défaut `null`.  
  
-   Le `set` accesseur de cette propriété doit être implémenté pour faire la distinction entre les classes de paramètres contenant par instance et les données de configuration partagée. Pour chaque classe de paramètres contenant des données par instance, `set` doit simplement passer par le <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> propriété de la classe de paramètres. Pour les classes de paramètres contenant des données partagées, `set` ne doit effectuer aucune action pour cette classe de paramètres.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
      </Docs>
    </Member>
  </Members>
</Type>