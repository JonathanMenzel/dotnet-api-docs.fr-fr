<Type Name="IPersistComponentSettings" FullName="System.Configuration.IPersistComponentSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="36cdd14653e8d239fcffab82331de0392616795f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30379343" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPersistComponentSettings" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersistComponentSettings" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IPersistComponentSettings" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersistComponentSettings" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersistComponentSettings" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="341f8-101">Définit les fonctionnalités standard pour les contrôles ou les bibliothèques qui stockent et récupèrent des paramètres d'application.</span>
      <span class="sxs-lookup">
        <span data-stu-id="341f8-101">Defines standard functionality for controls or libraries that store and retrieve application settings.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="341f8-102">En règle générale, vous pouvez ajouter la prise en charge des paramètres application à une application en créant une classe wrapper de paramètres, qui est dérivée de <xref:System.Configuration.ApplicationSettingsBase>, puis ajoutez des propriétés spéciales à cette classe.</span><span class="sxs-lookup"><span data-stu-id="341f8-102">Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from <xref:System.Configuration.ApplicationSettingsBase>, and then add special properties to this class.</span></span> <span data-ttu-id="341f8-103">Toutefois, cette approche n’encapsule pas suffisamment de paramètres d’application pour un contrôle afin que son conteneur est protégé à partir des détails.</span><span class="sxs-lookup"><span data-stu-id="341f8-103">However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details.</span></span> <span data-ttu-id="341f8-104">Le <xref:System.Configuration.IPersistComponentSettings> interface fournit une application avec une interface standard pour communiquer les demandes de modification d’état des paramètres d’application à un module de contrôle, composant ou la bibliothèque.</span><span class="sxs-lookup"><span data-stu-id="341f8-104">The <xref:System.Configuration.IPersistComponentSettings> interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module.</span></span> <span data-ttu-id="341f8-105">Outils de conception dépendent également de cette interface pour gérer correctement les contrôles et composants.</span><span class="sxs-lookup"><span data-stu-id="341f8-105">Design-time tools also depend on this interface to properly manage controls and components.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
  </Docs>
  <Members>
    <Member MemberName="LoadComponentSettings">
      <MemberSignature Language="C#" Value="public void LoadComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadComponentSettings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="341f8-106">Lit les paramètres d'application du contrôle dans leurs propriétés correspondantes et met à jour l'état du contrôle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341f8-106">Reads the control's application settings into their corresponding properties and updates the control's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="341f8-107">En règle générale, le <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> méthode effectue deux opérations essentielles :</span><span class="sxs-lookup"><span data-stu-id="341f8-107">In general, the <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> method performs two essential operations:</span></span>  
  
-   <span data-ttu-id="341f8-108">Elle force chaque instance de paramètres d’application contenue par le contrôle pour actualiser les valeurs de ses propriétés de paramètres d’application, généralement en appelant leurs <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="341f8-108">It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods.</span></span>  
  
-   <span data-ttu-id="341f8-109">Si nécessaire, il met à jour ces propriétés générales qui dépendent de ces paramètres rechargées de propriétés.</span><span class="sxs-lookup"><span data-stu-id="341f8-109">As required, it updates those general properties that depend on these reloaded settings properties.</span></span> <span data-ttu-id="341f8-110">Par exemple, si la classe de paramètres contenue un `location` propriété de paramètres, <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> devez vous assurer que le contrôle <xref:System.Windows.Forms.Control.Location%2A> propriété est mise à jour pour refléter ce paramètre rechargé.</span><span class="sxs-lookup"><span data-stu-id="341f8-110">For example, if the settings class contained a `location` settings property, <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> should ensure that the control's <xref:System.Windows.Forms.Control.Location%2A> property is updated to reflect this reloaded setting.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
      </Docs>
    </Member>
    <Member MemberName="ResetComponentSettings">
      <MemberSignature Language="C#" Value="public void ResetComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetComponentSettings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="341f8-111">Restaure les valeurs par défaut des propriétés de paramètres d'application du contrôle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341f8-111">Resets the control's application settings properties to their default values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="341f8-112">L’implémentation de la <xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A> méthode appelle généralement la <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> méthode sur chaque instance d’une classe de paramètres d’application qu’il contient.</span><span class="sxs-lookup"><span data-stu-id="341f8-112">The implementation of the <xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A> method typically calls the <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method on each instance of an application settings class it contains.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="SaveComponentSettings">
      <MemberSignature Language="C#" Value="public void SaveComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveComponentSettings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="341f8-113">Rend persistantes les propriétés de paramètres d'application du contrôle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341f8-113">Persists the control's application settings properties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="341f8-114">Le <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> méthode écrit les valeurs des propriétés de paramètres d’application du contrôle dans le magasin de données associé.</span><span class="sxs-lookup"><span data-stu-id="341f8-114">The <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> method writes the values of the control's application settings properties to the associated data store.</span></span> <span data-ttu-id="341f8-115">La technique de sérialisation et le magasin de données utilise de la méthode est déterminée par le fournisseur de paramètres associé à chaque classe de paramètres via le <xref:System.Configuration.SettingsProviderAttribute>.</span><span class="sxs-lookup"><span data-stu-id="341f8-115">The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the <xref:System.Configuration.SettingsProviderAttribute>.</span></span> <span data-ttu-id="341f8-116">Vous pouvez substituer le choix du fournisseur de paramètres à l’aide de la <xref:System.Configuration.ISettingsProviderService> interface.</span><span class="sxs-lookup"><span data-stu-id="341f8-116">You can override the choice of the settings provider by using the <xref:System.Configuration.ISettingsProviderService> interface.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="341f8-117">Si le <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> propriété `true`, le contrôle doit appeler <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> dans son propre <xref:System.Windows.Forms.Control.Dispose%2A> méthode afin que les données de configuration du contrôle sont stockées automatiquement avant la fin de l’application.</span><span class="sxs-lookup"><span data-stu-id="341f8-117">If the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property is `true`, the control should call <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> in its own <xref:System.Windows.Forms.Control.Dispose%2A> method so that the control's configuration data is stored automatically before the application ends.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="T:System.Configuration.SettingsProvider" />
        <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
      </Docs>
    </Member>
    <Member MemberName="SaveSettings">
      <MemberSignature Language="C#" Value="public bool SaveSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveSettings" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveSettings As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveSettings { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="341f8-118">Obtient ou définit une valeur indiquant si le contrôle doit rendre ses données de configuration automatiquement persistantes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341f8-118">Gets or sets a value indicating whether the control should automatically persist its application settings properties.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="341f8-119">
            <see langword="true" /> si le contrôle doit rendre son état automatiquement persistant ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341f8-119">
              <see langword="true" /> if the control should automatically persist its state; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="341f8-120">Si un contrôle contient des données de configuration, il sera persistantes en général en réponse à un appel explicite à la <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> méthode ou parfois implicitement lors du contrôle <xref:System.Windows.Forms.Control.Dispose%2A> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="341f8-120">If a control contains configuration data, it will typically persist this data in response to an explicit call to the <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> method or sometimes implicitly when the control's <xref:System.Windows.Forms.Control.Dispose%2A> method is invoked.</span></span> <span data-ttu-id="341f8-121">Le <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> propriété détermine si un contrôle est persistant automatiquement ses données de configuration lorsqu’il est supprimé.</span><span class="sxs-lookup"><span data-stu-id="341f8-121">The <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property determines whether a control automatically persists its configuration data when it is disposed.</span></span>  
  
 <span data-ttu-id="341f8-122">La valeur par défaut <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> dépend de l’implémentation du contrôle.</span><span class="sxs-lookup"><span data-stu-id="341f8-122">The default value of <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> depends on the implementation of the control.</span></span> <span data-ttu-id="341f8-123">La documentation pour le contrôle doit indiquer s’il utilise des paramètres de l’application, quelles données sont persistantes et la valeur par défaut de le <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> est de la propriété.</span><span class="sxs-lookup"><span data-stu-id="341f8-123">The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property is.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="341f8-124">L’exemple de code suivant indique la méthode appropriée pour un contrôle vérifier la valeur de la <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> propriété avant qu’il tente automatiquement de conserver ses données de configuration.</span><span class="sxs-lookup"><span data-stu-id="341f8-124">The following code example shows the proper way for a control to check the value of the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property before it attempts to automatically persist its configuration data.</span></span>  
  
 `protected override void Dispose( bool disposing ) {`  
  
 `if(disposing) {`  
  
 `try {`  
  
 `if (SaveSettings) {`  
  
 `SaveComponentSettings();`  
  
 `}`  
  
 `}`  
  
 `finally {`  
  
 `//...`  
  
 `}`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.SettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="SettingsKey">
      <MemberSignature Language="C#" Value="public string SettingsKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SettingsKey" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SettingsKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SettingsKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="341f8-125">Obtient ou définit la valeur de la clé de paramètres d'application pour l'instance actuelle du contrôle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341f8-125">Gets or sets the value of the application settings key for the current instance of the control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="341f8-126">
            <see cref="T:System.String" /> contenant la clé de paramètres pour l'instance actuelle du contrôle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341f8-126">A <see cref="T:System.String" /> containing the settings key for the current instance of the control.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="341f8-127">Utilisez le <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> propriété pour lever l’ambiguïté des groupes de propriétés de paramètres d’application lorsqu’il y a plusieurs instances de la même classe wrapper.</span><span class="sxs-lookup"><span data-stu-id="341f8-127">Use the <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> property to disambiguate groups of application settings properties when there are multiple instances of the same wrapper class.</span></span> <span data-ttu-id="341f8-128">Par exemple, si un contrôle contient une classe wrapper associée, puis placer plusieurs instances du même contrôle dans la même application provoque généralement de plusieurs instances de la classe wrapper.</span><span class="sxs-lookup"><span data-stu-id="341f8-128">For example, if a control contains an associated wrapper class, then placing multiple instances of the same control in the same application will typically result in multiple instances of the wrapper class.</span></span> <span data-ttu-id="341f8-129">Une clé de paramètres est requise uniquement lorsque les données de configuration diffèrent sur une base par instance ; par exemple, l’emplacement des contrôles positionnés de manière dynamique.</span><span class="sxs-lookup"><span data-stu-id="341f8-129">A settings key is required only when the configuration data differs on a per-instance basis; for example, the location of dynamically positioned controls.</span></span>  
  
 <span data-ttu-id="341f8-130">Les règles générales suivantes s’appliquent à l’utilisation de <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>:</span><span class="sxs-lookup"><span data-stu-id="341f8-130">The following general rules apply to the use of <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>:</span></span>  
  
-   <span data-ttu-id="341f8-131">Un contrôle, comme n’importe quelle classe, peut contenir zéro ou plusieurs classes de paramètres d’application dérivée de <xref:System.Configuration.ApplicationSettingsBase>.</span><span class="sxs-lookup"><span data-stu-id="341f8-131">A control, like any class, may contain zero or more application settings classes, derived from <xref:System.Configuration.ApplicationSettingsBase>.</span></span> <span data-ttu-id="341f8-132">Chaque classe de paramètres contient sa propre <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> propriété, qui vous aide à lever l’ambiguïté entre plusieurs instances de cette classe.</span><span class="sxs-lookup"><span data-stu-id="341f8-132">Each settings class contains its own <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> property, which helps disambiguate multiple instances of that class.</span></span>  
  
-   <span data-ttu-id="341f8-133">Un contrôle doit séparer ses données par instance et ses données partagées dans différentes classes de paramètres.</span><span class="sxs-lookup"><span data-stu-id="341f8-133">A control should separate its per-instance data and its shared data into different settings classes.</span></span>  
  
-   <span data-ttu-id="341f8-134">Pour un contrôle avec toutes les données de configuration par instance, le `get` l’accesseur de la <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> propriété doit utiliser par défaut le <xref:System.Windows.Forms.Control.Name%2A> du contrôle.</span><span class="sxs-lookup"><span data-stu-id="341f8-134">For a control with any per-instance configuration data, the `get` accessor of the <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> property should default to the <xref:System.Windows.Forms.Control.Name%2A> of the control.</span></span> <span data-ttu-id="341f8-135">Dans la plupart des cas, le nom du contrôle sera unique dans une application.</span><span class="sxs-lookup"><span data-stu-id="341f8-135">In most cases the name of the control will be unique within an application.</span></span> <span data-ttu-id="341f8-136">Si le contrôle contient uniquement les données de configuration, partagées `get` doit utiliser par défaut `null`.</span><span class="sxs-lookup"><span data-stu-id="341f8-136">If the control contains only shared configuration data, `get` should default to `null`.</span></span>  
  
-   <span data-ttu-id="341f8-137">Le `set` accesseur de cette propriété doit être implémenté pour faire la distinction entre les classes de paramètres contenant par instance et les données de configuration partagée.</span><span class="sxs-lookup"><span data-stu-id="341f8-137">The `set` accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data.</span></span> <span data-ttu-id="341f8-138">Pour chaque classe de paramètres contenant des données par instance, `set` doit simplement passer par le <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> propriété de la classe de paramètres.</span><span class="sxs-lookup"><span data-stu-id="341f8-138">For each settings class containing per-instance data, `set` should just pass-through to the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> property of the settings class.</span></span> <span data-ttu-id="341f8-139">Pour les classes de paramètres contenant des données partagées, `set` ne doit effectuer aucune action pour cette classe de paramètres.</span><span class="sxs-lookup"><span data-stu-id="341f8-139">For settings classes containing shared data, `set` should perform no action for that settings class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
      </Docs>
    </Member>
  </Members>
</Type>