<Type Name="ApplicationSettingsBase" FullName="System.Configuration.ApplicationSettingsBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c0040a0585c9b345ede611c5c918a67c6203f833" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36698364" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ApplicationSettingsBase : System.Configuration.SettingsBase, System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ApplicationSettingsBase extends System.Configuration.SettingsBase implements class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.ApplicationSettingsBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ApplicationSettingsBase&#xA;Inherits SettingsBase&#xA;Implements INotifyPropertyChanged" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationSettingsBase abstract : System::Configuration::SettingsBase, System::ComponentModel::INotifyPropertyChanged" />
  <TypeSignature Language="F#" Value="type ApplicationSettingsBase = class&#xA;    inherit SettingsBase&#xA;    interface INotifyPropertyChanged" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.SettingsBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Agit comme classe de base pour la dérivation des classes wrapper concrètes afin d'implémenter la fonctionnalité de paramètres d'application dans les applications Windows Forms.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.ApplicationSettingsBase> Ajoute les fonctionnalités suivantes à la <xref:System.Configuration.SettingsBase> (classe), qui est utilisé par les applications Web :  
  
-   La capacité de détecter des attributs sur une classe dérivée, wrapper de paramètres. <xref:System.Configuration.ApplicationSettingsBase> prend en charge le modèle déclaratif utilisé pour les propriétés de classe wrapper, comme décrit plus loin.  
  
-   Niveau supérieur <xref:System.Configuration.ApplicationSettingsBase.Save%2A> et <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> méthodes.  
  
-   Événements de validation supplémentaires que vous pouvez gérer pour garantir l’exactitude des paramètres individuels.  
  
 Dans l’architecture des paramètres d’application, pour accéder à un groupe de propriétés de paramètres que vous devez dériver une classe wrapper concrète de <xref:System.Configuration.ApplicationSettingsBase>. La classe wrapper personnalise <xref:System.Configuration.ApplicationSettingsBase> comme suit :  
  
-   Pour chaque propriété de paramètres accessible, une propriété publique fortement typée correspondante est ajoutée à la classe wrapper. Cette propriété a `get` et `set` accesseurs pour les paramètres d’application en lecture/écriture, mais uniquement un `get` accesseur pour les paramètres en lecture seule.  
  
-   Attributs appropriés doivent être appliqués aux propriétés publiques de la classe wrapper pour indiquer les caractéristiques de la propriété de paramètres, tels que la portée du paramètre (application ou utilisateur), si le paramètre doit prendre en charge en itinérance, la valeur par défaut pour le paramètre, le fournisseur de paramètres à utiliser et ainsi de suite. Chaque propriété est requise pour spécifier sa portée à l’aide <xref:System.Configuration.ApplicationScopedSettingAttribute> ou <xref:System.Configuration.UserScopedSettingAttribute>. Paramètres de portée application sont en lecture seule si la valeur par défaut <xref:System.Configuration.LocalFileSettingsProvider> est utilisé.  
  
 La <xref:System.Configuration.ApplicationSettingsBase> classe utilise la réflexion pour détecter ces attributs au moment de l’exécution. La plupart de ces informations est passée à la couche de fournisseur de paramètres, qui est responsable du stockage, format de persistance et ainsi de suite.  
  
 Lorsqu’une application a plusieurs classes wrapper de paramètres, chaque classe définit un *groupe de paramètres*. Chaque groupe a les caractéristiques suivantes :  
  
-   Un groupe peut contenir n’importe quel nombre ou le type des paramètres de propriété.  
  
-   Si le nom du groupe n’est pas défini explicitement par la décoration de la classe wrapper avec un <xref:System.Configuration.SettingsGroupNameAttribute>, puis un nom est généré automatiquement.  
  
 Par défaut, toutes les applications clientes utilisent le <xref:System.Configuration.LocalFileSettingsProvider> pour fournir le stockage. Si un autre fournisseur de paramètres est souhaité, la classe wrapper ou la propriété doit être décorée avec correspondante <xref:System.Configuration.SettingsProviderAttribute>.  
  
 Pour plus d’informations sur l’utilisation de paramètres d’application, consultez [Application Settings for Windows Forms](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de paramètres d’application pour rendre persistantes les attributs suivants du formulaire principal : emplacement, taille, couleur d’arrière-plan et texte de barre de titre. Tous ces attributs sont conservées en tant que propriétés de paramètres d’application unique dans le `FormSettings` classe, nommée `FormLocation`, `FormSize`, `FormBackColor` et `FormText`, respectivement. Tout à l’exception de `FormText` et `Size` sont des données liées à leurs propriétés de formulaire associées et ont un paramètre appliqué à l’aide de valeur par défaut <xref:System.Configuration.DefaultSettingValueAttribute>.  
  
 Le formulaire contient quatre contrôles enfants qui ont les noms et les fonctions suivantes :  
  
-   Un bouton nommé `btnBackColor` utilisée pour afficher le **couleur** boîte de dialogue commune.  
  
-   Un bouton nommé `btnReload` utilisé pour <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> les paramètres d’application.  
  
-   Un bouton nommé `btnReset` utilisé pour <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> les paramètres d’application.  
  
-   Une zone de texte nommée `tbStatus` permet d’afficher les informations d’état sur le programme.  
  
 Notez que, après chaque exécution de l’application, un point de contrôle supplémentaire est ajouté au texte du titre du formulaire.  
  
 Cet exemple de code nécessite un formulaire avec un <xref:System.Windows.Forms.ColorDialog> classe nommée `colorDialog1`et un <xref:System.Windows.Forms.StatusStrip> contrôler avec un <xref:System.Windows.Forms.ToolStripStatusLabel> nommé `tbStatus`. En outre, il requiert trois <xref:System.Windows.Forms.Button> objets nommés `btnReload`, `btnReset`, et `btnBackColor`.  
  
 [!code-cpp[AppSettingsSample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#1)]
 [!code-csharp[AppSettingsSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#1)]
 [!code-vb[AppSettingsSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
    <altmember cref="T:System.Configuration.ApplicationScopedSettingAttribute" />
    <altmember cref="T:System.Configuration.UserScopedSettingAttribute" />
    <altmember cref="T:System.Configuration.SettingsGroupNameAttribute" />
    <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une instance de la classe <see cref="T:System.Configuration.ApplicationSettingsBase" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ApplicationSettingsBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ApplicationSettingsBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une instance de la classe <see cref="T:System.Configuration.ApplicationSettingsBase" /> dans son état par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le constructeur par défaut a été conçu pour fonctionner avec l’hypothèse qu’il n’existe aucun composant associé à la classe wrapper de paramètres en cours, qui dérive de <xref:System.Configuration.ApplicationSettingsBase>.  
  
 Création d’une instance d’une classe wrapper, code hérité effectuera automatiquement les actions suivantes :  
  
1.  Réflexion sur la classe.  
  
2.  Pour chaque propriété sur le wrapper marquée avec l’option `[UserScopedSettingAttribute]` ou `[ApplicationScopedSettingAttribute]`, correspondante <xref:System.Configuration.SettingsProperty> est créé.  
  
3.  Chaque <xref:System.Configuration.SettingsProperty> a certaines de ses propriétés définies selon d’autres attributs éventuellement présents sur les propriétés du wrapper, tels que la valeur par défaut ou le fournisseur de paramètres.  
  
4.  Tous les autres attributs sont simplement mis dans un sac d’attributs, la <xref:System.Configuration.SettingsProperty.Attributes%2A> propriété de la <xref:System.Configuration.SettingsProperty> classe.  
  
5.  Tous les <xref:System.Configuration.SettingsProperty> objets sont ajoutés à un <xref:System.Configuration.SettingsPropertyCollection> représenté par le <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> propriété de la <xref:System.Configuration.ApplicationSettingsBase> classe. Cette collection est ensuite transmise à la <xref:System.Configuration.SettingsBase.Initialize%2A> (méthode).  
  
 Comme impliqué par l’étape 3 mentionnée précédemment <xref:System.Configuration.ApplicationSettingsBase> fonctionne en mode natif avec plusieurs attributs de propriétés, plus spécifiquement les suivants : <xref:System.Configuration.SettingsProviderAttribute>, <xref:System.Configuration.DefaultSettingValueAttribute>, et <xref:System.Configuration.SettingsSerializeAsAttribute>. Tous les autres attributs de paramètres sont simplement transmises au fournisseur sous-jacent approprié.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.SettingsProperty" />
        <altmember cref="T:System.Configuration.SettingsPropertyCollection" />
        <altmember cref="M:System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ApplicationSettingsBase (System.ComponentModel.IComponent owner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IComponent owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (owner As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ApplicationSettingsBase(System::ComponentModel::IComponent ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Configuration.ApplicationSettingsBase : System.ComponentModel.IComponent -&gt; System.Configuration.ApplicationSettingsBase" Usage="new System.Configuration.ApplicationSettingsBase owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="owner">Composant qui agira comme propriétaire de l'objet de paramètres d'application.</param>
        <summary>Initialise une instance de la classe <see cref="T:System.Configuration.ApplicationSettingsBase" /> à l'aide du composant propriétaire fourni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur équivaut exactement à la <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29> à l’aide de l’appel de constructeur :  
  
 `ApplicationSettingsBase(owner, String.Empty)`  
  
 Pour plus d’informations sur la façon dont la réflexion est utilisée lors de l’instanciation d’une classe wrapper, consultez la valeur par défaut <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructeur.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="owner" /> est <see langword="null" />.</exception>
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="P:System.ComponentModel.Component.Site" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ApplicationSettingsBase (string settingsKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string settingsKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (settingsKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ApplicationSettingsBase(System::String ^ settingsKey);" />
      <MemberSignature Language="F#" Value="new System.Configuration.ApplicationSettingsBase : string -&gt; System.Configuration.ApplicationSettingsBase" Usage="new System.Configuration.ApplicationSettingsBase settingsKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settingsKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingsKey">
          <see cref="T:System.String" /> qui  identifie de manière unique des instances distinctes de la classe wrapper.</param>
        <summary>Initialise une instance de la classe <see cref="T:System.Configuration.ApplicationSettingsBase" /> à l'aide de la clé de paramètres fournie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise la <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> propriété à la valeur de le `settingsKey` paramètre. Cette propriété est utile pour lever les ambiguïtés entre différentes instances de la classe wrapper de paramètres dans le même domaine d’application.  
  
 Pour plus d’informations sur la façon dont la réflexion est utilisée lors de l’instanciation d’une classe wrapper, consultez la valeur par défaut <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructeur.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ApplicationSettingsBase (System.ComponentModel.IComponent owner, string settingsKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IComponent owner, string settingsKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (owner As IComponent, settingsKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ApplicationSettingsBase(System::ComponentModel::IComponent ^ owner, System::String ^ settingsKey);" />
      <MemberSignature Language="F#" Value="new System.Configuration.ApplicationSettingsBase : System.ComponentModel.IComponent * string -&gt; System.Configuration.ApplicationSettingsBase" Usage="new System.Configuration.ApplicationSettingsBase (owner, settingsKey)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.ComponentModel.IComponent" />
        <Parameter Name="settingsKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="owner">Composant qui agira comme propriétaire de l'objet de paramètres d'application.</param>
        <param name="settingsKey">
          <see cref="T:System.String" /> qui  identifie de manière unique des instances distinctes de la classe wrapper.</param>
        <summary>Initialise une instance de la classe <see cref="T:System.Configuration.ApplicationSettingsBase" /> à l'aide du composant propriétaire et de la clé de paramètres fournis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.IComponent> objet spécifié par le `owner` paramètre agit comme le propriétaire de l’instance actuelle de cette classe de paramètres d’application. Pendant l’initialisation des paramètres de classe wrapper dérivée de <xref:System.Configuration.ApplicationSettingsBase>, le site du propriétaire est interrogé pour déterminer un <xref:System.Configuration.ISettingsProviderService>. S’il en existe, il est utilisé, plutôt que le fournisseur de paramètres natif pour toutes les propriétés de la classe wrapper, tel que spécifié par le <xref:System.Configuration.SettingsProviderAttribute>.  
  
 Ce constructeur initialise la <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> propriété à la valeur de le `settingsKey` paramètre. Cette propriété est utile pour lever les ambiguïtés entre différentes instances de la classe wrapper dans le même domaine d’application.  
  
 Pour plus d’informations sur la façon dont la réflexion est utilisée lors de l’instanciation d’une classe wrapper, consultez la valeur par défaut <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructeur.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="owner" /> est <see langword="null" />.</exception>
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.SettingsContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.Context" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Context As SettingsContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Configuration::SettingsContext ^ Context { System::Configuration::SettingsContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Configuration.SettingsContext" Usage="System.Configuration.ApplicationSettingsBase.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le contexte de paramètres d'application associé au groupe de paramètres.</summary>
        <value>
          <see cref="T:System.Configuration.SettingsContext" /> associé au groupe de paramètres.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque classe wrapper de paramètres dérivée de <xref:System.Configuration.ApplicationSettingsBase> est associé à un contexte. Le contexte est passé au fournisseur de paramètres pour chaque propriété pour identifier la manière dont la propriété est utilisée. Le contexte agit par conséquent comme un indicateur pour déterminer le fournisseur de paramètres la meilleure façon de rendre persistantes les valeurs de paramètres d’application associée.  
  
 En revanche, le <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> propriété permet au fournisseur de paramètres de lever l’ambiguïté entre plusieurs instances de la même classe wrapper.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Providers" />
        <altmember cref="T:System.Configuration.SettingsContext" />
        <altmember cref="T:System.Configuration.SettingsProvider" />
        <altmember cref="T:System.Configuration.ApplicationSettingsGroup" />
      </Docs>
    </Member>
    <Member MemberName="GetPreviousVersion">
      <MemberSignature Language="C#" Value="public object GetPreviousVersion (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPreviousVersion(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreviousVersion (propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetPreviousVersion(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.GetPreviousVersion : string -&gt; obj" Usage="applicationSettingsBase.GetPreviousVersion propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">
          <see cref="T:System.String" /> contenant le nom de la propriété de paramètres dont la valeur sera retournée.</param>
        <summary>Retourne la valeur de la propriété de paramètres nommée pour la version antérieure de la même application.</summary>
        <returns>
          <see cref="T:System.Object" /> contenant la valeur du <see cref="T:System.Configuration.SettingsProperty" /> spécifié s'il est trouvé ; sinon, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> méthode est souvent utilisée conjointement avec la <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> méthode lors de la migration des paramètres de l’application lors de l’installation d’une nouvelle version d’une application.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">La propriété n'existe pas. Le compte de propriété est zéro ou la propriété est introuvable dans le magasin de données.</exception>
        <altmember cref="T:System.Configuration.SettingsProperty" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Properties" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Upgrade" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override object this[string propertyName] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides Property Item(propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ propertyName); void set(System::String ^ propertyName, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="System.Configuration.ApplicationSettingsBase.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">
          <see cref="T:System.String" /> contenant le nom de la propriété à accéder.</param>
        <summary>Obtient ou définit la valeur de la propriété de paramètres d'application spécifiée.</summary>
        <value>Si elle est trouvée, correspond au nom de la propriété de paramètres nommée ; sinon, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.ApplicationSettingsBase.Item%2A> propriété, également connu sous le nom de l’indexeur, est régulièrement utilisée dans les paramètres de classe wrapper dérivée de <xref:System.Configuration.ApplicationSettingsBase>. <xref:System.Configuration.ApplicationSettingsBase.Item%2A> lie la propriété publique de la classe wrapper à la propriété de paramètres correspondants.  
  
 <xref:System.Configuration.ApplicationSettingsBase.Item%2A> déclenche plusieurs événements en fonction de l’opération en cours :  
  
-   La première fois qu’une propriété est récupérée, la <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> événement est déclenché.  
  
-   Lorsqu’une propriété est définie, le <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> événement est déclenché. Si le gestionnaire n’annule pas l’événement, alors que la valeur de propriété est définie et la <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> événement est déclenché.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">Il n'y a pas de propriété associée au wrapper actuel ou la propriété spécifiée est introuvable.</exception>
        <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">Une tentative de définition de propriété en lecture seule a été effectuée.</exception>
        <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">La valeur fournie est d'un type incompatible avec la propriété de paramètres, durant une opération de définition.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Le fichier de configuration n'a pas pu être analysé.</exception>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Properties" />
        <altmember cref="P:System.Configuration.SettingsProperty.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (object sender, System.ComponentModel.PropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(object sender, class System.ComponentModel.PropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (sender As Object, e As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Object ^ sender, System::ComponentModel::PropertyChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : obj * System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : obj * System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="applicationSettingsBase.OnPropertyChanged (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Source de l'événement.</param>
        <param name="e">
          <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Configuration.ApplicationSettingsBase.OnPropertyChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnSettingChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnSettingChanging (object sender, System.Configuration.SettingChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSettingChanging(object sender, class System.Configuration.SettingChangingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSettingChanging (sender As Object, e As SettingChangingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSettingChanging(System::Object ^ sender, System::Configuration::SettingChangingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSettingChanging : obj * System.Configuration.SettingChangingEventArgs -&gt; unit&#xA;override this.OnSettingChanging : obj * System.Configuration.SettingChangingEventArgs -&gt; unit" Usage="applicationSettingsBase.OnSettingChanging (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.Configuration.SettingChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Source de l'événement.</param>
        <param name="e">
          <see cref="T:System.Configuration.SettingChangingEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnSettingsLoaded">
      <MemberSignature Language="C#" Value="protected virtual void OnSettingsLoaded (object sender, System.Configuration.SettingsLoadedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSettingsLoaded(object sender, class System.Configuration.SettingsLoadedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSettingsLoaded (sender As Object, e As SettingsLoadedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSettingsLoaded(System::Object ^ sender, System::Configuration::SettingsLoadedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSettingsLoaded : obj * System.Configuration.SettingsLoadedEventArgs -&gt; unit&#xA;override this.OnSettingsLoaded : obj * System.Configuration.SettingsLoadedEventArgs -&gt; unit" Usage="applicationSettingsBase.OnSettingsLoaded (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.Configuration.SettingsLoadedEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Source de l'événement.</param>
        <param name="e">
          <see cref="T:System.Configuration.SettingsLoadedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnSettingsSaving">
      <MemberSignature Language="C#" Value="protected virtual void OnSettingsSaving (object sender, System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSettingsSaving(object sender, class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSettingsSaving (sender As Object, e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSettingsSaving(System::Object ^ sender, System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSettingsSaving : obj * System.ComponentModel.CancelEventArgs -&gt; unit&#xA;override this.OnSettingsSaving : obj * System.ComponentModel.CancelEventArgs -&gt; unit" Usage="applicationSettingsBase.OnSettingsSaving (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Source de l'événement.</param>
        <param name="e">
          <see cref="T:System.ComponentModel.CancelEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Configuration.ApplicationSettingsBase.OnSettingsSaving%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.SettingsPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.Properties" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Properties As SettingsPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Configuration::SettingsPropertyCollection ^ Properties { System::Configuration::SettingsPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.SettingsPropertyCollection" Usage="System.Configuration.ApplicationSettingsBase.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de propriétés de paramètres dans le wrapper.</summary>
        <value>
          <see cref="T:System.Configuration.SettingsPropertyCollection" /> contenant tous les objets <see cref="T:System.Configuration.SettingsProperty" /> utilisés dans le wrapper actuel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `get` l’accesseur de la <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> propriété reflète sur les métadonnées de la classe wrapper de paramètres, qui est dérivée de <xref:System.Configuration.ApplicationSettingsBase>, afin de déterminer dynamiquement le jeu de propriétés de paramètres d’application disponible.  
  
 La <xref:System.Configuration.ApplicationSettingsBase> classe reconnaît en mode natif certaines caractéristiques d’un paramètre d’application, telles que son nom, le type de propriété, le fournisseur de paramètres, le valeur par défaut, état de lecture uniquement et une préférence de sérialisation. Ces caractéristiques sont mises en miroir en tant que propriétés dans la <xref:System.Configuration.SettingsProperty> classe. Tous les autres attributs de la propriété de paramètres sont simplement transmises à son fournisseur de paramètres associés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Le fournisseur de paramètres associé est introuvable ou son instanciation a échoué.</exception>
        <altmember cref="P:System.Configuration.SettingsBase.PropertyValues" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Item(System.String)" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Providers" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" />
        <altmember cref="T:System.Configuration.SettingsProperty" />
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PropertyChanged As PropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::ComponentModel::PropertyChangedEventHandler ^ PropertyChanged;" />
      <MemberSignature Language="F#" Value="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " Usage="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit après que la valeur d'une propriété de paramètres d'application a été modifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> événement est déclenché lorsqu’une propriété de paramètres est modifiée par le biais le `set` l’accesseur de la <xref:System.Configuration.ApplicationSettingsBase.Item%2A> (méthode), ou pour chaque propriété qui est restaurée lorsqu’un appel est fait à la <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> ou <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> méthodes.  
  
 Il n’existe aucun correspondant `PropertyChanging` événement pour cette classe, au lieu de cela, consultez le <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> événement.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" />
        <altmember cref="T:System.ComponentModel.PropertyChangedEventArgs" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Item(System.String)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="PropertyValues">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsPropertyValueCollection PropertyValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.SettingsPropertyValueCollection PropertyValues" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.PropertyValues" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PropertyValues As SettingsPropertyValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Configuration::SettingsPropertyValueCollection ^ PropertyValues { System::Configuration::SettingsPropertyValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyValues : System.Configuration.SettingsPropertyValueCollection" Usage="System.Configuration.ApplicationSettingsBase.PropertyValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de valeurs de propriété.</summary>
        <value>
          <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> de valeurs de propriété.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.SettingsProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Providers As SettingsProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Configuration::SettingsProviderCollection ^ Providers { System::Configuration::SettingsProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Configuration.SettingsProviderCollection" Usage="System.Configuration.ApplicationSettingsBase.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de fournisseurs de paramètres d'application utilisée par le wrapper.</summary>
        <value>
          <see cref="T:System.Configuration.SettingsProviderCollection" /> contenant tous les objets <see cref="T:System.Configuration.SettingsProvider" /> utilisés par les propriétés de paramètres du wrapper de paramètres actuel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.SettingsProviderAttribute> détermine quel fournisseur de paramètres est utilisé par une classe wrapper de paramètres ou une propriété de paramètre. Si cet attribut n’est pas spécifié, une application cliente utilise le <xref:System.Configuration.LocalFileSettingsProvider>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Properties" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="M:System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)" />
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="public void Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.Reload" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reload ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reload();" />
      <MemberSignature Language="F#" Value="member this.Reload : unit -&gt; unit" Usage="applicationSettingsBase.Reload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Actualise les valeurs de propriétés de paramètres d'application à partir du stockage persistant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> méthode efface les valeurs de propriété actuellement mis en cache, provoquant un rechargement de ces valeurs à partir du stockage persistant lorsqu’ils sont accessibles par la suite. Cette méthode effectue les actions suivantes :  
  
-   Elle efface les propriétés actuellement mises en cache en effaçant la collection représentée par le <xref:System.Configuration.SettingsBase.PropertyValues%2A> propriété.  
  
-   Il déclenche le <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> événement pour chaque membre de la <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> collection.  
  
 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contraste avec <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> dans la mesure où le premier chargera le dernier ensemble de valeurs de paramètres d’application enregistré, tandis que le second chargera les valeurs par défaut enregistrées.  
  
   
  
## Examples  
 Montre l’exemple de code suit le <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> méthode appelée dans le corps de la <xref:System.Windows.Forms.Control.Click> Gestionnaire d’événements pour un bouton nommé `btnReload`. À la suite de cet appel, les valeurs actuellement stockées pour les paramètres d’application sont rechargées dans leurs propriétés correspondantes. L’exemple de code complet est répertorié dans le <xref:System.Configuration.ApplicationSettingsBase> vue d’ensemble de la classe.  
  
 [!code-cpp[AppSettingsSample#6](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#6)]
 [!code-csharp[AppSettingsSample#6](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#6)]
 [!code-vb[AppSettingsSample#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
        <altmember cref="P:System.Configuration.SettingsBase.PropertyValues" />
        <altmember cref="M:System.Configuration.SettingsPropertyValueCollection.Clear" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Properties" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="applicationSettingsBase.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restaure les valeurs de paramètre d'application persistantes à leurs propriétés par défaut correspondantes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> méthode le remplace les propriétés de paramètres de portée utilisateur en restaurant la valeur de chaque paramètre d’application actuellement persistant. Cette méthode effectue les actions suivantes :  
  
-   Il appelle le <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=nameWithType> méthode sur chaque fournisseur de paramètres qui prend en charge cette méthode facultative.  
  
-   Il appelle le <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> méthode pour forcer une actualisation des valeurs de propriété de paramètres.  
  
 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contraste avec <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> dans la mesure où le premier chargera le dernier ensemble de valeurs de paramètres d’application enregistré, tandis que le second chargera les valeurs par défaut enregistrées.  
  
   
  
## Examples  
 Montre l’exemple de code suit le <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> méthode appelée dans le corps de la <xref:System.Windows.Forms.Control.Click> Gestionnaire d’événements pour un bouton nommé `btnReset`. À la suite de cet appel, les valeurs stockées par défaut pour les paramètres d’application sont rechargées dans leurs propriétés correspondantes. L’exemple de code complet est répertorié dans le <xref:System.Configuration.ApplicationSettingsBase> vue d’ensemble de la classe.  
  
 [!code-cpp[AppSettingsSample#5](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#5)]
 [!code-csharp[AppSettingsSample#5](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#5)]
 [!code-vb[AppSettingsSample#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Le fichier de configuration n'a pas pu être analysé.</exception>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public override void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.Save" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Save();" />
      <MemberSignature Language="F#" Value="override this.Save : unit -&gt; unit" Usage="applicationSettingsBase.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stocke les valeurs actuelles des propriétés de paramètres d'application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.ApplicationSettingsBase.Save%2A> méthode écrit la valeur actuelle de chaque propriété de paramètres dans son magasin de données associé. Pour chaque propriété, cette méthode appelle la <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> méthode sur le fournisseur de paramètres associés.  
  
 Cette méthode diffère de l’implémentation de classe de base car elle déclenche le <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> événement avant que les valeurs sont écrites.  
  
 Si les seuls paramètres définis sont des paramètres de portée application, <xref:System.Configuration.ApplicationSettingsBase.Save%2A> n’aura aucun effet et ne retournera aucune erreur si elle est appelée avec la valeur par défaut <xref:System.Configuration.LocalFileSettingsProvider>. <xref:System.Configuration.LocalFileSettingsProvider> enregistre uniquement les paramètres de portée utilisateur.  
  
> [!IMPORTANT]
>  Il n’existe aucune méthode Load correspondante, car les valeurs de paramètres d’application sont chargées automatiquement lors de l’initialisation de classe wrapper. En revanche, ces valeurs ne sont pas enregistrées automatiquement lorsqu’une application se termine. Par conséquent, vous devez appeler explicitement la <xref:System.Configuration.ApplicationSettingsBase.Save%2A> méthode pour rendre persistantes les valeurs actuelles des paramètres de l’application. Cette opération est généralement effectuée dans le <xref:System.Windows.Forms.Form.Closing> Gestionnaire d’événements du principal ou conteneur <xref:System.Windows.Forms.Form>.  
  
   
  
## Examples  
 Ce qui suit montre l’exemple de code la <xref:System.Configuration.ApplicationSettingsBase.Save%2A> méthode appelée à partir de la <xref:System.Windows.Forms.Form.Closing> Gestionnaire d’événements pour le formulaire principal. Cette méthode ajoute également un point supplémentaire à la propriété de paramètres associée du formulaire <xref:System.Windows.Forms.Control.Text%2A> propriété.  
  
 L’exemple de code complet est répertorié dans le <xref:System.Configuration.ApplicationSettingsBase> vue d’ensemble de la classe.  
  
 [!code-cpp[AppSettingsSample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#3)]
 [!code-csharp[AppSettingsSample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#3)]
 [!code-vb[AppSettingsSample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" />
        <altmember cref="M:System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SettingChanging">
      <MemberSignature Language="C#" Value="public event System.Configuration.SettingChangingEventHandler SettingChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Configuration.SettingChangingEventHandler SettingChanging" />
      <MemberSignature Language="DocId" Value="E:System.Configuration.ApplicationSettingsBase.SettingChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SettingChanging As SettingChangingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Configuration::SettingChangingEventHandler ^ SettingChanging;" />
      <MemberSignature Language="F#" Value="member this.SettingChanging : System.Configuration.SettingChangingEventHandler " Usage="member this.SettingChanging : System.Configuration.SettingChangingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant que la valeur d'une propriété de paramètres d'application ait été modifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> événement se produit avant la modification d’une propriété de valeur de paramètre application via le <xref:System.Configuration.ApplicationSettingsBase.Item%2A> (méthode). Cet événement n’est pas déclenché lorsque la <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> ou <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> méthodes sont appelées. <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> peut être annulé via la <xref:System.Configuration.SettingChangingEventArgs> classe de données d’événement.  
  
 Vous utilisez généralement la <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> événement à gérer la validation immédiate d’une propriété de paramètres. Pour plus d’informations sur la validation, consultez [Comment : valider les paramètres de l’Application](~/docs/framework/winforms/advanced/how-to-validate-application-settings.md).  
  
 Il n’existe aucun correspondant `SettingChanged` événement pour cette classe, au lieu de cela, consultez le <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> événement.  
  
   
  
## Examples  
 Le code suivant exemple illustre le <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> Gestionnaire d’événements pour l’objet de type `FormSettings`, qui est une classe wrapper dérivée de <xref:System.Configuration.ApplicationSettingsBase>. Le gestionnaire affiche les informations d’événement dans une zone de texte nommée `tbStatus`. L’exemple de code complet est répertorié dans le <xref:System.Configuration.ApplicationSettingsBase> vue d’ensemble de la classe.  
  
 [!code-cpp[AppSettingsSample#7](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#7)]
 [!code-csharp[AppSettingsSample#7](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#7)]
 [!code-vb[AppSettingsSample#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" />
        <altmember cref="T:System.Configuration.SettingChangingEventArgs" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Item(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SettingsKey">
      <MemberSignature Language="C#" Value="public string SettingsKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SettingsKey" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SettingsKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SettingsKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SettingsKey : string with get, set" Usage="System.Configuration.ApplicationSettingsBase.SettingsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la clé de paramètres pour le groupe de paramètres d'application.</summary>
        <value>
          <see cref="T:System.String" /> contenant la clé de paramètres pour le groupe de paramètres actuel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> propriété est fournie pour permettre au code client et en particulier le fournisseur de paramètres, de lever l’ambiguïté entre plusieurs instances de la même classe de paramètres d’application.  
  
 À moins que la classe wrapper de paramètres est conçue à l’aide du modèle de singleton, il peut y avoir plusieurs instances de la même classe de paramètres d’application dans une application unique. La valeur de <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> doivent être définis en fonction de la façon dont les valeurs de propriété sont destinées à être partagées.  
  
-   Si les propriétés des paramètres du wrapper sont destinées à être partagés entre toutes les instances du wrapper dans la même application, puis <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> doit avoir la même valeur dans toutes les instances. Il s’agit du comportement par défaut de la <xref:System.Configuration.ApplicationSettingsBase> classe.  
  
-   Si les propriétés des paramètres du wrapper sont destinées à être par instance, puis <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> doit avoir une valeur unique pour chaque instance. Le <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29> version du constructeur vous permet d’initialiser <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> à une chaîne unique.  
  
 En revanche, le <xref:System.Configuration.ApplicationSettingsBase.Context%2A> propriété fournit des indications pour le fournisseur de paramètres pour l’activer rendre persistantes les valeurs de manière efficace et ordonnée.  
  
 Le <xref:System.Configuration.SettingChangingEventArgs> classe contient un texte similaire <xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A> propriété qui permettent d’identifier la source de la <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> événement.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Context" />
        <altmember cref="T:System.Configuration.SettingChangingEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SettingsLoaded">
      <MemberSignature Language="C#" Value="public event System.Configuration.SettingsLoadedEventHandler SettingsLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Configuration.SettingsLoadedEventHandler SettingsLoaded" />
      <MemberSignature Language="DocId" Value="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SettingsLoaded As SettingsLoadedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Configuration::SettingsLoadedEventHandler ^ SettingsLoaded;" />
      <MemberSignature Language="F#" Value="member this.SettingsLoaded : System.Configuration.SettingsLoadedEventHandler " Usage="member this.SettingsLoaded : System.Configuration.SettingsLoadedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsLoadedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit après que les paramètres d'application ont été récupérés à partir du stockage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> événement se produit uniquement après le premier `get` accès de la première propriété de configuration utilisée, en général via la <xref:System.Configuration.ApplicationSettingsBase.Item%2A> (méthode). Les accès ultérieurs utilisent des valeurs pour la propriété de paramètres qui sont mis en cache localement. Le <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> et <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> méthodes effacera tous les valeurs pour cet événement sera déclenché de nouveau lors de l’accès de propriété ultérieurs.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" />
        <altmember cref="T:System.Configuration.SettingsLoadedEventArgs" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Item(System.String)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
      </Docs>
    </Member>
    <Member MemberName="SettingsSaving">
      <MemberSignature Language="C#" Value="public event System.Configuration.SettingsSavingEventHandler SettingsSaving;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Configuration.SettingsSavingEventHandler SettingsSaving" />
      <MemberSignature Language="DocId" Value="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SettingsSaving As SettingsSavingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Configuration::SettingsSavingEventHandler ^ SettingsSaving;" />
      <MemberSignature Language="F#" Value="member this.SettingsSaving : System.Configuration.SettingsSavingEventHandler " Usage="member this.SettingsSaving : System.Configuration.SettingsSavingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsSavingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant que des valeurs soient enregistrées dans le magasin de données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> événement est déclenché par le <xref:System.Configuration.ApplicationSettingsBase.Save%2A> avant qu’il stocke les propriétés de paramètres d’application dans leur magasin de données associé. Le Gestionnaire d’événements associé peut annuler cet événement.  
  
   
  
## Examples  
 Le code suivant exemple illustre le <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> Gestionnaire d’événements pour l’objet de type `FormSettings`, qui est une classe wrapper dérivée de <xref:System.Configuration.ApplicationSettingsBase>. Le Gestionnaire de demande à l’utilisateur pour enregistrer les valeurs de propriété de paramètres application actuelle. L’exemple de code complet est répertorié dans le <xref:System.Configuration.ApplicationSettingsBase> vue d’ensemble de la classe.  
  
 [!code-cpp[AppSettingsSample#8](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#8)]
 [!code-csharp[AppSettingsSample#8](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#8)]
 [!code-vb[AppSettingsSample#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="Upgrade">
      <MemberSignature Language="C#" Value="public virtual void Upgrade ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Upgrade() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.Upgrade" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Upgrade ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Upgrade();" />
      <MemberSignature Language="F#" Value="abstract member Upgrade : unit -&gt; unit&#xA;override this.Upgrade : unit -&gt; unit" Usage="applicationSettingsBase.Upgrade " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Met à jour des paramètres d'application de façon à refléter une installation plus récente de l'application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> méthode effectue deux actions pour garantir une transition en douceur vers une nouvelle version d’une application :  
  
-   Il notifie tous les fournisseurs de paramètres correspondants de l’existence de l’application mis à niveau via un appel à leurs <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=nameWithType> méthode, en supposant qu’ils ont implémenté les <xref:System.Configuration.IApplicationSettingsProvider> interface. Cette action n’est pas effectuée si la classe wrapper de paramètres est marquée avec <xref:System.Configuration.NoSettingsVersionUpgradeAttribute>.  
  
-   Il recharge les valeurs pour tous les paramètres d’application.  
  
 Vous pouvez substituer le comportement par défaut de <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> pour implémenter la mise à niveau personnalisée ou un comportement de fusion. Utilisez le <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> pour récupérer les valeurs d’un paramètre pour la version précédente de l’application. Voici quelques exemples du comportement de mise à niveau personnalisé :  
  
-   À l’aide des nouvelles valeurs par défaut de stratégie qui substituent une ou plusieurs des valeurs précédentes spécifié par l’utilisateur ou des valeurs par défaut précédents.  
  
-   Traduction spéciale de valeurs anciennes pour être compatible avec la plus récente des plages, un groupe de propriétés des paramètres différents et ainsi de suite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Le fichier de configuration n'a pas pu être analysé.</exception>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Providers" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)" />
        <altmember cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute" />
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      </Docs>
    </Member>
  </Members>
</Type>