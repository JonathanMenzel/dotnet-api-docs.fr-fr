<Type Name="IChannelListener" FullName="System.ServiceModel.Channels.IChannelListener">
  <TypeSignature Language="C#" Value="public interface IChannelListener : System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IChannelListener implements class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IChannelListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IChannelListener&#xA;Implements ICommunicationObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IChannelListener : System::ServiceModel::ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1eaaf-101">Définit l'interface qui doit être implémentée par un écouteur de canal pour accepter des canaux.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-101">Defines the interface that must be implemented by a channel listener to accept channels.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eaaf-102">L'interface <xref:System.ServiceModel.Channels.IChannelListener> représente l'interface de base pour les écouteurs de canal.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-102">The <xref:System.ServiceModel.Channels.IChannelListener> interface represents the base interface for channel listeners.</span></span>  
  
 <span data-ttu-id="1eaaf-103">Les écouteurs de canal et leurs canaux associés sont utilisés en général par des services qui reçoivent des communications initialisées par des clients.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-103">Channel listeners and their associated channels are generally used by services that receive communications initiated by clients.</span></span> <span data-ttu-id="1eaaf-104">Les fabriques de canaux qui implémentent l'interface <xref:System.ServiceModel.Channels.IChannelFactory> fournissent en revanche les mécanismes utilisés pour créer les canaux via lesquels la communication avec un service est initialisée.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-104">Channel factories that implement the <xref:System.ServiceModel.Channels.IChannelFactory> interface, by contrast, provide the mechanisms used to create the channels through which communication with a service is initiated.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginWaitForChannel">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForChannel (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForChannel(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener.BeginWaitForChannel(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForChannel (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForChannel(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="1eaaf-105">Le <see cref="T:System.TimeSpan" /> qui spécifie le délai d'exécution d'une opération d'attente de canal avant expiration.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-105">The <see cref="T:System.TimeSpan" /> that specifies how long the wait for a channel operation has to complete before timing out.</span></span></param>
        <param name="callback"><span data-ttu-id="1eaaf-106">Le délégué <see cref="T:System.AsyncCallback" /> qui reçoit la notification de la fin asynchrone d'une opération d'attente de canal.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-106">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous completion of the wait for a channel operation.</span></span></param>
        <param name="state"><span data-ttu-id="1eaaf-107">Objet, spécifié par l'application, qui contient les informations d'état associées à l'opération asynchrone d'attente de canal.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-107">An object, specified by the application, that contains state information associated with the asynchronous wait for a channel operation.</span></span></param>
        <summary><span data-ttu-id="1eaaf-108">Commence une opération asynchrone qui doit être effectuée dans un intervalle de temps spécifié, pour attendre l'arrivée d'un canal.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-108">Begins an asynchronous operation to wait for a channel to arrive that must be completed within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="1eaaf-109"><see cref="T:System.IAsyncResult" /> qui fait référence à l'opération asynchrone d'attente de canal.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-109">The <see cref="T:System.IAsyncResult" /> that references the asynchronous wait for a channel operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForChannel">
      <MemberSignature Language="C#" Value="public bool EndWaitForChannel (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForChannel(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener.EndWaitForChannel(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForChannel (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForChannel(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="1eaaf-110"><see cref="T:System.IAsyncResult" /> retourné par un appel à la méthode <see cref="M:System.ServiceModel.Channels.IChannelListener.EndWaitForChannel(System.IAsyncResult)" />.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-110">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IChannelListener.EndWaitForChannel(System.IAsyncResult)" /> method.</span></span></param>
        <summary><span data-ttu-id="1eaaf-111">Termine une opération asynchrone d'attente d'arrivée de canaux.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-111">Completes an asynchronous operation to wait for channels to arrive.</span></span></summary>
        <returns>
          <span data-ttu-id="1eaaf-112"><see langword="true" /> si un message est arrivé ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-112"><see langword="true" /> if a message arrived; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetProperty&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T GetProperty&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener.GetProperty``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty(Of T As Class) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class T GetProperty();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="1eaaf-113">Objet typé pour lequel la méthode effectue une requête.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-113">The typed object for which the method is querying.</span></span></typeparam>
        <summary><span data-ttu-id="1eaaf-114">Retourne un objet typé demandé (s'il existe) à partir de la couche appropriée dans la pile de canaux.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-114">Returns a typed object requested, if present, from the appropriate layer in the channel stack.</span></span></summary>
        <returns><span data-ttu-id="1eaaf-115">L'objet typé <paramref name="T" /> demandé, s'il existe ; sinon <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-115">The typed object <paramref name="T" /> requested, if it is present or <see langword="null" /> if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eaaf-116">Utilisez cette méthode pour demander un objet typé tel qu'une interface pour définir des propriétés ou obtenir l'état de la couche appropriée dans la pile de canaux.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-116">Use this method to request a typed object such as an interface for setting properties or getting status from the appropriate layer in the channel stack.</span></span> <span data-ttu-id="1eaaf-117">Si une couche prend en charge le retour de l'objet demandé, elle le retourne.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-117">If a layer supports returning the requested object, it returns it.</span></span> <span data-ttu-id="1eaaf-118">Sinon, elle délègue l'appel à la couche suivante dans la pile.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-118">If not, it delegates the call down to the next layer in the stack.</span></span> <span data-ttu-id="1eaaf-119">Si elle arrive au bas de la pile et qu'aucune couche de canal n'a pris en charge l'objet demandé, la méthode retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-119">If it gets to the bottom of the stack and no channel layer supported the requested object, then the method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IChannelListener.Uri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Uri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Uri { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1eaaf-120">Obtient l'URI sur lequel les écouteurs générés par la fabrique écoutent.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-120">Gets the URI on which the listeners that are generated by the factory listen.</span></span></summary>
        <value><span data-ttu-id="1eaaf-121"><see cref="T:System.Uri" /> sur lequel les écouteurs générés par la fabrique écoutent.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-121">The <see cref="T:System.Uri" /> on which the listeners that are generated by the factory listen.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eaaf-122">Cet URI représente l'adresse de transport sur laquelle l'<xref:System.ServiceModel.Channels.IChannelListener> écoute les messages.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-122">This URI represents the transport address on which the <xref:System.ServiceModel.Channels.IChannelListener> is listening for messages.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForChannel">
      <MemberSignature Language="C#" Value="public bool WaitForChannel (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForChannel(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener.WaitForChannel(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChannel (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForChannel(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="1eaaf-123">Le <see cref="T:System.TimeSpan" /> qui spécifie le délai d'exécution d'une opération d'attente de canal avant expiration.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-123">The <see cref="T:System.TimeSpan" /> that specifies how long the wait for a channel operation has to complete before timing out.</span></span></param>
        <summary><span data-ttu-id="1eaaf-124">Attend l'arrivée d'un canal.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-124">Waits for a channel to arrive.</span></span></summary>
        <returns>
          <span data-ttu-id="1eaaf-125"><see langword="true" /> si un canal est arrivé avant l'intervalle de temps spécifié par le <paramref name="timeout" /> ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1eaaf-125"><see langword="true" /> if a channel arrived before the interval of time specified by the <paramref name="timeout" />; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>