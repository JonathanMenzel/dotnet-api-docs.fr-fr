<Type Name="IReplyChannel" FullName="System.ServiceModel.Channels.IReplyChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f29f7baff433903ab6dc8a2000608ecb9aa43223" /><Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/09/2018" /><Meta Name="ms.locfileid" Value="51319502" /></Metadata><TypeSignature Language="C#" Value="public interface IReplyChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReplyChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IReplyChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReplyChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IReplyChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IReplyChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="4d335-101">Définit l'interface qu'un canal doit implémenter pour se trouver du côté réception d'une communication demande-réponse entre des points de terminaison de messagerie.</span><span class="sxs-lookup"><span data-stu-id="4d335-101">Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="4d335-102">L’interface <xref:System.ServiceModel.Channels.IReplyChannel> inclut des variantes synchrones et asynchrones d’une méthode <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> qui retourne un <xref:System.ServiceModel.Channels.RequestContext> qui peut être utilisé pour construire des réponses aux demandes reçues.</span><span class="sxs-lookup"><span data-stu-id="4d335-102">The <xref:System.ServiceModel.Channels.IReplyChannel> interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.</span></span>  
  
 <span data-ttu-id="4d335-103">Le contrat inclut des variantes synchrones et asynchrones de fonctionnalités de réception, de tentative de réception et d’attente de message.</span><span class="sxs-lookup"><span data-stu-id="4d335-103">The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="4d335-104">Un <xref:System.ServiceModel.Channels.IReplyChannel> n'est pas lié nécessairement à un expéditeur unique.</span><span class="sxs-lookup"><span data-stu-id="4d335-104">An <xref:System.ServiceModel.Channels.IReplyChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="4d335-105">D'autres canaux et interfaces de canaux fournissent une corrélation entre l'expéditeur et le canal de réponse, mais le contrat de base ne définit aucune restriction de ce type.</span><span class="sxs-lookup"><span data-stu-id="4d335-105">Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.</span></span>  
  
 <span data-ttu-id="4d335-106">Le modèle d'extraction est utilisé avec un <xref:System.ServiceModel.Channels.IReplyChannel> pour recevoir des messages.</span><span class="sxs-lookup"><span data-stu-id="4d335-106">The pull model is used with an <xref:System.ServiceModel.Channels.IReplyChannel> to receive messages.</span></span> <span data-ttu-id="4d335-107">Ce modèle consiste à appeler <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (ou l'une de ses variantes) puis d'attendre l'arrivée d'un message.</span><span class="sxs-lookup"><span data-stu-id="4d335-107">This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d335-108">Commence une opération asynchrone pour recevoir une demande disponible.</span><span class="sxs-lookup"><span data-stu-id="4d335-108">Begins an asynchronous operation to receive an available request.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="4d335-109">Le délégué <see cref="T:System.AsyncCallback" /> qui reçoit la notification de la réception asynchrone qu'une opération de demande exécute.</span><span class="sxs-lookup"><span data-stu-id="4d335-109">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="4d335-110">Objet, spécifié par l'application, qui contient les informations d'état associées à la réception asynchrone d'une opération de demande.</span><span class="sxs-lookup"><span data-stu-id="4d335-110">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="4d335-111">Commence une opération asynchrone pour recevoir une demande disponible avec un délai d'attente par défaut.</span><span class="sxs-lookup"><span data-stu-id="4d335-111">Begins an asynchronous operation to receive an available request with a default timeout.</span></span></summary>
        <returns><span data-ttu-id="4d335-112"><see cref="T:System.IAsyncResult" /> qui fait référence à la réception asynchrone de la demande.</span><span class="sxs-lookup"><span data-stu-id="4d335-112">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d335-113">Le <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> méthode implémente le modèle standard pour appeler <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> en mode asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4d335-113">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously.</span></span> <span data-ttu-id="4d335-114">Le délai d'attente par défaut est 1 minute.</span><span class="sxs-lookup"><span data-stu-id="4d335-114">The default timeout is 1 minute.</span></span> <span data-ttu-id="4d335-115">Si un délai d'attente de réception a pour valeur la liaison utilisée pour configurer la connexion, cette valeur est alors utilisée.</span><span class="sxs-lookup"><span data-stu-id="4d335-115">If a receive timeout is set on the binding used to configure the connection, then that value is used.</span></span> <span data-ttu-id="4d335-116">Utilisez <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> si vous souhaitez spécifier un délai d'attente explicite avec l'appel qui substitue ces autres valeurs.</span><span class="sxs-lookup"><span data-stu-id="4d335-116">Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.</span></span>  
  
 <span data-ttu-id="4d335-117">Si le message de demande reçu dépasse la taille maximale du message autorisée par la liaison utilisée, une <xref:System.ServiceModel.QuotaExceededException> est levée.</span><span class="sxs-lookup"><span data-stu-id="4d335-117">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="4d335-118">La taille maximale du message est définie par la propriété <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d335-118">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="4d335-119">La valeur par défaut est 65 536 octets.</span><span class="sxs-lookup"><span data-stu-id="4d335-119">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d335-120">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="4d335-120">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="4d335-121"><see cref="T:System.TimeSpan" /> qui spécifie la durée d'attente de réception d'une demande disponible.</span><span class="sxs-lookup"><span data-stu-id="4d335-121">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span></span></param>
        <param name="callback"><span data-ttu-id="4d335-122">Le délégué <see cref="T:System.AsyncCallback" /> qui reçoit la notification de la réception asynchrone qu'une opération de demande exécute.</span><span class="sxs-lookup"><span data-stu-id="4d335-122">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="4d335-123">Objet, spécifié par l'application, qui contient les informations d'état associées à la réception asynchrone d'une opération de demande.</span><span class="sxs-lookup"><span data-stu-id="4d335-123">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="4d335-124">Commence une opération asynchrone pour recevoir une demande disponible avec un délai d'attente spécifié.</span><span class="sxs-lookup"><span data-stu-id="4d335-124">Begins an asynchronous operation to receive an available request with a specified timeout.</span></span></summary>
        <returns><span data-ttu-id="4d335-125"><see cref="T:System.IAsyncResult" /> qui fait référence à la réception asynchrone de la demande.</span><span class="sxs-lookup"><span data-stu-id="4d335-125">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d335-126">Le <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> méthode implémente le modèle standard pour appeler <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> en mode asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4d335-126">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> asynchronously.</span></span> <span data-ttu-id="4d335-127">Le délai d’attente affecté à cette méthode substitue un délai d’attente de réception affecté à la liaison qui est utilisée pour configurer la connexion.</span><span class="sxs-lookup"><span data-stu-id="4d335-127">The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.</span></span>  
  
 <span data-ttu-id="4d335-128">Si le message de demande reçu dépasse la taille maximale du message autorisée par la liaison utilisée, une <xref:System.ServiceModel.QuotaExceededException> est levée.</span><span class="sxs-lookup"><span data-stu-id="4d335-128">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="4d335-129">La taille maximale du message est définie par la propriété <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d335-129">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="4d335-130">La valeur par défaut est 65 536 octets.</span><span class="sxs-lookup"><span data-stu-id="4d335-130">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d335-131">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="4d335-131">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginTryReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="4d335-132"><see cref="T:System.TimeSpan" /> qui spécifie le délai d'exécution de l'opération de demande de réception avant dépassement du délai d’attente et retour de <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4d335-132">The <see cref="T:System.TimeSpan" /> that specifies how long the receive request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <param name="callback"><span data-ttu-id="4d335-133">Le délégué <see cref="T:System.AsyncCallback" /> qui reçoit la notification de la réception asynchrone qu'une opération de demande exécute.</span><span class="sxs-lookup"><span data-stu-id="4d335-133">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="4d335-134">Objet, spécifié par l'application, qui contient les informations d'état associées à la réception asynchrone d'une opération de demande.</span><span class="sxs-lookup"><span data-stu-id="4d335-134">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="4d335-135">Commence une opération asynchrone pour recevoir un message de demande auquel sont associés un délai d'attente spécifié et un objet d'état.</span><span class="sxs-lookup"><span data-stu-id="4d335-135">Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="4d335-136"><see cref="T:System.IAsyncResult" /> qui fait référence à l'opération de demande de réception asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4d335-136">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive request operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d335-137">Utilisez la méthode asynchrone <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> lorsque vous souhaitez que le traitement de l'application se poursuive sans attendre.</span><span class="sxs-lookup"><span data-stu-id="4d335-137">Use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you need the application processing to continue without waiting.</span></span> <span data-ttu-id="4d335-138">Utilisez l'une des méthodes <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> synchrones lorsque le thread en cours peut faire l'objet d'un blocage en répondant au message de demande ou jusqu'à ce que l'intervalle de délai d'attente soit dépassé.</span><span class="sxs-lookup"><span data-stu-id="4d335-138">Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="4d335-139">Cette méthode reçoit, via un rappel, la notification de l'identité du gestionnaire d'événements de l'opération.</span><span class="sxs-lookup"><span data-stu-id="4d335-139">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="4d335-140">L'opération ne se termine que lorsqu'un message est disponible dans le canal ou lorsque le délai d'attente a expiré.</span><span class="sxs-lookup"><span data-stu-id="4d335-140">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d335-141">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="4d335-141">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d335-142">L'opération retourne <see langword="false" /> si le <paramref name="timeout" /> spécifié est dépassé.</span><span class="sxs-lookup"><span data-stu-id="4d335-142">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginWaitForRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="4d335-143"><see cref="T:System.TimeSpan" /> qui spécifie la durée d'attente de réception d'une demande disponible.</span><span class="sxs-lookup"><span data-stu-id="4d335-143">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span></span></param>
        <param name="callback"><span data-ttu-id="4d335-144">Le délégué <see cref="T:System.AsyncCallback" /> qui reçoit la notification de la réception asynchrone qu'une opération de demande exécute.</span><span class="sxs-lookup"><span data-stu-id="4d335-144">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="4d335-145">Objet, spécifié par l'application, qui contient les informations d'état associées à la réception asynchrone d'une opération de demande.</span><span class="sxs-lookup"><span data-stu-id="4d335-145">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="4d335-146">Commence une opération de demande asynchrone à laquelle sont associés un délai d'attente spécifié et un objet d'état.</span><span class="sxs-lookup"><span data-stu-id="4d335-146">Begins an asynchronous request operation that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="4d335-147"><see cref="T:System.IAsyncResult" /> qui fait référence à l'opération asynchrone pour attendre l'arrivée d'un message de demande.</span><span class="sxs-lookup"><span data-stu-id="4d335-147">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a request message to arrive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d335-148">Utilisez la méthode <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> synchrone lorsque le thread en cours peut faire l'objet d'un blocage en attendant l'arrivée d'un message de demande dans la file d'attente.</span><span class="sxs-lookup"><span data-stu-id="4d335-148">Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="4d335-149">Le thread reste bloqué durant le `timeout` spécifié.</span><span class="sxs-lookup"><span data-stu-id="4d335-149">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="4d335-150">Cette méthode reçoit, via un rappel, la notification de l'identité du gestionnaire d'événements de l'opération.</span><span class="sxs-lookup"><span data-stu-id="4d335-150">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="4d335-151">L'opération ne se termine que lorsqu'un message de demande est disponible dans le canal ou lorsque le délai d'attente a expiré.</span><span class="sxs-lookup"><span data-stu-id="4d335-151">The operation is not complete until either a request message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d335-152">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="4d335-152">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d335-153">L'opération retourne <see langword="false" /> si le <paramref name="timeout" /> spécifié est dépassé.</span><span class="sxs-lookup"><span data-stu-id="4d335-153">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext EndReceiveRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveRequest (result As IAsyncResult) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ EndReceiveRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceiveRequest : IAsyncResult -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.EndReceiveRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="4d335-154"><see cref="T:System.IAsyncResult" /> retourné par un appel à la méthode <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span><span class="sxs-lookup"><span data-stu-id="4d335-154">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method.</span></span></param>
        <summary><span data-ttu-id="4d335-155">Termine une opération asynchrone pour recevoir une demande disponible.</span><span class="sxs-lookup"><span data-stu-id="4d335-155">Completes an asynchronous operation to receive an available request.</span></span></summary>
        <returns><span data-ttu-id="4d335-156"><see cref="T:System.ServiceModel.Channels.RequestContext" /> utilisé pour construire une réponse à la demande.</span><span class="sxs-lookup"><span data-stu-id="4d335-156">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct a reply to the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d335-157">Si le message de demande reçu dépasse la taille maximale du message autorisée par la liaison utilisée, une <xref:System.ServiceModel.QuotaExceededException> est levée.</span><span class="sxs-lookup"><span data-stu-id="4d335-157">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="4d335-158">La taille maximale du message est définie par la propriété <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d335-158">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="4d335-159">La valeur par défaut est 65 536 octets.</span><span class="sxs-lookup"><span data-stu-id="4d335-159">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d335-160">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="4d335-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d335-161">L'opération doit lever une <see cref="T:System.TimeoutException" /> si le <paramref name="timeout" /> spécifié est dépassé avant que l'opération soit effectuée.</span><span class="sxs-lookup"><span data-stu-id="4d335-161">The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceiveRequest(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceiveRequest (result As IAsyncResult, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceiveRequest(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceiveRequest : IAsyncResult *  -&gt; bool" Usage="iReplyChannel.EndTryReceiveRequest (result, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="4d335-162"><see cref="T:System.IAsyncResult" /> retourné par un appel à la méthode <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="4d335-162">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <param name="context"><span data-ttu-id="4d335-163"><see cref="T:System.ServiceModel.Channels.RequestContext" /> reçu.</span><span class="sxs-lookup"><span data-stu-id="4d335-163">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span></span></param>
        <summary><span data-ttu-id="4d335-164">Termine l'opération asynchrone spécifiée pour recevoir un message de demande.</span><span class="sxs-lookup"><span data-stu-id="4d335-164">Completes the specified asynchronous operation to receive a request message.</span></span></summary>
        <returns><span data-ttu-id="4d335-165"><see langword="true" /> si un message de demande est reçu avant expiration de l'intervalle de temps spécifié ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4d335-165"><see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4d335-166">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="4d335-166">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForRequest">
      <MemberSignature Language="C#" Value="public bool EndWaitForRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForRequest (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForRequest : IAsyncResult -&gt; bool" Usage="iReplyChannel.EndWaitForRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="4d335-167"><see cref="T:System.IAsyncResult" /> qui identifie l'opération <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> à terminer et à partir de laquelle il est possible de récupérer un résultat final.</span><span class="sxs-lookup"><span data-stu-id="4d335-167">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="4d335-168">Termine l'opération asynchrone spécifiée d'attente d'un message de demande.</span><span class="sxs-lookup"><span data-stu-id="4d335-168">Completes the specified asynchronous wait-for-a-request message operation.</span></span></summary>
        <returns><span data-ttu-id="4d335-169"><see langword="true" /> si une demande est reçue avant expiration de l'intervalle de temps spécifié ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4d335-169"><see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4d335-170">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="4d335-170">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d335-171">Obtient l'adresse sur laquelle ce canal de réponse reçoit des messages.</span><span class="sxs-lookup"><span data-stu-id="4d335-171">Gets the address on which this reply channel receives messages.</span></span></summary>
        <value><span data-ttu-id="4d335-172"><see cref="T:System.ServiceModel.EndpointAddress" /> sur laquelle ce canal de réponse reçoit des messages.</span><span class="sxs-lookup"><span data-stu-id="4d335-172">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which this reply channel receives messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4d335-173">Le code suivant illustre comment implémenter cette propriété :</span><span class="sxs-lookup"><span data-stu-id="4d335-173">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d335-174">Retourne le contexte de la demande reçu, si disponible</span><span class="sxs-lookup"><span data-stu-id="4d335-174">Returns the context of the request received, if one is available</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest () As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest();" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : unit -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d335-175">Retourne le contexte de la demande reçu, si disponible.</span><span class="sxs-lookup"><span data-stu-id="4d335-175">Returns the context of the request received, if one is available.</span></span> <span data-ttu-id="4d335-176">Sinon, attend qu'il y en ait un de disponible.</span><span class="sxs-lookup"><span data-stu-id="4d335-176">If a context is not available, waits until there is one available.</span></span></summary>
        <returns><span data-ttu-id="4d335-177"><see cref="T:System.ServiceModel.Channels.RequestContext" /> utilisé pour construire des réponses.</span><span class="sxs-lookup"><span data-stu-id="4d335-177">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d335-178"><xref:System.ServiceModel.Channels.RequestContext> encapsule le message de demande et un mécanisme pour répondre à ce message.</span><span class="sxs-lookup"><span data-stu-id="4d335-178"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="4d335-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> peut être appelée plusieurs fois ou de manière simultanée.</span><span class="sxs-lookup"><span data-stu-id="4d335-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="4d335-180">Un seul appel <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> est effectué par demande reçue.</span><span class="sxs-lookup"><span data-stu-id="4d335-180">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="4d335-181">Si le message de demande reçu dépasse la taille maximale du message autorisée par la liaison utilisée, une <xref:System.ServiceModel.QuotaExceededException> est levée.</span><span class="sxs-lookup"><span data-stu-id="4d335-181">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="4d335-182">La taille maximale du message est définie par la propriété <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d335-182">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="4d335-183">La valeur par défaut est 65 536 octets.</span><span class="sxs-lookup"><span data-stu-id="4d335-183">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d335-184">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="4d335-184">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#7](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest (timeout As TimeSpan) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : TimeSpan -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="4d335-185"><see cref="T:System.TimeSpan" /> qui spécifie le délai d'exécution de la réception d'une opération de demande avant dépassement du délai d’attente et retour de <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4d335-185">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="4d335-186">Retourne le contexte de la demande reçu, si disponible.</span><span class="sxs-lookup"><span data-stu-id="4d335-186">Returns the context of the request received, if one is available.</span></span> <span data-ttu-id="4d335-187">Sinon, attend qu'il y en ait un de disponible.</span><span class="sxs-lookup"><span data-stu-id="4d335-187">If a context is not available, waits until there is one available.</span></span></summary>
        <returns><span data-ttu-id="4d335-188"><see cref="T:System.ServiceModel.Channels.RequestContext" /> utilisé pour construire des réponses.</span><span class="sxs-lookup"><span data-stu-id="4d335-188">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d335-189"><xref:System.ServiceModel.Channels.RequestContext> encapsule le message de demande et un mécanisme pour répondre à ce message.</span><span class="sxs-lookup"><span data-stu-id="4d335-189"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="4d335-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> peut être appelée plusieurs fois ou de manière simultanée.</span><span class="sxs-lookup"><span data-stu-id="4d335-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="4d335-191">Un seul appel <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> est effectué par demande reçue.</span><span class="sxs-lookup"><span data-stu-id="4d335-191">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="4d335-192">Si le message de demande reçu dépasse la taille maximale du message autorisée par la liaison utilisée, une <xref:System.ServiceModel.QuotaExceededException> est levée.</span><span class="sxs-lookup"><span data-stu-id="4d335-192">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="4d335-193">La taille maximale du message est définie par la propriété <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d335-193">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="4d335-194">La valeur par défaut est 65 536 octets.</span><span class="sxs-lookup"><span data-stu-id="4d335-194">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d335-195">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="4d335-195">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#8](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveRequest(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveRequest (timeout As TimeSpan, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceiveRequest(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member TryReceiveRequest : TimeSpan *  -&gt; bool" Usage="iReplyChannel.TryReceiveRequest (timeout, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="4d335-196"><see cref="T:System.TimeSpan" /> qui spécifie le délai d'exécution de la réception d'une opération de demande avant dépassement du délai d’attente et retour de <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4d335-196">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <param name="context"><span data-ttu-id="4d335-197"><see cref="T:System.ServiceModel.Channels.RequestContext" /> reçu.</span><span class="sxs-lookup"><span data-stu-id="4d335-197">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span></span></param>
        <summary><span data-ttu-id="4d335-198">Retourne une valeur qui indique si une demande est reçue avant qu'un intervalle de temps spécifié ne soit écoulé.</span><span class="sxs-lookup"><span data-stu-id="4d335-198">Returns a value that indicates whether a request is received before a specified interval of time elapses.</span></span></summary>
        <returns><span data-ttu-id="4d335-199"><see langword="true" /> si un message de demande est reçu avant expiration de l'intervalle de temps spécifié ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4d335-199"><see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d335-200">Utilisez <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> lorsque le thread en cours peut faire l'objet d'un blocage en attendant l'arrivée d'un message de demande dans la file d'attente.</span><span class="sxs-lookup"><span data-stu-id="4d335-200">Use <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="4d335-201">Le thread reste bloqué durant le `timeout` spécifié.</span><span class="sxs-lookup"><span data-stu-id="4d335-201">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="4d335-202">Si vous souhaitez que le traitement de l'application se poursuive sans attendre, utilisez la méthode <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4d335-202">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d335-203">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="4d335-203">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d335-204">L'opération retourne <see langword="false" /> si le <paramref name="timeout" /> spécifié est dépassé.</span><span class="sxs-lookup"><span data-stu-id="4d335-204">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="WaitForRequest">
      <MemberSignature Language="C#" Value="public bool WaitForRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForRequest (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForRequest : TimeSpan -&gt; bool" Usage="iReplyChannel.WaitForRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="4d335-205"><see cref="T:System.TimeSpan" /> qui spécifie le délai d'exécution d'une opération de demande avant dépassement du délai d’attente et retour de <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4d335-205">The <see cref="T:System.TimeSpan" /> that specifies how long a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="4d335-206">Retourne une valeur qui indique si un message de demande est reçu avant qu'un intervalle de temps spécifié ne soit écoulé.</span><span class="sxs-lookup"><span data-stu-id="4d335-206">Returns a value that indicates whether a request message is received before a specified interval of time elapses.</span></span></summary>
        <returns><span data-ttu-id="4d335-207"><see langword="true" /> si une demande est reçue avant expiration de l'intervalle de temps spécifié ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4d335-207"><see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d335-208">L'appel de <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> n'entraîne en aucune façon la réception ou le traitement d'un message de demande.</span><span class="sxs-lookup"><span data-stu-id="4d335-208">Calling <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> does not result in a request message being received or processed in any way.</span></span>  
  
 <span data-ttu-id="4d335-209">La méthode <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> existe à l'origine pour les scénarios avec transaction où l'utilisateur souhaite recevoir le message à l'aide d'une transaction.</span><span class="sxs-lookup"><span data-stu-id="4d335-209">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="4d335-210">Pour ce faire, lorsqu’il n’utilise que <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normalement, l’utilisateur doit créer la transaction puis appeler <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> et espérer que le message arrive avant que la transaction n’expire, ce qui est impossible.</span><span class="sxs-lookup"><span data-stu-id="4d335-210">When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="4d335-211">À la place, l’utilisateur peut appeler <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> et spécifier le délai d’attente (même infini), puis lorsqu’un message arrive il peut ouvrir la transaction, appeler <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> et être certain qu’il peut récupérer le message avant que la transaction n’expire.</span><span class="sxs-lookup"><span data-stu-id="4d335-211">Instead, the user can call <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="4d335-212">Utilisez <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> lorsque le thread en cours peut faire l'objet d'un blocage en attendant l'arrivée d'un message dans la file d'attente.</span><span class="sxs-lookup"><span data-stu-id="4d335-212">Use <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="4d335-213">Le thread reste bloqué durant le `timeout` spécifié.</span><span class="sxs-lookup"><span data-stu-id="4d335-213">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="4d335-214">Si vous souhaitez que le traitement de l'application se poursuive sans attendre, utilisez la méthode <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> asynchrone.</span><span class="sxs-lookup"><span data-stu-id="4d335-214">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d335-215">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="4d335-215">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#9](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d335-216">L'opération retourne <see langword="false" /> si le <paramref name="timeout" /> spécifié est dépassé.</span><span class="sxs-lookup"><span data-stu-id="4d335-216">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>