<Type Name="IInputChannel" FullName="System.ServiceModel.Channels.IInputChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ae2783ef0e1dc2a8edab76bbc1b170bd2b36497e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39978804" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInputChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IInputChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IInputChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="fc778-101">Définit l'interface qu'un canal doit implémenter pour recevoir un message.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fc778-101">Defines the interface that a channel must implement to receive a message.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-102">Le contrat <xref:System.ServiceModel.Channels.IInputChannel> inclut des variantes synchrones et asynchrones de fonctionnalités de réception, de tentative de réception et d'attente de message.</span><span class="sxs-lookup"><span data-stu-id="fc778-102">The <xref:System.ServiceModel.Channels.IInputChannel> contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="fc778-103">Le modèle d'extraction est utilisé en général avec un <xref:System.ServiceModel.Channels.IInputChannel> pour recevoir des messages : vous appelez <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (pour « extraire » un message du canal) puis attendez l'arrivée d'un message.</span><span class="sxs-lookup"><span data-stu-id="fc778-103">The pull model is used typically with an <xref:System.ServiceModel.Channels.IInputChannel> to receive messages: you call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (to "pull" a message out of the channel) and then wait for a message to arrive.</span></span> <span data-ttu-id="fc778-104">Un autre modèle d'utilisation consiste à appeler <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> ou <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> puis <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span><span class="sxs-lookup"><span data-stu-id="fc778-104">An alternative usage pattern is to call <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> or <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>, and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span></span> <span data-ttu-id="fc778-105">Cette approche est commune pour les utilisations transactionnelles où vous démarrez la transaction entre les appels à <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> et <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="fc778-105">This approach is common for transactional usages where you start the transaction between the calls to <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> and <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="fc778-106">Un <xref:System.ServiceModel.Channels.IInputChannel> n'est pas lié nécessairement à un expéditeur unique.</span><span class="sxs-lookup"><span data-stu-id="fc778-106">An <xref:System.ServiceModel.Channels.IInputChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="fc778-107">D'autres canaux et interfaces de canaux peuvent fournir une corrélation entre des expéditeurs particuliers et un <xref:System.ServiceModel.Channels.IInputChannel>, mais le contrat de base ne définit aucune restriction de ce type.</span><span class="sxs-lookup"><span data-stu-id="fc778-107">Other channels and channel interfaces can provide a correlation between particular senders and an <xref:System.ServiceModel.Channels.IInputChannel>, but the base contract makes no such restriction.</span></span> <span data-ttu-id="fc778-108">Une implémentation peut créer un nouveau <xref:System.ServiceModel.Channels.IInputChannel> pour chaque message ou réutiliser le même <xref:System.ServiceModel.Channels.IInputChannel> pour plusieurs messages ou expéditeurs.</span><span class="sxs-lookup"><span data-stu-id="fc778-108">An implementation can create a new <xref:System.ServiceModel.Channels.IInputChannel> for each message or reuse the same <xref:System.ServiceModel.Channels.IInputChannel> for multiple messages and senders.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fc778-109">Débute une opération de réception asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-109">Begins an asynchronous receive operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-110">Utilisez la méthode asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> lorsque vous souhaitez que le traitement de l'application se poursuive sans attendre la réception de la demande.</span><span class="sxs-lookup"><span data-stu-id="fc778-110">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="fc778-111">Utilisez la méthode <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> synchrone lorsque le thread en cours peut faire l'objet d'un blocage jusqu'à ce que le message de demande soit reçu ou que l'intervalle de temps spécifié par le `timeout` soit dépassé.</span><span class="sxs-lookup"><span data-stu-id="fc778-111">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="fc778-112">L'opération asynchrone est disponible avec ou sans délai d'attente explicite.</span><span class="sxs-lookup"><span data-stu-id="fc778-112">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="fc778-113">Le délégué <see cref="T:System.AsyncCallback" /> qui reçoit la notification de la fin de l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-113">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="fc778-114">Objet, spécifié par l'application, qui contient des informations d'état associées à l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-114">An object, specified by the application, that contains state information associated with the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fc778-115">Commence une opération asynchrone pour recevoir un message auquel est associé un objet d'état.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-115">Begins an asynchronous operation to receive a message that has a state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fc778-116">
            <see cref="T:System.IAsyncResult" /> qui fait référence à la réception asynchrone du message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-116">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message reception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-117">Utilisez la méthode asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> lorsque vous souhaitez que le traitement de l'application se poursuive sans attendre la réception de la demande.</span><span class="sxs-lookup"><span data-stu-id="fc778-117">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="fc778-118">Utilisez la méthode <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> synchrone lorsque le thread en cours peut faire l'objet d'un blocage jusqu'à ce que le message de demande soit reçu ou que l'intervalle de temps spécifié par le `timeout` soit dépassé.</span><span class="sxs-lookup"><span data-stu-id="fc778-118">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="fc778-119">L'opération asynchrone est disponible avec ou sans délai d'attente explicite.</span><span class="sxs-lookup"><span data-stu-id="fc778-119">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="fc778-120">Cette méthode reçoit, via un rappel, la notification de l'identité du gestionnaire d'événements de l'opération.</span><span class="sxs-lookup"><span data-stu-id="fc778-120">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="fc778-121">L'opération n'est pas terminée tant qu'un message n'est pas disponible dans le canal.</span><span class="sxs-lookup"><span data-stu-id="fc778-121">The operation is not complete until a message becomes available in the channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc778-122">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="fc778-122">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#15](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="fc778-123">
            <see cref="T:System.TimeSpan" /> qui spécifie la durée d'attente pour qu'un message soit disponible.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-123">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="fc778-124">Le délégué <see cref="T:System.AsyncCallback" /> qui reçoit la notification de la fin de l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-124">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="fc778-125">Objet, spécifié par l'application, qui contient des informations d'état associées à l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-125">An object, specified by the application, that contains state information associated with the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fc778-126">Commence une opération asynchrone pour recevoir un message auquel sont associés un délai d'attente spécifié et un objet d'état.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-126">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fc778-127">
            <see cref="T:System.IAsyncResult" /> qui fait référence à l'opération asynchrone de réception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-127">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-128">Utilisez la méthode asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> lorsque vous souhaitez que le traitement de l'application se poursuive sans attendre la réception de la demande.</span><span class="sxs-lookup"><span data-stu-id="fc778-128">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="fc778-129">Utilisez la méthode <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> synchrone lorsque le thread en cours peut faire l'objet d'un blocage jusqu'à ce que le message de demande soit reçu ou que l'intervalle de temps spécifié par le `timeout` soit dépassé.</span><span class="sxs-lookup"><span data-stu-id="fc778-129">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="fc778-130">L'opération asynchrone est disponible avec ou sans délai d'attente explicite.</span><span class="sxs-lookup"><span data-stu-id="fc778-130">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="fc778-131">L'opération ne se termine que lorsqu'un message est disponible dans le canal ou lorsque le délai d'attente a expiré.</span><span class="sxs-lookup"><span data-stu-id="fc778-131">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc778-132">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="fc778-132">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#16](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="fc778-133">Le <paramref name="timeout" /> spécifié est dépassé avant que l'opération soit effectuée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-133">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="fc778-134">Le délai d'attente spécifié est inférieur à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-134">The timeout specified is less than zero.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="fc778-135">
            <para>L’opération lève une <see cref="T:System.TimeoutException" /> si spécifié <paramref name="timeout" /> est dépassé avant la fin.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-135">
              <para>The operation throws a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before it completes.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginTryReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="fc778-136">
            <see cref="T:System.TimeSpan" /> qui spécifie la durée d'attente pour qu'un message soit disponible.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-136">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="fc778-137">Le délégué <see cref="T:System.AsyncCallback" /> qui reçoit la notification de la fin de l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-137">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="fc778-138">Objet, spécifié par l'application, qui contient des informations d'état associées à l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-138">An object, specified by the application, that contains state information associated with the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fc778-139">Commence une opération asynchrone pour recevoir un message auquel sont associés un délai d'attente spécifié et un objet d'état.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-139">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fc778-140">
            <see cref="T:System.IAsyncResult" /> qui fait référence à l'opération asynchrone de réception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-140">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-141">Utilisez la méthode asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> lorsque vous souhaitez que le traitement de l'application se poursuive sans attendre.</span><span class="sxs-lookup"><span data-stu-id="fc778-141">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you want the application processing to continue without waiting.</span></span> <span data-ttu-id="fc778-142">Utilisez la méthode <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> synchrone lorsque le thread en cours peut faire l'objet d'un blocage en répondant au message de demande ou jusqu'à ce que l'intervalle de délai d'attente soit dépassé.</span><span class="sxs-lookup"><span data-stu-id="fc778-142">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="fc778-143">L'opération ne se termine que lorsqu'un message est disponible dans le canal ou lorsque le délai d'attente a expiré.</span><span class="sxs-lookup"><span data-stu-id="fc778-143">The operation is not complete until either a message becomes available in the channel or the timeout occurs.</span></span>  
  
 <span data-ttu-id="fc778-144">Si vous souhaitez gérer des délais d'attente et ne pas seulement lever à nouveau ou encapsuler l'<xref:System.TimeoutException>, vous devez appeler <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> au lieu de <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="fc778-144">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="fc778-145">Si vous ne souhaitez pas traiter spécialement des délais d'attente, appelez uniquement <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, sinon vous perdrez des informations relatives à l'erreur.</span><span class="sxs-lookup"><span data-stu-id="fc778-145">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, otherwise you lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc778-146">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="fc778-146">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="fc778-147">Le <paramref name="timeout" /> spécifié est dépassé avant que l'opération soit effectuée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-147">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="fc778-148">Le délai d'attente spécifié est inférieur à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-148">The timeout specified is less than zero.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="fc778-149">
            <para>L’opération retourne <see langword="false" /> de <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> si spécifié <paramref name="timeout" /> est dépassé.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-149">
              <para>The operation returns <see langword="false" /> from <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> if the specified <paramref name="timeout" /> is exceeded.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForMessage (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForMessage(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForMessage (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForMessage(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForMessage : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginWaitForMessage (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="fc778-150">
            <see cref="T:System.TimeSpan" /> qui spécifie la durée d'attente pour qu'un message soit disponible.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-150">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="fc778-151">Le délégué <see cref="T:System.AsyncCallback" /> qui reçoit la notification de la fin de l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-151">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="fc778-152">Objet, spécifié par l'application, qui contient des informations d'état associées à l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-152">An object, specified by the application, that contains state information associated with the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fc778-153">Commence une opération asynchrone d'attente de message à laquelle sont associés un délai d'attente spécifié et un objet d'état.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-153">Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fc778-154">
            <see cref="T:System.IAsyncResult" /> qui fait référence à l'opération asynchrone pour attendre l'arrivée d'un message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-154">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a message to arrive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-155">Utilisez la méthode <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> asynchrone si vous souhaitez que le traitement de l'application se poursuive sans attendre l'arrivée du message.</span><span class="sxs-lookup"><span data-stu-id="fc778-155">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method if you need the application processing to continue without waiting for the message to arrive.</span></span> <span data-ttu-id="fc778-156">Utilisez la méthode <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> synchrone lorsque le thread en cours peut faire l'objet d'un blocage en attendant l'arrivée d'un message dans la file d'attente.</span><span class="sxs-lookup"><span data-stu-id="fc778-156">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="fc778-157">Le thread reste bloqué durant le `timeout` spécifié.</span><span class="sxs-lookup"><span data-stu-id="fc778-157">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="fc778-158">Cette méthode reçoit, via un rappel, la notification de l'identité du gestionnaire d'événements de l'opération.</span><span class="sxs-lookup"><span data-stu-id="fc778-158">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="fc778-159">L'opération ne se termine que lorsqu'un message est disponible dans le canal ou lorsque le délai d'attente a expiré.</span><span class="sxs-lookup"><span data-stu-id="fc778-159">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc778-160">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="fc778-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#22](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="fc778-161">Le <paramref name="timeout" /> spécifié est dépassé avant que l'opération soit effectuée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-161">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="fc778-162">Le délai d'attente spécifié est inférieur à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-162">The timeout specified is less than zero.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="fc778-163">
            <para>L’opération retourne <see langword="false" /> si spécifié <paramref name="timeout" /> est dépassée, pas une exception de délai d’attente.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-163">
              <para>The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndReceive (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndReceive(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndReceive(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceive : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="fc778-164">
            <see cref="T:System.IAsyncResult" /> retourné par un appel de l'une des méthodes <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-164">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fc778-165">Termine une opération asynchrone pour recevoir un message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-165">Completes an asynchronous operation to receive a message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fc778-166">
            <see cref="T:System.ServiceModel.Channels.Message" /> reçu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-166">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fc778-167">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="fc778-167">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#17](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceive">
      <MemberSignature Language="C#" Value="public bool EndTryReceive (IAsyncResult result, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceive(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceive (result As IAsyncResult, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceive(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceive : IAsyncResult *  -&gt; bool" Usage="iInputChannel.EndTryReceive (result, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="fc778-168">
            <see cref="T:System.IAsyncResult" /> retourné par un appel à la méthode <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-168">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="fc778-169">
            <see cref="T:System.ServiceModel.Channels.Message" /> reçu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-169">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fc778-170">Termine l'opération asynchrone spécifiée pour recevoir un message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-170">Completes the specified asynchronous operation to receive a message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fc778-171">
            <see langword="true" /> si un message est reçu avant expiration de l'intervalle de temps spécifié ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-171">
              <see langword="true" /> if a message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fc778-172">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="fc778-172">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#20](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForMessage">
      <MemberSignature Language="C#" Value="public bool EndWaitForMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForMessage (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForMessage(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForMessage : IAsyncResult -&gt; bool" Usage="iInputChannel.EndWaitForMessage result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="fc778-173">
            <see cref="T:System.IAsyncResult" /> qui identifie l'opération <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> à terminer et à partir de laquelle il est possible de récupérer un résultat final.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-173">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fc778-174">Termine l'opération asynchrone spécifiée d'attente d'un message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-174">Completes the specified asynchronous wait-for-a-message operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fc778-175">
            <see langword="true" /> si un message est arrivé avant que le <paramref name="timeout" /> soit dépassé ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-175">
              <see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fc778-176">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="fc778-176">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fc778-177">Obtient l'adresse sur laquelle ce canal d'entrée reçoit des messages.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-177">Gets the address on which the input channel receives messages.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fc778-178">
            <see cref="T:System.ServiceModel.EndpointAddress" /> sur laquelle le canal d'entrée reçoit des messages.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-178">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which the input channel receives messages.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-179">Si ce canal d'entrée n'a pas d'adresse autonome (par exemple, il s'agit du côté entrée d'un canal TCP initié par le client), cette propriété a la valeur `null`.</span><span class="sxs-lookup"><span data-stu-id="fc778-179">If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is `null`.</span></span>  
  
 <span data-ttu-id="fc778-180">Cette propriété peut être utilisée par les canaux de niveau supérieur à des fins de corrélation.</span><span class="sxs-lookup"><span data-stu-id="fc778-180">This property can be used by higher-level channels for correlation purposes.</span></span> <span data-ttu-id="fc778-181">Par exemple, si un canal de niveau supérieur implémente un message de demande-réponse dans la partie supérieure d'un <xref:System.ServiceModel.Channels.IDuplexChannel>, il peut utiliser la propriété <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> dans l'en-tête WS-Addressing ReplyTo.</span><span class="sxs-lookup"><span data-stu-id="fc778-181">For example, if a higher-level channel implements request-reply on top of a <xref:System.ServiceModel.Channels.IDuplexChannel>, it can use the <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> property in the WS-Addressing ReplyTo header.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc778-182">Le code suivant illustre comment implémenter cette propriété :</span><span class="sxs-lookup"><span data-stu-id="fc778-182">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ServiceProcess.TimeoutException">
          <span data-ttu-id="fc778-183">L'opération ne s'est pas déroulée dans le délai d'attente imparti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-183">The operation did not complete with the timeout interval.</span>
          </span>
        </exception>
        <exception cref="T:System.ServiceModel.CommunicationException">
          <span data-ttu-id="fc778-184">Échec du canal d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-184">The input channel failed.</span>
          </span>
        </exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">
          <span data-ttu-id="fc778-185">Abandon du canal d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-185">The input channel has been aborted.</span>
          </span>
        </exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
          <span data-ttu-id="fc778-186">Erreur sur le canal d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-186">The input channel faulted.</span>
          </span>
        </exception>
        <summary>
          <span data-ttu-id="fc778-187">Retourne un message reçu par le canal d'entrée, s'il y en a un de disponible avec un intervalle de temps qui est défini explicitement ou implicitement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-187">Returns a message received by the input channel, if one is available with an interval of time that is explicitly or implicitly defined.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-188">Utilisez la méthode <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> synchrone lorsque le thread en cours peut faire l'objet d'un blocage jusqu'à ce qu'il reçoive le message de demande ou jusqu'à ce que l'intervalle de temps spécifié par `timeout` soit dépassé.</span><span class="sxs-lookup"><span data-stu-id="fc778-188">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="fc778-189">Utilisez la méthode asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> lorsque vous souhaitez que le traitement de l'application se poursuive sans attendre la réception de la demande.</span><span class="sxs-lookup"><span data-stu-id="fc778-189">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you need the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="fc778-190">L'opération <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> synchrone est disponible avec ou sans délai d'attente explicite.</span><span class="sxs-lookup"><span data-stu-id="fc778-190">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="fc778-191">Si aucun message n'est disponible, elle reste bloquée jusqu'à ce qu'un message soit disponible ou jusqu'à ce que le délai d'attente soit dépassé.</span><span class="sxs-lookup"><span data-stu-id="fc778-191">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive();" />
      <MemberSignature Language="F#" Value="abstract member Receive : unit -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fc778-192">Retourne le message reçu, le cas échéant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-192">Returns the message received, if one is available.</span>
          </span>
          <span data-ttu-id="fc778-193">Si aucun message n'est disponible, elle reste bloquée pendant un intervalle de temps par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-193">If a message is not available, blocks for a default interval of time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fc778-194">
            <see cref="T:System.ServiceModel.Channels.Message" /> reçu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-194">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-195">Utilisez la méthode <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> synchrone lorsque le thread en cours peut faire l'objet d'un blocage jusqu'à ce qu'il reçoive le message de demande ou jusqu'à ce que l'intervalle de temps spécifié par `timeout` soit dépassé.</span><span class="sxs-lookup"><span data-stu-id="fc778-195">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="fc778-196">Utilisez la méthode asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> lorsque vous souhaitez que le traitement de l'application se poursuive sans attendre la réception de la demande.</span><span class="sxs-lookup"><span data-stu-id="fc778-196">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="fc778-197">L'opération <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> synchrone est disponible avec ou sans délai d'attente explicite.</span><span class="sxs-lookup"><span data-stu-id="fc778-197">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="fc778-198">Si aucun message n'est disponible, elle reste bloquée jusqu'à ce qu'un message soit disponible ou jusqu'à ce que le délai d'attente soit dépassé.</span><span class="sxs-lookup"><span data-stu-id="fc778-198">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="fc778-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> peut être appelée plusieurs fois ou de manière simultanée.</span><span class="sxs-lookup"><span data-stu-id="fc778-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="fc778-200">Un seul appel <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> peut être effectué pour chaque message reçu.</span><span class="sxs-lookup"><span data-stu-id="fc778-200">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc778-201">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="fc778-201">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Receive : TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="fc778-202">
            <see cref="T:System.TimeSpan" /> qui spécifie le délai d'exécution de l'opération de réception avant dépassement du délai d’attente et levée d'une <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-202">The <see cref="T:System.TimeSpan" /> that specifies how long the receive operation has to complete before timing out and throwing a <see cref="T:System.TimeoutException" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fc778-203">Retourne le message reçu, le cas échéant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-203">Returns the message received, if one is available.</span>
          </span>
          <span data-ttu-id="fc778-204">Si aucun message n'est disponible, elle reste bloquée pendant un intervalle de temps spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-204">If a message is not available, blocks for a specified interval of time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fc778-205">
            <see cref="T:System.ServiceModel.Channels.Message" /> reçu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-205">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-206">Utilisez la méthode <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> synchrone lorsque le thread en cours peut faire l'objet d'un blocage jusqu'à ce qu'il reçoive le message de demande ou jusqu'à ce que l'intervalle de temps spécifié par `timeout` soit dépassé.</span><span class="sxs-lookup"><span data-stu-id="fc778-206">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="fc778-207">Utilisez la méthode asynchrone <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> lorsque vous souhaitez que le traitement de l'application se poursuive sans attendre la réception de la demande.</span><span class="sxs-lookup"><span data-stu-id="fc778-207">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="fc778-208">L'opération <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> synchrone est disponible avec ou sans délai d'attente explicite.</span><span class="sxs-lookup"><span data-stu-id="fc778-208">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="fc778-209">Si aucun message n'est disponible, elle reste bloquée jusqu'à ce qu'un message soit disponible ou jusqu'à ce que le délai d'attente soit dépassé.</span><span class="sxs-lookup"><span data-stu-id="fc778-209">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="fc778-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> peut être appelée plusieurs fois ou de manière simultanée.</span><span class="sxs-lookup"><span data-stu-id="fc778-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="fc778-211">Un seul appel <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> peut être effectué pour chaque message reçu.</span><span class="sxs-lookup"><span data-stu-id="fc778-211">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc778-212">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="fc778-212">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#14](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="fc778-213">Le <paramref name="timeout" /> spécifié est dépassé avant que l'opération soit effectuée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-213">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="fc778-214">Le délai d'attente spécifié est inférieur à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-214">The timeout specified is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (TimeSpan timeout, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (timeout As TimeSpan, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : TimeSpan *  -&gt; bool" Usage="iInputChannel.TryReceive (timeout, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="fc778-215">
            <see cref="T:System.IAsyncResult" /> retourné par un appel de l'une des méthodes <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-215">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="fc778-216">
            <see cref="T:System.ServiceModel.Channels.Message" /> reçu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-216">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fc778-217">Tente de recevoir un message dans un intervalle de temps spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-217">Tries to receive a message within a specified interval of time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fc778-218">
            <see langword="true" /> si un message est reçu avant que le <paramref name="timeout" /> soit dépassé ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-218">
              <see langword="true" /> if a message is received before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-219">Si vous souhaitez gérer des délais d'attente et ne pas seulement lever à nouveau ou encapsuler l'<xref:System.TimeoutException>, vous devez appeler <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> au lieu de <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="fc778-219">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="fc778-220">Si vous ne souhaitez pas traiter spécialement des délais d'attente, appelez uniquement <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, sinon vous perdrez des informations relatives à l'erreur.</span><span class="sxs-lookup"><span data-stu-id="fc778-220">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, otherwise you will lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc778-221">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="fc778-221">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#18](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="fc778-222">Le <paramref name="timeout" /> spécifié est dépassé avant que l'opération soit effectuée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-222">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="fc778-223">Le délai d'attente spécifié est inférieur à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-223">The timeout specified is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForMessage">
      <MemberSignature Language="C#" Value="public bool WaitForMessage (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForMessage(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForMessage (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForMessage(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForMessage : TimeSpan -&gt; bool" Usage="iInputChannel.WaitForMessage timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="fc778-224">Le <see cref="T:System.TimeSpan" /> spécifie l'intervalle de temps maximal pour attendre l'arrivée d'un message avant dépassement du délai d'attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-224">The <see cref="T:System.TimeSpan" /> specifies the maximum interval of time to wait for a message to arrive before timing out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fc778-225">Retourne une valeur qui indique si un message est arrivé dans un intervalle de temps spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-225">Returns a value that indicates whether a message has arrived within a specified interval of time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fc778-226">
            <see langword="true" /> si un message est arrivé avant que le <paramref name="timeout" /> soit dépassé ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-226">
              <see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc778-227">L'appel de <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> n'entraîne en aucune autre façon la réception ou le traitement d'un message.</span><span class="sxs-lookup"><span data-stu-id="fc778-227">Calling <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> does not result in a message being received or processed in any other way.</span></span>  
  
 <span data-ttu-id="fc778-228">La méthode <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> existe à l'origine pour les scénarios avec transaction où l'utilisateur souhaite recevoir le message à l'aide d'une transaction.</span><span class="sxs-lookup"><span data-stu-id="fc778-228">The <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="fc778-229">Pour ce faire, lorsqu'il n'utilise que <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> normalement, l'utilisateur doit créer la transaction puis appeler <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> et espérer que le message arrive avant que la transaction n'expire, ce qui est impossible.</span><span class="sxs-lookup"><span data-stu-id="fc778-229">When using just <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> normally for this, the user must create the transaction and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="fc778-230">À la place, l'utilisateur peut appeler <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> et spécifier le délai d'attente (même infini) qu'il souhaite, puis lorsqu'un message arrive il peut ouvrir la transaction, appeler <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> et être certain qu'il peut récupérer le message avant que la transaction n'expire.</span><span class="sxs-lookup"><span data-stu-id="fc778-230">Instead, the user can call <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="fc778-231">Cette méthode est synchrone et bloque par conséquent le thread en cours jusqu'à ce qu'un message soit disponible ou que le délai spécifié expire.</span><span class="sxs-lookup"><span data-stu-id="fc778-231">This method is synchronous, so it blocks the current thread until a message is available or the time out occurs.</span></span> <span data-ttu-id="fc778-232">Utilisez <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> lorsque le thread en cours peut faire l'objet d'un blocage en attendant l'arrivée d'un message dans la file d'attente.</span><span class="sxs-lookup"><span data-stu-id="fc778-232">Use <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="fc778-233">Le thread reste bloqué durant le `timeout` spécifié.</span><span class="sxs-lookup"><span data-stu-id="fc778-233">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="fc778-234">Si vous souhaitez que le traitement de l'application se poursuive sans attendre, utilisez la méthode <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> asynchrone.</span><span class="sxs-lookup"><span data-stu-id="fc778-234">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc778-235">Le code suivant illustre comment implémenter cette méthode :</span><span class="sxs-lookup"><span data-stu-id="fc778-235">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#21](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="fc778-236">Le <paramref name="timeout" /> spécifié est dépassé avant que l'opération soit effectuée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-236">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="fc778-237">Le délai d'attente spécifié est inférieur à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-237">The timeout specified is less than zero.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="fc778-238">
            <para>L’opération retourne <see langword="false" /> si spécifié <paramref name="timeout" /> est dépassée, pas une exception de délai d’attente.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="fc778-238">
              <para>The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>