<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WebContentTypeMapper.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d66c64b657f82f9f5f0ea5d4f7cba3d49c47cd7e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d66c64b657f82f9f5f0ea5d4f7cba3d49c47cd7e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.WebContentTypeMapper">
          <source>Specifies the format to which the content type of an incoming message is mapped.</source>
          <target state="translated">Spécifie le format auquel le type de contenu d'un message entrant est mappé.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.WebContentTypeMapper">
          <source>This is an extensibility point in the programming model that is used by the Web message encoder to override how content types are mapped to formats.</source>
          <target state="translated">Il s'agit d'un point d'extensibilité du modèle de programmation qui est utilisé par l'encodeur de message Web pour remplacer le mode de mappage des types de contenu aux formats.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.WebContentTypeMapper">
          <source>To implement this class, override the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.WebContentTypeMapper.GetMessageFormatForContentType%28System.String%29&gt;</ph> method.</source>
          <target state="translated">Pour implémenter cette classe, remplacez la méthode <ph id="ph1">&lt;xref:System.ServiceModel.Channels.WebContentTypeMapper.GetMessageFormatForContentType%28System.String%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.WebContentTypeMapper.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.WebContentTypeMapper" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.WebContentTypeMapper" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.WebContentTypeMapper.GetMessageFormatForContentType(System.String)">
          <source>The content type that indicates the MIME type of data to be interpreted.</source>
          <target state="translated">Type de contenu qui indique le type MIME de données à interpréter.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.WebContentTypeMapper.GetMessageFormatForContentType(System.String)">
          <source>When overridden in a derived class, returns the message format used for a specified content type.</source>
          <target state="translated">En cas de remplacement dans une classe dérivée, retourne le format de message utilisé pour un type de contenu spécifié.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.WebContentTypeMapper.GetMessageFormatForContentType(System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.WebContentFormat" /&gt;</ph> that specifies the format to which the message content type is mapped.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.WebContentFormat" /&gt;</ph> qui spécifie le format auquel le type de contenu de message est mappé.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.WebContentTypeMapper.GetMessageFormatForContentType(System.String)">
          <source>This is intended to be an extensibility mechanism that can be used to override how content types are mapped to Web content formats.</source>
          <target state="translated">Conçu pour être un mécanisme d'extensibilité qui peut être utilisé pour remplacer le mode de mappage des types de contenu aux formats de contenu Web.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.WebContentTypeMapper.GetMessageFormatForContentType(System.String)">
          <source>For example, if all incoming messages are processed as "raw binary data" without ever doing XML or JSON parsing, you could implement a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.WebContentTypeMapper&gt;</ph> that always returned <ph id="ph2">&lt;xref:System.ServiceModel.Channels.WebContentFormat.Raw&gt;</ph> regardless of the content type that was passed in.</source>
          <target state="translated">Par exemple, si tous les messages entrants sont traités en tant que « données binaires brutes », sans jamais effectuer d’analyse XML ou JSON, vous pouvez implémenter un <ph id="ph1">&lt;xref:System.ServiceModel.Channels.WebContentTypeMapper&gt;</ph> qui retourne toujours <ph id="ph2">&lt;xref:System.ServiceModel.Channels.WebContentFormat.Raw&gt;</ph> quel que soit le type de contenu qui a été passé.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>