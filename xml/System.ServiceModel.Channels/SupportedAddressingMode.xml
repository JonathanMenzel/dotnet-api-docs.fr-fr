<Type Name="SupportedAddressingMode" FullName="System.ServiceModel.Channels.SupportedAddressingMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1ae63748c67f545e380dccbb2d4ab05c995bd875" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37460095" /></Metadata><TypeSignature Language="C#" Value="public enum SupportedAddressingMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SupportedAddressingMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.SupportedAddressingMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum SupportedAddressingMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class SupportedAddressingMode" />
  <TypeSignature Language="F#" Value="type SupportedAddressingMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Spécifie si un service prend en charge l'envoi de réponses à des adresses anonymes uniquement, à des adresses non anonymes uniquement, ou les deux.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette énumération est utilisée pour spécifier la fonctionnalité d’un serveur qui, à son tour, impose une exigence à ses clients.  
  
 Windows Communication Foundation (WCF) a divers contrôles d’adressage pour spécifier où les messages doivent être envoyés. Par exemple, l'adresse logique <xref:System.ServiceModel.Channels.MessageHeaders.To%2A> pour la destination des message ; l'adresse physique ("Via"), utilisée par le transport, qu'un service écoute ; et enfin, l'adresse <xref:System.ServiceModel.Channels.MessageHeaders.ReplyTo%2A> du point de terminaison qui fournit l'adresse du point de terminaison du client.  
  
 Dans le cas le plus élémentaire, lorsque deux parties échangent des messages entre elles seulement, il n'est pas nécessaire de spécifier ces adresses séparément. Mais du fait que des échanges peuvent impliquer d'autres destinations de message, vous devez être en mesure de spécifier quand des adresses doivent être fournies explicitement. Y compris entre deux parties seulement, cette fonctionnalité est parfois requise, comme c'est le cas, par exemple, avec le protocole double HTTP, qui implique que le serveur crée sa propre requête HTTP. Les types de relations suivants sont définis par l'énumération <xref:System.ServiceModel.Channels.SupportedAddressingMode> pour capturer ces modèles de messagerie:  
  
-   Les adresses anonymes sont la forme la plus basique d’adressage. L’adressage anonyme est utilisé lorsqu’il existe un chemin par défaut pour une réponse. TCP est un protocole de transport de communication bidirectionnelle et la réponse à un message TCP peut être renvoyée à l'autre côté du socket qui a envoyé le message d'origine. De la même façon, le modèle de requête-réponse HTTP envoie des réponses par le biais du canal de réponse HTTP. Ni l'une ni l'autre de ces réponses ne requiert la spécification de la destination des messages de réponse. Lorsqu’un serveur requiert des réponses anonymes du client, il utilise la valeur anonyme de l’énumération. WCF fournie par le système <xref:System.ServiceModel.NetTcpBinding>, <xref:System.ServiceModel.BasicHttpBinding> et <xref:System.ServiceModel.WSHttpBinding> liaisons utilisent toujours des adresses anonymes.  
  
-   Les adresses non anonymes sont utilisées lors de l’envoi de la réponse requiert la création d’un nouveau canal de communication. WCF fournie par le système <xref:System.ServiceModel.WSDualHttpBinding> liaison utilise une adresse non anonymes. Avec HTTP double, le client crée une requête HTTP pour envoyer un message, puis le serveur doit créer sa propre requête HTTP pour envoyer une réponse. Du fait que le serveur initialise l'envoi, il doit avoir un point de terminaison spécifique pour établir la connexion. Vous devez fournir au serveur l'adresse d'un point de terminaison pour sa réponse. De même, si un service doit répondre à un message unidirectionnel qu’il a reçue, elle requiert également un non adresse, car aucun canal arrière n’est disponible pour la communication. Si le serveur renvoie un message, une opération complètement distincte de celle utilisée pour envoyer le premier message est requise.  
  
-   Mixte est la troisième forme d’adressage qui combine les adresses anonymes et non en fonction du message est envoyé. Un exemple typique d'adressage en mode mixte consiste en l'utilisation d'un ordinateur dédié pour traiter les messages d'erreur ou d'accusé de réception. Si la séquence d’exchange standard pour les réponses est HTTP ou TCP, les réponses utilisent l’adressage anonyme, mais les erreurs utilisent l’adressage non anonyme. Bien que WCF ne fournisse pas mixte fonctionnalité dans un de ses liaisons standards d’adressage, il est possible d’écrire un canal qui permet au service d’envoyer des réponses directement sur le canal arrière (lorsque l’adresse de réponse est anonyme) ou sur un canal distinct (lorsque l’adresse de réponse est non). Dans ce cas, l’élément de liaison du canal est utilisé pour définir <xref:System.ServiceModel.Channels.SupportedAddressingMode> Mixed.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Anonymous">
      <MemberSignature Language="C#" Value="Anonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Anonymous = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Anonymous" />
      <MemberSignature Language="VB.NET" Value="Anonymous" />
      <MemberSignature Language="C++ CLI" Value="Anonymous" />
      <MemberSignature Language="F#" Value="Anonymous = 0" Usage="System.ServiceModel.Channels.SupportedAddressingMode.Anonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Le serveur prend uniquement en charge les adresses anonymes et les clients doivent fournir une adresse de réponse anonyme.</summary>
      </Docs>
    </Member>
    <Member MemberName="Mixed">
      <MemberSignature Language="C#" Value="Mixed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Mixed = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Mixed" />
      <MemberSignature Language="VB.NET" Value="Mixed" />
      <MemberSignature Language="C++ CLI" Value="Mixed" />
      <MemberSignature Language="F#" Value="Mixed = 2" Usage="System.ServiceModel.Channels.SupportedAddressingMode.Mixed" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Le serveur prend en charge les adresses anonymes et non anonymes, et les clients peuvent choisir d'utiliser l'un ou l'autre mode, ou les deux.</summary>
      </Docs>
    </Member>
    <Member MemberName="NonAnonymous">
      <MemberSignature Language="C#" Value="NonAnonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode NonAnonymous = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous" />
      <MemberSignature Language="VB.NET" Value="NonAnonymous" />
      <MemberSignature Language="C++ CLI" Value="NonAnonymous" />
      <MemberSignature Language="F#" Value="NonAnonymous = 1" Usage="System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Le serveur prend uniquement en charge les adresses non anonymes et les clients doivent fournir une adresse de réponse non anonyme.</summary>
      </Docs>
    </Member>
  </Members>
</Type>