<Type Name="IContextManager" FullName="System.ServiceModel.Channels.IContextManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4df14089e9a33087bf1b3c97c7710cbb5c1bdc7" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48739509" /></Metadata><TypeSignature Language="C#" Value="public interface IContextManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContextManager" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IContextManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContextManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContextManager" />
  <TypeSignature Language="F#" Value="type IContextManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit une interface qui vous permet d'obtenir et définir le contexte sur le canal.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour les canaux utilisant <xref:System.ServiceModel.WSHttpContextBinding> avec la valeur <xref:System.ServiceModel.SessionMode.NotAllowed>, le contexte n'est pas récupérable sur les clients utilisant <xref:System.ServiceModel.Channels.IContextManager> car chaque fois que <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> est appelé pour appliquer la sémantique <xref:System.ServiceModel.SessionMode.NotAllowed> sur un canal, un nouveau canal établissant une session est créé. Cette opération signifie que, bien que le contexte soit correctement renvoyé au client dans ce cas, il ne peut pas être extrait en utilisant <xref:System.ServiceModel.Channels.IContextManager>. Vous pouvez toutefois effectuer cette extraction en utilisant <xref:System.ServiceModel.Channels.ContextMessageProperty>, comme indiqué dans le code suivant.  
  
```csharp  
using (new OperationContextScope((IContextChannel)channel))  
{  
    channel.MyChannel("Test");  
    ContextMessageProperty context;  
    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  
    {  
        Console.WriteLine(context.Count);  
    }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la gestion du contexte est activée.</summary>
        <value><see langword="true" /> si le contexte est activé ; sinon <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque la gestion du contexte est activée, le canal de contexte met en cache le contexte dans sa durée de vie. Le contexte peut être récupéré à partir du canal par le biais de la propriété de canal `IContextManager` en appelant la méthode <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A>. Le canal peut également être pré-initialisé avec un contexte spécifique avant d'être ouvert en appelant la méthode <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> sur la propriété de canal. Une fois le canal initialisé avec le contexte, celui-ci ne peut pas être réinitialisé.  
  
 Les éléments suivants sont des invariants dans ce mode :  
  
-   Tout appel à <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> après que le canal ait été ouvert lève une `InvalidOperationException`.  
  
-   Toute tentative d'envoi du contexte par le biais du `ContextMessageProperty` dans un message sortant lève une `InvalidOperationException`.  
  
-   Si un message est reçu du serveur avec un contexte, lorsque le canal est déjà initialisé avec un contexte, cela lève une `ProtocolException`. Notez que vous pouvez recevoir le contexte initial d'un serveur si le canal est ouvert sans définir le contexte explicitement.  
  
-   Le `ContextMessageProperty` sur un message entrant a toujours la valeur `null`.  
  
 Lorsque la gestion du contexte n'est pas activée, le canal de contexte ne gère pas le contexte. C'est la responsabilité de l'application de récupérer, de gérer et d'appliquer le contexte par le biais de `ContextMessageProperty`. Toute tentative d'appeler <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> ou <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> à l'aide de la propriété de canal `IContextManager` provoque une `InvalidOperationException`.  
  
 Tous les cookies HTTP, à l'exception des cookies HTTP de contexte, sont gérés au niveau du canal. Les cookies HTTP de contexte sont gérés au niveau de l'application. Ceci peut avoir des conséquences inattendues lorsque les canaux sont partagés pour communiquer avec différentes instances ciblées par <xref:System.ServiceModel.Channels.ContextMessageProperty>. Le tableau suivant illustre l'affectation des cookies HTTP lorsque <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> a la valeur `true` ou `false`.  
  
|Liaison|Valeur IContextManager.Enabled|Étendue des cookies HTTP de contexte|Étendue des autres cookies HTTP|  
|-------------|-----------------------------------|-------------------------------|------------------------------|  
|BasicHttpBinding|N/A|ChannelFactory|ChannelFactory|  
|BasicHttpContextBinding|true|Canal|Canal|  
|BasicHttpContextBinding|False|Pour chaque message (géré par application de manière explicite)|Canal|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext();" />
      <MemberSignature Language="F#" Value="abstract member GetContext : unit -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="iContextManager.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient le contexte.</summary>
        <returns><see cref="T:System.Collections.Generic.IDictionary`2" /> de paires clé/valeur disposant de l'espace de noms et du nom du contexte.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Le code suivant illustre l'obtention de contexte à partir d'une instance de proxy typée sur le client.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    context = cm.GetContext();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public void SetContext (System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetContext (context As IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetContext(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="abstract member SetContext : System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="iContextManager.SetContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context"><see cref="T:System.Collections.Generic.IDictionary`2" /> de paires clé/valeur contenant l'espace de noms et le nom du contexte défini.</param>
        <summary>Définit le contexte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Le code suivant illustre la façon dont le contexte peut être défini sur le client.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    cm.SetContext(context);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>