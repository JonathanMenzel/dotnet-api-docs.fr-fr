<Type Name="ValueSource" FullName="System.Windows.ValueSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5805f4ddbc46f2fe95a7cd95d5adac5ac93260ed" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39968540" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ValueSource" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ValueSource extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ValueSource" />
  <TypeSignature Language="VB.NET" Value="Public Structure ValueSource" />
  <TypeSignature Language="C++ CLI" Value="public value class ValueSource" />
  <TypeSignature Language="F#" Value="type ValueSource = struct" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="14d42-101">Signale les informations retournées par <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="14d42-101">Reports the information returned from <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14d42-102">La plupart des informations qui <xref:System.Windows.ValueSource> transmet est contenue dans le <xref:System.Windows.ValueSource.BaseValueSource%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="14d42-102">Most of the information that <xref:System.Windows.ValueSource> transmits is contained in the <xref:System.Windows.ValueSource.BaseValueSource%2A> property.</span></span> <span data-ttu-id="14d42-103">Cette propriété contient une valeur d’énumération qui spécifie un aspect global [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] système de propriétés qui est responsable de la valeur effective d’une propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="14d42-103">This property contains an enumeration value that specifies exactly one aspect of the overall [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system that is responsible for the effective value of a dependency property.</span></span>  
  
 <span data-ttu-id="14d42-104">Outre la valeur de base, les autres informations qui peuvent s’avérer intéressantes sur une valeur de propriété de dépendance sont est animée, et si la valeur implique une expression (par exemple, une liaison ou une référence de ressource dynamique).</span><span class="sxs-lookup"><span data-stu-id="14d42-104">Besides the base value, the other information that might be interesting about a dependency property value is whether the value is being animated, and whether the value involves an expression (such as a binding, or a dynamic resource reference).</span></span> <span data-ttu-id="14d42-105">Ces informations sont signalées par <xref:System.Windows.ValueSource.IsAnimated%2A> et <xref:System.Windows.ValueSource.IsExpression%2A> respectivement.</span><span class="sxs-lookup"><span data-stu-id="14d42-105">This information is reported by <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsExpression%2A> respectively.</span></span> <span data-ttu-id="14d42-106">En outre, si le forçage de type agit sur une valeur de propriété, la propriété conserve la valeur souhaitée et la valeur de propriété va tenter d’atteindre cette valeur souhaitée si les contraintes de la contrainte spécifique sont modifiés ou levées.</span><span class="sxs-lookup"><span data-stu-id="14d42-106">Also, if coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="14d42-107">Une propriété forcée n’est pas la valeur souhaitée signalera que <xref:System.Windows.ValueSource.IsCoerced%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="14d42-107">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
    <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
  </Docs>
  <Members>
    <Member MemberName="BaseValueSource">
      <MemberSignature Language="C#" Value="public System.Windows.BaseValueSource BaseValueSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.BaseValueSource BaseValueSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.BaseValueSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseValueSource As BaseValueSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::BaseValueSource BaseValueSource { System::Windows::BaseValueSource get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseValueSource : System.Windows.BaseValueSource" Usage="System.Windows.ValueSource.BaseValueSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.BaseValueSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14d42-108">Obtient une valeur de l'énumération <see cref="T:System.Windows.BaseValueSource" /> qui signale la source ayant fourni le système de propriétés de dépendance avec une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-108">Gets a value of the <see cref="T:System.Windows.BaseValueSource" /> enumeration, which reports the source that provided the dependency property system with a value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14d42-109">Valeur de l’énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-109">A value of the enumeration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14d42-110">La valeur de base n’est pas la valeur effective si la contrainte ou animation agit sur la propriété.</span><span class="sxs-lookup"><span data-stu-id="14d42-110">The base value is not the effective value if either coercion or animation is acting on the property.</span></span> <span data-ttu-id="14d42-111">Vérifiez <xref:System.Windows.ValueSource.IsAnimated%2A> et <xref:System.Windows.ValueSource.IsCoerced%2A> si vous souhaitez déterminer si la valeur de base est la valeur effective.</span><span class="sxs-lookup"><span data-stu-id="14d42-111">Check <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsCoerced%2A> if you want to determine whether the base value is the effective value.</span></span>  
  
 <span data-ttu-id="14d42-112">Vous souhaiterez également vérifier <xref:System.Windows.ValueSource.IsExpression%2A> pour voir si la valeur de base a été évaluée à partir d’une expression.</span><span class="sxs-lookup"><span data-stu-id="14d42-112">You might also want to check <xref:System.Windows.ValueSource.IsExpression%2A> to see if the base value was evaluated out of an expression.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueSource.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="14d42-113">Objet à comparer à ce <see cref="T:System.Windows.ValueSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-113">The object to compare with this <see cref="T:System.Windows.ValueSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14d42-114">Retourne une valeur indiquant si <see cref="T:System.Windows.ValueSource" /> équivaut à un objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-114">Returns a value indicating whether this <see cref="T:System.Windows.ValueSource" /> is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14d42-115">
            <see langword="true" /> si l'objet fourni est équivalent au <see cref="T:System.Windows.ValueSource" /> actuel ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-115">
              <see langword="true" /> if the provided object is equivalent to the current <see cref="T:System.Windows.ValueSource" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14d42-116">Cette implémentation prend en charge l’égalité des valeurs, en fonction de chacune des valeurs de propriété de chaque <xref:System.Windows.ValueSource> structure.</span><span class="sxs-lookup"><span data-stu-id="14d42-116">This implementation supports value equality, based on each of the property values of each <xref:System.Windows.ValueSource> structure.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueSource.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="14d42-117">Retourne le code de hachage pour ce <see cref="T:System.Windows.ValueSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-117">Returns the hash code for this <see cref="T:System.Windows.ValueSource" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14d42-118">Code de hachage d’un entier non signé 32 bits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-118">A 32-bit unsigned integer hash code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14d42-119">Ce code de hachage est basé sur le <xref:System.Windows.ValueSource.BaseValueSource%2A> valeur.</span><span class="sxs-lookup"><span data-stu-id="14d42-119">This hash code is based on the <xref:System.Windows.ValueSource.BaseValueSource%2A> value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="IsAnimated">
      <MemberSignature Language="C#" Value="public bool IsAnimated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnimated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsAnimated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnimated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnimated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnimated : bool" Usage="System.Windows.ValueSource.IsAnimated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14d42-120">Obtient une valeur qui déclare si la propriété est animée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-120">Gets a value that declares whether the property is being animated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14d42-121">
            <see langword="true" /> si la propriété est animée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-121">
              <see langword="true" /> if the property is animated; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14d42-122">Pour toute propriété qui est actuellement en cours d’animation, la source est signalée par <xref:System.Windows.ValueSource.BaseValueSource%2A> ne concerne pas immédiatement, car l’animation fonctionne au niveau de la propriété de dépendance plus élevée que la valeur de base.</span><span class="sxs-lookup"><span data-stu-id="14d42-122">For any property that is currently being animated, the source reported by <xref:System.Windows.ValueSource.BaseValueSource%2A> is not immediately relevant, because the animation operates at higher dependency property precedence than the base value.</span></span> <span data-ttu-id="14d42-123">Pour plus d’informations sur la priorité et les animations, consultez [priorité de valeur de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="14d42-123">For more information about precedence and animations, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCoerced">
      <MemberSignature Language="C#" Value="public bool IsCoerced { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCoerced" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCoerced" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCoerced As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCoerced { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCoerced : bool" Usage="System.Windows.ValueSource.IsCoerced" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14d42-124">Obtient une valeur qui déclare si cette valeur est le résultat d’une implémentation de <see cref="T:System.Windows.CoerceValueCallback" /> appliquée à une propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-124">Gets a value that declares whether this value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14d42-125">
            <see langword="true" /> si la valeur provient d'une implémentation <see cref="T:System.Windows.CoerceValueCallback" /> appliquée à une propriété de dépendance ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-125">
              <see langword="true" /> if the value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14d42-126">Si le forçage de type agit sur une valeur de propriété, la propriété conserve la valeur souhaitée et la valeur de propriété va tenter d’atteindre cette valeur souhaitée si les contraintes de la contrainte spécifique sont modifiés ou levées.</span><span class="sxs-lookup"><span data-stu-id="14d42-126">If coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="14d42-127">Une propriété forcée n’est pas la valeur souhaitée signalera que <xref:System.Windows.ValueSource.IsCoerced%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="14d42-127">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 <span data-ttu-id="14d42-128">Forçage de type agit à priorité plus élevée que la valeur de base et n’est pas à proprement parler un participant dans la façon dont la valeur de base est définie.</span><span class="sxs-lookup"><span data-stu-id="14d42-128">Coercion acts at higher precedence than the base value, and is not strictly speaking a participant in how the base value is set.</span></span> <span data-ttu-id="14d42-129">Par conséquent, l’état de forçage est signalé par cette propriété, plutôt que par une valeur de la <xref:System.Windows.BaseValueSource> énumération.</span><span class="sxs-lookup"><span data-stu-id="14d42-129">Therefore the state of being coerced is reported by this property, rather than by a value of the <xref:System.Windows.BaseValueSource> enumeration.</span></span> <span data-ttu-id="14d42-130">Pour plus d’informations sur la contrainte, les valeurs de base et les priorités, consultez [priorité de valeur de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="14d42-130">For more information about coercion, base values, and precedence, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCurrent">
      <MemberSignature Language="C#" Value="public bool IsCurrent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCurrent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrent : bool" Usage="System.Windows.ValueSource.IsCurrent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14d42-131">Indique si la valeur a été définie par la méthode <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-131">Gets whether the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14d42-132">
            <see langword="true" /> si la valeur a été définie par la méthode <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-132">
              <see langword="true" /> if the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpression">
      <MemberSignature Language="C#" Value="public bool IsExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpression" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsExpression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExpression As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExpression { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExpression : bool" Usage="System.Windows.ValueSource.IsExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14d42-133">Obtient une valeur qui déclare si cette valeur provient d'une expression évaluée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-133">Gets a value that declares whether this value resulted from an evaluated expression.</span>
          </span>
          <span data-ttu-id="14d42-134">Il peut s’agir d’une <see cref="T:System.Windows.Data.BindingExpression" /> qui prend en charge une liaison ou d’une expression interne qui prend en charge [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-134">This might be a <see cref="T:System.Windows.Data.BindingExpression" /> supporting a binding, or an internal expression such as those that support the [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14d42-135">
            <see langword="true" /> si la valeur provient d'une expression évaluée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-135">
              <see langword="true" /> if the value came from an evaluated expression; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14d42-136">Une expression évaluée signale également la valeur de base spécifique, définition de condition dans laquelle l’expression a été appliquée, en tant que valeur dans <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span><span class="sxs-lookup"><span data-stu-id="14d42-136">An evaluated expression will also report the specific base value setting condition where the expression was applied, as a value in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="14d42-137">Le <xref:System.Windows.ValueSource.BaseValueSource%2A> est toujours très utile pour n’importe quelle propriété où <xref:System.Windows.ValueSource.IsExpression%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="14d42-137">The <xref:System.Windows.ValueSource.BaseValueSource%2A> is still very relevant for any property where <xref:System.Windows.ValueSource.IsExpression%2A> is `true`.</span></span> <span data-ttu-id="14d42-138">Savoir si une valeur provient d’une expression peut être particulièrement utile si la valeur a été définie indirectement, par exemple via un modèle ou une valeur de propriété héritée.</span><span class="sxs-lookup"><span data-stu-id="14d42-138">Knowing whether a value came through an expression can be particularly useful if the value was set indirectly, such as through a template or an inherited property value.</span></span>  
  
 <span data-ttu-id="14d42-139">Si une expression n’est pas évaluée (la liaison a échoué ; aucune ressource portant ce nom a été trouvée), la valeur proviendra d’un autre participant dans le système de propriétés, probablement la valeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="14d42-139">If an expression fails to evaluate (the binding failed; no resource of that name was found), then the value will come from some other participant in the property system, most likely the default value.</span></span> <span data-ttu-id="14d42-140">Cette source est ensuite signalée dans <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span><span class="sxs-lookup"><span data-stu-id="14d42-140">That source is then reported in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="14d42-141">Évaluations de l’expression qui a échoué retournera `false` pour <xref:System.Windows.ValueSource.IsExpression%2A>.</span><span class="sxs-lookup"><span data-stu-id="14d42-141">Failed expression evaluations will return `false` for <xref:System.Windows.ValueSource.IsExpression%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.ValueSource * System.Windows.ValueSource -&gt; bool" Usage="vs1 = vs2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1">
          <span data-ttu-id="14d42-142">Premier <see cref="T:System.Windows.ValueSource" /> à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-142">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <param name="vs2">
          <span data-ttu-id="14d42-143">Deuxième <see cref="T:System.Windows.ValueSource" /> à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-143">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14d42-144">Détermine si deux instances <see cref="T:System.Windows.ValueSource" /> ont la même valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-144">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14d42-145">
            <see langword="true" /> si les deux instances <see cref="T:System.Windows.ValueSource" /> sont équivalentes ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-145">
              <see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are equivalent; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14d42-146">Cette implémentation appelle <xref:System.Windows.ValueSource.Equals%2A>, et prend en charge l’égalité basée sur toutes les propriétés de la valeur <xref:System.Windows.ValueSource>.</span><span class="sxs-lookup"><span data-stu-id="14d42-146">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.ValueSource * System.Windows.ValueSource -&gt; bool" Usage="System.Windows.ValueSource.op_Inequality (vs1, vs2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1">
          <span data-ttu-id="14d42-147">Premier <see cref="T:System.Windows.ValueSource" /> à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-147">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <param name="vs2">
          <span data-ttu-id="14d42-148">Deuxième <see cref="T:System.Windows.ValueSource" /> à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-148">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14d42-149">Détermine si deux instances de <see cref="T:System.Windows.ValueSource" /> n'ont pas la même valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-149">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances do not have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14d42-150">
            <see langword="true" /> si les deux instances de <see cref="T:System.Windows.ValueSource" /> ne sont pas équivalentes ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14d42-150">
              <see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are not equivalent; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14d42-151">Cette implémentation appelle <xref:System.Windows.ValueSource.Equals%2A>, retournant son opposé et prend en charge l’égalité des valeurs en fonction de toutes les propriétés de <xref:System.Windows.ValueSource>.</span><span class="sxs-lookup"><span data-stu-id="14d42-151">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, returning its negation, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
  </Members>
</Type>