<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3794828e1dd9f6d221f59f069553788f01bde108" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37491976" /></Metadata><TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des méthodes d’assistance statiques permettant d’interroger des objets dans l’arborescence logique.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.LogicalTreeHelper> classe fournit des méthodes qui vous permet de retourner des collections enfants d’objets ou des objets spécifiques à partir de sous-nœuds de l’arborescence logique. Toutefois, la plupart des opérations d’arborescence objet que vous effectuez en général est également exposée par les propriétés ou méthodes similaires sur <xref:System.Windows.FrameworkElement> ou <xref:System.Windows.FrameworkContentElement>. Par exemple, essayez ce qui suit :  
  
-   Au lieu d’appeler la méthode statique <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> (méthode), qui retourne un énumérateur pour les enfants logiques des objets, utilisez la collection dédiée exposée dans le modèle de contenu pour cet objet. Presque tous les objets qui prennent en charge un modèle de contenu exposent une propriété qui contient la collection d’objets enfants et fournit l’interface prise en charge directement sur cette collection.  
  
-   Au lieu d’appeler la méthode statique <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> méthode pour obtenir un objet enfant en spécifiant son nom, appelez le <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> ou <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> méthode sur des objets spécifiques.  
  
 <xref:System.Windows.LogicalTreeHelper> est particulièrement utile pour les scénarios d’analyse où vous de haut en bas de l’arborescence logique de manière récursive à travers plusieurs niveaux et que vous souhaitez utiliser une approche cohérente pour l’examen des différents objets parents ou enfants. Dans ce cas, vous pouvez accéder à un mélange de modèles de contenu et l’utilisation du modèle de contenu plus API spécifiques serait trop complexes.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Élément d'interface utilisateur à afficher.</param>
        <summary>Tente d'afficher l'élément d'interface utilisateur demandé et déclenche l'événement <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> sur la cible pour signaler les résultats.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il est généralement plus commode d’appeler les méthodes d’instance <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> ou <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> au lieu de cette méthode d’utilitaire statique. Le comportement des méthodes d’instance est équivalent au comportement de la méthode statique.  
  
 Même si le `current` élément d’interface utilisateur fourni a été un <xref:System.Windows.FrameworkContentElement>, l’événement résultant est le même <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> événement, avec origine <xref:System.Windows.FrameworkContentElement> identifiable par la vérification des données de l’événement.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">Objet à partir duquel commencer la recherche. Cet objet doit être un type <see cref="T:System.Windows.FrameworkElement" /> ou <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <param name="elementName">Nom de l'objet à rechercher.</param>
        <summary>Tente de rechercher et de retourner un objet qui a le nom spécifié. La recherche démarre à partir de l'objet spécifié et continue dans les sous-nœuds de l'arborescence logique.</summary>
        <returns>Objet avec le nom correspondant, si la recherche aboutit ; retourne <see langword="null" /> si aucun nom correspondant n'a été trouvé dans l'arborescence logique.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les méthodes <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> et <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> sont en apparence similaire à <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, mais fonctionnent par logique différente :  
  
-   Le sens de la recherche pour <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> est vers les objets enfants (dans l’arborescence) ; le sens de la recherche pour le `FindName` méthodes trouve vers les objets parents (vers le haut l’arborescence).  
  
-   Le `FindName` méthodes sont régies par le concept d’une portée de nom XAML. À l’aide de `FindName` vous êtes assuré qu’un seul objet de ce nom existe, car les portées de nom XAML l’unicité. En revanche, <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> ignore la portée de nom XAML et peut traverser les limites de portée de nom XAML pendant la recherche. Par conséquent, il n’existe aucune garantie d’unicité de la `elementName` nom une fois que les limites sont traversées. Pour plus d’informations sur les portées de nom XAML, consultez [portées de nom XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne la collection d'objets enfants immédiats de l'objet spécifié, en traitant l'arborescence logique.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Objet à partir duquel commencer le traitement de l’arborescence logique. Il peut s'agir de <see cref="T:System.Windows.FrameworkElement" /> ou <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Retourne la collection d’objets enfants immédiats de l’objet spécifié en traitant l’arborescence logique.</summary>
        <returns>Collection énumérable d’objets enfants immédiats de l’arborescence logique de l’objet spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode de signature et d’assistance principalement lorsque vous ne savez pas si `current` est un <xref:System.Windows.FrameworkElement> ou <xref:System.Windows.FrameworkContentElement> et également si cette classe de l’objet prend en charge sa propre collection de modèle de contenu. Si vous pouvez déterminer le type de l’objet que vous interrogez, vérifier l’existence de la propriété de contenu spécifique que vous savez sur ce type. Par exemple, si vous savez que l’objet que vous interrogez est un <xref:System.Windows.Controls.ItemsControl>, vérifiez le <xref:System.Windows.Controls.ItemsControl.Items%2A> propriété à obtenir une collection fortement typée, qui prend en charge les interface de collection et est probablement plus utile qu’un énumérateur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">Objet à partir duquel commencer le traitement de l’arborescence logique.</param>
        <summary>Retourne la collection d'objets enfants immédiats de l'objet <see cref="T:System.Windows.FrameworkContentElement" /> spécifié, en traitant l'arborescence logique.</summary>
        <returns>Collection énumérable d'objets enfants immédiats en commençant par <paramref name="current" /> dans l'arborescence logique.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">Objet à partir duquel commencer le traitement de l’arborescence logique.</param>
        <summary>Retourne la collection d'objets enfants immédiats de l'objet <see cref="T:System.Windows.FrameworkElement" /> spécifié, en traitant l'arborescence logique.</summary>
        <returns>Collection énumérable d'objets enfants immédiats en commençant par <paramref name="current" /> dans l'arborescence logique.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Objet pour lequel rechercher l'objet parent. Il peut s'agir de <see cref="T:System.Windows.FrameworkElement" /> ou <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Retourne l'objet parent de l'objet spécifié en traitant l'arborescence logique.</summary>
        <returns>Objet parent demandé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est simplement un wrapper qui obtient la version du type approprié (<xref:System.Windows.FrameworkElement> ou <xref:System.Windows.FrameworkContentElement>) de la <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> ou <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> propriété ; par conséquent, sauf si vous ne parvenez pas à déterminer le `current` type, vous souhaiterez vérifier respectifs propriétés de l’instance à la place.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>