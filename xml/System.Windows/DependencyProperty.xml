<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc117fffb2ec2f4ee7c294166d054208a4b13ede" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39942027" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <TypeSignature Language="F#" Value="type DependencyProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="bf9c7-101">Représente une propriété qui peut être définie par le biais de méthodes, par exemple style, liaison de données, animation et héritage.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bf9c7-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-102">Un <xref:System.Windows.DependencyProperty> prend en charge les fonctionnalités suivantes dans [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span><span class="sxs-lookup"><span data-stu-id="bf9c7-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="bf9c7-103">La propriété peut être définie dans un style.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-103">The property can be set in a style.</span></span> <span data-ttu-id="bf9c7-104">Pour plus d’informations, consultez [Application d’un style et création de modèles](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="bf9c7-105">La propriété peut être définie via la liaison de données.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-105">The property can be set through data binding.</span></span> <span data-ttu-id="bf9c7-106">Pour plus d’informations sur les propriétés de dépendance de liaison de données, consultez [Comment : lier les propriétés de deux contrôles](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="bf9c7-107">La propriété peut être définie avec une référence de ressource dynamique.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="bf9c7-108">Pour plus d’informations, consultez [Ressources XAML](~/docs/framework/wpf/advanced/xaml-resources.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="bf9c7-109">La propriété peut hériter automatiquement sa valeur d’un élément parent dans l’arborescence d’éléments.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="bf9c7-110">Pour plus d’informations, consultez [Héritage de valeur de propriété](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="bf9c7-111">La propriété peut être animée.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-111">The property can be animated.</span></span> <span data-ttu-id="bf9c7-112">Pour plus d’informations, consultez [Vue d’ensemble de l’animation](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="bf9c7-113">La propriété peut signaler lorsque la valeur précédente de la propriété a été modifiée et que la valeur de propriété peut être forcée.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="bf9c7-114">Pour plus d’informations, consultez [Validation et rappels de propriétés de dépendance](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="bf9c7-115">La propriété signale des informations à [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], telles que si la modification d’une valeur de propriété doit requérir que le système de disposition recompose les visuels d’un élément.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="bf9c7-116">La propriété reçoit la prise en charge dans le [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bf9c7-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="bf9c7-117">Par exemple, la propriété peut être modifiée dans le **propriétés** fenêtre.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="bf9c7-118">Pour en savoir plus sur les propriétés de dépendance, consultez [vue d’ensemble des propriétés de dépendance](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="bf9c7-119">Si vous souhaitez que les propriétés de vos types personnalisés pour prendre en charge les fonctionnalités dans la liste précédente, vous devez créer une propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="bf9c7-120">Pour savoir comment créer des propriétés de dépendance personnalisées, consultez [des propriétés de dépendance personnalisées](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="bf9c7-121">Une propriété jointe est une propriété qui permet à n’importe quel objet pour signaler des informations pour le type qui définit la propriété jointe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="bf9c7-122">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], n’importe quel type qui hérite de <xref:System.Windows.DependencyObject> pouvez utiliser une propriété jointe, quel que soit l’indique si le type hérite du type qui définit la propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="bf9c7-123">Une propriété jointe est une fonctionnalité de le [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] langage.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="bf9c7-124">Pour définir une propriété jointe dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], utilisez le *TypePropriétaire*.* propertyName* syntaxe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="bf9c7-125">Un exemple d’une propriété jointe est le <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="bf9c7-126">Si vous souhaitez créer une propriété qui peut être utilisée sur tous les <xref:System.Windows.DependencyObject> types, vous devez créer une propriété jointe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="bf9c7-127">Pour en savoir plus sur les propriétés jointes, notamment comment les créer, consultez [vue d’ensemble des propriétés jointes](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="bf9c7-128">Utilisation d'attributs XAML</span><span class="sxs-lookup"><span data-stu-id="bf9c7-128">XAML Attribute Usage</span></span>  
  
```  
<object property="dependencyPropertyName"/>  
- or -  
<object property="ownerType.dependencyPropertyName"/>  
- or -  
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="bf9c7-129">Valeurs XAML</span><span class="sxs-lookup"><span data-stu-id="bf9c7-129">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="bf9c7-130">Chaîne qui spécifie le <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> de la propriété de dépendance souhaitée.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-130">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="bf9c7-131">Cela peut être précédée d’un préfixe d’espace de noms XML si la propriété n’est pas dans l’espace de noms XML par défaut (pour plus d’informations, consultez [espaces de noms XAML et Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span><span class="sxs-lookup"><span data-stu-id="bf9c7-131">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="bf9c7-132">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="bf9c7-132">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="bf9c7-133">Chaîne qui spécifie un type de propriétaire d’une propriété de dépendance, un point (.), puis le <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-133">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bf9c7-134">`ownerType` peut également être précédé par un préfixe d’espace de noms XML.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-134">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="bf9c7-135">Cette utilisation est particulière à liaison tardive styles et modèles, où le propriétaire de la propriété de dépendance doit être spécifié pour l’analyse de contexte, car le `TargetType` n’est pas encore connu.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-135">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="bf9c7-136">Pour plus d’informations, consultez [Application d’un style et création de modèles](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-136">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="bf9c7-137">`attachedPropertyOwnerType` *.*</span><span class="sxs-lookup"><span data-stu-id="bf9c7-137">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="bf9c7-138">Chaîne qui spécifie le propriétaire d’une propriété jointe, un point (.), puis le nom de la propriété jointe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-138">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="bf9c7-139">`attachedPropertyOwnerType` peut également être précédé par un préfixe d’espace de noms XML.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-139">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-140">Ajoute un autre type en tant que propriétaire d’une propriété de dépendance qui a déjà été inscrite à un type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-140">Adds another type as an owner of a dependency property that has already been registered to a type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-141">Type à ajouter en tant que propriétaire de cette propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-141">The type to add as an owner of this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-142">Ajoute un autre type en tant que propriétaire d’une propriété de dépendance qui a déjà été inscrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-142">Adds another type as an owner of a dependency property that has already been registered.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-143">Référence à l’identificateur <see cref="T:System.Windows.DependencyProperty" /> d’origine qui identifie la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-143">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="bf9c7-144">Cet identificateur doit être exposé par la classe d’ajout en tant que champ <see langword="public static readonly" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-144">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-145">Cette méthode permet le système de propriétés identifier une propriété de dépendance sur un type qui n’a pas inscrit initialement cette propriété de dépendance particulière.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-145">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="bf9c7-146">En règle générale, <xref:System.Windows.DependencyProperty.AddOwner%2A> est utilisé pour ajouter des propriétés de dépendance à des classes qui n’exposent pas déjà cette propriété de dépendance via l’héritage de classe managée (héritage de classe provoque les propriétés de wrapper être héritée par la classe dérivée et par conséquent fournit l’accès général de table des membres à la propriété de dépendance déjà).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-146">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="bf9c7-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> permet le système de propriétés identifier une propriété de dépendance sur un type qui n’a pas inscrit initialement cette propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="bf9c7-148">Cette signature ne permet pas pour la spécification des métadonnées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-148">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="bf9c7-149">Lorsque vous utilisez cette méthode, les métadonnées sont générées automatiquement pour le nouveau <xref:System.Windows.DependencyProperty> et son type de propriétaire.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-149">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="bf9c7-150">Les métadonnées générées automatiquement sont le résultat des métadonnées fusionnées à partir de tous les types de base qui ont cette propriété est définie.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-150">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="bf9c7-151">Si aucune métadonnée fusionnée n’est disponible, les métadonnées par défaut pour la propriété sont utilisée.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-151">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="bf9c7-152">Si la propriété est inscrite à l’aide de la <xref:System.Windows.DependencyProperty.RegisterAttached%2A> (méthode), les métadonnées par défaut est le même que les métadonnées qui sont créée lorsque <xref:System.Windows.DependencyProperty.RegisterAttached%2A> a été appelée.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-152">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="bf9c7-153">Sinon, le <xref:System.Windows.PropertyMetadata> objet est créé avec le <xref:System.Windows.PropertyMetadata.DefaultValue%2A> propriété la valeur par défaut du type de propriété et toutes les autres propriétés de la <xref:System.Windows.PropertyMetadata> est défini sur `null`.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-153">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="bf9c7-154">Utilisez le <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature si vous souhaitez fournir des métadonnées pour la version de la propriété de dépendance comme ajouté au type fourni.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-154">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="bf9c7-155">La valeur de retour de cette méthode est généralement utilisée pour déclarer et exposer la propriété de dépendance en stockant un identificateur de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-155">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="bf9c7-156">L’identificateur fournit l’accès à la propriété de dépendance si vous souhaitez appeler le système de propriétés [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] par rapport à la propriété de dépendance, en particulier, tel qu’il existe sur la classe propriétaire d’ajout.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-156">The identifier provides access to the dependency property if you want to call property system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="bf9c7-157">Le même nom de propriété pour le propriétaire d’origine et ajout d’un propriétaire doit être utilisé pour indiquer les fonctionnalités semblables.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-157">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="bf9c7-158">Vous devez utiliser le <xref:System.Windows.DependencyProperty> valeur de retour de la <xref:System.Windows.DependencyProperty.AddOwner%2A> méthode pour définir l’identificateur de propriété de dépendance et également déclarer [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] des wrappers de propriété pour les propriétés de dépendance qui sont ajoutées aux types à l’aide de <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-158">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="bf9c7-159">Le <xref:System.Windows.DependencyProperty.AddOwner%2A> méthodologie recommandée ci-dessus est utilisée lors de la création de propriétés de dépendance sont déclarées dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bf9c7-159">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="bf9c7-160">Par exemple, les deux <xref:System.Windows.Controls.Border> et <xref:System.Windows.Controls.Control> définir un `BorderBrush` propriété de dépendance, qui ont des fonctionnalités similaires.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-160">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="bf9c7-161"><xref:System.Windows.Controls.Control> définit son `BorderBrush` propriété au système de propriétés en appelant <xref:System.Windows.DependencyProperty.AddOwner%2A> basée sur le propriétaire d’origine <xref:System.Windows.Controls.Border> et son inscrit <xref:System.Windows.Controls.Border.BorderBrushProperty> identificateur de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-161"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="bf9c7-162">Le <xref:System.Windows.DependencyProperty.AddOwner%2A> retourner la valeur est ensuite utilisée pour établir un nouvelle statique <xref:System.Windows.DependencyProperty> champ (<xref:System.Windows.Controls.Control.BorderBrushProperty>) de cette propriété sur l’ajout d’un propriétaire et un `BorderBrush` wrapper de propriété est également déclaré.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-162">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner (ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-163">Type à ajouter en tant que propriétaire de cette propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-163">The type to add as owner of this dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bf9c7-164">Métadonnées qui qualifient la propriété de dépendance telle qu’elle existe sur le type fourni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-164">The metadata that qualifies the dependency property as it exists on the provided type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-165">Ajoute un autre type en tant que propriétaire d’une propriété de dépendance déjà inscrite, et fournit des métadonnées de propriété de dépendance à la propriété de dépendance telle qu’elle existe sur le type de propriétaire fourni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-165">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-166">Référence à l’identificateur <see cref="T:System.Windows.DependencyProperty" /> d’origine qui identifie la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-166">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="bf9c7-167">Cet identificateur doit être exposé par la classe d’ajout en tant que champ <see langword="public static readonly" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-167">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-168">Cette méthode permet le système de propriétés identifier une propriété de dépendance sur un type qui n’a pas inscrit initialement cette propriété de dépendance particulière.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-168">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="bf9c7-169">La valeur de retour de cette méthode est utilisée pour déclarer et exposer la propriété de dépendance, en particulier car elle existe sur la classe propriétaire d’ajout.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-169">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="bf9c7-170">En règle générale, le même nom de propriété pour le propriétaire d’origine et ajout d’un propriétaire doit être utilisé pour indiquer les fonctionnalités semblables.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-170">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="bf9c7-171">Il est recommandé d’exposer les identificateurs, comme pour les nouveaux [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] des wrappers de propriété pour les propriétés de dépendance qui sont ajoutées aux types à l’aide de <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-171">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="bf9c7-172">Le <xref:System.Windows.DependencyProperty.AddOwner%2A> méthodologie recommandée ci-dessus est utilisée lors de la création [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] déclarés dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bf9c7-172">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="bf9c7-173">Par exemple, les deux <xref:System.Windows.Controls.Border> et <xref:System.Windows.Controls.Control> définir un `BorderBrush` propriété de dépendance, qui ont des fonctionnalités similaires.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-173">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="bf9c7-174"><xref:System.Windows.Controls.Control> définit son `BorderBrush` propriété au système de propriétés en appelant <xref:System.Windows.DependencyProperty.AddOwner%2A> propriétaire d’origine <xref:System.Windows.Controls.Border> et son inscrit <xref:System.Windows.Controls.Border.BorderBrushProperty> identificateur de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-174"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="bf9c7-175">Le <xref:System.Windows.DependencyProperty.AddOwner%2A> retourner la valeur est ensuite utilisée pour établir un mappage statique <xref:System.Windows.DependencyProperty> champ (<xref:System.Windows.Controls.Control.BorderBrushProperty>) de cette propriété sur l’ajout d’un propriétaire et un `BorderBrush` wrapper de propriété est également déclaré.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-175">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>)for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="bf9c7-176">Identificateur de propriété de dépendance de l’ajout d’un propriétaire doit être utilisé pour les opérations telles que <xref:System.Windows.DependencyObject.GetValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-176">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="bf9c7-177">Toutefois, les opérations spécifiques au type impliquant des types ou des instances de la classe qui a été ajouté comme propriétaire avec des métadonnées différentes est toujours retournent le résultats attendus, même si la version d’origine (pas le propriétaire ajouté) identificateur de propriété de dépendance est spécifié dans appels aux méthodes telles que <xref:System.Windows.DependencyObject.GetValue%2A> ou <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-177">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="bf9c7-178">Les métadonnées pour l’ajout d’un propriétaire sont conservés après par le <xref:System.Windows.DependencyProperty.AddOwner%2A> s’appeler lui-même, pas nécessairement référencés exclusivement par le champ d’identificateur de classe propriétaire Ajout.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-178">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="bf9c7-179">Néanmoins, il est conseillé pour exposer l’identificateur, comme pour les nouveaux [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] des wrappers de propriété pour les propriétés de dépendance qui sont ajoutées aux types à l’aide de <xref:System.Windows.DependencyProperty.AddOwner%2A>, car sinon, crée une disparité entre les [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] et [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] représentations sous forme de vos propriétés.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-179">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="bf9c7-180">Métadonnées fournies sont fusionnées avec les métadonnées de propriété pour la propriété de dépendance telle qu’elle existe sur le propriétaire de base.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-180">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="bf9c7-181">Des caractéristiques qui ont été spécifiées dans les métadonnées de base d’origine seront conservé.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-181">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="bf9c7-182">Seules ces caractéristiques qui ont été modifiés en particulier dans les nouvelles métadonnées remplacent les caractéristiques des métadonnées de base.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-182">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="bf9c7-183">Certaines caractéristiques, telles que <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, sont remplacées si elles sont spécifiées dans les nouvelles métadonnées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-183">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="bf9c7-184">D’autres, tels que <xref:System.Windows.PropertyChangedCallback>, sont combinées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-184">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="bf9c7-185">Au final, le comportement de fusion varie selon le type de métadonnées de propriété utilisé pour le remplacement, donc le comportement décrit ici concerne les classes de métadonnées de propriété existantes utilisées par [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] propriétés de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-185">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="bf9c7-186">Pour plus d’informations, consultez [les métadonnées de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-metadata.md) et [les métadonnées de propriété de Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-186">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMetadata : System.Windows.PropertyMetadata" Usage="System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-187">Obtient les métadonnées par défaut de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-187">Gets the default metadata of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bf9c7-188">Métadonnées par défaut de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-188">The default metadata of the dependency property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-189">Les métadonnées par défaut correspond aux métadonnées de propriété qui sont disponible pour cet objet particulier ou un objet d’un type dérivé où aucune métadonnée de remplacement a été fournie par explicite <xref:System.Windows.DependencyProperty.Register%2A> ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> appeler.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-189">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="bf9c7-190">Si le propriétaire d’origine applique les métadonnées pour la première <xref:System.Windows.DependencyProperty.Register%2A> appel qui a établi la propriété de dépendance, alors que les métadonnées sont retournée en tant que <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-190">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="bf9c7-191">Si aucune métadonnée n’a été appliquée dans la version d’origine <xref:System.Windows.DependencyProperty.Register%2A> appeler, les métadonnées par défaut sont alors généré depuis le <xref:System.Windows.DependencyProperty.Register%2A> appel et cette valeur est retournée en tant que le <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-191">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="bf9c7-192">L’objectif principal de l’association de métadonnées par défaut avec un <xref:System.Windows.DependencyProperty> consiste à fournir une valeur par défaut de cette propriété sur n’importe quel <xref:System.Windows.DependencyObject> ou un type dérivé.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-192">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="bf9c7-193">Pour les propriétés non jointes, le type de métadonnées retourné par cette propriété ne peut pas être casté aux types dérivés de <xref:System.Windows.PropertyMetadata> tapez, même si la propriété a été inscrite avec un type de métadonnées dérivées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-193">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="bf9c7-194">Si vous souhaitez que les métadonnées inscrite à l’origine, notamment son type de métadonnées dérivées éventuellement d’origine, appelez <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> au lieu de cela, en passant l’enregistrement d’origine de type en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-194">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="bf9c7-195">Pour les propriétés jointes, le type de métadonnées retourné par cette propriété correspond au type donné dans la version d’origine <xref:System.Windows.DependencyProperty.RegisterAttached%2A> méthode d’inscription.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-195">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyProperty.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-196">Retourne un code de hachage pour ce <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-196">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-197">Code de hachage pour cette <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-197">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-198">Le système de propriétés utilise son propre identificateur unique <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, et la valeur de cette propriété est retournée par <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-198">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-199">Retourne les métadonnées associées à cette propriété de dépendance telles qu’elles existent pour un type particulier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-199">Returns the metadata associated with this dependency property as it exists for a particular type.</span>
          </span>
          <span data-ttu-id="bf9c7-200">Il peut s’agir du type où la propriété de dépendance a été inscrite initialement, un type auquel elle a été ajoutée par la suite, ou un type où la propriété de dépendance a été obtenue par le biais de l’héritage mais où les métadonnées ont été substituées de manière spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-200">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : Type -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata forType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="bf9c7-201">Type spécifique à partir duquel récupérer les métadonnées de propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-201">The specific type from which to retrieve the dependency property metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-202">Retourne les métadonnées pour cette propriété de dépendance telle qu’elles existent sur un type existant spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-202">Returns the metadata for this dependency property as it exists on a specified existing type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-203">Objet de métadonnées de propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-203">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-204">Spécifiez le type ou une référence d’objet à utiliser comme type est nécessaire, car les métadonnées peuvent varier de l’inscription d’origine due aux <xref:System.Windows.DependencyProperty.AddOwner%2A> ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> appels qui modifient les métadonnées de la propriété de dépendance telle qu’elle existe sur un type.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-204">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-205">L’exemple suivant obtient des métadonnées pour une propriété de dépendance selon son type.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-205">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="bf9c7-206">Le type est obtenu en utilisant un `typeof` opérateur.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-206">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObject -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="bf9c7-207">Objet de dépendance dont le type est vérifié pour déterminer de quelle version spécifique au type de la propriété de dépendance les métadonnées doivent provenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-207">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-208">Retourne les métadonnées pour cette propriété de dépendance telle qu’elles existent sur l’instance d’objet spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-208">Returns the metadata for this dependency property as it exists on the specified object instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-209">Objet de métadonnées de propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-209">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-210">En spécifiant le type ou une référence d’objet est nécessaire, car les métadonnées de toute propriété de dépendance peuvent varier de l’inscription d’origine due aux <xref:System.Windows.DependencyProperty.AddOwner%2A> ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> appels qui peuvent restreindre les métadonnées de propriété car elle existe sur un type.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-210">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="bf9c7-211">Lorsque vous demandez des métadonnées de propriété basées sur une instance, vous passez simplement l’instance afin que son type peut être évalué en interne.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-211">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="bf9c7-212">Métadonnées de propriété de dépendance ne varient pas par instance ; Il est toujours cohérent pour n’importe quelle combinaison de la propriété de type donnée.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-212">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-213">L’exemple suivant obtient des métadonnées pour une propriété de dépendance basée sur un spécifique <xref:System.Windows.DependencyObject> instance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-213">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObjectType -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObjectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType">
          <span data-ttu-id="bf9c7-214">Objet spécifique qui enregistre le type d’objet de dépendance à partir duquel les métadonnées de propriété de dépendance sont souhaitées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-214">A specific object that records the dependency object type from which the dependency property metadata is desired.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-215">Retourne les métadonnées pour cette propriété de dépendance telle qu’elles existent sur un type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-215">Returns the metadata for this dependency property as it exists on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-216">Objet de métadonnées de propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-216">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-217">En spécifiant le type ou une référence d’objet est nécessaire, car les métadonnées de toute propriété de dépendance peuvent varier de l’inscription d’origine due aux <xref:System.Windows.DependencyProperty.AddOwner%2A> ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> appels qui peuvent restreindre les métadonnées de propriété car elle existe sur un type.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-217">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-218">L’exemple suivant obtient des métadonnées pour une propriété de dépendance selon son <xref:System.Windows.DependencyObjectType>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-218">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalIndex : int" Usage="System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-219">Obtient une valeur générée en interne qui identifie uniquement la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-219">Gets an internally generated value that uniquely identifies the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bf9c7-220">Identificateur numérique unique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-220">A unique numeric identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-221">Cette valeur est un entier, pas un identificateur global unique (GUID).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-221">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="bf9c7-222">En règle générale, à l’aide de cette valeur d’index n’est pas obligatoire, et il n’existe aucun accès d’index aux tables de toutes les propriétés de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-222">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="bf9c7-223">Propriétés de dépendance doivent plutôt être référencées par leurs champs d’identificateur.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-223">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="bf9c7-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> est utilisé en interne pour un accès plus rapide aux structures de données qui utilisent le <xref:System.Windows.DependencyProperty.GlobalIndex%2A> comme un index de tableau de base zéro.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="bf9c7-225">Une utilisation semblable peut avoir des applications pour les concepteurs ou d’outils.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-225">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidType : obj -&gt; bool" Usage="dependencyProperty.IsValidType value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="bf9c7-226">Valeur à contrôler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-226">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-227">Détermine si une valeur spécifiée est acceptable pour le type de cette propriété de dépendance, comme vérifié par rapport au type de propriété fourni dans l'inscription de propriété de dépendance d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-227">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-228">
            <see langword="true" /> si la valeur spécifiée est le type de propriété inscrit ou un type dérivé acceptable ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-228">
              <see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-229">La valeur `null` est un type valide pour les propriétés de dépendance de type référence ou pour un <xref:System.Nullable%601> propriété de dépendance et retournerait `true` pour ces cas.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-229">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="bf9c7-230">Dans le cas où la propriété de dépendance n’est ni une référence ni un <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> retournera `false` pour une valeur null au lieu de déclencher une exception.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-230">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-231">L’exemple suivant utilise <xref:System.Windows.DependencyProperty.IsValidType%2A> en tant qu’une vérification avant d’appeler <xref:System.Windows.DependencyObject.SetValue%2A> sur la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-231">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidValue : obj -&gt; bool" Usage="dependencyProperty.IsValidValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="bf9c7-232">Valeur à contrôler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-232">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-233">Détermine si la valeur fournie est acceptée pour le type de propriété à travers la vérification de type de base, et également si elle se trouve dans la plage de valeurs autorisée pour ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-233">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-234">
            <see langword="true" /> si la valeur est acceptable et est du type correct ou un type dérivé ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-234">
              <see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-235">Pour une propriété de dépendance, une plage autorisée de valeurs pour ce type peut être spécifiée via un <xref:System.Windows.ValidateValueCallback> qui est fourni dans l’inscription de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-235">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="bf9c7-236">Cette méthode appelle <xref:System.Windows.DependencyProperty.IsValidType%2A> en interne.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-236">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="bf9c7-237">Si la propriété de dépendance en question n’a pas <xref:System.Windows.ValidateValueCallback>, puis l’appel de cette méthode équivaut à appeler <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-237">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="bf9c7-238">Si la propriété de dépendance a un <xref:System.Windows.ValidateValueCallback>et si <xref:System.Windows.DependencyProperty.IsValidType%2A> a retourné `true`, puis la valeur retournée sera tel qu’implémenté dans le rappel.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-238">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="bf9c7-239">Une valeur null est une valeur valide pour les propriétés de dépendance de type référence ou pour un <xref:System.Nullable%601> propriété de dépendance et retournerait `true` pour ces cas.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-239">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="bf9c7-240">Dans le cas où la propriété de dépendance n’est ni une référence ni un <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> retournera `false` pour une valeur null au lieu de déclencher une exception.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-240">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-241">L’exemple suivant utilise <xref:System.Windows.DependencyProperty.IsValidValue%2A> en tant qu’une vérification avant d’appeler <xref:System.Windows.DependencyObject.SetValue%2A> sur la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-241">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-242">Obtient le nom de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-242">Gets the name of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bf9c7-243">Nom de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-243">The name of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-244">Cette propriété obtient le nom fourni en tant que le `name` paramètre lors de l’inscription de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-244">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="bf9c7-245">Ce nom est immuable et ne peut pas être `null` ou une chaîne vide.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-245">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="bf9c7-246">Les enregistrements de nom dupliqué sur le même type de propriétaire ne sont pas autorisées et lèvent une exception lorsque vous essayez d’inscrire le doublon.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-246">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bf9c7-247">Le <xref:System.Windows.DependencyProperty.Name%2A> d’une dépendance de propriété doit suivre la convention de mise en correspondance le nom de son identificateur de propriété de dépendance sans le suffixe « Propriété ».</span><span class="sxs-lookup"><span data-stu-id="bf9c7-247">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="bf9c7-248">Pour plus d’informations, consultez [Propriétés de dépendance personnalisées](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-248">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-249">L’exemple suivant interroge plusieurs caractéristiques d’un identificateur de propriété de dépendance, y compris le <xref:System.Windows.DependencyProperty.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-249">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-250">Fournit des métadonnées de remplacement pour cette propriété de dépendance quand elle est présente sur des instances d’un type spécifié, différentes des métadonnées qui ont été fournies dans l’inscription de la propriété de dépendance initiale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-250">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="bf9c7-251">Type où cette propriété de dépendance est héritée et emplacement où les métadonnées de remplacement fournies sont appliquées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-251">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bf9c7-252">Métadonnées à appliquer à la propriété de dépendance sur le type de substitution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-252">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-253">Spécifie les métadonnées de remplacement pour cette propriété de dépendance quand elle est présente sur des instances d’un type spécifié, substituant les métadonnées qui existaient pour la propriété de dépendance quand elle a été héritée de types de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-253">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-254">Métadonnées de propriété de dépendance doivent être remplacée avant que le système de propriétés utilise la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-254">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="bf9c7-255">Cela équivaut à l’heure à laquelle les instances spécifiques sont créées à l’aide de la classe qui inscrit la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-255">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="bf9c7-256">Les appels à <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> doit uniquement être effectuée dans les constructeurs statiques du type qui fournit lui-même comme le `forType` paramètre de cette méthode, ou à travers une instanciation semblable.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-256">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="bf9c7-257">Tente de modifier les métadonnées une fois que les instances du type propriétaire existent ne déclenche pas d’exceptions, mais entraîne des comportements incohérents dans le système de propriétés.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-257">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="bf9c7-258">Une fois que les métadonnées pour un remplacement de la classe dérivée particulière sont établie avec cette méthode, les tentatives suivantes de substituer des métadonnées sur cette même classe dérivée lève une exception.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-258">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="bf9c7-259">Métadonnées fournies sont fusionnées avec les métadonnées de propriété pour la propriété de dépendance telle qu’elle existe sur le propriétaire de base.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-259">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="bf9c7-260">Des caractéristiques qui ont été spécifiées dans les métadonnées de base d’origine seront persistantes ; seules ces caractéristiques qui ont été modifiés en particulier dans les nouvelles métadonnées remplacent les caractéristiques des métadonnées de base.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-260">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="bf9c7-261">Certaines caractéristiques, telles que <xref:System.Windows.PropertyMetadata.DefaultValue%2A> sont remplacés si spécifié dans les nouvelles métadonnées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-261">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="bf9c7-262">D’autres, tels que <xref:System.Windows.PropertyChangedCallback>, sont combinées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-262">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="bf9c7-263">Au final, le comportement de fusion varie selon le type de métadonnées de propriété utilisé pour le remplacement, donc le comportement décrit ici concerne les classes de métadonnées de propriété existantes utilisées par [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] propriétés de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-263">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="bf9c7-264">Pour plus d’informations, consultez [les métadonnées de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-metadata.md) et [les métadonnées de propriété de Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-264">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bf9c7-265">Vous avez essayé de substituer des métadonnées sur une propriété de dépendance en lecture seule (vous ne pouvez pas effectuer cette opération à l’aide de cette signature).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-265">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf9c7-266">Des métadonnées ont déjà été établies pour la propriété de dépendance telle qu’elle existe sur le type fourni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-266">Metadata was already established for the dependency property as it exists on the provided type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata * System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="bf9c7-267">Type où cette propriété de dépendance est héritée et emplacement où les métadonnées de remplacement fournies sont appliquées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-267">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bf9c7-268">Métadonnées à appliquer à la propriété de dépendance sur le type de substitution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-268">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="bf9c7-269">Clé d’accès pour une propriété de dépendance en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-269">The access key for a read-only dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-270">Fournit des métadonnées de remplacement pour une propriété de dépendance en lecture seule quand elle est présente sur des instances d’un type spécifié, substituant les métadonnées fournies dans l’inscription de la propriété de dépendance initiale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-270">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span>
          </span>
          <span data-ttu-id="bf9c7-271">Vous devez passer le <see cref="T:System.Windows.DependencyPropertyKey" /> pour la propriété de dépendance en lecture seule pour éviter de déclencher une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-271">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-272">Cette signature fournit l’implémentation sous-jacente pour un identificateur de propriété de dépendance en lecture seule (<xref:System.Windows.DependencyPropertyKey>) (méthode).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-272">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="bf9c7-273">Si la substitution de métadonnées pour une propriété de dépendance en lecture-écriture, utilisez <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-273">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="bf9c7-274">Métadonnées de propriété de dépendance doivent être remplacée avant que le système de propriétés utilise la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-274">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="bf9c7-275">Cela équivaut à la fois des objets spécifiques sont créés pour la classe qui inscrit la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-275">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="bf9c7-276">Les appels à <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> doit uniquement être effectuée dans les constructeurs statiques du type qui fournit lui-même comme le `forType` paramètre de cette méthode, ou à travers une instanciation semblable.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-276">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="bf9c7-277">Tente de modifier les métadonnées une fois que les instances du type propriétaire existent ne déclenche pas d’exceptions, mais entraîne des comportements incohérents dans le système de propriétés.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-277">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="bf9c7-278">Une fois que les métadonnées pour un remplacement de la classe dérivée particulière sont établie avec cette méthode, les tentatives suivantes de substituer des métadonnées sur cette même classe dérivée lève une exception.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-278">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="bf9c7-279">Métadonnées fournies sont fusionnées avec les métadonnées de propriété pour la propriété de dépendance telle qu’elle existe sur le propriétaire de base.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-279">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="bf9c7-280">Des caractéristiques qui ont été spécifiées dans les métadonnées de base d’origine seront persistantes ; seules ces caractéristiques qui ont été modifiés en particulier dans les nouvelles métadonnées remplacent les caractéristiques des métadonnées de base.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-280">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="bf9c7-281">Certaines caractéristiques, telles que <xref:System.Windows.PropertyMetadata.DefaultValue%2A> sont remplacés si spécifié dans les nouvelles métadonnées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-281">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="bf9c7-282">D’autres, tels que <xref:System.Windows.PropertyChangedCallback>, sont combinées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-282">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="bf9c7-283">Le comportement de fusion varie selon le type de métadonnées de propriété utilisé pour le remplacement.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-283">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="bf9c7-284">Pour plus d’informations, consultez [les métadonnées de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-metadata.md) et [les métadonnées de propriété de Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-284">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-285">Obtient le type de l’objet qui a inscrit la propriété de dépendance avec le système de propriétés ou qui s’est ajouté comme propriétaire de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-285">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bf9c7-286">Type de l’objet qui a inscrit la propriété ou qui s’est ajouté comme propriétaire de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-286">The type of the object that registered the property or added itself as owner of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-287">Cette valeur a été fournie pendant l’inscription de propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-287">This value was provided during property registration.</span></span> <span data-ttu-id="bf9c7-288">Le propriétaire sera soit le type d’inscription d’origine dans le cas d’un <xref:System.Windows.DependencyProperty> identificateur généré à partir d’un <xref:System.Windows.DependencyProperty.Register%2A> appel, ou le type qui l’a ajouté en tant que propriétaire de l’un <xref:System.Windows.DependencyProperty> identificateur généré à partir d’un <xref:System.Windows.DependencyProperty.AddOwner%2A> appeler.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-288">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="bf9c7-289">Le <xref:System.Windows.DependencyProperty.OwnerType%2A> sur n’importe quel donné <xref:System.Windows.DependencyProperty> est immuable et ne peut pas être `null` dans valide <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-289">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-290">L’exemple suivant obtient le type de propriétaire selon un identificateur de propriété de dépendance `dp`et puis obtient des métadonnées sur le type de propriétaire pour ce même identificateur.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-290">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="bf9c7-291">Cette opération revient en fait à obtenir <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> sur `dp`.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-291">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-292">Obtient le type que la propriété de dépendance utilise pour sa valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-292">Gets the type that the dependency property uses for its value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bf9c7-293">
            <see cref="T:System.Type" /> de la valeur de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-293">The <see cref="T:System.Type" /> of the property value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-294">Cette propriété indique le type de valeur de la propriété comme déclaré par l’inscription de propriété d’origine, via le `propertyType` paramètre.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-294">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="bf9c7-295">Similaire à la <xref:System.Windows.DependencyProperty.Name%2A>, le type de propriété d’une propriété de dépendance est immuable après l’inscription.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-295">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-296">L’exemple suivant interroge plusieurs caractéristiques d’un identificateur de propriété de dépendance, y compris le <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-296">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="bf9c7-297">La chaîne de nom de type de la <xref:System.Windows.DependencyProperty.PropertyType%2A> est obtenu à partir de retourné <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-297">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool" Usage="System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-298">Obtient une valeur qui indique si la propriété de dépendance identifié par cette instance <see cref="T:System.Windows.DependencyProperty" /> est une propriété de dépendance en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-298">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bf9c7-299">
            <see langword="true" /> si la propriété de dépendance est en lecture seule ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-299">
              <see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-300">Propriétés de dépendance en lecture seule sont enregistrées dans le système de propriétés en appelant le <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> (méthode), par opposition à la <xref:System.Windows.DependencyProperty.Register%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-300">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="bf9c7-301">Propriétés jointes peuvent également être enregistrées en lecture seule ; consultez <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-301">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="bf9c7-302">Propriétés de dépendance en lecture seule requièrent un <xref:System.Windows.DependencyPropertyKey> identificateur plutôt qu’un <xref:System.Windows.DependencyProperty> identificateur pour effectuer des opérations de métadonnées telles que la substitution des métadonnées ou la définition de la valeur.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-302">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="bf9c7-303">Si vous avez obtenu une collection de <xref:System.Windows.DependencyProperty> identificateurs via un appel à <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> ou un autre [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] qui expose des identificateurs, vérifiez la <xref:System.Windows.DependencyProperty.ReadOnly%2A> valeur avant d’essayer d’appeler <xref:System.Windows.DependencyObject.SetValue%2A> ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> à les utiliser identificateur de propriété de dépendance en tant que paramètre d’entrée, pour vérifier que la propriété de dépendance qui représente l’identificateur n’est pas en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-303">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="bf9c7-304">Si la valeur de <xref:System.Windows.DependencyProperty.ReadOnly%2A> est `true` sur une propriété de dépendance, il n’existe aucun moyen de programmation pour obtenir une référence à la <xref:System.Windows.DependencyPropertyKey> identificateur de cette propriété de dépendance à partir des métadonnées ou à partir de la <xref:System.Windows.DependencyProperty> identificateur ; l’identificateur doit être disponible comme un champ statique pour pouvoir appeler <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> par rapport à une propriété de dépendance en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-304">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="bf9c7-305">Lorsque vous créez une propriété de dépendance personnalisée et inscrivez en lecture seule, vous devez définir uniquement un accesseur get pour le [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] propriété wrapper.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-305">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="bf9c7-306">Sinon, votre classe possède un modèle d’objet déroutant pour le wrapper de propriété par rapport à l’accès à la propriété de dépendance de sauvegarde.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-306">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="bf9c7-307">Pour plus d’informations, consultez [propriétés de dépendance personnalisées](~/docs/framework/wpf/advanced/custom-dependency-properties.md) ou [propriétés de dépendance en lecture seule](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-307">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-308">L’exemple suivant obtienne les métadonnées par défaut et les propriétés d’identificateur de propriété de dépendance à partir de différents champs de propriété de dépendance et utilise les informations pour remplir une table pour implémenter un « navigateur de métadonnées ».</span><span class="sxs-lookup"><span data-stu-id="bf9c7-308">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-309">Inscrit une propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-309">Registers a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bf9c7-310">Nom de la propriété de dépendance à inscrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-310">The name of the dependency property to register.</span>
          </span>
          <span data-ttu-id="bf9c7-311">Le nom doit être unique dans l’espace de noms d’inscription du type de propriétaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-311">The name must be unique within the registration namespace of the owner type.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bf9c7-312">Type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-312">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-313">Type du propriétaire qui inscrit la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-313">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-314">Inscrit une propriété de dépendance avec le nom de propriété, le type de propriété et le type de propriétaire spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-314">Registers a dependency property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-315">Identificateur de la propriété de dépendance qui doit être utilisé pour définir la valeur d'un champ <see langword="public static readonly" /> dans votre classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-315">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bf9c7-316">Cet identificateur est ensuite utilisé pour faire référence ultérieurement à la propriété de dépendance, pour des opérations comme la définition de sa valeur par programmation ou l’obtention de métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-316">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-317">Pour plus d’informations sur l’inscription de propriété de dépendance, consultez <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-317">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bf9c7-318">Nom de la propriété de dépendance à inscrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-318">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bf9c7-319">Type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-319">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-320">Type du propriétaire qui inscrit la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-320">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bf9c7-321">Métadonnées de propriété de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-321">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-322">Inscrit une propriété de dépendance avec le nom de propriété, le type de propriété, le type de propriétaire et les métadonnées de propriété spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-322">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-323">Identificateur de la propriété de dépendance qui doit être utilisé pour définir la valeur d'un champ <see langword="public static readonly" /> dans votre classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-323">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bf9c7-324">Cet identificateur est ensuite utilisé pour faire référence ultérieurement à la propriété de dépendance, pour des opérations comme la définition de sa valeur par programmation ou l’obtention de métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-324">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-325">Pour plus d’informations sur l’inscription de propriété de dépendance, consultez <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-325">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bf9c7-326">Nom de la propriété de dépendance à inscrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-326">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bf9c7-327">Type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-327">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-328">Type du propriétaire qui inscrit la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-328">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bf9c7-329">Métadonnées de propriété de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-329">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="bf9c7-330">Référence à un rappel qui doit exécuter toute validation personnalisée de la valeur de propriété de dépendance au-delà de la validation de type standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-330">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-331">Inscrit une propriété de dépendance avec le nom de propriété, le type de propriétaire et les métadonnées de propriété spécifiés, ainsi qu’un rappel de validation de valeur pour la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-331">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-332">Identificateur de la propriété de dépendance qui doit être utilisé pour définir la valeur d'un champ <see langword="public static readonly" /> dans votre classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-332">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bf9c7-333">Cet identificateur est ensuite utilisé pour faire référence ultérieurement à la propriété de dépendance, pour des opérations comme la définition de sa valeur par programmation ou l’obtention de métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-333">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-334">Pour plus d’informations sur l’inscription de propriété de dépendance, consultez <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-334">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-335">L’exemple suivant inscrit une propriété de dépendance, y compris un rappel de validation (la définition de rappel n’est pas affichée ; pour plus d’informations sur la définition de rappel, consultez <xref:System.Windows.ValidateValueCallback>).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-335">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-336">Inscrit une propriété jointe avec le système de propriétés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-336">Registers an attached property with the property system.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bf9c7-337">Nom de la propriété de dépendance à inscrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-337">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bf9c7-338">Type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-338">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-339">Type du propriétaire qui inscrit la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-339">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-340">Inscrit une propriété jointe avec le nom de propriété, le type de propriété et le type de propriétaire spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-340">Registers an attached property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-341">Identificateur de la propriété de dépendance qui doit être utilisé pour définir la valeur d'un champ <see langword="public static readonly" /> dans votre classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-341">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bf9c7-342">Cet identificateur est ensuite utilisé pour faire référence ultérieurement à la propriété de dépendance, pour des opérations comme la définition de sa valeur par programmation ou l’obtention de métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-342">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-343">Une propriété jointe est un concept de propriété défini par [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bf9c7-343">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="bf9c7-344"> implémente des propriétés jointes en tant que propriétés de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-344"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="bf9c7-345">Étant donné que le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] propriétés jointes sont des propriétés de dépendance, ils peuvent avoir des métadonnées appliquées qui peuvent être utilisée par le système de propriétés général pour les opérations telles que les caractéristiques de mise en page de création de rapports.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-345">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="bf9c7-346">Pour plus d’informations, consultez [Vue d’ensemble des propriétés jointes](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-346">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="bf9c7-347">Pour plus d’informations sur l’inscription de propriété de dépendance, consultez <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-347">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-348">L’exemple suivant inscrit une propriété jointe sur une classe abstraite à l’aide de ce <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-348">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bf9c7-349">Nom de la propriété de dépendance à inscrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-349">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bf9c7-350">Type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-350">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-351">Type du propriétaire qui inscrit la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-351">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="bf9c7-352">Métadonnées de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-352">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="bf9c7-353">Cela peut inclure la valeur par défaut, ainsi que d’autres caractéristiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-353">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-354">Inscrit une propriété jointe avec le nom de propriété, le type de propriété, le type de propriétaire et les métadonnées de propriété spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-354">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-355">Identificateur de la propriété de dépendance qui doit être utilisé pour définir la valeur d'un champ <see langword="public static readonly" /> dans votre classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-355">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bf9c7-356">Cet identificateur est ensuite utilisé pour faire référence ultérieurement à la propriété de dépendance, pour des opérations comme la définition de sa valeur par programmation ou l’obtention de métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-356">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-357">Une propriété jointe est un concept de propriété défini par [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bf9c7-357">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="bf9c7-358"> implémente des propriétés jointes en tant que propriétés de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-358"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="bf9c7-359">Étant donné que le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] propriétés jointes sont des propriétés de dépendance, ils peuvent avoir des métadonnées appliquées qui peuvent être utilisée par le système de propriétés général pour les opérations telles que les caractéristiques de mise en page de création de rapports.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-359">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="bf9c7-360">Pour plus d’informations, consultez [Vue d’ensemble des propriétés jointes](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-360">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="bf9c7-361">Pour plus d’informations sur l’inscription de propriété de dépendance, consultez <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-361">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bf9c7-362">Utilisez RegisterAttached pour les propriétés de dépendance héritant d’une valeur</span><span class="sxs-lookup"><span data-stu-id="bf9c7-362">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bf9c7-363">Un scénario particulier pour inscrire une propriété de dépendance avec <xref:System.Windows.DependencyProperty.RegisterAttached%2A> au lieu de <xref:System.Windows.DependencyProperty.Register%2A> doit prendre en charge l’héritage de valeur de propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-363">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="bf9c7-364">Vous devez enregistrer les propriétés de dépendance héritant d’une valeur avec <xref:System.Windows.DependencyProperty.RegisterAttached%2A> même si la classe définit les accesseurs de wrapper de propriété qui exposent la propriété de dépendance, et même si vous ne souhaitez pas exposer des méthodes statiques Get * et Set * pour fournir true attaché prise en charge les accesseurs de propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-364">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bf9c7-365">Bien que l’héritage de valeur de propriété peut sembler fonctionner pour les propriétés de dépendance non jointes, le comportement de l’héritage d’une propriété non jointes par certaines limites d’éléments dans l’arborescence d’exécution est indéfini.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-365">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bf9c7-366">Enregistrement de la propriété jointe efficacement rend la propriété jointe à une propriété globale pour le système de propriétés et garantit que l’héritage de valeur de propriété fonctionne sur toutes les limites dans une arborescence d’éléments.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-366">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bf9c7-367">Utilisez toujours <xref:System.Windows.DependencyProperty.RegisterAttached%2A> pour inscrire des propriétés où vous spécifiez <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-367">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bf9c7-368">Pour plus d’informations, consultez [Héritage de valeur de propriété](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-368">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bf9c7-369">Nom de la propriété de dépendance à inscrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-369">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bf9c7-370">Type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-370">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-371">Type du propriétaire qui inscrit la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-371">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="bf9c7-372">Métadonnées de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-372">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="bf9c7-373">Cela peut inclure la valeur par défaut, ainsi que d’autres caractéristiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-373">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="bf9c7-374">Référence à un rappel qui doit exécuter toute validation personnalisée de la valeur de propriété de dépendance au-delà de la validation de type standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-374">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-375">Inscrit une propriété jointe avec le type de propriété, le type de propriétaire, les métadonnées de propriété et le rappel de validation de valeur spécifiés pour la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-375">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-376">Identificateur de la propriété de dépendance qui doit être utilisé pour définir la valeur d'un champ <see langword="public static readonly" /> dans votre classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-376">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bf9c7-377">Cet identificateur est ensuite utilisé pour faire référence ultérieurement à la propriété de dépendance, pour des opérations comme la définition de sa valeur par programmation ou l’obtention de métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-377">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-378">Une propriété jointe est un concept de propriété défini par [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bf9c7-378">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="bf9c7-379"> implémente des propriétés jointes en tant que propriétés de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-379"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="bf9c7-380">Étant donné que le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] propriétés jointes sont des propriétés de dépendance, ils peuvent avoir des métadonnées appliquées qui peuvent être utilisée par le système de propriétés général pour les opérations telles que les caractéristiques de mise en page de création de rapports.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-380">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="bf9c7-381">Pour plus d’informations, consultez [Vue d’ensemble des propriétés jointes](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-381">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="bf9c7-382">Pour plus d’informations sur l’inscription de propriété de dépendance, consultez <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-382">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bf9c7-383">Utilisez RegisterAttached pour les propriétés de dépendance héritant d’une valeur</span><span class="sxs-lookup"><span data-stu-id="bf9c7-383">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bf9c7-384">Un scénario particulier pour inscrire une propriété de dépendance avec <xref:System.Windows.DependencyProperty.RegisterAttached%2A> au lieu de <xref:System.Windows.DependencyProperty.Register%2A> doit prendre en charge l’héritage de valeur de propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-384">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="bf9c7-385">Vous devez enregistrer les propriétés de dépendance héritant d’une valeur avec <xref:System.Windows.DependencyProperty.RegisterAttached%2A> même si la classe définit les accesseurs de wrapper de propriété qui exposent la propriété de dépendance, et même si vous ne souhaitez pas exposer des méthodes statiques Get * et Set * pour fournir true attaché prise en charge les accesseurs de propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-385">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bf9c7-386">Bien que l’héritage de valeur de propriété peut sembler fonctionner pour les propriétés de dépendance non jointes, le comportement de l’héritage d’une propriété non jointes par certaines limites d’éléments dans l’arborescence d’exécution est indéfini.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-386">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bf9c7-387">Enregistrement de la propriété jointe efficacement rend la propriété jointe à une propriété globale pour le système de propriétés et garantit que l’héritage de valeur de propriété fonctionne sur toutes les limites dans une arborescence d’éléments.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-387">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bf9c7-388">Utilisez toujours <xref:System.Windows.DependencyProperty.RegisterAttached%2A> pour inscrire des propriétés où vous spécifiez <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-388">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bf9c7-389">Pour plus d’informations, consultez [Héritage de valeur de propriété](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-389">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-390">L’exemple suivant inscrit une propriété jointe sur une classe abstraite à l’aide de ce <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-390">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="bf9c7-391">Cette propriété jointe est une propriété de type énumération, et l’inscription ajoute un rappel de validation pour vérifier que la valeur fournie est une valeur de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-391">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-392">Inscrit une propriété jointe en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-392">Registers a read-only attached property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bf9c7-393">Nom de la propriété de dépendance à inscrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-393">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bf9c7-394">Type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-394">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-395">Type du propriétaire qui inscrit la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-395">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="bf9c7-396">Métadonnées de propriété de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-396">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-397">Inscrit une propriété jointe en lecture seule, avec le type de propriété, le type de propriétaire et les métadonnées de propriété spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-397">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-398">Clé de propriété de dépendance qui doit être utilisée pour définir la valeur d’un champ statique en lecture seule dans votre classe, qui est ensuite utilisée pour faire référence à la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-398">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-399">Cette méthode retourne le type <xref:System.Windows.DependencyPropertyKey>, tandis que <xref:System.Windows.DependencyProperty.RegisterAttached%2A> retourne le type <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-399">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bf9c7-400">En règle générale, les clés qui représentent les propriétés en lecture seule ne sont pas rendues publiques, car les clés peuvent être utilisées pour définir la valeur de propriété de dépendance en appelant <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-400">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bf9c7-401">Votre conception de classe affecte vos exigences, mais il est généralement recommandé de limiter l’accès et la visibilité de n’importe quel <xref:System.Windows.DependencyPropertyKey> uniquement aux parties de votre code qui sont nécessaires pour définir cette propriété de dépendance dans le cadre de la logique d’application ou de la classe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-401">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bf9c7-402">Il est également recommandé d’exposer un identificateur de propriété de dépendance pour la propriété de dépendance en lecture seule, en exposant la valeur de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> comme un `public static readonly` champ sur votre classe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-402">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bf9c7-403">Les propriétés jointes en lecture seule sont un scénario rare, étant donné que le scénario principal pour une propriété jointe est son utilisation dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bf9c7-403">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="bf9c7-404">Sans accesseur Set public, une propriété jointe ne peut pas être définie dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntaxe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-404">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="bf9c7-405">Pour plus d’informations sur l’inscription de propriété de dépendance, consultez <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-405">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bf9c7-406">Utilisez RegisterAttached pour les propriétés de dépendance héritant d’une valeur</span><span class="sxs-lookup"><span data-stu-id="bf9c7-406">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bf9c7-407">Un scénario particulier pour inscrire une propriété de dépendance comme attachée consiste à prendre en charge l’héritage de valeur de propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-407">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="bf9c7-408">Vous devez enregistrer les propriétés de dépendance héritant d’une valeur avec <xref:System.Windows.DependencyProperty.RegisterAttached%2A> même si la classe définit les accesseurs de wrapper de propriété qui exposent la propriété de dépendance, et même si vous ne souhaitez pas exposer des méthodes statiques Get * et Set * pour fournir true attaché prise en charge les accesseurs de propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-408">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bf9c7-409">Bien que l’héritage de valeur de propriété peut sembler fonctionner pour les propriétés de dépendance non jointes, le comportement de l’héritage d’une propriété non jointes par certaines limites d’éléments dans l’arborescence d’exécution est indéfini.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-409">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bf9c7-410">Enregistrement de la propriété jointe efficacement rend la propriété jointe à une propriété globale pour le système de propriétés et garantit que l’héritage de valeur de propriété fonctionne sur toutes les limites dans une arborescence d’éléments.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-410">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bf9c7-411">Utilisez toujours <xref:System.Windows.DependencyProperty.RegisterAttached%2A> pour inscrire des propriétés où vous spécifiez <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-411">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bf9c7-412">Pour plus d’informations, consultez [Héritage de valeur de propriété](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-412">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bf9c7-413">Nom de la propriété de dépendance à inscrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-413">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bf9c7-414">Type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-414">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-415">Type du propriétaire qui inscrit la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-415">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="bf9c7-416">Métadonnées de propriété de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-416">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="bf9c7-417">Référence à un rappel créé par l’utilisateur qui doit exécuter les validations personnalisées de la valeur de la propriété de dépendance au-delà de la validation de type standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-417">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-418">Inscrit une propriété jointe en lecture seule, avec le type de propriété, le type de propriétaire et les métadonnées de propriété spécifiés, ainsi qu’un rappel de validation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-418">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-419">Clé de propriété de dépendance qui doit être utilisée pour définir la valeur d’un champ statique en lecture seule dans votre classe, qui est ensuite utilisée pour faire référence à la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-419">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-420">Cette méthode retourne le type <xref:System.Windows.DependencyPropertyKey>, tandis que <xref:System.Windows.DependencyProperty.RegisterAttached%2A> retourne le type <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-420">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bf9c7-421">En règle générale, les clés qui représentent le type <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-421">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bf9c7-422">En règle générale, les clés qui représentent les propriétés en lecture seule ne sont pas rendues publiques, car les clés peuvent être utilisées pour définir la valeur de propriété de dépendance en appelant <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-422">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bf9c7-423">Votre conception de classe affecte vos exigences, mais il est généralement recommandé de limiter l’accès et la visibilité de n’importe quel <xref:System.Windows.DependencyPropertyKey> uniquement aux parties de votre code qui sont nécessaires pour définir cette propriété de dépendance dans le cadre de la logique d’application ou de la classe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-423">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bf9c7-424">Il est également recommandé d’exposer un identificateur de propriété de dépendance pour la propriété de dépendance en lecture seule, en exposant la valeur de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> comme un `public static readonly` champ sur votre classe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-424">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bf9c7-425">Les propriétés jointes en lecture seule sont un scénario rare, étant donné que le scénario principal pour une propriété jointe est son utilisation dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bf9c7-425">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="bf9c7-426">Sans accesseur Set public, une propriété jointe ne peut pas être définie dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntaxe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-426">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="bf9c7-427">Pour plus d’informations sur l’inscription de propriété de dépendance, consultez <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-427">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bf9c7-428">Utilisez RegisterAttached pour les propriétés de dépendance héritant d’une valeur</span><span class="sxs-lookup"><span data-stu-id="bf9c7-428">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bf9c7-429">Un scénario particulier pour inscrire une propriété de dépendance comme attachée à la place de <xref:System.Windows.DependencyProperty.Register%2A> doit prendre en charge l’héritage de valeur de propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-429">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="bf9c7-430">Vous devez enregistrer les propriétés de dépendance héritant d’une valeur avec <xref:System.Windows.DependencyProperty.RegisterAttached%2A> même si la classe définit les accesseurs de wrapper de propriété qui exposent la propriété de dépendance, et même si vous ne souhaitez pas exposer des méthodes statiques Get * et Set * pour fournir true attaché prise en charge les accesseurs de propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-430">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bf9c7-431">Bien que l’héritage de valeur de propriété peut sembler fonctionner pour les propriétés de dépendance non jointes, le comportement de l’héritage d’une propriété non jointes par certaines limites d’éléments dans l’arborescence d’exécution est indéfini.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-431">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bf9c7-432">Enregistrement de la propriété jointe efficacement rend la propriété jointe à une propriété globale pour le système de propriétés et garantit que l’héritage de valeur de propriété fonctionne sur toutes les limites dans une arborescence d’éléments.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-432">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bf9c7-433">Utilisez toujours <xref:System.Windows.DependencyProperty.RegisterAttached%2A> pour inscrire des propriétés où vous spécifiez <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-433">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bf9c7-434">Pour plus d’informations, consultez [Héritage de valeur de propriété](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-434">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-435">Inscrit une propriété de dépendance en tant que propriété de dépendance en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-435">Registers a dependency property as a read-only dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bf9c7-436">Nom de la propriété de dépendance à inscrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-436">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bf9c7-437">Type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-437">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-438">Type du propriétaire qui inscrit la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-438">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bf9c7-439">Métadonnées de propriété de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-439">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-440">Inscrit une propriété de dépendance en lecture seule, avec le type de propriété, le type de propriétaire et les métadonnées de propriété spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-440">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-441">Clé de propriété de dépendance qui doit être utilisée pour définir la valeur d’un champ statique en lecture seule dans votre classe, qui est ensuite utilisée pour faire référence à la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-441">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-442">Cette méthode retourne le type <xref:System.Windows.DependencyPropertyKey>, tandis que <xref:System.Windows.DependencyProperty.RegisterAttached%2A> retourne le type <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-442">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bf9c7-443">En règle générale, les clés qui représentent les propriétés en lecture seule ne sont pas rendues publiques, car les clés peuvent être utilisées pour définir la valeur de propriété de dépendance en appelant <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-443">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bf9c7-444">Votre conception de classe affecte vos exigences, mais il est généralement recommandé de limiter l’accès et la visibilité de n’importe quel <xref:System.Windows.DependencyPropertyKey> uniquement aux parties de votre code qui sont nécessaires pour définir cette propriété de dépendance dans le cadre de la logique d’application ou de la classe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-444">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bf9c7-445">Il est également recommandé d’exposer un identificateur de propriété de dépendance pour la propriété de dépendance en lecture seule, en exposant la valeur de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> comme un `public static readonly` champ sur votre classe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-445">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bf9c7-446">Propriétés de dépendance en lecture seule sont un scénario assez courant dans l’espace [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] et pour les scénarios de personnalisation, étant donné qu’autres [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] fonctionnalités peuvent nécessiter une propriété de dépendance même si cette propriété n’est pas destinée à être définissable par appelants.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-446">Read-only dependency properties are a fairly typical scenario both in the existing [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="bf9c7-447">Vous pouvez utiliser la valeur d’une propriété de dépendance en lecture seule comme base pour d’autres opérations de système de propriété qui prennent une propriété de dépendance, telles que baser un <xref:System.Windows.Trigger> sur la propriété de dépendance dans un style.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-447">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="bf9c7-448">Pour plus d’informations sur l’inscription de propriété de dépendance, consultez <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-448">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf9c7-449">L’exemple suivant inscrit un `AquariumSize` propriété de dépendance en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-449">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="bf9c7-450">L’exemple définit `AquariumSizeKey` comme une clé interne (afin que d’autres classes dans l’assembly peuvent substituer les métadonnées) et expose l’identificateur de propriété de dépendance selon cette clé comme `AquariumSizeProperty`.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-450">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="bf9c7-451">En outre, un wrapper est créé pour `AquariumSize`, avec uniquement un accesseur get.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-451">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bf9c7-452">Nom de la propriété de dépendance à inscrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-452">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bf9c7-453">Type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-453">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bf9c7-454">Type du propriétaire qui inscrit la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-454">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bf9c7-455">Métadonnées de propriété de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-455">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="bf9c7-456">Référence à un rappel créé par l’utilisateur qui doit exécuter les validations personnalisées de la valeur de la propriété de dépendance au-delà de la validation de type standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-456">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf9c7-457">Inscrit une propriété de dépendance en lecture seule, avec le type de propriété, le type de propriétaire et les métadonnées de propriété spécifiés, ainsi qu’un rappel de validation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-457">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-458">Clé de propriété de dépendance qui doit être utilisée pour définir la valeur d’un champ statique en lecture seule dans votre classe, qui est ensuite utilisée pour faire référence à la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-458">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-459">Cette méthode retourne le type <xref:System.Windows.DependencyPropertyKey>, tandis que <xref:System.Windows.DependencyProperty.RegisterAttached%2A> retourne le type <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-459">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bf9c7-460">En règle générale, les clés qui représentent les propriétés en lecture seule ne sont pas rendues publiques, car les clés peuvent être utilisées pour définir la valeur de propriété de dépendance en appelant <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-460">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bf9c7-461">Votre conception de classe affecte vos exigences, mais il est généralement recommandé de limiter l’accès et la visibilité de n’importe quel <xref:System.Windows.DependencyPropertyKey> uniquement aux parties de votre code qui sont nécessaires pour définir cette propriété de dépendance dans le cadre de la logique d’application ou de la classe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-461">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bf9c7-462">Il est également recommandé d’exposer un identificateur de propriété de dépendance pour la propriété de dépendance en lecture seule, en exposant la valeur de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> comme un `public static readonly` champ sur votre classe.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-462">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bf9c7-463">Propriétés de dépendance en lecture seule sont un scénario assez courant.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-463">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="bf9c7-464">Vous pouvez utiliser la valeur d’une propriété de dépendance en lecture seule comme base pour d’autres opérations de système de propriété qui prennent une propriété de dépendance, telles que baser un <xref:System.Windows.Trigger> sur la propriété de dépendance dans un style.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-464">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="bf9c7-465">Pour plus d’informations sur l’inscription de propriété de dépendance, consultez <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-465">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="bf9c7-466">Validation sur une propriété de dépendance en lecture seule peut être moins importante.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-466">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="bf9c7-467">Le niveau d’accès non public que vous spécifiez pour la clé réduit la probabilité pour arbitraire entrée non valide.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-467">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dependencyProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-468">Retourne la représentation sous forme de chaîne de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-468">Returns the string representation of the dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf9c7-469">Représentation sous forme de chaîne de la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-469">The string representation of the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-470">Cette implémentation retourne la <xref:System.Windows.DependencyProperty.Name%2A> valeur de propriété.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-470">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnsetValue : obj" Usage="System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-471">Spécifie une valeur statique qui est utilisée par le système de propriétés [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] plutôt que <see langword="null" /> pour indiquer que la propriété existe, mais sa valeur n'est pas définie par le système de propriétés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-471">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-472"><xref:System.Windows.DependencyProperty.UnsetValue> est une valeur de sentinelle qui est utilisée pour les scénarios où le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] système de propriétés est impossible de déterminer un demandée <xref:System.Windows.DependencyProperty> valeur.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-472"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="bf9c7-473"><xref:System.Windows.DependencyProperty.UnsetValue> est utilisé au lieu de `null`, car `null` peut être une valeur de propriété valide, mais aussi valide (et fréquemment utilisé) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-473"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="bf9c7-474"><xref:System.Windows.DependencyProperty.UnsetValue> n’est jamais retourné hors <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-474"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bf9c7-475">Lorsque vous appelez <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> sur une propriété de dépendance sur un <xref:System.Windows.DependencyObject> instance, une des options suivantes s’applique :</span><span class="sxs-lookup"><span data-stu-id="bf9c7-475">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="bf9c7-476">Une propriété de dépendance a une valeur par défaut établie dans les métadonnées et cette valeur est retournée.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-476">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="bf9c7-477">Cette valeur peut provenir <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-477">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="bf9c7-478">Une autre valeur a été établie par le système de propriétés, et la valeur par défaut n’est plus pertinente.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-478">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="bf9c7-479">Pour plus d’informations, consultez [Priorité de la valeur de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-479">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="bf9c7-480">Définissant un <xref:System.Windows.PropertyMetadata.DefaultValue%2A> de <xref:System.Windows.DependencyProperty.UnsetValue> est interdite spécifiquement.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-480">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="bf9c7-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> Retourne <xref:System.Windows.DependencyProperty.UnsetValue> lorsque la propriété demandée n'a pas été définie localement.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="bf9c7-482"><xref:System.Windows.DependencyProperty.UnsetValue> a une signification particulière lorsqu’il est utilisé comme valeur de retour d’un <xref:System.Windows.CoerceValueCallback>.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-482"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="bf9c7-483">Pour plus d’informations, consultez [Validation et rappels de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-483">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="bf9c7-484">Si vous liez à une base de données, notez que <xref:System.Windows.DependencyProperty.UnsetValue> n’est pas équivalent à <xref:System.DBNull.Value>, de manière similaire à la manière dont <xref:System.DBNull.Value> n’est pas équivalent à une vraie valeur null.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-484">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidateValueCallback : System.Windows.ValidateValueCallback" Usage="System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bf9c7-485">Obtient le rappel de validation de valeur pour la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-485">Gets the value validation callback for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bf9c7-486">Rappel de validation de valeur pour cette propriété de dépendance, comme fourni pour le paramètre <paramref name="validateValueCallback" /> dans l'inscription de propriété de dépendance d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf9c7-486">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf9c7-487">Cette propriété contiendra `null` pour n’importe quelle propriété de dépendance sans rappel de validation inscrit.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-487">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="bf9c7-488">Valider des rappels de valeur doivent agir dans un sens statique : validation appliquée à travers le <xref:System.Windows.ValidateValueCallback> ne peut pas déterminer si la valeur fournie est valide pour toute instance particulière.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-488">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="bf9c7-489">Le rappel peut uniquement déterminer si tous les objets qui possèdent la propriété de dépendance doivent ou ne doivent pas accepter la valeur fournie comme étant valide.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-489">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="bf9c7-490">Si vous avez besoin effectuer la validation qui s’appuie sur la connaissance des valeurs d’autres propriétés de dépendance sur une instance particulière, utilisez un <xref:System.Windows.CoerceValueCallback> à la place.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-490">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="bf9c7-491">Le <xref:System.Windows.CoerceValueCallback> est inscrit dans le cadre des métadonnées de propriété de dépendance, plutôt que directement dans l’identificateur de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="bf9c7-491">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="bf9c7-492">Pour plus d’informations, consultez [Validation et rappels de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="bf9c7-492">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>