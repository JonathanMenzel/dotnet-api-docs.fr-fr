<Type Name="EventTrigger" FullName="System.Windows.EventTrigger">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb4566079a39397df3b4c7b2b5c0c5ef441585ed" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679013" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventTrigger : System.Windows.TriggerBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventTrigger extends System.Windows.TriggerBase implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventTrigger" />
  <TypeSignature Language="VB.NET" Value="Public Class EventTrigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventTrigger : System::Windows::TriggerBase, System::Windows::Markup::IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Actions")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un déclencheur qui applique un ensemble d’actions en réponse à un événement.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Trigger> les objets ont le <xref:System.Windows.Trigger.Setters%2A>, <xref:System.Windows.TriggerBase.EnterActions%2A>, et <xref:System.Windows.TriggerBase.ExitActions%2A> propriétés qui s’appliquent des modifications ou des actions en fonction de l’état de certaines propriétés, tandis que <xref:System.Windows.EventTrigger> objets démarrer un jeu de <xref:System.Windows.EventTrigger.Actions%2A> lorsqu’un événement routé spécifié se produit. Par exemple, vous souhaitez utiliser un <xref:System.Windows.EventTrigger> pour démarrer un jeu d’animations lorsque le pointeur de la souris est sur un certain [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] contrôle. Contrairement aux <xref:System.Windows.Trigger>, <xref:System.Windows.EventTrigger> n’a aucun concept d’arrêt d’état, l’action ne sera donc pas annulée une fois que la condition qui a déclenché l’événement ne soit plus remplie.  
  
 Notez que lorsque vous utilisez un <xref:System.Windows.EventTrigger>, vous devez choisir des événements qui n’interfèrent pas avec le comportement inhérent de votre contrôle. Les contrôles tels que <xref:System.Windows.Controls.Button> ou <xref:System.Windows.Controls.TextBox> effectuer des actions spécifiques sur les événements d’entrée d’utilisateur tels que des clics de souris et les événements du clavier. Par exemple, si vous appliquez un style à un bouton et essayez de définir le <xref:System.Windows.Input.Mouse.MouseDown> événement en tant que le <xref:System.Windows.EventTrigger.RoutedEvent%2A> d’une <xref:System.Windows.EventTrigger>, le <xref:System.Windows.EventTrigger> jamais appliqué car l’événement est d’abord gérée par le bouton. Au lieu de cela, vous pouvez utiliser la <xref:System.Windows.Input.Mouse.PreviewMouseDown> événement ou un autre événement.  
  
 Lors de l’utilisation de la liaison de données, si vous utilisez la <xref:System.Windows.Data.Binding.TargetUpdated> événement, vous devez définir le <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> valeur de votre <xref:System.Windows.Data.Binding> objet `true` pour l’événement à déclencher.  
  
 Ajout d’un <xref:System.Windows.TriggerAction> enfant à un <xref:System.Windows.EventTrigger> objet ajoute implicitement à la <xref:System.Windows.TriggerActionCollection> pour la <xref:System.Windows.EventTrigger> objet.  
  
   
  
## Examples  
 Cet exemple montre comment utiliser des déclencheurs d’événements dans un style pour animer les <xref:System.Windows.UIElement.MouseEnter> et <xref:System.Windows.UIElement.MouseLeave> événements d’un <xref:System.Windows.FrameworkElement>. Dans cet exemple, le <xref:System.Windows.Style> a le <xref:System.Windows.Style.TargetType%2A> la valeur <xref:System.Windows.Shapes.Rectangle>. Par conséquent, il n’est pas nécessaire de qualifier le `MouseEnter` et `MouseLeave` noms avec le nom de classe d’événements.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.EventSetter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.EventTrigger" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.EventTrigger" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger (System.Windows.RoutedEvent routedEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor(System.Windows.RoutedEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger(System::Windows::RoutedEvent ^ routedEvent);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Le <see cref="T:System.Windows.RoutedEvent" /> qui active ce déclencheur.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.EventTrigger" /> avec l'événement spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Actions">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerActionCollection Actions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerActionCollection Actions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.Actions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Actions As TriggerActionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerActionCollection ^ Actions { System::Windows::TriggerActionCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerActionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection d’actions à appliquer quand l’événement se produit.</summary>
        <value>La valeur par défaut est une collection vide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement aux <xref:System.Windows.Trigger>, <xref:System.Windows.EventTrigger> n’a aucun concept d’arrêt d’état, l’action ne sera donc pas annulée une fois que la condition qui a déclenché l’événement ne soit plus remplie.  
  
 Ajout d’un <xref:System.Windows.TriggerAction> enfant à un <xref:System.Windows.EventTrigger> objet ajoute implicitement à la <xref:System.Windows.TriggerActionCollection> pour la <xref:System.Windows.EventTrigger> objet.  
  
> [!NOTE]
>  Cette propriété peut uniquement être définie dans [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] via la syntaxe de collection indiquée, ou en accédant à l’objet de collection et en utilisant ses différentes méthodes telles que Add. La propriété pour accéder à l’objet collection lui-même est en lecture seule, la collection est en lecture-écriture.  
  
<a name="xamlPropertyElementUsage_Actions"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.Actions>  
    OneOrMoreTriggerActions  
  </object.Actions>  
</object>  
```  
  
<a name="xamlValues_Actions"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *OneOrMoreTriggerActions*  
 Un ou plusieurs <xref:System.Windows.TriggerAction> objets.  
  
   
  
## Examples  
 Cet exemple explique comment utiliser des déclencheurs d’événements dans un style pour animer les <xref:System.Windows.UIElement.MouseEnter> et <xref:System.Windows.UIElement.MouseLeave> événements d’un <xref:System.Windows.FrameworkElement>. Comme indiqué ci-dessus, l’ajout un <xref:System.Windows.TriggerAction> enfant à un <xref:System.Windows.EventTrigger> objet ajoute implicitement à la <xref:System.Windows.TriggerActionCollection> pour la <xref:System.Windows.EventTrigger> objet. Par conséquent, dans cet exemple, `<EventTrigger.Actions>` est implicite.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="protected virtual void AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddChild (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddChild(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objet <see cref="T:System.Windows.TriggerAction" /> à ajouter à la collection <see cref="P:System.Windows.EventTrigger.Actions" /> de ce déclencheur.</param>
        <summary>Ajoute l'objet spécifié à la collection <see cref="P:System.Windows.EventTrigger.Actions" /> du déclencheur d'événements actuel.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddText">
      <MemberSignature Language="C#" Value="protected virtual void AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Ce paramètre n'est pas utilisé.</param>
        <summary>Cette méthode n'est pas prise en charge et résulte en une exception.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutedEvent">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent RoutedEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent RoutedEvent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.RoutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property RoutedEvent As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::RoutedEvent ^ RoutedEvent { System::Windows::RoutedEvent ^ get(); void set(System::Windows::RoutedEvent ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Windows.RoutedEvent" /> qui activera ce déclencheur.</summary>
        <value>La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.EventTrigger>applique un ensemble d’actions lorsque l’événement routé spécifié se produit. Par exemple, vous souhaitez utiliser <xref:System.Windows.EventTrigger>s pour démarrer un jeu d’animations lorsque le pointeur de la souris est sur un certain [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] contrôle.  
  
 Si le modèle ou un style qui contient ce <xref:System.Windows.EventTrigger> n’a pas la `TargetType` propriété spécifiée, vous avez besoin de la qualité du nom de l’événement avec le nom de classe à l’aide du `ClassName.EventName` syntaxe.  
  
 <xref:System.Windows.EventTrigger> objets ne peut pas gérer les événements qui ont déjà été <xref:System.Windows.RoutedEventArgs.Handled%2A>. Les contrôles tels que <xref:System.Windows.Controls.Button> ou <xref:System.Windows.Controls.TextBox> effectuer des actions spécifiques sur les événements d’entrée d’utilisateur tels que des clics de souris et les événements du clavier. Par exemple, si vous appliquez un style à un bouton et essayez de définir le <xref:System.Windows.Input.Mouse.MouseDown> événement en tant que le <xref:System.Windows.EventTrigger.RoutedEvent%2A> d’une <xref:System.Windows.EventTrigger>, le <xref:System.Windows.EventTrigger> jamais appliqué car l’événement est d’abord gérée par le bouton. Au lieu de cela, vous pouvez utiliser la <xref:System.Windows.Input.Mouse.PreviewMouseDown> événement ou un autre événement.  
  
 Lors de l’utilisation de la liaison de données, si vous utilisez la <xref:System.Windows.Data.Binding.TargetUpdated> événement, vous devez définir le <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> valeur de votre <xref:System.Windows.Data.Binding> objet à la valeur true pour l’événement à déclencher.  
  
   
  
## Examples  
 Cet exemple montre comment utiliser des déclencheurs d’événements dans un style pour animer les <xref:System.Windows.UIElement.MouseEnter> et <xref:System.Windows.UIElement.MouseLeave> événements d’un <xref:System.Windows.FrameworkElement>. Dans cet exemple, le <xref:System.Windows.Style> a le <xref:System.Windows.Style.TargetType%2A> la valeur <xref:System.Windows.Shapes.Rectangle>. Par conséquent, il n’est pas nécessaire de qualifier le `MouseEnter` et `MouseLeave` noms avec le nom de classe d’événements.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété <see cref="P:System.Windows.EventTrigger.RoutedEvent" /> ne peut pas avoir la valeur null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeActions">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeActions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.ShouldSerializeActions" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeActions () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeActions();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une valeur qui indique si les processus de sérialisation doivent sérialiser la valeur effective de la propriété <see cref="P:System.Windows.EventTrigger.Actions" /> au niveau des instances de cette classe.</summary>
        <returns>Retourne <see langword="true" /> si la valeur de la propriété <see cref="P:System.Windows.EventTrigger.Actions" /> doit être sérialisée ; sinon, retourne <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de l’objet avec l’événement qui active ce déclencheur. Son utilisation est réservée aux déclencheurs d’événement ou de modèle.</summary>
        <value>La valeur par défaut est <see langword="null" />. Si cette valeur de propriété est <see langword="null" />, l'élément qui est surveillé pour le déclenchement de l'événement est alors le parent basé sur des modèles ou la racine d'arborescence logique.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez définir cette propriété le nom de n’importe quel élément dans la portée de l’emplacement où la collection de déclencheurs (la collection que ce <xref:System.Windows.EventTrigger> fait partie) est appliquée. Il s’agit généralement d’un élément nommé qui est dans le modèle qui contient ce <xref:System.Windows.EventTrigger>. Si vous définissez le <xref:System.Windows.FrameworkElement.Triggers%2A> propriété sur un élément directement, alors il est un élément nommé dans la portée de l’élément parent.  
  
 Vous pouvez nommer un objet à l’aide de la [Directive x : Name](~/docs/framework/xaml-services/x-name-directive.md) syntaxe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Après avoir été en cours d'utilisation, un <see cref="T:System.Windows.EventTrigger" /> ne peut pas être modifié.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objet enfant à ajouter.</param>
        <summary>Ajoute un objet enfant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut uniquement être utilisé lorsque l'instance de <xref:System.Windows.EventTrigger> est castée en interface <xref:System.Windows.Markup.IAddChild>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texte à ajouter à l’objet.</param>
        <summary>Ajoute le contenu textuel d’un nœud à l’objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut uniquement être utilisé lorsque l'instance de <xref:System.Windows.EventTrigger> est castée en interface <xref:System.Windows.Markup.IAddChild>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>