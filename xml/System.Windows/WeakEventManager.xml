<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakEventManager.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac94cdae430bda3a59a21292d13f613f0012919d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac94cdae430bda3a59a21292d13f613f0012919d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager">
          <source>Provides a base class for the event manager that is used in the <bpt id="p1">*</bpt>weak event pattern<ept id="p1">*</ept>.</source>
          <target state="translated">Fournit une classe de base pour le gestionnaire d’événements utilisé dans le <bpt id="p1">*</bpt>modèle d’événement faible<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager">
          <source>The manager adds and removes listeners for events (or callbacks) that also use the pattern.</source>
          <target state="translated">Le gestionnaire ajoute et supprime des écouteurs pour les événements (ou rappels) qui utilisent également le modèle.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</source>
          <target state="translated">Vous utilisez généralement le modèle d’événement faible lorsque la source d’événement a une durée de vie d’objet qui est indépendante des écouteurs d’événements.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>Using the central event dispatching capability of a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> allows the listener's handlers to be garbage collected even if the source object persists.</source>
          <target state="translated">À l’aide de la distribution de d’événement centrale un <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> permet aux gestionnaires de l’écouteur pour le garbage collecté même si l’objet source est persistant.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>By contrast, a regular event hookup using the <ph id="ph1">`+=`</ph> operator causes the potentially disconnected source to hold a reference to the listeners.</source>
          <target state="translated">En revanche, un raccordement régulièrement à l’aide du <ph id="ph1">`+=`</ph> opérateur entraîne la source potentiellement déconnectée contenir une référence aux écouteurs.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>This prevents the receiver from being garbage collected in a timely fashion.</source>
          <target state="translated">Cela empêche le récepteur par le garbage collecté en temps voulu.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</source>
          <target state="translated">Une situation courante où les relations de durée de vie entre les sources et les écouteurs doivent utiliser de modèle d’événement faible est la gestion des événements de mise à jour provenant des liaisons de données.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>The weak event pattern can also be used for callbacks and regular events.</source>
          <target state="translated">Le modèle d’événement faible peut également servir pour les rappels et les événements ordinaires.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>For an example of a custom <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>, see <bpt id="p1">[</bpt>Weak Event Patterns<ept id="p1">](~/docs/framework/wpf/advanced/weak-event-patterns.md)</ept>.</source>
          <target state="translated">Pour obtenir un exemple de personnalisé <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>, consultez <bpt id="p1">[</bpt>modèles d’événement faible<ept id="p1">](~/docs/framework/wpf/advanced/weak-event-patterns.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.#ctor">
          <source>Initializes base class values when it is used as the initializer by the constructor of a derived class.</source>
          <target state="translated">Initialise des valeurs de classe de base en cas d'utilisation comme initialiseur par le constructeur d'une classe dérivée.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>The object on which the event is being handled.</source>
          <target state="translated">L'objet sur lequel l'événement est géré.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data for the event to deliver.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> qui contient les données d'événement à remettre.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Delivers the event being managed to each listener.</source>
          <target state="translated">Remet l'événement qui est géré à chaque écouteur.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method from within the event handlers that are added or removed by the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> implementations of subclasses.</source>
          <target state="translated">Appelez le <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> méthode à partir de gestionnaires d’événements qui sont ajoutés ou supprimés par le <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> des implémentations des sous-classes.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> method in your <ph id="ph2">`AddListener`</ph> implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</source>
          <target state="translated">Si vous appelez le <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> méthode dans votre <ph id="ph2">`AddListener`</ph> implémentation de votre classe, la liste des écouteurs qui reçoivent l’événement est conservée dans une collection sous-jacente.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>(<ph id="ph1">`AddListener`</ph> is not part of an interface or class contract.</source>
          <target state="translated">(<ph id="ph1">`AddListener`</ph> ne fait pas partie d’un contrat d’interface ou classe.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the method of your manager class that calls <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and adds weak event pattern listeners for the event.)</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> est le nom suggéré pour la méthode de votre classe de gestionnaire qui appelle <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> et ajoute des écouteurs de modèle d’événement faible pour l’événement.)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> adds listeners to a single list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> Ajoute des écouteurs à une liste unique.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>If your manager implementation maintains more than one list of listeners per event, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</source>
          <target state="translated">Si votre implémentation de gestionnaire maintient plusieurs listes d’écouteurs par événement, n’utilisez pas <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</source>
          <target state="translated">Au lieu de cela, votre implémentation doit créer ses propres <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> doit ajouter des écouteurs à la liste appropriée, et les événements doivent être remis à la liste d’écouteur appropriée en appelant <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>The object on which the event is being handled.</source>
          <target state="translated">L'objet sur lequel l'événement est géré.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> qui contient les données d'événement.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> fourni.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>Delivers the event being managed to each listener in the provided list.</source>
          <target state="translated">Remet l'événement qui est géré à chaque écouteur dans la liste fournie.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</source>
          <target state="translated">Cette méthode est nécessaire si votre implémentation de gestionnaire maintient des listes d’écouteurs distincts en fonction des informations qui sont capturées dans les données d’événement.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</source>
          <target state="translated">Si vous utilisez cette technique avancée, vous devez créer et maintenir les listes séparées dans le cadre de votre implémentation de gestionnaire, et vous devez fournir un moyen pour ajouter des écouteurs à une liste spécifique.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</source>
          <target state="translated">Votre implémentation de gestionnaire qui écoute l’événement brut doit agir sur la condition que vous utilisez pour différencier les listes et remettre l’événement uniquement à l’ou les listes appropriées.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The type to obtain the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> for.</source>
          <target state="translated">Le type pour qui obtenir le <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementation that is used for the provided type.</source>
          <target state="translated">Retourne l'implémentation <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> utilisée pour le type fourni.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The matching <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementation.</source>
          <target state="translated">L'implémentation <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> correspondante.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source><ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementations call this method using their passed <ph id="ph2">`managerType`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implémentations d’appeler cette méthode à l’aide de leur passé <ph id="ph2">`managerType`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The returned <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> est ensuite utilisé comme différentiateur pour déterminer quel événement a été reçu et le Gestionnaire de classe privée à appeler.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>The zero-based index of the requested source.</source>
          <target state="translated">Index de base zéro de la source demandée.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Gets or sets the data being stored for the specified source.</source>
          <target state="translated">Obtient ou définit les données qui sont stockées pour la source spécifiée.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Data being stored by the manager for this source.</source>
          <target state="translated">Données qui sont stockées par le gestionnaire pour cette source.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Derived classes can choose what data and type to store in this indexer.</source>
          <target state="translated">Les classes dérivées peuvent choisir quelles données et le type à stocker dans cet indexeur.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Typically this is implemented as a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>, which is a list of weak references to listeners.</source>
          <target state="translated">En général, cela est implémenté comme un <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>, qui est une liste de références faibles aux écouteurs.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>You would only have to change this type if the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> type cannot contain your required information.</source>
          <target state="translated">Vous devez uniquement modifier ce type si le <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> ne peuvent pas contenir vos informations requises.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>If so, you will have to override the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method so that all cleanup of the underlying type is performed correctly.</source>
          <target state="translated">Si, par conséquent, vous devez substituer la <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> méthode afin que tout le nettoyage du type sous-jacent est effectuée correctement.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.NewListenerList">
          <source>Returns a new object to contain listeners to an event.</source>
          <target state="translated">Retourne un nouvel objet destiné à contenir des écouteurs sur un événement.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.NewListenerList">
          <source>A new object to contain listeners to an event.</source>
          <target state="translated">Nouvel objet destiné à contenir des écouteurs sur un événement.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>The source object that the handler delegate subscribes to.</source>
          <target state="translated">Objet source auquel le délégué de gestionnaire est abonné.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>The delegate that handles the event that is raised by <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Délégué qui gère l’événement déclenché par <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>Adds the specified delegate as an event handler of the specified source.</source>
          <target state="translated">Ajoute le délégué spécifié en tant que gestionnaire d'événements de la source spécifiée.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The source to attach listeners to.</source>
          <target state="translated">La source à laquelle joindre des écouteurs.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The listening class (which must implement <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</source>
          <target state="translated">La classe d'écoute (qui doit implémenter <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Adds the provided listener to the provided source for the event being managed.</source>
          <target state="translated">Ajoute l'écouteur fourni à la source fournie pour l'événement qui est géré.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Call this method within your manager class <ph id="ph1">`AddListener`</ph> methods on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementations.</source>
          <target state="translated">Appelez cette méthode dans votre classe de gestionnaire <ph id="ph1">`AddListener`</ph> méthodes sur <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implémentations.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> est le nom suggéré pour la méthode statique que vous définissez sur votre classe de gestionnaire pour permettre à d’autres classes ajouter un écouteur pour votre modèle d’événement faible.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`AddListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is attached, and the <ph id="ph3">`listener`</ph> instance.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> doit prendre deux paramètres : le <ph id="ph2">`source`</ph> où l’écouteur est joint et le <ph id="ph3">`listener`</ph> instance.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>For your <ph id="ph1">`AddListener`</ph> implementation, call the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> method on the current manager and pass the same two parameters.</source>
          <target state="translated">Pour votre <ph id="ph1">`AddListener`</ph> mise en œuvre, appelez le <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> méthode sur le gestionnaire actuel, en passant les deux mêmes paramètres.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If the list of listeners was previously empty, <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> method internally, which will call your specific <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> override through polymorphism.</source>
          <target state="translated">Si la liste des écouteurs était vide précédemment, <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> appelle la <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> méthode en interne, qui appellera votre spécifiques <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> à travers le polymorphisme.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> adds listeners to a single internal <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> per <ph id="ph3">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> Ajoute des écouteurs à un seul interne <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> par <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</source>
          <target state="translated">Si votre implémentation de gestionnaire maintient plusieurs listes d’écouteurs pour chaque combinaison de source d’événement, n’utilisez pas <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> event instead of the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method.</source>
          <target state="translated">Au lieu de cela, votre implémentation doit créer ses propres <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> doit ajouter des écouteurs à la liste appropriée, et les événements doivent être remis à la liste d’écouteur appropriée en appelant le <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> événements au lieu du <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>The source to remove the handler from.</source>
          <target state="translated">Source à supprimer du gestionnaire.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>The delegate to remove from <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Délégué à supprimer de <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>Removes the previously added handler from the specified source.</source>
          <target state="translated">Supprime de la source spécifiée le gestionnaire ajouté précédemment.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The source to remove listeners from.</source>
          <target state="translated">La source à partir de laquelle supprimer des écouteurs.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The listening class (which must implement <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</source>
          <target state="translated">La classe d'écoute (qui doit implémenter <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Removes a previously added listener from the provided source.</source>
          <target state="translated">Supprime un écouteur ajouté précédemment depuis la source fournie.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Call this method within your manager class <ph id="ph1">`RemoveListener`</ph> methods on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementations.</source>
          <target state="translated">Appelez cette méthode dans votre classe de gestionnaire <ph id="ph1">`RemoveListener`</ph> méthodes sur <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implémentations.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`RemoveListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph> est le nom suggéré pour la méthode statique que vous définissez sur votre classe de gestionnaire pour permettre à d’autres classes de supprimer un écouteur pour votre modèle d’événement faible.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`RemoveListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is removed, and the <ph id="ph3">`listener`</ph> class.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph> doit prendre deux paramètres : le <ph id="ph2">`source`</ph> où l’écouteur est supprimé et la <ph id="ph3">`listener`</ph> classe.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>For your <ph id="ph1">`RemoveListener`</ph> implementation, call the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> method on the current manager and pass the same two parameters.</source>
          <target state="translated">Pour votre <ph id="ph1">`RemoveListener`</ph> mise en œuvre, appelez le <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> méthode sur le gestionnaire actuel, en passant les deux mêmes paramètres.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If a call to <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> removes the last listener in the list, <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> calls the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> method internally, which will call your specific <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> override through polymorphism.</source>
          <target state="translated">Si un appel à <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> supprime le dernier écouteur dans la liste, <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> appelle la <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> méthode en interne, qui appellera votre spécifiques <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> à travers le polymorphisme.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> removes listeners from a single internal <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> per <ph id="ph3">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> Supprime des écouteurs à partir d’un seul interne <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> par <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>.</source>
          <target state="translated">Si votre implémentation de gestionnaire maintient plusieurs listes d’écouteurs pour chaque combinaison de source d’événement, n’utilisez pas <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`RemoveListener`</ph> should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> method instead of the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method.</source>
          <target state="translated">Au lieu de cela, votre implémentation doit créer ses propres <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`RemoveListener`</ph> doit supprimer des écouteurs de la liste appropriée, et les événements doivent être remis à la liste d’écouteur appropriée en appelant le <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> méthode à la place de la <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The source for events being listened to.</source>
          <target state="translated">Source des événements qui sont écoutés.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The data to check.</source>
          <target state="translated">Les données à vérifier.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>This object is expected to be a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> implementation.</source>
          <target state="translated">Cet objet est supposé être une implémentation <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to stop listening to <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>, and completely remove all entries from <bpt id="p2">&lt;c&gt;</bpt>data<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour cesser d'écouter la <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> et supprimer entièrement toutes les entrées des <bpt id="p2">&lt;c&gt;</bpt>données<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Removes inactive listener entries from the data list for the provided source.</source>
          <target state="translated">Supprime des entrées d'écouteur inactives dans la liste de données pour la source fournie.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if some entries were actually removed from the list.</source>
          <target state="translated">Retourne la valeur <ph id="ph1">&lt;see langword="true" /&gt;</ph> si certaines entrées ont été supprimées réellement de la liste.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if some entries were actually removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si certaines entrées ont été réellement supprimées ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method has a default implementation that will remove all entries when data is a <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> méthode a une implémentation par défaut qui supprimera toutes les entrées lorsque les données sont un <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>If the underlying type for the <ph id="ph1">&lt;see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /&gt;</ph> is something other than <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, or contains data beyond a <ph id="ph3">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, you must override the <ph id="ph4">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Si le type sous-jacent pour le <ph id="ph1">&lt;see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /&gt;</ph> est différent de <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, ou contient des données au-delà d’un <ph id="ph3">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, vous devez substituer la <ph id="ph4">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The override should provide purge behavior for the alternate type items list.</source>
          <target state="translated">La substitution doit fournir le comportement de la purge de la liste d’éléments de type autre.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Generally, the override should provide behavior without calling the base implementation.</source>
          <target state="translated">En règle générale, la substitution doit fournir le comportement sans appeler l’implémentation de base.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>If a specific <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> still needs clearing, call <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" /&gt;</ph>.</source>
          <target state="translated">Si un spécifique <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> a toujours besoin d’appel, en désactivant <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>Establishes a read-lock on the underlying data table, and returns an <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</source>
          <target state="translated">Établit un verrou de lecture sur la table de données sous-jacente et retourne un <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <ph id="ph1">&lt;see langword="using" /&gt;</ph> construct.</source>
          <target state="translated">Objet qui peut être utilisé pour établir un verrou sur les membres de la table de données, puis être supprimé de manière appropriée avec une construction <ph id="ph1">&lt;see langword="using" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>In derived classes, queries to the table contained in <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> should always occur within a <ph id="ph2">`using (ReadLock) { ... }`</ph> clause, except for queries that are already within a write lock.</source>
          <target state="translated">Dans les classes dérivées, les requêtes sur la table contenue dans <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> doit toujours se produire dans un <ph id="ph2">`using (ReadLock) { ... }`</ph> clause, à l’exception des requêtes qui sont déjà dans un verrou d’écriture.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>These queries may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection to store the extra information.</source>
          <target state="translated">Ces requêtes peuvent être nécessaires si votre classe prend en charge un plus sophistiquées <ph id="ph1">`AddListener`</ph> implémentation qui nécessite davantage de données au-delà de la <ph id="ph2">`source`</ph> et <ph id="ph3">`listener`</ph>et utilise le <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection pour stocker les informations supplémentaires.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Remove(System.Object)">
          <source>The source to remove listener information for.</source>
          <target state="translated">La source pour laquelle supprimer des informations d'écouteur.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Remove(System.Object)">
          <source>Removes all listeners for the specified source.</source>
          <target state="translated">Supprime tous les écouteurs pour la source spécifiée.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ScheduleCleanup">
          <source>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</source>
          <target state="translated">Demande qu'un vidage d'entrées inutilisées dans la liste d'écouteur sous-jacente soit effectué sur un thread de basse priorité.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ScheduleCleanup">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ScheduleCleanup%2A&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method on the current manager's list, at lower thread priority, with the <ph id="ph3">`purgeAll`</ph> parameter set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ScheduleCleanup%2A&gt;</ph> méthode est similaire à l’appel le <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> méthode sur la liste du gestionnaire actuel, à la priorité de thread, avec la <ph id="ph3">`purgeAll`</ph> paramètre la valeur <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>The type to set the new event manager.</source>
          <target state="translated">Type utilisé pour définir le nouveau gestionnaire d'événements.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>The new event manager.</source>
          <target state="translated">Le nouveau gestionnaire d'événement.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>Sets the current manager for the specified manager type.</source>
          <target state="translated">Définit le gestionnaire actuel pour le type de gestionnaire spécifié.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.SetCurrentManager%2A&gt;</ph> method to initialize a manager, if that is required by a call to your <ph id="ph2">`CurrentManager`</ph> property on a <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementation.</source>
          <target state="translated">Appelez le <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.SetCurrentManager%2A&gt;</ph> méthode pour initialiser un gestionnaire, si cela est requis par un appel à votre <ph id="ph2">`CurrentManager`</ph> propriété sur un <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> mise en œuvre.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The source to begin listening on.</source>
          <target state="translated">La source sur laquelle commencer à écouter.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>When overridden in a derived class, starts listening for the event being managed.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, commence à écouter pour l'événement qui est géré.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>After the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> method is first called, the manager should be in the state of calling <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> or <ph id="ph3">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> whenever the relevant event from the provided source is handled.</source>
          <target state="translated">Après avoir d'abord appelé la méthode <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph>, le gestionnaire doit être dans l'état d'appeler <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> ou <ph id="ph3">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> à chaque fois que l'événement pertinent de la source fournie est géré.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> overrides should add a handler to the provided <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> remplacements doivent ajouter un gestionnaire à la collection <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The handler is declared by the manager itself.</source>
          <target state="translated">Le gestionnaire est déclaré par le Gestionnaire de lui-même.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The class handler should not be public, and it should only be called in response to the event being managed.</source>
          <target state="translated">Le Gestionnaire de classe ne doit pas être public, et il doit uniquement être appelée en réponse à l’événement géré.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The class handler should call the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> method or the <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> method appropriately.</source>
          <target state="translated">Le Gestionnaire de classe doit appeler le <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> (méthode) ou le <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> méthode correctement.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>The source to stop listening on.</source>
          <target state="translated">La source sur laquelle arrêter d'écouter.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>When overridden in a derived class, stops listening on the provided source for the event being managed.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, cesse d'écouter sur la source fournie pour l'événement qui est géré.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /&gt;</ph> implementations should remove the class handler as added by the <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /&gt;</ph> les implémentations doivent supprimer le Gestionnaire de classe comme ajouté par le <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Removing a listener should not clear the listener list.</source>
          <target state="translated">Suppression d’un écouteur ne doit pas effacer la liste d’écouteur.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Instead, it should only disconnect the class handler (perhaps temporarily).</source>
          <target state="translated">Au lieu de cela, il doit déconnecter uniquement le Gestionnaire de classe (peut-être temporairement).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Other methods are available for clearing the entire list, such as the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> method with the <ph id="ph2">&lt;paramref name="purgeAll" /&gt;</ph> parameter set to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Autres méthodes sont disponibles pour l’effacement de l’intégralité de la liste, tels que les <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> méthode avec la <ph id="ph2">&lt;paramref name="purgeAll" /&gt;</ph> paramètre la valeur <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>Establishes a write-lock on the underlying data table, and returns an <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</source>
          <target state="translated">Établit un verrou d’écriture sur la table de données sous-jacente et retourne un <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <ph id="ph1">&lt;see langword="using" /&gt;</ph> construct.</source>
          <target state="translated">Objet qui peut être utilisé pour établir un verrou sur les membres de la table de données, puis être supprimé de manière appropriée avec une construction <ph id="ph1">&lt;see langword="using" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>In derived classes, all modifications to the underlying data table should occur within a <ph id="ph1">`using (WriteLock) { ... }`</ph> clause.</source>
          <target state="translated">Dans les classes dérivées, toutes les modifications à la table de données sous-jacente doivent se produire dans un <ph id="ph1">`using (WriteLock) { ... }`</ph> clause.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>These modifications may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection to store the extra information.</source>
          <target state="translated">Ces modifications peuvent être nécessaires si votre classe prend en charge un plus sophistiquées <ph id="ph1">`AddListener`</ph> implémentation qui nécessite davantage de données au-delà de la <ph id="ph2">`source`</ph> et <ph id="ph3">`listener`</ph>et utilise le <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection pour stocker les informations supplémentaires.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>