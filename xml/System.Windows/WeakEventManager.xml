<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac94cdae430bda3a59a21292d13f613f0012919d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="407c8-101">Fournit une classe de base pour le gestionnaire d’événements utilisé dans le *modèle d’événement faible*.</span>
      <span class="sxs-lookup">
        <span data-stu-id="407c8-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span>
      </span>
      <span data-ttu-id="407c8-102">Le gestionnaire ajoute et supprime des écouteurs pour les événements (ou rappels) qui utilisent également le modèle.</span>
      <span class="sxs-lookup">
        <span data-stu-id="407c8-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-103">Vous utilisez généralement le modèle d’événement faible lorsque la source d’événement a une durée de vie d’objet qui est indépendante des écouteurs d’événements.</span><span class="sxs-lookup"><span data-stu-id="407c8-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="407c8-104">À l’aide de la distribution de d’événement centrale un <xref:System.Windows.WeakEventManager> permet aux gestionnaires de l’écouteur pour le garbage collecté même si l’objet source est persistant.</span><span class="sxs-lookup"><span data-stu-id="407c8-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="407c8-105">En revanche, un raccordement régulièrement à l’aide du `+=` opérateur entraîne la source potentiellement déconnectée contenir une référence aux écouteurs.</span><span class="sxs-lookup"><span data-stu-id="407c8-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="407c8-106">Cela empêche le récepteur par le garbage collecté en temps voulu.</span><span class="sxs-lookup"><span data-stu-id="407c8-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="407c8-107">Une situation courante où les relations de durée de vie entre les sources et les écouteurs doivent utiliser de modèle d’événement faible est la gestion des événements de mise à jour provenant des liaisons de données.</span><span class="sxs-lookup"><span data-stu-id="407c8-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="407c8-108">Le modèle d’événement faible peut également servir pour les rappels et les événements ordinaires.</span><span class="sxs-lookup"><span data-stu-id="407c8-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="407c8-109">Pour obtenir un exemple de personnalisé <see cref="T:System.Windows.WeakEventManager" />, consultez [modèles d’événement faible](~/docs/framework/wpf/advanced/weak-event-patterns.md).</span>
        <span class="sxs-lookup">
          <span data-stu-id="407c8-109">For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="407c8-110">Initialise des valeurs de classe de base en cas d'utilisation comme initialiseur par le constructeur d'une classe dérivée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="407c8-111">L'objet sur lequel l'événement est géré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-111">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="407c8-112">
            <see cref="T:System.EventArgs" /> qui contient les données d'événement à remettre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-113">Remet l'événement qui est géré à chaque écouteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-113">Delivers the event being managed to each listener.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-114">Appelez le <xref:System.Windows.WeakEventManager.DeliverEvent%2A> méthode à partir de gestionnaires d’événements qui sont ajoutés ou supprimés par le <xref:System.Windows.WeakEventManager.StartListening%2A> et <xref:System.Windows.WeakEventManager.StopListening%2A> des implémentations des sous-classes.</span><span class="sxs-lookup"><span data-stu-id="407c8-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="407c8-115">Si vous appelez le <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> méthode dans votre `AddListener` implémentation de votre classe, la liste des écouteurs qui reçoivent l’événement est conservée dans une collection sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="407c8-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="407c8-116">(`AddListener` ne fait pas partie d’un contrat d’interface ou classe.</span><span class="sxs-lookup"><span data-stu-id="407c8-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="407c8-117">`AddListener` est le nom suggéré pour la méthode de votre classe de gestionnaire qui appelle <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> et ajoute des écouteurs de modèle d’événement faible pour l’événement.)</span><span class="sxs-lookup"><span data-stu-id="407c8-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="407c8-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Ajoute des écouteurs à une liste unique.</span><span class="sxs-lookup"><span data-stu-id="407c8-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="407c8-119">Si votre implémentation de gestionnaire maintient plusieurs listes d’écouteurs par événement, n’utilisez pas <xref:System.Windows.WeakEventManager.DeliverEvent%2A> ou <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="407c8-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="407c8-120">Au lieu de cela, votre implémentation doit créer ses propres <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` doit ajouter des écouteurs à la liste appropriée, et les événements doivent être remis à la liste d’écouteur appropriée en appelant <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="407c8-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="407c8-121">L'objet sur lequel l'événement est géré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-121">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="407c8-122">
            <see cref="T:System.EventArgs" /> qui contient les données d'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <param name="list">
          <span data-ttu-id="407c8-123">Le <see cref="T:System.Windows.WeakEventManager.ListenerList" /> fourni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-124">Remet l'événement qui est géré à chaque écouteur dans la liste fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-124">Delivers the event being managed to each listener in the provided list.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-125">Cette méthode est nécessaire si votre implémentation de gestionnaire maintient des listes d’écouteurs distincts en fonction des informations qui sont capturées dans les données d’événement.</span><span class="sxs-lookup"><span data-stu-id="407c8-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="407c8-126">Si vous utilisez cette technique avancée, vous devez créer et maintenir les listes séparées dans le cadre de votre implémentation de gestionnaire, et vous devez fournir un moyen pour ajouter des écouteurs à une liste spécifique.</span><span class="sxs-lookup"><span data-stu-id="407c8-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="407c8-127">Votre implémentation de gestionnaire qui écoute l’événement brut doit agir sur la condition que vous utilisez pour différencier les listes et remettre l’événement uniquement à l’ou les listes appropriées.</span><span class="sxs-lookup"><span data-stu-id="407c8-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="407c8-128">Le type pour qui obtenir le <see cref="T:System.Windows.WeakEventManager" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-129">Retourne l'implémentation <see cref="T:System.Windows.WeakEventManager" /> utilisée pour le type fourni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="407c8-130">L'implémentation <see cref="T:System.Windows.WeakEventManager" /> correspondante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implémentations d’appeler cette méthode à l’aide de leur passé `managerType`.</span><span class="sxs-lookup"><span data-stu-id="407c8-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="407c8-132">Retourné <xref:System.Windows.WeakEventManager> est ensuite utilisé comme différentiateur pour déterminer quel événement a été reçu et le Gestionnaire de classe privée à appeler.</span><span class="sxs-lookup"><span data-stu-id="407c8-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="407c8-133">Index de base zéro de la source demandée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-133">The zero-based index of the requested source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-134">Obtient ou définit les données qui sont stockées pour la source spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-134">Gets or sets the data being stored for the specified source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="407c8-135">Données qui sont stockées par le gestionnaire pour cette source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-135">Data being stored by the manager for this source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-136">Les classes dérivées peuvent choisir quelles données et le type à stocker dans cet indexeur.</span><span class="sxs-lookup"><span data-stu-id="407c8-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="407c8-137">En général, cela est implémenté comme un <xref:System.Windows.WeakEventManager.ListenerList>, qui est une liste de références faibles aux écouteurs.</span><span class="sxs-lookup"><span data-stu-id="407c8-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="407c8-138">Vous devez uniquement modifier ce type si le <xref:System.Windows.WeakEventManager.ListenerList> ne peuvent pas contenir vos informations requises.</span><span class="sxs-lookup"><span data-stu-id="407c8-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="407c8-139">Si, par conséquent, vous devez substituer la <xref:System.Windows.WeakEventManager.Purge%2A> méthode afin que tout le nettoyage du type sous-jacent est effectuée correctement.</span><span class="sxs-lookup"><span data-stu-id="407c8-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="407c8-140">Retourne un nouvel objet destiné à contenir des écouteurs sur un événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-140">Returns a new object to contain listeners to an event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="407c8-141">Nouvel objet destiné à contenir des écouteurs sur un événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-141">A new object to contain listeners to an event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="407c8-142">Objet source auquel le délégué de gestionnaire est abonné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-142">The source object that the handler delegate subscribes to.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="407c8-143">Délégué qui gère l’événement déclenché par <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-143">The delegate that handles the event that is raised by <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-144">Ajoute le délégué spécifié en tant que gestionnaire d'événements de la source spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-144">Adds the specified delegate as an event handler of the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="407c8-145">La source à laquelle joindre des écouteurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-145">The source to attach listeners to.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="407c8-146">La classe d'écoute (qui doit implémenter <see cref="T:System.Windows.IWeakEventListener" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-147">Ajoute l'écouteur fourni à la source fournie pour l'événement qui est géré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-147">Adds the provided listener to the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-148">Appelez cette méthode dans votre classe de gestionnaire `AddListener` méthodes sur <xref:System.Windows.WeakEventManager> implémentations.</span><span class="sxs-lookup"><span data-stu-id="407c8-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="407c8-149">`AddListener` est le nom suggéré pour la méthode statique que vous définissez sur votre classe de gestionnaire pour permettre à d’autres classes ajouter un écouteur pour votre modèle d’événement faible.</span><span class="sxs-lookup"><span data-stu-id="407c8-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="407c8-150">`AddListener` doit prendre deux paramètres : le `source` où l’écouteur est joint et le `listener` instance.</span><span class="sxs-lookup"><span data-stu-id="407c8-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="407c8-151">Pour votre `AddListener` mise en œuvre, appelez le <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> méthode sur le gestionnaire actuel, en passant les deux mêmes paramètres.</span><span class="sxs-lookup"><span data-stu-id="407c8-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="407c8-152">Si la liste des écouteurs était vide précédemment, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> appelle la <xref:System.Windows.WeakEventManager.StartListening%2A> méthode en interne, qui appellera votre spécifiques <xref:System.Windows.WeakEventManager.StartListening%2A> à travers le polymorphisme.</span><span class="sxs-lookup"><span data-stu-id="407c8-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="407c8-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Ajoute des écouteurs à un seul interne <xref:System.Windows.WeakEventManager.ListenerList> par `source`.</span><span class="sxs-lookup"><span data-stu-id="407c8-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="407c8-154">Si votre implémentation de gestionnaire maintient plusieurs listes d’écouteurs pour chaque combinaison de source d’événement, n’utilisez pas <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="407c8-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="407c8-155">Au lieu de cela, votre implémentation doit créer ses propres <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` doit ajouter des écouteurs à la liste appropriée, et les événements doivent être remis à la liste d’écouteur appropriée en appelant le <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> événements au lieu du <xref:System.Windows.WeakEventManager.DeliverEvent%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="407c8-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="407c8-156">Source à supprimer du gestionnaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-156">The source to remove the handler from.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="407c8-157">Délégué à supprimer de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-157">The delegate to remove from <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-158">Supprime de la source spécifiée le gestionnaire ajouté précédemment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-158">Removes the previously added handler from the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="407c8-159">La source à partir de laquelle supprimer des écouteurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-159">The source to remove listeners from.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="407c8-160">La classe d'écoute (qui doit implémenter <see cref="T:System.Windows.IWeakEventListener" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-161">Supprime un écouteur ajouté précédemment depuis la source fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-161">Removes a previously added listener from the provided source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-162">Appelez cette méthode dans votre classe de gestionnaire `RemoveListener` méthodes sur <xref:System.Windows.WeakEventManager> implémentations.</span><span class="sxs-lookup"><span data-stu-id="407c8-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="407c8-163">`RemoveListener` est le nom suggéré pour la méthode statique que vous définissez sur votre classe de gestionnaire pour permettre à d’autres classes de supprimer un écouteur pour votre modèle d’événement faible.</span><span class="sxs-lookup"><span data-stu-id="407c8-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="407c8-164">`RemoveListener` doit prendre deux paramètres : le `source` où l’écouteur est supprimé et la `listener` classe.</span><span class="sxs-lookup"><span data-stu-id="407c8-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="407c8-165">Pour votre `RemoveListener` mise en œuvre, appelez le <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> méthode sur le gestionnaire actuel, en passant les deux mêmes paramètres.</span><span class="sxs-lookup"><span data-stu-id="407c8-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="407c8-166">Si un appel à <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> supprime le dernier écouteur dans la liste, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> appelle la <xref:System.Windows.WeakEventManager.StopListening%2A> méthode en interne, qui appellera votre spécifiques <xref:System.Windows.WeakEventManager.StopListening%2A> à travers le polymorphisme.</span><span class="sxs-lookup"><span data-stu-id="407c8-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="407c8-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> Supprime des écouteurs à partir d’un seul interne <xref:System.Windows.WeakEventManager.ListenerList> par `source`.</span><span class="sxs-lookup"><span data-stu-id="407c8-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="407c8-168">Si votre implémentation de gestionnaire maintient plusieurs listes d’écouteurs pour chaque combinaison de source d’événement, n’utilisez pas <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="407c8-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="407c8-169">Au lieu de cela, votre implémentation doit créer ses propres <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` doit supprimer des écouteurs de la liste appropriée, et les événements doivent être remis à la liste d’écouteur appropriée en appelant le <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> méthode à la place de la <xref:System.Windows.WeakEventManager.DeliverEvent%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="407c8-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="407c8-170">Source des événements qui sont écoutés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-170">The source for events being listened to.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="407c8-171">Les données à vérifier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-171">The data to check.</span>
          </span>
          <span data-ttu-id="407c8-172">Cet objet est supposé être une implémentation <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span>
          </span>
        </param>
        <param name="purgeAll">
          <span data-ttu-id="407c8-173">
            <see langword="true" /> pour cesser d'écouter la <c>source</c> et supprimer entièrement toutes les entrées des <c>données</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-173">
              <see langword="true" /> to stop listening to <c>source</c>, and completely remove all entries from <c>data</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-174">Supprime des entrées d'écouteur inactives dans la liste de données pour la source fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-174">Removes inactive listener entries from the data list for the provided source.</span>
          </span>
          <span data-ttu-id="407c8-175">Retourne la valeur <see langword="true" /> si certaines entrées ont été supprimées réellement de la liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="407c8-176">
            <see langword="true" /> si certaines entrées ont été réellement supprimées ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-176">
              <see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-177">Le <xref:System.Windows.WeakEventManager.Purge%2A> méthode a une implémentation par défaut qui supprimera toutes les entrées lorsque les données sont un <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="407c8-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="407c8-178">Si le type sous-jacent pour le <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> est différent de <see cref="T:System.Windows.WeakEventManager.ListenerList" />, ou contient des données au-delà d’un <see cref="T:System.Windows.WeakEventManager.ListenerList" />, vous devez substituer la <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> (méthode).</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-178">If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method.</span>
            </span>
            <span data-ttu-id="407c8-179">La substitution doit fournir le comportement de la purge de la liste d’éléments de type autre.</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-179">The override should provide purge behavior for the alternate type items list.</span>
            </span>
            <span data-ttu-id="407c8-180">En règle générale, la substitution doit fournir le comportement sans appeler l’implémentation de base.</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-180">Generally, the override should provide behavior without calling the base implementation.</span>
            </span>
            <span data-ttu-id="407c8-181">Si un spécifique <see cref="T:System.Windows.WeakEventManager.ListenerList" /> a toujours besoin d’appel, en désactivant <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-181">If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="407c8-182">Établit un verrou de lecture sur la table de données sous-jacente et retourne un <see cref="T:System.IDisposable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-182">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="407c8-183">Objet qui peut être utilisé pour établir un verrou sur les membres de la table de données, puis être supprimé de manière appropriée avec une construction <see langword="using" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-183">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-184">Dans les classes dérivées, les requêtes sur la table contenue dans <xref:System.Windows.WeakEventManager.Item%2A> doit toujours se produire dans un `using (ReadLock) { ... }` clause, à l’exception des requêtes qui sont déjà dans un verrou d’écriture.</span><span class="sxs-lookup"><span data-stu-id="407c8-184">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="407c8-185">Ces requêtes peuvent être nécessaires si votre classe prend en charge un plus sophistiquées `AddListener` implémentation qui nécessite davantage de données au-delà de la `source` et `listener`et utilise le <xref:System.Windows.WeakEventManager.Item%2A> collection pour stocker les informations supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="407c8-185">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="407c8-186">La source pour laquelle supprimer des informations d'écouteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-186">The source to remove listener information for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-187">Supprime tous les écouteurs pour la source spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-187">Removes all listeners for the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="407c8-188">Demande qu'un vidage d'entrées inutilisées dans la liste d'écouteur sous-jacente soit effectué sur un thread de basse priorité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-188">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-189">Appel de la <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> méthode est similaire à l’appel le <xref:System.Windows.WeakEventManager.Purge%2A> méthode sur la liste du gestionnaire actuel, à la priorité de thread, avec la `purgeAll` paramètre la valeur `false`.</span><span class="sxs-lookup"><span data-stu-id="407c8-189">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="407c8-190">Type utilisé pour définir le nouveau gestionnaire d'événements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-190">The type to set the new event manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="407c8-191">Le nouveau gestionnaire d'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-191">The new event manager.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-192">Définit le gestionnaire actuel pour le type de gestionnaire spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-192">Sets the current manager for the specified manager type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-193">Appelez le <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> méthode pour initialiser un gestionnaire, si cela est requis par un appel à votre `CurrentManager` propriété sur un <xref:System.Windows.WeakEventManager> mise en œuvre.</span><span class="sxs-lookup"><span data-stu-id="407c8-193">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="407c8-194">La source sur laquelle commencer à écouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-194">The source to begin listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-195">En cas de substitution dans une classe dérivée, commence à écouter pour l'événement qui est géré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-195">When overridden in a derived class, starts listening for the event being managed.</span>
          </span>
          <span data-ttu-id="407c8-196">Après avoir d'abord appelé la méthode <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />, le gestionnaire doit être dans l'état d'appeler <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> ou <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> à chaque fois que l'événement pertinent de la source fournie est géré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-196">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="407c8-197">
              <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> remplacements doivent ajouter un gestionnaire à la collection <paramref name="source" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-197">
                <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />.</span>
            </span>
            <span data-ttu-id="407c8-198">Le gestionnaire est déclaré par le Gestionnaire de lui-même.</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-198">The handler is declared by the manager itself.</span>
            </span>
            <span data-ttu-id="407c8-199">Le Gestionnaire de classe ne doit pas être public, et il doit uniquement être appelée en réponse à l’événement géré.</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-199">The class handler should not be public, and it should only be called in response to the event being managed.</span>
            </span>
            <span data-ttu-id="407c8-200">Le Gestionnaire de classe doit appeler le <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> (méthode) ou le <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> méthode correctement.</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-200">The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="407c8-201">La source sur laquelle arrêter d'écouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-201">The source to stop listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="407c8-202">En cas de substitution dans une classe dérivée, cesse d'écouter sur la source fournie pour l'événement qui est géré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-202">When overridden in a derived class, stops listening on the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="407c8-203">
              <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> les implémentations doivent supprimer le Gestionnaire de classe comme ajouté par le <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> (méthode).</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-203">
                <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method.</span>
            </span>
            <span data-ttu-id="407c8-204">Suppression d’un écouteur ne doit pas effacer la liste d’écouteur.</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-204">Removing a listener should not clear the listener list.</span>
            </span>
            <span data-ttu-id="407c8-205">Au lieu de cela, il doit déconnecter uniquement le Gestionnaire de classe (peut-être temporairement).</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-205">Instead, it should only disconnect the class handler (perhaps temporarily).</span>
            </span>
            <span data-ttu-id="407c8-206">Autres méthodes sont disponibles pour l’effacement de l’intégralité de la liste, tels que les <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> méthode avec la <paramref name="purgeAll" /> paramètre la valeur <see langword="true" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="407c8-206">Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="407c8-207">Établit un verrou d’écriture sur la table de données sous-jacente et retourne un <see cref="T:System.IDisposable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-207">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="407c8-208">Objet qui peut être utilisé pour établir un verrou sur les membres de la table de données, puis être supprimé de manière appropriée avec une construction <see langword="using" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="407c8-208">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="407c8-209">Dans les classes dérivées, toutes les modifications à la table de données sous-jacente doivent se produire dans un `using (WriteLock) { ... }` clause.</span><span class="sxs-lookup"><span data-stu-id="407c8-209">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="407c8-210">Ces modifications peuvent être nécessaires si votre classe prend en charge un plus sophistiquées `AddListener` implémentation qui nécessite davantage de données au-delà de la `source` et `listener`et utilise le <xref:System.Windows.WeakEventManager.Item%2A> collection pour stocker les informations supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="407c8-210">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>