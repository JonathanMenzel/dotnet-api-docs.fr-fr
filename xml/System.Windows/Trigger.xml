<Type Name="Trigger" FullName="System.Windows.Trigger">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1229422a5cd2e7284eefbbc1be16a5c101b8862a" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48712469" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Trigger : System.Windows.TriggerBase, System.ComponentModel.ISupportInitialize, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Trigger extends System.Windows.TriggerBase implements class System.ComponentModel.ISupportInitialize, class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Trigger" />
  <TypeSignature Language="VB.NET" Value="Public Class Trigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Trigger : System::Windows::TriggerBase, System::ComponentModel::ISupportInitialize, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type Trigger = class&#xA;    inherit TriggerBase&#xA;    interface IAddChild&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.XamlSetTypeConverter("ReceiveTypeConverter")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un déclencheur qui applique des valeurs de propriété ou effectue des actions de manière conditionnelle.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] définit les propriétés qui correspondent aux actions de l’utilisateur final, tels que le <xref:System.Windows.UIElement.IsMouseOver%2A> propriété a la valeur `true` lorsque l’utilisateur place le curseur sur un <xref:System.Windows.UIElement> ou correspondant <xref:System.Windows.ContentElement.IsMouseOver%2A> propriété d’un <xref:System.Windows.ContentElement>. Qui représente les actions de l’utilisateur final dans les valeurs de propriété, ainsi que la <xref:System.Windows.Trigger> permet de l’élément, [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] styles pour modifier les valeurs de propriété à partir de ces actions de l’utilisateur final, tout à partir dans le balisage.  
  
 Les propriétés modifiées par les déclencheurs sont automatiquement rétablies à leur valeur précédente lorsque la condition de déclenchement n’est plus remplie. Les déclencheurs sont optimisés pour les états transitoires qui sont supposée changer et l’état de retour d’origine, tels que <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> sur <xref:System.Windows.Controls.Button> et <xref:System.Windows.Controls.ListBoxItem.IsSelected%2A> sur <xref:System.Windows.Controls.ListBoxItem>. Le <xref:System.Windows.Trigger.Property%2A> d’intérêt doit être une propriété de dépendance.  
  
 Notez que vous devez spécifier à la fois le <xref:System.Windows.Trigger.Property%2A> et <xref:System.Windows.Trigger.Value%2A> propriétés sur un <xref:System.Windows.Trigger> pour le déclencheur soit explicite. Si un ou les deux propriétés ne sont pas définies, une exception est levée.  
  
 Le <xref:System.Windows.Trigger.Setters%2A> propriété d’un <xref:System.Windows.Trigger> objet peut contenir uniquement des <xref:System.Windows.Setter> objets. Ajout d’un <xref:System.Windows.Setter> enfant à un <xref:System.Windows.Trigger> objet ajoute implicitement à la <xref:System.Windows.SetterBaseCollection> pour le <xref:System.Windows.Trigger> objet. <xref:System.Windows.EventSetter> objets ne sont pas pris en charge ; uniquement <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> prend en charge <xref:System.Windows.EventSetter> objets.  
  
 Il existe d’autres types de déclencheurs. <xref:System.Windows.MultiTrigger> vous permet d’appliquer les modifications en fonction de l’état de plusieurs propriétés. <xref:System.Windows.EventTrigger> vous permet d’appliquer des modifications lorsqu’un événement se produit. <xref:System.Windows.DataTrigger> et <xref:System.Windows.MultiDataTrigger> concernent les propriétés liées aux données.  
  
   
  
## Examples  
 L’exemple suivant montre une nommée <xref:System.Windows.Style> disponibles pour <xref:System.Windows.Controls.Button> contrôles. Le <xref:System.Windows.Style> définit un <xref:System.Windows.Trigger> élément qui change la <xref:System.Windows.Controls.Control.Foreground%2A> propriété d’un bouton lorsque le <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> propriété est `true`.  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=160010">Introduction aux styles et modèles, exemple</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Trigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Trigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Trigger" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Property" />
      <MemberSignature Language="VB.NET" Value="Public Property Property As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ Property { System::Windows::DependencyProperty ^ get(); void set(System::Windows::DependencyProperty ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Property : System.Windows.DependencyProperty with get, set" Usage="System.Windows.Trigger.Property" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Modifiability=System.Windows.Modifiability.Unmodifiable, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la propriété qui retourne la valeur comparée avec la propriété <see cref="P:System.Windows.Trigger.Value" /> du déclencheur. La comparaison est un contrôle de l'égalité de la référence.</summary>
        <value>Un <see cref="T:System.Windows.DependencyProperty" /> qui retourne la valeur de propriété de l'élément. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur retournée par cette propriété est comparée à la valeur spécifiée par le <xref:System.Windows.Trigger.Value%2A> propriété. La comparaison est effectuée est une vérification de l’égalité de référence. Si les deux valeurs correspondent, puis associé <xref:System.Windows.Setter>applique les valeurs de propriété spécifié.  
  
 Utilisez le `ClassName.PropertyName` syntaxe qualifier la propriété que vous spécifiez si le style ou le modèle qui contient ce déclencheur n’a pas la `TargetType` jeu de propriétés.  
  
 Notez que vous devez spécifier à la fois le <xref:System.Windows.Trigger.Property%2A> et <xref:System.Windows.Trigger.Value%2A> propriétés sur un <xref:System.Windows.Trigger> pour le déclencheur soit explicite. Si un ou les deux propriétés ne sont pas définies, une exception est levée.  
  
   
  
## Examples  
 L’exemple suivant contient deux déclencheurs. Du premier remplace le <xref:System.Windows.Controls.Control.Background%2A> propriété d’un <xref:System.Windows.Controls.Button> lorsque le <xref:System.Windows.UIElement.IsMouseOver%2A> propriété est **true**. Le deuxième modifie le <xref:System.Windows.Controls.Control.Foreground%2A> propriété d’un bouton lorsque le <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> propriété est **true**. Le <xref:System.Windows.Style.TargetType%2A> de la <xref:System.Windows.Style> a la valeur <xref:System.Windows.Controls.Button> et par conséquent, il est inutile de qualifier la `Property` propriétés portant le nom de classe.  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Un <see cref="T:System.Windows.Style" /> ne peut pas contenir un <see cref="T:System.Windows.Trigger" /> qui fait référence à la propriété <see cref="T:System.Windows.Style" />.</exception>
        <exception cref="T:System.InvalidOperationException">Après que l'utilisation d'une <see cref="T:System.Windows.Trigger" /> ait été lancée, cette condition ne peut pas être modifiée.</exception>
        <altmember cref="P:System.Windows.Trigger.Value" />
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=160010">Introduction aux styles et modèles, exemple</related>
      </Docs>
    </Member>
    <Member MemberName="ReceiveTypeConverter">
      <MemberSignature Language="C#" Value="public static void ReceiveTypeConverter (object targetObject, System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReceiveTypeConverter(object targetObject, class System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.ReceiveTypeConverter(System.Object,System.Windows.Markup.XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReceiveTypeConverter (targetObject As Object, eventArgs As XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReceiveTypeConverter(System::Object ^ targetObject, System::Windows::Markup::XamlSetTypeConverterEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="static member ReceiveTypeConverter : obj * System.Windows.Markup.XamlSetTypeConverterEventArgs -&gt; unit" Usage="System.Windows.Trigger.ReceiveTypeConverter (targetObject, eventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.Windows.Markup.XamlSetTypeConverterEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetObject">Objet où le convertisseur de type définit la valeur.</param>
        <param name="eventArgs">Données pertinentes pour le traitement du convertisseur de type.</param>
        <summary>Gère des cas où un convertisseur de type fournit une valeur pour une propriété d'un objet <see cref="T:System.Windows.Trigger" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la méthode référencée par un appliqué <xref:System.Windows.Markup.XamlSetTypeConverterAttribute> attribut au niveau de la classe, ce qui signifie que cette méthode traite toutes les tentatives de définir des valeurs de <xref:System.Windows.Trigger> avec un convertisseur de type. Vous n’en général, appelez pas cette méthode directement.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Setters : System.Windows.SetterBaseCollection" Usage="System.Windows.Trigger.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection d'objets <see cref="T:System.Windows.Setter" />, qui décrivent les valeurs de propriété à appliquer lorsque la condition spécifiée a été rencontrée.</summary>
        <value>La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.Setters>  
    ZeroOrMoreSetters  
  </object.Setters>  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *ZeroOrMoreSetters*  
 Zéro ou plusieurs <xref:System.Windows.Setter> objets. Cela ne prend pas en charge <xref:System.Windows.EventSetter> objet.  
  
 Un <xref:System.Windows.Trigger> vous permet d’utiliser <xref:System.Windows.Setter>pour appliquer la propriété valeurs lorsque l’élément rencontre une condition spécifiée. Par exemple, vous souhaiterez modifier la couleur d’arrière-plan d’un élément lorsqu’il est en mode focus.  
  
 Si la même propriété est définie plusieurs fois, la dernière valeur de propriété sera appliquée.  
  
 Le <xref:System.Windows.Trigger.Setters%2A> propriété d’un <xref:System.Windows.Trigger> objet peut contenir uniquement des <xref:System.Windows.Setter> objets. Ajout d’un <xref:System.Windows.Setter> enfant à un <xref:System.Windows.Trigger> objet ajoute implicitement à la <xref:System.Windows.SetterBaseCollection> pour le <xref:System.Windows.Trigger> objet. <xref:System.Windows.EventSetter> objets ne sont pas pris en charge ; uniquement <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> prend en charge <xref:System.Windows.EventSetter> objets.  
  
   
  
## Examples  
 Comme mentionné ci-dessus, l’ajout un <xref:System.Windows.Setter> enfant à un <xref:System.Windows.Trigger> objet ajoute implicitement à la <xref:System.Windows.SetterBaseCollection> pour le <xref:System.Windows.Trigger> objet. Dans l’exemple suivant, `<Trigger.Setters>` est implicite.  
  
 [!code-xaml[PhotoStoreDemoStyled#TriggerSettersRef](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#triggersettersref)]   
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=160010">Introduction aux styles et modèles, exemple</related>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceName : string with get, set" Usage="System.Windows.Trigger.SourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de l'objet avec la propriété qui entraîne l'application des méthodes setter associées.</summary>
        <value>La valeur par défaut de la propriété est <see langword="null" />. Si la valeur de cette propriété est <see langword="null" />, la propriété <see cref="P:System.Windows.Trigger.Property" /> est alors évaluée par rapport à l'élément sur lequel est appliqué ce style ou ce modèle (le parent mis en forme avec des styles ou le parent basé sur des modèles).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez définir cette propriété sur le nom de n’importe quel élément dans la portée de l’emplacement où la collection de déclencheurs (la collection que ce <xref:System.Windows.Trigger> fait partie) est appliquée. Il s’agit généralement d’un élément nommé qui est dans le modèle qui contient ce <xref:System.Windows.Trigger>.  
  
 Vous pouvez nommer un objet en utilisant le [Directive x : Name](~/docs/framework/xaml-services/x-name-directive.md) syntaxe.  
  
   
  
## Examples  
 Un scénario lorsque vous utiliseriez le <xref:System.Windows.Trigger.SourceName%2A> propriété est lorsque la propriété qui vous intéresse n’est pas une propriété du parent basé sur un modèle, comme dans l’exemple suivant :  
  
 [!code-xaml[ControlTemplateExamples#TriggerSourceName](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/menu.xaml#triggersourcename)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Après que l'utilisation d'une <see cref="T:System.Windows.Trigger" /> ait été lancée, cette condition ne peut pas être modifiée.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberSignature Language="VB.NET" Value="Sub BeginInit () Implements ISupportInitialize.BeginInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.BeginInit() = System::ComponentModel::ISupportInitialize::BeginInit;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Signale à l'objet que l'initialisation démarre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut uniquement être utilisé lorsque l'instance de <xref:System.Windows.Setter> est castée en interface <xref:System.ComponentModel.ISupportInitialize>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberSignature Language="VB.NET" Value="Sub EndInit () Implements ISupportInitialize.EndInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.EndInit() = System::ComponentModel::ISupportInitialize::EndInit;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Signale à l'objet que l'initialisation est terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut uniquement être utilisé lorsque l'instance de <xref:System.Windows.Setter> est castée en interface <xref:System.ComponentModel.ISupportInitialize>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objet enfant à ajouter.</param>
        <summary>Ajoute un objet enfant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut uniquement être utilisé lorsque l'instance de <xref:System.Windows.Trigger> est castée en interface <xref:System.Windows.Markup.IAddChild>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texte à ajouter à l’objet.</param>
        <summary>Ajoute le contenu textuel d’un nœud à l’objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut uniquement être utilisé lorsque l'instance de <xref:System.Windows.Trigger> est castée en interface <xref:System.Windows.Markup.IAddChild>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Windows.Trigger.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.SetterTriggerConditionValueConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DependsOn("Property")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DependsOn("SourceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur à comparer avec la valeur de propriété de l'élément. La comparaison est un contrôle de l'égalité de la référence.</summary>
        <value>La valeur par défaut est <see langword="null" />. Consultez également la section Exceptions.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette valeur est comparée à la valeur de propriété retournée par la <xref:System.Windows.Trigger.Property%2A> propriété de la <xref:System.Windows.Trigger>. La comparaison est effectuée est un contrôle de qualité de référence. Si les deux valeurs sont égales, puis associé <xref:System.Windows.Setter>applique les valeurs de propriété spécifié.  
  
 Notez que vous devez spécifier à la fois le <xref:System.Windows.Trigger.Property%2A> et <xref:System.Windows.Trigger.Value%2A> propriétés sur un <xref:System.Windows.Trigger> pour le déclencheur soit explicite. Par conséquent, si un ou les deux propriétés ne sont pas spécifiées, une exception est levée.  
  
<a name="xamlPropertyElementUsage_Value"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.Value>  
    Value  
  </object.Value>  
</object>  
```  
  
   
  
## Examples  
 L’exemple suivant modifie le <xref:System.Windows.Controls.Control.Foreground%2A> propriété d’un bouton lorsque le <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> propriété est **true**.  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Les expressions telles que les liaisons ne sont pas prises en charge.</exception>
        <exception cref="T:System.InvalidOperationException">Après que l'utilisation d'une <see cref="T:System.Windows.Trigger" /> ait été lancée, cette condition ne peut pas être modifiée.</exception>
        <altmember cref="P:System.Windows.Trigger.Property" />
        <altmember cref="P:System.Windows.Trigger.Setters" />
      </Docs>
    </Member>
  </Members>
</Type>