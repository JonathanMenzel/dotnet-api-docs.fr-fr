<Type Name="TemplateBindingExpressionConverter" FullName="System.Windows.TemplateBindingExpressionConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="018d22da7b38bb19fb98bc9191932a93b4ecc0ea" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53522691" /></Metadata><TypeSignature Language="C#" Value="public class TemplateBindingExpressionConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TemplateBindingExpressionConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.TemplateBindingExpressionConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class TemplateBindingExpressionConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class TemplateBindingExpressionConverter : System::ComponentModel::TypeConverter" />
  <TypeSignature Language="F#" Value="type TemplateBindingExpressionConverter = class&#xA;    inherit TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Convertisseur de type utilisé pour construire une extension de balisage à partir d'une instance <see cref="T:System.Windows.TemplateBindingExpression" /> pendant la sérialisation.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TemplateBindingExpressionConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TemplateBindingExpressionConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TemplateBindingExpressionConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.TemplateBindingExpressionConverter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TemplateBindingExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="templateBindingExpressionConverter.CanConvertTo (context, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Implémentation d'un <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
        <param name="destinationType">Type souhaité de la sortie de la conversion.</param>
        <summary>Retourne une valeur indiquant si ce convertisseur peut convertir l’objet en objet du type spécifié, à l’aide du contexte spécifié.</summary>
        <returns><see langword="true" /> si ce convertisseur peut effectuer la conversion demandée ; sinon, <see langword="false" />. <paramref name="destinationType" /> ne peut retourner <see langword="true" /> que s'il est égal à <see cref="T:System.Windows.Markup.MarkupExtension" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TemplateBindingExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj" Usage="templateBindingExpressionConverter.ConvertTo (context, culture, value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Implémentation d'un <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
        <param name="culture">Objet <see cref="T:System.Globalization.CultureInfo" />. Si une référence null est passée, la culture actuelle est utilisée par défaut.</param>
        <param name="value">Valeur à convertir.</param>
        <param name="destinationType">Type vers lequel vous souhaitez effectuer la conversion.</param>
        <summary>Convertit l'objet de valeur donné en type <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
        <returns>Valeur convertie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uniquement une `destinationType` de <xref:System.Windows.Markup.MarkupExtension> retourne une valeur provenant de cette implémentation. Tout autre type prévu pour `destinationType` provoque la méthode à appeler la base, ce qui donne lieu à aucune valeur convertie utilisable et sert uniquement pour la validation de base des paramètres restants.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>