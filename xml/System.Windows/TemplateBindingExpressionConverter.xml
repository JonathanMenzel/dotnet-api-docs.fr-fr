<Type Name="TemplateBindingExpressionConverter" FullName="System.Windows.TemplateBindingExpressionConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5909aa16e17d66e6d097c35d28d91f33a189400f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30676333" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TemplateBindingExpressionConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TemplateBindingExpressionConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.TemplateBindingExpressionConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class TemplateBindingExpressionConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class TemplateBindingExpressionConverter : System::ComponentModel::TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ab5cd-101">Convertisseur de type utilisé pour construire une extension de balisage à partir d'une instance <see cref="T:System.Windows.TemplateBindingExpression" /> pendant la sérialisation.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ab5cd-101">A type converter that is used to construct a markup extension from a <see cref="T:System.Windows.TemplateBindingExpression" /> instance during serialization.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TemplateBindingExpressionConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TemplateBindingExpressionConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TemplateBindingExpressionConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ab5cd-102">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.TemplateBindingExpressionConverter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-102">Initializes a new instance of the <see cref="T:System.Windows.TemplateBindingExpressionConverter" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TemplateBindingExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="ab5cd-103">Implémentation d'un <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-103">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> implementation that provides a format context.</span>
          </span>
        </param>
        <param name="destinationType">
          <span data-ttu-id="ab5cd-104">Type souhaité de la sortie de la conversion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-104">The desired type of the conversion's output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab5cd-105">Retourne une valeur indiquant si ce convertisseur peut convertir l’objet en objet du type spécifié, à l’aide du contexte spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-105">Returns whether this converter can convert the object to the specified type, using the specified context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab5cd-106">
            <see langword="true" /> si ce convertisseur peut effectuer la conversion demandée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-106">
              <see langword="true" /> if this converter can perform the requested conversion; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ab5cd-107">
            <paramref name="destinationType" /> ne peut retourner <see langword="true" /> que s'il est égal à <see cref="T:System.Windows.Markup.MarkupExtension" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-107">Only a <paramref name="destinationType" /> of <see cref="T:System.Windows.Markup.MarkupExtension" /> returns <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TemplateBindingExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="ab5cd-108">Implémentation d'un <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-108">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> implementation that provides a format context.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="ab5cd-109">Objet <see cref="T:System.Globalization.CultureInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-109">A <see cref="T:System.Globalization.CultureInfo" /> object.</span>
          </span>
          <span data-ttu-id="ab5cd-110">Si une référence null est passée, la culture actuelle est utilisée par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-110">If a null reference is passed, the current culture is assumed.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="ab5cd-111">Valeur à convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-111">The value to convert.</span>
          </span>
        </param>
        <param name="destinationType">
          <span data-ttu-id="ab5cd-112">Type vers lequel vous souhaitez effectuer la conversion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-112">The desired type to convert to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab5cd-113">Convertit l'objet de valeur donné en type <see cref="T:System.Windows.Markup.MarkupExtension" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-113">Converts the given value object to a <see cref="T:System.Windows.Markup.MarkupExtension" /> type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab5cd-114">Valeur convertie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab5cd-114">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab5cd-115">Uniquement un `destinationType` de <xref:System.Windows.Markup.MarkupExtension> retourne une valeur provenant de cette implémentation.</span><span class="sxs-lookup"><span data-stu-id="ab5cd-115">Only a `destinationType` of <xref:System.Windows.Markup.MarkupExtension> returns a value originating from this implementation.</span></span> <span data-ttu-id="ab5cd-116">Tout autre type prévu pour `destinationType` provoque cette méthode à appeler la base, et qu’aucune valeur convertie utilisable uniquement pour la validation de base des paramètres restants.</span><span class="sxs-lookup"><span data-stu-id="ab5cd-116">Any other type provided for `destinationType` causes this method to call base, which results in no usable converted value and only serves for basic validation of the remaining parameters.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>