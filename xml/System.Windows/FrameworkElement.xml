<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="52bb34d9daddff99314e23014e5d61909a488206" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33660148" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit un jeu de niveau infrastructure WPF de propriétés, d’événements et de méthodes pour les éléments WPF (Windows Presentation Foundation). Cette classe représente l’implémentation de niveau infrastructure WPF fournie qui repose sur les API de niveau noyau WPF définies par <see cref="T:System.Windows.UIElement" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement> est le point de connexion entre les classes d’élément de niveau infrastructure WPF et le jeu d’au niveau du noyau WPF de <xref:System.Windows.UIElement> services de présentation. Pour plus d’informations sur ces concepts, consultez [WPF Architecture](~/docs/framework/wpf/advanced/wpf-architecture.md).  
  
 <xref:System.Windows.FrameworkElement> étend <xref:System.Windows.UIElement> et ajoute les fonctionnalités suivantes :  
  
-   **Définition de système de disposition**: <xref:System.Windows.FrameworkElement> fournit des implémentations spécifiques de niveau infrastructure WPF pour certaines méthodes qui ont été définis comme membres virtuels dans <xref:System.Windows.UIElement>. Plus particulièrement, <xref:System.Windows.FrameworkElement> scelle certaines substitutions de disposition de niveau noyau WPF et fournit en un équivalent de niveau infrastructure WPF que les classes dérivées doit substituer à la place. Par exemple, <xref:System.Windows.FrameworkElement> scellés <xref:System.Windows.UIElement.ArrangeCore%2A> mais fournit <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>. Ces modifications reflètent le fait qu’au niveau de niveau infrastructure WPF est un système de disposition complète en place qui peut restituer les <xref:System.Windows.FrameworkElement> classe dérivée. À WPF de base au niveau, certains membres qui seront la structure générale [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] en fonction de mise en page sont en place, mais le moteur réel du système de disposition n’est pas défini. Pour plus d’informations, consultez [disposition](~/docs/framework/wpf/advanced/layout.md).  
  
-   **L’arborescence logique :** générales [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modèle de programmation est souvent exprimé en termes d’en cours d’une arborescence d’éléments. Prise en charge pour exprimer l’arborescence d’éléments sous forme d’arborescence logique et qui l’accompagne prise en charge de définition de cette arborescence dans le balisage est implémentée à le <xref:System.Windows.FrameworkElement> niveau. Notez cependant que <xref:System.Windows.FrameworkElement> ne définit pas un modèle de contenu délibérément et laisse cette responsabilité aux classes dérivées. Pour plus d’informations, consultez [Arborescences dans WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
-   **Événements de durée de vie de l’objet :** il est souvent utile de savoir quand un élément est initialisé (le constructeur est appelé) ou lorsque l’élément est tout d’abord chargé dans une arborescence logique. <xref:System.Windows.FrameworkElement> définit les événements liés à la durée de vie qui fournissent des raccordements utiles pour les opérations de code-behind qui impliquent des éléments, telles que l’ajout des éléments enfants. Pour plus d’informations, consultez [événements de durée de vie de l’objet](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
-   **Prise en charge de la liaison de données et les références de ressources dynamiques :** la prise en charge au niveau de la propriété de liaison de données et des ressources est implémentée par le <xref:System.Windows.DependencyProperty> quant au système de propriétés, mais la capacité à résoudre une valeur de membre qui est stocké comme un <xref:System.Windows.Expression> (la construction de programmation sous-jacente de liaison de données et ressources dynamiques) est implémentée par <xref:System.Windows.FrameworkElement>. Pour plus d’informations, consultez [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md) et [ressources XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
-   **Styles :** <xref:System.Windows.FrameworkElement> définit le <xref:System.Windows.FrameworkElement.Style%2A> propriété. Toutefois, <xref:System.Windows.FrameworkElement> ne pas encore définir la prise en charge des modèles, ou prend en charge les éléments décoratifs. Ces fonctionnalités sont introduites par les classes de contrôle telles que <xref:System.Windows.Controls.Control> et <xref:System.Windows.Controls.ContentControl>.  
  
-   **Prise en charge de plus d’animation :** une prise en charge de l’animation a déjà été défini au niveau du noyau WPF, mais <xref:System.Windows.FrameworkElement> Cela étend en implémentant <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> et les membres.  
  
 Comme peuvent être consultés à partir de la hiérarchie de classes, nombreux [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dérivent de classes <xref:System.Windows.FrameworkElement>, directement ou via les classes de base intermédiaires telles que <xref:System.Windows.Controls.Panel> ou <xref:System.Windows.Controls.Control>.  
  
 Si vous envisagez d’utiliser <xref:System.Windows.FrameworkElement> comme classe de base, vous souhaiterez peut-être tout d’abord examiner les classes dérivées existantes. <xref:System.Windows.FrameworkElement> prend en charge un nombre de scénarios de base, mais ne dispose pas d’un nombre de fonctionnalités souhaitables pour un « élément » dans le sens d’un bloc de construction qui vous permet de créer également [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] dans [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]. Par exemple, un <xref:System.Windows.FrameworkElement> ne définit pas de n’importe quel modèle de contenu true ; <xref:System.Windows.FrameworkElement> comme une classe de base ne définit pas une propriété qui peut créer [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] des éléments enfants. En particulier, vous souhaiterez peut-être examiner <xref:System.Windows.Controls.Control> et <xref:System.Windows.Controls.ContentControl>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la hauteur rendue de cet élément.</summary>
        <value>Hauteur de l'élément, exprimée en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. La valeur par défaut est 0 (zéro).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est une valeur calculée basée sur les autres entrées de hauteur et le système de disposition. La valeur est définie par le système de disposition, selon une passe de rendu et peut par conséquent rester légèrement derrière la valeur du jeu de propriétés telles que <xref:System.Windows.FrameworkElement.Height%2A> qui constituent la base de la modification d’entrée.  
  
 Étant donné que <xref:System.Windows.FrameworkElement.ActualHeight%2A> est une valeur calculée, vous devez être conscient qu’il peut y avoir plusieurs ou incrémentielles signalées modifications à la suite de différentes opérations par le système de disposition. Celui-ci peut en effet calculer l’espace de mesure requis pour les éléments enfants, les contraintes de l’élément parent, et ainsi de suite.  
  
 Bien que vous ne pouvez pas définir cette propriété à partir de [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], vous pouvez baser un <xref:System.Windows.Trigger> sur sa valeur dans un style.  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant affiche les différentes propriétés de hauteur.  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.ActualHeight" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la largeur rendue de cet élément.</summary>
        <value>Largeur de l'élément, exprimée en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. La valeur par défaut est 0 (zéro).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est une valeur calculée en fonction d’autres entrées de largeur et le système de disposition. La valeur est définie par le système de disposition, selon une passe de rendu et peut par conséquent rester légèrement derrière la valeur du jeu de propriétés telles que <xref:System.Windows.FrameworkElement.Width%2A> qui constituent la base de la modification d’entrée.  
  
 Étant donné que <xref:System.Windows.FrameworkElement.ActualWidth%2A> est une valeur calculée, vous devez être conscient qu’il peut y avoir plusieurs ou incrémentielles signalées modifications à la suite de différentes opérations par le système de disposition. Celui-ci peut en effet calculer l’espace de mesure requis pour les éléments enfants, les contraintes de l’élément parent, et ainsi de suite.  
  
 Bien que vous ne pouvez pas définir cette propriété à partir de [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], vous pouvez baser un <xref:System.Windows.Trigger> sur sa valeur dans un style.  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant affiche les différentes propriétés de largeur.  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.ActualWidth" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">Élément enfant à ajouter.</param>
        <summary>Ajoute l'objet fourni à l'arborescence logique de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour l’implémentation de collections sur les objets qui représentent les éléments enfants logiques d’un élément. La maintenance des collections d’éléments enfants peut être effectuée dans les accesseurs Get ou Set, la gestion des événements a été modifié, les constructeurs, ou dans les types de collection eux-mêmes de classe.  
  
 Pour les auteurs de contrôle, la manipulation de l’arborescence logique à ce niveau n’est pas recommandée, sauf si aucun des modèles de contenu pour les classes de contrôle de base disponibles sont adaptées à votre scénario de contrôle. Considérez le sous-classement au niveau de <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, et <xref:System.Windows.Controls.HeaderedItemsControl>. Ces classes fournissent un modèle de contenu d’application d’éléments enfants d’arborescence logique via dédié [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], ainsi que la prise en charge d’autres fonctionnalités généralement souhaitables dans un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] contrôle telles que via des modèles de conception de styles. Pour plus d’informations sur l’utilisation de <xref:System.Windows.FrameworkElement.LogicalChildren%2A> et <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, consultez [arborescences dans WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A> peut de lever une exception si elle est appelée à un moment où l’arborescence logique est itérée par un autre processus.  
  
   
  
## Examples  
 L’exemple suivant implémente un `Child` propriété personnalisé <xref:System.Windows.FrameworkElement> qui effectue sa propre implémentation de couche visuelle. L’accesseur Set de propriété est conçue afin que si la valeur change, l’ancienne valeur est supprimée à partir de l’arborescence logique, ainsi que d’une collection visuelle spécifique à la classe. La valeur de propriété est mis en cache, puis la nouvelle valeur est ajoutée à l’arborescence logique et la collection visuelle personnalisée.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Génère, si nécessaire, l’arborescence d’éléments visuels du modèle actuel et retourne une valeur qui indique si l’arborescence d’éléments visuels a été régénérée par cet appel.</summary>
        <returns>
          <see langword="true" /> si des éléments visuels ont été ajoutés à l’arborescence ; retourne <see langword="false" /> dans le cas contraire.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les applications peuvent appeler cette méthode pour garantir que l’arborescence d’éléments visuels d’un élément est terminée. Cette étape de garantie peut être nécessaire si le code est chargé de vérifier les éléments enfants dans l’arborescence. Pour la logique d’élément typique dans les applications qui appellent <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> n’est pas nécessaire, car les modèles seront appliqués automatiquement aux éléments à un point approprié dans leur durée de vie.  
  
 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> est appelée sur toutes les mesures de passer par le système de mise en page de niveau infrastructure WPF.  
  
 <xref:System.Windows.FrameworkElement> classes dérivées peuvent utiliser le <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> Gestionnaire de classe pour être averti des cas où cette méthode a été appelée explicitement, ou par le système de disposition. <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> est appelée une fois que le modèle est complètement généré et attaché à l’arborescence logique.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Dernière zone dans le parent que cet élément doit utiliser pour se réorganiser et réorganiser ses enfants.</param>
        <summary>Implémente <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (défini comme virtuel dans <see cref="T:System.Windows.UIElement" />) et scelle l'implémentation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est sealed. Pour substituer le code dans votre élément personnalisé spécifiquement pour la réorganisation de la disposition de l’élément, votre <xref:System.Windows.FrameworkElement> classe dérivée doit remplacer <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">Dernière zone dans le parent que cet élément doit utiliser pour se réorganiser et réorganiser ses enfants.</param>
        <summary>En cas de substitution dans une classe dérivée, positionne les éléments enfants et détermine la taille d’une classe dérivée <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>Taille réelle utilisée.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Les auteurs de contrôle qui souhaitent personnaliser la passe de réorganisation du traitement de disposition doivent substituer cette méthode. Le modèle d’implémentation doit appeler <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> sur chaque élément enfant visible et passez à la taille de chaque élément enfant comme désirée finale du <paramref name="finalRect" /> paramètre. Éléments parents doivent appeler <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> sur chaque enfant, sinon les ne seront pas rendu des éléments enfants.  
  
 De nombreuses classes dérivées offrent une implémentation de cette méthode. Remarquables sont : <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />, <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> et <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />.</para>
        </block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Démarre le processus d'initialisation pour cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous ajustez les de manière à ne pas encore exposer ou l’élément à l’arborescence d’éléments, vous pouvez appeler cette méthode pour des éléments individuels. Par exemple, vous avez peut-être créé un nouveau <xref:System.Windows.FrameworkElement>, mais n'avez pas encore associé à aucune arborescence logique. Ou bien, l’arborescence logique où votre élément est un élément enfant qu’il contient n’est peut-être pas connecté à une fenêtre ou d’une page de l’application.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implémentez cette méthode pour fournir une gestion spéciale qui doit se produire avant que votre élément est initialisé pendant le processus de chargement de l’élément.  
  
 Votre implémentation doit appeler l’implémentation de base, car l’implémentation de base (valeur par défaut) définit certains indicateurs internes pour effectuer le suivi de l’initialisation. Une implémentation possible est d’utiliser cette méthode comme un raccordement dans vos propres routines d’initialisation de classe privée qui ne sont pas déjà activées par les constructeurs.  
  
 L’implémentation de base lève une exception si <see cref="M:System.Windows.FrameworkElement.BeginInit" /> est appelée plusieurs fois sur le même élément avant de <see cref="M:System.Windows.FrameworkElement.EndInit" /> qui est appelée.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lance la séquence d'actions contenues dans la table de montage séquentiel fournie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard">Table de montage séquentiel à lancer.</param>
        <summary>Commence la séquence d'actions contenues dans la table de montage séquentiel fournie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Plus des scénarios d’animation n’utilisent pas cette méthode. En général, vous créez le <xref:System.Windows.Media.Animation.Storyboard> ou <xref:System.Windows.Media.Animation.BeginStoryboard> en tant qu’élément dans le balisage et placer le <xref:System.Windows.EventTrigger> contenu sur un élément. Au déclenchement de l’événement, puis l’animation s’exécute. La plupart des aspects de contrôle d’un <xref:System.Windows.Media.Animation.Storyboard> peuvent être traités par les propriétés qui sont exposées dans le balisage.  
  
 Pour les signatures qui n’utilisent pas le `isControllable`, paramètre, ou lorsque ce paramètre est spécifié `false`, les horloges de montage qui sont associés à l’animation sont supprimées dès qu’elle atteint la période de « Remplissage ». Par conséquent, l’animation ne peut pas être redémarrée après l’exécution d’une seule fois. Contrôle d’une animation requiert également que la table de montage séquentiel ont un [Directive x : Name](~/docs/framework/xaml-services/x-name-directive.md) ou soit accessible par référence dans le code.  
  
   
  
## Examples  
 L’exemple suivant récupère un <xref:System.Windows.Media.Animation.Storyboard> à partir des ressources, puis exécute <xref:System.Windows.Media.Animation.Storyboard> lorsqu’un événement interne est géré par classes.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard">Table de montage séquentiel à lancer.</param>
        <param name="handoffBehavior">Valeur de l'énumération qui décrit le comportement à adopter si une propriété décrite dans la table de montage séquentiel est déjà animée.</param>
        <summary>Lance la séquence d'actions contenues dans la table de montage séquentiel fournie, les options précisant ce qui doit se produire si la propriété est déjà animée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Plus des scénarios d’animation n’utilisent pas cette méthode. En général, vous créez le <xref:System.Windows.Media.Animation.Storyboard> ou <xref:System.Windows.Media.Animation.BeginStoryboard> en tant qu’élément dans le balisage et placer le <xref:System.Windows.EventTrigger> contenu sur un élément. Au déclenchement de l’événement, puis l’animation s’exécute. La plupart des aspects de contrôle d’un <xref:System.Windows.Media.Animation.Storyboard> peuvent être traités par les propriétés qui sont exposées dans le balisage.  
  
 Pour les signatures qui n’utilisent pas le `isControllable`, paramètre, ou lorsque ce paramètre est spécifié `false`, les horloges de montage qui sont associés à l’animation sont supprimées dès qu’elle atteint la période de « Remplissage ». Par conséquent, l’animation ne peut pas être redémarrée après l’exécution d’une seule fois. Contrôle d’une animation requiert également que la table de montage séquentiel ont un [Directive x : Name](~/docs/framework/xaml-services/x-name-directive.md) ou soit accessible par référence dans le code.  
  
 Comportement de transfert peut être spécifié comme attribut de <xref:System.Windows.Media.Animation.BeginStoryboard>.  
  
## <a name="using-the-compose-handoffbehavior"></a>À l’aide de la composition de HandoffBehavior  
 Lorsque vous appliquez un <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, ou <xref:System.Windows.Media.Animation.AnimationClock> à une propriété à l’aide de la <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, tout <xref:System.Windows.Media.Animation.Clock> objets précédemment associés à cette propriété continuent de consommer des ressources système ; le système de minuterie supprime pas les horloges automatiquement.  
  
 Pour éviter les problèmes de performances lorsque vous appliquez un grand nombre d’horloges à l’aide de <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, vous devez supprimer la composition des horloges de la propriété animée lorsqu’ils ont terminé. Il existe plusieurs manières de supprimer une horloge au format :  
  
-   Pour supprimer toutes les horloges d’une propriété, utilisez la <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> ou <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> méthode de l’objet animé. Spécifiez la propriété animée comme premier paramètre, et `null` comme deuxième. Cela supprime toutes les horloges d’animation de la propriété.  
  
-   Pour supprimer un spécifique <xref:System.Windows.Media.Animation.AnimationClock> à partir d’une liste d’horloges, utilisez la <xref:System.Windows.Media.Animation.Clock.Controller%2A> propriété de la <xref:System.Windows.Media.Animation.AnimationClock> pour récupérer un <xref:System.Windows.Media.Animation.ClockController>, puis appelez le <xref:System.Windows.Media.Animation.ClockController.Remove%2A> méthode de la <xref:System.Windows.Media.Animation.ClockController>. Cette opération s’effectue généralement le <xref:System.Windows.Media.Animation.Clock.Completed> Gestionnaire d’événements pour une horloge. Notez que seules les horloges racine peuvent être contrôlées par un <xref:System.Windows.Media.Animation.ClockController>; le <xref:System.Windows.Media.Animation.Clock.Controller%2A> propriété d’une horloge enfant retourne `null`. Notez également que le <xref:System.Windows.Media.Animation.Clock.Completed> événement n’est pas déclenché si la durée effective de l’horloge est illimitée.  Dans ce cas, l’utilisateur doit déterminer quel moment appeler <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Il s’agit principalement d’un problème pour les animations sur des objets qui ont une durée de vie longue.  Lorsqu’un objet par le garbage collecté, ses horloges sont également déconnectées et le garbage collector.  
  
 Pour plus d’informations sur les objets clock, consultez [Animation et vue d’ensemble du système de minuterie](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
   
  
## Examples  
 L’exemple suivant récupère un <xref:System.Windows.Media.Animation.Storyboard> à partir des ressources, puis exécute <xref:System.Windows.Media.Animation.Storyboard> lorsqu’un événement interne est géré par classes.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard">Table de montage séquentiel à lancer.</param>
        <param name="handoffBehavior">Valeur de l'énumération qui décrit le comportement à adopter si une propriété décrite dans la table de montage séquentiel est déjà animée.</param>
        <param name="isControllable">Déclare si l'animation est contrôlable (peut être suspendue) après avoir démarré.</param>
        <summary>Lance la séquence d'actions contenues dans la table de montage séquentiel fournie, avec un état spécifié pour le contrôle de l'animation après qu'elle ait démarré.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Plus des scénarios d’animation n’utilisent pas cette méthode. En général, vous créez le <xref:System.Windows.Media.Animation.Storyboard> ou <xref:System.Windows.Media.Animation.BeginStoryboard> en tant qu’élément dans le balisage et placer le <xref:System.Windows.EventTrigger> contenu sur un élément. Au déclenchement de l’événement, puis l’animation s’exécute. La plupart des aspects de contrôle d’un <xref:System.Windows.Media.Animation.Storyboard> peuvent être traités par les propriétés qui sont exposées dans le balisage.  
  
 Pour les signatures qui n’utilisent pas le `isControllable`, paramètre, ou lorsque ce paramètre est spécifié `false`, les horloges de montage qui sont associés à l’animation sont supprimées dès qu’elle atteint la période de « Remplissage ». Par conséquent, l’animation ne peut pas être redémarrée après l’exécution d’une seule fois. Contrôle d’une animation requiert également que la table de montage séquentiel ont un [Directive x : Name](~/docs/framework/xaml-services/x-name-directive.md) ou soit accessible par référence dans le code.  
  
 Comportement de transfert peut être spécifié comme attribut de <xref:System.Windows.Media.Animation.BeginStoryboard>.  
  
## <a name="using-the-compose-handoffbehavior"></a>À l’aide de la composition de HandoffBehavior  
 Lorsque vous appliquez un <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, ou <xref:System.Windows.Media.Animation.AnimationClock> à une propriété à l’aide de la <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, tout <xref:System.Windows.Media.Animation.Clock> objets précédemment associés à cette propriété continuent de consommer des ressources système ; le système de minuterie supprime pas les horloges automatiquement.  
  
 Pour éviter les problèmes de performances lorsque vous appliquez un grand nombre d’horloges à l’aide de <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, vous devez supprimer la composition des horloges de la propriété animée lorsqu’ils ont terminé. Il existe plusieurs manières de supprimer une horloge au format :  
  
-   Pour supprimer toutes les horloges d’une propriété, utilisez la <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> ou <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> méthode de l’objet animé. Spécifiez la propriété animée comme premier paramètre, et `null` comme deuxième. Cela supprime toutes les horloges d’animation de la propriété.  
  
-   Pour supprimer un spécifique <xref:System.Windows.Media.Animation.AnimationClock> à partir d’une liste d’horloges, utilisez la <xref:System.Windows.Media.Animation.Clock.Controller%2A> propriété de la <xref:System.Windows.Media.Animation.AnimationClock> pour récupérer un <xref:System.Windows.Media.Animation.ClockController>, puis appelez le <xref:System.Windows.Media.Animation.ClockController.Remove%2A> méthode de la <xref:System.Windows.Media.Animation.ClockController>. Cette opération s’effectue généralement le <xref:System.Windows.Media.Animation.Clock.Completed> Gestionnaire d’événements pour une horloge. Notez que seules les horloges racine peuvent être contrôlées par un <xref:System.Windows.Media.Animation.ClockController>; le <xref:System.Windows.Media.Animation.Clock.Controller%2A> propriété d’une horloge enfant retourne `null`. Notez également que le <xref:System.Windows.Media.Animation.Clock.Completed> événement n’est pas déclenché si la durée effective de l’horloge est illimitée.  Dans ce cas, l’utilisateur doit déterminer quel moment appeler <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Il s’agit principalement d’un problème pour les animations sur des objets qui ont une durée de vie longue.  Lorsqu’un objet par le garbage collecté, ses horloges sont également déconnectées et le garbage collector.  
  
 Pour plus d’informations sur les objets clock, consultez [Animation et vue d’ensemble du système de minuterie](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Windows.Data.BindingGroup" /> utilisé pour l'élément.</summary>
        <value>
          <see cref="T:System.Windows.Data.BindingGroup" /> utilisé pour l'élément.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Data.BindingGroup> peut être utilisé pour valider les valeurs de plusieurs propriétés d’un objet. Par exemple, supposons qu’une application invite l’utilisateur à entrer une adresse et remplit ensuite un objet de type `Address`, qui a les propriétés `Street`, `City`, `ZipCode`, et `Country`, avec les valeurs que l’utilisateur fourni. L’application a un panneau qui contient quatre <xref:System.Windows.Controls.TextBox> contrôles, chacun d’eux est lié à une des propriétés de l’objet. Vous pouvez utiliser un <xref:System.Windows.Controls.ValidationRule> dans un <xref:System.Windows.Data.BindingGroup> pour valider le `Address` objet. Par exemple, le <xref:System.Windows.Controls.ValidationRule> pouvez vous assurer que le code postal est valide pour le pays de l’adresse.  
  
 Les éléments enfants héritent le <xref:System.Windows.Data.BindingGroup> à partir de leurs éléments parents, tout comme avec n’importe quelle autre propriété pouvant être héritées.  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|La valeur des propriétés de métadonnées **true**|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Les exemples suivants font partie d’une application qui vérifie si l’utilisateur a défini les propriétés de deux objets de valeurs identiques. Le premier exemple crée deux <xref:System.Windows.Controls.TextBox> contrôles, chacun d’eux est lié à une autre source de données. Le <xref:System.Windows.Controls.StackPanel> a un <xref:System.Windows.Data.BindingGroup> qui contient un <xref:System.Windows.Controls.ValidationRule> qui vérifie que les deux chaînes sont égales.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 L’exemple suivant illustre la <xref:System.Windows.Controls.ValidationRule> par l’exemple précédent.  Dans le <xref:System.Windows.Controls.ValidationRule.Validate%2A> substitution de méthode, l’exemple obtient chaque objet source à partir de la <xref:System.Windows.Data.BindingGroup> et vérifie si les propriétés des objets sont égale.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 Pour appeler le <xref:System.Windows.Controls.ValidationRule>, appelez le <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> (méthode).  L’exemple suivant appelle <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> lorsque se produit l’événement click du bouton.  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.BindingGroup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Essaie de mettre cet élément en vue, dans toutes régions déroulantes dans lesquelles il est contenu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Essaie de mettre cet élément en vue, dans toutes régions déroulantes dans lesquelles il est contenu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En appelant cette méthode, vous déclenchez une <xref:System.Windows.FrameworkElement.RequestBringIntoView> événement provient de l’élément actuel. Cet événement est déclenché afin qu’elle puisse être gérée par un <xref:System.Windows.Controls.ScrollViewer>, ou une classe dérivée ou semblable. Le comportement attendu est que l’événement est géré par l’élément parent, marqué comme géré dans les données d’événement et la source de l’événement est mise en vue à travers le code incorporé dans le <xref:System.Windows.Controls.ScrollViewer> contrôle. Ni le <xref:System.Windows.FrameworkElement.RequestBringIntoView> événement ni le <xref:System.Windows.FrameworkElement.BringIntoView%2A> méthode transmettre toutes les informations sur le succès ou l’échec, autre que celui qui l’événement est généralement marqué comme géré sur succès. Raisons de l’échec peut inclure des paramètres de l’élément, tel que <xref:System.Windows.UIElement.Visibility%2A> ayant une valeur autre que <xref:System.Windows.Visibility.Visible>.  
  
 Si vous utilisez la signature ne spécifie pas un `targetRectangle`, puis la taille de l’intégralité de l’élément (son <xref:System.Windows.UIElement.RenderSize%2A>) sera visible.  
  
 En appelant cette méthode, vous éventuellement appeler <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> sur toute zone défilante parente qui contient l’élément. Si cet élément n’est pas contenu dans une zone avec défilement, le <xref:System.Windows.FrameworkElement.RequestBringIntoView> événement est déclenché, mais il n’y aura aucun effet, car il existe des écouteurs d’événements.  
  
   
  
## Examples  
 L’exemple suivant implémente un gestionnaire pour un événement de navigation d’application qui répond quand le [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] en cours de la navigation inclut un fragment. Le fragment est nommé dans le [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] suivant le signe dièse (#), et le comportement implémenté provoque l’élément devant apparaître dans le cadre. <xref:System.Windows.FrameworkElement.BringIntoView%2A> et <xref:System.Windows.FrameworkElement.RequestBringIntoView> demande ce comportement de défilement dans l’exemple.  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle">Taille spécifiée de l'élément qui doit également être mis en vue.</param>
        <summary>Tente de mettre en vue les dimensions de la région indiquée de cet élément, incluse dans toute région déroulante que ce soit qui le contient.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En appelant cette méthode, vous déclenchez une <xref:System.Windows.FrameworkElement.RequestBringIntoView> événement provient de l’élément actuel. Cet événement est déclenché afin qu’elle puisse être gérée par un <xref:System.Windows.Controls.ScrollViewer>, ou une classe dérivée ou semblable. Le comportement attendu est que l’événement est géré par l’élément parent, marqué comme géré dans les données d’événement et la source de l’événement est mise en vue à travers le code incorporé dans le <xref:System.Windows.Controls.ScrollViewer> contrôle. Ni le <xref:System.Windows.FrameworkElement.RequestBringIntoView> événement ni le <xref:System.Windows.FrameworkElement.BringIntoView%2A> méthode transmettre toutes les informations sur le succès ou l’échec, autre que celui qui l’événement est généralement marqué comme géré sur succès. Raisons de l’échec peut inclure des paramètres de l’élément, tel que <xref:System.Windows.UIElement.Visibility%2A> ayant une valeur autre que <xref:System.Windows.Visibility.Visible>.  
  
 Si vous utilisez la signature ne spécifie pas un `targetRectangle`, puis la taille de l’intégralité de l’élément (son <xref:System.Windows.UIElement.RenderSize%2A>) sera visible.  
  
 En appelant cette méthode, vous éventuellement appeler <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> sur toute zone défilante parente qui contient l’élément. Si cet élément n’est pas contenu dans une zone avec défilement, le <xref:System.Windows.FrameworkElement.RequestBringIntoView> événement est déclenché, mais il n’y aura aucun effet, car il existe des écouteurs d’événements.  
  
   
  
## Examples  
 L’exemple suivant comprend une grande image dans une zone de défilement contrainte. Un bouton sur la page a un gestionnaire qui fait défiler l’affichage pour une région particulière du graphique.  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l’élément de menu contextuel qui doit apparaître chaque fois que le menu contextuel est demandé par l’[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] à partir de cet élément.</summary>
        <value>Menu contextuel affecté à cet élément.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ContextMenu> lui-même est un <xref:System.Windows.FrameworkElement> classe dérivée, et il est techniquement possible pour <xref:System.Windows.Controls.ContextMenu> elle-même avoir un <xref:System.Windows.FrameworkElement.ContextMenu%2A> propriété. Toutefois, cela crée une expérience de menu contextuel à confusion pour l’utilisateur, et cette pratique n’est pas recommandée.  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit juste avant qu'un menu contextuel sur l'élément ne soit fermé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour supprimer la fermeture menus contextuels, les gestionnaires de l’événement doivent le marquer comme géré.  
  
 Pour utiliser cet événement comme un <xref:System.Windows.EventTrigger> dans un style, vous devez référencer la définition du service sous-jacent de l’événement :  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 (Cette utilisation est requise car l’implémentation de l’événement sur <xref:System.Windows.FrameworkElement> qui expose l’événement de service sous-jacent ne mappe pas les <xref:System.Windows.FrameworkElement.ContextMenuClosing> identificateur telles que vous pouvez l’utiliser en tant que déclencheur).  
  
 <xref:System.Windows.Controls.ContextMenu> lui-même est un <xref:System.Windows.FrameworkElement> classe dérivée, mais la <xref:System.Windows.FrameworkElement.ContextMenuClosing> événements ne seront pas déclenchés par un menu contextuel directement. Au lieu de cela, l’événement est déclenché à partir de l’élément qui « possède » le menu contextuel en tant que propriété et est déclenché uniquement lorsqu’un utilisateur tente de fermer un menu contextuel dans l’interface utilisateur. Toutefois, il est possible que <xref:System.Windows.Controls.ContextMenu> elle-même avoir un <xref:System.Windows.FrameworkElement.ContextMenu%2A> propriété (un menu contextuel imbriqué). Dans ce cas le <xref:System.Windows.Controls.ContextMenu> possède vraiment imbriqué <xref:System.Windows.Controls.ContextMenu> et peut déclencher l’événement, avec la source de l’événement étant le menu contextuel imbriqué.  
  
 Le <xref:System.Windows.Controls.ContextMenu> classe lui-même a également un événement similaire (<xref:System.Windows.Controls.ContextMenu.Closed>), mais le <xref:System.Windows.Controls.ContextMenu.Closed> événement ne vous fournit la possibilité d’annuler l’action de l’utilisateur.  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   Substituer <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d'informations sur l'inscription d'événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d'informations sur l'utilisation d'identificateurs d'événement routés afin d'ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'un menu contextuel sur l'élément est ouvert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour ouvrir manuellement des menus contextuels, les gestionnaires d’événements doivent marquer l’événement comme géré. Sinon, la valeur existante de la <xref:System.Windows.FrameworkElement.ContextMenu%2A> propriété servira pour ouvrir automatiquement un menu contextuel. Le marquage de l’événement géré annule effectivement l’action par défaut et peut être une opportunité pour réinitialiser la valeur de la <xref:System.Windows.FrameworkElement.ContextMenu%2A> propriété, puis ouvrez le nouveau <xref:System.Windows.Controls.ContextMenu>. Toutefois, il est un problème de synchronisation que vous devez connaître. Pour remplacer complètement le menu contextuel, via un <xref:System.Windows.FrameworkElement.ContextMenuOpening> gestionnaire, le menu contextuel initial ne doit pas être null / vide. Ou bien, vous devrez peut-être gérer l’événement et puis ouvrir manuellement un nouveau menu contextuel. Pour plus d’informations, consultez [Comment : gérer l’événement ContextMenuOpening](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md).  
  
 Pour utiliser cet événement comme un <xref:System.Windows.EventTrigger> dans un style, vous devez référencer l’événement attaché sous-jacent :  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 (Cette utilisation est requise car l’implémentation de l’événement sur <xref:System.Windows.FrameworkElement> qui expose l’événement de service sous-jacent ne mappe pas les <xref:System.Windows.FrameworkElement.ContextMenuOpening> identificateur telles que vous pouvez l’utiliser dans les déclencheurs).  
  
 <xref:System.Windows.Controls.ContextMenu> lui-même est un <xref:System.Windows.FrameworkElement> classe dérivée, mais cet événement n’est pas déclenché dans le menu contextuel est ouvert en tant que source. L’événement est déclenché à partir de l’élément qui « possède » le menu contextuel en tant que propriété et est déclenché uniquement lorsqu’un utilisateur tente d’ouvrir un menu contextuel dans l’interface utilisateur. Il est possible pour <xref:System.Windows.Controls.ContextMenu> elle-même avoir un <xref:System.Windows.FrameworkElement.ContextMenu%2A> propriété, mais vous devez éviter ce scénario (pour plus d’informations, consultez <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).  
  
 Le <xref:System.Windows.Controls.ContextMenu> classe lui-même a également un événement similaire (<xref:System.Windows.Controls.ContextMenu.Opened>) mais <xref:System.Windows.Controls.ContextMenu.Opened> ne vous fournit la possibilité d’annuler l’action de l’utilisateur.  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   Substituer <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d'informations sur l'inscription d'événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d'informations sur l'utilisation d'identificateurs d'événement routés afin d'ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.ContextMenu" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le curseur qui s'affiche lorsque le pointeur de la souris est sur cet élément.</summary>
        <value>Curseur à afficher. La valeur par défaut est <see langword="null" /> conformément à cette propriété de dépendance. Toutefois, la valeur pratique par défaut au moment de l’exécution provient de divers facteurs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous définissez cette propriété [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], le [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processeur s’appuie sur la conversion de type pour la <xref:System.Windows.Input.Cursor> classe pour évaluer la chaîne. La chaîne fournie doit évaluer à une <xref:System.Windows.Input.CursorType> valeur. Pour plus d'informations, consultez <xref:System.Windows.Input.Cursor>.  
  
 Si le curseur établi par cette propriété ou n’affiche pas lorsque le pointeur de la souris est au-dessus de cet élément est également dépendant de la valeur de la <xref:System.Windows.FrameworkElement.ForceCursor%2A> propriété. En outre, liées aux événements de considérations telles qu’un glissement actif, la capture de la souris, le modes dans des contrôles et ainsi de suite, l’édition de texte affecte également le curseur avec une priorité plus élevée que la valeur que vous spécifiez dans cette propriété.  
  
 Pour rétablir le comportement de la définition de cette propriété sur la valeur par défaut éventuelle, affectez-lui la valeur `null` à nouveau.  
  
 Le `null` par défaut signifie en réalité que la détermination de la valeur de curseur pratique est différée ici et doit être obtenue ailleurs. Si présentés sans valeurs de programmation à partir de n’importe quelle source, le curseur par défaut qui se trouve visuellement sur une [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] application sera une flèche. Toutefois, les modifications transitoires du curseur ne sont pas définies le <xref:System.Windows.FrameworkElement.Cursor%2A> valeurs des éléments lorsqu’ils sont transmis. Le <xref:System.Windows.FrameworkElement.Cursor%2A> des valeurs de propriété sera uniquement rapport non null dans les cas où elle a été effectivement définie, par exemple via le code ou un style. Chaque déplacement de la souris sur un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] application déclenche une <xref:System.Windows.UIElement.QueryCursor> événement. L’événement se propage et tout élément le long de l’itinéraire a la possibilité de gérer l’événement et définir la valeur du curseur via les arguments de cet événement. C’est le mécanisme qui produit le curseur visuellement apparent dans la plupart des cas. Si un <xref:System.Windows.UIElement.QueryCursor> gestionnaire retourne un résultat de curseur, puis le fait que l’événement est géré et qu’il ait une valeur modifiée dans les arguments est prioritaire sur la valeur de la <xref:System.Windows.FrameworkElement.Cursor%2A> propriété à tout niveau, sauf si <xref:System.Windows.FrameworkElement.ForceCursor%2A> est défini.  
  
 Si vous ne créez ne pas un curseur personnalisé, vous définissez généralement cette propriété à une valeur de propriété statique de la <xref:System.Windows.Input.Cursors> classe. Paramètre <xref:System.Windows.FrameworkElement.Cursor%2A> dans le code nécessite l’une des opérations suivantes :  
  
-   Appelez le <xref:System.Windows.Input.Cursor> constructeur à obtenir un <xref:System.Windows.Input.Cursor> instance. Les signatures de la <xref:System.Windows.Input.Cursor> constructeur utiliser des flux ou des fichiers, en prévision que vous créez le <xref:System.Windows.Input.Cursor> objet pour un curseur personnalisé.  
  
-   Utilisez le <xref:System.Windows.Input.CursorConverter> classe et ses <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> méthode pour spécifier un curseur par <xref:System.Windows.Input.CursorType>, ou une chaîne qui peut correspondre à un <xref:System.Windows.Input.CursorType>et effectuez un cast de revenir à <xref:System.Windows.Input.Cursor>.  
  
 Définition de la <xref:System.Windows.Input.Cursor> à une valeur personnalisée n’est pas activé avec une confiance partielle. Pour plus d’informations sur les curseurs personnalisés, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant montre comment définir délibérément le graphique du curseur.  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.Cursor" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le contexte de données d’un élément quand il participe à la liaison de données.</summary>
        <value>Objet à utiliser comme contexte de données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *Contexte de données* est un concept qui permet aux éléments d’hériter des informations de leurs éléments parents concernant la source de données qui est utilisé pour la liaison, ainsi que d’autres caractéristiques de la liaison, telles que le chemin d’accès.  
  
 Contexte de données peut être directement défini comme un [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] objet, avec les liaisons qui évaluent aux propriétés de cet objet. Vous pouvez également définir le contexte de données un <xref:System.Windows.Data.DataSourceProvider> objet.  
  
 Cette propriété de dépendance hérite des valeurs de propriété. S’il existe des éléments enfants sans autre valeur pour <xref:System.Windows.FrameworkElement.DataContext%2A> établi par le biais des valeurs locales ou de styles, le système de propriétés définit la valeur à la <xref:System.Windows.FrameworkElement.DataContext%2A> la valeur de l’élément parent le plus proche avec cette valeur attribuée.  
  
 Vous pouvez également utiliser une des propriétés suivantes de la <xref:System.Windows.Data.Binding> classe afin de spécifier explicitement de la source de liaison : <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, ou <xref:System.Windows.Data.Binding.RelativeSource%2A>. Pour plus d’informations, consultez [Comment : spécifier la Source de liaison](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).  
  
 Dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.FrameworkElement.DataContext%2A> est généralement défini comme un <xref:System.Windows.Data.Binding> déclaration. Vous pouvez utiliser la syntaxe d’élément de propriété ou de la syntaxe d’attribut. La syntaxe d’attribut est indiquée dans l’exemple de cette page. Vous pouvez également utiliser le code pour définir <xref:System.Windows.FrameworkElement.DataContext%2A>.  
  
 <xref:System.Windows.FrameworkElement.DataContext%2A> est une propriété pouvant être liée, pour simplifier les scénarios où un contexte peut être lié à un autre. Toutefois, si vous liez à <xref:System.Windows.FrameworkElement.DataContext%2A>, veillez à ne pas créer de références circulaires de liaison (ne pas lier un <xref:System.Windows.FrameworkElement.DataContext%2A> à lui-même, ce qui est possible en raison de la nature de l’héritage de valeur de propriété de la <xref:System.Windows.FrameworkElement.DataContext%2A> propriété).  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *dataContextObject*  
 Un objet incorporé directement qui sert de contexte de données pour toutes les liaisons dans l’élément parent. En règle générale, cet objet est un <xref:System.Windows.Data.Binding> ou un autre <xref:System.Windows.Data.BindingBase> classe dérivée. Vous pouvez également les données brutes de n’importe quel [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] de l’objet type prévu pour la liaison peut-être être placée ici, avec les liaisons réelles définies ultérieurement.  
  
 *bindingUsage*  
 Utilisation de liaison qui correspond à un contexte de données approprié. Pour plus d’informations, consultez [Binding, extension de balisage](~/docs/framework/wpf/advanced/binding-markup-extension.md).  
  
 *resourceExtension*  
 Une des valeurs suivantes : ou. Cette utilisation est utilisée lorsque vous faites référence aux données brutes définies en tant qu’objet dans les ressources. Consultez [ressources XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *contextResourceKey*  
 L’identificateur de clé pour l’objet qui est demandé à partir d’un <xref:System.Windows.ResourceDictionary>.  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 L’exemple suivant illustre comment un contexte de données agit sur une liaison et fournit des informations qui définissent les valeurs spécifiques des propriétés liées.  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le contexte de données de cet événement change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir une explication des contextes de données et la liaison de données, consultez [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
> [!IMPORTANT]
>  Lorsque le <xref:System.Windows.FrameworkElement.DataContext%2A> éventuellement affectées pour un élément change, toutes les propriétés liées aux données sur cet élément. Cela s’applique à tous les éléments qui sont des éléments enfants de l’élément actuel dans l’arborescence logique, qui héritent du contexte de données, ainsi que l’élément actuel lui-même. Toutes ces liaisons existantes doivent ré-interpréter nouvelle <xref:System.Windows.FrameworkElement.DataContext%2A> et réévaluera les résultats de la liaison. Le moteur de liaison de données n’est pas déterministe sur l’ordre de ces réévaluations relatives au déclenchement de le <xref:System.Windows.FrameworkElement.DataContextChanged> événement. Réévaluations peuvent se produire avant l’événement, après l’événement, ou dans toute combinaison.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.DataContext" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la clé à utiliser pour faire référence au style pour ce contrôle, quand des styles de thème sont utilisés ou définis.</summary>
        <value>Clé du style. Pour fonctionner correctement dans le cadre de la recherche du style de thème, cette valeur doit être le <see cref="T:System.Type" /> du contrôle auquel le style va être appliqué.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété n’est pas généralement définie par le biais de ses accesseurs de propriété direct. Au lieu de cela, vous substituez les métadonnées spécifiques au type de cette propriété de dépendance chaque fois que vous créez un nouveau <xref:System.Windows.FrameworkElement> classe dérivée. Lorsque vous dérivez un contrôle, appelez le <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> méthode par rapport à la <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identificateur, dans le constructeur statique du contrôle dérivé de classe (ou l’initialisation de classe équivalente).  
  
 En général, un contrôle remplace la valeur par défaut de cette propriété peut être son propre type, mais dans certains cas peut également utiliser un type de base pour lesquelles il existe un style dans les dictionnaires de thème. Cela est uniquement pratique si les modèles de contrôle du contrôle de base définissent entièrement la représentation visuelle de ce contrôle dérivé, et si toutes les types dérivés exposent des membres supplémentaires ne nécessitent pas d’éléments supplémentaires dans le cadre du modèle de contrôle.  
  
 Si vous souhaitez que votre élément ou un contrôle à utiliser délibérément ne pas les styles de thème, définissez la <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> propriété `true`.  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation de substitutions de propriété de dépendance métadonnées décrite dans la section Notes. Ce code définit une classe de contrôle personnalisé `NumericUpDown` destinée à être utilisée à partir d’un assembly de bibliothèque de contrôle dédié. Le constructeur static illustré fait référence à une fonction d’initialisation privée, enregistre un gestionnaire de classe (un autre scénario sous-classement du contrôle commun ; consultez [le marquage des événements routés comme Handled et de gestion de la classe](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) et enfin remplace le <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> des métadonnées de propriété de dépendance sur la `NumericUpDown` classe. <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> Retourne toujours son propre type comme clé prévue, qui est la convention que le système de style de thème utilise pour rechercher le style de contrôles arbitraires sans style. L’exemple complet définit également le style de thème du contrôle réel qui est référencé par cette clé ; consultez [contrôle personnalisé NumericUpDown avec thème et prise en charge d’UI Automation, exemple](http://go.microsoft.com/fwlink/?LinkID=160025).  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#staticctorofcustomclasscommontasks)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#staticctorofcustomclasscommontasks)]  
[!code-csharp[CustomControlNumericUpDown#Close](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#close)]
[!code-vb[CustomControlNumericUpDown#Close](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#close)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indique que le processus d'initialisation pour l'élément est terminé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Windows.FrameworkElement.BeginInit%2A> a été appelé précédemment, la base de mise en œuvre déclenchera la <xref:System.Windows.FrameworkElement.Initialized> événement. Sinon, si <xref:System.Windows.FrameworkElement.BeginInit%2A> n’a pas été appelé ou qu’il ne peut pas être déterminé si <xref:System.Windows.FrameworkElement.BeginInit%2A> a été appelé, <xref:System.Windows.FrameworkElement.Initialized> n’est pas déclenché et une exception est levée à la place.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Windows.FrameworkElement.EndInit" /> a été appelé sans que <see cref="M:System.Windows.FrameworkElement.BeginInit" /> l'ait été précédemment sur l'élément.</exception>
        <block subset="none" type="overrides">
          <para>Implémentez cette méthode pour fournir une gestion spéciale qui doit se produire lorsque votre élément est initialisé pendant le processus de chargement de l’élément.  
  
 Votre implémentation doit appeler l’implémentation de base, car l’implémentation de base (valeur par défaut) définit certains indicateurs internes pour effectuer le suivi de l’initialisation.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de l’élément demandé.</param>
        <summary>Recherche un élément qui a le nom de l’identificateur fourni.</summary>
        <returns>Élément demandé. Il peut correspondre à une <see langword="null" /> si aucun élément n'a été trouvé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’élément a des éléments enfants, ces éléments enfants sont tous recherchés de manière récursive pour l’élément nommé demandé.  
  
 <xref:System.Windows.FrameworkElement.FindName%2A> opère au sein de la portée de nom de l’élément actuel. Pour plus d’informations, consultez [portées de nom XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">Identificateur clé de la ressource demandée.</param>
        <summary>Recherche une ressource d'après la clé spécifiée et lève une exception si la ressource demandée est introuvable.</summary>
        <returns>Ressource demandée. Si aucune ressource n'est trouvée avec la clé indiquée, une exception est levée. Une valeur <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> peut également être retournée dans le cas d'une exception.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Si vous appelez cette méthode pour une clé qui est introuvable, une exception est levée. Si vous ne souhaitez pas gérer les exceptions qui résultent de l’appel <xref:System.Windows.FrameworkElement.FindResource%2A>, appelez <xref:System.Windows.FrameworkElement.TryFindResource%2A> à la place. <xref:System.Windows.FrameworkElement.TryFindResource%2A> Retourne `null` lorsqu’une ressource demandée est introuvable et ne lève pas d’exception.  
  
 Si la ressource est introuvable sur l’élément appelant, l’élément parent dans l’arborescence logique est recherché, puis l’application, puis les thèmes et enfin les ressources système. Cette méthodologie de recherche est identique à la façon dont l’arborescence de la recherche s’effectue si une ressource a été demandée par une référence de ressource dynamique dans le balisage. Pour plus d’informations sur la recherche de ressources, consultez [ressources XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 En règle générale, vous devez immédiatement caster un <xref:System.Windows.FrameworkElement.FindResource%2A> valeur de retour vers le type de la propriété que vous affectez la valeur de la ressource retournée.  
  
 Les clés de ressources ne sont pas nécessairement des chaînes. Par exemple, des styles pour les contrôles au niveau du thème délibérément correspondent à la <xref:System.Type> du contrôle et les styles d’application ou une page de contrôles utilisent généralement cette même clé convention. Pour plus d’informations, consultez [styles et modèles](~/docs/framework/wpf/controls/styling-and-templating.md) ou [ressources XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
   
  
## Examples  
 L’exemple suivant obtient une ressource nommée et de le convertir en un type approprié pour remplir une propriété.  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException">
          <paramref name="resourceKey" /> était introuvable et un gestionnaire d'événements n'existe pas pour l'événement <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />.  
  
 - ou -  
  
 <paramref name="resourceKey" /> était introuvable et la propriété <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> est <see langword="false" /> dans l'événement <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceKey" /> est <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le sens dans lequel le texte et d'autres éléments de l'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] se déroulent à l'intérieur de tout élément parent qui contrôle leur disposition.</summary>
        <value>Sens dans lequel le texte et les autres éléments d'[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] se déroulent dans leur élément parent, comme valeur de l'énumération. La valeur par défaut est <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propriété de dépendance d’utilisation définit le <xref:System.Windows.FrameworkElement.FlowDirection%2A> sur cet élément. En raison de l’héritage de valeur de propriété, paramètre <xref:System.Windows.FrameworkElement.FlowDirection%2A> sur un élément peut entraîner la définition <xref:System.Windows.FrameworkElement.FlowDirection%2A> sur tous les éléments enfants qui n’ont pas défini <xref:System.Windows.FrameworkElement.FlowDirection%2A> localement ou via d’autres moyens tels que les styles.  
  
 Cette propriété n’est pas définie automatiquement dans le cadre de toutes les informations de culture application, car un élément peut contenir le contenu qui n’est pas nécessairement destiné à obéissent aux règles de la direction du flux général impliquée par les informations de culture. Pour plus d’informations sur les considérations relatives à la globalisation, consultez [globalisation pour WPF](~/docs/framework/wpf/advanced/globalization-for-wpf.md).  
  
 Cette propriété est définie [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accesseur de propriété pour qu’il fonctionne comme une propriété de dépendance. Toutefois, il est également inscrit comme attaché, donc il peut également fonctionner comme une propriété jointe. L’inscription attachée est principalement afin que l’héritage de valeur de propriété est prise en charge, mais la propriété peut également être utilisée comme une propriété jointe true. L’utilisation de la propriété jointe est pertinente uniquement si l’objet que vous souhaitez définir la direction du flux sur a un <xref:System.Windows.FrameworkElement> élément parent qui effectue la disposition sur elle, n’est lui-même pas un <xref:System.Windows.FrameworkElement>et vous n’avez pas déjà directement définie `FlowDirection` propriété. (Partie du flux de document comme classes <xref:System.Windows.Documents.Block> et <xref:System.Windows.Documents.Inline> définir leurs propres `FlowDirection`, et cette propriété peut également définir la direction du flux. La valeur de propriété est ensuite lue par l’hôte de contenu éventuelle sans nécessiter l’utilisation de la propriété jointe.)  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
 \<*object* **FlowDirection**="<xref:System.Windows.FlowDirection>"/>  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a>Utilisation de texte XAML  
 Cette propriété peut également être définie sur les classes qui ne sont pas <xref:System.Windows.FrameworkElement> les classes dérivées, par le texte suivant [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attaché l’utilisation de la propriété :  
  
 `<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 Cette propriété est une propriété de dépendance et une propriété jointe ; consultez la section Notes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.FlowDirection" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une propriété qui permet la personnalisation de l’apparence, des effets ou d’autres caractéristiques de style qui s’appliquent à cet élément quand il capture le focus clavier.</summary>
        <value>Style souhaité à appliquer sur le focus. La valeur par défaut déclarée dans la propriété de dépendance est un <see cref="T:System.Windows.Style" /> statique vide. Toutefois, la valeur effective au moment de l’exécution est souvent (mais pas toujours) un style tel qu’il est fourni par la prise en charge du thème pour les contrôles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété affecte l’apparence visuelle mais ne signale pas <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> dans les métadonnées. Il s’agit, car la modification de l’apparence visuelle est pilotée par événements et ne pas s’appliquer à tout moment et par conséquent ne doit pas généralement signaler toutes les informations visual ou la mise en page dans les métadonnées.  
  
 Point de vue conceptuel, le comportement visuel de focus appliqué à un contrôle doit être cohérent d’un contrôle. Pour appliquer la cohérence, la plus pratique consiste à modifier uniquement le style visuel de focus si vous composez un thème entier. Définition de cette propriété sur les styles de contrôle individuels et non comme faisant partie d’un thème n’est pas l’utilisation prévue de cette propriété, car elle peut entraîner une expérience utilisateur ambiguë concernant le focus clavier. Si vous prévoyez un comportement spécifique à un contrôle qui n’est pas délibérément cohérent entre un thème, une meilleure approche est d’utiliser des déclencheurs dans les styles pour les propriétés de l’état d’entrées individuelles, telles que <xref:System.Windows.UIElement.IsFocused%2A> ou <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>et à le faire d’une manière qui n’effectue pas visuellement interférer avec un style visuel de focus existant. Pour plus d’informations sur l’objectif de conception <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> et d’autres propriétés du focus, consultez [de styles pour le Focus dans les contrôles et FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md).  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *resourceExtension*  
 Une des valeurs suivantes :, ou. Consultez [ressources XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *styleResourceKey*  
 Clé qui identifie le style demandé. La clé fait référence à une ressource existante dans un <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  Syntaxe d’élément de propriété est techniquement possible, mais non recommandée. Consultez [Inline Styles et modèles](~/docs/framework/wpf/advanced/inline-styles-and-templates.md). Une référence de liaison à l’aide ou <xref:System.Windows.Data.Binding> est également possible, mais rare.  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si cet objet <see cref="T:System.Windows.FrameworkElement" /> doit forcer l'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] à effectuer le rendu du curseur tel qu'il est déclaré par la propriété <see cref="P:System.Windows.FrameworkElement.Cursor" />.</summary>
        <value>
          <see langword="true" /> si la présentation du curseur, lorsque ce dernier se trouve sur cet élément, est forcée d'utiliser les paramètres actuels <see cref="P:System.Windows.FrameworkElement.Cursor" /> pour le curseur (y compris sur tous les éléments enfants) ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous définissez cette propriété sur `true` vous remplacent les préférences de curseur établies par les éléments enfants. Par conséquent, en général les applications de cette opération [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] peut prêter à confusion pour l’utilisateur, en particulier si des éléments enfants essaient de spécifier des curseurs. Paramètre <xref:System.Windows.FrameworkElement.ForceCursor%2A> est plus appropriée dans les scénarios de sous-classement ou la composition du contrôle.  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant force la valeur du curseur.  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.ForceCursor" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Objet <see cref="T:System.Windows.DependencyProperty" /> duquel s'établit la liaison.</param>
        <summary>Retourne <see cref="T:System.Windows.Data.BindingExpression" /> qui représente la liaison sur la propriété spécifiée.</summary>
        <returns>
          <see cref="T:System.Windows.Data.BindingExpression" /> si la propriété cible possède une liaison active ; sinon, retourne une <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La vérification de la valeur de retour pour `null` est une technique que vous pouvez utiliser pour déterminer si une propriété possède une liaison active.  
  
 Cette méthode est simplement un wrapper pratique autour de le <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> (méthode). <xref:System.Windows.FrameworkElement.GetBindingExpression%2A> passe l’instance actuelle et la `dp` paramètre <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">
          <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> à retourner pour l'élément.</param>
        <summary>Obtient la valeur de la propriété jointe <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> pour le <see cref="T:System.Windows.DependencyObject" /> spécifié.</summary>
        <returns>Sens du flux demandé, sous forme de valeur de l’énumération.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objectif principal de cette méthode consiste à prendre en charge la syntaxe de la propriété jointe pour la <xref:System.Windows.FrameworkElement.FlowDirection%2A> propriété, autorisant ainsi enfant des éléments d’un <xref:System.Windows.FrameworkElement> pour spécifier la direction de flux pour l’agencement dans leur élément parent. Pour obtenir la valeur active <xref:System.Windows.FrameworkElement>, utilisez directes [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accesseur <xref:System.Windows.FrameworkElement.FlowDirection%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">Taille de la partie de l'élément qui assure la présentation visuelle.</param>
        <summary>Retourne une géométrie pour un masque de découpage. Le masque s'applique si le système de disposition essaie de réorganiser un élément qui est plus grand que l'espace d'affichage disponible.</summary>
        <returns>Géométrie du découpage.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les marges sont soustraites de la `layoutSlotSize` en tant que partie du comportement de système de disposition.  
  
 Une référence null retournée indique qu’aucun extrait se produira. L’implémentation par défaut toujours retourne `null` lorsque <xref:System.Windows.UIElement.ClipToBounds%2A> est `false`. Cette méthode se substitue à <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>. Le <xref:System.Windows.FrameworkElement> implémentation utilise <xref:System.Windows.FrameworkElement.MaxHeight%2A> et <xref:System.Windows.FrameworkElement.MaxWidth%2A> dans ses calculs. Plusieurs sous-classes de <xref:System.Windows.FrameworkElement> substituer cette méthode à nouveau. <xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>, les remplacements pour toujours retour `null` , car les ornements se trouvent souvent délibérément en dehors des limites normales. <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> et <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> retourner `null` si <xref:System.Windows.UIElement.ClipToBounds%2A> est `false`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L’implémentation par défaut toujours retourne <see langword="null" /> lorsque <see cref="P:System.Windows.UIElement.ClipToBounds" /> est <see langword="false" />. Remplacements sont généralement attendus pour maintenir ce comportement, bien qu’il existe des exceptions, en fonction de la relation et l’objectif de la classe dérivée et sa logique de présentation par opposition à la classe de base.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName">Nom de l'enfant à rechercher.</param>
        <summary>Retourne l'élément nommé dans l'arborescence d'éléments visuels d'un <see cref="T:System.Windows.Controls.ControlTemplate" /> instancié.</summary>
        <returns>Élément demandé. Peut correspondre à une <see langword="null" /> si aucun élément du nom demandé n'existe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modèles dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] ont une portée de nom autonome. Il s’agit, car les modèles sont réutilisés et n’importe quel nom défini dans un modèle ne peut pas rester unique lorsque plusieurs instances d’un contrôle d’instancier le modèle. Appelez le <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> méthode pour retourner les références aux objets qui proviennent du modèle après qu’il est instancié. Vous ne pouvez pas utiliser le <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> méthode pour rechercher des éléments de modèles, car <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> agit en général plus étendue et il n’existe aucune connexion entre la <xref:System.Windows.Controls.ControlTemplate> classe elle-même et le modèle instancié une fois qu’elle est appliquée.  
  
 <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> Fournit la même fonction que cette méthode. <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> protégé public au lieu de, et utilise des considérations correctes de portée de nom qui lui permettent d’accéder au modèle d’un élément et la recherche d’éléments nommés. Utilisez <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> lorsque vous devez obtenir un élément en dehors de son contrôle parent.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un parent logique alternatif pour cet élément s’il n’existe aucun parent visuel.</summary>
        <returns>Retourne une valeur autre que <see langword="null" /> quand une implémentation de niveau infrastructure WPF de cette méthode a une connexion de parent non visuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode se substitue à <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>. La valeur par défaut <xref:System.Windows.FrameworkElement> implémentation retourne le seul parent visuel attendu, ce qui est le même résultat que la mise en route le <xref:System.Windows.FrameworkElement.Parent%2A> valeur. Les implémentations de classe dérivée peuvent retourner d’autres relations parentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index de base zéro de l’élément enfant demandé dans la collection.</param>
        <summary>Substitue <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" /> et retourne un enfant à l'index spécifié tiré d'une collection d'éléments enfants.</summary>
        <returns>Élément enfant demandé. La valeur ne doit pas retourner une <see langword="null" /> ; si l'index fourni dépasse la plage établie, une exception est levée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans le <xref:System.Windows.FrameworkElement> , le seul index valide est zéro. Le modèle de contenu pour <xref:System.Windows.FrameworkElement.GetVisualChild%2A> prend en charge de zéro ou un élément enfant, et non une collection.  
  
   
  
## Examples  
 L’exemple suivant montre comment un ornement personnalisé utilise les valeurs déclarées par un <xref:System.Windows.Media.VisualCollection> qu’il gère pour ses enfants visuels. Ces valeurs sont indiquées par des remplacements de <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> et <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Cette implémentation est uniquement valide pour les éléments qui ne maintiennent pas de collection descriptive supplémentaire d’éléments enfants visuels. Tout élément qui n’a pas une telle collection doit substituer cette méthode et mapper l’index à un équivalent dans la collection d’éléments enfants qui est pris en charge par cet élément. Un index dans la plage comprise entre zéro et <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (moins un) doit retourner un élément valide ; tout autre index doit lever une exception d’out-of-range. Un exemple d’un type d’élément qui ne prend pas en charge une collection d’enfants et substitue <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> pour retourner plusieurs enfants possibles est <see cref="T:System.Windows.Controls.Panel" />.  
  
 L’implémentation par défaut dans <see cref="T:System.Windows.FrameworkElement" /> ne suppose qu’un seul enfant de visual. Toute valeur passée pour <paramref name="index" /> autre que zéro provoque une exception levée. Plusieurs éléments communs, tels que les décorateurs, les ornements ou les éléments avec le rendu spécialisé, substituent le <see cref="T:System.Windows.FrameworkElement" /> implémentation (de l’implémentation de classes de base intermédiaires). Certaines implémentations appliquent toujours un seul enfant de visual tandis que d’autres permettent d’une collection.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la hauteur suggérée de l’élément.</summary>
        <value>Hauteur de l’élément, en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. La valeur par défaut est <see cref="F:System.Double.NaN" />. Cette valeur doit être supérieure ou égale à 0.0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Height%2A> est un des trois propriétés accessibles en écriture sur <xref:System.Windows.FrameworkElement> qui spécifient des informations de hauteur. Les deux autres sont <xref:System.Windows.FrameworkElement.MinHeight%2A> et <xref:System.Windows.FrameworkElement.MaxHeight%2A>. S’il existe un conflit entre ces valeurs, l’ordre d’application pour la détermination de la hauteur réelle qui est le premier <xref:System.Windows.FrameworkElement.MinHeight%2A> doit être pris en compte, puis <xref:System.Windows.FrameworkElement.MaxHeight%2A>et pour finir, si elle est dans les limites, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Si cet élément est un élément enfant dans un autre élément, puis en définissant cette propriété sur une valeur est réellement uniquement une valeur suggérée. Le système de disposition, ainsi que la logique de disposition spécifique de l’élément parent utilisera la valeur comme entrée sans liaison pendant le processus de mise en page. En pratique, une <xref:System.Windows.FrameworkElement> est presque toujours l’élément enfant de quelque chose d’autre ; même si vous définissez la <xref:System.Windows.FrameworkElement.Height%2A> sur <xref:System.Windows.Window>. (Pour <xref:System.Windows.Window>, que la valeur est utilisée lorsque le modèle d’application sous-jacent établit les hypothèses de rendu de base qui créent le Hwnd qui héberge l’application.)  
  
 En outre acceptables <xref:System.Double> valeurs, cette propriété peut également être <xref:System.Double.NaN?displayProperty=nameWithType>. Voici la façon dont vous spécifiez le comportement de dimensionnement automatique dans le code. Dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] la valeur de la chaîne « Automatique » (non respect de la casse) pour activer le comportement de dimensionnement automatique. Comportement de dimensionnement automatique implique que l’élément remplit la hauteur à sa disposition. Notez cependant que des contrôles spécifiques fournissent fréquemment des valeurs par défaut via leurs styles de thème par défaut qui désactive le comportement de dimensionnement sauf s’il est réactivé explicitement automatique.  
  
 La valeur de retour de cette propriété est toujours la même que toute valeur qui lui est affectée. En revanche, la valeur de la <xref:System.Windows.FrameworkElement.ActualHeight%2A> peuvent varier. Cela peut arriver statiquement car la disposition a rejeté la taille suggérée pour une raison quelconque, ou momentanément. Le système de disposition fonctionne de façon asynchrone par rapport à l’ensemble du système de propriétés de <xref:System.Windows.FrameworkElement.Height%2A> et ont ne peut-être pas traités autrement encore de modification de la propriété de dimensionnement en particulier.  
  
 Les restrictions de valeurs sur le <xref:System.Double> sont appliquées par un <xref:System.Windows.ValidateValueCallback> mécanisme. Si vous essayez de définir une valeur non valide, une exception runtime est levée.  
  
 Outre le contrôle de validation, il existe une valeur supérieure non déterministe pour <xref:System.Windows.FrameworkElement.Height%2A> qui est appliquée par le système de disposition (il s’agit d’un très grand nombre, supérieur à <xref:System.Single.MaxValue?displayProperty=nameWithType> mais inférieure à <xref:System.Double.MaxValue?displayProperty=nameWithType>). Si vous dépassez cette limite, l’élément n’est pas rendus, et aucune exception n’est levée. Ne définissez pas <xref:System.Windows.FrameworkElement.Height%2A> à une valeur qui est beaucoup plus important que la taille maximale de n’importe quel affichage visuel, ou peut dépasser cette limite supérieure non déterministe.  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object Height="double"/>  
- or -  
<object Height="qualifiedDouble"/>  
- or -  
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *double*  
 <xref:System.Double>  
  
 Représentation de chaîne d’un <xref:System.Double> valeur égale ou supérieure à 0.0. Consultez la section Notes pour plus d’informations sur la limite supérieure. Cette valeur est interprétée comme un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] mesure. Chaînes n’incluent pas explicitement les décimales. Par exemple, la valeur `1` est acceptable.  
  
 *qualifiedDouble*  
 A *double* valeur telle que décrite ci-dessus, suivie d’une des chaînes de déclaration d’unité suivantes : `px`, `in`, `cm`, `pt`.  
  
 `px` (valeur par défaut) est [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pouces ; in 1 == 96px  
  
 `cm` centimètres ; 1cm==(96/2.54) px  
  
 `pt` correspond à points ; 1pt==(96/72) px  
  
 **Auto**  
 Active le comportement de redimensionnement automatique. Consultez la section Notes.  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.Height" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les caractéristiques d'alignement horizontal appliquées à cet élément lorsqu'il est composé dans un élément parent, par exemple un contrôle de type Panel ou d'éléments.</summary>
        <value>Un paramètre d’alignement horizontal, sous forme de valeur de l’énumération. La valeur par défaut est <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque <xref:System.Windows.FrameworkElement.Height%2A> et <xref:System.Windows.FrameworkElement.Width%2A> propriétés sont définies explicitement sur un élément, ces dimensions ont une priorité lors de la disposition et annulent les effets de types de paramètre <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> à <xref:System.Windows.HorizontalAlignment.Stretch>.  
  
 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> est le [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] accesseur de propriété pour ce qui est en réalité une propriété de dépendance. Cette propriété de dépendance particulière a assez souvent et sa valeur « par défaut » apparente définie différemment dans chaque élément de sous-classe, en particulier les contrôles. Cela se produit généralement de deux manières : la propriété de dépendance est réinscrite à une sous-classe donnée, mais avec des métadonnées différentes pour définir ses valeurs par défaut ; ou bien, il existe un style par défaut en cours d’application qui définit cette valeur de propriété de dépendance différemment. Par exemple, l’apparente » par défaut » <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> pour un <xref:System.Windows.Controls.Label> contrôle sera <xref:System.Windows.HorizontalAlignment.Left>, même si <xref:System.Windows.Controls.Label> hérite <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> directement à partir de <xref:System.Windows.FrameworkElement>. C’est parce que cette valeur est réinitialisée dans le style par défaut de <xref:System.Windows.Controls.Label>, dans le modèle de contrôle du style.  
  
 <xref:System.Windows.Controls.Canvas> n’utilisez pas <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> lors de la composition de disposition, car <xref:System.Windows.Controls.Canvas> est basée sur un positionnement absolu.  
  
 Lors de l’héritage par <xref:System.Windows.Controls.Label> ou les classes dérivées, <xref:System.Windows.Controls.Label> redéfinit la valeur par défaut de cette propriété de dépendance <xref:System.Windows.HorizontalAlignment.Left>.  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les limites de la portée de l'héritage des valeurs de propriétés, la recherche de clés de ressources et la recherche de RelativeSource FindAncestor.</summary>
        <value>Valeur de l’énumération. La valeur par défaut est <see cref="F:System.Windows.InheritanceBehavior.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Certaines limites de l’élément d’arborescence ensemble <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> délibérément limiter la portée du comportement d’héritage, une recherche de ressource force pour vérifier les ressources d’application, ou pour empêcher une recherche RelativeSource FindAncestor interrogation de l’élément actuel ou toute autre. Recherche de RelativeSource FindAncestor se produit lorsqu’une liaison utilise un <xref:System.Windows.Data.RelativeSource> qui a son <xref:System.Windows.Data.RelativeSource.Mode%2A> propriété définie sur la <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> valeur.  
  
 Si vous souhaitez que votre classe dérivée pour définir cette propriété, vous devez le faire dans le constructeur statique ou dans d’autres routines d’initialisation.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque <see cref="T:System.Windows.FrameworkElement" /> est initialisé. Cet événement coïncide avec les cas où la valeur de la propriété <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> passe de <see langword="false" /> (ou d'un état indéfini) à <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois que le <xref:System.Windows.FrameworkElement.EndInit%2A> ou <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> méthodes sont appelées. Les appels à ces deux méthodes peuvent provenir de code d’application ou via le [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] comportement du processeur lorsqu’un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] page est traitée.  
  
 Si vous choisissez Gérer les <xref:System.Windows.FrameworkElement.Loaded> ou <xref:System.Windows.FrameworkElement.Initialized> dépend de vos besoins. Si vous n’avez pas besoin de lire les propriétés d’un élément, envisagez de réinitialiser les propriétés et n’avez pas besoin de toutes les informations de mise en page, <xref:System.Windows.FrameworkElement.Initialized> peut être l’événement le plus adapté. Si vous avez besoin de toutes les propriétés de l’élément soit disponible, et que vous définissez des propriétés qui sont susceptibles de réinitialiser la disposition, <xref:System.Windows.FrameworkElement.Loaded> peut être l’événement le plus adapté. Soyez prudent de réentrance si votre gestionnaire réinitialise toutes les propriétés qui sont interprétées par le système de disposition pour indiquer qu’une nouvelle passe de disposition est nécessaire. (Vous devrez peut-être vérifier la <xref:System.Windows.FrameworkPropertyMetadata> passer des valeurs de la propriété si vous ne savez pas de propriétés pouvant nécessiter une nouvelle disposition si elles sont modifiées.)  
  
 Pour plus d’informations sur la séquence d’événements d’objet pour un <xref:System.Windows.FrameworkElement>et également pour plusieurs connexes d’application et les classes d’éléments, consultez [événements de durée de vie de l’objet](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le contexte pour l'entrée utilisée par ce <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <value>Portée d’entrée, qui modifie la façon dont l’entrée provenant d’autres méthodes d’entrée est interprétée. La valeur par défaut est <see langword="null" /> (qui résulte en une gestion par défaut des commandes).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété de dépendance hérite des valeurs de propriété. S’il existe des éléments enfants sans autre valeur pour <xref:System.Windows.FrameworkElement.InputScope%2A> établi par le biais des valeurs locales ou de styles, le système de propriétés définit la valeur à la <xref:System.Windows.FrameworkElement.InputScope%2A> la valeur de l’ancêtre le plus proche avec cette valeur attribuée.  
  
 Bien qu’un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilisation de syntaxe est répertoriée et soit autorisée syntaxiquement, la définition de cette propriété [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] n’est pas courant.  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.InputScope" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si cet élément a été initialisé, que ce soit pendant le traitement par un processeur [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ou en appelant explicitement sa méthode <see cref="M:System.Windows.FrameworkElement.EndInit" />.</summary>
        <value>
          <see langword="true" /> si l'élément est initialisé par le traitement [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] mentionné ci-avant ou par des appels de méthode ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété peut également être `true` si cet élément a été déplacé dans l’arborescence logique dispose d’un nouvel élément parent, et par conséquent soit rechargé.  
  
 Cette propriété est utile si vous utilisez également <xref:System.Windows.FrameworkElement.BeginInit%2A> et <xref:System.Windows.FrameworkElement.EndInit%2A>. Les éléments dans l’arborescence logique qui est chargée par un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processeur sont assurées d’être initialisées. Éléments pas dans l’arborescence logique sont initialisés lorsque <xref:System.Windows.FrameworkElement.EndInit%2A> est appelée. En l’absence de toute gestion spécifique de <xref:System.Windows.FrameworkElement.BeginInit%2A> et <xref:System.Windows.FrameworkElement.EndInit%2A>, cela se produit dès que le constructeur retourne le résultat initialisé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si cet élément a été chargé en vue de sa présentation.</summary>
        <value>
          <see langword="true" /> si l'élément actif est attaché à une arborescence d'éléments et a été restitué ; <see langword="false" /> si l'élément n'a jamais été attaché à une arborescence d'éléments chargée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À partir de nouvellement construit <xref:System.Windows.FrameworkElement>, cette propriété commence `false`et reste `true` quand il est défini `true`, même si l’élément est supprimé par la suite d’une arborescence logique connectée par code. `true` état est défini par la logique de présentation générale lorsque les éléments sont chargés dans le moteur de présentation.  
  
 En général, les éléments chargés sont rendus, mais pas tous <xref:System.Windows.FrameworkElement> une présentation et autres propriétés, telles que les classes dérivées ont <xref:System.Windows.UIElement.Visibility%2A> peuvent influencer la présentation.  
  
   
  
## Examples  
 L’exemple suivant implémente deux gestionnaires : un gère le <xref:System.Windows.FrameworkElement.Loaded> événements de l’élément racine, afin de s’assurer que l’élément racine de page est chargé car il s’agit de l’importance de l’événement. L’autre gestionnaire est raccordé à un contrôle utilisateur et appelle <xref:System.Windows.FrameworkElement.IsLoaded%2A> pour vous assurer que l’élément racine est entièrement chargé. Les deux gestionnaires d’appellent la même fonction (non affichée) qui remplit les éléments enfants avec les données actualisées.  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les informations de langue de localisation/globalisation qui s’appliquent à un élément.</summary>
        <value>Informations de langue pour cet élément. La valeur par défaut est un attribut <see cref="T:System.Windows.Markup.XmlLanguage" /> dont la valeur <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> est définie sur la chaîne "fr-FR".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les formats de chaîne respectent la norme RFC 3066. Par exemple, des États-Unis L’anglais est « en-US ». Pour plus d’informations sur les valeurs et le format, consultez <xref:System.Windows.Markup.XmlLanguage>.  
  
 Cette propriété de dépendance hérite des valeurs de propriété. S’il existe des éléments enfants sans autre valeur pour <xref:System.Windows.FrameworkElement.Language%2A> établie par l’intermédiaire de valeurs locales ou de styles, le système de propriétés définit la valeur à la <xref:System.Windows.FrameworkElement.Language%2A> la valeur de l’ancêtre le plus proche avec cette valeur attribuée.  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] définit la signification générale de le `xml:lang` attribut. <xref:System.Windows.FrameworkElement.Language%2A> expose essentiellement la signification de cet attribut comme une propriété de dépendance. <xref:System.Windows.FrameworkElement.Language%2A> peut être ajustée par programmation et peuvent participer à l’héritage de valeur de propriété système d’une manière qui correspond à la `xml:lang` attribut peut hériter de l’étendue d’élément enfant dans [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]. Si vous définissez <xref:System.Windows.FrameworkElement.Language%2A>, cette valeur devient la `xml:lang` et remplace toute valeur précédente. Pour plus d’informations, consultez [XML : lang Handling in XAML](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md).  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.Language" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une transformation de conception graphique qui doit s’appliquer à cet élément quand la disposition est effectuée.</summary>
        <value>Transformation que cet élément doit utiliser. La valeur par défaut est <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement à <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> affecte les résultats de la mise en page.  
  
 Définition d’une transformation fournit des fonctionnalités puissantes de mise à l’échelle et de rotation. Toutefois, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> ignore <xref:System.Windows.Media.TranslateTransform> operations. C’est parce que le comportement du système de disposition pour les éléments enfants d’un <xref:System.Windows.FrameworkElement> corrige automatiquement tout offset à la position d’un élément de mise à l’échelle ou pivoté dans la mise en page et le système de coordonnées de l’élément parent.  
  
 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> peut entraîner des performances médiocres des applications si vous l’appelez dans un scénario qui ne requiert pas une passe entière par le système de disposition. Lorsque vous appliquez un <xref:System.Windows.FrameworkElement.LayoutTransform%2A> à la <xref:System.Windows.Controls.Panel.Children%2A> collection de la <xref:System.Windows.Controls.Panel>, il déclenche une nouvelle passe par le système de disposition et les force à l’écran tous les objets pour remesurer et à réorganiser. Si vous mettez à jour l’application complète [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], cette fonctionnalité peut être exactement ce dont vous avez besoin. Toutefois, si vous n’avez pas besoin d’une passe de disposition complète, utilisez la <xref:System.Windows.UIElement.RenderTransform%2A> propriété, qui n’appelle pas le système de disposition et par conséquent, est généralement un meilleur choix pour ce scénario.  
  
 Exemples de scénarios où <xref:System.Windows.FrameworkElement.LayoutTransform%2A> serait utile incluent : faire pivoter des éléments tels que les composants de menu de horizontale à la verticale ou vice versa, mise à l’échelle d’éléments (Zoom) sur le focus, l’indication du comportement d’édition, etc.  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 L’exemple suivant montre comment appliquer un <xref:System.Windows.FrameworkElement.LayoutTransform%2A> à un élément. L’exemple crée une instance de <xref:System.Windows.Controls.Button> et héberge ce dernier dans un parent <xref:System.Windows.Controls.Grid>. Elle utilise également le <xref:System.Windows.FrameworkElement.LayoutTransform%2A> propriété à laquelle appliquer un <xref:System.Windows.Media.RotateTransform> à la <xref:System.Windows.Controls.Button>.  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.LayoutTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand l’élément est disposé, rendu et prêt pour l’interaction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Loaded> est généralement le dernier événement déclenché dans une séquence d’initialisation d’éléments. Il est toujours déclenché après <xref:System.Windows.FrameworkElement.Initialized>. Si vous choisissez Gérer les <xref:System.Windows.FrameworkElement.Loaded> ou <xref:System.Windows.FrameworkElement.Initialized> dépend de vos besoins. Si vous n’avez pas besoin de lire les propriétés d’un élément, envisagez de réinitialiser les propriétés et n’avez pas besoin de toutes les informations de mise en page, <xref:System.Windows.FrameworkElement.Initialized> peut être l’événement le plus adapté. Si vous avez besoin de toutes les propriétés de l’élément soit disponible, et que vous définissez des propriétés qui sont susceptibles de réinitialiser la disposition, <xref:System.Windows.FrameworkElement.Loaded> peut être l’événement le plus adapté. Soyez prudent de réentrance si votre gestionnaire réinitialise toutes les propriétés qui sont interprétées par le système de disposition pour indiquer qu’une nouvelle passe de disposition est nécessaire. (Vous devrez peut-être vérifier la <xref:System.Windows.FrameworkPropertyMetadata> passer des valeurs de la propriété si vous ne savez pas de propriétés pouvant nécessiter une nouvelle disposition si elles sont modifiées.)  
  
 Pour plus d’informations sur la séquence d’événements d’objet pour un <xref:System.Windows.FrameworkElement>et également pour plusieurs connexes d’application et les classes d’éléments, consultez [événements de durée de vie de l’objet](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
 Les événements routés directs ne suivent pas d’itinéraire, ils sont gérés uniquement dans le même élément sur lequel ils sont déclenchés. Diriger les événements routés ne prennent pas en charge le comportement de l’événement routé : ils prennent en charge une collection de gestionnaires accessible et peut être utilisés comme un <xref:System.Windows.EventTrigger> dans un style.  
  
 <xref:System.Windows.FrameworkElement.Loaded> et <xref:System.Windows.FrameworkElement.Unloaded> peuvent tous deux être déclenchés sur des contrôles à la suite de modifications de thème système initiée par l’utilisateur. Une modification du thème entraîne une invalidation du modèle de contrôle et l’arborescence visuelle relation contenant-contenu, ce qui provoque l’ensemble du contrôle à décharger et recharger. Par conséquent, <xref:System.Windows.FrameworkElement.Loaded> ne peut pas censé pour se produire uniquement quand une page est chargée via la navigation vers la page.  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.FrameworkElement.Loaded" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d'informations sur l'inscription d'événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d'informations sur l'utilisation d'identificateurs d'événement routés afin d'ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un énumérateur pour les éléments enfants logiques de cet élément.</summary>
        <value>Un énumérateur pour les éléments enfants logiques de cet élément.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> vous permet d’itérer sur des éléments enfants. Cela est utile pour les éléments qui ne dispose pas d’une collection définie dédiée mais contiennent encore plus d’un élément enfant, en particulier <xref:System.Windows.FrameworkContentElement> des éléments enfants.  
  
 Pour plus d’informations sur l’utilisation de <xref:System.Windows.FrameworkElement.LogicalChildren%2A> et <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, consultez [arborescences dans WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la marge extérieure d’un élément.</summary>
        <value>Fournit des valeurs de marge pour l’élément. La valeur par défaut est un <see cref="T:System.Windows.Thickness" /> dont toutes les propriétés sont égales à 0 (zéro).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La marge est l’espace entre cet élément et d’autres éléments destinés à être adjacents lorsque la disposition génère le [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]. Les éléments partagés peuvent être des éléments homologues (tels que les autres éléments dans la collection d’un contrôle parent commun), ou peuvent également être le parent de cet élément.  
  
 <xref:System.Windows.FrameworkElement.Margin%2A> est défini comme un <xref:System.Windows.Thickness> structure plutôt que comme un nombre afin que la marge peut être définie de manière asymétrique. Le <xref:System.Windows.Thickness> structure elle-même prend en charge la conversion de type chaîne afin que vous pouvez spécifier un asymétrique <xref:System.Windows.FrameworkElement.Margin%2A> dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] également la syntaxe d’attribut.  
  
 Une marge non nulle applique un espace en dehors de la disposition de l’élément <xref:System.Windows.FrameworkElement.ActualWidth%2A> et <xref:System.Windows.FrameworkElement.ActualHeight%2A>.  
  
 Les marges sont additifs pour les éléments frères dans une disposition ; par exemple, deux éléments adjacents à la fois avec une marge de 30 définies sur le bord adjacent aurait 60 unités d’espace entre eux.  
  
 Les éléments qui présentent une marge définie ne limitent pas en général la taille de l’objet <xref:System.Windows.FrameworkElement.Margin%2A> si l’espace rectangulaire alloué n’est pas suffisamment grande pour la marge plus la zone de contenu d’élément. La zone de contenu de l’élément sera contraint à la place lorsque la disposition est calculée. Le seul cas où les marges sont limitées est également si le contenu est déjà limité à zéro.  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object Margin="left,top,right,bottom"/>  
- or -  
<object Margin="left,top"/>  
- or -  
<object Margin="thicknessReference"/>  
```  
  
<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *gauche, haut, droite, bas*  
 Nombre de valeurs comprises entre 0 et <xref:System.Double.PositiveInfinity> qui spécifient les quatre propriétés de dimension possibles d’un <xref:System.Windows.Thickness> structure.  
  
 L’utilisation d’attributs accepte également des valeurs abrégées qui s’appliquent dans l’ordre indiqué, de façon symétrique et logique. Par exemple, `Margin="20"` sera interprété pour signifier un <xref:System.Windows.Thickness> avec toutes les propriétés définies à 20. `Margin="20,50"` sera interprété pour signifier un <xref:System.Windows.Thickness> avec <xref:System.Windows.Thickness.Left%2A> et <xref:System.Windows.Thickness.Right%2A> de 20, et <xref:System.Windows.Thickness.Top%2A> et <xref:System.Windows.Thickness.Bottom%2A> défini sur 50.  
  
 L’unité par défaut pour un <xref:System.Windows.Thickness> mesure est [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]. Vous pouvez également spécifier les autres unités en ajoutant les chaînes de type d’unité `cm`, `in`, ou `pt` à toute mesure.  
  
 Valeurs numériques fournies en tant que [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attributs pas besoin de spécifier des points de décimale (0 est acceptable, pas nécessairement être indiqué comme 0.0). Pour plus d’informations sur [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] l’utilisation, consultez <xref:System.Windows.Thickness>.  
  
 *thicknessReference*  
 Une référence d’objet à un fichier <xref:System.Windows.Thickness>. Cela peut être un `}`, a, ou `}` référence. Pour plus d’informations sur [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] l’utilisation, consultez <xref:System.Windows.Thickness>.  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.Margin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la contrainte de hauteur maximale de l'élément.</summary>
        <value>Hauteur maximale de l'élément, en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. La valeur par défaut est <see cref="F:System.Double.PositiveInfinity" />. Il peut s’agir de n’importe quelle valeur supérieure ou égale à 0.0. <see cref="F:System.Double.PositiveInfinity" /> est également valide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est une des trois propriétés sur <xref:System.Windows.FrameworkElement> qui spécifient des informations de hauteur. Les deux autres sont <xref:System.Windows.FrameworkElement.MinHeight%2A> et <xref:System.Windows.FrameworkElement.Height%2A>.  S’il existe un conflit entre ces valeurs, l’ordre d’application pour la détermination de la hauteur réelle est le premier <xref:System.Windows.FrameworkElement.MinHeight%2A> doit être pris en compte, puis <xref:System.Windows.FrameworkElement.MaxHeight%2A>et enfin si chacune d’elles est dans les limites, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Les restrictions de valeurs sur le <xref:System.Double> sont appliquées par un <xref:System.Windows.ValidateValueCallback> mécanisme. Si vous essayez de définir une valeur non valide, une exception runtime est levée.  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object MaxHeight="double"/>  
- or –  
<object MaxHeight ="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *double*  
 <xref:System.Double>  
  
 Représentation de chaîne d’un <xref:System.Double> valeur égale ou supérieure à 0.0. Ceci est interprété comme un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] mesure. Chaînes n’incluent pas explicitement les décimales. Par exemple, la valeur `1` est acceptable.  
  
 Le même <xref:System.Double> applique des restrictions comme indiqué dans la section de la valeur de propriété, sauf que vous devez utiliser [x : Static, Extension de balisage](~/docs/framework/xaml-services/x-static-markup-extension.md) si vous devez définir explicitement la valeur soit <xref:System.Double.PositiveInfinity>.  
  
 *qualifiedDouble*  
 A *double* valeur telle que décrite ci-dessus, suivie d’une des chaînes de déclaration d’unité suivantes : `px`, `in`, `cm`, `pt`.  
  
 `px` (valeur par défaut) est [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pouces ; in 1 == 96px  
  
 `cm` centimètres ; 1cm==(96/2.54) px  
  
 `pt` correspond à points ; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.MaxHeight" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la contrainte de largeur maximale de l'élément.</summary>
        <value>Largeur maximale de l'élément, en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. La valeur par défaut est <see cref="F:System.Double.PositiveInfinity" />. Il peut s’agir de n’importe quelle valeur supérieure ou égale à 0.0. <see cref="F:System.Double.PositiveInfinity" /> est également valide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est une des trois propriétés sur <xref:System.Windows.FrameworkElement> qui spécifient des informations sur la largeur. Les deux autres sont <xref:System.Windows.FrameworkElement.MinWidth%2A> et <xref:System.Windows.FrameworkElement.Width%2A>. S’il existe un conflit entre ces valeurs, l’ordre d’application pour la détermination de la largeur réelle est le premier <xref:System.Windows.FrameworkElement.MinWidth%2A> doit être pris en compte, puis <xref:System.Windows.FrameworkElement.MaxWidth%2A>et enfin si chacune d’elles est dans les limites, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 Les restrictions de valeurs sur le <xref:System.Double> sont appliquées par un <xref:System.Windows.ValidateValueCallback> mécanisme. Si vous essayez de définir une valeur non valide, une exception runtime est levée.  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object MaxWidth="double"/>  
- or -  
<object MaxWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *double*  
 <xref:System.Double>  
  
 Représentation de chaîne d’un <xref:System.Double> valeur égale ou supérieure à 0.0. Ceci est interprété comme un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] mesure. Chaînes n’incluent pas explicitement les décimales. Par exemple, la valeur `1` est acceptable.  
  
 Le même <xref:System.Double> applique des restrictions comme indiqué dans la section de la valeur de propriété, sauf que vous devez utiliser [x : Static, Extension de balisage](~/docs/framework/xaml-services/x-static-markup-extension.md) pour définir la valeur <xref:System.Double.PositiveInfinity>.  
  
 *qualifiedDouble*  
 A *double* valeur telle que décrite ci-dessus, suivie d’une des chaînes de déclaration d’unité suivantes : `px`, `in`, `cm`, `pt`.  
  
 `px` (valeur par défaut) est [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pouces ; in 1 == 96px  
  
 `cm` centimètres ; 1cm==(96/2.54) px  
  
 `pt` correspond à points ; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.MaxWidth" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Taille disponible que l’élément parent peut donner aux éléments enfants.</param>
        <summary>Implémente le comportement de système de disposition au niveau des passes de mesure de base pour <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>Taille souhaitée de cet élément dans la disposition.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode substitue <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> pour se connecter au niveau du noyau WPF et les implémentations de mesure de mise en page de niveau infrastructure WPF. Le <xref:System.Windows.FrameworkElement> implémentation scelle la méthode. Pour ajuster le comportement de tout élément qui repose sur le niveau infrastructure WPF disposition de la passe de mesure, vous devez substituer <xref:System.Windows.FrameworkElement.MeasureOverride%2A> à la place. Pour ajuster la passe de mesure comportement de disposition d’un élément qui ne repose pas délibérément sur le niveau infrastructure WPF ou utilisez <xref:System.Windows.FrameworkElement>, substituez <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Taille disponible que cet élément peut donner aux éléments enfants. Vous pouvez définir une valeur infinie pour indiquer que l’élément se redimensionne en fonction du contenu disponible.</param>
        <summary>En cas de substitution dans une classe dérivée, mesure les dimensions dans la disposition requise pour les éléments enfants et détermine une taille pour la classe dérivée de <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>Taille dont cet élément estime avoir besoin lors de la disposition, en fonction de ses calculs des tailles des éléments enfants.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Substituer <xref:System.Windows.FrameworkElement.MeasureOverride%2A> pour implémenter le comportement de redimensionnement de disposition personnalisée pour votre élément tel qu’il participe le [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] système de disposition. Votre implémentation doit effectuer les opérations suivantes :  
  
1.  Itérer au sein de la collection particulière de votre élément d’enfants qui font partie de la mise en page, appel <xref:System.Windows.UIElement.Measure%2A> sur chaque élément enfant.  
  
2.  Obtenez immédiatement <xref:System.Windows.UIElement.DesiredSize%2A> sur l’enfant (défini comme propriété après que <xref:System.Windows.UIElement.Measure%2A> est appelée).  
  
3.  Calculez la taille souhaitée nette du parent en fonction de la mesure des éléments enfants.  
  
 La valeur de retour de <xref:System.Windows.FrameworkElement.MeasureOverride%2A> doit être la taille voulue propre à l’élément, qui devient alors la mesure de l’entrée pour l’élément parent de l’élément actuel. Le même processus se poursuit via le système de disposition jusqu'à ce que l’élément racine de la page est atteint.  
  
 Pendant ce processus, des éléments enfants peuvent retourner une valeur plus élevée <xref:System.Windows.UIElement.DesiredSize%2A> taille qu’initial `availableSize` pour indiquer que l’élément enfant nécessite plus d’espace. Cela peut être gérée dans votre propre implémentation en introduisant une région déroulante, en redimensionnant le contrôle parent, en établissant un mode quelconque de commande empilée ou n’importe quel nombre de solutions pour la mesure ou de réorganisation du contenu.  
  
> [!IMPORTANT]
>  Les éléments doivent appeler <xref:System.Windows.UIElement.Measure%2A> sur chaque enfant pendant ce processus, sinon les éléments enfants ne seront pas correctement dimensionnés ou réorganisés.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Le code non compilé suivant illustre ce modèle d’implémentation.  <c>VisualChildren</c> représente une propriété de collection énumérable des enfants que votre propre élément doit définir. La propriété peut être n’importe quel nom. <c>VisualChildren</c> est un nom d’espace réservé pour les besoins de cet exemple, <c>VisualChildren</c> n’est pas un [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] tel que fourni par [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] ou une partie d’un modèle d’affectation de noms...  
  
 [!code-csharp[CorePseudocode#FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)]
 [!code-vb[CorePseudocode#FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la contrainte de hauteur minimale de l'élément.</summary>
        <value>Hauteur minimale de l'élément, en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. La valeur par défaut est 0,0. Il peut s’agir de n’importe quelle valeur supérieure ou égale à 0,0. Toutefois, <see cref="F:System.Double.PositiveInfinity" /> n'est PAS valide, ni <see cref="F:System.Double.NaN" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est une des trois propriétés sur <xref:System.Windows.FrameworkElement> qui spécifient des informations de hauteur.  Les deux autres sont <xref:System.Windows.FrameworkElement.Height%2A> et <xref:System.Windows.FrameworkElement.MaxHeight%2A>. S’il existe un conflit entre ces valeurs, l’ordre d’application pour la détermination de la hauteur réelle est le premier <xref:System.Windows.FrameworkElement.MinHeight%2A> doit être pris en compte, puis <xref:System.Windows.FrameworkElement.MaxHeight%2A>et enfin si chacune d’elles est dans les limites, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Les restrictions de valeurs sur le <xref:System.Double> sont appliquées par un <xref:System.Windows.ValidateValueCallback> mécanisme. Si vous essayez de définir une valeur non valide, une exception runtime est levée.  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object MinHeight="double"/>  
- or -  
<object MinHeight="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *double*  
 <xref:System.Double>  
  
 Représentation de chaîne d’un <xref:System.Double> valeur égale ou supérieure à 0.0. Ceci est interprété comme un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] mesure. Chaînes n’incluent pas explicitement les décimales. Par exemple, la valeur `1` est acceptable.  
  
 Le même <xref:System.Double> applique des restrictions comme indiqué dans la section de la valeur de la propriété.  
  
 *qualifiedDouble*  
 A *double* valeur telle que décrite ci-dessus, suivie d’une des chaînes de déclaration d’unité suivantes : `px`, `in`, `cm`, `pt`.  
  
 `px` (valeur par défaut) est [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pouces ; in 1 == 96px  
  
 `cm` centimètres ; 1cm==(96/2.54) px  
  
 `pt` correspond à points ; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.MinHeight" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la contrainte de largeur minimale de l'élément.</summary>
        <value>Largeur minimale de l'élément, en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. La valeur par défaut est 0,0. Il peut s’agir de n’importe quelle valeur supérieure ou égale à 0.0. Toutefois, <see cref="F:System.Double.PositiveInfinity" /> n'est pas valide, ni <see cref="F:System.Double.NaN" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est une des trois propriétés sur <xref:System.Windows.FrameworkElement> qui spécifient des informations sur la largeur.  Les deux autres sont <xref:System.Windows.FrameworkElement.Width%2A> et <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  S’il existe un conflit entre ces valeurs, l’ordre d’application pour la détermination de la largeur réelle est le premier <xref:System.Windows.FrameworkElement.MinWidth%2A> doit être pris en compte, puis <xref:System.Windows.FrameworkElement.MaxWidth%2A>et enfin si chacune d’elles est dans les limites, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 Les restrictions de valeurs sur le <xref:System.Double> sont appliquées par un <xref:System.Windows.ValidateValueCallback> mécanisme. Si vous essayez de définir une valeur non valide, une exception runtime est levée.  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object MinWidth="double"/>  
- or -  
<object MinWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *double*  
 <xref:System.Double>  
  
 Représentation de chaîne d’un <xref:System.Double> valeur égale ou supérieure à 0.0. Ceci est interprété comme un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] mesure. Chaînes n’incluent pas explicitement les décimales. Par exemple, la valeur `1` est acceptable.  
  
 Le même <xref:System.Double> applique des restrictions comme indiqué dans la section de la valeur de la propriété.  
  
 *qualifiedDouble*  
 A *double* valeur telle que décrite ci-dessus, suivie d’une des chaînes de déclaration d’unité suivantes : `px`, `in`, `cm`, `pt`.  
  
 `px` (valeur par défaut) est [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pouces ; in 1 == 96px  
  
 `cm` centimètres ; 1cm==(96/2.54) px  
  
 `pt` correspond à points ; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.MinWidth" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">La direction sur laquelle le focus doit être déplacé, comme une valeur de l'énumération.</param>
        <summary>Déplace le focus clavier de cet élément vers un autre élément selon un sens de parcours fourni.</summary>
        <returns>Retourne la valeur <see langword="true" /> si le focus est déplacé correctement ; <see langword="false" /> si l'élément cible, en suivant le sens spécifié, n'existe pas ou n'a pas pu faire l'objet du focus clavier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette implémentation substitue <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> et scelle la méthode.  
  
   
  
## Examples  
 L’exemple suivant implémente un gestionnaire qui gère plusieurs entrées possibles. Chaque bouton représente un éventuel <xref:System.Windows.Input.FocusNavigationDirection>. Le gestionnaire effectue le suivi de l’élément avec le focus clavier actuel et appelle <xref:System.Windows.FrameworkElement.MoveFocus%2A> sur cet élément, en spécifiant la <xref:System.Windows.Input.FocusNavigationDirection> en tant que l’initialisation pour le <xref:System.Windows.Input.TraversalRequest> fourni le paramètre de type.  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom d’identification de l’élément. Le nom fournit une référence afin que du code-behind, tel que le code d'un gestionnaire d'événements, peut faire référence à un élément de balisage après qu'il ait été construit pendant le traitement par un processeur [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</summary>
        <value>Nom de l'élément. La valeur par défaut est une chaîne vide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’utilisation la plus courante de cette propriété consiste à spécifier un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] nom de l’élément en tant qu’attribut dans le balisage.  
  
 Cette propriété fournit essentiellement une propriété de commodité de niveau infrastructure WPF pour définir le [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [Directive x : Name](~/docs/framework/xaml-services/x-name-directive.md).  
  
 Noms doivent être uniques au sein d’une portée de nom. Pour plus d’informations, consultez [portées de nom XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 Obtention d’un <xref:System.Windows.FrameworkElement.Name%2A> si vous créez des éléments de code n’est pas commun. Si vous avez déjà la référence appropriée dans le code, vous pouvez simplement appeler les méthodes et propriétés sur l’élément de référence et n’avez généralement pas besoin du <xref:System.Windows.FrameworkElement.Name%2A>. Une exception est si le <xref:System.Windows.FrameworkElement.Name%2A> chaîne a une signification surchargée, par exemple s’il est utile d’afficher ce nom dans [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Définissant un <xref:System.Windows.FrameworkElement.Name%2A> à partir de code-behind si la version d’origine <xref:System.Windows.FrameworkElement.Name%2A> a été défini à partir du balisage est également pas recommandée et la modification de la propriété après le chargement du [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ne modifiera pas la référence d’objet d’origine. Les références d’objet sont créées uniquement lorsque les portées de nom sous-jacentes sont créées explicitement lors de l’analyse. Vous devez appeler spécifiquement <xref:System.Windows.FrameworkElement.RegisterName%2A> pour apporter une modification effective pour le <xref:System.Windows.FrameworkElement.Name%2A> propriété d’un élément déjà chargé.  
  
 Un remarquables cas où le paramètre <xref:System.Windows.FrameworkElement.Name%2A> à partir du code est important est lors de l’inscription de noms pour les éléments de tables de montage séquentiel exécutent, afin qu’ils puissent être référencés au moment de l’exécution. Avant de pouvoir inscrire un nom, peut-être également instancier et attribuer une <xref:System.Windows.NameScope> instance. Consultez la section exemple, ou [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 Paramètre <xref:System.Windows.FrameworkElement.Name%2A> à partir du code a limité les applications, mais l’obtention d’un élément par <xref:System.Windows.FrameworkElement.Name%2A> est plus courant. Un scénario particulier est si votre application prend en charge un modèle de navigation où rechargent les pages dans l’application, et le code d’exécution n’est pas nécessairement défini pour cette page code-behind. La méthode utilitaire <xref:System.Windows.FrameworkElement.FindName%2A>, qui est disponible à partir des <xref:System.Windows.FrameworkElement>, peut rechercher tout élément par <xref:System.Windows.FrameworkElement.Name%2A> dans l’arborescence logique pour cet élément, recherche dans l’arborescence de manière récursive si nécessaire. Ou vous pouvez utiliser la <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> méthode statique de <xref:System.Windows.LogicalTreeHelper>, qui prend également un <xref:System.Windows.FrameworkElement.Name%2A> chaîne en tant qu’argument.  
  
 Utilisé en général, les éléments racines (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> par exemple) implémentent l’interface <xref:System.Windows.Markup.INameScope>. Les implémentations de cette interface sont supposées renforcer les noms d’être non équivoque dans leur étendue. Les éléments racines qui définissent cette interface également définissent des limites du comportement de la portée de nom pour tous les [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].  
  
 Le <xref:System.Windows.FrameworkElement.Name%2A> propriété sert également comme identificateur pour d’autres processus. Par exemple, le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modèle automation utilise <xref:System.Windows.FrameworkElement.Name%2A> comme AutomationId pour les clients et les fournisseurs.  
  
 Les valeurs de chaîne utilisées pour <xref:System.Windows.FrameworkElement.Name%2A> présentent quelques restrictions, imposée par sous-jacent [Directive x : Name](~/docs/framework/xaml-services/x-name-directive.md) définie par le [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] spécification. Plus particulièrement, un <xref:System.Windows.FrameworkElement.Name%2A> doit commencer par une lettre ou le caractère de soulignement (_) et doit contenir uniquement des lettres, des chiffres ou des traits de soulignement. Pour plus d’informations, consultez [portées de nom XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 <xref:System.Windows.FrameworkElement.Name%2A> est une des propriétés de dépendance très peu ne peut pas être animées (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> est `true` dans les métadonnées), car le nom lui-même est vital pour cibler une animation. Liaison de données un <xref:System.Windows.FrameworkElement.Name%2A> est techniquement possible, mais est très rarement, car une limite de données <xref:System.Windows.FrameworkElement.Name%2A> ne peut pas servir au but principal prévu de la propriété : pour fournir un point de connexion d’identificateur pour le code-behind.  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.NameProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 L’exemple suivant définit la <xref:System.Windows.FrameworkElement.Name%2A> propriété dans le code, puis inscrit le nom dans nouvellement créé <xref:System.Windows.NameScope> en appelant <xref:System.Windows.FrameworkElement.RegisterName%2A>. La technique illustrée ici est une spécification d’animation avec les tables de montage séquentiel, ces dernières nécessitant un ciblage par le <xref:System.Windows.FrameworkElement.Name%2A>et ne peut pas être ciblées par une référence d’objet.  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.Name" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, appelé chaque fois que le code de l'application ou que des processus internes appellent <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a aucune implémentation par défaut.  
  
 Les modèles sont la section de terminé arborescence d’éléments visuels d’un élément qui provient de la propriété de modèle d’un <xref:System.Windows.Style> qui est appliqué à l’élément. Pour plus d’informations, consultez [Application d’un style et création de modèles](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Les classes dérivées de <see cref="T:System.Windows.FrameworkElement" /> pouvez utiliser cette méthode en tant que notification pour une variété de scénarios possibles :  
  
-   Vous pouvez appeler votre propre implémentation de code qui génère le reste d’une arborescence d’éléments visuels.  
  
-   Vous pouvez exécuter le code qui s’appuie sur l’arborescence d’éléments visuels à partir de modèles ont été appliqués, par exemple, obtenir des références à des éléments nommés qui provient d’un modèle.  
  
-   Vous pouvez introduire des services qui ne sont pertinentes d’exister après que l’arborescence d’éléments visuels à partir de modèles est terminée.  
  
-   Vous pouvez définir les États et les propriétés d’éléments dans le modèle qui dépendent d’autres facteurs. Par exemple, les valeurs de propriété peuvent uniquement être détectables en connaissant l’élément parent, ou lorsqu’un spécifique dérivée classe utilise un modèle commun.  
  
 Les implémenteurs doivent toujours appeler l’implémentation de base avant leur propre implémentation. <see cref="T:System.Windows.FrameworkElement" /> a lui-même sans valeur par défaut peuvent d’implémentation, mais des classes.  
  
 <see cref="T:System.Windows.Controls.Control" /> offre une substitution semblable, <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Fournit des données sur l'événement.</param>
        <summary>Appelée chaque fois qu'un événement routé <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> non géré rencontre cette classe sur son itinéraire. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a aucune implémentation par défaut. Vous devez toujours appeler l’implémentation de base au cas où une classe intermédiaire dans l’héritage a implémenté cette méthode.  
  
 L’objectif de cette méthode est quelque peu similaire aux [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] du modèle d’événement sur * méthodes : il fournit les moyens de gérer l’événement correspondant à partir de classes dérivées avec un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés car l’événement routé peut avoir été déclenché par un élément enfant, et pas nécessairement l’élément qui appelle les gestionnaires, votre implémentation devez prendre source des arguments d’événement propriétés de compte (et ne doit pas essayer de redéclencher l’événement dans la plupart des cas). Les sous-classes de <xref:System.Windows.FrameworkElement> peut choisir d’appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire. Un scénario potentiel consiste à prendre les arguments de l’événement et à marquer délibérément l’événement comme géré.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.RoutedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelée chaque fois qu'un événement routé <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> non géré rencontre cette classe sur son itinéraire. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a aucune implémentation par défaut. Vous devez toujours appeler l’implémentation de base au cas où une classe intermédiaire dans l’héritage a implémenté cette méthode.  
  
 L’objectif de cette méthode est quelque peu similaire aux [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] du modèle d’événement sur * méthodes : il fournit les moyens de gérer l’événement correspondant à partir de classes dérivées avec un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés car l’événement routé peut avoir été déclenché par un élément enfant, et pas nécessairement l’élément qui appelle les gestionnaires, votre implémentation devez prendre source des arguments d’événement propriétés de compte (et ne doit pas essayer de redéclencher l’événement dans la plupart des cas). Les sous-classes de <xref:System.Windows.FrameworkElement> peut choisir d’appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire. Un scénario potentiel consiste à prendre les arguments de l’événement et à marquer délibérément l’événement comme géré.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.RoutedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelée chaque fois qu'un événement routé <see cref="E:System.Windows.UIElement.GotFocus" /> non géré rencontre cet élément sur son itinéraire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement à d’autres sur * méthodes exposées par les éléments de base, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> n’a pas une implémentation par défaut. Plus précisément, elle a une implémentation qui substitue l’implémentation null dans le niveau suivant de l’élément de base vers le bas, <xref:System.Windows.UIElement.OnGotFocus%2A>. Lorsqu’elle est appelée, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> définit le comportement approprié du focus sur cet élément dans les cas où l’événement provient de l’élément actuel en raison du focus clavier. Le <xref:System.Windows.FrameworkElement.OnGotFocus%2A> gestionnaire ne marque pas les arguments d’événement comme géré, même lorsque le focus est défini à l’élément actuel. Si la source de l’événement était un autre élément dans l’arborescence (et pas l’élément en cours), le gestionnaire ne fait rien.  
  
 Vous pouvez substituer cette méthode afin de modifier le comportement par défaut du focus sur votre élément, mais gardez à l’esprit que modification de cette manière peut-être être mieux exécutée en n’autorisant ne pas l’élément soit actif tout (voir <xref:System.Windows.UIElement.Focusable%2A>).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si vous souhaitez marquer l’événement géré dans les arguments, soyez conscient des conséquences sur la gestion des événements dans d’autres éléments parent dans l’arborescence d’éléments. Ce gestionnaire agissant sur un événement avec un routage par propagation, définir le focus sur actuel <paramref name="sender" /> par l’événement arguments peut ne pas convient. Le focus devrez peut-être revenir à un élément enfant composite ou à un élément parent, en fonction de la composition de certains contrôles. Par conséquent, marquer un événement de focus comme géré est recommandé uniquement si l’intégralité de l’arborescence d’éléments visuels qui distribue via l’événement fait partie de la composition d’un contrôle que vous avez créés.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.RoutedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.FrameworkElement.Initialized" />. Cette méthode est appelée chaque fois que <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> a la valeur <see langword="true" /> en interne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce particulier sur * méthode n’est pas un raccordement du Gestionnaire de classe. Ni ne suit pas exactement l’établie [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] sur * convention de méthode que l’événement correspondant peut être supprimé en substituant cette méthode sans appeler l’implémentation de base.  
  
 Notez que la <xref:System.Windows.FrameworkElement.IsInitialized%2A> propriété est en lecture seule, afin que vous ne pouvez pas définir <xref:System.Windows.FrameworkElement.IsInitialized%2A> pour forcer le comportement d’initialisation. Définition de l’état d’initialisation est conçu pour être utilisé uniquement par le [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L'implémentation par défaut de cette méthode virtuelle déclenche l'événement tel qu'il est décrit ci-dessus. Les substitutions doivent appeler l'implémentation de base pour maintenir ce comportement. Si vous ne parvenez pas à appeler l’implémentation de base, non seulement vous pas déclenche le <see cref="E:System.Windows.FrameworkElement.Initialized" /> événement normalement est généralement d’un <see cref="T:System.Windows.FrameworkElement" /> classe dérivée, mais vous supprimez également deux importantes style et le thème de style des opérations d’initialisation qui sont implémentée par cette implémentation de base.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Données d’événement qui décrivent la propriété qui a changé, ainsi que les anciennes et nouvelles valeurs.</param>
        <summary>Appelée à chaque fois que la valeur effective d'une propriété de dépendance sur ce <see cref="T:System.Windows.FrameworkElement" />  a été mise à jour. La propriété de dépendance spécifique qui a changé est indiquée dans le paramètre d’arguments. Substitue <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’est pas destinée à détecter en général des modifications des propriétés ou invalidations. Il est destiné à la place les modifications du modèle d’invalidation général si certaines informations sont connues concernant d’importantes classifications de propriétés.  
  
 Cette méthode est appelée potentiellement plusieurs fois pendant la durée de vie d’un objet. Par conséquent, vous pouvez obtenir de meilleures performances si vous substituez les métadonnées de propriétés spécifiques puis attachez <xref:System.Windows.CoerceValueCallback> ou <xref:System.Windows.PropertyChangedCallback> fonctions pour les propriétés individuelles. Toutefois, vous pouvez utiliser cette méthode si un <xref:System.Windows.FrameworkElement> inclut un nombre significatif de propriétés de dépendance de valeurs mises en corrélation, ou s’il est logique comme comportement de rendu qui doit être réexécuté pour plusieurs cas d’invalidations de propriétés connexes.  
  
 Notez qu’il existe une portant le même nom `OnPropertyChanged` méthode avec une signature différente (le type de paramètre est <xref:System.ComponentModel.PropertyChangedEventArgs>) qui peut apparaître sur plusieurs classes. Que `OnPropertyChanged` est utilisé pour les notifications d’objet de données, et fait partie du contrat pour <xref:System.ComponentModel.INotifyPropertyChanged>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Appelez toujours l’implémentation de base, comme première opération dans votre implémentation. Entier sera considérablement désactivé dans le cas [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] système de propriétés, ce qui provoque le signalement de valeurs incorrectes. Spécifique au <see cref="T:System.Windows.FrameworkElement" /> implémentation est également chargée de maintenir l’état propre pour diverses propriétés qui affectent l’interface utilisateur visible. Celles-ci incluent l’invalidation de l’arborescence d’éléments visuels en fonction des modifications apportées au style aux moments opportuns.</para>
        </block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo">Détails de l’ancienne taille et de la nouvelle taille impliquées dans la modification.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> à l'aide des informations spécifiées faisant partie de données d'événement définitives.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode se substitue à <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>. Si vous appelez cette méthode réinitialise le <xref:System.Windows.FrameworkElement.ActualWidth%2A> propriété, le <xref:System.Windows.FrameworkElement.ActualHeight%2A> propriété, ou les deux, selon ce qui est spécifié comme modifiée dans les arguments fournis, et à toujours déclencher l’événement.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ne pas remplacer cette méthode pour les scénarios classiques de disposition. Le système de disposition fonctionne de façon asynchrone délibérément afin d’assurer que disposition possible toutes les réorganiser et mesures cas sont pris en compte. Le système de disposition remplace les méthodes <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> et <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> sont généralement suffisantes pour toute personnalisation de disposition requises. <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> est exposé comme une machine virtuelle. Vous pouvez substituer <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> pour corriger des cas exceptionnels, où un changement de comportement d’exécution associée pour les événements associés au contrôle d’entrée la recomposition dans la réponse peut donner des informations de disposition inexactes.  
  
 Vous pouvez toujours substituer cette méthode dans les classes dérivées (elle est protégée mais pas scellé). Appelez toujours l’implémentation de base pour conserver le comportement mentionné ci-dessus, sauf si vous avez des raisons très précises pour désactiver le comportement de rendu de niveau infrastructure WPF par défaut. Ne pas déclencher la <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> événement entraîne un comportement non standard de mise en page si vous utilisez l’implémentation de système de mise en page de niveau infrastructure WPF standard.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle">L'ancien style.</param>
        <param name="newStyle">Le nouveau style.</param>
        <summary>Appelé lorsque le style utilisé sur cet élément change, ce qui invalide la disposition.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode présente une implémentation par défaut qui définit un indicateur interne qui note la condition de style modifié.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il doit généralement inutile de substituer cette méthode. Toute modification à un style qui implique une mesure ou de réorganisation modification déclencherait un autre cycle de rendu, en supposant une implémentation classique des <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, ou les valeurs par défaut. Substitutions de <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> peut être approprié si votre <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implémentations ont été délibérément ou prennent en charge les mises à jour partielles, mais encore d’appliquer plus directement des modifications aux styles. (Les mises à jour partielles serait une tentative pour éviter plusieurs appels incrémentielle à <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> et <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> sur tous les éléments enfants).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Fournit des données sur l'événement.</param>
        <summary>Appelée chaque fois qu'un événement routé <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> non géré rencontre cette classe sur son itinéraire. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a aucune implémentation par défaut. Vous devez toujours appeler l’implémentation de base au cas où une classe intermédiaire dans l’héritage a implémenté cette méthode.  
  
 L’objectif de cette méthode est quelque peu similaire aux [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] du modèle d’événement sur * méthodes : il fournit les moyens de gérer l’événement correspondant à partir de classes dérivées avec un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés car l’événement routé peut avoir été déclenché par un élément enfant, et pas nécessairement l’élément qui appelle les gestionnaires, votre implémentation devez prendre source des arguments d’événement propriétés de compte (et ne doit pas essayer de redéclencher l’événement dans la plupart des cas). Les sous-classes de <xref:System.Windows.FrameworkElement> peut choisir d’appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire. Un scénario potentiel consiste à prendre les arguments de l’événement et à marquer délibérément l’événement comme géré.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Fournit des données sur l'événement.</param>
        <summary>Appelée chaque fois que l'événement routé <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> rencontre cette classe sur son itinéraire. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a aucune implémentation par défaut. Vous devez toujours appeler l’implémentation de base au cas où une classe intermédiaire dans l’héritage a implémenté cette méthode.  
  
 L’objectif de cette méthode est quelque peu similaire aux [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] du modèle d’événement sur * méthodes : il fournit les moyens de gérer l’événement correspondant à partir de classes dérivées avec un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés car l’événement routé peut avoir été déclenché par un élément enfant, et pas nécessairement l’élément qui appelle les gestionnaires, votre implémentation devez prendre source des arguments d’événement propriétés de compte (et ne doit pas essayer de redéclencher l’événement dans la plupart des cas). Les sous-classes de <xref:System.Windows.FrameworkElement> peut choisir d’appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire. Un scénario potentiel consiste à prendre les arguments de l’événement et à marquer délibérément l’événement comme géré pour raccourcir l’itinéraire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">Ancien élément parent. Peut avoir la valeur d'une <see langword="null" /> pour indiquer que l'élément n'avait pas de parent visuel auparavant.</param>
        <summary>Appelée en cas de modification du parent de cet élément dans l’arborescence visuelle. Substitue <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’arborescence d’éléments visuels peut être différente de l’arborescence logique, car elle omet les éléments qui ne rendent pas visuellement, tels que les collections et développe des éléments en fonction de la composition de leur thème et de style. Pour plus d’informations, consultez [Arborescences dans WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L’implémentation par défaut de cette méthode virtuelle des requêtes pour le nouveau parent, déclenche différents événements d’initialisation et définit des indicateurs internes à propos de l’état d’initialisation de la <see cref="T:System.Windows.FrameworkElement" /> selon le cas. Enfin, elle appelle les implémentations de base consécutives déclarée par <see cref="T:System.Windows.UIElement" />, qui appelle à son tour sa base dans <see cref="T:System.Windows.Media.Visual" />. Appelez toujours l’implémentation de base pour maintenir ce comportement, sinon le comportement d’arborescence élément pour cet élément lorsque déclaré en tant qu’enfant d’un autre élément peut-être pas comme prévu.  
  
 Existant quelques [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] classes substituer cette méthode, par exemple : <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />. Le scénario le plus courant est à appliquer que le nouveau parent doit être un type particulier. Cela peut également impliquer la levée d’une exception si le nouveau parent a échoué à un mode quelconque de test de type. Une version spécialisée de ce scénario existe dans les implémentations pour les éléments de liste et les éléments de menu, qui n’établissent pas de sens en dehors d’un parent visuel qui possède une collection appropriée pour les stocker. Notez que ces cas ne déclenchent pas nécessairement les exceptions, car il peut y avoir des scénarios de concepteur qui s’appuient sur la définition des éléments qui sont momentanément sans leurs parents « standard ».  
  
 Cette méthode est également substituée dans certains éléments qui sont en général l’élément racine, tel que <see cref="T:System.Windows.Window" />. Un autre cas serait les éléments qui sont l’élément racine apparent dans le balisage mais qui génèrent automatiquement une infrastructure supérieure dans une arborescence logique compilée (tel que <see cref="T:System.Windows.Controls.Page" />). Le <see cref="T:System.Windows.Window" /> et <see cref="T:System.Windows.Controls.Page" /> implémentations scellent délibérément la méthode.</para>
        </block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si cet élément incorpore des propriétés de style provenant de styles de thème.</summary>
        <value>
          <see langword="true" /> si cet élément n'utilise pas de propriétés du style de thème ; toutes les propriétés qui proviennent du style proviennent de styles d'application locaux, et les propriétés du style de thème ne s'appliquent pas. <see langword="false" /> si les styles d'application s'appliquent en premier, puis que les styles de thème s'appliquent aux propriétés qui n'ont pas été spécifiquement définies dans les styles d'application. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’utilisation la plus courante de cette propriété est une utilisation indirecte dans l’accesseur Set d’un style qui fournit un style à thème.  
  
> [!IMPORTANT]
>  Si vous définissez <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> à `true` sur un contrôle, vous supprimez le modèle de contrôle par défaut fourni par les styles de thème. Ce modèle de contrôle inclut en général le présentateur de contenu et d’autres éléments composés qui fournissent la base [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] fonctionnalité et visualisation pour le contrôle. Si vous souhaitez que le contrôle continue à prendre en charge les mêmes fonctionnalités que les styles de thème par défaut, vous devez fournir un autre style avec un modèle de contrôle qui reprend la même structure. Pour plus d’informations, consultez [Vue d’ensemble de la création de contrôles](~/docs/framework/wpf/controls/control-authoring-overview.md).  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l’élément parent logique de cet élément.</summary>
        <value>Parent logique de cet élément.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Parent%2A> peut être `null` dans les cas où un élément a été instancié, mais n’est pas attaché à une arborescence logique qui se connecte finalement à l’élément de niveau racine de page ou de l’objet application.  
  
 Notez que le parent logique d’un élément susceptible d’être modifié en fonction des fonctionnalités de votre application, et conserver la valeur de cette propriété ne reflétera pas cette modification. Vous devez en général obtenir la valeur immédiatement avant de vous en avez besoin.  
  
 Consultez [arborescences dans WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md) pour plus d’informations sur le parcours de l’arborescence logique et les scénarios où l’utilisation <xref:System.Windows.FrameworkElement.Parent%2A> comme une technique de l’élément parent de découverte est appropriée.  
  
 Le moteur de propriété recalculera potentiellement toutes les valeurs de propriété d’un élément lorsqu’il est apparenté à nouveau, car certaines propriétés héritent des valeurs dans l’arborescence logique. Le <xref:System.Windows.FrameworkElement.DataContext%2A> qui s’applique pour les liaisons peut également changer lorsque les éléments sont apparentés à nouveau.  
  
 La modification du parent d’un élément est faite en général uniquement via la manipulation de collections, à l’aide de dédié méthodes add ou remove, ou via la définition des propriétés de contenu d’éléments.  
  
 Le scénario le plus courant pour l’utilisation de la <xref:System.Windows.FrameworkElement.Parent%2A> propriété consiste à obtenir une référence, puis d’obtenir différentes <xref:System.Windows.FrameworkElement> les valeurs de propriété du parent. Pour les modèles, les <xref:System.Windows.FrameworkElement.Parent%2A> du modèle à long terme sera `null`. Pour franchir ce point et développer l’arborescence logique où le modèle est appliqué réellement, utilisez <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.  
  
 Notez que cette propriété ne signale pas de parents d’arborescence d’éléments visuels dans les cas où ceux-ci diffèrent des parents d’arborescence logique. Parents de l’arborescence d’éléments visuels ne sont pas importants en général pour les cas généraux de l’application mais peuvent être des éléments parent souhaité pour arriver au niveau visual. Consultez <xref:System.Windows.Media.VisualTreeHelper>.  
  
   
  
## Examples  
 L’exemple suivant montre le code qui vérifie le parent d’un élément et utilise ensuite les valeurs de propriété du parent pour définir les propriétés sur l’élément enfant pour faire correspondre. Dans ce cas, ce sont les propriétés qui affectent la taille de rendu.  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">Élément enfant qui signale la modification.</param>
        <summary>Prend en charge les implémentations de disposition incrémentielles dans les sous-classes spécialisées de <see cref="T:System.Windows.FrameworkElement" />. <see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> est appelé lorsqu'un élément enfant a invalidé une propriété qui est marquée dans les métadonnées comme influant sur les passes de mesure ou de réorganisation du parent pendant la phase de disposition.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cet élément a un élément enfant sur lequel une propriété quelconque a été invalidée et la propriété a été marquée comme <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> ou <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> dans les métadonnées de propriété lors de l’inscription, cette méthode est appelée. L’appel de méthode notifie l’élément parent quel élément enfant donné doit être mesuré de nouveau si cet élément prend en charge une mise à jour (incrémentielle) partielle de disposition.  
  
 Par défaut, <xref:System.Windows.FrameworkElement> ne prend pas en charge la disposition incrémentielle et dans la <xref:System.Windows.FrameworkElement> classe cette méthode n’a aucune implémentation par défaut. Le scénario où la substitution de cette méthode serait nécessaire n’est pas rare, car elle requiert que vous pouvez modifier le comportement par défaut du système de disposition.  
  
 Un exemple de scénario d’implémentation peut être une classe possédant des limitations de type pour les éventuels éléments enfants qui sont considérablement plus restrictifs que le système de mise en page de niveau infrastructure WPF. En raison de la nature de ces éléments personnalisés, les modifications de propriété peut être différées délibérément lorsque vous implémentez un comportement de disposition personnalisée. Par exemple, les substitutions de méthode de mesure/réorganisation, tentant d’optimiser l’élément enfant passe de rendu, peut être différées pour certains types de modifications qui pourraient en résulter habituellement dans une autre passe de disposition.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">La direction pour laquelle une future modification de focus doit être déterminée.</param>
        <summary>Détermine l'élément suivant qui recevrait le focus relatif à cet élément pour une direction du déplacement du focus fournie, mais ne déplace pas réellement le focus.</summary>
        <returns>L'élément suivant sur lequel se déplacerait le focus si le focus était parcouru réellement. Peut retourner <see langword="null" /> si le focus ne peut pas être déplacé par rapport à cet élément pour la direction fournie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.MoveFocus%2A> est la méthode connexe qui déplace réellement le focus.  
  
   
  
## Examples  
 L’exemple suivant implémente un gestionnaire qui gère plusieurs entrées possibles, chaque bouton représentant un éventuel <xref:System.Windows.Input.FocusNavigationDirection>. Le gestionnaire effectue le suivi de l’élément avec le focus clavier actuel et appelle <xref:System.Windows.FrameworkElement.PredictFocus%2A> sur cet élément et spécifie les <xref:System.Windows.Input.FocusNavigationDirection> en tant que l’initialisation pour le <xref:System.Windows.Input.TraversalRequest> fourni le paramètre de type. Au lieu de déplacer vers cet élément en tant que <xref:System.Windows.FrameworkElement.MoveFocus%2A> est nécessaire, le gestionnaire modifie les dimensions physiques de la destination prévue le focus à des fins de visualisation.  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Spécifié l'une des directions suivantes dans le <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />. Ces sens ne sont pas légaux pour <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (mais le sont pour <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Nom à utiliser pour le mappage nom-objet spécifié.</param>
        <param name="scopedElement">Objet pour le mappage.</param>
        <summary>Fournit un accesseur qui simplifie l'accès à la méthode d'inscription <see cref="T:System.Windows.NameScope" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est une méthode pratique pour appeler <xref:System.Windows.NameScope.RegisterName%2A>. L’implémentation vérifiera des éléments parents successifs jusqu'à ce qu’il trouve applicable <xref:System.Windows.NameScope> mise en œuvre, ce qui se trouve en recherchant un élément qui implémente <xref:System.Windows.Markup.INameScope>. Pour plus d’informations sur les portées de nom, consultez [portées de nom XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 Appel de <xref:System.Windows.FrameworkElement.RegisterName%2A> est nécessaire pour raccorder correctement des tables de montage séquentiel pour les applications lors de la création dans le code. C’est parce que la touche storyboard propriétés, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, utilise une recherche de nom de l’exécution au lieu d’être en mesure de prendre une référence à un élément cible. Cela est vrai même si cet élément est accessible par référence à partir du code. Pour plus d’informations sur la nécessité d’inscrire les noms pour les cibles de la table de montage séquentiel, consultez [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">Élément à supprimer.</param>
        <summary>Supprime l’objet fourni de l’arborescence logique de cet élément. <see cref="T:System.Windows.FrameworkElement" /> met à jour les pointeurs parents affectés dans l'arborescence logique pour qu'ils restent synchronisés après cette suppression.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour l’implémentation de collections sur les objets qui représentent les enfants logiques d’un élément. Cette opération peut être effectuée dans les accesseurs Get ou Set, gestionnaires de classe de `Changed` événements, constructeurs, ou dans la collection des types eux-mêmes.  
  
 Pour les auteurs de contrôle, la manipulation de l’arborescence logique à ce niveau n’est pas recommandée, sauf si aucun des modèles de contenu de la classe de contrôle de base fournis ne convient. Considérez le sous-classement au niveau de <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, et <xref:System.Windows.Controls.HeaderedItemsControl>. Ces classes fournissent un modèle de contenu d’application des enfants logiques via dédié [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], ainsi que la prise en charge d’autres fonctionnalités généralement souhaitables dans un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] contrôle telles que via des modèles de conception de styles.  
  
   
  
## Examples  
 L’exemple suivant implémente un `Child` propriété personnalisé <xref:System.Windows.FrameworkElement> qui effectue sa propre implémentation de couche visuelle. Méthode setter de la propriété est conçue afin que si la valeur change, l’ancienne valeur est supprimée à partir de l’arborescence logique, ainsi que d’une collection visuelle spécifique à la classe. Les valeurs sont mises en cache, puis la nouvelle valeur est ajoutée à l’arborescence logique au niveau standard du framework WPF et la collection visuelle personnalisée.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> est appelé sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement indique à un parent <xref:System.Windows.Controls.ScrollViewer> (ou classe dérivée) que l’élément qui déclenche le <xref:System.Windows.FrameworkElement.RequestBringIntoView> événement doit être rendu visible dans la zone déroulante. Le <xref:System.Windows.Controls.ScrollViewer> marquera le <xref:System.Windows.FrameworkElement.RequestBringIntoView> événement comme géré, à l’aide de la gestion de classe de l’événement. En général <xref:System.Windows.FrameworkElement.RequestBringIntoView> événement données ne doivent pas être marqué comme gérées par toute classe qui ne contrôle pas une zone de défilement, ou un gestionnaire d’instance, car cela entraînerait une interférence dans le but de l’élément qui a appelé <xref:System.Windows.FrameworkElement.BringIntoView%2A>.  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le dictionnaire de ressources défini localement.</summary>
        <value>Dictionnaire de ressources actif défini localement, où chaque ressource est accessible par clé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les dictionnaires de ressources qui peuvent être définis dans complètement ou partiellement [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] sont généralement créés en tant qu’élément de propriété et sont en général à l’élément racine pour toute page individuelle ou pour l’application. Placer le dictionnaire de ressources à ce niveau facilite la recherche d’éléments enfants individuels dans la page (ou à partir de n’importe quelle page, dans le cas d’application). Dans la plupart des scénarios d’application, nous recommandons que les styles être définis en tant qu’éléments de l’objet dans un dictionnaire de ressources, ou être défini en tant que ressources externes afin que la ressource de style entière peut être autonome (cette approche permet de concepteur distinct responsabilités du développeur en séparant les fichiers physiques qui doivent être modifiés).  
  
 Notez que cette propriété retourne uniquement le dictionnaire de ressources déclaré directement dans cet élément. Cela est différent de celui du processus de recherche de ressource réelle, où un élément enfant peut accéder à toutes les ressources définies dans chaque élément parent, la recherche de manière récursive vers le haut.  
  
 Ressources peuvent également être référencées par code à partir de la collection, mais sachez que les ressources créées dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] absolument pas seront accessibles tant que <xref:System.Windows.FrameworkElement.Loaded> est déclenché par l’élément qui déclare le dictionnaire. En fait, les ressources sont analysées de façon asynchrone et pas encore le <xref:System.Windows.FrameworkElement.Loaded> événement est l’assurance que vous pouvez référencer un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] défini par la ressource. C’est pourquoi vous devez généralement accéder uniquement aux [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] définies des ressources en tant que partie du code au moment de l’exécution, ou par le biais des autres [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] techniques telles que les styles ou les références d’extension de ressource pour les valeurs d’attribut. Lorsque vous accédez aux ressources via le code, il est fondamentalement équivalent à une référence effectuée depuis [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 Sous-jacent <xref:System.Windows.ResourceDictionary> prend en charge les méthodes requises pour ajouter, supprimer ou interroger les ressources à partir de la collection à l’aide de code. Le <xref:System.Windows.FrameworkElement.Resources%2A> propriété ne peut être définie pour prendre en charge le scénario du remplacement complet de la collection de ressources d’un élément à nouveau ou différent <xref:System.Windows.ResourceDictionary>.  
  
 Notez que la [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] indiqué ne comprend pas un élément pour le <xref:System.Windows.ResourceDictionary>. Il s’agit d’un exemple de syntaxe de collection implicite ; une balise qui représente l’élément de collection peut être omise. Les éléments sont ajoutés en tant qu’éléments à la collection sont spécifiés à la place. Pour plus d’informations sur les collections implicites et [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], consultez [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md). Un cas où un <xref:System.Windows.ResourceDictionary> est encore spécifié explicitement comme un élément est si vous introduisez un dictionnaire fusionné, auquel cas il n’existe généralement aucun élément enfant pour ce <xref:System.Windows.ResourceDictionary>. Pour plus d’informations, consultez [dictionnaires de ressources fusionnés](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *oneOrMoreResourceElements*  
 Un ou plusieurs éléments objet, chacun d’eux définit une ressource. Chaque élément de propriété de ressource au sein de chaque <xref:System.Windows.ResourceDictionary> doit avoir une valeur unique pour le [x : Key, Directive](~/docs/framework/xaml-services/x-key-directive.md), qui sert comme clé unique lorsque les valeurs sont récupérées à partir du <xref:System.Windows.ResourceDictionary>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Attache une liaison à cet élément pour la propriété de dépendance spécifiée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp">Identifie la propriété de destination où la liaison doit être établie.</param>
        <param name="path">Le nom de propriété source ou le chemin d'accès à la propriété utilisée pour la liaison.</param>
        <summary>Rattache une liaison à cet élément, selon le nom de propriété source fourni comme une qualification de chemin d'accès à la source de données.</summary>
        <returns>Enregistre les conditions de la liaison. Cette valeur de retour peut être utile pour la vérification des erreurs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est une méthode pratique pour appeler <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, qui passe l’instance actuelle comme le <xref:System.Windows.DependencyObject>et crée un nouveau <xref:System.Windows.Data.Binding> basée sur le `path` paramètre. Cette signature est plus commode lorsque vous établissez une liaison simple par défaut. Si vous devez spécifier des propriétés de liaison à des conditions non définies par défaut, ou à utiliser un <xref:System.Windows.Data.MultiBinding> ou <xref:System.Windows.Data.PriorityBinding>, vous devez utiliser le <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature.  
  
   
  
## Examples  
 L’exemple suivant définit une liaison à l’aide d’un chemin d’accès spécifique.  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp">Identifie la propriété où la liaison doit être établie.</param>
        <param name="binding">Représente les spécificités de la liaison de données.</param>
        <summary>Attache une liaison à cet élément selon l’objet de liaison fourni.</summary>
        <returns>Enregistre les conditions de la liaison. Cette valeur de retour peut être utile pour la vérification des erreurs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est une méthode pratique pour appeler <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, qui passe l’instance actuelle comme le <xref:System.Windows.DependencyObject>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element">Élément qui spécifie un sens de flux.</param>
        <param name="value">Valeur de l’énumération spécifiant le sens.</param>
        <summary>Définit la valeur de la propriété jointe <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> pour l’élément fourni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend en charge la syntaxe de propriété jointe pour la <xref:System.Windows.FrameworkElement.FlowDirection%2A> propriété, autorisant ainsi enfant des éléments d’un <xref:System.Windows.FrameworkElement> pour spécifier la direction de flux pour l’agencement dans leur élément parent. Pour définir la valeur active <xref:System.Windows.FrameworkElement>, utilisez directes [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accesseur <xref:System.Windows.FrameworkElement.FlowDirection%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">Propriété à laquelle la ressource est liée.</param>
        <param name="name">Nom de la ressource.</param>
        <summary>Recherche une ressource avec le nom spécifié et lui paramètre une référence à une ressource pour la propriété spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une référence de ressource est similaire à l’utilisation d’un [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) dans le balisage. La référence de ressource crée une expression interne qui fournit la valeur de la propriété spécifiée selon le moment de l’exécution différée. L’expression sera réévaluée chaque fois que le dictionnaire de ressources indique une valeur modifiée par le biais des événements internes, ou chaque fois que l’élément actuel est apparenté à nouveau (une modification parente modifierait le chemin d’accès de recherche de dictionnaire).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne si les processus de sérialisation doivent sérialiser le contenu de la propriété <see cref="P:System.Windows.FrameworkElement.Resources" />.</summary>
        <returns>
          <see langword="true" /> si la valeur de la propriété <see cref="P:System.Windows.FrameworkElement.Resources" /> doit être sérialisée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération retourne `true` tant qu’il existe au moins une ressource de clé dans l’ordinateur local <xref:System.Windows.FrameworkElement.Resources%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne si les processus de sérialisation doivent sérialiser le contenu de la propriété <see cref="P:System.Windows.FrameworkElement.Style" />.</summary>
        <returns>
          <see langword="true" /> si la valeur de la propriété <see cref="P:System.Windows.FrameworkElement.Style" /> doit être sérialisée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération retourne `true` si le <xref:System.Windows.Style> est défini localement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne si les processus de sérialisation doivent sérialiser le contenu de la propriété <see cref="P:System.Windows.FrameworkElement.Triggers" />.</summary>
        <returns>
          <see langword="true" /> si la valeur de la propriété <see cref="P:System.Windows.FrameworkElement.Triggers" /> doit être sérialisée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode retourne `true` si le <xref:System.Windows.FrameworkElement.Triggers%2A> propriété est définie localement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque les propriétés <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> ou <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> voient leur valeur se modifier sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les événements routés directs ne suivent pas d’itinéraire, ils sont gérés uniquement dans le même élément sur lequel ils sont déclenchés. Diriger les événements routés ne prennent pas en charge le comportement de l’événement routé : ils prennent en charge une collection de gestionnaires accessible et peut être utilisés comme un <xref:System.Windows.EventTrigger> dans un style.  
  
 Le système de disposition lit des propriétés dans la <xref:System.Windows.SizeChangedEventArgs> classe d’arguments de cet événement, afin de déterminer si les modifications de taille signalés doivent être considérés comme significatifs. Cela permet au système de disposition ou de ne pas forcer une modification de la disposition en raison de différences visuellement imperceptibles en hauteur ou largeur vos implémentations de mise en page spécifiques au contrôle. Les différences imperceptibles peut-être en raison de l’arrondi ou le même résultat des calculs d’un type de données à virgule flottante.  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.FrameworkElement.SizeChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d'informations sur l'inscription d'événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d'informations sur l'utilisation d'identificateurs d'événement routés afin d'ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur source change pour toute propriété liée à cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Data.Binding.SourceUpdated> événement est déclenché par tout <xref:System.Windows.Data.Binding> associé à cet élément.  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le style utilisé par cet élément quand il est rendu.</summary>
        <value>Style appliqué, non défini par défaut de l’élément, le cas échéant. Sinon, <see langword="null" />. La valeur par défaut pour <see cref="T:System.Windows.FrameworkElement" /> construit d'après les valeurs par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour les contrôles, le style actuel est souvent fourni par un style par défaut de thèmes de contrôle ou à partir de styles en général appliqué aux contrôles de ce type par les ressources au niveau de la page ou d’application (un style implicite). Cette propriété n’a pas défini ou retour par défaut les styles (thème), mais il retourne un style implicit ou un style explicite qui agit sur l’élément. Dans le cas de styles implicites ou explicites, peu importe si le style est spécifié en tant que ressource ou défini localement.  
  
 Définition des styles comporte certaines restrictions. Vous pouvez réinitialiser l’ensemble de <xref:System.Windows.FrameworkElement.Style%2A> propriété vers un nouveau <xref:System.Windows.Style> à tout moment, ce qui force une recomposition de disposition. Toutefois, dès que ce style est placé en cours d’utilisation par un élément chargé, le <xref:System.Windows.Style> doit être considérée comme sealed. Essayez d’apporter une modification d’une propriété individuelle d’un style en cours d’utilisation (tels que tous les éléments dans la collection de <xref:System.Windows.Style.Setters%2A>) provoque la levée d’une exception. Un style qui est défini dans le balisage est considéré comme en cours d’utilisation dès qu’il est chargé à partir d’un dictionnaire de ressources (pour les ressources), ou elle est contenue dans la page d’est chargée (pour les styles intraligne).  
  
 <xref:System.Windows.FrameworkElement.Style%2A> est une propriété de dépendance avec priorité spéciale. Définie localement style fonctionne généralement à la priorité la plus élevée dans le système de propriétés. Si le <xref:System.Windows.FrameworkElement.Style%2A> a la valeur null à ce stade, pendant le chargement, le système de propriétés vérifie les styles implicites dans les ressources locales ou d’application qui spécifient ce type. Si le style a toujours la valeur null après cette étape, puis le style d’agissant à des fins de présentation provient généralement du style par défaut (thème), mais le style par défaut n’est pas retourné dans la <xref:System.Windows.FrameworkElement.Style%2A> valeur de propriété. Consultez [valeur de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md) ou [styles et modèles](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *resourceExtension*  
 Une des valeurs suivantes :, ou. Consultez [ressources XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *styleResourceKey*  
 Clé qui identifie le style demandé. La clé fait référence à une ressource existante dans un <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  Syntaxe d’élément de propriété est techniquement possible, mais non recommandée pour la plupart des scénarios de style. Consultez [Inline Styles et modèles](~/docs/framework/wpf/advanced/inline-styles-and-templates.md). Une référence de liaison à l’aide ou <xref:System.Windows.Data.Binding> est également possible, mais rare.  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 L’exemple suivant définit un style dans un dictionnaire de ressources.  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.Style" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nom de la propriété ambiante demandée.</param>
        <summary>Pour obtenir une description de ce membre, consultez la méthode <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" />.</summary>
        <returns>
          <see langword="true" /> si <paramref name="propertyName" /> est disponible ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut uniquement être utilisé lorsque l'instance de <xref:System.Windows.FrameworkElement> est castée en interface <xref:System.Windows.Markup.IQueryAmbient>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur d’objet arbitraire utilisable pour stocker des informations personnalisées sur cet élément.</summary>
        <value>La valeur prévue. Cette propriété n’a aucune valeur par défaut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est analogue à des propriétés de la balise dans d’autres modèles de programmation de Microsoft, tel que Visual Basic pour Applications ou des Windows Forms. <xref:System.Windows.FrameworkElement.Tag%2A> vise à fournir un emplacement de propriété existant dans lequel vous pouvez stocker des informations personnalisées de base sur les <xref:System.Windows.FrameworkElement> sans avoir à la sous-classe d’un élément.  
  
 Étant donné que cette propriété prend un objet, vous devez utiliser l’utilisation des éléments de propriété afin de définir le <xref:System.Windows.FrameworkElement.Tag%2A> propriété en XAML à autre chose qu’un objet avec un convertisseur connu de type intégré, tel qu’une chaîne. Les objets utilisés de cette manière sont généralement pas dans les espaces de noms WPF standard et peuvent donc avoir besoin de mappage d’espace de noms à l’espace de noms externe afin d’être introduits comme éléments XAML. Pour plus d’informations, consultez [espaces de noms XAML et Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md) et [XAML et Classes personnalisées pour WPF](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md).  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.TagProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.Tag" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand la valeur cible change pour une liaison de propriété sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Data.Binding.TargetUpdated> événement est déclenché par tout <xref:System.Windows.Data.Binding> associé à cet élément. Cela signifie généralement que la liaison en question est une liaison bidirectionnelle, et que la propriété de dépendance liée affirme que la valeur de propriété précédente est désormais valide en fonction d’un schéma de mise en cache qui prennent en charge de la propriété ou la source de données ou de validation.  
  
 Utiliser les données d’événement de la <xref:System.Windows.FrameworkElement.TargetUpdated> événement pour déterminer la propriété spécifique qui signale la mise à jour de la valeur cible.  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une référence au modèle parent de cet élément. Cette propriété n’est pas pertinente si l’élément n’a pas été créé par l’intermédiaire d’un modèle.</summary>
        <value>L’élément dont <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> a provoqué cet élément doit être créé. Cette valeur est souvent <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> est fréquemment `null` pour les objets qui sont créés dans votre code ou le balisage de l’application. Il s’agit, car vous créez ces objets directement, non par l’intermédiaire d’un modèle. Références d’objet obtenues en parcourant l’arborescence logique à partir de la racine, ou par des références de nom par défaut, ne proviennent pas d’un modèle.  
  
 Les cas où <xref:System.Windows.FrameworkElement.TemplatedParent%2A> peut ne pas être `null` inclure des opérations telles que le test de positionnement, la gestion des événements pour certains événements d’entrée bas niveau, en parcourant l’arborescence d’éléments visuels avec <xref:System.Windows.Media.VisualTreeHelper>, ou utilisation d’énumérateurs, qui peut retourner des éléments à partir de modèles. Un autre cas consiste à appeler spécifiquement <xref:System.Windows.FrameworkTemplate.FindName%2A> contre un existant <xref:System.Windows.FrameworkTemplate> et de manipuler l’objet retourné.  
  
 Les modèles sont des objets réellement partagés, où le contenu du modèle est créé en une seule fois. Par conséquent, si vous obtenez une référence d’objet à un élément qui provenait d’un modèle, vous souhaiterez peut-être que l’arborescence logique apparente n’atteint pas à la racine de la page. Pour pouvoir vous connecter telle référence de modèle à l’arborescence logique de la page, vous devez obtenir le <xref:System.Windows.FrameworkElement.TemplatedParent%2A> valeur et continuer à parcourir cette arborescence d’éléments comme vous le souhaitez.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet d'info-bulle affiché pour cet élément dans le [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</summary>
        <value>L'objet d'info-bulle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la valeur de cette propriété est de type <xref:System.Windows.Controls.ToolTip>, cette valeur est l’info-bulle qui sera utilisé dans le [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].  Si la valeur est d’un autre type, cette valeur sera utilisée en tant que le *contenu* pour un <xref:System.Windows.Controls.ToolTip> fourni (construit) par le système. Pour plus d'informations, consultez <xref:System.Windows.Controls.ToolTipService>. La classe de service fournit des propriétés jointes qui peuvent être utilisées pour personnaliser davantage un <xref:System.Windows.Controls.ToolTip>.  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *toolTipContent*  
 Chaîne qui devienne le texte affiché pour le <xref:System.Windows.FrameworkElement.ToolTip%2A>.  
  
 *toolTipObjectContent*  
 Objet fourni dans le formulaire d’élément objet, qui doit être utilisé comme le contenu pour le <xref:System.Windows.FrameworkElement> . En règle générale, ceci serait un <xref:System.Windows.FrameworkElement> ou tout autre élément qui crée une composition de disposition pour le <xref:System.Windows.FrameworkElement.ToolTip%2A>, incluant le contenu de texte dans la composition. Dans ce cas, le <xref:System.Windows.Controls.ToolTip> élément est créé implicitement à partir d’analysé [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]et le *toolTipObjectContent* contenu est défini en tant que son <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> propriété.  
  
 <`ToolTip` .../>  
 Consultez <xref:System.Windows.Controls.ToolTip>.  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Controls.ToolTip> dans le code, puis définit la <xref:System.Windows.FrameworkElement.ToolTip%2A> propriété sur un <xref:System.Windows.Controls.Primitives.StatusBar> contrôle.  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit juste avant la fermeture d'une info-bulle sur l'élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Marquer le <xref:System.Windows.FrameworkElement.ToolTipClosing> événement comme géré n’annule pas la fermeture de l’info-bulle. Une fois l’info-bulle s’affiche, la fermeture de l’info-bulle est effectuée uniquement en réponse à une interaction utilisateur avec l’interface utilisateur.  
  
 Cet événement ne peut pas être un <xref:System.Windows.EventTrigger> dans un style. Il s’agit, car le champ d’identificateur de cet événement réutilise une implémentation d’un service qui n’expose pas de méthodes d’événement Ajout/suppression pour l’événement de niveau de service.  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   Substituer <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d'informations sur l'inscription d'événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d'informations sur l'utilisation d'identificateurs d'événement routés afin d'ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit à l’ouverture d’une info-bulle sur l’élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour empêcher une info-bulle dans l’interface utilisateur, votre gestionnaire pour <xref:System.Windows.FrameworkElement.ToolTipOpening> pouvez marquer le <xref:System.Windows.Controls.ToolTipEventArgs> les données d’événement gérées. Dans le cas contraire, l’info-bulle s’affiche, à l’aide de la valeur de la <xref:System.Windows.FrameworkElement.ToolTip%2A> propriété en tant que le contenu de l’info-bulle. Un autre scénario possible est que vous pouvez écrire un gestionnaire qui réinitialise la valeur de la <xref:System.Windows.FrameworkElement.ToolTip%2A> propriété pour l’élément qui est la source d’événements, juste avant que l’info-bulle s’affiche.  
  
 <xref:System.Windows.FrameworkElement.ToolTipOpening> n’est pas déclenché si la valeur de <xref:System.Windows.FrameworkElement.ToolTip%2A> est `null` ou non définie. Ne définissez pas délibérément <xref:System.Windows.FrameworkElement.ToolTip%2A> à `null` lors d’une info-bulle est ouverte ou ouvrant ; il n’aura pas l’effet de la fermeture de l’info-bulle et crée en fait un artefact visuel indésirable dans l’interface utilisateur.  
  
 Le <xref:System.Windows.FrameworkElement.ToolTipOpening> événement ne peut pas être un <xref:System.Windows.EventTrigger> dans un style. Il s’agit, car le champ d’identificateur de cet événement réutilise une implémentation d’un service qui n’expose pas de méthodes d’événement Ajout/suppression pour l’événement de niveau de service.  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   Substituer <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d'informations sur l'inscription d'événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d'informations sur l'utilisation d'identificateurs d'événement routés afin d'ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.ToolTip" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de déclencheurs établis directement sur cet élément ou dans les éléments enfants.</summary>
        <value>Collection fortement typée d'objets <see cref="T:System.Windows.Trigger" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Cette propriété peut uniquement être définie dans [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] via la syntaxe de collection indiquée, ou en accédant à l’objet de collection et en utilisant ses différentes méthodes telles que Add. La propriété pour accéder à l’objet collection lui-même est en lecture seule, la collection est en lecture-écriture. La propriété existe uniquement pour les éléments racine. tente de rechercher ou définir ailleurs entraîne la levée d’une exception.  
  
 Cette propriété ne vous autorise pas à examiner les déclencheurs qui existent dans le cadre des styles en cours d’utilisation sur cet élément. Il signale seulement la collection de déclencheurs ajoutés littéralement à la collection, soit dans le balisage ou de code. Éléments n’ont pas généralement existant par défaut de ces éléments (via un modèle pour l’instance) ; Il est plus courant pour les déclencheurs qui proviennent de composition de contrôle doit être établie dans les styles à la place.  
  
 En termes de comportement (et qui tentent d’établir quel effet provient de l’élément déclaré de le <xref:System.Windows.FrameworkElement.Triggers%2A> collection), la condition de déclenchement et l’effet du déclencheur peut être sur cet élément, ou sur ses éléments enfants dans l’arborescence logique. Notez que si vous utilisez des événements de durée de vie comme <xref:System.Windows.FrameworkElement.Loaded> pour obtenir cette collection, les déclencheurs de l’élément enfant peut ne pas encore être complètement chargés et la collection sera plus petite qu’il serait réellement en cours d’exécution.  
  
 Notez que la collection de déclencheurs établis sur un élément prend uniquement en charge <xref:System.Windows.EventTrigger>, pas les déclencheurs de propriété (<xref:System.Windows.Trigger>). Si vous avez besoin des déclencheurs de propriété, vous devez le placer dans un style ou un modèle et puis assigner ce style ou modèle soit à l’élément directement via le <xref:System.Windows.FrameworkElement.Style%2A> propriété, ou indirectement par le biais d’une référence de style implicite.  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *oneOrMoreTriggers*  
 Un ou plusieurs défini <xref:System.Windows.EventTrigger> éléments. Chaque déclencheur est censé contenir des références et les actions de l’animation valide. Notez que cette collection ne peut être établie sur l’élément racine d’une page. Pour plus d’informations, consultez [Vue d’ensemble des plans conceptuels](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">Identificateur de clé de la ressource à rechercher.</param>
        <summary>Recherche une ressource avec la clé spécifiée et retourne cette ressource si elle est trouvée.</summary>
        <returns>Ressource trouvée ou <see langword="null" /> si aucune ressource avec l'argument <paramref name="key" /> n'est trouvée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la ressource est introuvable sur l’élément appelant, l’arborescence de la ressource parente est recherchée en amont dans l’arborescence logique, de la même façon que l’arborescence serait recherchée si une ressource était demandée par clé au moment de l’exécution. La méthode retourne `null` uniquement si aucune ressource de cette clé existe n’importe où dans l’arborescence de la ressource, par les conditions existantes de l’arborescence au moment qui <xref:System.Windows.FrameworkElement.TryFindResource%2A> est appelée.  
  
 En général vous effectueriez un cast immédiatement la valeur de retour vers le type de la propriété que vous essayez de définir avec la valeur de la ressource retournée.  
  
 Le <xref:System.Windows.FrameworkElement.FindResource%2A> méthode a un comportement identique, sauf qu’elle lève une exception si aucune ressource avec la clé fournie a été retourné.  
  
   
  
## Examples  
 L’exemple suivant est implémenté comme un gestionnaire de bouton, où le bouton qui est cliqué définit son arrière-plan sur un pinceau défini par ressource obtenu en appelant <xref:System.Windows.FrameworkElement.TryFindResource%2A> sur lui-même. Parcourt l’arborescence d’éléments et recherche la ressource (la ressource elle-même est définie dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] et n’est pas affiché).  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'élément est supprimé d'une arborescence d'éléments chargés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les événements routés directs ne suivent pas d’itinéraire, ils sont gérés uniquement dans le même élément sur lequel ils sont déclenchés. Diriger les événements routés ne prennent pas en charge le comportement de l’événement routé : ils prennent en charge une collection de gestionnaires accessible et peut être utilisés comme un <xref:System.Windows.EventTrigger> dans un style.  
  
 <xref:System.Windows.FrameworkElement.Loaded> et <xref:System.Windows.FrameworkElement.Unloaded> peuvent tous deux être déclenchés sur des contrôles à la suite de modifications de thème système initiée par l’utilisateur. Une modification du thème entraîne une invalidation du modèle de contrôle et l’arborescence visuelle relation contenant-contenu, ce qui provoque l’ensemble du contrôle à décharger et recharger. Par conséquent, <xref:System.Windows.FrameworkElement.Unloaded> ne peut pas être supposé se produit uniquement lorsque la navigation en dehors de la page.  
  
 Notez que le <xref:System.Windows.FrameworkElement.Unloaded> événement n’est pas déclenché après le début d’une application d’arrêt. Arrêt de l’application se produit lorsque la condition définie par le <xref:System.Windows.Application.ShutdownMode%2A> propriété se produit. Si vous placez le code de nettoyage dans un gestionnaire pour le <xref:System.Windows.FrameworkElement.Unloaded> événement, comme pour un <xref:System.Windows.Window> ou un <xref:System.Windows.Controls.UserControl>, il peut ne pas être appelé comme prévu.  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.FrameworkElement.Unloaded" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d'informations sur l'inscription d'événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d'informations sur l'utilisation d'identificateurs d'événement routés afin d'ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de la paire nom-objet à supprimer de la portée actuelle.</param>
        <summary>Simplifie l'accès à la méthode de désinscription <see cref="T:System.Windows.NameScope" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez seulement désinscrire les noms si vous envisagez d’enregistrer à nouveau un autre élément avec ce même nom.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Réapplique le style par défaut au <see cref="T:System.Windows.FrameworkElement" /> actuel.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si l’arrondi pour la disposition doit être appliqué à la taille et la position de cet élément lors de la disposition.</summary>
        <value>
          <see langword="true" /> si l'arrondi de disposition est appliqué ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> propriété d’un élément est `true`, toutes les valeurs de pixels non intégrales qui sont calculées pendant la <xref:System.Windows.UIElement.Measure%2A> et <xref:System.Windows.UIElement.Arrange%2A> passes sont arrondies à des valeurs en pixels entières.  
  
 Cette propriété est héritée par les éléments enfants.  
  
> [!NOTE]
>  Vous devez définir <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> à `true` sur l’élément racine. Le système de disposition ajoute des coordonnées enfants aux coordonnées parent ; Par conséquent, si les coordonnées parents ne sont pas sur une limite de pixel, les coordonnées enfants sont également pas sur une limite de pixel. Si <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> ne peut pas être défini à la racine, définissez <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> sur l’enfant pour obtenir l’effet souhaité.  
  
 Dessiner des objets sur les limites en pixels élimine les bords semi transparents produits par l’anticrénelage lorsqu’un bord se situe au milieu d’un pixel de périphérique. L’illustration suivante montre la sortie d’une ligne unique de largeur des pixels qui se situe au milieu d’un pixel de périphérique. La ligne sur la gauche n’utilise pas l’arrondi de disposition et est non crénelé. La ligne sur la droite utilise l’arrondi de disposition.  
  
 ![Anti&#45;ligne possède un alias par rapport à la ligne d’un seul pixel. ] (~/add/media/pixelsnaplinecompare.PNG "Ligne non crénelé par rapport à la ligne d’un seul pixel.")  
  
 Lorsque vous utilisez l’arrondi de disposition et <xref:System.Windows.GridUnitType.Star> dimensionnement, le système de disposition crée de petites variations dans les mesures de colonne ou de ligne pour éviter le rendu de sous-pixel. Par exemple, si une grille a une largeur totale de 100 avec 3 colonnes de taille <xref:System.Windows.GridUnitType.Star>, au lieu de créer trois colonnes qui ont une largeur égale de 33,3, le système de disposition crée 2 colonnes avec une largeur de 33 et qui a une largeur de 34.  
  
> [!NOTE]
>  Dans le .NET 4.6 ont été modifiés pour réduire les instances de découpage dans les contrôles avec bordures d’arrondi de disposition. Par défaut, cette fonctionnalité est activée si votre version de Framework cible .NET Framework 4.6 ou ultérieure. Les applications qui ciblent des versions antérieures du framework peuvent adopter le nouveau comportement en ajoutant le paramètre suivant dans un fichier app.config : `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` le paramètre prend uniquement effet lors de l’application est en cours d’exécution sur le .NET Framework 4.6.  
  
   
  
## Examples  
 L’exemple suivant montre l’effet que la <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> a de propriété sur une ligne unique-largeur en pixels. La ligne sur la gauche n’utilise pas l’arrondi de disposition et la ligne sur la droite utilise l’arrondi de disposition. Si vous redimensionnez la fenêtre lentement, vous pouvez voir la différence qu’arrondi de disposition fait.  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les caractéristiques d’alignement vertical appliquées à cet élément quand il est composé dans un élément parent, par exemple un contrôle de type Panel ou d’éléments.</summary>
        <value>Paramètre d’alignement vertical. La valeur par défaut est <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque <xref:System.Windows.FrameworkElement.Height%2A> et <xref:System.Windows.FrameworkElement.Width%2A> propriétés sont définies explicitement sur un élément, ces dimensions prennent la priorité de disposition et annulent les effets normaux de la définition de cette propriété sur <xref:System.Windows.VerticalAlignment.Stretch>.  
  
 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> est le [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] accesseur de propriété pour ce qui est en réalité une propriété de dépendance. Cette propriété de dépendance particulière a assez souvent et sa valeur « par défaut » apparente défini différemment dans les classes d’éléments dérivés, en particulier les contrôles. Cela se produit généralement de deux manières : la propriété de dépendance est réinscrit à une classe dérivée particulière, mais avec des métadonnées différentes pour définir ses valeurs par défaut ; ou bien, il existe un style par défaut en cours d’application qui définit cette valeur de propriété de dépendance différemment. Par exemple, l’apparente » par défaut » <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> pour un <xref:System.Windows.Controls.ComboBoxItem> contrôle sera <xref:System.Windows.VerticalAlignment.Center>, même si <xref:System.Windows.Controls.ComboBoxItem> hérite <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> directement à partir de <xref:System.Windows.FrameworkElement>. C’est parce que cette valeur est réinitialisée dans le style par défaut de <xref:System.Windows.Controls.ComboBoxItem>, dans le modèle de contrôle du style.  
  
 <xref:System.Windows.Controls.Canvas> n’utilisez pas <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> lors de la composition de disposition, car <xref:System.Windows.Controls.Canvas> est basée sur un positionnement absolu.  
  
 Lors de l’héritage par <xref:System.Windows.Controls.ComboBoxItem> ou les classes dérivées, <xref:System.Windows.Controls.ComboBoxItem> redéfinit la valeur par défaut de cette propriété doit être <xref:System.Windows.VerticalAlignment.Center>.  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre d’éléments enfants visuels dans cet élément.</summary>
        <value>Nombre d’éléments enfants visuels pour cet élément.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.FrameworkElement> implémentation de <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> retourne toujours zéro ou un. Les classes qui gèrent une collection d’enfants visuels qui peut dépasser un doivent substituer cette propriété et <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 Cette propriété est généralement utilisée pour déterminer les limites supérieures de la collection d’enfants actuelle à des fins de mise en œuvre des substitutions de disposition (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).  
  
   
  
## Examples  
 L’exemple suivant montre comment un ornement personnalisé utilise les valeurs déclarées par un <xref:System.Windows.Media.VisualCollection> qu’il maintient pour ses divers éléments visuels enfants et signale ces valeurs à travers des substitutions de <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> et <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si votre classe prend en charge plusieurs enfants visuels dans une collection d’éléments enfants, substituez cette propriété pour retourner le nombre d’éléments de la collection. Vous devez le faire même si l’objet collection lui-même retourne un nombre. Logique de présentation d’élément au niveau de l’infrastructure WPF suppose que tous les éléments retournent un nombre valid via leurs <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> propriété.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la largeur de l'élément.</summary>
        <value>Largeur de l'élément, exprimée en [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. La valeur par défaut est <see cref="F:System.Double.NaN" />. Cette valeur doit être supérieure ou égale à 0.0. Consultez la section Notes pour plus d’informations sur la limite supérieure.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est une des trois propriétés sur <xref:System.Windows.FrameworkElement> qui spécifient des informations sur la largeur.  Les deux autres sont <xref:System.Windows.FrameworkElement.MinWidth%2A> et <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  S’il existe un conflit entre ces valeurs, l’ordre d’application pour la détermination de la largeur réelle est le premier <xref:System.Windows.FrameworkElement.MinWidth%2A> doit être pris en compte, puis <xref:System.Windows.FrameworkElement.MaxWidth%2A>et enfin si chacune d’elles est dans les limites, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 La valeur de retour de cette propriété est toujours la même que toute valeur qui lui est affectée. En revanche, la valeur de la <xref:System.Windows.FrameworkElement.ActualWidth%2A> peuvent varier. La disposition peut a rejeté la taille suggérée pour une raison quelconque. En outre, le système de disposition opère de manière asynchrone par rapport à l’ensemble du système de propriété de <xref:System.Windows.FrameworkElement.Width%2A> et ont ne peut-être pas traités autrement encore de modification de la propriété de dimensionnement en particulier.  
  
 En outre acceptables <xref:System.Double> valeurs, cette propriété peut également être <xref:System.Double.NaN?displayProperty=nameWithType>. Voici la façon dont vous spécifiez le comportement de dimensionnement automatique. Dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] la valeur de la chaîne « Automatique » (non respect de la casse) pour activer le comportement de dimensionnement automatique. Comportement de dimensionnement automatique implique que l’élément remplissent la largeur à sa disposition. Notez cependant que des contrôles spécifiques fournissent fréquemment des valeurs par défaut dans les styles par défaut qui désactive le comportement de dimensionnement sauf s’il est réactivé explicitement automatique.  
  
 Outre le contrôle de validation, il existe une valeur supérieure non déterministe pour <xref:System.Windows.FrameworkElement.Width%2A> qui est appliquée par le système de disposition (il s’agit d’un très grand nombre, supérieur à <xref:System.Single.MaxValue?displayProperty=nameWithType> mais inférieure à <xref:System.Double.MaxValue?displayProperty=nameWithType>). Si vous dépassez cette limite, l’élément n’est pas rendus, et aucune exception n’est levée. Ne définissez pas <xref:System.Windows.FrameworkElement.Width%2A> à une valeur qui est beaucoup plus important que la taille maximale de n’importe quel affichage visuel, ou peut dépasser cette limite supérieure non déterministe.  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object Width="double"/>  
- or –  
<object Width ="qualifiedDouble"/>  
- or -  
<object Width ="Auto"/>  
```  
  
<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *double*  
 <xref:System.Double>  
  
 Représentation de chaîne d’un <xref:System.Double> valeur égale ou supérieure à 0.0. Consultez la section Notes pour plus d’informations sur la limite supérieure. Cette valeur est interprétée comme un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] mesure. Chaînes n’incluent pas explicitement les décimales. Par exemple, la valeur `1` est acceptable.  
  
 *qualifiedDouble*  
 A *double* valeur telle que décrite ci-dessus, suivie d’une des chaînes de déclaration d’unité suivantes : `px`, `in`, `cm`, `pt`.  
  
 `px` (valeur par défaut) est [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pouces ; in 1 == 96px  
  
 `cm` centimètres ; 1cm==(96/2.54) px  
  
 `pt` correspond à points ; 1pt==(96/72) px  
  
 `Auto`  
 Active le comportement de redimensionnement automatique. Consultez la section Notes.  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.FrameworkElement.Width" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>