<Type Name="EventSetter" FullName="System.Windows.EventSetter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6f1abeae481be679a4c632b9e1b904e5a0a9369e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36460427" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventSetter : System.Windows.SetterBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSetter extends System.Windows.SetterBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventSetter" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSetter&#xA;Inherits SetterBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSetter : System::Windows::SetterBase" />
  <TypeSignature Language="F#" Value="type EventSetter = class&#xA;    inherit SetterBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.SetterBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente une méthode setter d’événement dans un style. Les méthodes setter d’événement appellent les gestionnaires d’événements spécifiés en réponse aux événements.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Méthodes setter d’événement appeler les gestionnaires d’événements spécifiés en réponse à des événements routés qui s’appliquent à tous les éléments qui font référence à la <xref:System.Windows.Style> plutôt que de vous obliger à attacher des gestionnaires d’instance à chaque élément individuel. Uniquement <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> prennent en charge <xref:System.Windows.EventSetter> objets.  
  
 Vous pouvez déclarer uniquement les méthodes setter d’événement pour les événements qui sont des événements routés. Vous pouvez déclarer des méthodes setter d’événement pour les événements routés avec une stratégie de routage direct, propagation d’événements ou les événements de tunneling.  
  
 Instances de la <xref:System.Windows.EventSetter> classe sont généralement créées via [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], comme un élément d’objet dans un style défini via [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. Un <xref:System.Windows.EventSetter> peut également être instancié à partir du code.  
  
 Méthodes setter d’événement ne peut pas être utilisé dans un style qui est contenu dans un dictionnaire de ressources de thème. Il s’agit, car un dictionnaire de ressources de thème au moment de l’exécution est souvent libre [!INCLUDE[TLA#tla_baml](~/includes/tlasharptla-baml-md.md)] de fichiers et n’a pas d’étendue définie dans lequel le code-behind qui définit les gestionnaires d’accompagnement peut exister.  
  
 Gestionnaires connectés via les méthodes setter d’événement sont appelés après les gestionnaires de classe pour un événement et également après les gestionnaires d’instance. Par conséquent, si un gestionnaire de classe ou instance marque un événement géré dans ses arguments, puis le gestionnaire déclaré par une méthode setter d’événement n'est pas appelé, à moins que la méthode setter d’événement définit spécifiquement <xref:System.Windows.EventSetter.HandledEventsToo%2A> `true`.  
  
 Méthodes setter d’événement peut-être également provenir <xref:System.Windows.Style.BasedOn%2A> styles. À partir du style spécifié en tant que gestionnaires d’événements setter <xref:System.Windows.Style.BasedOn%2A> sera appelé après les gestionnaires sur le style immédiat.  
  
 Notez que seul <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> prend en charge <xref:System.Windows.EventSetter> objets. Déclencheurs (<xref:System.Windows.TriggerBase> et les classes dérivées) ne prennent pas charge <xref:System.Windows.EventSetter>.  
  
   
  
## Examples  
 L’exemple suivant établit une seule <xref:System.Windows.EventSetter> dans un style de niveau page.  
  
 [!code-xaml[EventOvwSupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 L’exemple suivant présente des gestionnaires d’événements :  
  
 [!code-csharp[EventOvwSupport#EventSetterRef](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#eventsetterref)]
 [!code-vb[EventOvwSupport#EventSetterRef](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#eventsetterref)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.RoutedEventArgs.Handled" />
    <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.EventSetter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSetter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventSetter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSetter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.EventSetter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSetter (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventSetter.#ctor(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSetter(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Windows.EventSetter : System.Windows.RoutedEvent * Delegate -&gt; System.Windows.EventSetter" Usage="new System.Windows.EventSetter (routedEvent, handler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">L’événement routé particulier auquel <see cref="T:System.Windows.EventSetter" /> répond.</param>
        <param name="handler">Gestionnaire à assigner dans cette méthode setter.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.EventSetter" />, à l’aide des paramètres d’événement et de gestionnaire fournis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette signature est généralement utilisée si vous créez un <xref:System.Windows.EventSetter> dans le code ou dans le code-behind pour créer un <xref:System.Windows.EventSetter> qui augmente un style existant avant d’utiliser.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Event">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent Event { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent Event" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventSetter.Event" />
      <MemberSignature Language="VB.NET" Value="Public Property Event As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::RoutedEvent ^ Event { System::Windows::RoutedEvent ^ get(); void set(System::Windows::RoutedEvent ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Event : System.Windows.RoutedEvent with get, set" Usage="System.Windows.EventSetter.Event" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l’événement routé particulier auquel ce <see cref="T:System.Windows.EventSetter" /> répond.</summary>
        <value>Champ d’identificateur de l’événement routé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous ne pouvez pas définir cette propriété lorsque le style contenant le <xref:System.Windows.EventSetter> est en cours d’utilisation et donc sealed. Si vous définissez cette propriété dans le code et il est possible que le style est en cours d’utilisation, vérifiez la valeur de la <xref:System.Windows.SetterBase.IsSealed%2A> propriété sur le <xref:System.Windows.EventSetter> avant la tentative de définition de l’instance <xref:System.Windows.EventSetter.Event%2A>.  
  
   
  
## Examples  
 L’exemple suivant définit la <xref:System.Windows.EventSetter.Event%2A> propriété en tant que partie d’un <xref:System.Windows.EventSetter> dans un style de balisage.  
  
 [!code-xaml[EventOvwSupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Tentative de définition de cette propriété sur un <see cref="T:System.Windows.EventSetter" /> sealed.</exception>
        <altmember cref="P:System.Windows.RoutedEventArgs.Handled" />
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="HandledEventsToo">
      <MemberSignature Language="C#" Value="public bool HandledEventsToo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HandledEventsToo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventSetter.HandledEventsToo" />
      <MemberSignature Language="VB.NET" Value="Public Property HandledEventsToo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HandledEventsToo { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HandledEventsToo : bool with get, set" Usage="System.Windows.EventSetter.HandledEventsToo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine si le gestionnaire assigné à l'accesseur Set doit encore être appelé, même si l'événement est marqué comme géré dans ses données d'événement.</summary>
        <value>
          <see langword="true" /> si le gestionnaire doit encore être appelé ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Définition de la <xref:System.Windows.RoutedEventHandlerInfo.InvokeHandledEventsToo%2A> caractéristiques de comment appeler les gestionnaires d’un événement doivent toujours être effectuées dans le code, conformément au principe général qu’il n’existe aucun moyen de spécifier <xref:System.Windows.RoutedEventHandlerInfo.InvokeHandledEventsToo%2A> quand affectation défini des gestionnaires d’événements pour les instances directement aux événements nommés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] la syntaxe d’attribut. Bien que la définition de cette valeur [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ne génère pas de toutes les erreurs de compilation, résultant [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] génère une exception au moment de l’exécution lorsque le style est utilisé.  
  
<a name="xamlTextUsage_HandledEventsToo"></a>   
## <a name="xaml-text-usage"></a>Utilisation de texte XAML  
 Cette propriété ne doit pas être utilisée dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. Consultez la section Notes.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEventArgs.Handled" />
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Handler">
      <MemberSignature Language="C#" Value="public Delegate Handler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Delegate Handler" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventSetter.Handler" />
      <MemberSignature Language="VB.NET" Value="Public Property Handler As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Delegate ^ Handler { Delegate ^ get(); void set(Delegate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Handler : Delegate with get, set" Usage="System.Windows.EventSetter.Handler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.EventSetterHandlerConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la référence à un gestionnaire pour un événement routé dans l'accesseur Set.</summary>
        <value>Référence au gestionnaire attaché par le biais de <see cref="T:System.Windows.EventSetter" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant définit la <xref:System.Windows.EventSetter.Handler%2A> propriété en tant que partie d’un <xref:System.Windows.EventSetter> dans un style de balisage.  
  
 [!code-xaml[EventOvwSupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEvent.HandlerType" />
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
  </Members>
</Type>