<Type Name="Vector" FullName="System.Windows.Vector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd21ab42cdf030abfca2e25a6077e830e40a3b9c" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52353308" /></Metadata><TypeSignature Language="C#" Value="public struct Vector : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Vector extends System.ValueType implements class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Vector" />
  <TypeSignature Language="VB.NET" Value="Public Structure Vector&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Vector : IFormattable" />
  <TypeSignature Language="F#" Value="type Vector = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b9d9a-101">Représente un déplacement dans l’espace 2D.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-101">Represents a displacement in 2-D space.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9d9a-102">Un <xref:System.Windows.Point> représente une position fixe, mais un <xref:System.Windows.Vector> représente une direction et une grandeur (par exemple, rapidité ou acceleration).</span><span class="sxs-lookup"><span data-stu-id="b9d9a-102">A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration).</span></span> <span data-ttu-id="b9d9a-103">Par conséquent, les points de terminaison d’un segment de ligne sont des points, mais leur différence est un vecteur ; Autrement dit, la direction et la longueur de ce segment de ligne.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-103">Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.</span></span>  
  
 <span data-ttu-id="b9d9a-104">Dans XAML, le séparateur entre les <xref:System.Windows.Vector.X%2A> et <xref:System.Windows.Vector.Y%2A> valeurs d’un <xref:System.Windows.Vector> peut être une virgule ou un espace.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-104">In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space.</span></span>  
  
 <span data-ttu-id="b9d9a-105">Certaines cultures peuvent utiliser le caractère virgule comme séparateur décimal au lieu de la virgule.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-105">Some cultures might use the comma character as the decimal delimiter instead of the period character.</span></span> <span data-ttu-id="b9d9a-106">XAML de traitement pour la culture dite indifférente est en-US dans la plupart des implémentations de processeur XAML par défaut et attend le point comme séparateur décimal.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-106">XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter.</span></span> <span data-ttu-id="b9d9a-107">Évitez d’utiliser le caractère virgule comme séparateur décimal si vous spécifiez un <xref:System.Windows.Vector> dans XAML, car cela qui entrera en conflit avec la conversion de type chaîne d’un <xref:System.Windows.Vector> attribut la valeur dans le <xref:System.Windows.Vector.X%2A> et <xref:System.Windows.Vector.Y%2A> composants.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-107">You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.</span></span>  
  
<a name="xamlAttributeUsage_Vector"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="b9d9a-108">Utilisation d'attributs XAML</span><span class="sxs-lookup"><span data-stu-id="b9d9a-108">XAML Attribute Usage</span></span>  
  
```  
<object property="x,y"/>  
-or-  
<object property="x y"/>  
```  
  
<a name="xamlValues_Vector"></a>   
## <a name="xaml-values"></a><span data-ttu-id="b9d9a-109">Valeurs XAML</span><span class="sxs-lookup"><span data-stu-id="b9d9a-109">XAML Values</span></span>  
 <span data-ttu-id="b9d9a-110">*x*</span><span class="sxs-lookup"><span data-stu-id="b9d9a-110">*x*</span></span>  
 <span data-ttu-id="b9d9a-111">Le composant X du vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-111">The vector's X component.</span></span> <span data-ttu-id="b9d9a-112">Pour plus d'informations, consultez la propriété <xref:System.Windows.Vector.X%2A>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-112">For more information, see the <xref:System.Windows.Vector.X%2A> property.</span></span>  
  
 <span data-ttu-id="b9d9a-113">*y*</span><span class="sxs-lookup"><span data-stu-id="b9d9a-113">*y*</span></span>  
 <span data-ttu-id="b9d9a-114">Composant de Y du vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-114">The vector's Y component.</span></span> <span data-ttu-id="b9d9a-115">Pour plus d'informations, consultez la propriété <xref:System.Windows.Vector.Y%2A>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-115">For more information, see the <xref:System.Windows.Vector.Y%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9d9a-116">L’exemple suivant montre comment ajouter deux <xref:System.Windows.Vector> structures.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-116">The following example shows how to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorSample#10](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorSample/CSharp/Window1.xaml.cs#10)]
 [!code-vb[VectorSample#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorSample/visualbasic/window1.xaml.vb#10)]  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Windows.Vector.Add" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(double x, double y);" />
      <MemberSignature Language="F#" Value="new System.Windows.Vector : double * double -&gt; System.Windows.Vector" Usage="new System.Windows.Vector (x, y)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="b9d9a-117">Offset <see cref="P:System.Windows.Vector.X" /> du nouveau <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-117">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</span></span></param>
        <param name="y"><span data-ttu-id="b9d9a-118">Offset <see cref="P:System.Windows.Vector.Y" /> du nouveau <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-118">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</span></span></param>
        <summary><span data-ttu-id="b9d9a-119">Initialise une nouvelle instance de la structure <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-119">Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-120">L’exemple suivant montre comment créer deux vecteurs et les ajouter.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-120">The following example shows how to create two vectors and add them together.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b9d9a-121">Ajoute un vecteur à un point ou à un autre vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-121">Adds a vector to a point or to another vector.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Add(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Add(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member Add : System.Windows.Vector * System.Windows.Point -&gt; System.Windows.Point" Usage="System.Windows.Vector.Add (vector, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="b9d9a-122">Valeur de conversion du point spécifié.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-122">The amount to translate the specified point.</span></span></param>
        <param name="point"><span data-ttu-id="b9d9a-123">Point à translater.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-123">The point to translate.</span></span></param>
        <summary><span data-ttu-id="b9d9a-124">Convertit le point spécifié par le vecteur spécifié et retourne le point résultant.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-124">Translates the specified point by the specified vector and returns the resulting point.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-125">Résultat de la conversion de <paramref name="point" /> par <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-125">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-126">L’exemple suivant montre comment utiliser cette méthode pour ajouter un <xref:System.Windows.Point> structure un <xref:System.Windows.Vector> structure.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-126">The following example shows how to use this method to add a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddPointAndVectorExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addpointandvectorexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Add(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Add(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Add : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Add (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-127">Premier vecteur à additionner.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-127">The first vector to add.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-128">Deuxième vecteur à additionner.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-128">The second vector to add.</span></span></param>
        <summary><span data-ttu-id="b9d9a-129">Ajoute deux vecteurs et retourne le résultat sous forme de structure <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-129">Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-130">Somme de <paramref name="vector1" /> et <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-130">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-131">L’exemple suivant montre comment utiliser cette méthode pour ajouter deux <xref:System.Windows.Vector> structures.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-131">The following example shows how to use this method to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="AngleBetween">
      <MemberSignature Language="C#" Value="public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 AngleBetween(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AngleBetween (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double AngleBetween(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member AngleBetween : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.AngleBetween (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-132">Premier vecteur à évaluer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-132">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-133">Deuxième vecteur à évaluer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-133">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="b9d9a-134">Récupère l'angle, exprimé en degrés, entre les deux vecteurs spécifiés.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-134">Retrieves the angle, expressed in degrees, between the two specified vectors.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-135">Angle, en degrés, entre <paramref name="vector1" /> et <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-135">The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-136">L’exemple suivant montre comment utiliser cette méthode pour obtenir l’angle entre deux <xref:System.Windows.Vector> structures.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-136">The following example shows how to use this method to get the angle between two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AngleBetweenExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#anglebetweenexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CrossProduct(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrossProduct (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CrossProduct(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member CrossProduct : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.CrossProduct (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-137">Premier vecteur à évaluer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-137">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-138">Deuxième vecteur à évaluer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-138">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="b9d9a-139">Calcule le produit croisé de deux vecteurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-139">Calculates the cross product of two vectors.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-140">Produit croisé de <paramref name="vector1" /> et <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-140">The cross product of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span> <span data-ttu-id="b9d9a-141">La formule suivante est utilisée pour calculer le produit croisé :</span><span class="sxs-lookup"><span data-stu-id="b9d9a-141">The following formula is used to calculate the cross product:</span></span> 
 <span data-ttu-id="b9d9a-142"><c>(Vector1.X \* Vector2.Y) - (Vector1.Y \* Vector2.X)</c></span><span class="sxs-lookup"><span data-stu-id="b9d9a-142"><c>(Vector1.X \* Vector2.Y) - (Vector1.Y \* Vector2.X)</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-143">L’exemple suivant montre comment utiliser cette méthode pour calculer le produit croisé de deux <xref:System.Windows.Vector> structures.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-143">The following example shows how to use this method to calculate the cross product of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#CrossProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#crossproductexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Determinant">
      <MemberSignature Language="C#" Value="public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Determinant(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Determinant (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Determinant(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Determinant : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.Determinant (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-144">Premier vecteur à évaluer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-144">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-145">Deuxième vecteur à évaluer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-145">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="b9d9a-146">Calcule le déterminant de deux vecteurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-146">Calculates the determinant of two vectors.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-147">Déterminant de <paramref name="vector1" /> et <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-147">The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-148">L’exemple suivant montre comment calculer le déterminant de deux <xref:System.Windows.Vector> structures.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-148">The following example shows how to calculate the determinant of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DeterminantExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#determinantexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Divide(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Divide(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Divide (vector, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="b9d9a-149">Structure vectorielle à diviser.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-149">The vector structure to divide.</span></span></param>
        <param name="scalar"><span data-ttu-id="b9d9a-150">Valeur par laquelle <paramref name="vector" /> est divisé.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-150">The amount by which <paramref name="vector" /> is divided.</span></span></param>
        <summary><span data-ttu-id="b9d9a-151">Divise le vecteur spécifié par la scalaire indiquée et retourne le résultat sous forme de <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-151">Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-152">Résultat de la division de <paramref name="vector" /> par <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-152">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-153">L’exemple suivant montre comment utiliser cette méthode pour diviser un <xref:System.Windows.Vector> par une valeur scalaire.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-153">The following example shows how to use this method to divide a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DivideExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#divideexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b9d9a-154">Compare l'égalité de deux vecteurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-154">Compares two vectors for equality.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9d9a-155">Un vecteur <xref:System.Windows.Vector.X%2A> et <xref:System.Windows.Vector.Y%2A> propriétés sont décrites à l’aide de <xref:System.Double> valeurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-155">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="b9d9a-156">Étant donné que la valeur d’un <xref:System.Double> peuvent perdre en précision lorsque les opérations arithmétiques sont exécutées dessus, une comparaison entre deux <xref:System.Double> des structures qui sont logiquement égales peuvent échouer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-156">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="vector.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="b9d9a-157">Vecteur à comparer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-157">The vector to compare.</span></span></param>
        <summary><span data-ttu-id="b9d9a-158">Détermine si le <see cref="T:System.Object" /> spécifié est une structure <see cref="T:System.Windows.Vector" /> et, si c'est le cas, s'il a les mêmes valeurs <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" /> que ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-158">Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-159"><see langword="true" /> si <paramref name="o" /> est un <see cref="T:System.Windows.Vector" /> et a les mêmes valeurs <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" /> que ce vecteur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-159"><see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9d9a-160">Un vecteur <xref:System.Windows.Vector.X%2A> et <xref:System.Windows.Vector.Y%2A> propriétés sont décrites à l’aide de <xref:System.Double> valeurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-160">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="b9d9a-161">Étant donné que la valeur d’un <xref:System.Double> peuvent perdre en précision lorsque les opérations arithmétiques sont exécutées dessus, une comparaison entre deux <xref:System.Windows.Vector> des structures qui sont logiquement égales peuvent échouer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-161">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9d9a-162">L’exemple suivant montre comment utiliser cette méthode pour vérifier si un <xref:System.Windows.Vector> et un <xref:System.Object> sont égaux.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-162">The following example shows how to use this method to check whether a <xref:System.Windows.Vector> and an <xref:System.Object> are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Vector value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Vector value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Vector value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.Vector -&gt; bool" Usage="vector.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b9d9a-163">Vecteur à comparer à ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-163">The vector to compare with this vector.</span></span></param>
        <summary><span data-ttu-id="b9d9a-164">Compare l'égalité de deux vecteurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-164">Compares two vectors for equality.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-165"><see langword="true" /> si <paramref name="value" /> a les mêmes valeurs <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" /> que ce vecteur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-165"><see langword="true" /> if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9d9a-166">Un vecteur <xref:System.Windows.Vector.X%2A> et <xref:System.Windows.Vector.Y%2A> propriétés sont décrites à l’aide de <xref:System.Double> valeurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-166">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="b9d9a-167">Étant donné que la valeur d’un <xref:System.Double> peuvent perdre en précision lorsque les opérations arithmétiques sont exécutées dessus, une comparaison entre deux <xref:System.Windows.Vector> des structures qui sont logiquement égales peuvent échouer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-167">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9d9a-168">L’exemple suivant montre comment utiliser cette méthode pour vérifier si deux <xref:System.Windows.Vector> structures sont égales.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-168">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="System.Windows.Vector.Equals (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-169">Premier vecteur à comparer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-169">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-170">Deuxième vecteur à comparer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-170">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="b9d9a-171">Compare l'égalité de deux vecteurs spécifiés.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-171">Compares the two specified vectors for equality.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-172"><see langword="true" /> si les composants <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> et <paramref name="vector2" /> sont égaux ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-172"><see langword="true" /> if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9d9a-173">Un vecteur <xref:System.Windows.Vector.X%2A> et <xref:System.Windows.Vector.Y%2A> propriétés sont décrites à l’aide de <xref:System.Double> valeurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-173">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="b9d9a-174">Étant donné que la valeur d’un <xref:System.Double> peuvent perdre en précision lorsque les opérations arithmétiques sont exécutées dessus, une comparaison entre deux <xref:System.Double> des structures qui sont logiquement égales peuvent échouer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-174">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9d9a-175">L’exemple suivant montre comment utiliser cette méthode pour vérifier si deux <xref:System.Windows.Vector> structures sont égales.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-175">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="vector.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b9d9a-176">Retourne le code de hachage pour ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-176">Returns the hash code for this vector.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-177">Code de hachage de cette instance.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-177">The hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-178">L’exemple suivant montre comment obtenir le code de hachage d’un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-178">The following example shows how to get the hash code of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public double Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Length { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : double" Usage="System.Windows.Vector.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b9d9a-179">Obtient la longueur de ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-179">Gets the length of this vector.</span></span></summary>
        <value><span data-ttu-id="b9d9a-180">Longueur de ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-180">The length of this vector.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9d9a-181">La longueur d’un vecteur est parfois désignée comme la grandeur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-181">The length of a vector is sometimes referred to as the magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9d9a-182">L’exemple suivant montre comment utiliser de cette propriété pour obtenir la longueur d’un vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-182">The following example shows how use this property to get the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthexample)]
 [!code-vb[VectorExamples_snip#LengthExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LengthSquared">
      <MemberSignature Language="C#" Value="public double LengthSquared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LengthSquared" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.LengthSquared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LengthSquared As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LengthSquared { double get(); };" />
      <MemberSignature Language="F#" Value="member this.LengthSquared : double" Usage="System.Windows.Vector.LengthSquared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b9d9a-183">Obtient le carré de la longueur de ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-183">Gets the square of the length of this vector.</span></span></summary>
        <value><span data-ttu-id="b9d9a-184">Carré du <see cref="P:System.Windows.Vector.Length" /> de ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-184">The square of the <see cref="P:System.Windows.Vector.Length" /> of this vector.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9d9a-185">La longueur d’un vecteur est parfois appelée son amplitude.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-185">The length of a vector is sometimes referred to as its magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9d9a-186">L’exemple suivant montre comment utiliser cette propriété pour obtenir le carré de la longueur d’un vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-186">The following example shows how to use this property to get the square of the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthsquaredexample)]
 [!code-vb[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthsquaredexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b9d9a-187">Multiplie le vecteur spécifié par le <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" /> ou <see cref="T:System.Windows.Vector" /> spécifié et retourne le résultat sous forme de <see cref="T:System.Windows.Vector" /> ou <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-187">Multiplies the specified vector by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result as a <see cref="T:System.Windows.Vector" /> or <see cref="T:System.Double" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(double scalar, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member Multiply : double * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (scalar, vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar"><span data-ttu-id="b9d9a-188">Scalaire à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-188">The scalar to multiply.</span></span></param>
        <param name="vector"><span data-ttu-id="b9d9a-189">Vecteur à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-189">The vector to multiply.</span></span></param>
        <summary><span data-ttu-id="b9d9a-190">Multiplie la scalaire spécifiée par le vecteur indiqué et retourne le <see cref="T:System.Windows.Vector" /> résultant.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-190">Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-191">Résultat de la multiplication de <paramref name="scalar" /> par <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-191">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-192">L’exemple suivant montre comment utiliser cette méthode pour multiplier un scalaire par un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-192">The following example shows how to use this method to multiply a scalar by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (vector, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="b9d9a-193">Vecteur à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-193">The vector to multiply.</span></span></param>
        <param name="scalar"><span data-ttu-id="b9d9a-194">Scalaire à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-194">The scalar to multiply.</span></span></param>
        <summary><span data-ttu-id="b9d9a-195">Multiplie le vecteur spécifié par la scalaire indiquée et retourne le <see cref="T:System.Windows.Vector" /> résultant.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-195">Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-196">Résultat de la multiplication de <paramref name="vector" /> par <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-196">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-197">L’exemple suivant montre comment utiliser cette méthode pour multiplier un <xref:System.Windows.Vector> par une valeur scalaire.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-197">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * System.Windows.Media.Matrix -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (vector, matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="b9d9a-198">Structure vectorielle à transformer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-198">The vector structure to transform.</span></span></param>
        <param name="matrix"><span data-ttu-id="b9d9a-199">Transformation à appliquer au <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-199">The transformation to apply to <paramref name="vector" />.</span></span></param>
        <summary><span data-ttu-id="b9d9a-200">Transforme l'espace de coordonnées du vecteur spécifié à l'aide du <see cref="T:System.Windows.Media.Matrix" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-200">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-201">Résultat de la transformation de <paramref name="vector" /> par <paramref name="matrix" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-201">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-202">L’exemple suivant montre comment utiliser cette méthode pour multiplier un <xref:System.Windows.Vector> par un <xref:System.Windows.Media.Matrix>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-202">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Media.Matrix>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByMatrixExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbymatrixexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Multiply(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.Multiply (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-203">Premier vecteur à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-203">The first vector to multiply.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-204">Deuxième structure vectorielle à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-204">The second vector structure to multiply.</span></span></param>
        <summary><span data-ttu-id="b9d9a-205">Calcule le produit scalaire des deux vecteurs spécifiés et retourne le résultat sous forme de <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-205">Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-206"><see cref="T:System.Double" /> qui contient le produit scalaire de <paramref name="vector1" /> et de <paramref name="vector2" />, qui est calculé à l'aide de la formule suivante :</span><span class="sxs-lookup"><span data-stu-id="b9d9a-206">A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span></span> 
 <span data-ttu-id="b9d9a-207"><c>(vector1.X \* vector2.X) + (vector1.Y \* vector2.Y)</c></span><span class="sxs-lookup"><span data-stu-id="b9d9a-207"><c>(vector1.X \* vector2.X) + (vector1.Y \* vector2.Y)</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-208">L’exemple suivant montre comment utiliser cette méthode pour multiplier un <xref:System.Windows.Vector> par un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-208">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetDotProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#getdotproductexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public void Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Negate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Negate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Negate();" />
      <MemberSignature Language="F#" Value="member this.Negate : unit -&gt; unit" Usage="vector.Negate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b9d9a-209">Nie ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-209">Negates this vector.</span></span> <span data-ttu-id="b9d9a-210">Le vecteur conserve la même grandeur, mais avec une direction opposée.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-210">The vector has the same magnitude as before, but its direction is now opposite.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-211">L’exemple suivant montre comment utiliser cette méthode pour nier un vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-211">The following example shows how to use this method to negate a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NegateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#negateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public void Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Normalize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Normalize();" />
      <MemberSignature Language="F#" Value="member this.Normalize : unit -&gt; unit" Usage="vector.Normalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b9d9a-212">Normalise ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-212">Normalizes this vector.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9d9a-213">Un vecteur normalisé conserve sa direction, mais son <xref:System.Windows.Vector.Length%2A> devient 1.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-213">A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1.</span></span> <span data-ttu-id="b9d9a-214">Vecteur résultant est souvent appelé vecteur unitaire.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-214">The resulting vector is often called a unit vector.</span></span> <span data-ttu-id="b9d9a-215">Un vecteur est normalisé en divisant le vecteur par son propre <xref:System.Windows.Vector.Length%2A>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-215">A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9d9a-216">L’exemple suivant montre comment utiliser cette méthode pour normaliser un vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-216">The following example shows how to use this method to normalize a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NormalizeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#normalizeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b9d9a-217">Ajoute un vecteur à un point ou à un autre vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-217">Adds a vector to a point or to another vector.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point operator + (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Addition(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point operator +(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Windows.Vector * System.Windows.Point -&gt; System.Windows.Point" Usage="vector + point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="b9d9a-218">Vecteur utilisé pour convertir <paramref name="point" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-218">The vector used to translate <paramref name="point" />.</span></span></param>
        <param name="point"><span data-ttu-id="b9d9a-219">Point à translater.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-219">The point to translate.</span></span></param>
        <summary><span data-ttu-id="b9d9a-220">Convertit un point par le vecteur spécifié et retourne le point résultant.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-220">Translates a point by the specified vector and returns the resulting point.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-221">Résultat de la conversion de <paramref name="point" /> par <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-221">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-222">L’exemple suivant montre comment utiliser cet opérateur (+) pour convertir un <xref:System.Windows.Point> structure un <xref:System.Windows.Vector> structure.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-222">The following example shows how to use this operator (+) to translate a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator + (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Addition(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator +(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="vector1 + vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-223">Premier vecteur à additionner.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-223">The first vector to add.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-224">Deuxième vecteur à additionner.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-224">The second vector to add.</span></span></param>
        <summary><span data-ttu-id="b9d9a-225">Ajoute deux vecteurs et retourne le résultat sous forme de vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-225">Adds two vectors and returns the result as a vector.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-226">Somme de <paramref name="vector1" /> et <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-226">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-227">L’exemple suivant montre comment utiliser cet opérateur (+) pour ajouter deux <xref:System.Windows.Vector> structures et retournent un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-227">The following example shows how to use this operator (+) to add two <xref:System.Windows.Vector> structures and return a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator / (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Division(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator /(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="vector / scalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="b9d9a-228">Vecteur à diviser.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-228">The vector to divide.</span></span></param>
        <param name="scalar"><span data-ttu-id="b9d9a-229">Scalaire par laquelle <paramref name="vector" /> sera divisé.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-229">The scalar by which <paramref name="vector" /> will be divided.</span></span></param>
        <summary><span data-ttu-id="b9d9a-230">Divise le vecteur spécifié par la scalaire indiquée et retourne le vecteur résultant.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-230">Divides the specified vector by the specified scalar and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-231">Résultat de la division de <paramref name="vector" /> par <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-231">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-232">L’exemple suivant montre comment utiliser cet opérateur (/) pour diviser un <xref:System.Windows.Vector> structure par une valeur scalaire.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-232">The following example shows how to use this operator (/) to divide a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadeddivisionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadeddivisionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="vector1 = vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-233">Premier vecteur à comparer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-233">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-234">Deuxième vecteur à comparer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-234">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="b9d9a-235">Compare l'égalité de deux vecteurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-235">Compares two vectors for equality.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-236"><see langword="true" /> si les composants <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> et <paramref name="vector2" /> sont égaux ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-236"><see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9d9a-237">Un vecteur <xref:System.Windows.Vector.X%2A> et <xref:System.Windows.Vector.Y%2A> propriétés sont décrites à l’aide de <xref:System.Double> valeurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-237">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="b9d9a-238">Étant donné que la valeur d’un <xref:System.Double> peuvent perdre en précision lorsque les opérations arithmétiques sont exécutées dessus, une comparaison entre deux <xref:System.Windows.Vector> des structures qui sont logiquement égales peuvent échouer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-238">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9d9a-239">L’exemple suivant montre comment utiliser cet opérateur (==) pour vérifier si deux <xref:System.Windows.Vector> structures sont égales.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-239">The following example shows how to use this operator (==) to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b9d9a-240">Convertit un vecteur en <see cref="T:System.Windows.Size" /> ou en <see cref="T:System.Windows.Point" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-240">Converts a vector into a <see cref="T:System.Windows.Size" /> or a <see cref="T:System.Windows.Point" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Point (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Point(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Vector -&gt; System.Windows.Point" Usage="System.Windows.Vector.op_Explicit vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="b9d9a-241">Vecteur à convertir.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-241">The vector to convert.</span></span></param>
        <summary><span data-ttu-id="b9d9a-242">Crée un <see cref="T:System.Windows.Point" /> avec les valeurs <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" /> de ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-242">Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-243">Point avec des valeurs de coordonnées <see cref="P:System.Windows.Point.X" /> et <see cref="P:System.Windows.Point.Y" /> égales aux valeurs offset <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-243">A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-244">L’exemple suivant montre comment convertir un <xref:System.Windows.Vector> dans un <xref:System.Windows.Point>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-244">The following example shows how to convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Size (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Size op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Size(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Vector -&gt; System.Windows.Size" Usage="System.Windows.Vector.op_Explicit vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="b9d9a-245">Vecteur à convertir.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-245">The vector to convert.</span></span></param>
        <summary><span data-ttu-id="b9d9a-246">Crée un <see cref="T:System.Windows.Size" /> à partir des offsets de ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-246">Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-247">Un <see cref="T:System.Windows.Size" /> avec un <see cref="P:System.Windows.Size.Width" /> égal à la valeur absolue de la propriété <see cref="P:System.Windows.Vector.X" /> de ce vecteur et un <see cref="P:System.Windows.Size.Height" /> égal à la valeur absolue de la propriété <see cref="P:System.Windows.Vector.Y" /> de ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-247">A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-248">L’exemple suivant montre comment convertir explicitement un <xref:System.Windows.Vector> dans un <xref:System.Windows.Size>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-248">The following example shows how to explicitly convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Size>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="System.Windows.Vector.op_Inequality (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-249">Premier vecteur à comparer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-249">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-250">Deuxième vecteur à comparer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-250">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="b9d9a-251">Compare l'inégalité de deux vecteurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-251">Compares two vectors for inequality.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-252"><see langword="true" /> si les composants <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> et <paramref name="vector2" /> sont différents ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-252"><see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9d9a-253">Un vecteur <xref:System.Windows.Vector.X%2A> et <xref:System.Windows.Vector.Y%2A> propriétés sont décrites à l’aide de <xref:System.Double> valeurs.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-253">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="b9d9a-254">Étant donné que la valeur d’un <xref:System.Double> peuvent perdre en précision lorsque les opérations arithmétiques sont exécutées dessus, une comparaison entre deux <xref:System.Windows.Vector> des structures qui sont logiquement égales peuvent échouer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-254">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9d9a-255">L’exemple suivant montre comment utiliser cet opérateur ( ! =) pour vérifier si deux <xref:System.Windows.Vector> structures ne sont pas égales.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-255">The following example shows how to use this operator (!=) to check whether two <xref:System.Windows.Vector> structures are not equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b9d9a-256">Multiplie le <see cref="T:System.Windows.Vector" /> spécifié par le <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" /> ou <see cref="T:System.Windows.Vector" /> spécifié et retourne le résultat.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-256">Multiplies the specified <see cref="T:System.Windows.Vector" /> by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(double scalar, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( * ) : double * System.Windows.Vector -&gt; System.Windows.Vector" Usage="scalar * vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar"><span data-ttu-id="b9d9a-257">Scalaire à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-257">The scalar to multiply.</span></span></param>
        <param name="vector"><span data-ttu-id="b9d9a-258">Vecteur à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-258">The vector to multiply.</span></span></param>
        <summary><span data-ttu-id="b9d9a-259">Multiplie la scalaire spécifiée par le vecteur indiqué et retourne le vecteur résultant.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-259">Multiplies the specified scalar by the specified vector and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-260">Résultat de la multiplication de <paramref name="scalar" /> par <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-260">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-261">L’exemple suivant montre comment utiliser cet opérateur (\*) pour multiplier un scalaire par un <xref:System.Windows.Vector> structure.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-261">The following example shows how to use this operator (\*) to multiply a scalar by a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="vector * scalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="b9d9a-262">Vecteur à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-262">The vector to multiply.</span></span></param>
        <param name="scalar"><span data-ttu-id="b9d9a-263">Scalaire à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-263">The scalar to multiply.</span></span></param>
        <summary><span data-ttu-id="b9d9a-264">Multiplie le vecteur spécifié par la scalaire indiquée et retourne le vecteur résultant.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-264">Multiplies the specified vector by the specified scalar and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-265">Résultat de la multiplication de <paramref name="vector" /> par <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-265">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-266">L’exemple suivant montre comment utiliser cet opérateur (\*) pour multiplier une <xref:System.Windows.Vector> structure par une valeur scalaire.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-266">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * System.Windows.Media.Matrix -&gt; System.Windows.Vector" Usage="vector * matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="b9d9a-267">Vecteur à transformer.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-267">The vector to transform.</span></span></param>
        <param name="matrix"><span data-ttu-id="b9d9a-268">Transformation à appliquer au <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-268">The transformation to apply to <paramref name="vector" />.</span></span></param>
        <summary><span data-ttu-id="b9d9a-269">Transforme l'espace de coordonnées du vecteur spécifié à l'aide du <see cref="T:System.Windows.Media.Matrix" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-269">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-270">Résultat de la transformation de <paramref name="vector" /> par <paramref name="matrix" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-270">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-271">L’exemple suivant montre comment utiliser cet opérateur (\*) pour multiplier une <xref:System.Windows.Vector> structure par un <xref:System.Windows.Media.Matrix> structure.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-271">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Media.Matrix> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplyvectorbymatrixoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplyvectorbymatrixoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static double operator * (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double operator *(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="vector1 * vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-272">Premier vecteur à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-272">The first vector to multiply.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-273">Deuxième vecteur à multiplier.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-273">The second vector to multiply.</span></span></param>
        <summary><span data-ttu-id="b9d9a-274">Calcule le produit scalaire des deux structures vectorielles spécifiées et retourne le résultat sous forme de <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-274">Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-275">Retourne un <see cref="T:System.Double" /> qui contient le produit scalaire de <paramref name="vector1" /> et <paramref name="vector2" /> qui est calculé à l'aide de la formule suivante :</span><span class="sxs-lookup"><span data-stu-id="b9d9a-275">Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span></span> 
 <span data-ttu-id="b9d9a-276"><c>vector1.X \* vector2.X + vector1.Y \* vector2.Y</c></span><span class="sxs-lookup"><span data-stu-id="b9d9a-276"><c>vector1.X \* vector2.X + vector1.Y \* vector2.Y</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-277">L’exemple suivant montre comment utiliser cet opérateur (\*) pour multiplier une <xref:System.Windows.Vector> structure par un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-277">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedoperatorgetdotproductexample)]
 [!code-vb[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedoperatorgetdotproductexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Subtraction(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="vector1 - vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-278">Vecteur duquel <paramref name="vector2" /> est soustrait.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-278">The vector from which <paramref name="vector2" /> is subtracted.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-279">Vecteur à soustraire de <paramref name="vector1" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-279">The vector to subtract from <paramref name="vector1" />.</span></span></param>
        <summary><span data-ttu-id="b9d9a-280">Soustrait un vecteur spécifié d'un autre.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-280">Subtracts one specified vector from another.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-281">Différence entre <paramref name="vector1" /> et <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-281">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-282">L’exemple suivant montre comment utiliser cet opérateur (-) pour soustraire un <xref:System.Windows.Vector> structure à partir d’un <xref:System.Windows.Vector> structure.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-282">The following example shows how to use this operator (-) to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedsubtractionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedsubtractionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_UnaryNegation(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Windows.Vector -&gt; System.Windows.Vector" Usage="- vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="b9d9a-283">Vecteur dont le signe doit être inversé.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-283">The vector to negate.</span></span></param>
        <summary><span data-ttu-id="b9d9a-284">Inverse le signe du vecteur spécifié.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-284">Negates the specified vector.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-285">Vecteur avec des valeurs <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" />, opposées aux valeurs <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-285">A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-286">L’exemple suivant montre comment utiliser cet opérateur de négation pour nier un <xref:System.Windows.Vector> structure.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-286">The following example shows how to use this negation operator to negate a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadednegationoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadednegationoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Negate" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Parse(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Parse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b9d9a-287">Représentation sous forme de chaîne du vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-287">The string representation of the vector.</span></span></param>
        <summary><span data-ttu-id="b9d9a-288">Convertit une représentation sous forme de chaîne d'un vecteur en la structure <see cref="T:System.Windows.Vector" /> équivalente.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-288">Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-289">Structure <see cref="T:System.Windows.Vector" /> équivalente.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-289">The equivalent <see cref="T:System.Windows.Vector" /> structure.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-290">L’exemple suivant montre comment utiliser cette méthode pour convertir une représentation sous forme de chaîne d’un vecteur dans un <xref:System.Windows.Vector> structure.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-290">The following example shows how to use this method to convert a string representation of a vector into a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#parseexample)]
 [!code-vb[VectorExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Subtract(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Subtract(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Subtract (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="b9d9a-291">Vecteur duquel <paramref name="vector2" /> est soustrait.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-291">The vector from which <paramref name="vector2" /> is subtracted.</span></span></param>
        <param name="vector2"><span data-ttu-id="b9d9a-292">Vecteur à soustraire de <paramref name="vector1" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-292">The vector to subtract from <paramref name="vector1" />.</span></span></param>
        <summary><span data-ttu-id="b9d9a-293">Soustrait le vecteur spécifié d'un autre vecteur spécifié.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-293">Subtracts the specified vector from another specified vector.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-294">Différence entre <paramref name="vector1" /> et <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-294">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-295">L’exemple suivant montre comment utiliser cette méthode pour soustraire un <xref:System.Windows.Vector> structure à partir d’un <xref:System.Windows.Vector> structure.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-295">The following example shows how to use this method to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#SubtractExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#subtractexample)]
 [!code-vb[VectorExamples_snip#SubtractExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#subtractexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="b9d9a-296">Chaîne spécifiant le format à utiliser.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-296">The string specifying the format to use.</span></span>  
  
<span data-ttu-id="b9d9a-297">- ou -</span><span class="sxs-lookup"><span data-stu-id="b9d9a-297">-or-</span></span> 
 <span data-ttu-id="b9d9a-298"><see langword="null" /> pour utiliser le format par défaut défini pour le type de l'implémentation <see cref="T:System.IFormattable" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-298"><see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</span></span></param>
        <param name="provider"><span data-ttu-id="b9d9a-299"><see langword="IFormatProvider" /> à utiliser pour mettre en forme la valeur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-299">The <see langword="IFormatProvider" /> to use to format the value.</span></span>  
  
<span data-ttu-id="b9d9a-300">- ou -</span><span class="sxs-lookup"><span data-stu-id="b9d9a-300">-or-</span></span> 
 <span data-ttu-id="b9d9a-301"><see langword="null" /> pour obtenir les informations de mise en forme des nombres à partir des paramètres régionaux définis dans le système d'exploitation.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-301"><see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</span></span></param>
        <summary><span data-ttu-id="b9d9a-302">Ce membre prend en charge l’infrastructure [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] et n’est pas destiné à être directement utilisé à partir de votre code.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-302">This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="b9d9a-303">Pour obtenir une description de ce membre, consultez <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-303">For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-304">Chaîne contenant la valeur de l'instance actuelle au format spécifié.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-304">A string containing the value of the current instance in the specified format.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b9d9a-305">Retourne la représentation sous forme de chaîne de cette structure <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-305">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="vector.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b9d9a-306">Retourne la représentation sous forme de chaîne de cette structure <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-306">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-307">Chaîne qui représente les valeurs <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" /> de ce <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-307">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-308">L’exemple suivant montre comment utiliser cette méthode pour obtenir une représentation de chaîne d’un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-308">The following example shows how to use this method to get a string representation of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ToStringExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#tostringexample)]
 [!code-vb[VectorExamples_snip#ToStringExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#tostringexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="vector.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b9d9a-309">Informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-309">The culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b9d9a-310">Retourne la représentation sous forme de chaîne de cette structure <see cref="T:System.Windows.Vector" /> avec les informations de mise en forme spécifiées.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-310">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information.</span></span></summary>
        <returns><span data-ttu-id="b9d9a-311">Chaîne qui représente les valeurs <see cref="P:System.Windows.Vector.X" /> et <see cref="P:System.Windows.Vector.Y" /> de ce <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-311">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.X : double with get, set" Usage="System.Windows.Vector.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b9d9a-312">Obtient ou définit le composant <see cref="P:System.Windows.Vector.X" /> de ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-312">Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector.</span></span></summary>
        <value><span data-ttu-id="b9d9a-313">Composant <see cref="P:System.Windows.Vector.X" /> de ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-313">The <see cref="P:System.Windows.Vector.X" /> component of this vector.</span></span> <span data-ttu-id="b9d9a-314">La valeur par défaut est 0.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-314">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-315">L’exemple suivant montre comment vérifier deux <xref:System.Windows.Vector> structures sont égales.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-315">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Y : double with get, set" Usage="System.Windows.Vector.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b9d9a-316">Obtient ou définit le composant <see cref="P:System.Windows.Vector.Y" /> de ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-316">Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span></span></summary>
        <value><span data-ttu-id="b9d9a-317">Composant <see cref="P:System.Windows.Vector.Y" /> de ce vecteur.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-317">The <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span></span> <span data-ttu-id="b9d9a-318">La valeur par défaut est 0.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-318">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b9d9a-319">L’exemple suivant montre comment vérifier deux <xref:System.Windows.Vector> structures sont égales.</span><span class="sxs-lookup"><span data-stu-id="b9d9a-319">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.X" />
      </Docs>
    </Member>
  </Members>
</Type>