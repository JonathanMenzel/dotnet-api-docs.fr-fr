<Type Name="VisualState" FullName="System.Windows.VisualState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="028b84ccb16bb801d733d7684e85cd793fc21aec" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30678523" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class VisualState : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualState extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualState" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualState&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualState : System::Windows::DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Storyboard")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente l'apparence visuelle du contrôle quand il est dans un état spécifique.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.VisualState> spécifie comment le contrôle se présente lorsqu’il est dans un certain état. Par exemple, lorsqu’un <xref:System.Windows.Controls.Button> est activé, sa bordure peut être une couleur différente de celle normal.  Le <xref:System.Windows.VisualState> classe a un <xref:System.Windows.VisualState.Storyboard%2A> propriété qui modifie l’apparence du contrôle. Lorsque le contrôle passe à l’état spécifié par le <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> propriété, le <xref:System.Windows.VisualState.Storyboard%2A> commence. Lorsque le contrôle quitte l’état, le <xref:System.Windows.VisualState.Storyboard%2A> s’arrête.  
  
 Le <xref:System.Windows.VisualStateGroup.States%2A?displayProperty=nameWithType> propriété contient <xref:System.Windows.VisualState> objets. <xref:System.Windows.VisualStateGroup> les objets sont ajoutés à la <xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType> propriété attachée, qui est définie sur la sur un <xref:System.Windows.FrameworkElement>. Vous pouvez ajouter <xref:System.Windows.VisualState> objets aux <xref:System.Windows.FrameworkElement>, mais ils ne sont généralement sont utilisés dans un <xref:System.Windows.Controls.ControlTemplate> d’un <xref:System.Windows.Controls.Control>. Pour plus d’informations sur la création d’un <xref:System.Windows.Controls.ControlTemplate> et <xref:System.Windows.VisualState> objets pour les contrôles existants, consultez [personnalisation de l’apparence d’un contrôle existant en créant un ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md). Pour obtenir un exemple d’utilisation de <xref:System.Windows.VisualState> objets en dehors d’un <xref:System.Windows.Controls.ControlTemplate>, consultez la <xref:System.Windows.VisualStateManager> classe.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.VisualStateGroup> dans les <xref:System.Windows.Controls.ControlTemplate> d’un <xref:System.Windows.Controls.Button> appelé `CommonStates` et ajoute <xref:System.Windows.VisualState> objets pour les États, `Normal`, `Pressed`, et `MouseOver`. Le <xref:System.Windows.Controls.Button> définit également un état appelé `Disabled` qui se trouve dans le `CommonStates` <xref:System.Windows.VisualStateGroup>, mais l’exemple omet par souci de concision. Pour l’exemple complet, consultez [personnalisation de l’apparence d’un contrôle existant en créant un ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualState.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualState();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.VisualState" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de l'objet <see cref="T:System.Windows.VisualState" />.</summary>
        <value>Nom du <see cref="T:System.Windows.VisualState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous spécifiez l’état visuel suivant un élément doit entrer en passant le <xref:System.Windows.VisualState.Name%2A> de la <xref:System.Windows.VisualState> à la <xref:System.Windows.VisualStateManager>.  
  
 Lorsqu’un <xref:System.Windows.Controls.Control> utilise le <xref:System.Windows.VisualStateManager> dans un <xref:System.Windows.Controls.ControlTemplate>, l’auteur du contrôle doit spécifier les <xref:System.Windows.VisualState> objets le contrôle s’attend à trouver dans son <xref:System.Windows.Controls.ControlTemplate> en plaçant le <xref:System.Windows.TemplateVisualStateAttribute> sur sa signature de classe. <xref:System.Windows.Controls.ControlTemplate> les auteurs de définissent de nouveaux <xref:System.Windows.VisualState> objets et ensemble la <xref:System.Windows.VisualState.Name%2A> valeur à la propriété spécifiée par le <xref:System.Windows.TemplateVisualStateAttribute.Name%2A?displayProperty=nameWithType> propriété.  
  
 Pour rechercher les noms des états visuels pour les contrôles qui sont inclus avec [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], consultez [contrôle Styles et modèles](~/docs/framework/wpf/controls/control-styles-and-templates.md). Pour plus d’informations sur la création d’un <xref:System.Windows.Controls.ControlTemplate> et <xref:System.Windows.VisualState> objets pour les contrôles existants, consultez [personnalisation de l’apparence d’un contrôle existant en créant un ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.VisualStateGroup> dans les <xref:System.Windows.Controls.ControlTemplate> d’un <xref:System.Windows.Controls.Button> appelé `CommonStates` et ajoute <xref:System.Windows.VisualState> objets pour les États, `Normal`, `Pressed`, et `MouseOver`. Le <xref:System.Windows.Controls.Button> définit également un état appelé `Disabled` qui se trouve dans le `CommonStates` <xref:System.Windows.VisualStateGroup>, mais l’exemple omet par souci de concision. Pour l’exemple complet, consultez [personnalisation de l’apparence d’un contrôle existant en créant un ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Storyboard">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Storyboard Storyboard { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Storyboard Storyboard" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Storyboard" />
      <MemberSignature Language="VB.NET" Value="Public Property Storyboard As Storyboard" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Storyboard ^ Storyboard { System::Windows::Media::Animation::Storyboard ^ get(); void set(System::Windows::Media::Animation::Storyboard ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Storyboard</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un <see cref="T:System.Windows.Media.Animation.Storyboard" /> qui définit l'apparence du contrôle lorsqu'il se trouve dans l'état représenté par le <see cref="T:System.Windows.VisualState" />.</summary>
        <value>Storyboard qui définit l'apparence du contrôle lorsqu'il se trouve dans l'état représenté par le <see cref="T:System.Windows.VisualState" />. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le contrôle passe à l’état spécifié par le <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> propriété, le <xref:System.Windows.VisualState.Storyboard%2A> commence. Lorsque le contrôle quitte l’état, le <xref:System.Windows.VisualState.Storyboard%2A> s’arrête.  
  
   
  
## Examples  
 L’exemple suivant crée un simple <xref:System.Windows.Controls.ControlTemplate> pour un <xref:System.Windows.Controls.Button> qui contient un <xref:System.Windows.Controls.Grid>.  Le <xref:System.Windows.VisualState> appelé `MouseOver` possède un Storyboard qui modifie la couleur de la <xref:System.Windows.Controls.Grid> du vert au rouge lorsque l’utilisateur place la souris sur le <xref:System.Windows.Controls.Button>.  Le <xref:System.Windows.VisualState> appelé `Normal` est incluse afin que lorsque l’utilisateur déplace la souris hors du bouton, le <xref:System.Windows.Controls.Grid> retourne en vert.  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>