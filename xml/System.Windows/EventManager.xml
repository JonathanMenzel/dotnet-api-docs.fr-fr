<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c07ba11c7438326eddb5331a443033c7ee73acb9" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39844481" /></Metadata><TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des méthodes utilitaires liées aux événements qui inscrivent les événements routés pour les propriétaires de classe et ajoutent des gestionnaires de classe.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette classe est couramment utilisée pour inscrire un nouvel événement routé, avec <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  
  
 Le deuxième plus courantes [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] utilisation est <xref:System.Windows.EventManager.RegisterClassHandler%2A>. Cette méthode vous permet d’activer la gestion de classe d’un événement routé sur la classe ou un événement attaché. Pour plus d’informations, consultez [marquage des événements routés comme gérés et gestion de classe](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette classe pour inscrire un nouvel événement routé comme un membre de classe, ainsi que de la technique de « wrapper » d’événement routé de substitution de l’ajouter et supprimer des implémentations pour un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement.  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne des identificateurs pour des événements routés qui ont été enregistrés sur le système d'événements.</summary>
        <returns>Tableau de type <see cref="T:System.Windows.RoutedEvent" /> qui contient les objets enregistrés.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Plus <xref:System.Windows.RoutedEvent> objets peuvent être enregistrés ultérieurement. Cette méthode obtient une capture instantanée et la collection d’événements routés est accessible en écriture tout au long de durée de vie d’une application. La collection retournée peut être assez volumineuse. Seulement avec les événements qui font partie de la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], le décompte de collections est centaines.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">Type avec lequel démarrer la recherche. Les classes de base sont incluses dans la recherche.</param>
        <summary>Recherche tous les identificateurs d'événement routé pour des événements qui sont enregistrés avec le type de propriétaire fourni.</summary>
        <returns>Tableau d'identificateurs d'événement routé correspondants si une correspondance est trouvée ; sinon, <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Enregistre un gestionnaire de classe pour un événement routé particulier.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">Type de la classe qui déclare la gestion de classe.</param>
        <param name="routedEvent">Identificateur d'événement routé de l'événement à gérer.</param>
        <param name="handler">Référence à l'implémentation du gestionnaire de classe.</param>
        <summary>Enregistre un gestionnaire de classe pour un événement routé particulier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestion de classe est une fonctionnalité qui est disponible pour les événements routés, y compris les événements attachés qui sont implémentés avec la sauvegarde d’événement routé. Un gestionnaire de classe ressemble à un gestionnaire statique qui existe pour toutes les instances de la classe. Étant donné que le gestionnaire est statique, vous ne pouvez pas modifier les propriétés d’instance directement avec un gestionnaire de classe, mais vous pouvez accéder aux instances via le `sender` paramètre et/ou les données d’événement.  
  
 Gestionnaires de classe sont appelés avant les gestionnaires d’instance. Vous pouvez implémenter un gestionnaire de classe qui a le comportement de marquer l’événement comme géré. Par conséquent, les gestionnaires d’instance pour un événement géré à la classe ne sont pas appelés à moins que les gestionnaires d’instance inscrire spécifiquement pour les événements gérés.  
  
 Un grand nombre de la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] les événements d’élément de base fournissent des méthodes virtuelles de gestion de classe. En substituant ces méthodes dans les classes qui héritent des classes de base, vous pouvez implémenter la gestion de classe sans appeler <xref:System.Windows.EventManager.RegisterClassHandler%2A> dans les constructeurs statiques. En règle générale, ces méthodes de gestion de classe existent pour les événements d’entrée et ont des noms qui commencent par « On » et se terminent par le nom de l’événement de classe.  
  
 Pour plus d’informations sur la gestion de classe, consultez [marquage des événements routés comme gérés et gestion de classe](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 À l’aide de cette signature, les gestionnaires de classe seront inscrit pour appeler uniquement en réponse aux événements non gérés. Vous pouvez également inscrire des gestionnaires de classe à appeler même si les arguments d’événement sont marqué comme gérés, à l’aide de la <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature, avec `handledEventsToo` défini sur `true`.  
  
   
  
## Examples  
 L’exemple suivant ajoute un gestionnaire pour <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, l’appel <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">Type de la classe qui déclare la gestion de classe.</param>
        <param name="routedEvent">Identificateur d'événement routé de l'événement à gérer.</param>
        <param name="handler">Référence à l'implémentation du gestionnaire de classe.</param>
        <param name="handledEventsToo"><see langword="true" /> pour appeler ce gestionnaire de classe même si les arguments de l'événement routé ont été marqués comme gérés ; <see langword="false" /> pour conserver le comportement par défaut qui consiste à ne pas appeler le gestionnaire sur tout événement marqué géré.</param>
        <summary>Enregistre un gestionnaire de classe pour un événement routé particulier, avec la possibilité de gérer des événements dans lesquels les données d'événement sont déjà marquées gérées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestion de classe est une fonctionnalité qui est disponible pour les événements routés, y compris les événements attachés qui sont implémentés avec la sauvegarde d’événement routé. Un gestionnaire de classe ressemble à un gestionnaire statique qui existe pour toutes les instances de la classe. Étant donné que le gestionnaire est statique, vous ne pouvez pas modifier les propriétés d’instance directement avec un gestionnaire de classe, mais vous pouvez accéder aux instances via le `sender` paramètre et/ou les données d’événement.  
  
 Gestionnaires de classe sont appelés avant les gestionnaires d’instance. Vous pouvez implémenter un gestionnaire de classe qui a le comportement de marquer l’événement comme géré. Par conséquent, les gestionnaires d’instance pour un événement géré à la classe ne sont pas appelés à moins que les gestionnaires d’instance inscrire spécifiquement pour les événements gérés.  
  
 Un grand nombre de la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] les événements d’élément de base fournissent des méthodes virtuelles de gestion de classe. En substituant ces méthodes dans les classes qui héritent des classes de base, vous pouvez implémenter la gestion de classe sans appeler <xref:System.Windows.EventManager.RegisterClassHandler%2A> dans les constructeurs statiques. En règle générale, ces méthodes de gestion de classe existent pour les événements d’entrée et ont des noms qui commencent par « On » et se terminent par le nom de l’événement de classe.  
  
 Pour plus d’informations sur la gestion de classe, consultez [marquage des événements routés comme gérés et gestion de classe](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 À l’aide de cette signature, les gestionnaires de classe peuvent être enregistrés pour appeler des événements gérés, en définissant `handledEventsToo` défini sur `true`. En règle générale, vous devez le faire uniquement s’il existe un problème de gestion connu que vous voulez contourner, tels que système d’entrée gestion à partir d’événements de souris ou le clavier.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Nom de l’événement routé. Le nom doit être unique dans le type de propriétaire et ne peut pas être <see langword="null" /> ou une chaîne vide.</param>
        <param name="routingStrategy">Stratégie de routage de l’événement en tant que valeur de l’énumération.</param>
        <param name="handlerType">Type du gestionnaire d’événements. Il doit être du type délégué et ne peut pas être <see langword="null" />.</param>
        <param name="ownerType">Le type de classe propriétaire de l’événement routé. Il ne peut pas s'agir de la valeur <see langword="null" />.</param>
        <summary>Inscrit un nouvel événement routé avec le système d’événements [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <returns>Identificateur de l’événement routé qui vient d’être inscrit. Cet objet d’identificateur peut maintenant être stocké en tant que champ statique dans une classe, puis utilisé en tant que paramètre pour les méthodes qui attachent des gestionnaires à l’événement. L'identificateur d'événement routé est également utilisé pour d'autres systèmes d'événements [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de retour de cette méthode permet de créer la déclaration statique pour un unique <xref:System.Windows.RoutedEvent> champ d’identificateur. Ce champ doit être stocké dans le type de propriétaire.  
  
 Il existe un nombre considérable de conventions et meilleures pratiques associés aux événements routés comment doivent être nommés, inscrit et exposées dans une classe. Pour plus d’informations, consultez [vue d’ensemble des événements routés](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>