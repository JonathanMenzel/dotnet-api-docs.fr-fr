<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1c50a8a6bf5de1650ec4db222d0e7fe52ea28ad" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57915449" /></Metadata><TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="385c7-101">Représente un objet qui participe au système de propriétés de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-101">Represents an object that participates in the dependency property system.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-102">Le <xref:System.Windows.DependencyObject> classe active [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] services de système de propriétés sur ses nombreuses classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="385c7-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="385c7-103">Fonction principale du système de propriétés consiste à calculer les valeurs des propriétés et pour fournir une notification système sur les valeurs qui ont été modifiés.</span><span class="sxs-lookup"><span data-stu-id="385c7-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="385c7-104">Une autre classe clé qui est inclus dans le système de propriétés est <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="385c7-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="385c7-105"><xref:System.Windows.DependencyProperty> Active l’inscription de propriétés de dépendance dans le système de propriétés et fournit des informations d’identification et sur chaque propriété de dépendance, tandis que <xref:System.Windows.DependencyObject> comme une classe de base permet aux objets d’utiliser les propriétés de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="385c7-106"><xref:System.Windows.DependencyObject> services et les caractéristiques suivantes :</span><span class="sxs-lookup"><span data-stu-id="385c7-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="385c7-107">Prise en charge l’hébergement de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-107">Dependency property hosting support.</span></span> <span data-ttu-id="385c7-108">Vous inscrivez une propriété de dépendance en appelant le <xref:System.Windows.DependencyProperty.Register%2A> (méthode) et en stockant la valeur de retour de la méthode comme un champ statique public dans votre classe.</span><span class="sxs-lookup"><span data-stu-id="385c7-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="385c7-109">Prise en charge de l’hébergement de la propriété jointe.</span><span class="sxs-lookup"><span data-stu-id="385c7-109">Attached property hosting support.</span></span> <span data-ttu-id="385c7-110">Vous inscrivez une propriété jointe en appelant le <xref:System.Windows.DependencyProperty.RegisterAttached%2A> (méthode) et en stockant la valeur de retour de la méthode comme un champ statique public en lecture seule dans votre classe.</span><span class="sxs-lookup"><span data-stu-id="385c7-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="385c7-111">(Il existe également des spécifications de membre supplémentaires ; Notez que cela représente un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] implémentation spécifique pour les propriétés jointes.</span><span class="sxs-lookup"><span data-stu-id="385c7-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="385c7-112">Pour plus d’informations, consultez [vue d’ensemble des propriétés jointes](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Votre propriété jointe peut ensuite être définie sur n’importe quelle classe qui dérive de <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="385c7-112">For details, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="385c7-113">Get, set et supprimez des méthodes utilitaires pour les valeurs de toutes les propriétés de dépendance qui existent sur le <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="385c7-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="385c7-114">Métadonnées, forcer la prise en charge de la valeur, la notification de modification de propriété et les rappels de remplacement pour les propriétés de dépendance ou des propriétés jointes.</span><span class="sxs-lookup"><span data-stu-id="385c7-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="385c7-115">En outre, la <xref:System.Windows.DependencyObject> classe facilite les métadonnées de propriété par propriétaire pour une propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="385c7-116">Une classe de base commune pour les classes dérivées de <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, ou <xref:System.Windows.Media.Visual>.</span><span class="sxs-lookup"><span data-stu-id="385c7-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="385c7-117">(<xref:System.Windows.UIElement>, une autre classe d’élément de base, a une hiérarchie de classes qui inclut <xref:System.Windows.Media.Visual>.)</span><span class="sxs-lookup"><span data-stu-id="385c7-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="385c7-118">L’exemple suivant dérive <xref:System.Windows.DependencyObject> pour créer une classe abstraite.</span><span class="sxs-lookup"><span data-stu-id="385c7-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="385c7-119">Ensuite, la classe inscrit une propriété jointe et inclut la prise en charge des membres de cette propriété jointe.</span><span class="sxs-lookup"><span data-stu-id="385c7-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="385c7-120">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="385c7-121">Efface la valeur locale d’une propriété.</span><span class="sxs-lookup"><span data-stu-id="385c7-121">Clears the local value of a property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="385c7-122">Propriété de dépendance à effacer, identifiée par une référence d’objet <see cref="T:System.Windows.DependencyProperty" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span></span></param>
        <summary><span data-ttu-id="385c7-123">Efface la valeur locale d’une propriété.</span><span class="sxs-lookup"><span data-stu-id="385c7-123">Clears the local value of a property.</span></span> <span data-ttu-id="385c7-124">La propriété à effacer est spécifiée par un identificateur <see cref="T:System.Windows.DependencyProperty" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-125">Effacement de la valeur de propriété en appelant <xref:System.Windows.DependencyObject.ClearValue%2A> ne donne pas nécessairement une propriété de dépendance la valeur par défaut qui est spécifiée dans les métadonnées de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="385c7-126">Désactivez la propriété uniquement spécifiquement efface toute valeur de proximité ont pu être appliqué.</span><span class="sxs-lookup"><span data-stu-id="385c7-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="385c7-127">Pour plus d’informations, consultez [Priorité de la valeur de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="385c7-127">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="385c7-128">L’exemple suivant itère toutes les propriétés qui ont des valeurs locales définies sur un objet, puis appelle <xref:System.Windows.DependencyObject.ClearValue%2A> pour effacer les valeurs de chacune de ces propriétés.</span><span class="sxs-lookup"><span data-stu-id="385c7-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="385c7-129">Tentative d’appel à <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> sur un <see cref="T:System.Windows.DependencyObject" /> sealed.</span><span class="sxs-lookup"><span data-stu-id="385c7-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="385c7-130">Clé de la propriété de dépendance à effacer.</span><span class="sxs-lookup"><span data-stu-id="385c7-130">The key for the dependency property to be cleared.</span></span></param>
        <summary><span data-ttu-id="385c7-131">Efface la valeur locale d’une propriété en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="385c7-131">Clears the local value of a read-only property.</span></span> <span data-ttu-id="385c7-132">La propriété à effacer est spécifiée par <see cref="T:System.Windows.DependencyPropertyKey" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-133">Un <xref:System.Windows.DependencyPropertyKey> identifie une propriété de dépendance en lecture seule pour les opérations de système de propriétés.</span><span class="sxs-lookup"><span data-stu-id="385c7-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="385c7-134">Les classes qui définissent les propriétés de dépendance en lecture seule ne doivent pas exposer cette clé avec un accès public.</span><span class="sxs-lookup"><span data-stu-id="385c7-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="385c7-135">Une clé exposée publiquement fournirait une voie d’accès de code publique qui inverser le caractère en lecture seule de la propriété, si des méthodes telles que <xref:System.Windows.DependencyObject.ClearValue%2A> ou <xref:System.Windows.DependencyObject.SetValue%2A> peut être appelée en dehors de la classe ou d’un assembly, en référençant la clé.</span><span class="sxs-lookup"><span data-stu-id="385c7-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="385c7-136">Effacement de la valeur de propriété en appelant <xref:System.Windows.DependencyObject.ClearValue%2A> ne donne pas nécessairement une propriété de dépendance la valeur par défaut qui est spécifiée dans les métadonnées de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="385c7-137">Effacement de la valeur uniquement spécifiquement efface toute valeur de proximité ont pu être appliqué.</span><span class="sxs-lookup"><span data-stu-id="385c7-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="385c7-138">Pour plus d’informations, consultez [Priorité de la valeur de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="385c7-138">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="385c7-139">Tentative d’appel à <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> sur un <see cref="T:System.Windows.DependencyObject" /> sealed.</span><span class="sxs-lookup"><span data-stu-id="385c7-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="385c7-140">Identificateur de la propriété de dépendance à forcer.</span><span class="sxs-lookup"><span data-stu-id="385c7-140">The identifier for the dependency property to coerce.</span></span></param>
        <summary><span data-ttu-id="385c7-141">Convertit la valeur de la propriété de dépendance spécifiée.</span><span class="sxs-lookup"><span data-stu-id="385c7-141">Coerces the value of the specified dependency property.</span></span> <span data-ttu-id="385c7-142">Pour cela, on appelle toute fonction <see cref="T:System.Windows.CoerceValueCallback" /> spécifiée dans les métadonnées de propriété pour la propriété de dépendance telle qu’elle existe sur le <see cref="T:System.Windows.DependencyObject" /> appelant.</span><span class="sxs-lookup"><span data-stu-id="385c7-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-143">En plus d’être appelé explicitement via l’appel <xref:System.Windows.DependencyObject.CoerceValue%2A>, le <xref:System.Windows.CoerceValueCallback> pour une dépendance de la propriété est également appelée en interne chaque fois que la valeur de propriété de dépendance est réévaluée par le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] système de propriétés.</span><span class="sxs-lookup"><span data-stu-id="385c7-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="385c7-144">Lorsque vous appelez le <xref:System.Windows.DependencyObject.CoerceValue%2A> (méthode), vous appelez finalement le rappel de forçage de valeur pour la propriété que vous spécifiez.</span><span class="sxs-lookup"><span data-stu-id="385c7-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="385c7-145">En règle générale, vous appellerez <xref:System.Windows.DependencyObject.CoerceValue%2A> uniquement si vous savez qu’un rappel de valeur forcée existe, et si vous connaissez les critères du rappel pour la contrainte.</span><span class="sxs-lookup"><span data-stu-id="385c7-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="385c7-146">Le scénario le plus courant d’appeler <xref:System.Windows.DependencyObject.CoerceValue%2A> se trouve dans la classe manipulation ou propriété les rappels de modification des propriétés connexes qui influencent les valeurs entre eux de façon dépendante.</span><span class="sxs-lookup"><span data-stu-id="385c7-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="385c7-147">Pour plus d’informations, consultez [Validation et rappels de propriétés de dépendance](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="385c7-147">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="385c7-148">L’exemple suivant appelle <xref:System.Windows.DependencyObject.CoerceValue%2A> au sein d’un <xref:System.Windows.PropertyChangedCallback> implémentation qui est utilisée comme le <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> un différentes propriétés de dépendance sur la même classe.</span><span class="sxs-lookup"><span data-stu-id="385c7-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="385c7-149">Il s’agit d’un modèle courant pour introduire des dépendances de la valeur true entre les propriétés de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="385c7-150">Le <paramref name="dp" /> spécifié ou sa valeur n’est pas valide ou n’existe pas.</span><span class="sxs-lookup"><span data-stu-id="385c7-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span></span></exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="385c7-151">Obtient le <see cref="T:System.Windows.DependencyObjectType" /> qui encapsule le type [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] de cette instance.</span><span class="sxs-lookup"><span data-stu-id="385c7-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></summary>
        <value><span data-ttu-id="385c7-152">Un <see cref="T:System.Windows.DependencyObjectType" /> qui encapsule le type [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] de cette instance.</span><span class="sxs-lookup"><span data-stu-id="385c7-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-153">Cette propriété est utile si un objet qui est retourné à partir d’une méthode a un type de valeur de retour de <xref:System.Windows.DependencyObject> et que vous souhaitez effectuer des opérations de système de propriétés spécifiques dessus selon son type.</span><span class="sxs-lookup"><span data-stu-id="385c7-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="385c7-154">Par exemple, il est plus efficace d’appeler <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> à l’aide de la <xref:System.Windows.DependencyObjectType> plutôt que [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span><span class="sxs-lookup"><span data-stu-id="385c7-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="385c7-155"><xref:System.Windows.DependencyObjectType> facilite la recherche plus rapide.</span><span class="sxs-lookup"><span data-stu-id="385c7-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="385c7-156">Dans l’exemple de pseudo-code suivant, `MySubClass` anticipe que les classes dérivées supplémentaires peuvent modifier la valeur par défaut de la `MyCustom` propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="385c7-157">La classe implémente un constructeur par défaut qui peut déterminer la classe dérivée réelle en tirant parti du polymorphisme la <xref:System.Windows.DependencyObjectType> valeur chaque fois que ce constructeur est utilisé comme instanciateur de classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="385c7-157">The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="385c7-158"><see cref="T:System.Windows.DependencyObject" /> à comparer à l'instance en cours.</span><span class="sxs-lookup"><span data-stu-id="385c7-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span></span></param>
        <summary><span data-ttu-id="385c7-159">Détermine si un <see cref="T:System.Windows.DependencyObject" /> fourni est équivalent au <see cref="T:System.Windows.DependencyObject" /> réel.</span><span class="sxs-lookup"><span data-stu-id="385c7-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="385c7-160"><see langword="true" /> si les deux instances sont identiques ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-160"><see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-161">Cette implémentation est une égalité de référence uniquement et n’essaie pas d’évaluer l’égalité des valeurs des propriétés de relation contenant-contenues.</span><span class="sxs-lookup"><span data-stu-id="385c7-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="385c7-162">
            <see cref="T:System.Windows.DependencyObject" /> substitue et puis scelle deux basic <see cref="T:System.Object" /> méthodes : <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> et <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-162">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="385c7-163">L’appel de remplacements le <see cref="T:System.Object" /> implémentations, ce qui entraîne un comportement de l’égalité d’objet.</span><span class="sxs-lookup"><span data-stu-id="385c7-163">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="385c7-164">L’objectif de ces substitutions délibérées consiste à empêcher les classes dérivées d’essayer de définir une égalité de valeur pour un <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-164">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="385c7-165">Égalités de valeur pour <see cref="T:System.Windows.DependencyObject" /> ne seront jamais exactes en raison des capacités de modification de valeur de propriété intégrée dès le départ d’un <see cref="T:System.Windows.DependencyObject" /> et ses propriétés de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-165">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="385c7-166">Cela inclut les fondamentaux [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] fonctionnalités telles que la liaison de données et la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] système de propriétés.</span><span class="sxs-lookup"><span data-stu-id="385c7-166">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="385c7-167">Obtient un code de hachage pour ce <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-167">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="385c7-168">Code de hachage d'un entier signé 32 bits.</span><span class="sxs-lookup"><span data-stu-id="385c7-168">A signed 32-bit integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="385c7-169">
            <see cref="T:System.Windows.DependencyObject" /> substitue et puis scelle deux <see cref="T:System.Object" /> méthodes : <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> et <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-169">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="385c7-170">L’appel de remplacements le <see cref="T:System.Object" /> implémentations, ce qui entraîne un comportement de l’égalité d’objet.</span><span class="sxs-lookup"><span data-stu-id="385c7-170">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="385c7-171">L’objectif de ces substitutions délibérées consiste à empêcher les classes dérivées d’essayer de définir une égalité de valeur pour un <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-171">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="385c7-172">Égalités de valeur pour <see cref="T:System.Windows.DependencyObject" /> ne seront jamais exactes en raison des capacités de modification de valeur de propriété intégrée dès le départ d’un <see cref="T:System.Windows.DependencyObject" /> et ses propriétés de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-172">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="385c7-173">Cela inclut les fondamentaux [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] fonctionnalités telles que la liaison de données et la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] système de propriétés.</span><span class="sxs-lookup"><span data-stu-id="385c7-173">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="385c7-174">Crée un énumérateur spécialisé pour déterminer quelles propriétés de dépendance ont des valeurs définies localement sur ce <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-174">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="385c7-175">Un énumérateur de valeur de proximité spécialisé.</span><span class="sxs-lookup"><span data-stu-id="385c7-175">A specialized local value enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-176">Un *valeur locale* est toute valeur de propriété de dépendance qui a été défini par <xref:System.Windows.DependencyObject.SetValue%2A>, contrairement à d’autres aspects du système de propriétés.</span><span class="sxs-lookup"><span data-stu-id="385c7-176">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="385c7-177">Le <xref:System.Windows.LocalValueEnumerator> obtenu en appelant <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> peut être utilisé pour énumérer les propriétés qui ont un définie localement valeur sur un <xref:System.Windows.DependencyObject> instance.</span><span class="sxs-lookup"><span data-stu-id="385c7-177">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="385c7-178">Chacune de ces propriétés est représentée dans l’énumérateur par un <xref:System.Windows.LocalValueEntry> object, qui a des propriétés qui référencent les spécifiques <xref:System.Windows.DependencyProperty> et ses valeurs.</span><span class="sxs-lookup"><span data-stu-id="385c7-178">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="385c7-179">Cette technique d’énumération sur définie localement valeurs peuvent être utilisées pour l’optimisation ou pour une autre gestion de valeurs de proximité, comme pour déterminer quelles valeurs de propriété d’un <xref:System.Windows.DependencyObject> pourrait être modifié si elles ont été effacées.</span><span class="sxs-lookup"><span data-stu-id="385c7-179">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="385c7-180">Retourné <xref:System.Windows.LocalValueEnumerator> peut contenir <xref:System.Windows.LocalValueEntry> enregistrements pour les propriétés de dépendance qui sont en lecture seule, ou les propriétés de dépendance où les valeurs sont calculées par le système de propriétés.</span><span class="sxs-lookup"><span data-stu-id="385c7-180">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="385c7-181">Par exemple, un élément d’infrastructure visuel qui a une largeur établie via la mise en page signalera une valeur locale pour <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span><span class="sxs-lookup"><span data-stu-id="385c7-181">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="385c7-182">Si vous obtenez des valeurs locales pour les réinitialiser, vérifiez la <xref:System.Windows.DependencyProperty.ReadOnly%2A> valeur sur l’identificateur de propriété de chaque <xref:System.Windows.LocalValueEntry> pour vérifier que le <xref:System.Windows.DependencyProperty> en question n’est pas en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="385c7-182">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="385c7-183">L’exemple suivant itère toutes les propriétés qui ont des valeurs locales définies sur un objet, puis appelle <xref:System.Windows.DependencyObject.ClearValue%2A> pour effacer les valeurs de chacune de ces propriétés.</span><span class="sxs-lookup"><span data-stu-id="385c7-183">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="385c7-184">L'identificateur <see cref="T:System.Windows.DependencyProperty" /> de la propriété pour lequel récupérer la valeur.</span><span class="sxs-lookup"><span data-stu-id="385c7-184">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="385c7-185">Retourne la valeur effective actuelle d’une propriété de dépendance sur cette instance d’un <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-185">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="385c7-186">Retourne la valeur effective actuelle.</span><span class="sxs-lookup"><span data-stu-id="385c7-186">Returns the current effective value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-187">Le *valeur effective* est la valeur de la propriété qui est retournée par le système de propriétés à tout appelant qui demande la valeur.</span><span class="sxs-lookup"><span data-stu-id="385c7-187">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="385c7-188">La valeur effective est le résultat du système de propriétés ayant évalué toutes les entrées possibles qui participent à la priorité de valeur de propriété système.</span><span class="sxs-lookup"><span data-stu-id="385c7-188">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="385c7-189">Cela inclut la contrainte et l’animation.</span><span class="sxs-lookup"><span data-stu-id="385c7-189">This includes coercion and animation.</span></span> <span data-ttu-id="385c7-190">Pour plus d’informations, consultez [Priorité de la valeur de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="385c7-190">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="385c7-191">Cette méthode ne retourne jamais <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="385c7-191">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="385c7-192">Le <xref:System.Windows.DependencyProperty.UnsetValue> est une valeur de sentinelle pour le système de propriétés qui est utilisée dans plusieurs fonctions en interne et parfois également exposées via des rappels de forçage de type.</span><span class="sxs-lookup"><span data-stu-id="385c7-192">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="385c7-193">Si vous n’êtes pas sûr de ce qui doit être le type de propriété, vous pouvez interroger l’identificateur de la propriété de dépendance demandée pour déterminer s’il existe un plus spécifique <xref:System.Windows.DependencyProperty.PropertyType%2A> qui la valeur de retour peut être convertie en.</span><span class="sxs-lookup"><span data-stu-id="385c7-193">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="385c7-194">Le <paramref name="dp" /> spécifié ou sa valeur n'était pas valide, ou le <paramref name="dp" /> spécifié n'existe pas.</span><span class="sxs-lookup"><span data-stu-id="385c7-194">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="385c7-195">L'identificateur <see cref="T:System.Windows.DependencyProperty" /> de la propriété à invalider.</span><span class="sxs-lookup"><span data-stu-id="385c7-195">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span></span></param>
        <summary><span data-ttu-id="385c7-196">Réévalue la valeur effective pour la propriété de dépendance spécifiée</span><span class="sxs-lookup"><span data-stu-id="385c7-196">Re-evaluates the effective value for the specified dependency property</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-197">Lorsque vous appelez <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, toute associées et applicables <xref:System.Windows.CoerceValueCallback> ou <xref:System.Windows.PropertyChangedCallback> fonctions enregistrées pour cette propriété de dépendance peuvent être appelées.</span><span class="sxs-lookup"><span data-stu-id="385c7-197">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="385c7-198">Appel de <xref:System.Windows.DependencyObject.InvalidateProperty%2A> sur une propriété a la valeur locale définie aura aucun effet, car la valeur locale est prioritaire sur les autres entrées de système de propriétés, à l’exception des animations.</span><span class="sxs-lookup"><span data-stu-id="385c7-198">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="385c7-199">Toutefois, vous pouvez appeler <xref:System.Windows.DependencyObject.ClearValue%2A>, puis appelez <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="385c7-199">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="385c7-200">Pour plus d’informations, consultez [Priorité de la valeur de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="385c7-200">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="385c7-201">Appel <xref:System.Windows.DependencyObject.InvalidateProperty%2A> n’est pas nécessairement applicable pour de nombreux scénarios de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-201">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="385c7-202">Si une propriété de dépendance est invalidée en raison des modifications de valeur dans un des composants, le système de propriétés invalide et réévalue automatiquement la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-202">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="385c7-203">Toutefois, il existe toujours des scénarios appropriés où <xref:System.Windows.DependencyObject.InvalidateProperty%2A> est utile.</span><span class="sxs-lookup"><span data-stu-id="385c7-203">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="385c7-204">En particulier, vous pouvez utiliser <xref:System.Windows.DependencyObject.InvalidateProperty%2A> à l’intérieur de la valeur forcée ou la propriété rappel de modification pour une propriété de dépendance différente.</span><span class="sxs-lookup"><span data-stu-id="385c7-204">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="385c7-205">Vous pouvez également utiliser <xref:System.Windows.DependencyObject.InvalidateProperty%2A> pour forcer la réévaluation d’une liaison par rapport à une source de données qui n’est pas en mesure d’implémenter l’architecture recommandée <xref:System.ComponentModel.INotifyPropertyChanged> mécanisme de notification (par exemple si l’utilisation des classes de données qui ne peut pas être dérivé ou où les données sont de type statique membre).</span><span class="sxs-lookup"><span data-stu-id="385c7-205">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="385c7-206">L’exemple suivant appelle <xref:System.Windows.DependencyObject.InvalidateProperty%2A> sur une propriété personnalisée, chaque fois que modifier les propriétés qui sont impliquées dans les calculs de la propriété invalidée.</span><span class="sxs-lookup"><span data-stu-id="385c7-206">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="385c7-207">Il s’agit d’une autre technique à appeler le <xref:System.Windows.DependencyObject.CoerceValue%2A> méthode, car l’invalidation de la propriété appellera également tout inscrite <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span><span class="sxs-lookup"><span data-stu-id="385c7-207">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="385c7-208">Récupère une valeur qui indique si cette instance est actuellement sealed (en lecture seule).</span><span class="sxs-lookup"><span data-stu-id="385c7-208">Gets a value that indicates whether this instance is currently sealed (read-only).</span></span></summary>
        <value><span data-ttu-id="385c7-209"><see langword="true" /> si cette instance est sealed ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-209"><see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-210">Cette valeur est définie en interne.</span><span class="sxs-lookup"><span data-stu-id="385c7-210">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="385c7-211">Données d'événement qui contiendront l'identificateur de propriété de dépendance, les métadonnées de propriété pour le type, ainsi que les anciennes et nouvelles valeurs.</span><span class="sxs-lookup"><span data-stu-id="385c7-211">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span></span></param>
        <summary><span data-ttu-id="385c7-212">Méthode appelée chaque fois que la valeur effective d’une propriété de dépendance sur ce <see cref="T:System.Windows.DependencyObject" /> a été mise à jour.</span><span class="sxs-lookup"><span data-stu-id="385c7-212">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span></span> <span data-ttu-id="385c7-213">La propriété de dépendance spécifique qui a été modifiée est signalée dans les données d'événement.</span><span class="sxs-lookup"><span data-stu-id="385c7-213">The specific dependency property that changed is reported in the event data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-214">Cette méthode n’est pas destinée à généralement détecter les modifications apportées aux propriétés individuelles ou effectuer des invalidations de propriétés au cas par cas.</span><span class="sxs-lookup"><span data-stu-id="385c7-214">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="385c7-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> au lieu de cela concerne les modifications du modèle d’invalidation général, si certaines informations sont connues de larges classifications de propriétés.</span><span class="sxs-lookup"><span data-stu-id="385c7-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="385c7-216">Par exemple, les modifications dans un <xref:System.Windows.Freezable> peuvent être des modifications dans les types de valeur de la <xref:System.Windows.Freezable>, ou peuvent être des sous-propriétés, où les modifications sont dans d’autres <xref:System.Windows.Freezable> références.</span><span class="sxs-lookup"><span data-stu-id="385c7-216">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="385c7-217">Le <xref:System.Windows.Freezable> substituer l’implémentation de <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> utilise des informations internes pour déterminer si les propriétés sont des sous-propriétés et fournit la logique de la classe de base appropriée dans les deux cas.</span><span class="sxs-lookup"><span data-stu-id="385c7-217">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="385c7-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> est appelé potentiellement plusieurs fois pendant la durée de vie d’un objet.</span><span class="sxs-lookup"><span data-stu-id="385c7-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="385c7-219">Par conséquent, vous pouvez obtenir de meilleures performances pour le système de propriétés global si vous substituez les métadonnées de propriétés spécifiques puis attachez <xref:System.Windows.CoerceValueCallback> ou <xref:System.Windows.PropertyChangedCallback> fonctions pour les propriétés individuelles.</span><span class="sxs-lookup"><span data-stu-id="385c7-219">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="385c7-220">Toutefois, vous utiliseriez cette méthode si un <xref:System.Windows.DependencyObject> inclut un nombre important de propriétés de dépendance mises en corrélation par valeur, ou si elle inclut la logique comme comportement de rendu qui doit être réexécuté pour plusieurs cas d’invalidations de propriétés connexes.</span><span class="sxs-lookup"><span data-stu-id="385c7-220">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="385c7-221">Appelez toujours l’implémentation de base.</span><span class="sxs-lookup"><span data-stu-id="385c7-221">Always call the base implementation.</span></span> <span data-ttu-id="385c7-222">Entier sera considérablement désactivé dans le cas [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] système de propriétés, à l’origine du signalement des valeurs incorrectes.</span><span class="sxs-lookup"><span data-stu-id="385c7-222">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</span></span></para></block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="385c7-223">L'identificateur <see cref="T:System.Windows.DependencyProperty" /> de la propriété pour lequel récupérer la valeur.</span><span class="sxs-lookup"><span data-stu-id="385c7-223">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="385c7-224">Retourne la valeur locale d’une propriété de dépendance, si elle existe.</span><span class="sxs-lookup"><span data-stu-id="385c7-224">Returns the local value of a dependency property, if it exists.</span></span></summary>
        <returns><span data-ttu-id="385c7-225">Retourne la valeur de proximité, ou retourne la valeur de sentinelle <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> si aucune valeur de proximité n'est définie.</span><span class="sxs-lookup"><span data-stu-id="385c7-225">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-226">Vous devez utiliser <xref:System.Windows.DependencyObject.GetValue%2A> pour les opérations « get » plus courantes pour une propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-226">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="385c7-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> ne retourne pas la valeur effective pour diverses circonstances où la valeur n’a pas été définie localement.</span><span class="sxs-lookup"><span data-stu-id="385c7-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="385c7-228">Les valeurs qui sont définies par les styles, les thèmes, les modèles, la valeur par défaut à partir des métadonnées, ou l’héritage de valeur de propriété n’a pas sont considérés comme valeurs locales.</span><span class="sxs-lookup"><span data-stu-id="385c7-228">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="385c7-229">Toutefois, les liaisons et autres expressions sont considérés comme des valeurs locales, une fois qu’ils ont été évaluées.</span><span class="sxs-lookup"><span data-stu-id="385c7-229">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="385c7-230">Lorsque aucune valeur locale n’est définie, cette méthode retourne <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="385c7-230">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="385c7-231">Si la valeur retournée est différente <xref:System.Windows.DependencyProperty.UnsetValue>, vous pouvez interroger les métadonnées de la propriété de dépendance demandée pour déterminer s’il existe un type plus spécifique qui la valeur de retour peut être convertie en.</span><span class="sxs-lookup"><span data-stu-id="385c7-231">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="385c7-232">Identificateur de la propriété de dépendance à définir.</span><span class="sxs-lookup"><span data-stu-id="385c7-232">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="385c7-233">La nouvelle valeur de proximité.</span><span class="sxs-lookup"><span data-stu-id="385c7-233">The new local value.</span></span></param>
        <summary><span data-ttu-id="385c7-234">Définit la valeur d’une propriété de dépendance sans modifier sa valeur source.</span><span class="sxs-lookup"><span data-stu-id="385c7-234">Sets the value of a dependency property without changing its value source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-235">Cette méthode est utilisée par un composant qui définit par programmation la valeur de l’un de ses propres propriétés sans désactiver l’utilisation d’une application de la propriété.</span><span class="sxs-lookup"><span data-stu-id="385c7-235">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="385c7-236">Le <xref:System.Windows.DependencyObject.SetCurrentValue%2A> méthode modifie la valeur effective des propriété, mais les déclencheurs existants, des liaisons de données et styles continueront à fonctionner.</span><span class="sxs-lookup"><span data-stu-id="385c7-236">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="385c7-237">Tentative de modification d'une propriété de dépendance en lecture seule, ou d'une propriété sur un <see cref="T:System.Windows.DependencyObject" /> sealed.</span><span class="sxs-lookup"><span data-stu-id="385c7-237">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="385c7-238"><paramref name="value" /> n'était pas le type correct enregistré pour la propriété <paramref name="dp" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-238"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="385c7-239">Définit la valeur de proximité d’une propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-239">Sets the local value of a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="385c7-240">Identificateur de la propriété de dépendance à définir.</span><span class="sxs-lookup"><span data-stu-id="385c7-240">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="385c7-241">La nouvelle valeur de proximité.</span><span class="sxs-lookup"><span data-stu-id="385c7-241">The new local value.</span></span></param>
        <summary><span data-ttu-id="385c7-242">Définit la valeur locale d’une propriété de dépendance, spécifiée par son identificateur de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-242">Sets the local value of a dependency property, specified by its dependency property identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-243">Si le type fourni ne correspond pas au type déclaré pour la propriété de dépendance car il a été inscrit à l’origine, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="385c7-243">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="385c7-244">Le `value` paramètre doit toujours être fourni comme le type approprié.</span><span class="sxs-lookup"><span data-stu-id="385c7-244">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="385c7-245">Les conditions d’exception sont influencées potentiellement par le <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> rappel existe sur l’identificateur de propriété de dépendance de la propriété de dépendance qui est définie.</span><span class="sxs-lookup"><span data-stu-id="385c7-245">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="385c7-246">Sinon, la valeur fournie est possible en échec des conditions générales la vérification de type (par exemple, en passant une chaîne lorsque le type natif est Double).</span><span class="sxs-lookup"><span data-stu-id="385c7-246">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="385c7-247">Tentative de modification d'une propriété de dépendance en lecture seule, ou d'une propriété sur un <see cref="T:System.Windows.DependencyObject" /> sealed.</span><span class="sxs-lookup"><span data-stu-id="385c7-247">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="385c7-248"><paramref name="value" /> n'était pas le type correct enregistré pour la propriété <paramref name="dp" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-248"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="385c7-249">L'identificateur <see cref="T:System.Windows.DependencyPropertyKey" /> de la propriété à définir.</span><span class="sxs-lookup"><span data-stu-id="385c7-249">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span></span></param>
        <param name="value"><span data-ttu-id="385c7-250">La nouvelle valeur de proximité.</span><span class="sxs-lookup"><span data-stu-id="385c7-250">The new local value.</span></span></param>
        <summary><span data-ttu-id="385c7-251">Définit la valeur locale d’une propriété de dépendance en lecture seule, spécifiée par l’identificateur <see cref="T:System.Windows.DependencyPropertyKey" /> de la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-251">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-252">Cette signature est généralement utilisée lorsque vous définissez des valeurs pour les propriétés de dépendance en lecture seule qui sont définies par vos classes personnalisées.</span><span class="sxs-lookup"><span data-stu-id="385c7-252">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="385c7-253">En règle générale, <xref:System.Windows.DependencyObject.SetValue%2A> est appelée uniquement à partir du type qui inscrit cette propriété de dépendance, qui implémente la logique interne qui fournit la valeur déterminée pour la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="385c7-253">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="385c7-254">Pour plus d’informations, consultez [Propriétés de dépendance en lecture seule](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="385c7-254">For more information, see [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="385c7-255">Si le type fourni ne correspond pas au type déclaré pour la propriété de dépendance car il a été inscrit à l’origine, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="385c7-255">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="385c7-256">Le `value` paramètre doit toujours être fourni comme le type approprié.</span><span class="sxs-lookup"><span data-stu-id="385c7-256">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="385c7-257">Les conditions d’exception sont influencées potentiellement par le <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> rappel existe sur l’identificateur de propriété de dépendance de la propriété de dépendance qui est définie.</span><span class="sxs-lookup"><span data-stu-id="385c7-257">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="385c7-258">L’exemple suivant définit une propriété de dépendance en lecture seule, avec un `public static readonly` <xref:System.Windows.DependencyProperty> qui fournit l’exposition d’en lecture seule nécessaire aux consommateurs de propriété et l’accesseur get pour la [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span><span class="sxs-lookup"><span data-stu-id="385c7-258">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="385c7-259">L'identificateur pour la propriété de dépendance qui doit être sérialisée.</span><span class="sxs-lookup"><span data-stu-id="385c7-259">The identifier for the dependency property that should be serialized.</span></span></param>
        <summary><span data-ttu-id="385c7-260">Retourne une valeur qui indique si les processus de sérialisation doivent sérialiser la valeur de la propriété de dépendance fournie.</span><span class="sxs-lookup"><span data-stu-id="385c7-260">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span></span></summary>
        <returns><span data-ttu-id="385c7-261"><see langword="true" /> si la propriété de dépendance fournie doit être sérialisée par valeur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="385c7-261"><see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385c7-262">L’implémentation par défaut retourne `true` pour tous les cas dans lequel une propriété de dépendance avait une valeur locale établie sur la <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="385c7-262">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="385c7-263">Remplacements de cette méthode peuvent gérer les propriétés de dépendance spécifiques différemment.</span><span class="sxs-lookup"><span data-stu-id="385c7-263">Overrides for this method might handle specific dependency properties differently.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>