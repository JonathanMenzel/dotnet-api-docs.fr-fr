<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3cd6fbb925314b32cf6f09ce204f5374db64928c" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39765178" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un identificateur de propriété de dépendance pour un accès en écriture limité à une propriété de dépendance en lecture seule.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> les instances sont obtenues en tant que la valeur de retour d’un appel d’inscription de propriété de dépendance en utilisant les méthodes <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> ou <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.  
  
 Les types qui s’inscrivent à une propriété de dépendance peuvent utiliser le <xref:System.Windows.DependencyPropertyKey> dans les appels à <xref:System.Windows.DependencyObject.SetValue%2A> et <xref:System.Windows.DependencyObject.ClearValue%2A> qui ajustent la valeur de propriété dans le cadre de la logique de la classe. Si autorisé par le niveau d’accès de la clé, les classes connexes peuvent également utiliser la clé et la propriété de dépendance. Par exemple, vous pouvez déclarer une clé interne et les autres types dans le même assembly peuvent également définir cette propriété de dépendance.  
  
 Le <xref:System.Windows.DependencyPropertyKey> retourné par la dépendance en lecture seule inscription de la propriété ne doit pas être rendue publique, car la propriété devient définissable, alors que vous avez le point de son inscription comme une propriété de dépendance en lecture seule. En outre, l’exposition de la clé provoque une discordance entre la dépendance disponible des comportements de propriété et sa [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] des implémentations de wrapper de propriété, qui est la conception de la classe incorrect.  
  
 Au lieu d’exposer la clé elle-même, exposez le <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valeur de la <xref:System.Windows.DependencyPropertyKey> comme un `public static readonly` <xref:System.Windows.DependencyProperty> sur votre classe. Ainsi, la propriété à retourner un identificateur de propriété de dépendance valide pour certaines opérations de système de propriétés telles que l’énumération localement les valeurs définies. Toutefois, l’identificateur ainsi obtenu n’a pas de toutes les fonctionnalités d’un <xref:System.Windows.DependencyProperty> pour de nombreuses opérations de système de propriété.  
  
   
  
## Examples  
 L’exemple suivant inscrit une propriété de dépendance en lecture seule et utilise également la clé pour deux raisons dans d’autres membres de classe : implémentation du « wrapper » get et comme identificateur pour une opération de détermination protégée qui définit la valeur basée sur des calculs d’autres valeurs de propriété.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'identificateur de propriété de dépendance associé à cet identificateur de propriété de dépendance en lecture seule spécialisé.</summary>
        <value>Identificateur de propriété de dépendance pertinent.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valeur permet d’identificateur d’une propriété en lecture seule participer à des opérations de système de propriétés à l’aide de certaines des interfaces que celles utilisées pour les propriétés de dépendance en lecture-écriture.  
  
 Pour implémenter l’accesseur get de propriété pour une propriété de dépendance en lecture seule, vous devez créer et exposer un <xref:System.Windows.DependencyProperty> identificateur dans votre classe. Cela a deux objectifs :  
  
-   Les besoins de votre propre classe le <xref:System.Windows.DependencyProperty> identificateur afin d’implémenter l’accesseur get pour le wrapper de propriété. Vous utilisez le <xref:System.Windows.DependencyProperty> en tant que paramètre pour le <xref:System.Windows.DependencyObject.GetValue%2A> appel qui implémente l’accesseur get.  
  
-   <xref:System.Windows.DependencyProperty> identificateurs d’exposent votre propriété de dépendance pour le système de propriétés telles que les autres méthodes qui dépendent des métadonnées puissent y accéder dans un formulaire standard. Par exemple, si vous avez appelé <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> sur certains <xref:System.Windows.DependencyObject> et obtenu une énumération des propriétés localement définies (valeurs et identificateurs), l’identificateur retourné pour une propriété de dépendance en lecture seule serait votre <xref:System.Windows.DependencyProperty> valeur plutôt que de la clé. Ne pas exposer un <xref:System.Windows.DependencyProperty> identificateur n’augmente pas la sécurité de votre propriété de dépendance en lecture seule en rien, elle permet simplement d’opérations qui impliquent nullement à la fois pour les classes dérivées suivantes et les instances de classe.  
  
 Pour exposer la <xref:System.Windows.DependencyProperty> identificateur dans votre classe, vous appelez <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directement sur votre clé. Cette valeur permet de créer un `public static readonly` <xref:System.Windows.DependencyProperty> identificateur sur la classe qui correspond le <xref:System.Windows.DependencyPropertyKey>.  
  
   
  
## Examples  
 L’exemple suivant appelle <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> pour exposer le <xref:System.Windows.DependencyProperty> identificateur (`AquariumGraphicProperty`) pour le `AquariumGraphic` propriété de dépendance en lecture seule sur une classe. L’exemple montre également le <xref:System.Windows.DependencyPropertyKey> création (comme membre interne) et l’accesseur get de `AquariumGraphic`.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Type sur lequel cette propriété de dépendance est basée et dont les métadonnées doivent être substituées.</param>
        <param name="typeMetadata">Métadonnées fournies pour ce type.</param>
        <summary>Substitue les métadonnées d'une propriété de dépendance en lecture seule représentée par cet identificateur de propriété de dépendance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Substitution des métadonnées sur une propriété de dépendance en lecture seule est effectuée pour des raisons similaires en tant que la substitution des métadonnées sur une propriété de dépendance en lecture-écriture et est limitée aux accès au niveau de la clé, car les comportements spécifiés dans les métadonnées peuvent modifier le comportement de jeu (le valeur par défaut, par exemple).  
  
 Comme avec les propriétés de dépendance en lecture-écriture, la substitution de métadonnées sur une propriété de dépendance en lecture seule ne doit être effectuée avant que celle-ci soit mise en cours d’utilisation par le système de propriétés (cela équivaut à la fois que les instances spécifiques d’objets qui inscrivent la propriété sont instanciées). Les appels à <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> doit uniquement être effectuée dans les constructeurs statiques du type qui fournit lui-même comme le `forType` paramètre de cette méthode, ou initialisation équivalente pour cette classe.  
  
 Cette méthode transfère efficacement à la <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> méthode, en passant le <xref:System.Windows.DependencyPropertyKey> instance en tant que le paramètre de clé.  
  
   
  
## Examples  
 L’exemple suivant substitue les métadonnées pour une propriété de dépendance en lecture seule existante qui hérite d’une classe. Dans ce cas, l’objectif de scénario a été pour ajouter un rappel de valeur forcée les métadonnées de propriété de base n’ont pas. Vous pouvez également substituer les métadonnées pour toute autre raison justifiant la substitution des métadonnées (modification de valeur par défaut, ajout <xref:System.Windows.FrameworkPropertyMetadataOptions> valeurs, etc..)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A tenté de substituer des métadonnées sur une propriété de dépendance en lecture-écriture (cette opération ne peut pas être exécutée à l'aide de cette signature).</exception>
        <exception cref="T:System.ArgumentException">Les métadonnées ont déjà été établies pour la propriété telle que définie par le type fourni.</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>