<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f0f2be98debc822496ae0fb7a0b36b79ece2165" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679773" />
  </Metadata>
  <TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="79d02-101">Fournit une liste des collections intégrées permettant de stocker des écouteurs pour <see cref="T:System.Windows.WeakEventManager" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="79d02-101">Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79d02-102">Bien que cette liste contienne des membres qui ressemblent à celles définies par <xref:System.Collections.IList> et <xref:System.Collections.ICollection>et fournissent des fonctionnalités semblables, cette classe implémente ni de ces interfaces.</span><span class="sxs-lookup"><span data-stu-id="79d02-102">Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.</span></span>  
  
 <span data-ttu-id="79d02-103">La plupart des <xref:System.Windows.WeakEventManager> n’avez pas besoin d’utiliser des membres de classes dérivées <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="79d02-103">Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>.</span></span> <span data-ttu-id="79d02-104">Le <xref:System.Windows.WeakEventManager> méthodes <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> et <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> utiliser une valeur par défaut <xref:System.Windows.WeakEventManager.ListenerList> en interne, une liste pour chaque `source`.</span><span class="sxs-lookup"><span data-stu-id="79d02-104">The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.</span></span>  
  
 <span data-ttu-id="79d02-105">Vous devez uniquement appeler <xref:System.Windows.WeakEventManager.ListenerList> méthodes si vos <xref:System.Windows.WeakEventManager> classe gère plusieurs listes pour la même combinaison de source d’événement, avec chaque liste créée au compte pour les différentes conditions de l’événement.</span><span class="sxs-lookup"><span data-stu-id="79d02-105">You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</span></span> <span data-ttu-id="79d02-106">Dans ce cas, vous utiliseriez pas <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> et <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> et implémente à la place `AddListener` ou `RemoveListener` pour agir sur les écouteurs de simplement une des listes écouteur interne, généralement basés sur un paramètre que vous ajoutez à `AddListener` ou `RemoveListener`.</span><span class="sxs-lookup"><span data-stu-id="79d02-106">In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`.</span></span> <span data-ttu-id="79d02-107">Également, l’implémentation du gestionnaire qui reçoit l’événement brut ne peut pas appeler simplement <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; vous devez plutôt effectuer le suivi des caractéristiques de l’événement et remettre l’événement uniquement à la liste appropriée à l’aide de <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="79d02-107">Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 <span data-ttu-id="79d02-108">Les différentes méthodes de <xref:System.Windows.WeakEventManager.ListenerList> sont fournies afin que vous pouvez travailler avec vos listes internes et que vous pouvez empêcher la modification de la liste lors de la remise réelle de l’événement.</span><span class="sxs-lookup"><span data-stu-id="79d02-108">The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</span></span>  
  
 <span data-ttu-id="79d02-109">Constitue une classe exemple ayant utilisé cette technique d’implémentation <xref:System.ComponentModel.PropertyChangedEventManager>, qui gère l’écouteur distinct répertorie de `PropertyChanged` en fonction de la propriété modifiée.</span><span class="sxs-lookup"><span data-stu-id="79d02-109">An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.</span></span>  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="79d02-110">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="79d02-110">XAML Text Usage</span></span>  
 <span data-ttu-id="79d02-111">Vous ne pouvez pas utiliser cette classe dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="79d02-111">You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="79d02-112">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-112">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="79d02-113">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-113">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="79d02-114">Nombre d'éléments qui doivent être alloués dans la liste initiale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-114">The number of items that should be allocated in the initial list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="79d02-115">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.WeakEventManager.ListenerList" /> avec la capacité initiale par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-115">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">
          <span data-ttu-id="79d02-116">Élément d'écouteur à ajouter à <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-116">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="79d02-117">Ajoute un objet <see cref="T:System.Windows.IWeakEventListener" /> à <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-117">Adds a <see cref="T:System.Windows.IWeakEventListener" /> object to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79d02-118">L’objet fourni comme écouteur doit être un <xref:System.Windows.DependencyObject> qui implémente le <xref:System.Windows.IWeakEventListener> interface et par conséquent dispose d’une travail <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implémentation.</span><span class="sxs-lookup"><span data-stu-id="79d02-118">The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.</span></span>  
  
 <span data-ttu-id="79d02-119">Vous devez toujours appeler <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> avant de modifier le contenu de la liste.</span><span class="sxs-lookup"><span data-stu-id="79d02-119">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="79d02-120">Sinon, la liste peut être en cours de remise des événements, et par conséquent l’original est verrouillé.</span><span class="sxs-lookup"><span data-stu-id="79d02-120">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="79d02-121">Appel de <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> modifie l’entrée `list` pour être un clone afin que votre <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> appel pouvez continuer à utiliser sur le clone.</span><span class="sxs-lookup"><span data-stu-id="79d02-121">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone.</span></span> <span data-ttu-id="79d02-122">Si <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> retourne `true`, vous devrez peut-être mettre à jour toute référence privée à la liste que vous gérez dans d’autres zones de votre code.</span><span class="sxs-lookup"><span data-stu-id="79d02-122">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="79d02-123">Gestionnaire d'événements à ajouter à la <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-123">The event handler to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="79d02-124">Ajoute un gestionnaire d'événements au <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-124">Adds an event handler to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="79d02-125">Déclare la liste pour laquelle lancer l'utilisation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-125">Declares the list to be in use.</span>
          </span>
          <span data-ttu-id="79d02-126">Cela empêche des modifications directes à la liste pendant les itérations des éléments de la liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-126">This prevents direct changes to the list during iterations of the list items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="79d02-127">
            <see langword="true" /> si la liste a déjà été déclarée en vue de lancer son utilisation ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-127">
              <see langword="true" /> if the list was already declared to be in use; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79d02-128">A <xref:System.Windows.WeakEventManager> implémentation doit appeler <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> avant itération au sein de la liste afin de remettre un événement dans les écouteurs et doit appeler <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> quand il est terminé.</span><span class="sxs-lookup"><span data-stu-id="79d02-128">A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done.</span></span> <span data-ttu-id="79d02-129">Cela empêche l’appelant un autre à partir de la modification de la liste pendant que l’itération à des fins de remise d’événement est en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="79d02-129">This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</span></span> <span data-ttu-id="79d02-130">Si la liste est modifiée pendant ce temps, la liste est clonée.</span><span class="sxs-lookup"><span data-stu-id="79d02-130">If the list is modified during this time, then the list is cloned.</span></span> <span data-ttu-id="79d02-131">Si la liste est clonée, <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> retourne `true`, ce qui signifie que vous avez manqué une modification récente de l’écouteur dans la dernière remise.</span><span class="sxs-lookup"><span data-stu-id="79d02-131">If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="79d02-132">Crée un clone modifiable de cette <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-132">Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="79d02-133">Clone modifiable de l'objet actif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-133">A modifiable clone of the current object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="newList">
          <span data-ttu-id="79d02-134">Objet avec lequel effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-134">The object to copy to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="79d02-135">Copie la <see cref="T:System.Windows.WeakEventManager.ListenerList" /> actuelle dans la <see cref="T:System.Windows.WeakEventManager.ListenerList" /> spécifiée</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-135">Copies the current <see cref="T:System.Windows.WeakEventManager.ListenerList" /> to the specified <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="79d02-136">Obtient le nombre d'éléments contenus dans <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-136">Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="79d02-137">Nombre d'éléments contenus dans <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-137">The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="79d02-138">Objet ayant déclenché l'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-138">The object that raised the event.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="79d02-139">Objet qui contient les données d'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-139">An object that contains the event data.</span>
          </span>
        </param>
        <param name="managerType">
          <span data-ttu-id="79d02-140">Le type de <see cref="T:System.Windows.WeakEventManager" /> qui appelle cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-140">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="79d02-141">Remet l'événement qui est géré à chaque écouteur dans la <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-141">Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="79d02-142">
            <see langword="true" /> si les écouteurs de l'ordinateur dans <see cref="T:System.Windows.WeakEventManager.ListenerList" /> font référence à un objet qui a été récupéré par le garbage collector ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-142">
              <see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="79d02-143">Obtient une valeur qui représente une liste vide dans un but de comparaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-143">Gets a value that represents an empty list for purposes of comparisons.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="79d02-144">Représentation de liste vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-144">The empty list representation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="79d02-145">Déverrouille l'état initialisé par <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-145">Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="79d02-146">Obtient une valeur qui déclare si cette occurrence de <see cref="T:System.Windows.WeakEventManager.ListenerList" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-146">Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" /> is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="79d02-147">
            <see langword="true" /> si la liste est vide ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-147">
              <see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79d02-148">Cette méthode est équivalente à la vérification si la <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> est égal à zéro et ne vérifie pas si les références dans la liste sont désormais obsolètes.</span><span class="sxs-lookup"><span data-stu-id="79d02-148">This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale.</span></span> <span data-ttu-id="79d02-149">Si vous souhaitez vous assurer que toutes les références sont toujours valides, appelez <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> juste avant la vérification de l’état de la liste est vide.</span><span class="sxs-lookup"><span data-stu-id="79d02-149">If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="79d02-150">Index de base zéro de l'écouteur dans la liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-150">The zero-based index of the listener in the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="79d02-151">Obtient ou définit un élément d'écouteur spécifique dans <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-151">Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="79d02-152">Élément au niveau de cet index, ou référence nulle si aucun élément ne se trouve à cet index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-152">The item at that index, or a null reference if no item was at that index.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list">
          <span data-ttu-id="79d02-153">Liste dont l'état d'utilisation est à vérifier et la copie éventuellement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-153">The list to check for use state and potentially copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="79d02-154">Vérifie que la liste fournie est en cours d'utilisation et, le cas échéant, affecte au paramètre de référence de la liste une copie de cette liste plutôt que son original.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-154">Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="79d02-155">
            <see langword="true" /> si la liste fournie est utilisée au moment de l'appel et donc que la référence au paramètre de <paramref name="list" /> a été réinitialisée de façon à devenir une copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-155">
              <see langword="true" /> if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy.</span>
          </span>
          <span data-ttu-id="79d02-156">
            <see langword="false" /> si la liste fournie n'est pas en cours d'utilisation, auquel cas que la référence au paramètre <paramref name="list" /> reste inchangée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-156">
              <see langword="false" /> if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79d02-157">Si la liste donnée est en cours d’utilisation (ce qui signifie un événement est en cours de remise), appel de cette méthode remplace l’entrée `list` avec un clone.</span><span class="sxs-lookup"><span data-stu-id="79d02-157">If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.</span></span>  <span data-ttu-id="79d02-158">Les utilisateurs existants terminent alors la remise de l’événement à la liste d’origine, sans interférence avec les modifications à la nouvelle liste.</span><span class="sxs-lookup"><span data-stu-id="79d02-158">The existing users will finish delivering the event to the original list, without interference from changes to the new list.</span></span>  
  
 <span data-ttu-id="79d02-159">Si la méthode retourne `true`, appelants peuvent décider d’insérer la nouvelle liste dans leurs propres structures de données puisque cela indique la possibilité que la liste fournie n’est plus en cours.</span><span class="sxs-lookup"><span data-stu-id="79d02-159">If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</span></span>  
  
 <span data-ttu-id="79d02-160">Cette méthode appelle <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> en interne, puis appelle immédiatement <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="79d02-160">This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span> <span data-ttu-id="79d02-161">Par conséquent l’appel <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> ne pas en soi un verrou sur la liste.</span><span class="sxs-lookup"><span data-stu-id="79d02-161">Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list.</span></span> <span data-ttu-id="79d02-162">Même la copie du clone est effectuée sous forme d’opération secondaire après avoir appelé <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="79d02-162">Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="79d02-163">Supprime toutes les entrées dans la liste où la cible de référence sous-jacente correspond à une référence nulle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-163">Removes all entries from the list where the underlying reference target is a null reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="79d02-164">Retourne la valeur <see langword="true" /> si des entrées ont été vidées ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-164">Returns <see langword="true" /> if any entries were purged; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">
          <span data-ttu-id="79d02-165">Élément à supprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-165">The item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="79d02-166">Supprime la première occurrence d'un élément d'écouteur de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-166">Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79d02-167">Vous devez toujours appeler <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> avant de modifier le contenu de la liste.</span><span class="sxs-lookup"><span data-stu-id="79d02-167">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="79d02-168">Sinon, la liste peut être en cours de remise des événements, et par conséquent l’original est verrouillé.</span><span class="sxs-lookup"><span data-stu-id="79d02-168">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="79d02-169">Appel de <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> modifie l’entrée `list` pour être un clone afin que votre <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> appel pouvez continuer à utiliser sur le clone.</span><span class="sxs-lookup"><span data-stu-id="79d02-169">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone.</span></span> <span data-ttu-id="79d02-170">Si <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> retourne `true`, vous devrez peut-être mettre à jour toute référence privée à la liste que vous gérez dans d’autres zones de votre code.</span><span class="sxs-lookup"><span data-stu-id="79d02-170">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="79d02-171">Gestionnaire d'événements à supprimer de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-171">The event handler to remove from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="79d02-172">Supprime un gestionnaire d'événements de la <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79d02-172">Removes an event handler from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>