<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <Metadata><Meta Name="ms.openlocfilehash" Value="abfa8a8e75f10484b5998ca85474fa53c7d22a4c" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57961053" /></Metadata><TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <TypeSignature Language="C++ CLI" Value="protected: ref class WeakEventManager::ListenerList" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ad3db-101">Fournit une liste des collections intégrées permettant de stocker des écouteurs pour <see cref="T:System.Windows.WeakEventManager" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-101">Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad3db-102">Bien que cette liste contient des membres qui ressemblent à ceux définis par <xref:System.Collections.IList> et <xref:System.Collections.ICollection>et fournissent des fonctionnalités similaires, cette classe implémente ni de ces interfaces.</span><span class="sxs-lookup"><span data-stu-id="ad3db-102">Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.</span></span>  
  
 <span data-ttu-id="ad3db-103">La plupart des <xref:System.Windows.WeakEventManager> classes dérivées n’êtes pas obligé d’utiliser les membres de <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="ad3db-103">Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>.</span></span> <span data-ttu-id="ad3db-104">Le <xref:System.Windows.WeakEventManager> méthodes <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> et <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> utiliser une valeur par défaut <xref:System.Windows.WeakEventManager.ListenerList> en interne, une liste pour chaque `source`.</span><span class="sxs-lookup"><span data-stu-id="ad3db-104">The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.</span></span>  
  
 <span data-ttu-id="ad3db-105">Vous devez uniquement appeler <xref:System.Windows.WeakEventManager.ListenerList> méthodes si votre <xref:System.Windows.WeakEventManager> classe conserve plusieurs listes pour la même combinaison de source d’événement, avec chaque liste créée au compte pour les différentes conditions de l’événement.</span><span class="sxs-lookup"><span data-stu-id="ad3db-105">You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</span></span> <span data-ttu-id="ad3db-106">Dans ce cas, vous utiliseriez pas <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> et <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> et implémenterait à la place `AddListener` ou `RemoveListener` pour agir sur les écouteurs de simplement une des listes écouteur interne, généralement basés sur un paramètre que vous ajoutez à `AddListener` ou `RemoveListener`.</span><span class="sxs-lookup"><span data-stu-id="ad3db-106">In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`.</span></span> <span data-ttu-id="ad3db-107">En outre, l’implémentation du gestionnaire qui reçoit l’événement brut ne peut pas simplement appeler <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; vous devez plutôt effectuer le suivi des caractéristiques de l’événement et remettre l’événement uniquement à la liste appropriée à l’aide <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="ad3db-107">Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 <span data-ttu-id="ad3db-108">Les différentes méthodes de <xref:System.Windows.WeakEventManager.ListenerList> sont fournies afin que vous puissiez travailler avec vos listes internes et afin que vous pouvez empêcher la modification de la liste lors de la distribution réelle de l’événement.</span><span class="sxs-lookup"><span data-stu-id="ad3db-108">The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</span></span>  
  
 <span data-ttu-id="ad3db-109">Est un exemple de classe qui a utilisé cette technique d’implémentation <xref:System.ComponentModel.PropertyChangedEventManager>, qui tient à jour écouteur distinct répertorie pour `PropertyChanged` en fonction de la propriété modifiée.</span><span class="sxs-lookup"><span data-stu-id="ad3db-109">An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.</span></span>  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="ad3db-110">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="ad3db-110">XAML Text Usage</span></span>  
 <span data-ttu-id="ad3db-111">Vous ne pouvez pas utiliser cette classe dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="ad3db-111">You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad3db-112">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-112">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad3db-113">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-113">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Windows.WeakEventManager.ListenerList : int -&gt; System.Windows.WeakEventManager.ListenerList" Usage="new System.Windows.WeakEventManager.ListenerList capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="ad3db-114">Nombre d'éléments qui doivent être alloués dans la liste initiale.</span><span class="sxs-lookup"><span data-stu-id="ad3db-114">The number of items that should be allocated in the initial list.</span></span></param>
        <summary><span data-ttu-id="ad3db-115">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.WeakEventManager.ListenerList" /> avec la capacité initiale par défaut.</span><span class="sxs-lookup"><span data-stu-id="ad3db-115">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Add listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="ad3db-116">Élément d'écouteur à ajouter à <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-116">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="ad3db-117">Ajoute un objet <see cref="T:System.Windows.IWeakEventListener" /> à <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-117">Adds a <see cref="T:System.Windows.IWeakEventListener" /> object to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad3db-118">L’objet fourni comme écouteur doit être un <xref:System.Windows.DependencyObject> qui implémente le <xref:System.Windows.IWeakEventListener> d’interface et a donc un travail <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implémentation.</span><span class="sxs-lookup"><span data-stu-id="ad3db-118">The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.</span></span>  
  
 <span data-ttu-id="ad3db-119">Vous devez toujours appeler <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> avant de modifier le contenu de la liste.</span><span class="sxs-lookup"><span data-stu-id="ad3db-119">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="ad3db-120">Sinon, la liste peut être en cours de la diffusion d’événements, et par conséquent l’original est verrouillé.</span><span class="sxs-lookup"><span data-stu-id="ad3db-120">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="ad3db-121">Appel <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> modifie l’entrée `list` à un clone afin que votre <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> appel peut continuer à travailler sur le clone.</span><span class="sxs-lookup"><span data-stu-id="ad3db-121">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone.</span></span> <span data-ttu-id="ad3db-122">Si <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> retourne `true`, vous devrez peut-être mettre à jour toute référence privée à la liste que vous gérez d’autres aspects de votre code.</span><span class="sxs-lookup"><span data-stu-id="ad3db-122">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : Delegate -&gt; unit" Usage="listenerList.AddHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="ad3db-123">Gestionnaire d'événements à ajouter à la <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-123">The event handler to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="ad3db-124">Ajoute un gestionnaire d'événements au <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-124">Adds an event handler to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberSignature Language="F#" Value="member this.BeginUse : unit -&gt; bool" Usage="listenerList.BeginUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad3db-125">Déclare la liste pour laquelle lancer l'utilisation.</span><span class="sxs-lookup"><span data-stu-id="ad3db-125">Declares the list to be in use.</span></span> <span data-ttu-id="ad3db-126">Cela empêche des modifications directes à la liste pendant les itérations des éléments de la liste.</span><span class="sxs-lookup"><span data-stu-id="ad3db-126">This prevents direct changes to the list during iterations of the list items.</span></span></summary>
        <returns><span data-ttu-id="ad3db-127"><see langword="true" /> si la liste a déjà été déclarée en vue de lancer son utilisation ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-127"><see langword="true" /> if the list was already declared to be in use; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad3db-128">Un <xref:System.Windows.WeakEventManager> implémentation doit appeler <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> avant itération dans la liste pour proposer un événement dans les écouteurs et doit appeler <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> lorsqu’elle est terminée.</span><span class="sxs-lookup"><span data-stu-id="ad3db-128">A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done.</span></span> <span data-ttu-id="ad3db-129">Cela empêche un autre appelant à partir de la modification de la liste lorsque l’itération pour la remise d’événement est en cours.</span><span class="sxs-lookup"><span data-stu-id="ad3db-129">This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</span></span> <span data-ttu-id="ad3db-130">Si la liste est modifiée pendant ce temps, la liste est clonée.</span><span class="sxs-lookup"><span data-stu-id="ad3db-130">If the list is modified during this time, then the list is cloned.</span></span> <span data-ttu-id="ad3db-131">Si la liste est clonée, <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> retourne `true`, ce qui signifie que vous avez manqué une modification récente de l’écouteur dans la dernière remise.</span><span class="sxs-lookup"><span data-stu-id="ad3db-131">If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="listenerList.Clone " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::WeakEventManager::ListenerList ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad3db-132">Crée un clone modifiable de cette <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-132">Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns><span data-ttu-id="ad3db-133">Clone modifiable de l'objet actif.</span><span class="sxs-lookup"><span data-stu-id="ad3db-133">A modifiable clone of the current object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="listenerList.CopyTo newList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="newList"><span data-ttu-id="ad3db-134">Objet avec lequel effectuer la copie.</span><span class="sxs-lookup"><span data-stu-id="ad3db-134">The object to copy to.</span></span></param>
        <summary><span data-ttu-id="ad3db-135">Copie la <see cref="T:System.Windows.WeakEventManager.ListenerList" /> actuelle dans la <see cref="T:System.Windows.WeakEventManager.ListenerList" /> spécifiée</span><span class="sxs-lookup"><span data-stu-id="ad3db-135">Copies the current <see cref="T:System.Windows.WeakEventManager.ListenerList" /> to the specified <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad3db-136">Obtient le nombre d'éléments contenus dans <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-136">Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <value><span data-ttu-id="ad3db-137">Nombre d'éléments contenus dans <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-137">The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberSignature Language="F#" Value="abstract member DeliverEvent : obj * EventArgs * Type -&gt; bool&#xA;override this.DeliverEvent : obj * EventArgs * Type -&gt; bool" Usage="listenerList.DeliverEvent (sender, args, managerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="args" Type="System.EventArgs" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="managerType" Type="System.Type" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="ad3db-138">Objet ayant déclenché l'événement.</span><span class="sxs-lookup"><span data-stu-id="ad3db-138">The object that raised the event.</span></span></param>
        <param name="args"><span data-ttu-id="ad3db-139">Objet qui contient les données d'événement.</span><span class="sxs-lookup"><span data-stu-id="ad3db-139">An object that contains the event data.</span></span></param>
        <param name="managerType"><span data-ttu-id="ad3db-140">Le type de <see cref="T:System.Windows.WeakEventManager" /> qui appelle cette méthode.</span><span class="sxs-lookup"><span data-stu-id="ad3db-140">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</span></span></param>
        <summary><span data-ttu-id="ad3db-141">Remet l'événement qui est géré à chaque écouteur dans la <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-141">Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns><span data-ttu-id="ad3db-142"><see langword="true" /> si les écouteurs de l'ordinateur dans <see cref="T:System.Windows.WeakEventManager.ListenerList" /> font référence à un objet qui a été récupéré par le garbage collector ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-142"><see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.WeakEventManager.ListenerList" Usage="System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::WeakEventManager::ListenerList ^ Empty { System::Windows::WeakEventManager::ListenerList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad3db-143">Obtient une valeur qui représente une liste vide dans un but de comparaison.</span><span class="sxs-lookup"><span data-stu-id="ad3db-143">Gets a value that represents an empty list for purposes of comparisons.</span></span></summary>
        <value><span data-ttu-id="ad3db-144">Représentation de liste vide.</span><span class="sxs-lookup"><span data-stu-id="ad3db-144">The empty list representation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberSignature Language="F#" Value="member this.EndUse : unit -&gt; unit" Usage="listenerList.EndUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad3db-145">Déverrouille l'état initialisé par <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-145">Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad3db-146">Obtient une valeur qui déclare si cette occurrence de <see cref="T:System.Windows.WeakEventManager.ListenerList" /> est vide.</span><span class="sxs-lookup"><span data-stu-id="ad3db-146">Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" /> is empty.</span></span></summary>
        <value><span data-ttu-id="ad3db-147"><see langword="true" /> si la liste est vide ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-147"><see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad3db-148">Cette méthode est équivalente à la vérification si le <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> est égal à zéro et ne vérifie pas si une des références dans la liste sont désormais obsolète.</span><span class="sxs-lookup"><span data-stu-id="ad3db-148">This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale.</span></span> <span data-ttu-id="ad3db-149">Si vous souhaitez vous assurer que toutes les références sont toujours valides, appelez <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> juste avant la vérification de l’état de la liste est vide.</span><span class="sxs-lookup"><span data-stu-id="ad3db-149">If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.IWeakEventListener" Usage="System.Windows.WeakEventManager.ListenerList.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="ad3db-150">Index de base zéro de l'écouteur dans la liste.</span><span class="sxs-lookup"><span data-stu-id="ad3db-150">The zero-based index of the listener in the list.</span></span></param>
        <summary><span data-ttu-id="ad3db-151">Obtient ou définit un élément d'écouteur spécifique dans <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-151">Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span></span></summary>
        <value><span data-ttu-id="ad3db-152">Élément au niveau de cet index, ou référence nulle si aucun élément ne se trouve à cet index.</span><span class="sxs-lookup"><span data-stu-id="ad3db-152">The item at that index, or a null reference if no item was at that index.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberSignature Language="F#" Value="static member PrepareForWriting :  -&gt; bool" Usage="System.Windows.WeakEventManager.ListenerList.PrepareForWriting list" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list"><span data-ttu-id="ad3db-153">Liste dont l'état d'utilisation est à vérifier et la copie éventuellement.</span><span class="sxs-lookup"><span data-stu-id="ad3db-153">The list to check for use state and potentially copy.</span></span></param>
        <summary><span data-ttu-id="ad3db-154">Vérifie que la liste fournie est en cours d'utilisation et, le cas échéant, affecte au paramètre de référence de la liste une copie de cette liste plutôt que son original.</span><span class="sxs-lookup"><span data-stu-id="ad3db-154">Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</span></span></summary>
        <returns><span data-ttu-id="ad3db-155"><see langword="true" /> si la liste fournie est utilisée au moment de l'appel et donc que la référence au paramètre de <paramref name="list" /> a été réinitialisée de façon à devenir une copie.</span><span class="sxs-lookup"><span data-stu-id="ad3db-155"><see langword="true" /> if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy.</span></span> <span data-ttu-id="ad3db-156"><see langword="false" /> si la liste fournie n'est pas en cours d'utilisation, auquel cas que la référence au paramètre <paramref name="list" /> reste inchangée.</span><span class="sxs-lookup"><span data-stu-id="ad3db-156"><see langword="false" /> if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad3db-157">Si la liste donnée est en cours d’utilisation (ce qui signifie un événement est en cours de remise), appel de cette méthode remplace l’entrée `list` avec un clone.</span><span class="sxs-lookup"><span data-stu-id="ad3db-157">If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.</span></span>  <span data-ttu-id="ad3db-158">Les utilisateurs existants seront termine la remise de l’événement à la liste d’origine, sans interférence avec les modifications dans la nouvelle liste.</span><span class="sxs-lookup"><span data-stu-id="ad3db-158">The existing users will finish delivering the event to the original list, without interference from changes to the new list.</span></span>  
  
 <span data-ttu-id="ad3db-159">Si la méthode retourne `true`, les appelants peuvent décider d’insérer la nouvelle liste dans leurs propres structures de données, puisque cela indique la possibilité que la liste fournie n’est plus en cours.</span><span class="sxs-lookup"><span data-stu-id="ad3db-159">If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</span></span>  
  
 <span data-ttu-id="ad3db-160">Cette méthode appelle <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> en interne, puis appelle immédiatement <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="ad3db-160">This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span> <span data-ttu-id="ad3db-161">Par conséquent l’appel <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> ne pas en soi un verrou sur la liste.</span><span class="sxs-lookup"><span data-stu-id="ad3db-161">Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list.</span></span> <span data-ttu-id="ad3db-162">Même la copie du clone est effectuée en tant qu’une opération secondaire après avoir appelé <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="ad3db-162">Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberSignature Language="F#" Value="member this.Purge : unit -&gt; bool" Usage="listenerList.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad3db-163">Supprime toutes les entrées dans la liste où la cible de référence sous-jacente correspond à une référence nulle.</span><span class="sxs-lookup"><span data-stu-id="ad3db-163">Removes all entries from the list where the underlying reference target is a null reference.</span></span></summary>
        <returns><span data-ttu-id="ad3db-164">Retourne la valeur <see langword="true" /> si des entrées ont été vidées ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-164">Returns <see langword="true" /> if any entries were purged; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Remove listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="ad3db-165">Élément à supprimer.</span><span class="sxs-lookup"><span data-stu-id="ad3db-165">The item to remove.</span></span></param>
        <summary><span data-ttu-id="ad3db-166">Supprime la première occurrence d'un élément d'écouteur de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-166">Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad3db-167">Vous devez toujours appeler <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> avant de modifier le contenu de la liste.</span><span class="sxs-lookup"><span data-stu-id="ad3db-167">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="ad3db-168">Sinon, la liste peut être en cours de la diffusion d’événements, et par conséquent l’original est verrouillé.</span><span class="sxs-lookup"><span data-stu-id="ad3db-168">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="ad3db-169">Appel <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> modifie l’entrée `list` à un clone afin que votre <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> appel peut continuer à travailler sur le clone.</span><span class="sxs-lookup"><span data-stu-id="ad3db-169">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone.</span></span> <span data-ttu-id="ad3db-170">Si <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> retourne `true`, vous devrez peut-être mettre à jour toute référence privée à la liste que vous gérez d’autres aspects de votre code.</span><span class="sxs-lookup"><span data-stu-id="ad3db-170">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.RemoveHandler : Delegate -&gt; unit" Usage="listenerList.RemoveHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="ad3db-171">Gestionnaire d'événements à supprimer de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-171">The event handler to remove from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="ad3db-172">Supprime un gestionnaire d'événements de la <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="ad3db-172">Removes an event handler from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>