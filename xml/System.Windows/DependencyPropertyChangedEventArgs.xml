<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DependencyPropertyChangedEventArgs.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5840f1b77f0e3528c43e12653ee199d6199ef1109.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">840f1b77f0e3528c43e12653ee199d6199ef1109</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Provides data for various property changed events.</source>
          <target state="translated">Fournit des données pour différents événements de modification de propriété.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Typically these events report effective value changes in the value of a read-only dependency property.</source>
          <target state="translated">En général, ces événements font état des modifications effectives de valeurs dans la valeur d’une propriété de dépendance en lecture seule.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Another usage is as part of a <ph id="ph1">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph> implementation.</source>
          <target state="translated">Il est aussi possible de l’utiliser dans le cadre d’une implémentation de <ph id="ph1">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The events that use the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class for event data, and the <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventHandler&gt;</ph> method implementations for handlers, generally follow the naming pattern <ph id="ph3">`Is*Changed`</ph>, and are generally implemented as <ph id="ph4">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> events without <ph id="ph5">&lt;xref:System.Windows.RoutedEvent&gt;</ph> backing (they are not routed events).</source>
          <target state="translated">Les événements qui utilisent le <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> classe pour les données d’événement et le <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventHandler&gt;</ph> implémentations de méthode pour les gestionnaires, suivent généralement le modèle d’affectation de noms <ph id="ph3">`Is*Changed`</ph>et sont généralement implémentées en tant que <ph id="ph4">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> événements sans <ph id="ph5">&lt;xref:System.Windows.RoutedEvent&gt;</ph> stockage (ils ne sont pas les événements routés).</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Some class handling methods that "handle" otherwise unexposed events that report a state change through a property change, such as <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType&gt;</ph>, also use the <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class for event data.</source>
          <target state="translated">Certaines méthodes « handle » dans le cas contraire de gestion de classe non exposés événements qui indiquent un changement d’état via une modification de propriété, tel que <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType&gt;</ph>, utilisez également la <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> classe pour les données d’événement.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The scenario for <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> is to use the arguments to report old and new values that come from the property system evaluation of the property.</source>
          <target state="translated">Le scénario de <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> consiste à utiliser les arguments pour signaler les anciennes et nouvelles valeurs qui proviennent de l’évaluation du système de la propriété.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>A callback that processes old and new values might choose special handling depending on these values, such as choosing to not respond to value changes that are deemed insignificant.</source>
          <target state="translated">Un rappel qui traite les valeurs anciennes et nouvelles peut choisir un traitement spécial en fonction de ces valeurs, tel que le choix de répondre aux modifications de valeur sont considérées comme non significatifs.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class in the context of a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a particular property of a custom class that also defines events.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> classe dans le contexte d’un <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> pour une propriété particulière d’une classe personnalisée qui définit également des événements.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The callback takes the results of old and new values from the property system as communicated by <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, and repackages these into a different events arguments class <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</source>
          <target state="translated">Le rappel prend les résultats des anciennes et nouvelles valeurs à partir du système de la propriété communiquée par <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>et ces éléments dans une classe d’événements différents arguments Repackage <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</source>
          <target state="translated">Les nouveaux arguments sont ensuite utilisés en tant que les données pour un événement « ValueChanged » défini et déclenché par la classe personnalisée.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>The identifier for the dependency property that changed.</source>
          <target state="translated">Identificateur de la propriété de dépendance modifiée.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>The value of the property before the change reported by the relevant event or state change.</source>
          <target state="translated">Valeur de la propriété avant la modification signalée par l'événement ou la modification d'état concerné(e).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>The value of the property after the change reported by the relevant event or state change.</source>
          <target state="translated">Valeur de la propriété après la modification signalée par l'événement ou la modification d'état concerné(e).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>Implementers of custom events that report dependency property changes should use this constructor for populating the event data with the specifics of the change when the event is raised.</source>
          <target state="translated">Implémenteurs d’événements personnalisés qui signalent des modifications de propriété de dépendance doivent utiliser ce constructeur pour remplir les données d’événement avec les caractéristiques de la modification lorsque l’événement est déclenché.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Returns whether the provided object is equivalent to the current <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">Indique si l'objet fourni est équivalent au <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source>The object to compare to the current <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">Objet à comparer au <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> en cours.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source>Determines whether the provided object is equivalent to the current <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">Détermine si l'objet fourni est équivalent au <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the provided object is equivalent to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'objet fourni est équivalent au <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> actuel ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source>This implementation relies on value equivalence of all properties, including internal properties.</source>
          <target state="translated">Cette implémentation s’appuie sur l’équivalence de valeur de toutes les propriétés, y compris les propriétés internes.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> à comparer au <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Determines whether the provided <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> is equivalent to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">Détermine si le <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> spécifié est équivalent au <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the provided <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> is equivalent to the current <ph id="ph3">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> fourni est équivalent au <ph id="ph3">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> actuel ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This implementation relies on value equivalence of all properties, including internal properties.</source>
          <target state="translated">Cette implémentation s’appuie sur l’équivalence de valeur de toutes les propriétés, y compris les propriétés internes.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
          <source>Gets a hash code  for this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">Obtient un code de hachage pour ce <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
          <source>A signed 32-bit integer hash code.</source>
          <target state="translated">Code de hachage d’un entier 32 bits signé.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>Gets the value of the property after the change.</source>
          <target state="translated">Obtient ou définit la propriété après modification.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The property value after the change.</source>
          <target state="translated">Valeur de propriété après modification.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The type of the value provided should always be castable to the type of the dependency property being reported.</source>
          <target state="translated">Le type de la valeur fournie doit toujours être convertibles au type de la propriété de dépendance sont signalé.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class in the context of a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a particular property of a custom class that also defines events.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> classe dans le contexte d’un <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> pour une propriété particulière d’une classe personnalisée qui définit également des événements.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The callback takes the results of old and new values from the property system as communicated by <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, and repackages these into a different events arguments class <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</source>
          <target state="translated">Le rappel prend les résultats des anciennes et nouvelles valeurs à partir du système de la propriété communiquée par <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>et ces éléments dans une classe d’événements différents arguments Repackage <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</source>
          <target state="translated">Les nouveaux arguments sont ensuite utilisés en tant que les données pour un événement « ValueChanged » défini et déclenché par la classe personnalisée.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>Gets the value of the property before the change.</source>
          <target state="translated">Obtient la valeur de la propriété avant modification.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The property value before the change.</source>
          <target state="translated">Valeur de propriété avant modification.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The type of the value provided should always be castable to the type of the dependency property being reported.</source>
          <target state="translated">Le type de la valeur fournie doit toujours être convertibles au type de la propriété de dépendance sont signalé.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class in the context of a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a particular property of a custom class that also defines events.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> classe dans le contexte d’un <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> pour une propriété particulière d’une classe personnalisée qui définit également des événements.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The callback takes the results of old and new values from the property system as communicated by <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, and repackages these into a different events arguments class <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</source>
          <target state="translated">Le rappel prend les résultats des anciennes et nouvelles valeurs à partir du système de la propriété communiquée par <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>et ces éléments dans une classe d’événements différents arguments Repackage <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</source>
          <target state="translated">Les nouveaux arguments sont ensuite utilisés en tant que les données pour un événement « ValueChanged » défini et déclenché par la classe personnalisée.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">Premier <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> à comparer.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">Deuxième <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> à comparer.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> objects have the same value.</source>
          <target state="translated">Détermine si deux objets <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> spécifiés ont la même valeur.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> instances are equivalent; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les deux instances <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> sont équivalentes ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The implementation uses the same logic as <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>.</source>
          <target state="translated">L’implémentation utilise la même logique que <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">Premier <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> à comparer.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">Deuxième <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> à comparer.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> objects are different.</source>
          <target state="translated">Détermine si deux objets <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> spécifiés sont différents.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> instances are different; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les deux instances de <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> sont différentes ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The implementation returns the negation of the same logic as <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>.</source>
          <target state="translated">L’implémentation retourne la négation de la même logique que <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>Gets the identifier for the dependency property where the value change occurred.</source>
          <target state="translated">Obtient l'identificateur pour la propriété de dépendance où la valeur a été modifiée.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>The identifier field of the dependency property where the value change occurred.</source>
          <target state="translated">Champ d'identificateur de la propriété de dépendance où la valeur a été modifiée.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>This property is relevant if used within a common <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> that is registered for several properties, and it is necessary to disambiguate which property change invoked the callback.</source>
          <target state="translated">Cette propriété ne s’applique si utilisé dans un commun <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> qui est inscrit pour plusieurs propriétés, et il est nécessaire lever l’ambiguïté de la modification de propriété appelé le rappel.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A&gt;</ph> is not typically relevant for raising events, because there is usually a 1:1 correspondence between properties and events that report the property change.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A&gt;</ph> Ce paramètre n’est pas généralement pertinentes pour déclencher des événements, car il existe généralement une correspondance 1:1 entre les propriétés et les événements qui signalent la modification de propriété.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>The event that was raised is itself the indication of which property changed.</source>
          <target state="translated">L’événement qui a été déclenché lui-même est l’indication dont la propriété modifiée.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>