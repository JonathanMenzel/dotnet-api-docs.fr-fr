<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ebfdb9ce19336f783b2dfdfa69984aebd3d731d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37492169" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.WeakEventManager> (un répartiteur) transfère un événement en appelant le <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> méthode sur les classes qui implémentent cette interface, et qui ont été ajoutés en tant qu’écouteurs en appelant <xref:System.Windows.WeakEventManager> méthodes au préalable.  
  
 Le modèle WeakEvent la raison principale est lorsque la source de l’événement a une durée de vie d’objet qui est potentiellement indépendante des écouteurs d’événements. À l’aide de l’événement central distribuant une <xref:System.Windows.WeakEventManager> permet les gestionnaires pour les écouteurs pour l’opération garbage collectées (ou purgés manuellement) même si la durée de vie source s’étend au delà des écouteurs. En revanche, une accroche d’événement normal à l’aide `+=` ou de la syntaxe d’événement spécifique au langage équivalent entraîne la source éventuellement toujours connectée contenir une référence forte aux gestionnaires. Cela permet de conserver les références aux écouteurs le garbage collecté en temps voulu.  
  
 Une situation courante où les relations entre des sources et des écouteurs suggère l’utilisation de ce modèle est le traitement des événements de mise à jour provenant de sources pour les liaisons de données.  
  
 Vous pouvez utiliser le modèle WeakEvent pour écouter les événements qui sont externes à votre application. Il vous suffit de définir un <xref:System.Windows.WeakEventManager> , fournir un comportement écoute dans <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>et utiliser le <xref:System.Windows.WeakEventManager> pour attacher le Gestionnaire de références plutôt que `+=`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
        <param name="sender">Object that originated the event.</param>
        <param name="e">Event data.</param>
        <summary>Receives events from the centralized event manager.</summary>
        <returns>
          <see langword="true" /> if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle. Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant implémente <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> pour prendre en charge le modèle WeakEvent deux événements hypothétiques `ClockwiseSpin` et `CounterclockwiseSpin` qui ont chacune une dédiée <xref:System.Windows.WeakEventManager> (non illustré). Cette implémentation appelle des stubs de gestionnaire de classe pour chaque événement pris en charge, la conversion des données d’événement (dans ce cas les deux événements partagent un type de données d’événement `SpinEventArgs`). L’implémentation retourne `false` si l’événement reçu n’est pas un de ceux attendus.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Cette méthode est destinée à recevoir tous les événements possibles où le destinataire est dans une liste d’écouteurs. En particulier si l’implémentation pour une classe qui est à l’écoute pour plusieurs événements, vous devez vérifier le type d’entrant <paramref name="managerType" /> paramètre afin de déterminer l’appel de l’événement qui correspond au. C’est pourquoi chaque événement qui doit faire partie du modèle doit avoir une dédiée <see cref="T:System.Windows.WeakEventManager" />. En outre, le <paramref name="e" /> paramètre est de type général <see cref="T:System.EventArgs" />. Par conséquent, dans l’ordre, obtenir des propriétés spécifiques de données d’événement, votre implémentation doit effectuer un cast vers le type de données d’événement spécifique.  En règle générale, après avoir vérifié l’identité de l’événement selon le <see cref="T:System.Windows.WeakEventManager" /> type, votre implémentation doit appeler un gestionnaire de classe privée. Votre gestionnaire de classe peut être parfaitement le même gestionnaire de classe qui est utilisé pour gérer cet événement pour les écouteurs qui sont ajoutés via le modèle d’événement classique d’ajout par <see langword="+=" /> à l’événement sur l’expéditeur. La section suivante fournit un modèle d’implémentation approximative.</para>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>