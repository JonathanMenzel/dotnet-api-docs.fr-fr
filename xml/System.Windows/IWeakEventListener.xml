<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IWeakEventListener.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53a1bf86fcc21c642d34254ee3721d50b914beee5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a1bf86fcc21c642d34254ee3721d50b914beee5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.IWeakEventListener">
          <source>Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</source>
          <target state="translated">Prend en charge l'écoute d'événements pour les classes qui doivent recevoir des événements à travers le modèle WeakEvent et <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (a dispatcher) forwards an event by calling the <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> method on classes that implement this interface, and that have been added as listeners by calling <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> methods beforehand.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (un répartiteur) transfère un événement en appelant le <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> méthode sur les classes qui implémentent cette interface, et qui ont été ajoutés en tant qu’écouteurs en appelant <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> méthodes au préalable.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</source>
          <target state="translated">Le modèle WeakEvent la raison principale est lors de la source d’événement a une durée de vie d’objet qui est potentiellement indépendante des écouteurs d’événements.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>Using the central event dispatching of a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</source>
          <target state="translated">À l’aide de l’événement central distribuant un <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> permet de gestionnaires pour les écouteurs pour l’opération garbage collector (ou purgés manuellement) même si la durée de vie source s’étend au delà des écouteurs.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>By contrast, a normal event hookup using <ph id="ph1">`+=`</ph> or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</source>
          <target state="translated">En revanche, un raccordement d’événements normaux à l’aide <ph id="ph1">`+=`</ph> ou de la syntaxe de l’événement spécifique au langage équivalent entraîne la source éventuellement toujours connectée contenir une référence forte aux gestionnaires.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>This keeps the listener references from being garbage collected in a timely fashion.</source>
          <target state="translated">Cela permet de conserver les références de port d’écoute par le garbage collecté en temps voulu.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</source>
          <target state="translated">Une situation courante où les relations entre les sources et les écouteurs suggère l’utilisation de ce modèle est la gestion des événements de mise à jour provenant de sources pour les liaisons de données.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>You can use the WeakEvent pattern to listen for events that are external to your application.</source>
          <target state="translated">Vous pouvez utiliser le modèle WeakEvent pour écouter les événements qui sont externes à votre application.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>You only need to define a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> for it, provide listening behavior in <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph>, and use the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> to attach the handler references rather than <ph id="ph4">`+=`</ph>.</source>
          <target state="translated">Vous ne devez définir un <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> , fournir un comportement écoute dans <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph>et utiliser le <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> pour attacher le Gestionnaire de références plutôt que <ph id="ph4">`+=`</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The type of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> calling this method.</source>
          <target state="translated">Le type du <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> qui appelle cette méthode.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Object that originated the event.</source>
          <target state="translated">Objet à l'origine de l'événement.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Event data.</source>
          <target state="translated">Donnée d’événement.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Receives events from the centralized event manager.</source>
          <target state="translated">Reçoit des événements du gestionnaire d'événements centralisé.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the listener handled the event.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'écouteur a géré l'événement.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>It is considered an error by the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> handling in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> to register a listener for an event that the listener does not handle.</source>
          <target state="translated">L’enregistrement d’un écouteur pour un événement que l’écouteur ne gère pas est considéré comme une erreur par la gestion de <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> dans <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Regardless, the method should return <ph id="ph1">&lt;see langword="false" /&gt;</ph> if it receives an event that it does not recognize or handle.</source>
          <target state="translated">La méthode doit néanmoins toujours retourner la valeur <ph id="ph1">&lt;see langword="false" /&gt;</ph> si elle reçoit un événement qu'elle ne reconnaît ou ne gère pas.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The following example implements <ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> to provide WeakEvent pattern support for two hypothetical events <ph id="ph2">`ClockwiseSpin`</ph> and <ph id="ph3">`CounterclockwiseSpin`</ph> that each have a dedicated <ph id="ph4">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (not shown).</source>
          <target state="translated">L’exemple suivant implémente <ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> pour prendre en charge du modèle WeakEvent pour deux événements hypothétiques <ph id="ph2">`ClockwiseSpin`</ph> et <ph id="ph3">`CounterclockwiseSpin`</ph> qui ont chacun une dédiée <ph id="ph4">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (non affichée).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type <ph id="ph1">`SpinEventArgs`</ph>).</source>
          <target state="translated">Cette implémentation appelle des stubs de gestionnaire de classe pour chaque événement pris en charge, la conversion des données d’événement (dans ce cas les deux événements partagent un type de données d’événement <ph id="ph1">`SpinEventArgs`</ph>).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The implementation returns <ph id="ph1">`false`</ph> if the event received is not one that is expected.</source>
          <target state="translated">L’implémentation retourne <ph id="ph1">`false`</ph> si l’événement reçu n’est pas un de ceux attendus.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This method is intended to receive all possible events where the receiver is in a listener list.</source>
          <target state="translated">Cette méthode est destinée à recevoir tous les événements possibles où le récepteur est dans une liste d’écouteur.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <ph id="ph1">&lt;paramref name="managerType" /&gt;</ph> parameter in order to know which event the call corresponds to.</source>
          <target state="translated">En particulier si l’implémentation pour une classe qui écoute plusieurs événements, vous devez vérifier le type d’entrant <ph id="ph1">&lt;paramref name="managerType" /&gt;</ph> paramètre afin de déterminer quel événement de l’appel correspond à.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This is why each event that is to be part of the pattern must have a dedicated <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</source>
          <target state="translated">C’est pourquoi chaque événement qui doit faire partie du modèle doit avoir une dédiée <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Also, the <ph id="ph1">&lt;paramref name="e" /&gt;</ph> parameter is typed as the general <ph id="ph2">&lt;see cref="T:System.EventArgs" /&gt;</ph>.</source>
          <target state="translated">En outre, le <ph id="ph1">&lt;paramref name="e" /&gt;</ph> paramètre est de type général <ph id="ph2">&lt;see cref="T:System.EventArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</source>
          <target state="translated">Par conséquent, dans l’ordre, obtenir des propriétés spécifiques de données d’événement, votre implémentation doit être convertible vers le type de données d’événement spécifique.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Typically, after checking for the identity of the event based on the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> type, your implementation should call a private class handler.</source>
          <target state="translated">En règle générale, après avoir vérifié l’identité de l’événement en fonction de la <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> type, votre implémentation doit appeler un gestionnaire de classe privée.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <ph id="ph1">&lt;see langword="+=" /&gt;</ph> to the event on the sender.</source>
          <target state="translated">Votre gestionnaire de classe peut être parfaitement le même gestionnaire de classe qui est utilisé pour gérer cet événement pour les écouteurs qui sont ajoutés via le modèle d’événement classique d’ajout par <ph id="ph1">&lt;see langword="+=" /&gt;</ph> à l’événement sur l’expéditeur.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The following example section provides a rough implementation template.</source>
          <target state="translated">La section suivante fournit un modèle d’implémentation succinct.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>