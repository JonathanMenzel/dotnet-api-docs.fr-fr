<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ebfdb9ce19336f783b2dfdfa69984aebd3d731d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37492169" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="c92a8-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c92a8-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c92a8-102">Le <xref:System.Windows.WeakEventManager> (un répartiteur) transfère un événement en appelant le <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> méthode sur les classes qui implémentent cette interface, et qui ont été ajoutés en tant qu’écouteurs en appelant <xref:System.Windows.WeakEventManager> méthodes au préalable.</span><span class="sxs-lookup"><span data-stu-id="c92a8-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="c92a8-103">Le modèle WeakEvent la raison principale est lorsque la source de l’événement a une durée de vie d’objet qui est potentiellement indépendante des écouteurs d’événements.</span><span class="sxs-lookup"><span data-stu-id="c92a8-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="c92a8-104">À l’aide de l’événement central distribuant une <xref:System.Windows.WeakEventManager> permet les gestionnaires pour les écouteurs pour l’opération garbage collectées (ou purgés manuellement) même si la durée de vie source s’étend au delà des écouteurs.</span><span class="sxs-lookup"><span data-stu-id="c92a8-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="c92a8-105">En revanche, une accroche d’événement normal à l’aide `+=` ou de la syntaxe d’événement spécifique au langage équivalent entraîne la source éventuellement toujours connectée contenir une référence forte aux gestionnaires.</span><span class="sxs-lookup"><span data-stu-id="c92a8-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="c92a8-106">Cela permet de conserver les références aux écouteurs le garbage collecté en temps voulu.</span><span class="sxs-lookup"><span data-stu-id="c92a8-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="c92a8-107">Une situation courante où les relations entre des sources et des écouteurs suggère l’utilisation de ce modèle est le traitement des événements de mise à jour provenant de sources pour les liaisons de données.</span><span class="sxs-lookup"><span data-stu-id="c92a8-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="c92a8-108">Vous pouvez utiliser le modèle WeakEvent pour écouter les événements qui sont externes à votre application.</span><span class="sxs-lookup"><span data-stu-id="c92a8-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="c92a8-109">Il vous suffit de définir un <xref:System.Windows.WeakEventManager> , fournir un comportement écoute dans <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>et utiliser le <xref:System.Windows.WeakEventManager> pour attacher le Gestionnaire de références plutôt que `+=`.</span><span class="sxs-lookup"><span data-stu-id="c92a8-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="c92a8-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c92a8-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span>
          </span>
        </param>
        <param name="sender">
          <span data-ttu-id="c92a8-111">Object that originated the event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c92a8-111">Object that originated the event.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="c92a8-112">Event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c92a8-112">Event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c92a8-113">Receives events from the centralized event manager.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c92a8-113">Receives events from the centralized event manager.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c92a8-114">
            <see langword="true" /> if the listener handled the event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c92a8-114">
              <see langword="true" /> if the listener handled the event.</span>
          </span>
          <span data-ttu-id="c92a8-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c92a8-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span>
          </span>
          <span data-ttu-id="c92a8-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c92a8-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c92a8-117">L’exemple suivant implémente <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> pour prendre en charge le modèle WeakEvent deux événements hypothétiques `ClockwiseSpin` et `CounterclockwiseSpin` qui ont chacune une dédiée <xref:System.Windows.WeakEventManager> (non illustré).</span><span class="sxs-lookup"><span data-stu-id="c92a8-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="c92a8-118">Cette implémentation appelle des stubs de gestionnaire de classe pour chaque événement pris en charge, la conversion des données d’événement (dans ce cas les deux événements partagent un type de données d’événement `SpinEventArgs`).</span><span class="sxs-lookup"><span data-stu-id="c92a8-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="c92a8-119">L’implémentation retourne `false` si l’événement reçu n’est pas un de ceux attendus.</span><span class="sxs-lookup"><span data-stu-id="c92a8-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c92a8-120">
            <para>Cette méthode est destinée à recevoir tous les événements possibles où le destinataire est dans une liste d’écouteurs. En particulier si l’implémentation pour une classe qui est à l’écoute pour plusieurs événements, vous devez vérifier le type d’entrant <paramref name="managerType" /> paramètre afin de déterminer l’appel de l’événement qui correspond au. C’est pourquoi chaque événement qui doit faire partie du modèle doit avoir une dédiée <see cref="T:System.Windows.WeakEventManager" />. En outre, le <paramref name="e" /> paramètre est de type général <see cref="T:System.EventArgs" />. Par conséquent, dans l’ordre, obtenir des propriétés spécifiques de données d’événement, votre implémentation doit effectuer un cast vers le type de données d’événement spécifique.  En règle générale, après avoir vérifié l’identité de l’événement selon le <see cref="T:System.Windows.WeakEventManager" /> type, votre implémentation doit appeler un gestionnaire de classe privée. Votre gestionnaire de classe peut être parfaitement le même gestionnaire de classe qui est utilisé pour gérer cet événement pour les écouteurs qui sont ajoutés via le modèle d’événement classique d’ajout par <see langword="+=" /> à l’événement sur l’expéditeur. La section suivante fournit un modèle d’implémentation approximative.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c92a8-120">
              <para>This method is intended to receive all possible events where the receiver is in a listener list. Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to. This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />. Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />. Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.  Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler. Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender. The following example section provides a rough implementation template.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>