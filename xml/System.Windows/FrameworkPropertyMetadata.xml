<Type Name="FrameworkPropertyMetadata" FullName="System.Windows.FrameworkPropertyMetadata">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50e37bc8286c8ba1961d7a1c298161a3c9e3100c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37492934" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkPropertyMetadata extends System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkPropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkPropertyMetadata&#xA;Inherits UIPropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkPropertyMetadata : System::Windows::UIPropertyMetadata" />
  <TypeSignature Language="F#" Value="type FrameworkPropertyMetadata = class&#xA;    inherit UIPropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIPropertyMetadata</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8d829-101">Signale ou applique des métadonnées pour une propriété de dépendance, en ajoutant des caractéristiques de propriétés système spécifiques à l’infrastructure.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8d829-101">Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-102">Cette classe est dérivée de <xref:System.Windows.PropertyMetadata> (via <xref:System.Windows.UIPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="8d829-102">This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) .</span></span> <span data-ttu-id="8d829-103">La plupart des cas de développement d’applications au niveau du framework WPF, <xref:System.Windows.FrameworkPropertyMetadata> est le type utilisé pour les métadonnées de propriété de dépendance, plutôt que les types de métadonnées de base <xref:System.Windows.PropertyMetadata> ou <xref:System.Windows.UIPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="8d829-103">For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>.</span></span> <span data-ttu-id="8d829-104">Cela est vrai pour les propriétés de dépendance existantes et pour la plupart des scénarios de propriété de dépendance personnalisée.</span><span class="sxs-lookup"><span data-stu-id="8d829-104">This is true both for existing dependency properties and for most custom dependency property scenarios.</span></span>  
  
 <span data-ttu-id="8d829-105">Les membres déclarés par cette classe qui complètent la <xref:System.Windows.PropertyMetadata> classe de base incluent différentes propriétés booléennes qui spécifient ou le comportement de système de propriété de niveau infrastructure WPF telles que l’héritage de propriété de liaison de données et de mise en page de rapport.</span><span class="sxs-lookup"><span data-stu-id="8d829-105">The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</span></span>  
  
 <span data-ttu-id="8d829-106">Plusieurs signatures de constructeur pour créer un <xref:System.Windows.FrameworkPropertyMetadata> instance prennent un <xref:System.Windows.FrameworkPropertyMetadataOptions> paramètre.</span><span class="sxs-lookup"><span data-stu-id="8d829-106">Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter.</span></span> <span data-ttu-id="8d829-107">Le <xref:System.Windows.FrameworkPropertyMetadataOptions> énumération est utilisée uniquement pour spécifier le comportement initial dans le constructeur et n’est pas exposée après <xref:System.Windows.FrameworkPropertyMetadata> est construit.</span><span class="sxs-lookup"><span data-stu-id="8d829-107">The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed.</span></span> <span data-ttu-id="8d829-108">À partir d’une instance construite, vous pouvez obtenir ou définir les informations correspondantes à travers différentes propriétés qui partagent le nom des valeurs d’énumération utilisé dans l’appel de constructeur.</span><span class="sxs-lookup"><span data-stu-id="8d829-108">From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</span></span>  
  
<a name="xamlTextUsage_FrameworkPropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-109">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-109">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-110">Cette classe n’est généralement pas utilisée dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-110">This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-111">L’exemple suivant obtient des métadonnées pour une propriété de dépendance sur un propriétaire particulier en tant que la première base <xref:System.Windows.PropertyMetadata> type.</span><span class="sxs-lookup"><span data-stu-id="8d829-111">The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type.</span></span> <span data-ttu-id="8d829-112">Ces métadonnées sont castée en <xref:System.Windows.FrameworkPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="8d829-112">That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="8d829-113">Si la conversion a retourné un valide <xref:System.Windows.FrameworkPropertyMetadata>, puis diverses <xref:System.Windows.FrameworkPropertyMetadata> valeurs de propriété sont signalés via une interface simple (non illustrée).</span><span class="sxs-lookup"><span data-stu-id="8d829-113">If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.PropertyMetadata" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-114">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-114">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8d829-115">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-115">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-116">Cette signature initialise toutes les valeurs de <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> à leurs valeurs par défaut de la propriété.</span><span class="sxs-lookup"><span data-stu-id="8d829-116">This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults.</span></span> <span data-ttu-id="8d829-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> sera `null`et les différentes <xref:System.Windows.FrameworkPropertyMetadata> propriétés booléennes sera `false`.</span><span class="sxs-lookup"><span data-stu-id="8d829-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="8d829-118">Valeur par défaut de la propriété de dépendance, habituellement fournie comme valeur d'un type spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-118">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-119">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" /> avec la valeur par défaut spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-119">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified default value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-120">Le type de la valeur fournie pour `defaultValue` doit correspondre ou être lié au type spécifié dans l’inscription d’origine de la propriété de dépendance qui s’appliqueront à ces métadonnées.</span><span class="sxs-lookup"><span data-stu-id="8d829-120">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="8d829-121">Les incompatibilités entre le type de valeur par défaut de métadonnées et le type de la propriété de dépendance qu'il est appliqué peuvent être difficiles à déboguer, car elles ne sont pas détectables pendant la compilation.</span><span class="sxs-lookup"><span data-stu-id="8d829-121">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="8d829-122">Le système de propriétés n’évalue pas la valeur effective d’une propriété jusqu’au moment de l’exécution, le résultat d’une incompatibilité de type de types et des propriétés de valeur par défaut est une erreur d’exécution.</span><span class="sxs-lookup"><span data-stu-id="8d829-122">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="8d829-123">La valeur <xref:System.Windows.DependencyProperty.UnsetValue> a une signification spéciale dans le système de propriétés et ne peut pas être utilisé comme une valeur par défaut de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="8d829-123">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-124">L’exemple suivant appelle cette signature de constructeur :</span><span class="sxs-lookup"><span data-stu-id="8d829-124">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8d829-125">
            <paramref name="defaultValue" /> a la valeur <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-125">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="8d829-126">Référence à l'implémentation d'un gestionnaire que le système de propriétés appelle à chaque fois que la valeur effective de la propriété change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-126">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-127">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" /> avec le rappel <see cref="T:System.Windows.PropertyChangedCallback" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-127">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8d829-128">L’exemple suivant appelle cette signature de constructeur :</span><span class="sxs-lookup"><span data-stu-id="8d829-128">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="8d829-129">Valeur par défaut de la propriété de dépendance, habituellement fournie comme valeur d'un type spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-129">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="8d829-130">Indicateurs d'option de métadonnées (combinaison des valeurs <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-130">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="8d829-131">Ces options spécifient les caractéristiques de la propriété de dépendance qui interagissent avec les systèmes tels qu'une présentation ou une liaison de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-131">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-132">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" /> avec la valeur par défaut et les options de métadonnées au niveau de l'infrastructure fournies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-132">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework-level metadata options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-133">Le type de la valeur fournie pour `defaultValue` doit correspondre ou être lié au type spécifié dans l’inscription d’origine de la propriété de dépendance qui s’appliqueront à ces métadonnées.</span><span class="sxs-lookup"><span data-stu-id="8d829-133">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="8d829-134">Les incompatibilités entre le type de valeur par défaut de métadonnées et le type de la propriété de dépendance qu'il est appliqué peuvent être difficiles à déboguer, car elles ne sont pas détectables pendant la compilation.</span><span class="sxs-lookup"><span data-stu-id="8d829-134">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="8d829-135">Le système de propriétés n’évalue pas la valeur effective d’une propriété jusqu’au moment de l’exécution, le résultat d’une incompatibilité de type de types et des propriétés de valeur par défaut est une erreur d’exécution.</span><span class="sxs-lookup"><span data-stu-id="8d829-135">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="8d829-136">La valeur <xref:System.Windows.DependencyProperty.UnsetValue> a une signification spéciale dans le système de propriétés et ne peut pas être utilisé comme une valeur par défaut de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="8d829-136">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="8d829-137">Les valeurs marquées comme indicateurs définis dans le `flags` paramètre définit la valeur booléenne de <xref:System.Windows.FrameworkPropertyMetadata> propriétés qui correspondent au <xref:System.Windows.FrameworkPropertyMetadataOptions> nom de cet indicateur `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-137">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="8d829-138">Vous pouvez ensuite modifier les valeurs des propriétés dans les métadonnées, tant que les métadonnées n’ont pas encore été appliquées à une opération de système de propriétés spécifiques.</span><span class="sxs-lookup"><span data-stu-id="8d829-138">You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-139">L’exemple suivant appelle cette signature de constructeur :</span><span class="sxs-lookup"><span data-stu-id="8d829-139">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8d829-140">
            <paramref name="defaultValue" /> a la valeur <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-140">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="8d829-141">Valeur par défaut de la propriété de dépendance, habituellement fournie comme valeur d'un type spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-141">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="8d829-142">Référence à l'implémentation d'un gestionnaire que le système de propriétés appelle à chaque fois que la valeur effective de la propriété change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-142">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-143">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" /> avec la valeur par défaut fournie et le rappel <see cref="T:System.Windows.PropertyChangedCallback" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-143">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-144">Le type de la valeur fournie pour `defaultValue` doit correspondre ou être lié au type spécifié dans l’inscription d’origine de la propriété de dépendance qui s’appliqueront à ces métadonnées.</span><span class="sxs-lookup"><span data-stu-id="8d829-144">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="8d829-145">Les incompatibilités entre le type de valeur par défaut de métadonnées et le type de la propriété de dépendance qu'il est appliqué peuvent être difficiles à déboguer, car elles ne sont pas détectables pendant la compilation.</span><span class="sxs-lookup"><span data-stu-id="8d829-145">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="8d829-146">Le système de propriétés n’évalue pas la valeur effective d’une propriété jusqu’au moment de l’exécution, le résultat d’une incompatibilité de type de types et des propriétés de valeur par défaut est une erreur d’exécution.</span><span class="sxs-lookup"><span data-stu-id="8d829-146">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="8d829-147">La valeur <xref:System.Windows.DependencyProperty.UnsetValue> a une signification spéciale dans le système de propriétés et ne peut pas être utilisé comme une valeur par défaut de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="8d829-147">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-148">L’exemple suivant appelle cette signature de constructeur :</span><span class="sxs-lookup"><span data-stu-id="8d829-148">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8d829-149">
            <paramref name="defaultValue" /> a la valeur <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-149">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="8d829-150">Référence à l'implémentation d'un gestionnaire que le système de propriétés appelle à chaque fois que la valeur effective de la propriété change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-150">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="8d829-151">Une référence à l'implémentation d'un gestionnaire sera appelée à chaque fois que le système de propriétés appelle <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> pour cette propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-151">A reference to a handler implementation will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-152">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" /> avec les rappels spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-152">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-153">Cette implémentation appelle un initialiseur de base, puis ajoute le `coerceValueCallback` en définissant la propriété sur l’instance de base.</span><span class="sxs-lookup"><span data-stu-id="8d829-153">This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-154">L’exemple suivant appelle cette signature de constructeur :</span><span class="sxs-lookup"><span data-stu-id="8d829-154">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="8d829-155">Valeur par défaut de la propriété de dépendance, habituellement fournie comme valeur d'un type spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-155">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="8d829-156">Indicateurs d'option de métadonnées (combinaison des valeurs <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-156">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="8d829-157">Ces options spécifient les caractéristiques de la propriété de dépendance qui interagissent avec les systèmes tels qu'une présentation ou une liaison de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-157">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="8d829-158">Référence à l'implémentation d'un gestionnaire que le système de propriétés appelle à chaque fois que la valeur effective de la propriété change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-158">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-159">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" /> avec la valeur par défaut et les options de métadonnées au niveau de l'infrastructure fournies, et le rappel <see cref="T:System.Windows.PropertyChangedCallback" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-159">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-160">Le type de la valeur fournie pour `defaultValue` doit correspondre ou être lié au type spécifié dans l’inscription d’origine de la propriété de dépendance qui s’appliqueront à ces métadonnées.</span><span class="sxs-lookup"><span data-stu-id="8d829-160">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="8d829-161">Les incompatibilités entre le type de valeur par défaut de métadonnées et le type de la propriété de dépendance qu'il est appliqué peuvent être difficiles à déboguer, car elles ne sont pas détectables pendant la compilation.</span><span class="sxs-lookup"><span data-stu-id="8d829-161">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="8d829-162">Le système de propriétés n’évalue pas la valeur effective d’une propriété jusqu’au moment de l’exécution, le résultat d’une incompatibilité de type de types et des propriétés de valeur par défaut est une erreur d’exécution.</span><span class="sxs-lookup"><span data-stu-id="8d829-162">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="8d829-163">La valeur <xref:System.Windows.DependencyProperty.UnsetValue> a une signification spéciale dans le système de propriétés et ne peut pas être utilisé comme une valeur par défaut de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="8d829-163">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="8d829-164">Les valeurs marquées comme indicateurs définis dans le `flags` paramètre définit la valeur booléenne de <xref:System.Windows.FrameworkPropertyMetadata> propriétés qui correspondent au <xref:System.Windows.FrameworkPropertyMetadataOptions> nom de cet indicateur `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-164">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="8d829-165">Vous pouvez toujours modifier les valeurs des propriétés dans les métadonnées, tant que les métadonnées n’ont pas encore été appliquées à une opération de système de propriétés spécifiques.</span><span class="sxs-lookup"><span data-stu-id="8d829-165">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-166">L’exemple suivant appelle cette signature de constructeur :</span><span class="sxs-lookup"><span data-stu-id="8d829-166">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8d829-167">
            <paramref name="defaultValue" /> a la valeur <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-167">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="8d829-168">Valeur par défaut de la propriété de dépendance, habituellement fournie comme un type spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-168">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="8d829-169">Référence à l'implémentation d'un gestionnaire que le système de propriétés appelle à chaque fois que la valeur effective de la propriété change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-169">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="8d829-170">Référence à l'implémentation d'un gestionnaire qui sera appelée à chaque fois que le système de propriétés appelle <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> pour cette propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-170">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-171">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" /> avec la valeur par défaut fournie et les rappels spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-171">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-172">Le type de la valeur fournie pour `defaultValue` doit correspondre ou être lié au type spécifié dans l’inscription d’origine de la propriété de dépendance qui s’appliqueront à ces métadonnées.</span><span class="sxs-lookup"><span data-stu-id="8d829-172">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="8d829-173">Les incompatibilités entre le type de valeur par défaut de métadonnées et le type de la propriété de dépendance qu'il est appliqué peuvent être difficiles à déboguer, car elles ne sont pas détectables pendant la compilation.</span><span class="sxs-lookup"><span data-stu-id="8d829-173">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="8d829-174">Le système de propriétés n’évalue pas la valeur effective d’une propriété jusqu’au moment de l’exécution, le résultat d’une incompatibilité de type de types et des propriétés de valeur par défaut est une erreur d’exécution.</span><span class="sxs-lookup"><span data-stu-id="8d829-174">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="8d829-175">La valeur <xref:System.Windows.DependencyProperty.UnsetValue> a une signification spéciale dans le système de propriétés et ne peut pas être utilisé comme une valeur par défaut de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="8d829-175">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-176">L’exemple suivant appelle cette signature de constructeur :</span><span class="sxs-lookup"><span data-stu-id="8d829-176">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8d829-177">
            <paramref name="defaultValue" /> a la valeur <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-177">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="8d829-178">Valeur par défaut de la propriété de dépendance, habituellement fournie comme un type spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-178">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="8d829-179">Indicateurs d'option de métadonnées (combinaison des valeurs <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-179">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="8d829-180">Ces options spécifient les caractéristiques de la propriété de dépendance qui interagissent avec les systèmes tels qu'une présentation ou une liaison de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-180">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="8d829-181">Référence à l'implémentation d'un gestionnaire que le système de propriétés appelle à chaque fois que la valeur effective de la propriété change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-181">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="8d829-182">Référence à l'implémentation d'un gestionnaire qui sera appelée à chaque fois que le système de propriétés appelle <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> à l'aide de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-182">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-183">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" /> avec la valeur par défaut et les options de métadonnées au niveau de l'infrastructure fournies, et les rappels spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-183">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-184">Le type de la valeur fournie pour `defaultValue` doit correspondre ou être lié au type spécifié dans l’inscription d’origine de la propriété de dépendance qui s’appliqueront à ces métadonnées.</span><span class="sxs-lookup"><span data-stu-id="8d829-184">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="8d829-185">Les incompatibilités entre le type de valeur par défaut de métadonnées et le type de la propriété de dépendance qu'il est appliqué peuvent être difficiles à déboguer, car elles ne sont pas détectables pendant la compilation.</span><span class="sxs-lookup"><span data-stu-id="8d829-185">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="8d829-186">Le système de propriétés n’évalue pas la valeur effective d’une propriété jusqu’au moment de l’exécution, le résultat d’une incompatibilité de type de types et des propriétés de valeur par défaut est une erreur d’exécution.</span><span class="sxs-lookup"><span data-stu-id="8d829-186">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="8d829-187">La valeur <xref:System.Windows.DependencyProperty.UnsetValue> a une signification spéciale dans le système de propriétés et ne peut pas être utilisé comme une valeur par défaut de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="8d829-187">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="8d829-188">Les valeurs marquées comme indicateurs définis dans le `flags` paramètre définit la valeur booléenne de <xref:System.Windows.FrameworkPropertyMetadata> propriétés qui correspondent au <xref:System.Windows.FrameworkPropertyMetadataOptions> nom de cet indicateur `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-188">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="8d829-189">Vous pouvez toujours modifier les valeurs des propriétés dans les métadonnées, tant que les métadonnées n’ont pas encore été appliquées à une opération de système de propriétés spécifiques.</span><span class="sxs-lookup"><span data-stu-id="8d829-189">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-190">L’exemple suivant appelle cette signature de constructeur :</span><span class="sxs-lookup"><span data-stu-id="8d829-190">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8d829-191">
            <paramref name="defaultValue" /> a la valeur <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-191">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="8d829-192">Valeur par défaut de la propriété de dépendance, habituellement fournie comme un type spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-192">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="8d829-193">Indicateurs d'option de métadonnées (combinaison des valeurs <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-193">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="8d829-194">Ces options spécifient les caractéristiques de la propriété de dépendance qui interagissent avec les systèmes tels qu'une présentation ou une liaison de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-194">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="8d829-195">Référence à l'implémentation d'un gestionnaire que le système de propriétés appelle à chaque fois que la valeur effective de la propriété change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-195">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="8d829-196">Référence à l'implémentation d'un gestionnaire qui sera appelée à chaque fois que le système de propriétés appelle <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> sur cette propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-196">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> on this dependency property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="8d829-197">
            <see langword="true" /> pour éviter que le système de propriétés anime la propriété à laquelle ces métadonnées sont appliquées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-197">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="8d829-198">De telles propriétés déclenchent une exception runtime qui provient du système de propriétés si des tentatives d'animation ont lieu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-198">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="8d829-199">
            <see langword="false" /> pour autoriser l'animation de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-199">
              <see langword="false" /> to permit animating the property.</span>
          </span>
          <span data-ttu-id="8d829-200">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-200">The default is <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-201">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" /> avec la valeur par défaut et les options de métadonnées au niveau de l'infrastructure fournies, les rappels spécifiés et une valeur booléenne qui peut être utilisée pour empêcher l'animation de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-201">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-202">Le type de la valeur fournie pour `defaultValue` doit correspondre ou être lié au type spécifié dans l’inscription d’origine de la propriété de dépendance qui s’appliqueront à ces métadonnées.</span><span class="sxs-lookup"><span data-stu-id="8d829-202">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="8d829-203">Les incompatibilités entre le type de valeur par défaut de métadonnées et le type de la propriété de dépendance qu'il est appliqué peuvent être difficiles à déboguer, car elles ne sont pas détectables pendant la compilation.</span><span class="sxs-lookup"><span data-stu-id="8d829-203">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="8d829-204">Le système de propriétés n’évalue pas la valeur effective d’une propriété jusqu’au moment de l’exécution, le résultat d’une incompatibilité de type de types et des propriétés de valeur par défaut est une erreur d’exécution.</span><span class="sxs-lookup"><span data-stu-id="8d829-204">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="8d829-205">La valeur <xref:System.Windows.DependencyProperty.UnsetValue> a une signification spéciale dans le système de propriétés et ne peut pas être utilisé comme une valeur par défaut de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="8d829-205">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="8d829-206">Le `isAnimationProhibited` paramètre définit la valeur initiale de la <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> propriété déclarée par la base immédiate <xref:System.Windows.UIPropertyMetadata> classe.</span><span class="sxs-lookup"><span data-stu-id="8d829-206">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="8d829-207">Les valeurs marquées comme indicateurs définis dans le `flags` paramètre définit la valeur booléenne de <xref:System.Windows.FrameworkPropertyMetadata> propriétés qui correspondent au <xref:System.Windows.FrameworkPropertyMetadataOptions> nom de cet indicateur `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-207">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="8d829-208">Vous pouvez toujours modifier les valeurs des propriétés dans les métadonnées, tant que les métadonnées n’ont pas encore été appliquées à une opération de système de propriétés spécifiques.</span><span class="sxs-lookup"><span data-stu-id="8d829-208">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-209">L’exemple suivant appelle cette signature de constructeur :</span><span class="sxs-lookup"><span data-stu-id="8d829-209">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8d829-210">
            <paramref name="defaultValue" /> a la valeur <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-210">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, valuetype System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited, System::Windows::Data::UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool * System.Windows.Data.UpdateSourceTrigger -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited, defaultUpdateSourceTrigger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
        <Parameter Name="defaultUpdateSourceTrigger" Type="System.Windows.Data.UpdateSourceTrigger" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="8d829-211">Valeur par défaut de la propriété de dépendance, habituellement fournie comme un type spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-211">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="8d829-212">Indicateurs d'option de métadonnées (combinaison des valeurs <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-212">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="8d829-213">Ces options spécifient les caractéristiques de la propriété de dépendance qui interagissent avec les systèmes tels qu'une présentation ou une liaison de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-213">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="8d829-214">Référence à l'implémentation d'un gestionnaire que le système de propriétés appelle à chaque fois que la valeur effective de la propriété change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-214">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="8d829-215">Référence à l'implémentation d'un gestionnaire qui sera appelée à chaque fois que le système de propriétés appelle <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> à l'aide de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-215">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="8d829-216">
            <see langword="true" /> pour éviter que le système de propriétés anime la propriété à laquelle ces métadonnées sont appliquées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-216">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="8d829-217">De telles propriétés déclenchent une exception runtime qui provient du système de propriétés si des tentatives d'animation ont lieu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-217">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="8d829-218">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-218">The default is <see langword="false" />.</span>
          </span>
        </param>
        <param name="defaultUpdateSourceTrigger">
          <span data-ttu-id="8d829-219">
            <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> à utiliser lorsque les liaisons pour cette propriété sont appliquées et dont la valeur de leur <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> est <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-219">The <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for this property are applied that have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-220">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.FrameworkPropertyMetadata" /> avec la valeur par défaut et les options de métadonnées au niveau de l'infrastructure fournies, les rappels spécifiés, une valeur booléenne qui peut être utilisée pour empêcher l'animation de la propriété, et un déclencheur de mise à jour de liaison de données par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-220">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-221">Le type de la valeur fournie pour `defaultValue` doit correspondre ou être lié au type spécifié dans l’inscription d’origine de la propriété de dépendance qui s’appliqueront à ces métadonnées.</span><span class="sxs-lookup"><span data-stu-id="8d829-221">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="8d829-222">Les incompatibilités entre le type de valeur par défaut de métadonnées et le type de la propriété de dépendance qu'il est appliqué peuvent être difficiles à déboguer, car elles ne sont pas détectables pendant la compilation.</span><span class="sxs-lookup"><span data-stu-id="8d829-222">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="8d829-223">Le système de propriétés n’évalue pas la valeur effective d’une propriété jusqu’au moment de l’exécution, le résultat d’une incompatibilité de type de types et des propriétés de valeur par défaut est une erreur d’exécution.</span><span class="sxs-lookup"><span data-stu-id="8d829-223">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="8d829-224">La valeur <xref:System.Windows.DependencyProperty.UnsetValue> a une signification spéciale dans le système de propriétés et ne peut pas être utilisé comme une valeur par défaut de propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="8d829-224">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="8d829-225">Le `isAnimationProhibited` paramètre définit la valeur initiale de la <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> propriété déclarée par la base immédiate <xref:System.Windows.UIPropertyMetadata> classe.</span><span class="sxs-lookup"><span data-stu-id="8d829-225">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="8d829-226">Pour plus d’informations sur le comportement de source de mise à jour pour les liaisons, consultez [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).</span><span class="sxs-lookup"><span data-stu-id="8d829-226">For more information about the update source behavior for bindings, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="8d829-227">Les valeurs marquées comme indicateurs définis dans le `flags` paramètre définit la valeur booléenne de <xref:System.Windows.FrameworkPropertyMetadata> propriétés qui correspondent au <xref:System.Windows.FrameworkPropertyMetadataOptions> nom de cet indicateur `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-227">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="8d829-228">Vous pouvez toujours modifier les valeurs des propriétés dans les métadonnées, tant que les métadonnées n’ont pas encore été appliquées à une opération de système de propriétés spécifiques.</span><span class="sxs-lookup"><span data-stu-id="8d829-228">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8d829-229">
            <paramref name="defaultValue" /> a la valeur <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-229">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName="AffectsArrange">
      <MemberSignature Language="C#" Value="public bool AffectsArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-230">Obtient ou définit une valeur qui indique si une propriété de dépendance peut affecter la passe de réorganisation durant les opérations du moteur de disposition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-230">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-231">
            <see langword="true" /> si la propriété de dépendance sur laquelle ces métadonnées existent peut affecter la passe de réorganisation ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-231">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d829-232">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-232">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-233"><xref:System.Windows.FrameworkElement> et <xref:System.Windows.FrameworkContentElement> incluent une implémentation de <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> qui surveille les modifications de valeur effective de toutes les propriétés de dépendance qui existent sur un élément.</span><span class="sxs-lookup"><span data-stu-id="8d829-233"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="8d829-234">Dans le cadre de cette logique, des propriétés de dépendance qui modifient l’effet valeur et qui ont des métadonnées avec <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> définie sur `true` lance une demande différée pour invalider les visuels de cet élément (un appel à <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span><span class="sxs-lookup"><span data-stu-id="8d829-234">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span></span> <span data-ttu-id="8d829-235">Étant donné que cette implémentation de niveau infrastructure WPF est déjà en place, en général inutile rechercher des propriétés de dépendance avec <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> , sauf si vous sont essentiellement de remplacer ou de modifier le comportement de disposition de niveau framework WPF.</span><span class="sxs-lookup"><span data-stu-id="8d829-235">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="8d829-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implémentations peuvent choisir d’avoir un comportement similaire pour les modifications de propriété de dépendance où <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="8d829-237">Propriétés des classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-237">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-238">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-238">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-239">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-239">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-240">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-240">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-241">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-241">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-242">Membres de cette classe sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-242">Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-243">L’exemple suivant récupère les métadonnées à partir de la dépendance différents champs de propriété, interroge la valeur de divers <xref:System.Windows.FrameworkPropertyMetadata> propriétés dessus et utilise les informations pour remplir une table pour implémenter un « navigateur de métadonnées ».</span><span class="sxs-lookup"><span data-stu-id="8d829-243">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-244">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-244">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-245">Obtient ou définit une valeur qui indique si une propriété de dépendance peut affecter la passe de mesure pendant des opérations du moteur de présentation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-245">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-246">
            <see langword="true" /> si la propriété de dépendance sur laquelle ces métadonnées existent peut affecter la passe de mesure ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-246">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d829-247">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-247">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-248"><xref:System.Windows.FrameworkElement> et <xref:System.Windows.FrameworkContentElement> incluent une implémentation de <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> qui surveille les modifications de valeur effective de toutes les propriétés de dépendance qui existent sur un élément.</span><span class="sxs-lookup"><span data-stu-id="8d829-248"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="8d829-249">Dans le cadre de cette logique, des propriétés de dépendance qui modifient l’effet valeur et qui ont des métadonnées avec <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> la valeur `true` lance une demande différée pour invalider les visuels de cet élément.</span><span class="sxs-lookup"><span data-stu-id="8d829-249">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="8d829-250">Étant donné que cette implémentation de niveau infrastructure WPF est déjà en place, en général inutile rechercher des propriétés de dépendance avec <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> , sauf si vous sont essentiellement de remplacer ou de modifier le comportement de disposition de niveau framework WPF.</span><span class="sxs-lookup"><span data-stu-id="8d829-250">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="8d829-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implémentations peuvent choisir d’avoir un comportement similaire pour les modifications de propriété de dépendance où <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="8d829-252">Propriétés des classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-252">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-253">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-253">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-254">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-254">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-255">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-255">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-256">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-256">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-257">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-257">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-258">L’exemple suivant récupère les métadonnées à partir de la dépendance différents champs de propriété, interroge la valeur de divers <xref:System.Windows.FrameworkPropertyMetadata> propriétés dessus et utilise les informations pour remplir une table pour implémenter un « navigateur de métadonnées ».</span><span class="sxs-lookup"><span data-stu-id="8d829-258">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-259">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-259">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentArrange">
      <MemberSignature Language="C#" Value="public bool AffectsParentArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-260">Obtient ou définit une valeur qui indique si une propriété de dépendance peut affecter la passe de réorganisation de la disposition de son élément parent durant les opérations du moteur de disposition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-260">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-261">
            <see langword="true" /> si la propriété de dépendance sur laquelle ces métadonnées existent peut affecter la passe de réorganisation spécifiquement sur son élément parent ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-261">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d829-262">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-262">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-263"><xref:System.Windows.FrameworkElement> et <xref:System.Windows.FrameworkContentElement> incluent une implémentation de <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> qui surveille les modifications de valeur effective de toutes les propriétés de dépendance qui existent sur un élément.</span><span class="sxs-lookup"><span data-stu-id="8d829-263"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="8d829-264">Dans le cadre de cette logique, des propriétés de dépendance qui modifient l’effet valeur et qui ont des métadonnées avec <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> la valeur `true` lance une demande différée pour invalider les visuels de l’élément parent.</span><span class="sxs-lookup"><span data-stu-id="8d829-264">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span>  
  
 <span data-ttu-id="8d829-265">En règle générale, vous n’avez pas besoin pour signaler les modifications d’un <xref:System.Windows.FrameworkElement> propriété à un élément parent à l’aide <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> , car l’élément lui-même aurait déjà son propre <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> comme `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-265">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`.</span></span> <span data-ttu-id="8d829-266">C’est généralement suffisant, car les modifications dans l’élément enfant déclenchent généralement une organisation du parent lorsque cela est approprié.</span><span class="sxs-lookup"><span data-stu-id="8d829-266">That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</span></span> <span data-ttu-id="8d829-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> est parfois utilisé pour un <xref:System.Windows.FrameworkContentElement> classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="8d829-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="8d829-268">Dans ce cas, l’élément enfant définit une propriété, mais qu’un <xref:System.Windows.FrameworkContentElement> classe dérivée ne contrôle pas son propre rendu.</span><span class="sxs-lookup"><span data-stu-id="8d829-268">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="8d829-269">Le rendu est géré par un <xref:System.Windows.FrameworkElement> élément parent qui sert de l’hôte de contenu.</span><span class="sxs-lookup"><span data-stu-id="8d829-269">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="8d829-270">Par exemple, une modification à la valeur de la <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> propriété jointe par un élément enfant invalide organisation du parent, parce que la position de l’enfant dans le parent doit être modifiée.</span><span class="sxs-lookup"><span data-stu-id="8d829-270">For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</span></span> <span data-ttu-id="8d829-271">Par conséquent, le <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> propriété jointe possède des métadonnées où <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-271">Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span> <span data-ttu-id="8d829-272">Un autre exemple est <xref:System.Windows.Controls.Control.Padding%2A>; lorsque cette propriété change, le parent peut modifier le positionnement de l’enfant, en fonction de l’espace disponible.</span><span class="sxs-lookup"><span data-stu-id="8d829-272">Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.</span></span>  
  
 <span data-ttu-id="8d829-273">Étant donné que cette implémentation de niveau infrastructure WPF est déjà en place, en général inutile rechercher des propriétés de dépendance avec <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> , sauf si vous sont essentiellement de remplacer ou de modifier le comportement de disposition de niveau framework WPF.</span><span class="sxs-lookup"><span data-stu-id="8d829-273">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="8d829-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implémentations peuvent choisir d’avoir un comportement similaire pour les modifications de propriété de dépendance où <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="8d829-275">Propriétés de toutes les classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-275">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-276">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-276">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-277">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-277">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-278">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-278">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-279">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-279">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-280">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-280">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-281">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-281">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsParentMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-282">Obtient ou définit une valeur qui indique si une propriété de dépendance peut affecter la passe de mesure de la disposition de son élément parent durant les opérations du moteur de disposition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-282">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-283">
            <see langword="true" /> si la propriété de dépendance sur laquelle ces métadonnées existent peut affecter la passe de mesure spécifiquement sur son élément parent ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-283">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <see langword="false" />.The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-284"><xref:System.Windows.FrameworkElement> et <xref:System.Windows.FrameworkContentElement> incluent une implémentation de <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> qui surveille les modifications de valeur effective de toutes les propriétés de dépendance qui existent sur un élément.</span><span class="sxs-lookup"><span data-stu-id="8d829-284"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="8d829-285">Dans le cadre de cette logique, des propriétés de dépendance qui modifient l’effet valeur et qui ont des métadonnées avec <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> la valeur `true` lance une demande différée pour invalider les visuels de l’élément parent.</span><span class="sxs-lookup"><span data-stu-id="8d829-285">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span> <span data-ttu-id="8d829-286">Étant donné que cette implémentation de niveau infrastructure WPF est déjà en place, en général inutile rechercher des propriétés de dépendance avec <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> , sauf si vous sont essentiellement de remplacer ou de modifier le comportement de disposition de niveau framework WPF.</span><span class="sxs-lookup"><span data-stu-id="8d829-286">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="8d829-287">En règle générale, vous n’avez pas besoin pour signaler les modifications d’un <xref:System.Windows.FrameworkElement> propriété à un élément parent à l’aide <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> , car l’élément lui-même aurait déjà son propre <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> comme `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-287">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`.</span></span> <span data-ttu-id="8d829-288">Qui est généralement suffisant, car les modifications dans l’élément enfant déclenchent généralement une passe de mesure parent lorsque cela est approprié.</span><span class="sxs-lookup"><span data-stu-id="8d829-288">That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</span></span> <span data-ttu-id="8d829-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> est parfois utilisé pour un <xref:System.Windows.FrameworkContentElement> classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="8d829-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="8d829-290">Dans ce cas, l’élément enfant définit une propriété, mais qu’un <xref:System.Windows.FrameworkContentElement> classe dérivée ne contrôle pas son propre rendu.</span><span class="sxs-lookup"><span data-stu-id="8d829-290">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="8d829-291">Le rendu est géré par un <xref:System.Windows.FrameworkElement> élément parent qui sert de l’hôte de contenu.</span><span class="sxs-lookup"><span data-stu-id="8d829-291">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="8d829-292">Par exemple, une modification à la valeur de la <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> propriété par un élément enfant invalide la mesure du parent, étant donné que l’espacement relatif des paragraphes peut changer et peut augmenter ou diminuer la taille de l’hôte de contenu.</span><span class="sxs-lookup"><span data-stu-id="8d829-292">For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</span></span> <span data-ttu-id="8d829-293">Par conséquent, le <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> propriété possède des métadonnées où <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-293">Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="8d829-294">Éléments de l’hôte de contenu recherchez aussi fréquemment des modifications dans les propriétés de dépendance où <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> est `true`, dans le cadre de la logique de rendu d’hôte de contenu.</span><span class="sxs-lookup"><span data-stu-id="8d829-294">Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic.</span></span> <span data-ttu-id="8d829-295">Par exemple, le <xref:System.Windows.Controls.TextBox> élément doit répondre à certaines modifications dans le texte qui peut requérir que le cadre englobant de la <xref:System.Windows.Controls.TextBox> lui-même soit modifié.</span><span class="sxs-lookup"><span data-stu-id="8d829-295">For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.</span></span>  
  
 <span data-ttu-id="8d829-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implémentations peuvent choisir d’avoir un comportement similaire pour les modifications de propriété de dépendance où <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="8d829-297">Propriétés de toutes les classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-297">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-298">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-298">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-299">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-299">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-300">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-300">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-301">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-301">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-302">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-302">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-303">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-303">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsRender">
      <MemberSignature Language="C#" Value="public bool AffectsRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-304">Obtient ou définit une valeur qui indique si une propriété de dépendance peut affecter la disposition générale d’une façon qui n’influence pas spécifiquement l’organisation ou la mesure, mais qui nécessiterait un nouveau dessin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-304">Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-305">
            <see langword="true" /> si la propriété de dépendance sur laquelle ces métadonnées existent affecte le rendu ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-305">
              <see langword="true" /> if the dependency property on which this metadata exists affects rendering; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d829-306">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-306">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-307"><xref:System.Windows.FrameworkElement> et <xref:System.Windows.FrameworkContentElement> incluent une implémentation de <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> qui surveille les modifications de valeur effective de toutes les propriétés de dépendance qui existent sur un élément.</span><span class="sxs-lookup"><span data-stu-id="8d829-307"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="8d829-308">Dans le cadre de cette logique, des propriétés de dépendance qui modifient l’effet valeur et qui ont des métadonnées avec <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> la valeur `true` lance une demande différée pour invalider les visuels de cet élément.</span><span class="sxs-lookup"><span data-stu-id="8d829-308">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="8d829-309">Étant donné que cette implémentation de niveau infrastructure WPF est déjà en place, en général inutile rechercher des propriétés de dépendance avec <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> , sauf si vous sont essentiellement de remplacer ou de modifier le comportement de disposition de niveau framework WPF.</span><span class="sxs-lookup"><span data-stu-id="8d829-309">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="8d829-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implémentations peuvent choisir d’avoir un comportement similaire pour les modifications de propriété de dépendance où <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="8d829-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.</span></span>  
  
 <span data-ttu-id="8d829-311">Propriétés de toutes les classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-311">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-312">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-312">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-313">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-313">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-314">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-314">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-315">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-315">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-316">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-316">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-317">L’exemple suivant récupère les métadonnées à partir de la dépendance différents champs de propriété, interroge la valeur de divers <xref:System.Windows.FrameworkPropertyMetadata> propriétés dessus et utilise les informations pour remplir une table pour implémenter un « navigateur de métadonnées ».</span><span class="sxs-lookup"><span data-stu-id="8d829-317">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-318">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-318">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="BindsTwoWayByDefault">
      <MemberSignature Language="C#" Value="public bool BindsTwoWayByDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsTwoWayByDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsTwoWayByDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsTwoWayByDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsTwoWayByDefault : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-319">Obtient ou définit une valeur qui indique si la propriété établit une liaison bidirectionnelle par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-319">Gets or sets a value that indicates whether the property binds two-way by default.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-320">
            <see langword="true" /> si la propriété de dépendance sur laquelle figurent ces métadonnées établit une liaison bidirectionnelle par défaut ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-320">
              <see langword="true" /> if the dependency property on which this metadata exists binds two-way by default; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d829-321">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-321">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-322">En l’absence de cette propriété en cours `true`, mises à jour de liaison sont unidirectionnelles par défaut, en fonction du comportement par défaut de la <xref:System.Windows.Data.Binding> constructeurs ou équivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntaxe.</span><span class="sxs-lookup"><span data-stu-id="8d829-322">In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="8d829-323">Dans les éléments existants, vous trouverez généralement cette propriété définie sur `true` dans les métadonnées pour les propriétés de dépendance qui signalent l’état et sont modifiables par l’utilisateur, par exemple <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="8d829-323">In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8d829-324">En règle générale, cette propriété signale uniquement les caractéristiques de mise à jour de liaison par défaut de la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="8d829-324">This property only reports the default binding update characteristics of the dependency property in general.</span></span> <span data-ttu-id="8d829-325">Toute liaison définie sur cette propriété sur une instance peut définir localement la <xref:System.Windows.Data.Binding.Mode%2A> propriété de la liaison et modifier cette valeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="8d829-325">Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.</span></span>  
  
 <span data-ttu-id="8d829-326">Propriétés de toutes les classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-326">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-327">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-327">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-328">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-328">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-329">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-329">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_BindsTwoWayByDefault"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-330">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-330">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-331">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-331">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-332">L’exemple suivant récupère les métadonnées à partir de la dépendance différents champs de propriété, interroge la valeur de divers <xref:System.Windows.FrameworkPropertyMetadata> propriétés dessus et utilise les informations pour remplir une table pour implémenter un « navigateur de métadonnées ».</span><span class="sxs-lookup"><span data-stu-id="8d829-332">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-333">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-333">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="DefaultUpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultUpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger DefaultUpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-334">Obtient ou définit la valeur par défaut pour <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> à utiliser lorsque les liaisons pour la propriété avec ces métadonnées sont appliquées, lesquelles ont leur <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> dont la valeur est <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-334">Gets or sets the default for <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for the property with this metadata are applied, which have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-335">Valeur de l'énumération, autre que <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-335">A value of the enumeration, other than <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-336">Propriétés des classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-336">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-337">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-337">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-338">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-338">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-339">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-339">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_DefaultUpdateSourceTrigger"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-340">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-340">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-341">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-341">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8d829-342">Cette propriété a la valeur <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> ; la valeur que vous définissez est supposée devenir la valeur par défaut lorsqu'elle est demandée par des liaisons.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-342">This property is set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; the value you set is supposed to become the default when requested by bindings.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-343">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-343">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public bool Inherits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherits" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherits As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherits { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Inherits : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-344">Obtient ou définit une valeur qui indique si la valeur de la propriété de dépendance peut être héritée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-344">Gets or sets a value that indicates whether the value of the dependency property is inheritable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-345">
            <see langword="true" /> si la valeur de propriété peut être héritée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-345">
              <see langword="true" /> if the property value is inheritable; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d829-346">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-346">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-347">L’héritage de valeur de propriété est une fonctionnalité de la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] système de propriétés au niveau du framework WPF, par laquelle certaines propriétés de dépendance peuvent être définies localement sur un élément à ou près de la racine un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] élément d’arborescence et ont leur valeur héritée par tous les éléments dans l’arborescence logique d’éléments enfants qui possèdent également cette propriété.</span><span class="sxs-lookup"><span data-stu-id="8d829-347">Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</span></span> <span data-ttu-id="8d829-348">L’héritage de valeur de propriété n’est pas activé par défaut, et son activation a certaines conséquences sur les performances.</span><span class="sxs-lookup"><span data-stu-id="8d829-348">Property value inheritance is not enabled by default, and enabling it does have some performance implications.</span></span> <span data-ttu-id="8d829-349">Pour plus d’informations, consultez [Héritage de la valeur de propriété](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="8d829-349">For details, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8d829-350">Bien que l’héritage de valeur de propriété peut sembler fonctionner pour les propriétés de dépendance non jointes, le comportement de l’héritage d’une propriété non jointes par certaines divisions objet-objet dans l’arborescence d’exécution est indéfini.</span><span class="sxs-lookup"><span data-stu-id="8d829-350">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</span></span> <span data-ttu-id="8d829-351">Utilisez toujours <xref:System.Windows.DependencyProperty.RegisterAttached%2A> pour inscrire des propriétés où vous spécifiez <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="8d829-351">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span>  
  
 <span data-ttu-id="8d829-352">Propriétés des classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-352">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-353">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-353">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-354">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-354">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-355">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-355">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Inherits"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-356">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-356">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-357">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-357">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-358">L’exemple suivant récupère les métadonnées à partir de la dépendance différents champs de propriété, interroge la valeur de divers <xref:System.Windows.FrameworkPropertyMetadata> propriétés dessus et utilise les informations pour remplir une table pour implémenter un « navigateur de métadonnées ».</span><span class="sxs-lookup"><span data-stu-id="8d829-358">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-359">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-359">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsDataBindingAllowed">
      <MemberSignature Language="C#" Value="public bool IsDataBindingAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataBindingAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDataBindingAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataBindingAllowed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDataBindingAllowed : bool" Usage="System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-360">Obtient ou définit une valeur qui indique si la liaison de données est prise en charge pour la propriété de dépendance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-360">Gets a value that indicates whether data binding is supported for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-361">
            <see langword="true" /> si la liaison de données est prise en charge sur la propriété de dépendance à laquelle ces métadonnées s'appliquent ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-361">
              <see langword="true" /> if data binding is supported on the dependency property to which this metadata applies; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d829-362">La valeur par défaut est <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-362">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-363">Cette propriété signale `false` pour l’une des deux conditions possibles : liaison de données à une propriété de dépendance n’est pas autorisée, car la propriété de dépendance est en lecture seule (comme indiqué dans l’identificateur de propriété de dépendance, pas les métadonnées), ou la valeur de une autre propriété de métadonnées, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, a la valeur `true` dans ces métadonnées.</span><span class="sxs-lookup"><span data-stu-id="8d829-363">This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata.</span></span> <span data-ttu-id="8d829-364">Cette propriété est exposée en tant que pour des raisons pratiques afin que les appelants n’aient pas à vérifier les deux <xref:System.Windows.DependencyProperty.ReadOnly%2A> et <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="8d829-364">This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span>  
  
 <span data-ttu-id="8d829-365">Si vous essayez de créer des métadonnées qui spécifie qu’une propriété en lecture/écriture ne doit pas prendre en charge la liaison de données, spécifiez l’indicateur <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (Notez la légère différence de convention d’affectation de noms et <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span><span class="sxs-lookup"><span data-stu-id="8d829-365">If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span></span>  
  
<a name="xamlTextUsage_IsDataBindingAllowed"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-366">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-366">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-367">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-367">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d829-368">L’exemple suivant récupère les métadonnées à partir de la dépendance différents champs de propriété, interroge la valeur de divers <xref:System.Windows.FrameworkPropertyMetadata> propriétés dessus et utilise les informations pour remplir une table pour implémenter un « navigateur de métadonnées ».</span><span class="sxs-lookup"><span data-stu-id="8d829-368">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsNotDataBindable">
      <MemberSignature Language="C#" Value="public bool IsNotDataBindable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotDataBindable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNotDataBindable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotDataBindable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNotDataBindable : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-369">Obtient ou définit une valeur qui indique si la propriété de dépendance prend en charge la liaison de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-369">Gets or sets a value that indicates whether the dependency property supports data binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-370">
            <see langword="true" /> si la propriété ne prend pas en charge la liaison de données ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-370">
              <see langword="true" /> if the property does not support data binding; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d829-371">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-371">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-372">Notez que cette propriété de métadonnées est définie sur `true` spécifiquement pour les propriétés qui ne doivent pas prendre en charge la liaison de données, en dépit d’en cours de propriétés en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-372">Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties.</span></span> <span data-ttu-id="8d829-373">L’attente est que dans la plupart des cas où une propriété de dépendance est déclarée, liaison de données est souhaitée, car la liaison de données est un des principaux scénarios où une propriété de dépendance est utile.</span><span class="sxs-lookup"><span data-stu-id="8d829-373">The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</span></span> <span data-ttu-id="8d829-374">Contrairement à <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, cela ne change pas simplement une valeur par défaut qui peut être modifié ultérieurement sur une liaison spécifique.</span><span class="sxs-lookup"><span data-stu-id="8d829-374">Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding.</span></span> <span data-ttu-id="8d829-375">Définition de cette propriété `true` dans les métadonnées pour une propriété de dépendance les métadonnées désactivera toutes les liaisons de l’application de leurs valeurs via des expressions à cette propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="8d829-375">Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</span></span>  
  
 <span data-ttu-id="8d829-376">Propriétés de dépendance en lecture seule ne prennent pas en charge une liaison de données (parce qu’elles n’ont pas d’accesseur Set qui peuvent appliquer des valeurs modifiées), mais ils signalent `false` pour <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="8d829-376">Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span> <span data-ttu-id="8d829-377">Il s’agit, car les propriétés qui correspondent à un <xref:System.Windows.FrameworkPropertyMetadataOptions> valeurs signalent la parité de la façon dont les métadonnées a été réellement établies, au lieu de toujours signaler le comportement de résultat final que la désignation de la propriété peut impliquer.</span><span class="sxs-lookup"><span data-stu-id="8d829-377">This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</span></span> <span data-ttu-id="8d829-378">Pour déterminer si une propriété de dépendance donnée autorise la liaison de données, vous devez vérifier généralement <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> à la place.</span><span class="sxs-lookup"><span data-stu-id="8d829-378">To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead.</span></span> <span data-ttu-id="8d829-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> est une commodité pour la vérification à la fois <xref:System.Windows.DependencyProperty.ReadOnly%2A> et <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> comme une seule opération, on obtient le résultat attendu.</span><span class="sxs-lookup"><span data-stu-id="8d829-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.</span></span>  
  
 <span data-ttu-id="8d829-380">Propriétés des classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-380">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-381">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-381">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-382">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-382">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-383">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-383">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_IsNotDataBindable"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-384">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-384">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-385">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-385">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-386">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-386">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="Journal">
      <MemberSignature Language="C#" Value="public bool Journal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Journal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberSignature Language="VB.NET" Value="Public Property Journal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Journal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Journal : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-387">Obtient ou définit une valeur qui indique si cette propriété contient des informations de journalisation que les applications peuvent ou doivent stocker dans le cadre d’une implémentation de journalisation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-387">Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-388">
            <see langword="true" /> Si la journalisation doit être effectuée sur la propriété de dépendance ces métadonnées sont appliquées Sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-388">
              <see langword="true" /> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d829-389">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-389">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-390">Propriétés des classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-390">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-391">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-391">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-392">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-392">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-393">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-393">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Journal"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-394">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-394">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-395">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-395">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-396">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-396">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="T:System.Windows.Navigation.JournalEntry" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit&#xA;override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="frameworkPropertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata">
          <span data-ttu-id="8d829-397">Métadonnées de base à fusionner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-397">The base metadata to merge.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="8d829-398">Propriété de dépendance à laquelle ces métadonnées sont appliquées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-398">The dependency property this metadata is being applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-399">Active une fusion des métadonnées sources avec des métadonnées de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-399">Enables a merge of the source metadata with base metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-400">Cette méthode est utilisée en interne lorsque les métadonnées sont substituées.</span><span class="sxs-lookup"><span data-stu-id="8d829-400">This method is used internally when metadata is being overridden.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="8d829-401">
            <para>Les classes qui dérivent de <see cref="T:System.Windows.PropertyMetadata" /> (ou cette classe en particulier) doivent substituer cette méthode pour prendre en compte pour les propriétés de métadonnées qu’ils ont ajoutées dans leurs implémentations. Par exemple, votre implémentation peut ajouter une nouvelle valeur d’énumération d’indicateurs et le <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implémentation doit ensuite être en mesure de combiner ces indicateurs correctement.  Appelez toujours l’implémentation de base avant votre propre implémentation, car l’implémentation de base prend en charge de la fusion de toutes les propriétés déjà définies sur des types précédents dans la hiérarchie.  Le comportement ajouté par le <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> mise en œuvre dans <see cref="T:System.Windows.FrameworkPropertyMetadata" /> est que les propriétés de niveau infrastructure WPF spécifiques dans les métadonnées comme <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> sont combinées dans une opération de bits ou opération.  Le <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> comportement implémente également le comportement lorsque vous substituez les métadonnées de propriété sur une propriété de dépendance existante en appelant <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />., à l’aide de métadonnées de remplacement sont <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-401">
              <para>Classes that derive from <see cref="T:System.Windows.PropertyMetadata" /> (or this class particularly) should override this method to account for any metadata properties they have added in their implementations. For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.  Always call the base implementation prior to your own implementation, because the base implementation takes care of merging all the properties already defined on previous types in the hierarchy.  The behavior added by the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> is that specific WPF framework-level properties in the metadata such as <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> are combined in a bitwise or operation.  The <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> behavior also implements the behavior when you override the property metadata on an existing dependency property by calling <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />., using override metadata that is <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member OnApply : System.Windows.DependencyProperty * Type -&gt; unit&#xA;override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="frameworkPropertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="8d829-402">Propriété de dépendance à laquelle les métadonnées ont été appliquées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-402">The dependency property to which the metadata has been applied.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="8d829-403">Type associé à ces métadonnées s'il s'agit de métadonnées spécifiques au type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-403">The type associated with this metadata if this is type-specific metadata.</span>
          </span>
          <span data-ttu-id="8d829-404">S'il s'agit de métadonnées par défaut, cette valeur peut être <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-404">If this is default metadata, this value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d829-405">Appelé lorsque ces métadonnées ont été appliquées à une propriété qui indique que les métadonnées sont sealed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-405">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-406">Toute mutabilité de la structure de données d’un <xref:System.Windows.FrameworkPropertyMetadata> instance doit être marquée comme immuable lorsque cette méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="8d829-406">Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="8d829-407">
            <para>Le <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implémentation de cette méthode n’a aucun effet au-delà de l’appel de l’implémentation de base.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-407">
              <para>The <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementation of this method does nothing beyond calling the base implementation.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesInheritanceBehavior">
      <MemberSignature Language="C#" Value="public bool OverridesInheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesInheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesInheritanceBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesInheritanceBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesInheritanceBehavior : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-408">Obtient ou définit une valeur qui indique si l’évaluation de l’héritage de valeur de propriété doit s’étendre sur certaines limites de contenu dans l’arborescence logique d’éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-408">Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-409">
            <see langword="true" /> si l'héritage de la valeur de propriété doit s'étendre sur certaines limites de contenu ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-409">
              <see langword="true" /> if the property value inheritance should span across certain content boundaries; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d829-410">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-410">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-411">Ces métadonnées signalent une modification rarement appliqué au comportement d’héritage de valeur de propriété entre les limites d’éléments enfants de l’élément parent spécial.</span><span class="sxs-lookup"><span data-stu-id="8d829-411">This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</span></span> <span data-ttu-id="8d829-412">L’exemple canonique d’une telle limite est le contenu d’un <xref:System.Windows.Controls.Frame>, où le <xref:System.Windows.Controls.Frame> contenu peut être rechargé indépendamment de l’existence de la <xref:System.Windows.Controls.Frame>.</span><span class="sxs-lookup"><span data-stu-id="8d829-412">The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>.</span></span> <span data-ttu-id="8d829-413">Le comportement de système de propriété souhaitée est que l’héritage de valeur de propriété ne doit pas parcourir le contenu de la <xref:System.Windows.Controls.Frame>, car ces peut être des éléments de l’application qui héberge le frame de ne pas posséder ou contrôler.</span><span class="sxs-lookup"><span data-stu-id="8d829-413">The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control.</span></span> <span data-ttu-id="8d829-414">Spécifiant des métadonnées avec <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> définie sur `true`, ainsi que la spécification <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> comme `true`, entraîne la propriété sur laquelle les métadonnées sont appliquées pour qu’elle soit héritable même lorsque les le <xref:System.Windows.Controls.Frame> limite ou des limites semblables.</span><span class="sxs-lookup"><span data-stu-id="8d829-414">Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.</span></span>  
  
 <span data-ttu-id="8d829-415">Propriétés des classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-415">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-416">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-416">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-417">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-417">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-418">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-418">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_OverridesInheritanceBehavior"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-419">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-419">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-420">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-420">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-421">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-421">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="SubPropertiesDoNotAffectRender">
      <MemberSignature Language="C#" Value="public bool SubPropertiesDoNotAffectRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="VB.NET" Value="Public Property SubPropertiesDoNotAffectRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubPropertiesDoNotAffectRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SubPropertiesDoNotAffectRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d829-422">Obtient ou définit une valeur qui indique si les sous-propriétés de la propriété de dépendance n’affectent pas le rendu de l’objet conteneur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-422">Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d829-423">
            <see langword="true" /> si les modifications des valeurs de sous-propriété n'affectent pas le rendu si celui-ci est modifié ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-423">
              <see langword="true" /> if changes to sub-property values do not affect rendering if changed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d829-424">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-424">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d829-425">Cette option de métadonnées est pertinente pour les propriétés de dépendance qui sont des types de référence, où ce type a ses propres valeurs de propriété.</span><span class="sxs-lookup"><span data-stu-id="8d829-425">This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</span></span> <span data-ttu-id="8d829-426">En règle générale, la logique de système de disposition est de supposer que n’importe quelle propriété de dépendance avec des sous-propriétés peut affecter la disposition, car il est beaucoup plus de temps que l’exécution de la vérification de toutes les sous-propriétés pour les modifications une autre passe de rendu.</span><span class="sxs-lookup"><span data-stu-id="8d829-426">Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</span></span> <span data-ttu-id="8d829-427">Définir cette option sur `true` est utile pour optimiser les performances de l’implémentation de système de disposition de niveau framework WPF.</span><span class="sxs-lookup"><span data-stu-id="8d829-427">Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.</span></span>  
  
 <span data-ttu-id="8d829-428">Propriétés des classes dérivées de <xref:System.Windows.PropertyMetadata> sont généralement définies dans le modèle objet en lecture-écriture.</span><span class="sxs-lookup"><span data-stu-id="8d829-428">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="8d829-429">Il s’agit donc ils peuvent être ajustées après initialisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="8d829-429">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="8d829-430">Toutefois, une fois que les métadonnées sont consommées dans le cadre d’un appel à <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, le système de propriétés scelle l’instance des métadonnées et propriétés qui transmettent les caractéristiques des métadonnées sont maintenant considérées comme immuables.</span><span class="sxs-lookup"><span data-stu-id="8d829-430">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="8d829-431">Tentative de définition de cette propriété après <xref:System.Windows.PropertyMetadata.IsSealed%2A> est `true` sur ces métadonnées instance lève une exception.</span><span class="sxs-lookup"><span data-stu-id="8d829-431">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_SubPropertiesDoNotAffectRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="8d829-432">Utilisation de texte XAML</span><span class="sxs-lookup"><span data-stu-id="8d829-432">XAML Text Usage</span></span>  
 <span data-ttu-id="8d829-433">Membres de cette classe ne sont généralement pas utilisés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8d829-433">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d829-434">Les métadonnées ont déjà été appliquées à une opération de propriété de dépendance : elles sont donc sealed et les propriétés des métadonnées ne peuvent pas être définies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d829-434">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Freezable" />
      </Docs>
    </Member>
  </Members>
</Type>