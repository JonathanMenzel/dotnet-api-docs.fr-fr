<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="edddfb39d197bb5c7d9ebb6e4c366a99eae21935" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d">
      <span data-ttu-id="deac3-101">L'objet sur lequel existe la propriété.</span>
      <span class="sxs-lookup">
        <span data-stu-id="deac3-101">The object that the property exists on.</span>
      </span>
      <span data-ttu-id="deac3-102">Lorsque le rappel est appelé, le système de propriétés passe cette valeur.</span>
      <span class="sxs-lookup">
        <span data-stu-id="deac3-102">When the callback is invoked, the property system will pass this value.</span>
      </span>
    </param>
    <param name="baseValue">
      <span data-ttu-id="deac3-103">La nouvelle valeur de la propriété, avant toute tentative de contrainte.</span>
      <span class="sxs-lookup">
        <span data-stu-id="deac3-103">The new value of the property, prior to any coercion attempt.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="deac3-104">Fournit un modèle pour une méthode appelée toutes les fois qu'une valeur de propriété de dépendance est réévaluée, ou que la contrainte est demandée spécifiquement.</span>
      <span class="sxs-lookup">
        <span data-stu-id="deac3-104">Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="deac3-105">La valeur forcée (avec type approprié).</span>
      <span class="sxs-lookup">
        <span data-stu-id="deac3-105">The coerced value (with appropriate type).</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="deac3-106">Les rappels basés sur <xref:System.Windows.CoerceValueCallback> peut être affectée à une propriété de dépendance à travers plusieurs techniques différentes.</span><span class="sxs-lookup"><span data-stu-id="deac3-106">Callbacks based on <xref:System.Windows.CoerceValueCallback> can be assigned to a dependency property through several different techniques.</span></span> <span data-ttu-id="deac3-107">Chacune de ces techniques requiert que vous créez tout d’abord un nouvel objet de métadonnées de propriété (<xref:System.Windows.PropertyMetadata>, ou une classe dérivée telle que <xref:System.Windows.FrameworkPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="deac3-107">Each of these techniques requires that you first create a new property metadata object (<xref:System.Windows.PropertyMetadata>, or a derived class such as <xref:System.Windows.FrameworkPropertyMetadata>).</span></span> <span data-ttu-id="deac3-108">Créer l’objet de métadonnées à l’aide d’une signature de constructeur qui accepte le `coerceValueCallback` paramètre et attribuez ce paramètre à votre gestionnaire de rappel.</span><span class="sxs-lookup"><span data-stu-id="deac3-108">Create the metadata object using a constructor signature that takes the `coerceValueCallback` parameter, and assign that parameter to your callback handler.</span></span> <span data-ttu-id="deac3-109">Ou de construire les métadonnées par n’importe quel signature et le jeu le <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> propriété avant de remettre les métadonnées en cours d’utilisation.</span><span class="sxs-lookup"><span data-stu-id="deac3-109">Or construct the metadata by any signature and set the <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> property prior to putting the metadata in use.</span></span>  
  
 <span data-ttu-id="deac3-110">Lorsque vous avez ces métadonnées, vous pouvez :</span><span class="sxs-lookup"><span data-stu-id="deac3-110">When you have this metadata, you can:</span></span>  
  
-   <span data-ttu-id="deac3-111">Définissez une nouvelle propriété de dépendance sur une nouvelle classe, à l’aide d’une signature de <xref:System.Windows.DependencyProperty.Register%2A>, en donnant les métadonnées en tant que le `typeMetadata` valeur.</span><span class="sxs-lookup"><span data-stu-id="deac3-111">Define a new dependency property on a new class, using either signature of  <xref:System.Windows.DependencyProperty.Register%2A>, giving the metadata as the `typeMetadata` value.</span></span>  
  
-   <span data-ttu-id="deac3-112">Remplacer les métadonnées (appelez <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) pour une propriété de dépendance existante, lorsque vous dérivez de la classe qui possède la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="deac3-112">Override the metadata (call <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) for an existing dependency property, when you derive from the class that owns the dependency property.</span></span>  
  
-   <span data-ttu-id="deac3-113">Ajoutez une propriété de dépendance existante à un nouveau <xref:System.Windows.DependencyObject> classe, à l’aide de nouvelles métadonnées, en appelant <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="deac3-113">Add an existing dependency property to a new <xref:System.Windows.DependencyObject> class, using new metadata, by calling <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="deac3-114">Les implémentations de ce rappel doivent vérifier la valeur `baseValue` et déterminer en fonction de la valeur ou le type s’il s’agit d’une valeur qui doit être forcée plus loin.</span><span class="sxs-lookup"><span data-stu-id="deac3-114">Implementations of this callback should check the value in `baseValue` and determine based on either the value or the type whether this is a value that needs to be further coerced.</span></span>  
  
 <span data-ttu-id="deac3-115">Le <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> pour une dépendance de la propriété est appelée chaque fois que le système de propriétés ou tout autre appelant appelle <xref:System.Windows.DependencyObject.CoerceValue%2A> sur un <xref:System.Windows.DependencyObject> instance, en spécifiant l’identificateur de cette propriété en tant que le `dp`.</span><span class="sxs-lookup"><span data-stu-id="deac3-115">The <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for a dependency property is invoked any time that the property system or any other caller calls <xref:System.Windows.DependencyObject.CoerceValue%2A> on a <xref:System.Windows.DependencyObject> instance, specifying that property's identifier as the `dp`.</span></span>  
  
 <span data-ttu-id="deac3-116">Modifications apportées à la valeur de propriété peuvent provenir de tout participant possible dans le système de propriétés.</span><span class="sxs-lookup"><span data-stu-id="deac3-116">Changes to the property value may have come from any possible participant in the property system.</span></span> <span data-ttu-id="deac3-117">Cela inclut les styles, l’invalidation générique, déclencheurs, l’héritage de valeur de propriété et le paramètre de valeur locale.</span><span class="sxs-lookup"><span data-stu-id="deac3-117">This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</span></span>  
  
 <span data-ttu-id="deac3-118">En général vous devez éviter de spécifier plusieurs <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> pour toute propriété de dépendance donnée (substitution ou ajout avec les nouvelles métadonnées pour une propriété de dépendance qui avait déjà un <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span><span class="sxs-lookup"><span data-stu-id="deac3-118">Generally you should avoid specifying more than one <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for any given dependency property (overriding or adding with new metadata for a dependency property that already had a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span></span> <span data-ttu-id="deac3-119">Seul l’un des rappels sera en mesure d’agir. Le rappel agissant correspondra à celui qui a été appliquée à la classe la plus dérivée dans l’héritage en comparaison de la <xref:System.Windows.DependencyObject> appelant.</span><span class="sxs-lookup"><span data-stu-id="deac3-119">Only one of the callbacks will be able to act. The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the <xref:System.Windows.DependencyObject> caller.</span></span> <span data-ttu-id="deac3-120">Autres rappels en tant qu’attribuée aux métadonnées pour la propriété de dépendance telle qu’elle existait supérieur dans la hiérarchie de propriétaire sont remplacés lorsque les métadonnées sont substituées.</span><span class="sxs-lookup"><span data-stu-id="deac3-120">Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="deac3-121">L’exemple suivant inclut une implémentation de ce rappel pour forcer la valeur stockée d’une propriété de dépendance basée sur les autres entrées, telles que d’une autre valeur de la propriété.</span><span class="sxs-lookup"><span data-stu-id="deac3-121">The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value.</span></span> <span data-ttu-id="deac3-122">Dans ce cas, le rappel vérifie si le `ShirtType` propriété correspond à un type de chemise qui a des boutons ; cas dans ce il établit une couleur par défaut initiale pour le `ButtonColor`, si le type de chemise a pas de boutons, il force la `ButtonColor` valeur à une valeur de départ, ce qui entraîne le [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (non affiché) à supprimer ce déroulement des choix effectifs.</span><span class="sxs-lookup"><span data-stu-id="deac3-122">In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (not shown) to remove that dropdown from the effective choices.</span></span>  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>