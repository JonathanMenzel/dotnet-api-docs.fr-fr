<Type Name="MarkupProperty" FullName="System.Windows.Markup.Primitives.MarkupProperty">
  <TypeSignature Language="C#" Value="public abstract class MarkupProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.Primitives.MarkupProperty" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupProperty abstract" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9f106-101">Classe abstraite qui fournit une description de propriété à utiliser lors de l'écriture dans le balisage pour encapsuler l'accès aux propriétés et à leurs valeurs.</span><span class="sxs-lookup"><span data-stu-id="9f106-101">Abstract class that provides a property description to be used while writing to markup which encapsulates access to properties and their values.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-102">Une propriété est représentée comme une chaîne ou une liste d’éléments.</span><span class="sxs-lookup"><span data-stu-id="9f106-102">A property is either represented as a string or a list of items.</span></span>  
  
 <span data-ttu-id="9f106-103">Si la propriété peut être représentée sous forme de chaîne, <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> est `false`.</span><span class="sxs-lookup"><span data-stu-id="9f106-103">If the property can be represented as a string, <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `false`.</span></span>  
  
 <span data-ttu-id="9f106-104">Si <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> est `true`, la propriété est une liste d’éléments.</span><span class="sxs-lookup"><span data-stu-id="9f106-104">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `true`, the property is a list of items.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.ComponentModel.AttributeCollection Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.AttributeCollection Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As AttributeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::ComponentModel::AttributeCollection ^ Attributes { System::ComponentModel::AttributeCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AttributeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-105">En cas de substitution dans une classe dérivée, obtient les attributs associés à ce <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span><span class="sxs-lookup"><span data-stu-id="9f106-105">When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="9f106-106">Collection d’attributs.</span><span class="sxs-lookup"><span data-stu-id="9f106-106">The collection of attributes.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-107">En cas de substitution dans une classe dérivée, obtient l'identificateur <see cref="T:System.Windows.DependencyProperty" /> pour la propriété du balisage si la propriété est implémentée en tant que propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="9f106-107">When overridden in a derived class, gets the <see cref="T:System.Windows.DependencyProperty" /> identifier for the markup property if the property is implemented as a dependency property</span></span></summary>
        <value><span data-ttu-id="9f106-108">Identificateur de la propriété de dépendance.</span><span class="sxs-lookup"><span data-stu-id="9f106-108">The dependency property identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-109">Le comportement par défaut retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="9f106-109">The default behavior returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAttached">
      <MemberSignature Language="C#" Value="public virtual bool IsAttached { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAttached" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsAttached As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAttached { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-110">En cas de substitution dans une classe dérivée, détermine si cette <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> est une <see cref="T:System.Windows.DependencyProperty" /> attachée.</span><span class="sxs-lookup"><span data-stu-id="9f106-110">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is an attached <see cref="T:System.Windows.DependencyProperty" />.</span></span></summary>
        <value>
          <span data-ttu-id="9f106-111"><see langword="true" /> si la propriété est une <see cref="T:System.Windows.DependencyProperty" /> attachée ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9f106-111"><see langword="true" /> if the property is an attached <see cref="T:System.Windows.DependencyProperty" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-112">Le comportement par défaut consiste à retourner `false`.</span><span class="sxs-lookup"><span data-stu-id="9f106-112">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="9f106-113">Lorsque <xref:System.Windows.Markup.Primitives.MarkupProperty.IsAttached%2A> est `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> n’est pas `null` et <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> peut être `null`, mais pas nécessairement être.</span><span class="sxs-lookup"><span data-stu-id="9f106-113">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsAttached%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> is not `null` and <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> can be `null`, but is not required to be.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsComposite">
      <MemberSignature Language="C#" Value="public virtual bool IsComposite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsComposite" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsComposite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsComposite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-114">En cas de substitution dans une classe dérivée, détermine si cette <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> est une propriété composite.</span><span class="sxs-lookup"><span data-stu-id="9f106-114">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is a composite property.</span></span></summary>
        <value>
          <span data-ttu-id="9f106-115"><see langword="true" /> s'il s'agit d'une propriété composite ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9f106-115"><see langword="true" /> is this property is a composite property; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-116">Le comportement par défaut consiste à retourner `false`.</span><span class="sxs-lookup"><span data-stu-id="9f106-116">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="9f106-117">Si <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> est `false`, la propriété peut être représentée sous forme de chaîne et <xref:System.Windows.Markup.Primitives.MarkupProperty.Value%2A> et <xref:System.Windows.Markup.Primitives.MarkupProperty.StringValue%2A> sont valides à utiliser.</span><span class="sxs-lookup"><span data-stu-id="9f106-117">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `false`, the property can be represented as a string and <xref:System.Windows.Markup.Primitives.MarkupProperty.Value%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.StringValue%2A> are valid to use.</span></span>  
  
 <span data-ttu-id="9f106-118">Si <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> est `true`, la propriété est un ou plusieurs éléments et <xref:System.Windows.Markup.Primitives.MarkupProperty.Items%2A> est valide à utiliser.</span><span class="sxs-lookup"><span data-stu-id="9f106-118">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `true`, the property is one or more items and <xref:System.Windows.Markup.Primitives.MarkupProperty.Items%2A> is valid to use.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructorArgument">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructorArgument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructorArgument" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructorArgument As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructorArgument { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-119">En cas de substitution dans une classe dérivée, détermine si cette <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> représente un argument de constructeur.</span><span class="sxs-lookup"><span data-stu-id="9f106-119">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a constructor argument.</span></span></summary>
        <value>
          <span data-ttu-id="9f106-120"><see langword="true" /> si cette propriété représente un argument de constructeur ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9f106-120"><see langword="true" /> if this property represents a constructor argument; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-121">Le comportement par défaut est retour `false`.</span><span class="sxs-lookup"><span data-stu-id="9f106-121">The default behavior is return `false`.</span></span>  
  
 <span data-ttu-id="9f106-122">Lorsque <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> est `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> et <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> sont tous deux `null`.</span><span class="sxs-lookup"><span data-stu-id="9f106-122">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="9f106-123">XAML utilise seulement <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> pour représenter les arguments de constructeur d’instances de <xref:System.Windows.Markup.MarkupExtension>.</span><span class="sxs-lookup"><span data-stu-id="9f106-123">XAML only uses <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> for representing the constructor arguments of instances of <xref:System.Windows.Markup.MarkupExtension>.</span></span> <span data-ttu-id="9f106-124">Consultez [Extensions de balisage et XAML WPF](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="9f106-124">See [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContent">
      <MemberSignature Language="C#" Value="public virtual bool IsContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsContent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-125">En cas de substitution dans une classe dérivée, détermine si cette <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> représente le contenu direct d'une collection.</span><span class="sxs-lookup"><span data-stu-id="9f106-125">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents direct content of a collection.</span></span></summary>
        <value>
          <span data-ttu-id="9f106-126"><see langword="true" /> si la propriété représente le contenu direct ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9f106-126"><see langword="true" /> if the property represents direct content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-127">Le comportement par défaut consiste à retourner `false`.</span><span class="sxs-lookup"><span data-stu-id="9f106-127">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="9f106-128">Lorsque <xref:System.Windows.Markup.Primitives.MarkupProperty.IsContent%2A> est `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> et <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> sont tous deux `null`.</span><span class="sxs-lookup"><span data-stu-id="9f106-128">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsContent%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="9f106-129">Les dictionnaires sont inclus lorsque vous déterminez si cela <xref:System.Windows.Markup.Primitives.MarkupProperty> représente le contenu direct.</span><span class="sxs-lookup"><span data-stu-id="9f106-129">Dictionaries are included when determining whether this <xref:System.Windows.Markup.Primitives.MarkupProperty> represents direct content.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKey">
      <MemberSignature Language="C#" Value="public virtual bool IsKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsKey { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-130">En cas de substitution dans une classe dérivée, détermine si cette <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> représente la clé utilisée par l'<see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> pour stocker l'élément dans un dictionnaire.</span><span class="sxs-lookup"><span data-stu-id="9f106-130">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents the key used by the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> to store the item in a dictionary.</span></span></summary>
        <value>
          <span data-ttu-id="9f106-131"><see langword="true" /> si cette propriété représente une clé ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9f106-131"><see langword="true" /> if this property represents a key; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-132">Le comportement par défaut consiste à retourner `false`.</span><span class="sxs-lookup"><span data-stu-id="9f106-132">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="9f106-133">Lorsque <xref:System.Windows.Markup.Primitives.MarkupProperty.IsKey%2A> est `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> et <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> sont `null`.</span><span class="sxs-lookup"><span data-stu-id="9f106-133">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsKey%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are `null`.</span></span>  
  
 <span data-ttu-id="9f106-134">XAML utilise la propriété identifiée comme un `x:Key` attribut.</span><span class="sxs-lookup"><span data-stu-id="9f106-134">XAML will use the identified property as an `x:Key` attribute.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueAsString">
      <MemberSignature Language="C#" Value="public virtual bool IsValueAsString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueAsString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValueAsString As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValueAsString { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-135">En cas de substitution dans une classe dérivée, détermine si cette <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> représente le texte passé à un convertisseur de type pour créer une instance de la propriété ou si un constructeur doit être utilisé.</span><span class="sxs-lookup"><span data-stu-id="9f106-135">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents text which is passed to a type converter to create an instance of the property or if a constructor should be used.</span></span></summary>
        <value>
          <span data-ttu-id="9f106-136"><see langword="true" />, si cette <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> représente une chaîne ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9f106-136"><see langword="true" />, if this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a string; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-137">Le comportement par défaut consiste à retourner `false.`</span><span class="sxs-lookup"><span data-stu-id="9f106-137">The default behavior is to return `false.`</span></span>  
  
 <span data-ttu-id="9f106-138">Lorsque <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> est `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> et <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> sont tous deux `null`.</span><span class="sxs-lookup"><span data-stu-id="9f106-138">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="9f106-139">Si la propriété est fournie via <xref:System.Windows.Markup.Primitives.MarkupObject.Properties%2A> et <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> est `true`, il s’agit de la seule propriété qui fournit le type.</span><span class="sxs-lookup"><span data-stu-id="9f106-139">If the property is provided through <xref:System.Windows.Markup.Primitives.MarkupObject.Properties%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> is `true`, it will be the only property the type will provide.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.Windows.Markup.Primitives.MarkupObject&gt; Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Markup.Primitives.MarkupObject&gt; Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Items" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Items As IEnumerable(Of MarkupObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;System::Windows::Markup::Primitives::MarkupObject ^&gt; ^ Items { System::Collections::Generic::IEnumerable&lt;System::Windows::Markup::Primitives::MarkupObject ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Markup.Primitives.MarkupObject&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-140">En cas de substitution dans une classe dérivée, obtient les éléments qui constituent la valeur de cette propriété.</span><span class="sxs-lookup"><span data-stu-id="9f106-140">When overridden in a derived class, gets the items that make up the value of this property.</span></span></summary>
        <value><span data-ttu-id="9f106-141">Éléments qui constituent la valeur de cette propriété.</span><span class="sxs-lookup"><span data-stu-id="9f106-141">The items that make up the value of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-142">Si la propriété n’est pas une énumération, un seul élément s’affichera.</span><span class="sxs-lookup"><span data-stu-id="9f106-142">If the property is not an enumeration, only one item will be returned.</span></span>  
  
 <span data-ttu-id="9f106-143">Si la propriété est une énumération ou énumérable, tous les éléments seront retournées.</span><span class="sxs-lookup"><span data-stu-id="9f106-143">If the property is an enumeration, or enumerable, all the items will be returned.</span></span>  
  
 <span data-ttu-id="9f106-144">Au moins un élément est toujours retourné, car <xref:System.Windows.Markup.Primitives.MarkupObject> ne crée pas une <xref:System.Windows.Markup.Primitives.MarkupProperty> pour les propriétés sans éléments.</span><span class="sxs-lookup"><span data-stu-id="9f106-144">At least one item is always returned, because <xref:System.Windows.Markup.Primitives.MarkupObject> will not create a <xref:System.Windows.Markup.Primitives.MarkupProperty> for properties with no items.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-145">En cas de substitution dans une classe dérivée, obtient un nom utilisé pour le diagnostic et le signalement d'erreurs.</span><span class="sxs-lookup"><span data-stu-id="9f106-145">When overridden in a derived class, gets a name that is used for diagnostics and error reporting.</span></span></summary>
        <value><span data-ttu-id="9f106-146">Nom de la propriété d'identificateur.</span><span class="sxs-lookup"><span data-stu-id="9f106-146">The identifier property name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-147">Un sérialiseur ne doit pas utiliser cette valeur.</span><span class="sxs-lookup"><span data-stu-id="9f106-147">A serializer should not use this value.</span></span> <span data-ttu-id="9f106-148">Il doit utiliser le <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> et/ou <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> à la place.</span><span class="sxs-lookup"><span data-stu-id="9f106-148">It should use the <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and/or <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.PropertyDescriptor PropertyDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptor PropertyDescriptor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PropertyDescriptor As PropertyDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::PropertyDescriptor ^ PropertyDescriptor { System::ComponentModel::PropertyDescriptor ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-149">En cas de substitution dans une classe dérivée, obtient le <see cref="T:System.ComponentModel.PropertyDescriptor" /> pour la propriété de balisage.</span><span class="sxs-lookup"><span data-stu-id="9f106-149">When overridden in a derived class, gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> for the markup property.</span></span></summary>
        <value><span data-ttu-id="9f106-150">Descripteur de propriété.</span><span class="sxs-lookup"><span data-stu-id="9f106-150">The property descriptor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-151">Le comportement par défaut retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="9f106-151">The default behavior returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ PropertyType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-152">En cas de substitution dans une classe dérivée, obtient le type CLR de la propriété.</span><span class="sxs-lookup"><span data-stu-id="9f106-152">When overridden in a derived class, gets the CLR type of the property.</span></span></summary>
        <value><span data-ttu-id="9f106-153">Type CLR.</span><span class="sxs-lookup"><span data-stu-id="9f106-153">The CLR type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringValue">
      <MemberSignature Language="C#" Value="public abstract string StringValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StringValue As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StringValue { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-154">En cas de substitution dans une classe dérivée, obtient la valeur de chaîne de cette <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span><span class="sxs-lookup"><span data-stu-id="9f106-154">When overridden in a derived class, gets the string value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="9f106-155">Valeur de chaîne.</span><span class="sxs-lookup"><span data-stu-id="9f106-155">The string value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TypeReferences As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-156">En cas de substitution dans une classe dérivée, obtient le jeu des types que cette <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> référencera lors de la sérialisation de sa valeur sous forme de chaîne.</span><span class="sxs-lookup"><span data-stu-id="9f106-156">When overridden in a derived class, gets the set of types that this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> will reference when it serializes its value as a string.</span></span></summary>
        <value><span data-ttu-id="9f106-157">Jeu de types.</span><span class="sxs-lookup"><span data-stu-id="9f106-157">The set of types.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f106-158"><xref:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences%2A> permet à un sérialiseur pour vous assurer que le désérialiseur dispose de suffisamment d’informations pour convertir des références à ces types dans les représentations sous forme de chaîne.</span><span class="sxs-lookup"><span data-stu-id="9f106-158"><xref:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences%2A> enables a serializer to ensure that the de-serializer has enough information to convert references to these type from the string representations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f106-159">En cas de substitution dans une classe dérivée, obtient la valeur actuelle de <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span><span class="sxs-lookup"><span data-stu-id="9f106-159">When overridden in a derived class, gets the current value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="9f106-160">Valeur en cours.</span><span class="sxs-lookup"><span data-stu-id="9f106-160">The current value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>