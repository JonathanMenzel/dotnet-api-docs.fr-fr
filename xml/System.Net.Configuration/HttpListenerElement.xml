<Type Name="HttpListenerElement" FullName="System.Net.Configuration.HttpListenerElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="454ec0d74116246d40fbfd1ad50cc77b1d5dbb4a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36552987" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListenerElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpListenerElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.HttpListenerElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerElement sealed : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type HttpListenerElement = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente l'élément HttpListener dans le fichier de configuration. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette classe correspond à la \<httpListener > élément de configuration de l’élément (paramètres réseau). Cette classe fournit l’accès par programme aux informations qui peuvent être stockées dans les fichiers de configuration.  
  
 Le <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> propriété indique si <xref:System.Net.HttpListener> utilise l’URI sans séquence d’échappement brut au lieu de l’URI converti où toutes les valeurs encodées de pourcentage sont converties et autres étapes de normalisation sont exécutées.  
  
 Lorsqu’un <xref:System.Net.HttpListener> instance reçoit une demande via le `http.sys` service, il crée une instance de la chaîne d’URI fournie par `http.sys`et l’expose en tant que le <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> propriété.  
  
 Le `http.sys` service expose deux chaînes d’URI de demande :  
  
-   URI brut  
  
-   URI converti  
  
 L’URI brut est le <xref:System.Uri?displayProperty=nameWithType> fourni dans la ligne de la demande d’une demande HTTP :  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 L’URI brut fourni par `http.sys` de la demande indiquée ci-dessus, est « chemin d’accès / ». Représente la chaîne qui suit le verbe HTTP, telle qu’elle a été envoyée sur le réseau.  
  
 Le `http.sys` service crée un URI converti à partir des informations fournies dans la demande à l’aide de l’URI fourni dans la ligne de la requête HTTP et l’en-tête d’hôte pour déterminer le serveur d’origine la demande doit être transféré à. Cela est effectué en comparant les informations de la requête avec un jeu de préfixes URI enregistrés. La documentation du SDK du serveur HTTP fait référence à cet URI converti en tant que le [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) structure.  
  
 Pour être en mesure de comparer la demande avec les préfixes URI enregistrés, une normalisation de la demande doit être effectué. Pour l’exemple ci-dessus, l’URI converti est comme suit :  
  
 `http://www.contoso.com/path/`  
  
 Le `http.sys` service associe le <xref:System.Uri.Host%2A?displayProperty=nameWithType> valeur de propriété et la chaîne dans la ligne de la requête pour créer un URI converti. En outre, `http.sys` et <xref:System.Uri?displayProperty=nameWithType> classe effectuer également les opérations suivantes :  
  
-   N’échappe pas pourcentage de toutes les valeurs encodées.  
  
-   Caractères non ASCII encodés en pourcentage de convertit en une représentation de caractères UTF-16. Notez que les caractères UTF-8 et ANSI ou DBCS sont pris en charge, ainsi que des caractères Unicode (encodage Unicode à l’aide du format %uXXXX).  
  
-   Exécute les autres étapes de normalisation, comme la compression de chemin d’accès.  
  
 Étant donné que la demande ne contient pas d’informations sur l’encodage utilisé pour les valeurs encodées en pourcentage, il n’est peut-être pas possible de déterminer l’encodage correct seulement en analysant les valeurs encodées en pourcentage.  
  
 Par conséquent `http.sys` fournit deux clés de Registre pour la modification du processus :  
  
|Clé de Registre|Valeur par défaut|Description |  
|------------------|-------------------|-----------------|  
|EnableNonUTF8 n'|1|Si zéro, `http.sys` accepte uniquement les URL encodée en UTF-8.<br /><br /> Si non nul, `http.sys` accepte également des URL ANSI ou DBCS dans les requêtes.|  
|FavorUTF8|1|Si non nul, `http.sys` toujours tente de décoder une URL au format UTF-8 ; si cette conversion échoue et EnableNonUTF8 n’est pas nulle, Http.sys, puis tente de décoder comme ANSI ou DBCS.<br /><br /> Si zéro (et EnableNonUTF8 n’est pas nulle), `http.sys` essaie de le décoder comme ANSI ou DBCS ; si cela ne réussit pas, il essaie une conversion UTF-8.|  
  
 Lorsque <xref:System.Net.HttpListener> reçoit une demande, il utilise l’URI converti de `http.sys` comme entrée pour le <xref:System.Net.HttpListenerRequest.Url%2A> propriété.  
  
 Il est nécessaire pour prendre en charge des caractères autres que des caractères et les nombres dans les URI. Un exemple est l’URI suivant, qui est utilisée pour récupérer des informations sur le client pour le client numéro « 1/3812 » :  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Notez la barre oblique d’encodés en pourcentage dans l’Uri (% 2F). Cela est nécessaire, car dans ce cas la barre oblique représente des données et pas un délimiteur de chemin d’accès.  
  
 Transmission de la chaîne au constructeur d’Uri entraîne l’URI suivant :  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 Fractionner le chemin d’accès en segments entraînerait les éléments suivants :  
  
 `Customer('1`  
  
 `3812')`  
  
 Ce n’est pas l’intention de l’expéditeur de la demande.  
  
 Si le <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> est définie sur false, alors le <xref:System.Net.HttpListener> reçoit une demande, il utilise l’URI brut au lieu de l’URI converti à partir de `http.sys` comme entrée pour le <xref:System.Net.HttpListenerRequest.Url%2A> propriété.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="P:System.Net.HttpListenerRequest.Url" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListenerElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Configuration.HttpListenerElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListenerElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Configuration.HttpListenerElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeouts">
      <MemberSignature Language="C#" Value="public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Configuration.HttpListenerTimeoutsElement Timeouts" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeouts As HttpListenerTimeoutsElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Configuration::HttpListenerTimeoutsElement ^ Timeouts { System::Net::Configuration::HttpListenerTimeoutsElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeouts : System.Net.Configuration.HttpListenerTimeoutsElement" Usage="System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("timeouts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.HttpListenerTimeoutsElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les éléments de temporisation par défaut utilisés pour un objet <see cref="T:System.Net.HttpListener" />.</summary>
        <value>Retourne <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />.  Éléments de délai d'attente utilisés pour un objet <see cref="T:System.Net.HttpListener" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerTimeoutManager" />
        <altmember cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
      </Docs>
    </Member>
    <Member MemberName="UnescapeRequestUrl">
      <MemberSignature Language="C#" Value="public bool UnescapeRequestUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnescapeRequestUrl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnescapeRequestUrl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnescapeRequestUrl { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UnescapeRequestUrl : bool" Usage="System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("unescapeRequestUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si <see cref="T:System.Net.HttpListener" /> utilise l'URI brut sans séquence d'échappement plutôt que l'URI converti.</summary>
        <value>Valeur booléenne qui indique si <see cref="T:System.Net.HttpListener" /> utilise l'URI brut sans séquence d'échappement plutôt que l'URI converti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> propriété indique si <xref:System.Net.HttpListener> utilise l’URI sans séquence d’échappement brut au lieu de l’URI converti où toutes les valeurs encodées de pourcentage sont converties et autres étapes de normalisation sont exécutées.  
  
 Lorsqu’un <xref:System.Net.HttpListener> instance reçoit une demande via le `http.sys` service, il crée une instance de la chaîne d’URI fournie par `http.sys`et l’expose en tant que le <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> propriété.  
  
 Le `http.sys` service expose deux chaînes d’URI de demande :  
  
-   URI brut  
  
-   URI converti  
  
 L’URI brut est le <xref:System.Uri?displayProperty=nameWithType> fourni dans la ligne de la demande d’une demande HTTP :  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 L’URI brut fourni par `http.sys` de la demande indiquée ci-dessus, est « chemin d’accès / ». Représente la chaîne qui suit le verbe HTTP, telle qu’elle a été envoyée sur le réseau.  
  
 Le `http.sys` service crée un URI converti à partir des informations fournies dans la demande à l’aide de l’URI fourni dans la ligne de la requête HTTP et l’en-tête d’hôte pour déterminer le serveur d’origine la demande doit être transféré à. Cela est effectué en comparant les informations de la requête avec un jeu de préfixes URI enregistrés. La documentation du SDK du serveur HTTP fait référence à cet URI converti en tant que le [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) structure.  
  
 Pour être en mesure de comparer la demande avec les préfixes URI enregistrés, une normalisation de la demande doit être effectué. Pour l’exemple ci-dessus, l’URI converti est comme suit :  
  
 `http://www.contoso.com/path/`  
  
 Le `http.sys` service associe le <xref:System.Uri.Host%2A?displayProperty=nameWithType> valeur de propriété et la chaîne dans la ligne de la requête pour créer un URI converti. En outre, `http.sys` et <xref:System.Uri?displayProperty=nameWithType> classe effectuer également les opérations suivantes :  
  
-   N’échappe pas pourcentage de toutes les valeurs encodées.  
  
-   Caractères non ASCII encodés en pourcentage de convertit en une représentation de caractères UTF-16. Notez que les caractères UTF-8 et ANSI ou DBCS sont pris en charge, ainsi que des caractères Unicode (encodage Unicode à l’aide du format %uXXXX).  
  
-   Exécute les autres étapes de normalisation, comme la compression de chemin d’accès.  
  
 Étant donné que la demande ne contient pas d’informations sur l’encodage utilisé pour les valeurs encodées en pourcentage, il n’est peut-être pas possible de déterminer l’encodage correct seulement en analysant les valeurs encodées en pourcentage.  
  
 Par conséquent `http.sys` fournit deux clés de Registre pour la modification du processus :  
  
|Clé de Registre|Valeur par défaut|Description |  
|------------------|-------------------|-----------------|  
|EnableNonUTF8 n'|1|Si zéro, `http.sys` accepte uniquement les URL encodée en UTF-8.<br /><br /> Si non nul, `http.sys` accepte également des URL ANSI ou DBCS dans les requêtes.|  
|FavorUTF8|1|Si non nul, `http.sys` toujours tente de décoder une URL au format UTF-8 ; si cette conversion échoue et EnableNonUTF8 n’est pas nulle, Http.sys, puis tente de décoder comme ANSI ou DBCS.<br /><br /> Si zéro (et EnableNonUTF8 n’est pas nulle), `http.sys` essaie de le décoder comme ANSI ou DBCS ; si cela ne réussit pas, il essaie une conversion UTF-8.|  
  
 Lorsque <xref:System.Net.HttpListener> reçoit une demande, il utilise l’URI converti de `http.sys` comme entrée pour le <xref:System.Net.HttpListenerRequest.Url%2A> propriété.  
  
 Il est nécessaire pour prendre en charge des caractères autres que des caractères et les nombres dans les URI. Un exemple est l’URI suivant, qui est utilisée pour récupérer des informations sur le client pour le client numéro « 1/3812 » :  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Notez la barre oblique d’encodés en pourcentage dans l’Uri (% 2F). Cela est nécessaire, car dans ce cas la barre oblique représente des données et pas un délimiteur de chemin d’accès.  
  
 Transmission de la chaîne au constructeur d’Uri entraîne l’URI suivant :  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 Fractionner le chemin d’accès en segments entraînerait les éléments suivants :  
  
 `Customer('1`  
  
 `3812')`  
  
 Ce n’est pas l’intention de l’expéditeur de la demande.  
  
 Si le <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> est définie sur false, alors le <xref:System.Net.HttpListener> reçoit une demande, il utilise l’URI brut au lieu de l’URI converti à partir de `http.sys` comme entrée pour le <xref:System.Net.HttpListenerRequest.Url%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="P:System.Net.HttpListenerRequest.Url" />
      </Docs>
    </Member>
  </Members>
</Type>