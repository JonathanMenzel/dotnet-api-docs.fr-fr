<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f997637b2e580bde8d2113499021c961c4dc139d" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52216768" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Classe de base abstraite à implémenter par tous les moteurs de synthèse de conversion de texte par synthèse vocale (Text-to-Speech).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour construire un moteur de synthèse vocale personnalisée, une application doit toujours implémenter une classe dérivée de la classe de base abstraite <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>.  
  
 Une implémentation correctement enregistrée de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> peut ensuite être utilisé comme une voix de synthétiseur par <xref:System.Speech.Synthesis> applications basées sur l’espace de noms.  
  
 Objets héritant de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> doit substituer les membres suivants : <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> et <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.  
  
 Le membre le plus important de la <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> classe à implémenter est la <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> (méthode).  
  
 Le <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> méthode est appelée par l’Analyseur de texte infrastructures réception :  
  
1.  Une référence à la <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface, ce qui permet d’accéder aux services de système tels que les files d’attente même et d’écriture de la sortie audio.  
  
2.  Un tableau de <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance produites à partir de l’entrée de balisage langage SSML (Speech Synthesis). En plus du texte se présentent sous forme de reconnaissance vocale, l’analyse de la SSML stocke des informations sur les attributs demandés de la reconnaissance vocale dans un <xref:System.Speech.Synthesis.TtsEngine.FragmentState> instance associée à chaque entrant <xref:System.Speech.Synthesis.TtsEngine.TextFragment> objet.  
  
 Une application de synthétiseur vocal peut éventuellement effectuer des demandes pour un format de sortie spécifié en implémentant <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> à être appelée par la plateforme quand elle tente de fournir la sortie audio correcte.  
  
 Un implémenteur prend également en charge pour la gestion des définitions externes des prononciations ou lexiques, par leur implémentation de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> et <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey">Nom complet de la clé de Registre pour le jeton de voix associée à l'implémentation de <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />. moteur.</param>
        <summary>Construit une nouvelle instance <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> selon une clé de Registre appropriée de jeton de voix.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les appels à ce constructeur sont généralement générés par <xref:System.Speech.Synthesis> en fonction des applications en sélectionnant une voix de synthétiseur devant être utilisées par une instance de <xref:System.Speech.Synthesis.SpeechSynthesizer>.  
  
 Un <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> doit être le Registre sous HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Instance valide de <see langword="System.Uri" /> indiquant l'emplacement des informations de lexique.</param>
        <param name="mediaType">Chaîne contenant le type de média du lexique. Les types de média ne respectent pas la casse.</param>
        <param name="site">Référence à une interface <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> utilisée pour interagir avec l'infrastructure de la plateforme.</param>
        <summary>Ajoute un lexique au <see langword="Synthesizer" /><see langword="Voice" /> implémenté par l’instance de <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> actuelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un lexique prononciation est une collection de mots ou expressions ainsi que des prononciations spécifiées à l’aide d’un alphabet prononciation approprié.  
  
 Cette méthode est généralement appelée par l’infrastructure de plateforme en réponse à une <xref:System.Speech.Synthesis> en fonction des applications qui appellent <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> et à l’aide de la voix de synthétiseur implémentée par l’actuel <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance.  
  
 La valeur de `mediaType` est généralement une spécification MIME, car la spécification SSML utilise MIME pour les spécifications du support.  
  
   
  
## Examples  
 L’implémentation de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> utilise le <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface transmise à charger un lexique à partir d’une ressource. Il stocke ensuite un `System.IO.Stream` pour le lexique dans un `System.Collections.Generic.Dictionary` instance, indexée par l’URI de lexique.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il incombe à l’implémentation pour maîtriser entièrement et être en mesure de traiter le lexique stocké à <paramref name="uri" />. L’implémentation doit également effectuer le suivi et gérer les durées de vie de tous les lexiques qu'il ajoute.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">Membre valide de l'énumération <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> indiquant le type de format de sortie audio demandé.</param>
        <param name="targetWaveFormat">Pointeur vers une <see langword="struct" /> contenant la configuration spécifique du type de format audio demandé par l'argument <paramref name="speakOutputFormat" />.</param>
        <summary>Retourne la meilleure sortie audio correspondante prise en charge par une réponse de moteur de synthèse donnée à un moteur synthétiseur pour la prise en charge d'un format de sortie particulier.</summary>
        <returns>Retourne une instance de <see langword="IntPtr" /> faisant référence à <see langword="struct" /> contenant des informations détaillées sur le format de sortie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La structure utilisée en tant que `targetWaveFormat` et retournée par la méthode doit compatible avec le `WAVEFORMATEX` disponibles sous SAPI, et la valeur retournée doit être allouée à l’aide de `CoTaskMemAlloc`.  
  
 Le `struct` doit fournir une fonctionnalité équivalente à :  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 L’exemple d’implémentation ci-dessous valide les entrées sélectionnées, leur utilisation, s’ils sont compris dans les tolérances, sinon à l’aide des valeurs par défaut.  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Objet héritant de <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> doit examiner le format de sortie demandé comme spécifié par <paramref name="targetWaveFormat" /> et retourner le format le plus proche pris en charge.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Instance valide de <see langword="System.Uri" /> indiquant l'emplacement des informations de lexique.</param>
        <param name="site">Référence à une interface <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> passée par l'infrastructure de la plateforme pour autoriser l'accès aux ressources de l'infrastructure.</param>
        <summary>Supprime un lexique actuellement chargé par le <see langword="Synthesizer" /><see langword="Voice" /> implémenté par l’instance actuelle de <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un lexique prononciation est une collection de mots ou expressions ainsi que des prononciations spécifiées à l’aide d’un alphabet prononciation approprié.  
  
 Cette méthode est généralement appelée en réponse à une <xref:System.Speech.Synthesis> en fonction des applications qui appellent <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> et à l’aide de la voix de synthétiseur implémentée par l’actuel <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance.  
  
   
  
## Examples  
 L’implémentation de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> utilise le lexique URI pour interroger une instance `System.Collections.Generic.Dictionary` pour le `System.IO.Stream`, ferme le flux et supprime l’uri faisant référence à du lexique.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il incombe à l’implémentation pour maîtriser entièrement et être en mesure de traiter le lexique stocké à <paramref name="uri" />. L’implémentation doit également effectuer le suivi et gérer les durées de vie de tous les lexiques qu'il supprime.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">Tableau d'instances <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> contenant le texte devant être restitué par la reconnaissance vocale.</param>
        <param name="waveHeader">
          <see langword="IntPtr" /> qui pointe vers une structure contenant le format de sortie audio.</param>
        <param name="site">Référence à une interface <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> passée par l'infrastructure de la plateforme pour autoriser l'accès aux ressources de l'infrastructure.</param>
        <summary>Affiche le tableau <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> spécifié au format de sortie spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La structure utilisée en tant que `waveHeader` et retournée par la méthode doit compatible avec le `WAVEFORMATEX` disponible sous SAPI.  
  
 Le `struct` doit fournir une fonctionnalité équivalente à :  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 L’exemple ci-dessous fait partie d’une implémentation de synthèse vocale personnalisée héritant de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>et à l’aide de l’utilisation de <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, et <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 L’implémentation de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Reçoit un tableau de <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances et crée un tableau de <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances à passer à la `Speak` méthode sur un moteur de synthèse sous-jacents.  
  
2.  Si le <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> valeur d’énumération par trouvé à partir de la <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> propriété sur le <xref:System.Speech.Synthesis.TtsEngine.FragmentState> retourné par la <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> propriété de chaque <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance est <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, l’implémentation  
  
    -   Traduit Americanism à Britishisms dans le texte à énoncer.  
  
    -   Si le <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> propriété sur le <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> fournis à la prise en charge de l’implémentation des interfaces le <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> type d’événement, un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance est utilisée pour créer un événement au lecteur une jauge de progression du synthétiseur est créée.  
  
3.  Un moteur de rendu de reconnaissance vocale est ensuite appelé avec le texte modifié <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tableau.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Synthétiseur vocal personnalisé implémente à l’aide <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> et <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> Professionnel en tant que filtres ou intermédiaires entre les applications de synthétiseur construites à l’aide de l’infrastructure de plateforme à travers les membres de la <see cref="N:System.Speech.Synthesis" /> espace de noms et moteurs de synthèse vocale système sous-jacents.  
  
Un <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> implémentation : 
1.  Interruptions ou modifier des aspects du entrant <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> objets 
2.  Génère les événements nécessaires à l’aide de la référence de site à un <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> instance 
3.  Génère la synthèse vocale réelle.  
  
Génération de la voix est généralement effectuée en appelant <c>Speak</c> sur l’un de la reconnaissance vocale fournis par le système d’exploitation de moteurs de rendu.  
  
Si un des moteurs de rendu disponibles vocale n’est pas utilisé, un objet héritant <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> doit créer son propre moteur de rendu de reconnaissance vocale.  
  
L’accès à la <c>Speak</c> méthode sur obtenus en utilisant le Registre et la réflexion. .  
  
Lorsque vous héritez de <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />, vous devez substituer les membres suivants : <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />, et <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>