<Type Name="TextFragment" FullName="System.Speech.Synthesis.TtsEngine.TextFragment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c65eb49060676e2f1621fcb140f4dc28b7e291cf" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408733" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFragment" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit TextFragment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFragment" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFragment" />
  <TypeSignature Language="F#" Value="type TextFragment = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contient des informations d'attributs de texte et de voix en vue de leur utilisation par un moteur de synthèse vocale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’infrastructure de plateforme de reconnaissance vocale décompresse la structure XML en fonction de l’entrée SSML et de constructions <xref:System.Speech.Synthesis.TtsEngine.TextFragment> objets.  
  
 Contenu vocal est disponible via le <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, et <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> propriétés d’un <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance.  
  
 Reconnaissance vocale attribut plus d’informations, telles que l’accent, hauteur et vitesse, sont obtenues à partir de la <xref:System.Speech.Synthesis.TtsEngine.FragmentState> objet retourné par la <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> propriété.  
  
   
  
## Examples  
 L’exemple ci-dessous fait partie d’une implémentation de synthèse vocale personnalisé héritant de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>et à l’aide de l’utilisation de <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, et <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 L’implémentation de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Reçoit un tableau de <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances et crée un tableau de <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances doit être passé à la `Speak` méthode sur un moteur de synthèse sous-jacent.  
  
     Un soin particulier est utilisé afin de respecter le <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> sur la version d’origine <xref:System.Speech.Synthesis.TtsEngine.TextFragment> lors de la création du <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> sur le nouveau <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  
  
2.  Si le <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> valeur d’énumération par trouvé à partir de la <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> propriété sur le <xref:System.Speech.Synthesis.TtsEngine.FragmentState> retournée par le <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> propriété de chaque <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance est <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, l’implémentation  
  
    -   Traduit Americanism à Britishisms dans le texte à énoncer.  
  
    -   Si le <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> propriété sur le <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> fournis à la prise en charge de l’implémentation des interfaces le <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> type d’événement, un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance est utilisée pour créer un événement pour le lecteur d’un indicateur de progression synthétiseur est créé.  
  
3.  Un moteur de rendu vocale est ensuite appelé avec le texte modifié <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tableau.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TextFragment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFragment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Construit une nouvelle instance de <see langword="TextFragment" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Constructeur par défaut pour <xref:System.Speech.Synthesis.TtsEngine.TextFragment>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.TtsEngine.FragmentState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberSignature Language="VB.NET" Value="Public Property State As FragmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::TtsEngine::FragmentState State { System::Speech::Synthesis::TtsEngine::FragmentState get(); void set(System::Speech::Synthesis::TtsEngine::FragmentState value); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.TtsEngine.FragmentState with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.FragmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit des informations d'attribut de voix pour <see langword="TextFragment" />.</summary>
        <value>Une instance <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" /> est retournée ou utilisée pour définir les informations d'attribut vocales d'un <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur par défaut de cette propriété est `null`.  
  
 Informations de prosodie peuvent être obtenues à partir de l’instance de <xref:System.Speech.Synthesis.TtsEngine.Prosody> retournée par le <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A> propriété sur l’instance de <xref:System.Speech.Synthesis.TtsEngine.FragmentState> retourné par <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public int TextLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la longueur du texte vocal dans le fragment.</summary>
        <value>Un <see langword="int" /> est retourné ou peut être utilisé pour définir la longueur, en caractères, de la chaîne de texte associée à ce fragment devant être prononcé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur par défaut de cette propriété est 0.  
  
   
  
## Examples  
 L’exemple ci-dessous fait partie d’une implémentation de synthèse vocale personnalisé héritant de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>et à l’aide de l’utilisation de <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, et <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 L’implémentation de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Reçoit un tableau de <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances et crée un tableau de <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances doit être passé à la `Speak` méthode sur un moteur de synthèse sous-jacent.  
  
     Un soin particulier est utilisé afin de respecter le <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> sur la version d’origine <xref:System.Speech.Synthesis.TtsEngine.TextFragment> lors de la création du <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> sur le nouveau <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  
  
2.  Si le <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> valeur d’énumération par trouvé à partir de la <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> propriété sur le <xref:System.Speech.Synthesis.TtsEngine.FragmentState> retournée par le <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> propriété de chaque <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance est <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, l’implémentation  
  
    -   Traduit Americanism à Britishisms dans le texte à énoncer.  
  
    -   Si le <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> propriété sur le <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> fournis à la prise en charge de l’implémentation des interfaces le <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> type d’événement, un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance est utilisée pour créer un événement pour le lecteur d’un indicateur de progression synthétiseur est créé.  
  
3.  Un moteur de rendu vocale est ensuite appelé avec le texte modifié <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tableau.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOffset">
      <MemberSignature Language="C#" Value="public int TextOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextOffset" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextOffset : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'emplacement de départ du texte dans le fragment.</summary>
        <value>Un <see langword="int" /> est retourné ou peut être utilisé pour définir l'emplacement de départ, en caractères, de la partie de texte associée à ce fragment devant être prononcé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur par défaut de cette propriété est 0.  
  
   
  
## Examples  
 L’exemple ci-dessous fait partie d’une implémentation de synthèse vocale personnalisé héritant de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>et à l’aide de l’utilisation de <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, et <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 L’implémentation de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Reçoit un tableau de <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances et crée un tableau de <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances doit être passé à la `Speak` méthode sur un moteur de synthèse sous-jacent.  
  
     Un soin particulier est utilisé afin de respecter le <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> sur la version d’origine <xref:System.Speech.Synthesis.TtsEngine.TextFragment> lors de la création du <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> sur le nouveau <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  
  
2.  Si le <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> valeur d’énumération par trouvé à partir de la <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> propriété sur le <xref:System.Speech.Synthesis.TtsEngine.FragmentState> retournée par le <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> propriété de chaque <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance est <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, l’implémentation  
  
    -   Traduit Americanism à Britishisms dans le texte à énoncer.  
  
    -   Si le <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> propriété sur le <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> fournis à la prise en charge de l’implémentation des interfaces le <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> type d’événement, un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance est utilisée pour créer un événement pour le lecteur d’un indicateur de progression synthétiseur est créé.  
  
3.  Un moteur de rendu vocale est ensuite appelé avec le texte modifié <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tableau.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToSpeak">
      <MemberSignature Language="C#" Value="public string TextToSpeak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextToSpeak" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberSignature Language="VB.NET" Value="Public Property TextToSpeak As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextToSpeak { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextToSpeak : string with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Définit ou obtient le texte vocal du fragment.</summary>
        <value>Une <see langword="System.String" /> est retournée ou peut être utilisée pour définir le texte vocal qu'utilisera un moteur de synthèse vocale pour générer la sortie audio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur par défaut de cette propriété est `System.String.Empty`.  
  
 Les applications sont libres de modifier complètement la valeur de <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>.  
  
 Redéfinition de la valeur de <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> ne change pas la valeur de <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> et <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>.  
  
   
  
## Examples  
 L’exemple ci-dessous fait partie d’une implémentation de synthèse vocale personnalisé héritant de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>et à l’aide de l’utilisation de <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, et <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 L’implémentation de <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Reçoit un tableau de <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances et crée un tableau de <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances doit être passé à la `Speak` méthode sur un moteur de synthèse sous-jacent.  
  
     Un soin particulier est utilisé afin de respecter le <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> sur la version d’origine <xref:System.Speech.Synthesis.TtsEngine.TextFragment> lors de la création du <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> sur le nouveau <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  
  
2.  Si le <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> valeur d’énumération par trouvé à partir de la <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> propriété sur le <xref:System.Speech.Synthesis.TtsEngine.FragmentState> retournée par le <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> propriété de chaque <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance est <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, l’implémentation  
  
    -   Traduit Americanism à Britishisms dans le texte à énoncer.  
  
    -   Si le <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> propriété sur le <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> fournis à la prise en charge de l’implémentation des interfaces le <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> type d’événement, un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance est utilisée pour créer un événement pour le lecteur d’un indicateur de progression synthétiseur est créé.  
  
3.  Un moteur de rendu vocale est ensuite appelé avec le texte modifié <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tableau.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>