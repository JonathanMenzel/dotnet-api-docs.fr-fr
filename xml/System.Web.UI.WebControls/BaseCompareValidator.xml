<Type Name="BaseCompareValidator" FullName="System.Web.UI.WebControls.BaseCompareValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="faee6c33509fafff73d618b84e5b83bbb59838e4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30599733" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class BaseCompareValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BaseCompareValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.BaseCompareValidator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BaseCompareValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class BaseCompareValidator abstract : System::Web::UI::WebControls::BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Sert de classe de base abstraite pour les contrôles de validation qui effectuent des comparaisons typées.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.BaseCompareValidator> classe est héritée par les contrôles de validation qui comparent des valeurs, telles que la <xref:System.Web.UI.WebControls.CompareValidator> et <xref:System.Web.UI.WebControls.RangeValidator> contrôles, à fournir des fonctionnalités de base courantes.  
  
 Utilisez le <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> le type de propriété pour spécifier les données que les valeurs sont converties en avant d’être comparées.  
  
> [!NOTE]
>  Si la valeur du contrôle d’entrée en cours de validation ne peut pas être convertie en type de données spécifié, la validation échoue. Le <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> du contrôle de validation est définie sur `false`.  
  
 La <xref:System.Web.UI.WebControls.BaseCompareValidator> classe contient également plusieurs propriétés et méthodes statiques qui sont utiles lors de l’exécution de validations par comparaison. Vous pouvez déterminer si une chaîne peut être convertie en un type de données spécifiques à l’aide de la <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%2A> (méthode). L’année maximale pouvant être représentée par une année à deux chiffres est contenue dans le <xref:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear%2A> propriété. Le <xref:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear%2A> méthode vous permet de convertir une année à deux chiffres en une année à quatre chiffres.  
  
> [!NOTE]
>  Lorsque vous utilisez des contrôles de validateur qui dérivent de la <xref:System.Web.UI.WebControls.BaseCompareValidator> de contrôle à l’intérieur d’un <xref:System.Web.UI.UpdatePanel> contrôler, assurez-vous que le contrôle du programme de validation et le contrôle auquel il est associé se trouvent dans le même volet. Pour plus d’informations sur l’utilisation de la <xref:System.Web.UI.UpdatePanel> du contrôle des mises à jour de page partielle, consultez [vue d’ensemble du rendu de Page partiel](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Pour plus d’informations sur les contrôles de validation, consultez <xref:System.Web.UI.WebControls.BaseValidator>.  
  
## <a name="accessibility"></a>Accessibilité  
 Le balisage rendu par défaut pour ce contrôle n’est peut-être pas conforme aux normes d’accessibilité telles que les règles de priorité 1 Web contenu Accessibility Guidelines 1.0 (WCAG). Pour plus d’informations sur la prise en charge de l’accessibilité de ce contrôle, consultez [contrôles ASP.NET et l’accessibilité](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.CompareValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RangeValidator" />
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.Type" />
    <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType)" />
    <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" />
    <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear(System.Int32)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BaseCompareValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BaseCompareValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.BaseCompareValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que la <xref:System.Web.UI.WebControls.BaseCompareValidator> classe est abstraite, vous ne pouvez pas créer un <xref:System.Web.UI.WebControls.BaseCompareValidator> directement l’objet. Ce constructeur est appelé par le constructeur d’une classe dérivée pour initialiser les propriétés définies dans le <xref:System.Web.UI.WebControls.BaseCompareValidator> classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.CompareValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RangeValidator" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> qui représente le flux de sortie pour le rendu du contenu HTML sur le client.</param>
        <summary>Ajoute les attributs et les styles HTML qui doivent être rendus pour le contrôle à l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.BaseCompareValidator.AddAttributesToRender%2A> méthode est utilisée pour restituer les attributs du contrôle dans la balise HTML pour le contrôle. Cette méthode est généralement substituée par les développeurs de contrôles dans les classes dérivées pour insérer les attributs appropriés et styles à la <xref:System.Web.UI.HtmlTextWriter> le flux de sortie pour un contrôle.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution du <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" /> (méthode), veillez à appeler la méthode correspondante dans la classe de base. Dans le cas contraire, les attributs contenus dans la classe de base ne sont pas rendus.</para>
        </block>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CanConvert">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Détermine si la chaîne spécifiée peut être convertie au type de données spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public static bool CanConvert (string text, System.Web.UI.WebControls.ValidationDataType type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanConvert(string text, valuetype System.Web.UI.WebControls.ValidationDataType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CanConvert (text As String, type As ValidationDataType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CanConvert(System::String ^ text, System::Web::UI::WebControls::ValidationDataType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne à tester.</param>
        <param name="type">Une des valeurs de <see cref="T:System.Web.UI.WebControls.ValidationDataType" />.</param>
        <summary>Détermine si la chaîne spécifiée peut être convertie au type de données spécifié. Cette version de la méthode surchargée teste les valeurs de monnaie, de date et doubles à l'aide du format utilisé par la culture actuelle.</summary>
        <returns>
          <see langword="true" /> si la chaîne de données spécifiée peut être convertie au type de données spécifié ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%29> méthode pour déterminer si la chaîne spécifiée peut être convertie au type de données spécifié. Cette méthode est couramment utilisée pour tester si une chaîne peut être convertie en un type de données compatible avant d’effectuer une opération qui dépend de ce type de données.  
  
 Cette version de la méthode teste la valeur à l’aide du format utilisé par la culture actuelle. Pour tester la valeur à l’aide d’un format indépendant de la culture, utilisez la <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Boolean%29?displayProperty=nameWithType> version de cette méthode surchargée.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%2A> pour comparer deux valeurs entières et déterminer si le deuxième entier peut être converti.  
  
 [!code-aspx-csharp[BaseCompareValidatorCanConvert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseCompareValidatorCanConvert/CS/basecomparevalidatorcanconvertcs.aspx#1)]
 [!code-aspx-vb[BaseCompareValidatorCanConvert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseCompareValidatorCanConvert/VB/basecomparevalidatorcanconvertvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues" />
        <altmember cref="Overload:System.Web.UI.WebControls.BaseCompareValidator.Convert" />
      </Docs>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public static bool CanConvert (string text, System.Web.UI.WebControls.ValidationDataType type, bool cultureInvariant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanConvert(string text, valuetype System.Web.UI.WebControls.ValidationDataType type, bool cultureInvariant) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CanConvert (text As String, type As ValidationDataType, cultureInvariant As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CanConvert(System::String ^ text, System::Web::UI::WebControls::ValidationDataType type, bool cultureInvariant);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
        <Parameter Name="cultureInvariant" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne à tester.</param>
        <param name="type">Une des valeurs d'énumération <see cref="T:System.Web.UI.WebControls.ValidationDataType" />.</param>
        <param name="cultureInvariant">
          <see langword="true" /> pour tester des valeurs à l'aide d'un format indépendant de la culture ; sinon, <see langword="false" />.</param>
        <summary>Détermine si la chaîne spécifiée peut être convertie au type de données spécifié. Cette version de la méthode surchargée vous permet de spécifier si les valeurs sont testées à l'aide d'un format indépendant de la culture.</summary>
        <returns>
          <see langword="true" /> si la chaîne de données spécifiée peut être convertie au type de données spécifié ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Boolean%29> méthode pour déterminer si la chaîne spécifiée peut être convertie au type de données spécifié. Cette méthode est couramment utilisée pour tester si une chaîne peut être convertie en un type de données compatible avant d’effectuer une opération qui dépend de ce type de données. Pour indiquer que les valeurs doivent être testées à l’aide d’un format indépendant de la culture, passez dans `true` pour la `cultureInvariant` paramètre ; sinon, les valeurs sont testées à l’aide du format utilisé par la culture actuelle. Lorsque vous testez une valeur à l’aide du format utilisé par la culture actuelle, envisagez d’utiliser le <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%29?displayProperty=nameWithType> version de cette méthode surchargée.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues" />
        <altmember cref="Overload:System.Web.UI.WebControls.BaseCompareValidator.Convert" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compare deux chaînes à l'aide de l'opérateur et du type de données de validation spécifiés.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="protected static bool Compare (string leftText, string rightText, System.Web.UI.WebControls.ValidationCompareOperator op, System.Web.UI.WebControls.ValidationDataType type);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool Compare(string leftText, string rightText, valuetype System.Web.UI.WebControls.ValidationCompareOperator op, valuetype System.Web.UI.WebControls.ValidationDataType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.String,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function Compare (leftText As String, rightText As String, op As ValidationCompareOperator, type As ValidationDataType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool Compare(System::String ^ leftText, System::String ^ rightText, System::Web::UI::WebControls::ValidationCompareOperator op, System::Web::UI::WebControls::ValidationDataType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftText" Type="System.String" />
        <Parameter Name="rightText" Type="System.String" />
        <Parameter Name="op" Type="System.Web.UI.WebControls.ValidationCompareOperator" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
      </Parameters>
      <Docs>
        <param name="leftText">Valeur à gauche de l'opérateur.</param>
        <param name="rightText">Valeur à droite de l'opérateur.</param>
        <param name="op">Une des valeurs de <see cref="T:System.Web.UI.WebControls.ValidationCompareOperator" />.</param>
        <param name="type">Une des valeurs de <see cref="T:System.Web.UI.WebControls.ValidationDataType" />.</param>
        <summary>Compare deux chaînes à l'aide de l'opérateur et du type de données spécifiés. Cette version de la méthode surchargée compare les valeurs de monnaie, de date et doubles à l'aide du format utilisé par la culture actuelle.</summary>
        <returns>
          <see langword="true" /> si le paramètre <paramref name="leftValue" /> fait référence au paramètre <paramref name="rightValue" /> de la manière spécifiée par le paramètre <paramref name="op" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.BaseCompareValidator.Compare%28System.String%2CSystem.String%2CSystem.Web.UI.WebControls.ValidationCompareOperator%2CSystem.Web.UI.WebControls.ValidationDataType%29> méthode est utilisée pour tester si la valeur de la `leftText` paramètre est lié à la valeur de la `rightText` paramètre de la manière spécifiée par la `op` paramètre. Le `type` paramètre spécifie le type de données des valeurs comparées.  
  
> [!NOTE]
>  Si le `op` paramètre est défini sur `ValidationCompareOperator.DataTypeCheck`, cette méthode ne vérifie que la valeur de la `leftText` paramètre pour le type de données spécifié par le `type` paramètre. Le `rightText` paramètre est ignoré.  
  
 Cette version de la méthode compare les valeurs en utilisant le format utilisé par la culture actuelle. Pour comparer les valeurs à l’aide d’un format indépendant de la culture, utilisez la <xref:System.Web.UI.WebControls.BaseCompareValidator.Compare%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Boolean%2CSystem.Web.UI.WebControls.ValidationCompareOperator%2CSystem.Web.UI.WebControls.ValidationDataType%29?displayProperty=nameWithType> version de cette méthode surchargée.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationCompareOperator" />
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.Convert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Object@)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="protected static bool Compare (string leftText, bool cultureInvariantLeftText, string rightText, bool cultureInvariantRightText, System.Web.UI.WebControls.ValidationCompareOperator op, System.Web.UI.WebControls.ValidationDataType type);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool Compare(string leftText, bool cultureInvariantLeftText, string rightText, bool cultureInvariantRightText, valuetype System.Web.UI.WebControls.ValidationCompareOperator op, valuetype System.Web.UI.WebControls.ValidationDataType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.Boolean,System.String,System.Boolean,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function Compare (leftText As String, cultureInvariantLeftText As Boolean, rightText As String, cultureInvariantRightText As Boolean, op As ValidationCompareOperator, type As ValidationDataType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool Compare(System::String ^ leftText, bool cultureInvariantLeftText, System::String ^ rightText, bool cultureInvariantRightText, System::Web::UI::WebControls::ValidationCompareOperator op, System::Web::UI::WebControls::ValidationDataType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftText" Type="System.String" />
        <Parameter Name="cultureInvariantLeftText" Type="System.Boolean" />
        <Parameter Name="rightText" Type="System.String" />
        <Parameter Name="cultureInvariantRightText" Type="System.Boolean" />
        <Parameter Name="op" Type="System.Web.UI.WebControls.ValidationCompareOperator" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
      </Parameters>
      <Docs>
        <param name="leftText">Valeur à gauche de l'opérateur.</param>
        <param name="cultureInvariantLeftText">
          <see langword="true" /> pour convertir la valeur de côté gauche en un format indépendant de la culture ; sinon, <see langword="false" />.</param>
        <param name="rightText">Valeur à droite de l'opérateur.</param>
        <param name="cultureInvariantRightText">
          <see langword="true" /> pour convertir la valeur de côté droit en un format indépendant de la culture ; sinon, <see langword="false" />.</param>
        <param name="op">Une des valeurs de <see cref="T:System.Web.UI.WebControls.ValidationCompareOperator" />.</param>
        <param name="type">Une des valeurs de <see cref="T:System.Web.UI.WebControls.ValidationDataType" />.</param>
        <summary>Compare deux chaînes à l'aide de l'opérateur et du type de données de validation spécifiés. Cette version de la méthode surchargée vous permet de spécifier si les valeurs sont comparées à l'aide d'un format indépendant de la culture.</summary>
        <returns>
          <see langword="true" /> si le paramètre <paramref name="leftValue" /> fait référence au paramètre <paramref name="rightValue" /> de la manière spécifiée par le paramètre <paramref name="op" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.BaseCompareValidator.Compare%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Boolean%2CSystem.Web.UI.WebControls.ValidationCompareOperator%2CSystem.Web.UI.WebControls.ValidationDataType%29> méthode est utilisée pour tester si la valeur de la `leftText` paramètre est lié à la valeur de la `rightText` paramètre de la manière spécifiée par la `op` paramètre. Le `type` paramètre spécifie le type de données des valeurs comparées.  
  
> [!NOTE]
>  Si le `op` paramètre est défini sur `ValidationCompareOperator.DataTypeCheck`, cette méthode ne vérifie que la valeur de la `leftText` paramètre pour le type de données spécifié par le `type` paramètre. Le `rightText` paramètre est ignoré.  
  
 Pour indiquer que les valeurs doivent être comparées à l’aide d’un format indépendant de la culture, passez dans `true` pour le `cultureInvariantLeftText` et `cultureInvariantRightText` paramètres ; sinon, les valeurs sont comparées à l’aide du format utilisé par la culture actuelle. Lorsque vous comparez des valeurs à l’aide du format utilisé par la culture actuelle, envisagez d’utiliser le <xref:System.Web.UI.WebControls.BaseCompareValidator.Compare%28System.String%2CSystem.String%2CSystem.Web.UI.WebControls.ValidationCompareOperator%2CSystem.Web.UI.WebControls.ValidationDataType%29?displayProperty=nameWithType> version de cette méthode surchargée.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationCompareOperator" />
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.Convert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Object@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit le texte en question en un objet du type de données spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="protected static bool Convert (string text, System.Web.UI.WebControls.ValidationDataType type, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool Convert(string text, valuetype System.Web.UI.WebControls.ValidationDataType type, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.Convert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function Convert (text As String, type As ValidationDataType, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool Convert(System::String ^ text, System::Web::UI::WebControls::ValidationDataType type, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">Texte à convertir.</param>
        <param name="type">Une des valeurs de <see cref="T:System.Web.UI.WebControls.ValidationDataType" />.</param>
        <param name="value">Cette méthode retourne un objet qui contient le résultat de la conversion. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit le texte en question en un objet du type de données spécifié. Cette version de la méthode surchargée convertit les valeurs de monnaie, de date et doubles à l'aide du format utilisé par la culture actuelle.</summary>
        <returns>
          <see langword="true" /> si la conversion réussit ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.BaseCompareValidator.Convert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Object%40%29> méthode est utilisée pour convertir du texte dans un objet du type de données spécifié. Bien que la méthode retourne `true` ou `false` pour indiquer si la conversion a réussi, la valeur convertie est stockée dans le `value` `out` paramètre.  
  
> [!NOTE]
>  Si la conversion échoue, le `value` paramètre est défini sur `null`.  
  
 Cette version de la méthode convertit les valeurs à l’aide du format utilisé par la culture actuelle. Pour convertir des valeurs à l’aide d’un format indépendant de la culture, utilisez la <xref:System.Web.UI.WebControls.BaseCompareValidator.Convert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Boolean%2CSystem.Object%40%29?displayProperty=nameWithType> version de cette méthode surchargée.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.String,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" />
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="protected static bool Convert (string text, System.Web.UI.WebControls.ValidationDataType type, bool cultureInvariant, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool Convert(string text, valuetype System.Web.UI.WebControls.ValidationDataType type, bool cultureInvariant, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.Convert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function Convert (text As String, type As ValidationDataType, cultureInvariant As Boolean, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool Convert(System::String ^ text, System::Web::UI::WebControls::ValidationDataType type, bool cultureInvariant, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
        <Parameter Name="cultureInvariant" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">Texte à convertir.</param>
        <param name="type">Une des valeurs de <see cref="T:System.Web.UI.WebControls.ValidationDataType" />.</param>
        <param name="cultureInvariant">
          <see langword="true" /> pour convertir des valeurs à l'aide d'un format indépendant de la culture ; sinon, <see langword="false" />.</param>
        <param name="value">Cette méthode retourne un objet qui contient le résultat de la conversion. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit le texte en question en un objet du type de données spécifié. Cette version de la méthode surchargée vous permet de spécifier si les valeurs sont converties à l'aide d'un format indépendant de la culture.</summary>
        <returns>
          <see langword="true" /> si la conversion réussit ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.BaseCompareValidator.Convert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Boolean%2CSystem.Object%40%29> méthode est utilisée pour convertir du texte dans un objet du type de données spécifié. Bien que la méthode retourne `true` ou `false` pour indiquer si la conversion a réussi, la valeur convertie est stockée dans le `value` `out` paramètre.  
  
> [!NOTE]
>  Si la conversion échoue, le `value` paramètre est défini sur `null`.  
  
 Pour indiquer que les valeurs doivent être converties à l’aide d’un format indépendant de la culture, passez dans `true` pour la `cultureInvariant` paramètre ; sinon, les valeurs sont converties à l’aide du format utilisé par la culture actuelle. Lors de la conversion d’une valeur à l’aide du format utilisé par la culture actuelle, envisagez d’utiliser le <xref:System.Web.UI.WebControls.BaseCompareValidator.Convert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Object%40%29?displayProperty=nameWithType> version de cette méthode surchargée.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.String,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" />
      </Docs>
    </Member>
    <Member MemberName="CultureInvariantValues">
      <MemberSignature Language="C#" Value="public bool CultureInvariantValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CultureInvariantValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureInvariantValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CultureInvariantValues { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les valeurs sont converties en un format indépendant de la culture avant d'être comparées.</summary>
        <value>
          <see langword="true" /> pour convertir des valeurs en un format indépendant de la culture avant d'être comparées ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues%2A> est définie sur `true`, les propriétés du contrôle qui ne sont pas fortement typées sont converties en un format indépendant de la culture avant d’être comparées. Lorsque cette propriété a la valeur `false`, les valeurs sont converties au format de la culture actuelle. Le <xref:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues%2A> propriété n’affecte pas les valeurs entrées par les utilisateurs du contrôle sur une page Web.  
  
 Cette propriété ne peut pas être définie par les thèmes ou par des thèmes de feuille de style. Pour plus d’informations, consultez <xref:System.Web.UI.ThemeableAttribute> et [ASP.NET thèmes et les apparences](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
      </Docs>
    </Member>
    <Member MemberName="CutoffYear">
      <MemberSignature Language="C#" Value="protected static int CutoffYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CutoffYear" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property CutoffYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property int CutoffYear { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'année maximale pouvant être représentée par une année sur deux chiffres.</summary>
        <value>Année maximale pouvant être représentée par une année sur deux chiffres.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear%2A> propriété pour déterminer l’année maximale pouvant être représentée par une année à deux chiffres dans une plage de 100 ans. Par exemple, si cette propriété contient la valeur `2029`, vous pouvez représenter les années 1930 à 2029 à l’aide d’une année à deux chiffres. L’année à deux chiffres 30 est interprétée comme 1930, alors que 29 est interprétée comme 2029. Vous ne pouvez pas modifier la valeur de cette propriété directement. Toutefois, vous pouvez modifier l’année maximale qui peut être représentée par une année à deux chiffres en définissant le <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.Calendar.TwoDigitYearMax" />
      </Docs>
    </Member>
    <Member MemberName="DetermineRenderUplevel">
      <MemberSignature Language="C#" Value="protected override bool DetermineRenderUplevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool DetermineRenderUplevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.DetermineRenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function DetermineRenderUplevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool DetermineRenderUplevel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Détermine si le contrôle de validation peut être rendu pour un navigateur plus récent (« de niveau supérieur »).</summary>
        <returns>
          <see langword="true" /> si le contrôle de validation peut être rendu pour un navigateur « de niveau supérieur » ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.BaseCompareValidator.DetermineRenderUplevel%2A> méthode est une fonction d’assistance utilisée principalement par le <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> propriété pour déterminer si le navigateur du client prend en charge le rendu « de niveau supérieur » (rendu sur un navigateur plus récent). Le <xref:System.Web.UI.WebControls.BaseCompareValidator> classe substitue cette méthode pour retourner `false` si la culture actuelle n’utilise pas de calendrier grégorien.  
  
> [!NOTE]
>  Cette méthode est principalement utilisée par des développeurs de contrôles.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution du <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.DetermineRenderUplevel" /> (méthode), veillez à appeler la méthode correspondante dans la classe de base. Dans le cas contraire, les conditions définies dans la classe de base seront ignorées.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="GetDateElementOrder">
      <MemberSignature Language="C#" Value="protected static string GetDateElementOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig string GetDateElementOrder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.GetDateElementOrder" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetDateElementOrder () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::String ^ GetDateElementOrder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Détermine l'ordre dans lequel le mois, le jour et l'année apparaissent dans une valeur de date pour la culture actuelle.</summary>
        <returns>Chaîne qui représente l'ordre dans lequel le mois, le jour et l'année apparaissent dans une valeur de date pour la culture actuelle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le mois, jour et année d’une valeur de date peuvent apparaître dans des ordres différents selon les paramètres de culture actuels. Le <xref:System.Web.UI.WebControls.BaseCompareValidator.GetDateElementOrder%2A> méthode est utilisée pour déterminer l’ordre dans lequel ces valeurs apparaissent. Le tableau suivant montre les différentes valeurs retournées par cette méthode.  
  
|Ordre des éléments de date|Valeur de retour|  
|------------------------|------------------|  
|Jour, mois, année|« dmy »|  
|Mois, jour, année|« MJA »|  
|Année, mois, jour|"ymd"|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" />
        <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetFullYear">
      <MemberSignature Language="C#" Value="protected static int GetFullYear (int shortYear);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig int32 GetFullYear(int32 shortYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetFullYear (shortYear As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static int GetFullYear(int shortYear);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shortYear" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="shortYear">Année sur deux chiffres.</param>
        <summary>Génère la représentation sur quatre chiffres de l'année sur deux chiffres spécifiée.</summary>
        <returns>Représentation sur quatre chiffres de l'année sur deux chiffres spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear%2A> méthode permettant de générer la représentation sous forme de quatre chiffres de l’année à deux chiffres spécifiée. La représentation sous forme de quatre chiffres dépend de la valeur de la <xref:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear%2A> propriété, qui contient l’année maximale pouvant être représentée par une année à deux chiffres dans une plage de 100 ans. Par exemple, si le <xref:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear%2A> propriété contient la valeur `2029`, le <xref:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear%2A> méthode retourne une année entre 1930 et 2029. L’année à deux chiffres 30 est interprétée comme 1930, alors que 29 est interprétée comme 2029. Vous pouvez modifier l’année maximale qui peut être représentée par une année à deux chiffres en définissant le <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriété.  
  
> [!NOTE]
>  Étant donné que cette méthode est `static`, vous pouvez l’utiliser sans création d’une instance de la classe en qualifiant le nom de la méthode, ainsi que le nom de la classe, par exemple, `BaseCompareValidator.GetFullYear`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" />
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.Calendar.TwoDigitYearMax" />
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ValidationDataType Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ValidationDataType Type" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseCompareValidator.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As ValidationDataType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ValidationDataType Type { System::Web::UI::WebControls::ValidationDataType get(); void set(System::Web::UI::WebControls::ValidationDataType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ValidationDataType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type de données auquel les valeurs comparées sont converties avant la comparaison.</summary>
        <value>Une des valeurs d'énumération <see cref="T:System.Web.UI.WebControls.ValidationDataType" />. La valeur par défaut est <see langword="String" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> propriété pour spécifier le type de données utilisé pour la comparaison. Le <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> propriété est utilisée différemment par les divers contrôles de validation de comparaison.  
  
> [!IMPORTANT]
>  Lorsque le <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> est définie sur <xref:System.Web.UI.WebControls.ValidationDataType.Date> et le type de calendrier actuel est non grégoriens, le validateur exécute une validation côté serveur uniquement. Le script client de validateur prend en charge que les calendriers grégorien.  
  
 Par exemple, dans le <xref:System.Web.UI.WebControls.RangeValidator> (contrôle), toutes les valeurs comparées (la limite supérieure, la limite inférieure et la valeur du contrôle d’entrée) sont converties en type de données spécifié avant que toute comparaison est effectuée. Toutefois, si vous utilisez un <xref:System.Web.UI.WebControls.CompareValidator> contrôler et de définir son <xref:System.Web.UI.WebControls.CompareValidator.Operator%2A> propriété `ValidationCompareOperator.DataTypeCheck`, seule la valeur du contrôle d’entrée est convertie au type de données spécifié.  
  
> [!NOTE]
>  Si la valeur du contrôle d’entrée associé au contrôle de validation ne peut pas être convertie en type de données spécifié, la validation échoue. Le <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> du contrôle de validation est définie sur `false`.  
  
 Le tableau suivant répertorie les valeurs que vous pouvez utiliser pour le <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> propriété.  
  
|Type de données|Description |  
|---------------|-----------------|  
|`String`|Spécifie un type de données chaîne.|  
|`Integer`|Spécifie un type de données entier signé 32 bits.|  
|`Double`|Spécifie un type de données de la nombre à virgule flottante double précision.|  
|`Date`|Spécifie un type de données date.|  
|`Currency`|Spécifie un type de données monétaire.|  
  
 Cette propriété ne peut pas être définie par les thèmes ou les thèmes de feuille de style. Pour plus d’informations, consultez <xref:System.Web.UI.ThemeableAttribute> et [ASP.NET thèmes et les apparences](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> propriété pour spécifier le type de données que les valeurs comparées sont converties en avant la comparaison est effectuée.  
  
 [!code-aspx-csharp[Classic CompareValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CompareValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic CompareValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CompareValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Le type de données spécifié ne fait pas partie des valeurs <see cref="T:System.Web.UI.WebControls.ValidationDataType" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
      </Docs>
    </Member>
  </Members>
</Type>