<Type Name="Xml" FullName="System.Web.UI.WebControls.Xml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5e2f21a2d0a19b732f032d68c593e52a5fb4fec6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37590082" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Xml : System.Web.UI.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Xml extends System.Web.UI.Control" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Xml" />
  <TypeSignature Language="VB.NET" Value="Public Class Xml&#xA;Inherits Control" />
  <TypeSignature Language="C++ CLI" Value="public ref class Xml : System::Web::UI::Control" />
  <TypeSignature Language="F#" Value="type Xml = class&#xA;    inherit Control" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DocumentSource")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.WebControls.XmlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false, true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Affiche un document XML sans mise en forme ou à l’aide du langage XSLT.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans cette rubrique :  
  
-   [Introduction](#introduction)  
  
-   [Spécification des données XML](#specifying_xml_data)  
  
-   [Spécification d’une Transformation XSL](#specifying_an_xsl_transformation)  
  
-   [Syntaxe déclarative](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduction  
 Utilisez le <xref:System.Web.UI.WebControls.Xml> contrôle pour afficher le contenu d’un document XML sans mise en forme ou à l’aide de Transformations XSL.  
  
<a name="specifying_xml_data"></a>   
## <a name="specifying-xml-data"></a>Spécification des données XML  
 Le document XML à afficher est spécifié en définissant une des trois propriétés. Ces trois propriétés représentent les différents types de documents XML qui peuvent être affichées. Vous pouvez afficher un <xref:System.Xml.XmlDocument?displayProperty=nameWithType>, une chaîne XML ou un fichier XML en définissant la propriété appropriée. Le tableau suivant répertorie les propriétés permettant de spécifier le document XML.  
  
|Property|Description |  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.Xml.Document%2A>|Définit le document XML à l’aide un <xref:System.Xml.XmlDocument?displayProperty=nameWithType> objet. **Avertissement :** cette propriété est obsolète. Utilisez une des autres propriétés répertoriées dans cette section pour définir le code XML du contenu pour le <xref:System.Web.UI.WebControls.Xml> contrôle.|  
|<xref:System.Web.UI.WebControls.Xml.DocumentContent%2A>|Définit le document XML à l’aide d’une chaîne. **Remarque :** cette propriété est généralement définie de manière déclarative en plaçant le texte entre les balises `<asp:Xml>` balises de la <xref:System.Web.UI.WebControls.Xml> contrôle.|  
|<xref:System.Web.UI.WebControls.Xml.DocumentSource%2A>|Définit le document XML à l’aide d’un fichier.|  
  
> [!NOTE]
>  Au moins une des propriétés de document XML doit être définie pour afficher un document XML. Si plusieurs propriétés de document XML sont définie, le document XML référencé dans le dernier jeu de propriétés s’affiche. Les documents dans les autres propriétés sont ignorées.  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>Spécification d’une Transformation XSL  
 Vous pouvez éventuellement spécifier une feuille de style XSLT (XSL Transformation) qui met en forme le document XML avant qu’il est écrit dans le flux de sortie en définissant une des deux propriétés. Les deux propriétés représentent les différents types de feuilles de style XSL Transformation qui peuvent être utilisées pour mettre en forme le document XML. Vous pouvez mettre en forme le document XML avec un <xref:System.Xml.Xsl.XslCompiledTransform?displayProperty=nameWithType> de l’objet ou avec une Transformation XSL de fichier de feuille de style en définissant la propriété appropriée. Si aucune feuille de style XSLT n’est spécifié, le document XML est affiché en utilisant le format par défaut. Le tableau suivant répertorie les propriétés permettant de spécifier une feuille de style XSLT.  
  
|Property|Description |  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.Xml.Transform%2A>|Met en forme le document XML à l’aide de la <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> objet. **Remarque :** Using un <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> objet nécessite `Full Trust` autorisations.|  
|<xref:System.Web.UI.WebControls.Xml.TransformSource%2A>|Met en forme le document XML à l’aide du fichier de feuille de style XSLT spécifié.|  
  
> [!NOTE]
>  La feuille de style XSLT est facultative. Vous n’avez pas besoin de définir le <xref:System.Web.UI.WebControls.Xml.Transform%2A> ou <xref:System.Web.UI.WebControls.Xml.TransformSource%2A> propriété. Si les deux propriétés de feuille de style XSLT sont définies, la dernière propriété définie détermine quelle feuille de style XSLT est utilisé pour mettre en forme le document XML. L’autre propriété est ignorée.  
  
 Le <xref:System.Web.UI.WebControls.Xml> classe fournit également la <xref:System.Web.UI.WebControls.Xml.TransformArgumentList%2A> propriété, qui vous permet de fournir la feuille de style XSL Transformation avec des arguments facultatifs. Les arguments peuvent être des paramètres de XSL Transformations (XSLT) ou des objets d’extension.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Syntaxe déclarative  
  
```  
<asp:Xml  
    DocumentSource="uri"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformSource="string"  
    Visible="True|False"  
/>  
```  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer <xref:System.Xml.XmlDocument> et <xref:System.Xml.Xsl.XslTransform> objets à partir d’un exemple de fichier XML et une feuille de style XSLT. Les objets sont ensuite utilisés par le contrôle XML pour afficher le document XML.  
  
 [!code-aspx-csharp[XmlClassExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlClassExample/CS/xmlcs.aspx#1)]
 [!code-aspx-vb[XmlClassExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlClassExample/VB/xmlvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.XmlDocument" />
    <altmember cref="T:System.Xml.Xsl.XslTransform" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.TransformArgumentList" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Xml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Xml();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.AddParsedSubObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddParsedSubObject (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddParsedSubObject(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.AddParsedSubObject : obj -&gt; unit" Usage="xml.AddParsedSubObject obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Object" /> qui représente l’élément analysé.</param>
        <summary>Notifie au contrôle serveur qu’un élément XML ou HTML a été analysé, et ajoute l’élément à l’objet <see cref="T:System.Web.UI.ControlCollection" /> du contrôle serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.WebControls.Xml.AddParsedSubObject%2A> méthode personnalisé <xref:System.Web.UI.WebControls.Xml> contrôle serveur.  
  
 [!code-aspx-csharp[CustomXmlAddParsedSubObject#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/CS/custom_xml_addparsedsubobjectcs.aspx#1)]
 [!code-aspx-vb[CustomXmlAddParsedSubObject#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/VB/custom_xml_addparsedsubobjectvb.aspx#1)]  
  
 [!code-csharp[CustomXmlAddParsedSubObject#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/CS/custom_xml_addparsedsubobject.cs#2)]
 [!code-vb[CustomXmlAddParsedSubObject#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/VB/custom_xml_addparsedsubobject.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="obj" /> n'est pas de type <see cref="T:System.Web.UI.LiteralControl" />.</exception>
        <altmember cref="M:System.Web.UI.Control.AddParsedSubObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ClientID">
      <MemberSignature Language="C#" Value="public override string ClientID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.ClientID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ClientID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ClientID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientID : string" Usage="System.Web.UI.WebControls.Xml.ClientID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Substitue la propriété <see cref="P:System.Web.UI.Control.ClientID" /> et retourne l'identificateur du contrôle serveur de base.</summary>
        <value>Identificateur de contrôle serveur de base.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Control.ClientID" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.Controls" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Controls As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ControlCollection ^ Controls { System::Web::UI::ControlCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controls : System.Web.UI.ControlCollection" Usage="System.Web.UI.WebControls.Xml.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Substitue la propriété <see cref="P:System.Web.UI.Control.Controls" /> et retourne la collection <see cref="T:System.Web.UI.ControlCollection" /> de base.</summary>
        <value>Collection <see cref="T:System.Web.UI.ControlCollection" /> de base.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberSignature Language="F#" Value="override this.CreateControlCollection : unit -&gt; System.Web.UI.ControlCollection" Usage="xml.CreateControlCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée un objet <see cref="T:System.Web.UI.EmptyControlCollection" />.</summary>
        <returns>Retourne toujours un <see cref="T:System.Web.UI.EmptyControlCollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Xml.CreateControlCollection%2A> méthode est principalement utilisée par les développeurs qui étendent les fonctionnalités de la <xref:System.Web.UI.WebControls.Xml> contrôle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument Document { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.Document" />
      <MemberSignature Language="VB.NET" Value="Public Property Document As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlDocument ^ Document { System::Xml::XmlDocument ^ get(); void set(System::Xml::XmlDocument ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Xml.XmlDocument with get, set" Usage="System.Web.UI.WebControls.Xml.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is the XPathNavigator property. Create a System.Xml.XPath.XPathDocument and call CreateNavigator() to create an XPathNavigator. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Xml.XmlDocument" /> à afficher dans le contrôle <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <value>
          <see cref="T:System.Xml.XmlDocument" /> à afficher dans le contrôle <see cref="T:System.Web.UI.WebControls.Xml" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propriété <xref:System.Web.UI.WebControls.Xml.Document%2A> est obsolète. Pour spécifier le code XML qui s’affichera dans le <xref:System.Web.UI.WebControls.Xml> contrôler, utilisez le <xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> propriété ou le <xref:System.Web.UI.WebControls.Xml.DocumentSource%2A> propriété. Pour plus d’informations sur ces alternatives, consultez la vue d’ensemble de la classe pour le <xref:System.Web.UI.WebControls.Xml> contrôle.  
  
 Le document XML à afficher dans le <xref:System.Web.UI.WebControls.Xml> contrôle est spécifié dans un des trois façons. Vous pouvez spécifier un <xref:System.Xml.XmlDocument?displayProperty=nameWithType> objet, une chaîne XML ou un fichier XML en définissant la propriété appropriée. Le <xref:System.Web.UI.WebControls.Xml.Document%2A> propriété est utilisée pour spécifier un <xref:System.Xml.XmlDocument?displayProperty=nameWithType> (représentant un document XML) à afficher dans le contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer <xref:System.Xml.XmlDocument> et <xref:System.Xml.Xsl.XslTransform> objets à partir d’un exemple de fichier XML et une feuille de style XSLT. Les objets sont ensuite utilisés par le contrôle XML pour afficher le document XML.  
  
 [!code-aspx-csharp[XmlClassExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlClassExample/CS/xmlcs.aspx#1)]
 [!code-aspx-vb[XmlClassExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlClassExample/VB/xmlvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlDocument" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
      </Docs>
    </Member>
    <Member MemberName="DocumentContent">
      <MemberSignature Language="C#" Value="public string DocumentContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DocumentContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.DocumentContent" />
      <MemberSignature Language="VB.NET" Value="Public Property DocumentContent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DocumentContent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DocumentContent : string with get, set" Usage="System.Web.UI.WebControls.Xml.DocumentContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Définit une chaîne qui contient le document XML à afficher dans le contrôle <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <value>Chaîne qui contient le document XML à afficher dans le contrôle <see cref="T:System.Web.UI.WebControls.Xml" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le document XML à afficher dans le <xref:System.Web.UI.WebControls.Xml> contrôle est spécifié dans un des trois façons. Vous pouvez spécifier un <xref:System.Xml.XmlDocument?displayProperty=nameWithType> objet, une chaîne XML ou un fichier XML en définissant la propriété appropriée. Le <xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> propriété est utilisée pour spécifier une chaîne XML (représentant un document XML) à afficher dans le contrôle. Le <xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> propriété n’est pas généralement par programmation définie ou la valeur en tant qu’attribut du contrôle. Au lieu de cela, la chaîne XML est définie de manière déclarative en plaçant le texte entre les balises `<asp:Xml>` balises du contrôle.  
  
> [!NOTE]
>  Bien que le <xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> propriété contient à la fois `get` et `set` accesseurs, uniquement le `set` accesseur est utile. Si vous utilisez le `get` accesseur, <xref:System.String.Empty?displayProperty=nameWithType> est retournée.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
      </Docs>
    </Member>
    <Member MemberName="DocumentSource">
      <MemberSignature Language="C#" Value="public string DocumentSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DocumentSource" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.DocumentSource" />
      <MemberSignature Language="VB.NET" Value="Public Property DocumentSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DocumentSource { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DocumentSource : string with get, set" Usage="System.Web.UI.WebControls.Xml.DocumentSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès d'un document XML à afficher dans le contrôle <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <value>Chemin d'accès d'un document XML à afficher dans le contrôle <see cref="T:System.Web.UI.WebControls.Xml" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le document XML à afficher dans le <xref:System.Web.UI.WebControls.Xml> contrôle est spécifié dans un des trois façons. Vous pouvez spécifier un <xref:System.Xml.XmlDocument?displayProperty=nameWithType> objet, une chaîne XML ou un fichier XML en définissant la propriété appropriée. Le <xref:System.Web.UI.WebControls.Xml.DocumentSource%2A> propriété est utilisée pour spécifier le chemin d’accès à un fichier XML (représentant un document XML) à afficher dans le contrôle. Vous pouvez utiliser un un chemin relatif ou absolu. Un chemin d’accès relatif rapporte à l’emplacement du fichier à l’emplacement du contrôle utilisateur ou la page Web Forms, sans spécifier un chemin d’accès complet sur le serveur. Le chemin d’accès est relatif à l’emplacement de la page Web. Cela rend plus facile déplacer l’intégralité du site vers un autre répertoire sur le serveur sans mettre à jour le chemin d’accès au fichier dans le code. Un chemin d’accès absolu fournit le chemin d’accès complet, afin de déplacer le site vers un autre répertoire nécessite la mise à jour le code.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment afficher un document XML à l’aide d’une transformation XSL dans le <xref:System.Web.UI.WebControls.Xml> contrôle.  
  
 [!code-aspx-csharp[XmlControlClassExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlControlClassExample/CS/xmlcontrolcs.aspx#1)]
 [!code-aspx-vb[XmlControlClassExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlControlClassExample/VB/xmlcontrolvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
      </Docs>
    </Member>
    <Member MemberName="EnableTheming">
      <MemberSignature Language="C#" Value="public override bool EnableTheming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableTheming" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.EnableTheming" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property EnableTheming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableTheming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableTheming : bool with get, set" Usage="System.Web.UI.WebControls.Xml.EnableTheming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Substitue la propriété <see cref="P:System.Web.UI.Control.EnableTheming" />. Cette propriété n'est pas prise en charge par la classe <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <value>Retourne toujours <see langword="false" />. Cette propriété n'est pas prise en charge.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Xml.EnableTheming%2A> propriété est héritée de la <xref:System.Web.UI.Control> classe, mais n’est pas applicable à la <xref:System.Web.UI.WebControls.Xml> classe. Toute tentative de définir la valeur de cette propriété lève une <xref:System.NotSupportedException> exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Une tentative a été effectuée pour définir la valeur de cette propriété.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindControl">
      <MemberSignature Language="C#" Value="public override System.Web.UI.Control FindControl (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.Control FindControl(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.FindControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindControl (id As String) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::Control ^ FindControl(System::String ^ id);" />
      <MemberSignature Language="F#" Value="override this.FindControl : string -&gt; System.Web.UI.Control" Usage="xml.FindControl id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Identificateur du contrôle à rechercher.</param>
        <summary>Recherche le contrôle serveur spécifié dans le conteneur d'attribution de noms de page.</summary>
        <returns>Contrôle spécifié ; sinon, <see langword="null" /> s'il n'existe pas.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Focus();" />
      <MemberSignature Language="F#" Value="override this.Focus : unit -&gt; unit" Usage="xml.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Substitue la méthode <see cref="M:System.Web.UI.Control.Focus" />. Cette méthode n'est pas prise en charge par la classe <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Xml.Focus%2A> méthode est héritée de la <xref:System.Web.UI.Control> classe, mais il n’est pas applicable à la <xref:System.Web.UI.WebControls.Xml> classe. Toute tentative pour appeler la méthode lève un <xref:System.NotSupportedException> exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Une tentative est effectuée pour appeler cette méthode.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDesignModeState">
      <MemberSignature Language="C#" Value="protected override System.Collections.IDictionary GetDesignModeState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.IDictionary GetDesignModeState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.GetDesignModeState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetDesignModeState () As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::IDictionary ^ GetDesignModeState();" />
      <MemberSignature Language="F#" Value="override this.GetDesignModeState : unit -&gt; System.Collections.IDictionary" Usage="xml.GetDesignModeState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient les données au moment du design pour un contrôle.</summary>
        <returns>
          <see cref="T:System.Collections.IDictionary" /> contenant les données au moment du design pour le contrôle <see cref="T:System.Web.UI.WebControls.Xml" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Xml.GetDesignModeState%2A> méthode est une méthode d’assistance permettant d’obtenir l’état actuel de la conception de la <xref:System.Web.UI.WebControls.Xml> contrôle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasControls">
      <MemberSignature Language="C#" Value="public override bool HasControls ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool HasControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.HasControls" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function HasControls () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool HasControls();" />
      <MemberSignature Language="F#" Value="override this.HasControls : unit -&gt; bool" Usage="xml.HasControls " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Détermine si le contrôle serveur contient des contrôles enfants.</summary>
        <returns>
          <see langword="true" /> si le contrôle contient d'autres contrôles ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (output As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="xml.Render output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="output">Résultat du flux de sortie.</param>
        <summary>Génère le rendu des résultats via le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.WebControls.Xml.Render%2A> méthode dans un contrôle serveur personnalisé afin que le <xref:System.Web.UI.WebControls.Xml> contrôle est toujours affiché avec une image.  
  
 [!code-aspx-csharp[CustomXmlRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlRender/CS/custom_xml_rendercs.aspx#1)]
 [!code-aspx-vb[CustomXmlRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlRender/VB/custom_xml_rendervb.aspx#1)]  
  
 [!code-csharp[CustomXmlRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlRender/CS/custom_xml_render.cs#2)]
 [!code-vb[CustomXmlRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlRender/VB/custom_xml_render.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkinID">
      <MemberSignature Language="C#" Value="public override string SkinID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SkinID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.SkinID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SkinID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SkinID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SkinID : string with get, set" Usage="System.Web.UI.WebControls.Xml.SkinID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Substitue la propriété <see cref="P:System.Web.UI.Control.SkinID" />. Cette propriété n'est pas prise en charge par la classe <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <value>Retourne toujours une chaîne vide (""). Cette propriété n'est pas prise en charge.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Xml.SkinID%2A> propriété est héritée de la <xref:System.Web.UI.Control> classe, mais n’est pas applicable à la <xref:System.Web.UI.WebControls.Xml> classe. Toute tentative de définir la valeur de cette propriété lève une <xref:System.NotSupportedException> exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Une tentative a été effectuée pour définir la valeur de cette propriété.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.Xsl.XslTransform Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XslTransform Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As XslTransform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Xsl::XslTransform ^ Transform { System::Xml::Xsl::XslTransform ^ get(); void set(System::Xml::Xsl::XslTransform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.Xsl.XslTransform with get, set" Usage="System.Web.UI.WebControls.Xml.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XslTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet <see cref="T:System.Xml.Xsl.XslTransform" /> qui met en forme le document XML avant qu'il soit écrit dans le flux de sortie.</summary>
        <value>
          <see cref="T:System.Xml.Xsl.XslTransform" /> qui met en forme le document XML avant qu'il soit écrit dans le flux de sortie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous utilisez le <xref:System.Web.UI.WebControls.Xml> contrôler pour afficher un document XML, vous pouvez éventuellement spécifier une feuille de style XSLT Extensible Stylesheet Language Transformation () qui met en forme le document XML, avant qu’il est écrit dans le flux de sortie de deux manières. Vous pouvez mettre en forme le document XML avec soit un <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> objet ou un fichier de feuille de style XSLT. Si aucun document de transformation XSL n’est spécifié, le document XML est affiché en utilisant le format par défaut. Le <xref:System.Web.UI.WebControls.Xml.Transform%2A> propriété est utilisée pour spécifier un <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> objet (représentant un document de transformation XSL) utilisé pour mettre en forme le document XML avant qu’il est écrit dans le flux de sortie.  
  
> [!NOTE]
>  À l’aide un <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> objet nécessite `Full Trust` autorisations.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer <xref:System.Xml.XmlDocument> et <xref:System.Xml.Xsl.XslTransform> objets à partir d’un exemple de fichier XML et une feuille de style XSLT. Les objets sont ensuite utilisés par le contrôle XML pour afficher le document XML.  
  
 [!code-aspx-csharp[XmlClassExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlClassExample/CS/xmlcs.aspx#1)]
 [!code-aspx-vb[XmlClassExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlClassExample/VB/xmlvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Xsl.XslTransform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformArgumentList : System.Xml.Xsl.XsltArgumentList with get, set" Usage="System.Web.UI.WebControls.Xml.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit <see cref="T:System.Xml.Xsl.XsltArgumentList" /> qui contient une liste d'arguments facultatifs passés à la feuille de style et utilisés lors de la transformation XSL (XSLT).</summary>
        <value>
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> qui contient une liste d'arguments facultatifs passés à la feuille de style et utilisés lors de la transformation XSL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.Xml.TransformArgumentList%2A> propriété afin de fournir la feuille de style XSL Transformation avec des arguments facultatifs. Les arguments peuvent être des paramètres XSLT ou des objets d’extension.  
  
 Pour plus d’informations sur l’utilisation de la <xref:System.Xml.Xsl.XsltArgumentList?displayProperty=nameWithType> de classe, consultez [XsltArgumentList pour les paramètres de feuille de Style et les objets d’Extension](~/docs/standard/data/xml/xsltargumentlist-for-style-sheet-parameters-and-extension-objects.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="TransformSource">
      <MemberSignature Language="C#" Value="public string TransformSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformSource" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.TransformSource" />
      <MemberSignature Language="VB.NET" Value="Public Property TransformSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TransformSource { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformSource : string with get, set" Usage="System.Web.UI.WebControls.Xml.TransformSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès d'une feuille de style XSLT (Extensible Stylesheet Language Transformation) qui met en forme le document XML avant qu'il soit écrit dans le flux de sortie.</summary>
        <value>Chemin d'accès d'une feuille de style XSLT qui met en forme le document XML avant qu'il soit écrit dans le flux de sortie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous utilisez le <xref:System.Web.UI.WebControls.Xml> contrôler pour afficher un document XML, vous pouvez éventuellement spécifier une feuille de style XSLT qui met en forme le document XML avant qu’il est écrit dans le flux de sortie de deux manières. Vous pouvez mettre en forme le document XML avec un <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> de l’objet ou appliquer un fichier de feuille de style avec une Transformation XSL. Si aucune feuille de style XSLT n’est spécifié, le document XML est affiché en utilisant le format par défaut. Le <xref:System.Web.UI.WebControls.Xml.TransformSource%2A> propriété est utilisée pour spécifier le chemin d’accès à un fichier de feuille de style XSLT (représentant une feuille de style XSLT) utilisé pour mettre en forme le document XML avant qu’il est écrit dans le flux de sortie. Vous pouvez utiliser un un chemin relatif ou absolu. Un chemin d’accès relatif rapporte à l’emplacement du fichier à l’emplacement du contrôle utilisateur ou la page Web Forms, sans spécifier un chemin d’accès complet sur le serveur. Le chemin d’accès est relatif à l’emplacement de la page Web. Cela rend plus facile déplacer l’intégralité du site vers un autre répertoire sur le serveur sans mettre à jour le chemin d’accès au fichier dans le code. Un chemin d’accès absolu fournit le chemin d’accès complet, afin de déplacer le site vers un autre répertoire nécessite la mise à jour le code.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment afficher un document XML à l’aide d’une transformation XSL dans le <xref:System.Web.UI.WebControls.Xml> contrôle.  
  
 [!code-aspx-csharp[XmlControlClassExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlControlClassExample/CS/xmlcontrolcs.aspx#1)]
 [!code-aspx-vb[XmlControlClassExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlControlClassExample/VB/xmlcontrolvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
      </Docs>
    </Member>
    <Member MemberName="XPathNavigator">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.XPathNavigator XPathNavigator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XPath.XPathNavigator XPathNavigator" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.XPathNavigator" />
      <MemberSignature Language="VB.NET" Value="Public Property XPathNavigator As XPathNavigator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XPath::XPathNavigator ^ XPathNavigator { System::Xml::XPath::XPathNavigator ^ get(); void set(System::Xml::XPath::XPathNavigator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPathNavigator : System.Xml.XPath.XPathNavigator with get, set" Usage="System.Web.UI.WebControls.Xml.XPathNavigator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un modèle de curseur pour naviguer dans les données XML associées au contrôle <see cref="T:System.Web.UI.WebControls.Xml" /> et les modifier.</summary>
        <value>Objet <see cref="T:System.Xml.XPath.XPathNavigator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété peut être utilisée pour associer un <xref:System.Xml.XPath.XPathNavigator> de l’objet avec le <xref:System.Web.UI.WebControls.Xml> contrôle.  
  
 Un <xref:System.Xml.XPath.XPathNavigator> objet est créé à partir d’une classe qui implémente le <xref:System.Xml.XPath.IXPathNavigable> d’interface, tel que le <xref:System.Xml.XPath.XPathDocument> et <xref:System.Xml.XmlDocument> classes. <xref:System.Xml.XPath.XPathNavigator> objets créés par <xref:System.Xml.XPath.XPathDocument> objets sont en lecture seule, et <xref:System.Xml.XPath.XPathNavigator> objets créés par <xref:System.Xml.XmlDocument> objets peuvent être modifiés. Un <xref:System.Xml.XPath.XPathNavigator> état en lecture seule ou modifiables de l’objet est déterminée en utilisant la <xref:System.Xml.XPath.XPathNavigator.CanEdit%2A> propriété de la <xref:System.Xml.XPath.XPathNavigator> classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>