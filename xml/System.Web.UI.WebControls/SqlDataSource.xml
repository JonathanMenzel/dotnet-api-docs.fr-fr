<Type Name="SqlDataSource" FullName="System.Web.UI.WebControls.SqlDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34dff01451d4ba6258731af2ba7a9443d91cb876" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30601083" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SqlDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SqlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDataSource : System::Web::UI::DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("SelectQuery")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.SqlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente une base de données SQL pour les contrôles liés aux données.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans cette rubrique :  
  
-   [Introduction](#introduction)  
  
-   [Connexions de données](#data_connections)  
  
-   [Exécution d’opérations de données](#performing_data_operations)  
  
-   [Fournisseur de données](#data_provider)  
  
-   [Mise en cache](#caching)  
  
-   [Fonctionnalités supplémentaires](#additional_features)  
  
-   [Vue de Source de données](#data_source_view)  
  
-   [Syntaxe déclarative](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduction  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle de source de données représente des données dans une base de données relationnelle SQL pour les contrôles liés aux données. Vous pouvez utiliser la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle conjointement avec un contrôle lié aux données pour récupérer des données à partir d’une base de données relationnel et à afficher, modifier et trier des données sur une page Web avec peu ou pas de code.  
  
<a name="data_connections"></a>   
## <a name="data-connections"></a>Connexions de données  
 Pour vous connecter à une base de données, vous devez définir le <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> propriété à une chaîne de connexion valide. Le <xref:System.Web.UI.WebControls.SqlDataSource> prend en charge une base de données relationnelle SQL qui peut être connecté à l’aide d’un fournisseur ADO.NET, tel que le `SqlClient`, `OleDb`, `Odbc`, ou `OracleClient` fournisseur. Pour plus d’informations sur la sécurisation des chaînes de connexion, consultez [How To : les chaînes de connexion sécurisée lors de Source de données à l’aide de contrôles](http://msdn.microsoft.com/library/942f6dcb-d278-4bec-8403-60eede9bcd62).  
  
 Pour récupérer des données à partir d’une base de données sous-jacente, définissez la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété avec une requête SQL. Si la base de données qui le <xref:System.Web.UI.WebControls.SqlDataSource> est associé avec des procédures prend en charge stockées, vous pouvez définir le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> nom à la propriété d’une procédure stockée. La requête SQL que vous spécifiez peut également être une requête paramétrable. Vous pouvez ajouter <xref:System.Web.UI.WebControls.Parameter> les objets qui sont associés à une requête paramétrable à le <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> collection. Pour plus d’informations sur les requêtes SQL paramétrées et leur syntaxe, consultez [à l’aide des paramètres avec les contrôles de Source de données pour le filtrage](http://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle récupère des données chaque fois que le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode est appelée. Cette méthode fournit un accès par programmation à la méthode spécifiée par <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété. Le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode est appelée automatiquement par les contrôles qui sont liés à la <xref:System.Web.UI.WebControls.SqlDataSource> lors de leur <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> méthode est appelée. Si vous définissez le <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A> propriété d’un contrôle lié aux données, la contrôle est automatiquement lié aux données à partir de la source de données, en fonction des besoins. Définition de la `DataSourceID` propriété est la méthode recommandée pour la liaison un <xref:System.Web.UI.WebControls.ObjectDataSource> vers un contrôle lié aux données. Vous pouvez également utiliser le `DataSource` propriété mais que vous devez appeler explicitement la <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> méthode du contrôle lié aux données. Quelques exemples de contrôles liés aux données que vous peuvent utiliser <xref:System.Web.UI.WebControls.SqlDataSource> sont <xref:System.Web.UI.WebControls.DataGrid>, <xref:System.Web.UI.WebControls.DetailsView>, <xref:System.Web.UI.WebControls.DataList>, et <xref:System.Web.UI.WebControls.DropDownList>. Vous pouvez appeler la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode par programmation à tout moment pour récupérer des données à partir de la base de données sous-jacente.  
  
 Dans les scénarios ASP.NET déclaratifs et par programme, vous pouvez définir le <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> propriété du contrôle lié aux données à l’ID de la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle. Vous pouvez également affecter une instance de la <xref:System.Web.UI.WebControls.SqlDataSource> classe le <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> propriété du contrôle lié aux données. Pour plus d’informations sur le contrôle lié aux données de liaison aux contrôles de source de données, consultez [Options d’accès aux données ASP.NET](http://msdn.microsoft.com/library/a5ff235e-397f-4bbe-9bfe-2720b6e7ab9d).  
  
<a name="performing_data_operations"></a>   
## <a name="performing-data-operations"></a>Exécution d’opérations de données  
 Selon les fonctionnalités du produit de la base de données sous-jacente et la configuration de l’instance de la <xref:System.Web.UI.WebControls.SqlDataSource> (classe), vous pouvez effectuer les opérations de données, tels que les mises à jour, insertions et les suppressions. Pour effectuer ces opérations de données, définir le texte de commande appropriée et de tous les paramètres associés pour l’opération que vous souhaitez effectuer. Par exemple, pour une opération de mise à jour, définissez la <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> propriété à une chaîne SQL ou le nom d’une procédure stockée et ajoutez tous les paramètres requis pour le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. La mise à jour est effectuée lorsque la <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> méthode est appelée, soit explicitement par votre code, ou automatiquement par un contrôle lié aux données. Le même modèle général est suivi de <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> et <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> operations.  
  
 Les requêtes SQL et les commandes que vous utilisez dans le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>, et <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> propriétés peuvent être paramétrées. Cela signifie que la requête ou commande peut utiliser des espaces réservés au lieu de valeurs littérales et lier les espaces réservés pour les applications ou les variables définies par l’utilisateur. Vous pouvez lier des paramètres dans les requêtes SQL à des variables de Session, les valeurs qui sont passées dans la chaîne de requête pour une page Web Forms, les valeurs de propriété d’autres contrôles serveur et bien plus encore. Pour plus d’informations sur l’utilisation des paramètres dans les requêtes SQL avec la <xref:System.Web.UI.WebControls.SqlDataSource>, consultez [à l’aide des paramètres avec les contrôles de Source de données pour le filtrage](http://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f) et [à l’aide des paramètres avec le contrôle SqlDataSource](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
> [!NOTE]
>  Par défaut, si l’un des paramètres est `null` lorsque vous exécutez un `Select` commande, aucune donnée n’est renvoyée et aucune exception n’est levée. Vous pouvez modifier ce comportement en définissant le <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> propriété `false`.  
  
<a name="data_provider"></a>   
## <a name="data-provider"></a>Fournisseur de données  
 Par défaut, le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle fonctionne avec le fournisseur de données .NET Framework pour SQL Server, mais <xref:System.Web.UI.WebControls.SqlDataSource> n’est pas Microsoft SQL Server spécifique. Vous pouvez vous connecter le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle tout produit de base de données pour lesquelles il existe un fournisseur ADO.NET managé. Lorsqu’il est utilisé avec le <xref:System.Data.OleDb?displayProperty=nameWithType> fournisseur, le <xref:System.Web.UI.WebControls.SqlDataSource> peut fonctionner avec une base de données compatibles OLE DB. Lorsqu’il est utilisé avec le <xref:System.Data.Odbc?displayProperty=nameWithType> fournisseur, le <xref:System.Web.UI.WebControls.SqlDataSource> peut être utilisé avec n’importe quel pilote ODBC et de la base de données, y compris IBM DB2, MySQL et PostgreSQL. Lorsqu’il est utilisé avec le <xref:System.Data.OracleClient?displayProperty=nameWithType> fournisseur, le <xref:System.Web.UI.WebControls.SqlDataSource> peut fonctionner avec les bases de données Oracle 8.1.7 et versions ultérieures. La liste des fournisseurs autorisés est enregistrée dans la `DbProviderFactories` section du fichier de configuration, dans le fichier Machine.config ou Web.config. Pour plus d’informations, consultez [sélection des données à l’aide du contrôle SqlDataSource](http://msdn.microsoft.com/library/44623286-ff5a-4148-8a3c-85c56ed545eb).  
  
<a name="caching"></a>   
## <a name="caching"></a>Mise en cache  
 Si vous affichez des données sur votre page à l’aide un <xref:System.Web.UI.WebControls.SqlDataSource> (contrôle), vous pouvez augmenter les performances de la page en utilisant les fonctionnalités du contrôle de source de données de la mise en cache de données. Mise en cache réduit la charge de traitement sur les serveurs de base de données au détriment de la mémoire sur le serveur Web ; dans la plupart des cas, il s’agit d’un bon compromis. Le <xref:System.Web.UI.WebControls.SqlDataSource> met automatiquement en cache les données lorsque le <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> est définie sur `true` et <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> est définie sur le nombre de secondes pendant lesquelles le cache stocke les données avant l’entrée du cache est ignorée. Vous pouvez également spécifier un <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> et éventuellement un <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> valeur.  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>Fonctionnalités supplémentaires  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> fournit des fonctionnalités supplémentaires, comme répertorié dans le tableau suivant.  
  
|Fonctionnalité|Configuration requise|  
|----------------|------------------|  
|Mise en cache|Définir le <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> propriété le <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> valeur, le <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> propriété `true`et le <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> et <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> propriétés selon le comportement de mise en cache que vous souhaitez pour vos données mises en cache.|  
|Suppression|Définir le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> propriété à une instruction SQL utilisée pour supprimer des données. Cette instruction est généralement paramétrée.|  
|Filtrage|Définir le <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> propriété le <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> valeur. Définir le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> propriété à une expression de filtrage utilisée pour filtrer les données lors de la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode est appelée.|  
|Insertion|Définir le <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> propriété à une instruction SQL utilisée pour insérer des données. Cette instruction est généralement paramétrée.|  
|Pagination|N’est pas actuellement pris en charge par le <xref:System.Web.UI.WebControls.SqlDataSource>toutefois certaines données liées aux contrôles, tels que <xref:System.Web.UI.WebControls.GridView>, prise en charge la pagination lorsque vous définissez la <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> propriété le <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> valeur.|  
|Sélection|Définir le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété à une instruction SQL utilisée pour récupérer des données.|  
|Tri|Affectez à la propriété <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> la valeur <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>.|  
|Mise à jour|Définir le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> propriété à une instruction SQL utilisée pour mettre à jour des données. Cette instruction est généralement paramétrée.|  
  
<a name="data_source_view"></a>   
## <a name="data-source-view"></a>Vue de source de données  
 Comme avec tous les contrôles de source de données, le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle est associé à une classe de vue de source de données. Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle possède une seule associés <xref:System.Web.UI.WebControls.SqlDataSourceView>, et il est toujours nommé `Table`.  
  
 Il n’existe aucun rendu visuel de la <xref:System.Web.UI.WebControls.SqlDataSource> contrôler ; il est implémenté comme un contrôle afin que vous pouvez le créer et de manière déclarative, le cas échéant, pour lui permettre de participer à la gestion d’état. Par conséquent, le <xref:System.Web.UI.WebControls.SqlDataSource> ne prend pas en charge les fonctionnalités visuelles, telles que celles qui sont fournies par le <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> ou <xref:System.Web.UI.DataSourceControl.SkinID%2A> propriété.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Syntaxe déclarative  
  
```  
<asp:SqlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    CancelSelectOnNullParameter="True|False"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConnectionString="string"  
    DataSourceMode="DataReader|DataSet"  
    DeleteCommand="string"  
    DeleteCommandType="Text|StoredProcedure"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertCommand="string"  
    InsertCommandType="Text|StoredProcedure"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    ProviderName="string|System.Data.Odbc|System.Data.OleDb|  
        System.Data.OracleClient|System.Data.SqlClient|  
        Microsoft.SqlServerCe.Client"  
    runat="server"  
    SelectCommand="string"  
    SelectCommandType="Text|StoredProcedure"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    UpdateCommand="string"  
    UpdateCommandType="Text|StoredProcedure"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:SqlDataSource>  
```  
  
   
  
## Examples  
 Un projet de site Web Visual Studio avec code source est disponible pour accompagner cette rubrique : [télécharger](http://go.microsoft.com/fwlink/?LinkId=192424).  
  
 Cette section contient quatre exemples de code :  
  
-   Le premier exemple de code montre comment afficher des données à partir de SQL Server dans un <xref:System.Web.UI.WebControls.GridView> contrôler à l’aide de la syntaxe déclarative.  
  
-   Le deuxième exemple de code montre comment afficher les données d’une base de données compatible ODBC dans une <xref:System.Web.UI.WebControls.GridView> contrôler à l’aide de la syntaxe déclarative.  
  
-   Le troisième exemple de code montre comment afficher et mettre à jour des données dans un <xref:System.Web.UI.WebControls.GridView> contrôle.  
  
-   Le quatrième exemple de code montre comment afficher et mettre à jour des données dans un <xref:System.Web.UI.WebControls.DropDownList> contrôle.  
  
    > [!NOTE]
    >  Les exemples suivants montrent comment utiliser la syntaxe déclarative pour accéder aux données. Pour plus d’informations sur la façon d’accéder aux données à l’aide de code au lieu du balisage, consultez [l’accès aux données dans Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.SqlDataSource> contrôle de manière déclarative pour récupérer des données à partir de SQL Server et les afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.SqlDataSource> contrôle de manière déclarative pour récupérer des données d’une base de données compatible ODBC et les afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle. Le <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> propriété est le nom du fournisseur de données .NET Framework pour ODBC, qui est <xref:System.Data.Odbc?displayProperty=nameWithType>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/CS/odbc3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/VB/odbc3vb.aspx#1)]  
  
 L’exemple de code suivant montre un affichage commun et le scénario de mise à jour avec la <xref:System.Web.UI.WebControls.GridView> contrôle. Comme avec les exemples précédents, les données à partir de la base de données Northwind s’affiche dans le <xref:System.Web.UI.WebControls.GridView> contrôle. En outre, car un <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> propriété est spécifiée et la <xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A> est définie sur `true`, vous pouvez modifier et mettre à jour les enregistrements sans code supplémentaire. Le <xref:System.Web.UI.WebControls.GridView> contrôle gère automatiquement l’ajout de paramètres à la <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection et appelle la <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> (méthode) lorsque le **mise à jour** situé dans le <xref:System.Web.UI.WebControls.GridView> un clic sur le contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/CS/sql5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/VB/sql5vb.aspx#1)]  
  
 L’exemple de code suivant montre un affichage commun et le scénario de mise à jour avec la <xref:System.Web.UI.WebControls.DropDownList> et <xref:System.Web.UI.WebControls.TextBox> contrôles. Le <xref:System.Web.UI.WebControls.DropDownList> contrôle n’ajoute pas automatiquement les paramètres de mise à jour à la <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection ni appel le <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> (méthode), par conséquent, vous devez faire. Les paramètres de mise à jour sont spécifiés de manière déclarative et vous pouvez ajouter un gestionnaire d’événements pour effectuer le <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> opération lorsqu’un événement est déclenché.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace potentielle pour la sécurité. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</summary>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, selectCommand As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource(System::String ^ connectionString, System::String ^ selectCommand);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Chaîne de connexion utilisée pour connecter la base de données sous-jacente.</param>
        <param name="selectCommand">Requête SQL utilisée pour récupérer les données de la base de données sous-jacente. Si la requête SQL est une chaîne SQL paramétrée, vous devrez probablement ajouter des objets <see cref="T:System.Web.UI.WebControls.Parameter" /> à la collection <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> avec la chaîne de connexion spécifiée et la commande Select.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que les produits de base de données différents utilisent des variétés différentes de SQL, la syntaxe de `selectCommand` varie selon le fournisseur ADO.NET actuellement utilisé, identifié par le <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> propriété. Si la chaîne SQL est une requête ou une commande paramétrée, l'espace réservé du paramètre dépend également du fournisseur ADO.NET utilisé. Par exemple, si le fournisseur est le <xref:System.Data.SqlClient?displayProperty=nameWithType>, qui est le fournisseur par défaut pour le <xref:System.Web.UI.WebControls.SqlDataSource> classe, l’espace réservé du paramètre est `'@parameterName'`. Toutefois, si le fournisseur est défini sur le <xref:System.Data.Odbc?displayProperty=nameWithType> ou <xref:System.Data.OleDb?displayProperty=nameWithType>, l’espace réservé du paramètre est `'?'`. Pour plus d’informations sur les requêtes SQL paramétrées et les commandes, consultez [à l’aide des paramètres avec le contrôle SqlDataSource](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> valeur peut être une chaîne SQL ou le nom d’une procédure stockée, si la source de données prend en charge les procédures stockées.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer un <xref:System.Web.UI.WebControls.SqlDataSource> contrôler à l’aide du <xref:System.Web.UI.WebControls.SqlDataSource.%23ctor%2A> constructeur. L’exemple est exceptionnel car le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle sert pas sur une page Web Forms, mais dans l’implémentation d’un objet de couche intermédiaire comme un moyen simple pour un objet métier à interagir avec une base de données. L’exemple utilise une chaîne de connexion qui est stockée dans le fichier Web.config.  
  
 Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.WebControls.ObjectDataSource> classe.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string providerName, string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerName, string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerName As String, connectionString As String, selectCommand As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource(System::String ^ providerName, System::String ^ connectionString, System::String ^ selectCommand);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerName">Nom du fournisseur de données utilisé par <see cref="T:System.Web.UI.WebControls.SqlDataSource" />. Si aucun fournisseur n'est défini, <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise par défaut le fournisseur ADO.NET pour Microsoft SQL Server.</param>
        <param name="connectionString">Chaîne de connexion utilisée pour connecter la base de données sous-jacente.</param>
        <param name="selectCommand">Requête SQL utilisée pour récupérer les données de la base de données sous-jacente. Si la requête SQL est une chaîne SQL paramétrée, vous devrez probablement ajouter des objets <see cref="T:System.Web.UI.WebControls.Parameter" /> à la collection <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> avec la chaîne de connexion spécifiée et la commande Select.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que les produits de base de données différents utilisent des variétés différentes de SQL, la syntaxe de `selectCommand` varie selon le fournisseur ADO.NET actuellement utilisé, identifié par le `providerName` paramètre. Si la chaîne SQL est une requête ou une commande paramétrée, l'espace réservé du paramètre dépend également du fournisseur ADO.NET utilisé. Par exemple, si le fournisseur est <xref:System.Data.SqlClient?displayProperty=nameWithType>, qui est le fournisseur par défaut pour le <xref:System.Web.UI.WebControls.SqlDataSource> classe, l’espace réservé du paramètre est `'@parameterName'`. Toutefois, si le fournisseur est défini sur le <xref:System.Data.Odbc?displayProperty=nameWithType> ou <xref:System.Data.OleDb?displayProperty=nameWithType>, l’espace réservé du paramètre est `'?'`. Pour plus d’informations sur les requêtes SQL paramétrées et les commandes, consultez [à l’aide des paramètres avec le contrôle SqlDataSource](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété peut être une chaîne SQL ou le nom d’une procédure stockée, si la source de données prend en charge les procédures stockées.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la durée, en secondes, de la mise en cache des données par le contrôle de source de données avant que celles-ci soient récupérées par la méthode <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />.</summary>
        <value>Nombre de secondes durant lesquelles <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> met en cache les résultats d'une opération <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />. La valeur par défaut est 0. La valeur ne peut pas être négative.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle prend en charge la mise en cache de données. Alors que les données mises en cache, le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode récupère des données à partir du cache, plutôt qu’à partir de la base de données sous-jacente. Lorsque le cache expire, la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode récupère les données de la base de données sous-jacente, puis remet les données.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle met automatiquement en cache les données lorsque le <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> est définie sur `true` et <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> propriété est définie sur une valeur supérieure à 0, ce qui indique le nombre de secondes pendant lesquelles le cache stocke les données avant l’entrée de cache est ignoré. La valeur 0 indique un cache à l’infini long.  
  
 Le comportement du cache est déterminé par une combinaison de la durée et le <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> propriété. Si le <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> est définie sur le <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> valeur, le <xref:System.Web.UI.WebControls.SqlDataSource> met en cache les données sur la première opération de récupération de données, il conserve en mémoire pour, au maximum, la quantité de temps spécifié par <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> propriété. Les données peuvent être supprimées avant le délai d’expiration si la mémoire est requise. Puis, le cache est actualisé pendant l’opération suivante. Si le <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> est définie sur la <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> valeur, le contrôle de source de données met en cache les données sur la première opération de récupération de données, mais réinitialise la fenêtre de temps dont il contient le cache pour chaque opération suivante. L’expiration du cache, s’il n’existe aucune activité pendant une durée égale à la <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> valeur depuis le dernier <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> opération.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle peut mettre en cache les données uniquement lorsqu’il est dans <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> mode. A <xref:System.NotSupportedException> exception est levée par le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> (méthode), si le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle est défini sur la <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> valeur et la mise en cache est également activée.  
  
> [!IMPORTANT]
>  Lorsque vous utilisez l’emprunt d’identité du client avec l’authentification Microsoft Windows, les données mises en cache lorsque le premier utilisateur accède aux données. Si un autre utilisateur demande les mêmes données, les données sont récupérées à partir du cache. Les données ne sont pas récupérées en effectuant un autre appel à la base de données pour vérifier l’accès de l’utilisateur aux données. Si vous prévoyez que plusieurs utilisateurs à accéder aux données et que vous souhaitez que chaque récupération de données devant être vérifiées par les configurations de sécurité pour la base de données, n’utilisez pas la mise en cache.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment récupérer des données à partir de la base de données Northwind dans Microsoft SQL Server et l’afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle, avec la mise en cache de données activée. Le <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> est défini sur 20 secondes et, étant donné que la <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> est définie sur la <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> valeur par défaut, les utilisateurs de cette page s’affiche les données actualisées toutes les 20 secondes.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le comportement d'expiration du cache qui, lorsqu'il est associé à la durée, décrit le comportement du cache utilisé par le contrôle de source de données.</summary>
        <value>Une des valeurs de <see cref="T:System.Web.UI.DataSourceCacheExpiry" />. La valeur par défaut est la valeur <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle prend en charge la mise en cache de données. Alors que les données mises en cache, le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode récupère des données à partir du cache, plutôt qu’à partir de la base de données sous-jacente. Lorsque le cache expire, la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode récupère les données de la base de données sous-jacente, puis remet les données.  
  
 Le comportement du cache est déterminé par une combinaison de la <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> et <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> paramètres. Si le <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> est définie sur le <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> valeur, le <xref:System.Web.UI.WebControls.SqlDataSource> met en cache les données sur la première opération de récupération de données, il conserve en mémoire pendant la durée spécifiée par la <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> propriété, puis les ignore une fois que l’heure est écoulée. Puis, le cache est actualisé pendant l’opération suivante. Si le <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> est définie sur la <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> valeur, le contrôle de source de données met en cache les données sur la première opération de récupération de données, mais réinitialise la fenêtre de temps dont il contient le cache pour chaque opération suivante. L’expiration du cache, s’il n’existe aucune activité pendant une durée égale à la <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> valeur depuis le dernier <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> opération.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle peut mettre en cache des données uniquement lorsque dans le <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> mode. A <xref:System.NotSupportedException> exception est levée par le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> (méthode), si le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle est défini sur la <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> valeur et la mise en cache est également activée.  
  
> [!IMPORTANT]
>  Lorsque vous utilisez l’emprunt d’identité du client avec l’authentification Microsoft Windows, les données mises en cache lorsque le premier utilisateur accède aux données. Si un autre utilisateur demande les mêmes données, les données sont récupérées à partir du cache. Les données ne sont pas récupérées en effectuant un autre appel à la base de données pour vérifier l’accès de l’utilisateur aux données. Si vous prévoyez que plusieurs utilisateurs à accéder aux données et que vous souhaitez que chaque récupération de données devant être vérifiées par les configurations de sécurité pour la base de données, n’utilisez pas la mise en cache.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment récupérer des données à partir de la base de données Northwind dans Microsoft SQL Server et l’afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle, avec la mise en cache de données activée. Étant donné que la <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> est définie sur le <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> valeur, les utilisateurs ne verront pas les données actualisées même si la <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> valeur est de 20 secondes. Les données mises en cache sont actualisées uniquement si aucune activité n’est dans la page pour plus de 20 secondes depuis le dernier chargement de page.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/CS/sql19cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/VB/sql19vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une dépendance de clé définie par l'utilisateur qui est liée à tous les objets du cache de données créés par le contrôle de source de données. Tous les objets du cache expirent explicitement lorsque la clé expire.</summary>
        <value>Clé qui identifie tous les objets du cache créés par <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle prend en charge la mise en cache de données. Alors que les données mises en cache, le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode récupère des données à partir du cache, plutôt qu’à partir de la base de données sous-jacente. Lorsque le cache expire, la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode récupère les données de la base de données sous-jacente, puis remet les données.  
  
 Vous pouvez définir le <xref:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency%2A> propriété pour créer une dépendance entre toutes les entrées de cache qui sont créés par le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle et la clé. Par programme, vous pouvez faire expirer toutes les entrées du cache à tout moment en faisant expirer la clé.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle peut mettre en cache des données uniquement lorsque dans le <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> mode. A <xref:System.NotSupportedException> exception est levée par le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> (méthode), si le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle est défini sur la <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> valeur et la mise en cache est également activée.  
  
 Une entrée de cache unique est créée pour chaque combinaison de la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>, et <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> propriétés. Plusieurs <xref:System.Web.UI.WebControls.SqlDataSource> contrôles peuvent utiliser les mêmes entrées de cache dans les scénarios où les contrôles chargent les mêmes données à partir de la même base de données sous-jacente.  
  
> [!IMPORTANT]
>  Lorsque vous utilisez l’emprunt d’identité du client avec l’authentification Microsoft Windows, les données mises en cache lorsque le premier utilisateur accède aux données. Si un autre utilisateur demande les mêmes données, les données sont récupérées à partir du cache. Les données ne sont pas récupérées en effectuant un autre appel à la base de données pour vérifier l’accès de l’utilisateur aux données. Si vous prévoyez que plusieurs utilisateurs à accéder aux données et que vous souhaitez que chaque récupération de données devant être vérifiées par les configurations de sécurité pour la base de données, n’utilisez pas la mise en cache.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      </Docs>
    </Member>
    <Member MemberName="CancelSelectOnNullParameter">
      <MemberSignature Language="C#" Value="public virtual bool CancelSelectOnNullParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelSelectOnNullParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CancelSelectOnNullParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CancelSelectOnNullParameter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si une opération de récupération de données est annulée lorsque tout paramètre qui est contenu dans la collection <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> est égal à <see langword="null" />.</summary>
        <value>
          <see langword="true" />, si une opération de récupération de données est annulée lorsqu'un paramètre contenu dans la collection <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> est égal à <see langword="null" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> propriété est stockée dans l’état d’affichage.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur indiquant comment le contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> exécute des mises à jour et des suppressions lorsque des données dans une ligne de la base de données sous-jacente sont modifiées au cours de l'opération.</summary>
        <value>Une des valeurs de <see cref="T:System.Web.UI.ConflictOptions" />. La valeur par défaut est la valeur <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> propriété détermine si les paramètres pour les valeurs anciennes et nouvelles sont appliqués à la `Update` (méthode). Par exemple, si la commande qui est spécifié par le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété retourne un <xref:System.Data.DataTable> objet avec les colonnes `Name` et `Number` et <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> est définie sur le <xref:System.Web.UI.ConflictOptions.OverwriteChanges> , les paramètres sont créés pour `Name` et `Number` pour la `Update` (méthode). Si le <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> est définie sur le <xref:System.Web.UI.ConflictOptions.CompareAllValues> , les paramètres sont créés pour `Name`, `Number`, `original_Name`, et `original_Number`. (Le nom exact des paramètres pour les valeurs d’origine dépend le <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> propriété.) Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle détermine ensuite si le `Update` méthode qui est spécifiée dans le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> comporte des paramètres qui correspondent à.  
  
 Contrôle d’accès concurrentiel est une technique utilisée par les magasins de données pour contrôler comment les données sont lues et modifiées dans les magasins lorsque plusieurs clients accèdent et manipulent les mêmes données. Par exemple, un client lit les données et présente à un utilisateur, tandis que d’un autre client lit les mêmes données et les présente à un autre utilisateur. Si les deux utilisateurs mettre à jour les données et les envoient au stockage des données, des résultats inattendus peuvent se produire, car les deux clients peuvent mettre à jour des valeurs différentes pour les mêmes données. Cela est considéré comme un conflit. En définissant le <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> propriété le <xref:System.Web.UI.ConflictOptions.CompareAllValues> valeur, votre `Update` méthode peut ensuite comparer les valeurs anciennes et nouvelles pour la source de données d’origine pour détecter des conflits et les gérer, si nécessaire.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> propriété délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public virtual string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne de connexion spécifique au fournisseur ADO.NET que le contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour se connecter à une base de données sous-jacente.</summary>
        <value>Chaîne spécifique au fournisseur de données .NET Framework que <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour se connecter à la base de données SQL qu'il représente. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle peut être utilisé avec divers fournisseurs ADO.NET et la syntaxe de la chaîne de connexion qui est utilisée pour se connecter à une source de données sous-jacente est spécifique au fournisseur.  
  
 Lorsque vous configurez un <xref:System.Web.UI.WebControls.SqlDataSource> (contrôle), vous définissez la <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> propriété au type de base de données (la valeur par défaut est <xref:System.Data.SqlClient?displayProperty=nameWithType>), et que vous définissez le <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> propriété à une chaîne de connexion qui inclut les informations requises pour se connecter la base de données. Le contenu d’une chaîne de connexion diffère selon le type de base de données accède au contrôle de source de données. Par exemple, le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle nécessite un nom de serveur, nom de la base de données (catalogue) et plus d’informations sur la façon d’authentifier l’utilisateur lors de la connexion à un serveur SQL Server. Pour plus d’informations sur le contenu de chaînes de connexion, consultez le <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> propriété pour le <xref:System.Data.SqlClient.SqlConnection> (classe), <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> propriété pour le <xref:System.Data.OracleClient.OracleConnection> (classe), <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> propriété pour le <xref:System.Data.OleDb.OleDbConnection> (classe), ou le <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> propriété pour la <xref:System.Data.Odbc.OdbcConnection> classe.  
  
 Si vous modifiez le <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> propriété, le <xref:System.Web.UI.IDataSource.DataSourceChanged> événement est déclenché, tous les contrôles qui sont liés à la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle lier de nouveau.  
  
> [!IMPORTANT]
>  Pour plus d’informations sur le stockage d’une chaîne de connexion, consultez [Comment : sécuriser les chaînes de connexion lors de Source de données à l’aide de contrôles](http://msdn.microsoft.com/library/942f6dcb-d278-4bec-8403-60eede9bcd62).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> à se connecter à une base de données Microsoft SQL Server et afficher les résultats de la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété dans un <xref:System.Web.UI.WebControls.GridView> contrôle. Le deuxième exemple de code illustre un scénario plus complexe, où un <xref:System.Web.UI.WebControls.SqlDataSource> contrôle est utilisé pour afficher et mettre à jour des données dans une base de données Microsoft Access protégé par mot de passe. Dans chaque cas, le `connectionStrings` élément du fichier Web.config est indiqué en premier, suivie de la page ASP.NET qui contient le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
 L’exemple de code suivant montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> à se connecter à une base de données SQL Server et afficher les résultats de la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété dans un <xref:System.Web.UI.WebControls.GridView> contrôle.  
  
  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]  
  
 L’exemple de code suivant illustre un scénario plus complexe que l’exemple de code précédent, où un <xref:System.Web.UI.WebControls.SqlDataSource> contrôle est utilisé pour afficher et mettre à jour des données dans une base de données protégé par mot de passe. Car le <xref:System.Web.UI.WebControls.SqlDataSource> est utilisé avec l’accès, le <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> est définie sur le <xref:System.Data.OleDb> fournisseur et le <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> est définie sur une chaîne de connexion appropriée pour une base de données Access partagée par UNC. A <xref:System.Web.UI.WebControls.GridView> contrôle affiche les commandes avec des dates d’expédition. Vous pouvez mettre à jour d’une commande, la vérification de la case à cocher appropriée, puis cliquez sur le **mettre à jour** bouton.  
  
> [!IMPORTANT]
>  Cet exemple inclut un mot de passe en texte brut uniquement à des fins d’illustration. Dans une application de production, les chaînes de connexion qui incluent des mots de passe doivent être chiffrées. Pour plus d’informations, consultez [Protection des informations de connexion](~/docs/framework/data/adonet/protecting-connection-information.md).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#1)]  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDataSourceView (viewName As String) As SqlDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::SqlDataSourceView ^ CreateDataSourceView(System::String ^ viewName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">Nom de la vue de source de données.</param>
        <summary>Crée un objet de vue de source de données associé au contrôle de source de données.</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> qui est associé à <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes dérivées de la <xref:System.Web.UI.WebControls.SqlDataSource> classe peut substituer le <xref:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView%2A> méthode pour retourner fortement typée les objets de vue de source de données.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.DataSourceView" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceMode As SqlDataSourceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceMode DataSourceMode { System::Web::UI::WebControls::SqlDataSourceMode get(); void set(System::Web::UI::WebControls::SqlDataSourceMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le mode de récupération de données que le contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour récupérer les données.</summary>
        <value>Une des valeurs de <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" />. La valeur par défaut est le <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataSet" /> valeur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le mode de récupération de données identifie comment un <xref:System.Web.UI.WebControls.SqlDataSource> contrôle récupère des données à partir de la base de données sous-jacente.  
  
 Lorsque le <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> est définie sur le <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> valeur, les données sont chargées dans un <xref:System.Data.DataSet> objet et stocké en mémoire sur le serveur. Cela permet des scénarios où contrôles d’interface utilisateur, tel que <xref:System.Web.UI.WebControls.GridView>, offrent de tri, filtrage et des fonctionnalités de pagination.  
  
 Lorsque le <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> est définie sur le <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> valeur, les données sont récupérées par un <xref:System.Data.IDataReader> objet, qui est un curseur avant uniquement en lecture seule. Le type spécifique de la <xref:System.Data.IDataReader> dépend de l’objet sur le fournisseur de données NET qui le <xref:System.Web.UI.WebControls.SqlDataSource> utilise, ce qui est identifié par le <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> propriété. Par défaut, le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle utilise le fournisseur de Microsoft SQL Server, le <xref:System.Data.SqlClient?displayProperty=nameWithType>, et le lecteur de données est un <xref:System.Data.SqlClient.SqlDataReader> objet.  
  
 Si vous modifiez le <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> propriété, le <xref:System.Web.UI.IDataSource.DataSourceChanged> événement est déclenché, tous les contrôles qui sont liés à la <xref:System.Web.UI.WebControls.SqlDataSource> à relier.  
  
 La valeur de la <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> propriété est stockée dans l’état d’affichage.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSource> le contrôle à la <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> valeur pour un scénario avec un <xref:System.Web.UI.WebControls.ListBox> contrôle qui ne requiert aucun tri, la pagination, ni le filtrage.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" /> n'est pas l'une des valeurs définies dans <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute une opération de suppression à l'aide de la chaîne SQL <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> et de tous les paramètres de la collection <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />.</summary>
        <returns>Une valeur qui représente le nombre de lignes supprimées de la base de données sous-jacente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant d’effectuer l’opération de suppression, le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> événement. Vous pouvez gérer cet événement pour examiner les valeurs des paramètres et effectuer tout prétraitement avant une opération de suppression.  
  
 Une fois l’opération terminée, le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.SqlDataSource.Deleted> événement. Vous pouvez gérer cet événement pour examiner les valeurs de retour et les codes d’erreur et effectuer tout post-traitement.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> méthode est fournie pour l’accès par programme à le `Delete` (méthode). Si le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle est associé à un contrôle lié aux données, le contrôle lié aux données appelle automatiquement la **supprimer** (méthode).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> méthode délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> méthode de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle. Pour effectuer l’opération, le <xref:System.Web.UI.WebControls.SqlDataSourceView> génère une <xref:System.Data.Common.DbCommand> à l’aide de l’objet le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> texte et associés <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> valeurs, puis exécute le <xref:System.Data.Common.DbCommand> par rapport à la base de données sous-jacente.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> texte pour supprimer une commande à partir de la base de données Northwind. Au départ, les données sont récupérées à partir de la table Orders et affichées dans un <xref:System.Web.UI.WebControls.DropDownList> contrôle. Vous devez déclarer explicitement le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> propriété et appelez le <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> méthode lors de l’utilisation des contrôles liés aux données, telles que la <xref:System.Web.UI.WebControls.DropDownList> (contrairement à d’autres contrôles, tels que <xref:System.Web.UI.WebControls.GridView> et <xref:System.Web.UI.WebControls.DetailsView>, qui remplissent automatiquement le paramètres et appellent la <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> méthode sur un contrôle de source de données). Dans cet exemple, le <xref:System.Web.UI.WebControls.Button.OnClick%2A> événement est délégué à privé `OnDelete` Gestionnaire d’événements qui appelle explicitement la <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> méthode de la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> ne peut pas établir de connexion avec la source de données sous-jacente.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public string DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne SQL que le contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour supprimer des données de la base de données sous-jacente.</summary>
        <value>Une chaîne SQL que <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour supprimer des données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> représente une requête SQL ou le nom d’une procédure stockée et est utilisé par le <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> (méthode).  
  
 Dans la mesure où plusieurs produits de base de données utilisent des variétés différentes de SQL, la syntaxe de la chaîne SQL dépend du fournisseur ADO.NET actuellement utilisé, identifié par la propriété <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>. Si la chaîne SQL est une requête paramétrable ou une commande, la syntaxe du paramètre dépend également du fournisseur ADO.NET actuellement utilisé. Par exemple, si le fournisseur est le <xref:System.Data.SqlClient?displayProperty=nameWithType>, qui est le fournisseur par défaut pour le <xref:System.Web.UI.WebControls.SqlDataSource> (classe), la syntaxe du paramètre est `'@parameterName'`. Toutefois, si le fournisseur est défini sur le <xref:System.Data.Odbc?displayProperty=nameWithType> ou <xref:System.Data.OleDb?displayProperty=nameWithType>, l’espace réservé du paramètre est `'?'`. Pour plus d’informations sur les requêtes SQL paramétrées et les commandes, consultez [à l’aide des paramètres avec le contrôle SqlDataSource](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> propriété peut être une chaîne SQL ou le nom d’une procédure stockée, si la base de données prend en charge les procédures stockées.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> propriété délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
> [!IMPORTANT]
>  Pour des raisons de sécurité, le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> propriété n’est pas stockée dans l’état d’affichage. Comme il est possible de décoder le contenu de l’état d’affichage sur le client, le stockage des informations sensibles sur la structure de base de données dans la vue état peut entraîner une vulnérabilité de divulgation d’informations.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> texte pour supprimer une commande de la table de commandes de base de données Northwind. Données sont récupérées à partir de la table Orders et affichées dans un <xref:System.Web.UI.WebControls.GridView> contrôle. Le <xref:System.Web.UI.WebControls.GridView> restitue un **supprimer** bouton automatiquement lors de la <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> est définie sur `true`. En outre, lorsque la **supprimer** bouton est activé, le <xref:System.Web.UI.WebControls.GridView> contrôle remplit automatiquement la <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> collection, appelle le <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> (méthode). Enfin, étant donné que cet exemple de code supprime les données, un gestionnaire d’événements est ajouté pour tenter de sauvegarder la base de données sur le disque avant la <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> opération est effectuée.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType DeleteCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le texte de la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> est une instruction SQL ou le nom d'une procédure stockée.</summary>
        <value>Une des valeurs de <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />. La valeur par défaut est la valeur <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType%2A> propriété délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Deleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une opération de suppression est terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.SqlDataSource.Deleted> événement pour examiner les valeurs des paramètres de sortie après une opération de suppression est terminée. Les paramètres de sortie sont disponibles à partir de la <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> objet qui est associé à l’événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres qui contient les paramètres utilisés par la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> de l'objet <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> qui est associé au contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> qui contient les paramètres utilisés par la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> propriété contient une requête SQL paramétrable, la <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> collection contient un <xref:System.Web.UI.WebControls.Parameter> des objets qui correspondent aux espaces réservés de paramètre dans la chaîne SQL.  
  
> [!NOTE]
>  Assurez-vous qu’aucun <xref:System.Web.UI.WebControls.BoundField> contrôles dans le contrôle lié aux données que vous liez à la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle ont des noms qui correspondent à tous les noms de paramètre dans le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> collection. Les paramètres qui ont le même nom que les champs liés sont exclus de la commande SQL et qu’une erreur « paramètre n’a pas été fourni » peuvent entraîner.  
  
 Si le <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> est définie sur le <xref:System.Web.UI.ConflictOptions.CompareAllValues> , les paramètres sont créés pour les valeurs anciennes et nouvelles des données. Les paramètres pour les anciennes valeurs sont nommés conformément à la <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> propriété.  
  
 Selon le fournisseur ADO.NET, l’ordre des paramètres dans le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> collection peut être importante. Le <xref:System.Data.OleDb?displayProperty=nameWithType> et <xref:System.Data.Odbc?displayProperty=nameWithType> fournisseurs associent les paramètres de la collection dans l’ordre dans lequel les paramètres apparaissent dans la requête SQL paramétrable. Le <xref:System.Data.SqlClient?displayProperty=nameWithType> fournisseur, qui est le fournisseur ADO.NET par défaut pour le <xref:System.Web.UI.WebControls.SqlDataSource> contrôler, associe les paramètres de la collection en faisant correspondre le nom du paramètre à l’espace réservé dans la requête SQL. Pour plus d’informations sur les requêtes SQL paramétrées et les commandes, consultez [à l’aide des paramètres avec le contrôle SqlDataSource](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> récupère de la propriété le <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> propriété contenue par le <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> texte pour supprimer une commande à partir de la base de données Northwind. Au départ, les données sont récupérées à partir de la table Orders et affichées dans un <xref:System.Web.UI.WebControls.DropDownList> contrôle. Vous devez déclarer explicitement <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> propriété et appelez le <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> méthode lors de l’utilisation des contrôles liés aux données, tel que <xref:System.Web.UI.WebControls.DropDownList> (contrairement à d’autres contrôles, tels que <xref:System.Web.UI.WebControls.GridView> et <xref:System.Web.UI.WebControls.DetailsView>, qui remplissent automatiquement les paramètres et appeler <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> sur un contrôle de source de données). Dans cet exemple, le <xref:System.Web.UI.WebControls.Button.OnClick%2A> événement est délégué à privé `OnDelete` Gestionnaire d’événements qui appelle explicitement la <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> méthode de la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Deleting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération de suppression.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> événement pour effectuer des opérations d’initialisation supplémentaires qui sont spécifiques à votre application, pour valider les valeurs de paramètres ou pour modifier les valeurs de paramètre avant que le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle effectue l’opération de suppression.  
  
 La connexion à la source de données sous-jacente n’est pas encore ouverte lorsque le délégué de gestionnaire d’événements est appelé. Par conséquent, vous ne pouvez pas annuler l’opération directement en appelant le <xref:System.Data.Common.DbCommand.Cancel%2A> méthode sur le <xref:System.Data.Common.DbCommand> objet exposé par le <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> objet. Vous pouvez, toutefois, annuler l’opération de base de données en définissant le <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> objet `true`.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment gérer les <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> événement est déclenché avant une <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> opération se produit. Étant donné que cet exemple supprime les données de la base de données Northwind, une <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> gestionnaire est ajouté pour tenter de sauvegarder la base de données sur le disque avant la <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> opération est effectuée.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la mise en cache de données du contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> est activée.</summary>
        <value>
          <see langword="true" /> si la mise en cache est activée pour le contrôle de source de données ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle prend en charge la mise en cache de données. Alors que les données mises en cache, le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode récupère des données à partir du cache, plutôt qu’à partir de la base de données sous-jacente. Lorsque le cache expire, la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode récupère les données de la base de données sous-jacente, puis remet les données.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle met automatiquement en cache les données lorsque le <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> est définie sur `true` et le <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> propriété est définie sur une valeur supérieure à 0, ce qui indique le nombre de secondes que le cache stocke les données avant de récupérer un nouveau jeu.  
  
> [!IMPORTANT]
>  Lorsque vous utilisez l’emprunt d’identité du client avec l’authentification Microsoft Windows, les données mises en cache lorsque le premier utilisateur accède aux données. Si un autre utilisateur demande les mêmes données, les données sont récupérées à partir du cache. Les données ne sont pas récupérées en effectuant un autre appel à la base de données pour vérifier l’accès de l’utilisateur aux données. Si vous prévoyez que plusieurs utilisateurs à accéder aux données et que vous souhaitez que chaque récupération de données devant être vérifiées par les configurations de sécurité pour la base de données, n’utilisez pas la mise en cache.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment récupérer des données à partir de la base de données Northwind dans Microsoft SQL Server et l’afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle, avec la mise en cache de données activée. Le <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> est définie sur `true` et <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> est défini sur 20 secondes. Étant donné que la <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> est définie sur le <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> champ par défaut, les utilisateurs de cette page s’affiche les données actualisées toutes les 20 secondes.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">La propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" /> a la valeur <see langword="true" /> lorsque la mise en cache n'est pas prise en charge par <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une expression de filtrage appliquée lorsque la méthode <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> est appelée.</summary>
        <value>Chaîne qui représente une expression de filtrage appliquée lorsque les données sont récupérées à l’aide de la méthode <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> valeur de propriété est une expression de chaîne de format (une chaîne qui est traitée par le <xref:System.String.Format%2A?displayProperty=nameWithType> (méthode)) qui utilise les valeurs dans le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> collection de paramètres de substitution inclus dans la chaîne. La syntaxe d’expression de filtre est la même syntaxe qui est acceptée par le <xref:System.Data.DataView.RowFilter%2A> propriété, car l’expression de filtre est appliquée à la <xref:System.Data.DataView.RowFilter%2A> propriété de la <xref:System.Data.DataView> objet qui est retourné à partir de l’exécution de la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> (méthode). Pour plus d'informations, consultez <xref:System.Data.DataColumn.Expression%2A>.  
  
 Si vous ajoutez des paramètres à la <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection, vous pouvez également inclure des espaces réservés de chaîne de format (par exemple, `"{0}")` dans l’expression à substituer aux valeurs de paramètre. Les espaces réservés sont remplacés selon l’index du paramètre dans le <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. Si un objet dans le <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection est `null`, l’objet sera remplacé par une chaîne vide.  
  
 Vous pouvez inclure des paramètres dans le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> propriété. Si le paramètre est un type chaîne ou un caractère, placez le paramètre entre guillemets simples. Les guillemets ne sont pas requis, si le paramètre est un type numérique. Le <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection contient les paramètres qui sont évalués pour les espaces réservés qui sont trouvent dans le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> propriété.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle prend en charge le filtrage des données uniquement lorsque dans le <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> mode.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> propriété délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment récupérer des données à partir de la base de données Northwind et filtrer à l’aide d’un <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> chaîne et le <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. Le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> propriété est appliquée à tout moment la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode est exécutée pour récupérer des données. Dans cet exemple, le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> contient un espace réservé pour un paramètre de filtre, qui est contenu dans le <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. En outre, le paramètre de filtre est un <xref:System.Web.UI.WebControls.ControlParameter> objet qui est lié à la <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> propriété de la <xref:System.Web.UI.WebControls.DropDownList> contrôle. Car le <xref:System.Web.UI.WebControls.DropDownList> contrôle a son <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> propriété la valeur `true`, toute modification dans la sélection pour la <xref:System.Web.UI.WebControls.DropDownList> contrôle entraîne la page Publier des informations sur le serveur et le <xref:System.Web.UI.WebControls.GridView> contrôle lier de nouveau à la source de données contrôle avec le nouveau filtre.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">La propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> a été définie et <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> est en mode <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataReader" />.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As SqlDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération de filtre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> événement pour effectuer des opérations de validation sur les valeurs de paramètre de filtre avant du <xref:System.Web.UI.WebControls.SqlDataSource> contrôle effectue une opération de filtre. Vous pouvez annuler la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode en définissant le <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs> objet `true`. L’événement est déclenché uniquement si la <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> est définie.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.Filtering?displayProperty=nameWithType> événement délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=nameWithType> l’événement de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de paramètres qui sont associés aux espaces réservés des paramètres dans la chaîne <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> qui contient un jeu de paramètres associé à n'importe quel espace réservé de paramètre trouvé dans la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les paramètres dans le <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection sont associés à tous les paramètres qui sont spécifiés dans le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> propriété. Les espaces réservés de paramètre qui sont spécifiés dans le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> propriété sont mises en correspondance par l’ordre des objets de paramètre dans le <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection lorsque le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode est appelée.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> récupère de la propriété le <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> propriété contenue par le <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment récupérer des données à partir de la base de données Northwind et filtrer à l’aide de la <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> et <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> propriétés. Le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle est appliquée à tout moment la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode est exécutée pour récupérer des données. Dans cet exemple, le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> propriété contient un espace réservé pour un paramètre de filtre, qui est contenu dans le <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. En outre, le paramètre de filtre est un <xref:System.Web.UI.WebControls.ControlParameter> objet qui est lié à la <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> propriété de la <xref:System.Web.UI.WebControls.DropDownList> contrôle. Car le <xref:System.Web.UI.WebControls.DropDownList> contrôle a son <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> propriété la valeur `true`, toute modification apportée dans le <xref:System.Web.UI.WebControls.DropDownList> sélection, la page Publier des informations sur le serveur et le <xref:System.Web.UI.WebControls.GridView> contrôle lier de nouveau au contrôle de source de données avec le nouveau filtre.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="GetDbProviderFactory">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DbProviderFactory GetDbProviderFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DbProviderFactory GetDbProviderFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetDbProviderFactory () As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::DbProviderFactory ^ GetDbProviderFactory();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne l'objet <see cref="T:System.Data.Common.DbProviderFactory" /> qui est associé au fournisseur ADO.NET identifié par la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />.</summary>
        <returns>
          <see cref="T:System.Data.Common.DbProviderFactory" /> qui représente le fournisseur ADO.NET identifié ; sinon, instance du <see cref="N:System.Data.SqlClient" />, si aucun fournisseur n'est défini.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.Common.DbProviderFactory> propriété est utilisée par le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle à créer les objets de connexion, de commande et paramètre ADO.NET corrects lors de l’interaction avec une base de données.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.Common.DbProviderFactory" />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">Nom de l'affichage à récupérer. Comme <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> ne prend en charge qu’une seule vue, <c>viewName</c> est ignoré.</param>
        <summary>Obtient la vue de source de données associée au contrôle de source de données.</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> nommé "Table" et associé à <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle prend en charge la vue de source de données qu’une seule. Comme avec tous les objets de vue de source de données, le <xref:System.Web.UI.WebControls.SqlDataSourceView> objet qui est associé au contrôle de source de données définit ses fonctions, effectue tout le travail qui est nécessaire pour récupérer des données à partir de la base de données sous-jacente et exécute des opérations, telles que le tri, Insertion, suppression et la mise à jour.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="viewName" /> est <see langword="null" /> ou différent de <c>Table</c>.</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient une collection des noms qui représentent la liste d'objets de vue associée au contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> contenant les noms des affichages associés au <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle prend en charge qu’une seule vue sur ses données sous-jacentes, nommées `"Table"`. Le <xref:System.Web.UI.WebControls.SqlDataSource.GetViewNames%2A> méthode retourne une collection d’élément de ce nom de vue.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute une opération d'insertion à l'aide de la chaîne SQL <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> et de tous les paramètres de la collection <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />.</summary>
        <returns>Une valeur qui représente le nombre de lignes insérées dans la base de données sous-jacente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant d’effectuer l’opération d’insertion, le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> événement. Vous pouvez gérer cet événement pour examiner les valeurs des paramètres et effectuer tout prétraitement avant le <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> opération. Pour effectuer une opération d’insertion, le <xref:System.Web.UI.WebControls.SqlDataSourceView> builds de l’objet une <xref:System.Data.Common.DbCommand> à l’aide de l’objet le <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> texte et associés <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> propriétés, puis exécute le <xref:System.Data.Common.DbCommand> objet par rapport à la base de données sous-jacente.  
  
 Une fois l’opération terminée, le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> événement. Vous pouvez gérer cet événement pour examiner les valeurs de retour et les codes d’erreur et effectuer tout post-traitement.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> méthode est fournie pour l’accès par programme à le `Insert` (méthode). Si le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle est associé à un contrôle lié aux données, le contrôle lié aux données appelle automatiquement la `Insert` (méthode).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> méthode délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A> méthode de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment insérer des données dans une base de données à l’aide de la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle et une page Web Forms simple. Les données actuelles de la table de données s’affiche dans le <xref:System.Web.UI.WebControls.DropDownList> contrôle. Vous pouvez ajouter de nouveaux enregistrements en entrant des valeurs dans le <xref:System.Web.UI.WebControls.TextBox> des contrôles et en cliquant sur le **insérer** bouton. Lorsque le **insérer** bouton est activé, les valeurs spécifiées sont insérées dans la base de données, puis le <xref:System.Web.UI.WebControls.DropDownList> est actualisé.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace potentielle pour la sécurité et les valeurs sont insérées dans les paramètres sans validation, qui est également une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
> [!NOTE]
>  Cet exemple montre comment utiliser la syntaxe déclarative pour accéder aux données. Pour plus d’informations sur la façon d’accéder aux données à l’aide de code au lieu du balisage, consultez [l’accès aux données dans Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> ne peut pas établir de connexion avec la source de données sous-jacente.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public string InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne SQL que le contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour insérer des données dans la base de données sous-jacente.</summary>
        <value>Chaîne SQL que <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour insérer des données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> représente une requête SQL ou le nom d’une procédure stockée et est utilisé par le <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> (méthode).  
  
 Dans la mesure où plusieurs produits de base de données utilisent des variétés différentes de SQL, la syntaxe de la chaîne SQL dépend du fournisseur ADO.NET actuellement utilisé, identifié par la propriété <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>. Si la chaîne SQL est une requête ou une commande paramétrée, l'espace réservé du paramètre dépend également du fournisseur ADO.NET utilisé. Par exemple, si le fournisseur est le <xref:System.Data.SqlClient?displayProperty=nameWithType>, qui est le fournisseur par défaut pour le <xref:System.Web.UI.WebControls.SqlDataSource> classe, l’espace réservé du paramètre est `'@parameterName'`. Toutefois, si le fournisseur est défini sur le <xref:System.Data.Odbc?displayProperty=nameWithType> ou <xref:System.Data.OleDb?displayProperty=nameWithType>, l’espace réservé du paramètre est `'?'`. Pour plus d’informations sur les requêtes SQL paramétrées et les commandes, consultez [à l’aide des paramètres avec le contrôle SqlDataSource](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> peut être une chaîne SQL ou le nom d’une procédure stockée, si la source de données prend en charge les procédures stockées.  
  
 Cette propriété délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceView> qui est associé à le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
> [!IMPORTANT]
>  Pour des raisons de sécurité, le <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> propriété n’est pas stockée est l’état d’affichage. Comme il est possible de décoder le contenu de l’état d’affichage sur le client, le stockage des informations sensibles sur la structure de base de données dans la vue état peut entraîner une vulnérabilité de divulgation d’informations.  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment insérer des données dans une base de données à l’aide de la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle et une page Web Forms simple. Le deuxième exemple de code montre comment récupérer des données à partir de Microsoft SQL Server et l’afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle et comment utiliser un <xref:System.Web.UI.WebControls.DetailsView> contrôle pour afficher les détails d’une ligne sélectionnée dans le <xref:System.Web.UI.WebControls.GridView> contrôle et en tant que formulaire pour insérer de nouveaux enregistrements.  
  
> [!NOTE]
>  Les exemples suivants montrent comment utiliser la syntaxe déclarative pour accéder aux données. Pour plus d’informations sur la façon d’accéder aux données à l’aide de code au lieu du balisage, consultez [l’accès aux données dans Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 L’exemple de code suivant montre comment insérer des données dans une base de données à l’aide de la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle et une page Web Forms simple. Les données actuelles de la table de données s’affiche dans le <xref:System.Web.UI.WebControls.DropDownList> contrôle. Vous pouvez ajouter de nouveaux enregistrements en entrant des valeurs dans le <xref:System.Web.UI.WebControls.TextBox> des contrôles et en cliquant sur le **insérer** bouton. Lorsque le **insérer** bouton est activé, les valeurs spécifiées sont insérées dans la base de données et le <xref:System.Web.UI.WebControls.DropDownList> contrôle est actualisé.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace potentielle pour la sécurité, et les valeurs sont insérées dans les paramètres sans validation, qui est également une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 L’exemple de code suivant montre comment récupérer des données à partir de SQL Server et l’afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle et comment utiliser un <xref:System.Web.UI.WebControls.DetailsView> contrôle pour afficher les détails d’une ligne sélectionnée dans le <xref:System.Web.UI.WebControls.GridView> contrôle et en tant que formulaire pour insérer de nouveaux enregistrements.  
  
 Au départ, les données sont affichées dans le <xref:System.Web.UI.WebControls.GridView> contrôle et la ligne sélectionnée de la <xref:System.Web.UI.WebControls.GridView> s’affiche également dans le <xref:System.Web.UI.WebControls.DetailsView> contrôle. Le <xref:System.Web.UI.WebControls.GridView> et <xref:System.Web.UI.WebControls.DetailsView> contrôles utilisent des données différentes des contrôles de source ; celle qui est associé à la <xref:System.Web.UI.WebControls.DetailsView> a le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> et <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> propriétés, ce qui garantit que la ligne sélectionnée de la <xref:System.Web.UI.WebControls.GridView> est affiché.  
  
 Si vous cliquez sur généré automatiquement **insérer** bouton de la <xref:System.Web.UI.WebControls.DetailsView> (contrôle), la <xref:System.Web.UI.WebControls.DetailsView> affiche une interface utilisateur différente, qui est utilisée pour insérer un nouvel enregistrement. L’exemple utilise une procédure stockée pour insérer des enregistrements et retourne la clé primaire de la ligne insérée. Si vous insérez un enregistrement, le <xref:System.Web.UI.WebControls.DetailsView> remplit automatiquement la <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection avec les valeurs des colonnes dépendantes et appelle la <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> (méthode). Le <xref:System.Web.UI.WebControls.DetailsView> peut déduire les paramètres corrects de n’importe quel <xref:System.Web.UI.WebControls.BoundField> objet et un paramètre pour le <xref:System.Web.UI.WebControls.TemplateField> de l’objet lorsque la syntaxe de liaison de données bidirectionnelle ASP.NET est utilisée. Dans cet exemple, un paramètre supplémentaire est ajouté dans le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> Gestionnaire d’événements à gérer la clé primaire qui est retournée par la procédure stockée.  
  
 Enfin, une fois que les données sont insérées dans la base de données par le <xref:System.Web.UI.WebControls.DetailsView> (contrôle), le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> Gestionnaire d’événements est appelé pour gérer le <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> événement, la valeur de la clé primaire de la ligne insérée est affichée et le <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> de la (méthode)<xref:System.Web.UI.WebControls.GridView> contrôle est appelée explicitement pour actualiser les données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType InsertCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le texte de la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> est une instruction SQL ou le nom d'une procédure stockée.</summary>
        <value>Une des valeurs de <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />. La valeur par défaut est la valeur <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A> propriété délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment récupérer des données d’une base de données Microsoft SQL Server et l’afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle. Il montre également comment utiliser un <xref:System.Web.UI.WebControls.DetailsView> contrôle pour afficher les détails d’une ligne sélectionnée dans le <xref:System.Web.UI.WebControls.GridView> et en tant que formulaire pour insérer de nouveaux enregistrements.  
  
 Le <xref:System.Web.UI.WebControls.GridView> contrôle affiche un jeu de données et la <xref:System.Web.UI.WebControls.DetailsView> affiche les détails pour une ligne particulière. Si vous cliquez sur généré automatiquement **insérer** bouton de la <xref:System.Web.UI.WebControls.DetailsView> (contrôle), la <xref:System.Web.UI.WebControls.DetailsView> affiche une interface utilisateur différente, qui est utilisée pour insérer un nouvel enregistrement. L’exemple utilise une procédure stockée pour insérer des enregistrements et retourne la clé primaire de la ligne insérée. Le nom de la procédure stockée est défini le <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> propriété et identifiée comme une procédure stockée en définissant le <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A> propriété le <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> valeur.  
  
 Une fois que les données sont insérées dans la base de données par le <xref:System.Web.UI.WebControls.DetailsView> (contrôle), le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> Gestionnaire d’événements est appelé pour gérer le <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> événement, la valeur de la clé primaire de la ligne insérée est affichée et le <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> méthode de la <xref:System.Web.UI.WebControls.GridView> contrôle est appelée explicitement pour actualiser les données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Inserted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une opération d'insertion est terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> événement pour examiner les valeurs des paramètres de sortie après une opération d’insertion est terminée. Les paramètres de sortie sont disponibles à partir de la <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> objet qui est associé à l’événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment récupérer des données à partir de Microsoft SQL Server et l’afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle et comment utiliser un <xref:System.Web.UI.WebControls.DetailsView> contrôle pour afficher les détails d’une ligne sélectionnée dans le <xref:System.Web.UI.WebControls.GridView> et en tant que formulaire pour insérer de nouveaux enregistrements.  
  
> [!NOTE]
>  Cet exemple montre comment utiliser la syntaxe déclarative pour accéder aux données. Pour plus d’informations sur la façon d’accéder aux données à l’aide de code au lieu du balisage, consultez [l’accès aux données dans Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 Au départ, les données sont affichées dans le <xref:System.Web.UI.WebControls.GridView> contrôle et la ligne sélectionnée de la <xref:System.Web.UI.WebControls.GridView> s’affiche également dans le <xref:System.Web.UI.WebControls.DetailsView> contrôle. Le <xref:System.Web.UI.WebControls.GridView> et <xref:System.Web.UI.WebControls.DetailsView> contrôles utilisent des données différentes des contrôles de source ; celle qui est associé à la <xref:System.Web.UI.WebControls.DetailsView> a le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> et <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> propriétés, ce qui garantit que la ligne sélectionnée de la <xref:System.Web.UI.WebControls.GridView> est affiché.  
  
 Si vous cliquez sur généré automatiquement **insérer** bouton de la <xref:System.Web.UI.WebControls.DetailsView> (contrôle), la <xref:System.Web.UI.WebControls.DetailsView> affiche une interface utilisateur différente, qui est utilisée pour insérer un nouvel enregistrement. L’exemple utilise une procédure stockée pour insérer des enregistrements et retourne la clé primaire de la ligne insérée. Si vous insérez un enregistrement, le <xref:System.Web.UI.WebControls.DetailsView> remplit automatiquement la <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection avec les valeurs des colonnes dépendantes et appelle la <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> (méthode). Le <xref:System.Web.UI.WebControls.DetailsView> peut déduire les paramètres corrects de n’importe quel <xref:System.Web.UI.WebControls.BoundField> objet et un paramètre pour le <xref:System.Web.UI.WebControls.TemplateField> de l’objet lorsque la syntaxe de liaison de données bidirectionnelle ASP.NET est utilisée. Dans cet exemple, un paramètre supplémentaire est ajouté dans le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> Gestionnaire d’événements à gérer la clé primaire qui est retournée par la procédure stockée.  
  
 Enfin, une fois que les données sont insérées dans la base de données par le <xref:System.Web.UI.WebControls.DetailsView> (contrôle), le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> Gestionnaire d’événements est appelé pour traiter la <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> événement, la valeur de la clé primaire de la ligne insérée est affichée et le <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> de la (méthode)<xref:System.Web.UI.WebControls.GridView> contrôle est appelée explicitement pour actualiser les données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Inserting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération d'insertion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> événement pour effectuer des opérations d’initialisation supplémentaires qui sont spécifiques à votre application, pour valider les valeurs de paramètres ou pour modifier les valeurs de paramètre avant que le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle effectue l’opération d’insertion. La connexion à la source de données sous-jacente n’est pas encore ouverte lorsque le délégué de gestionnaire d’événements est appelé. Par conséquent, vous ne pouvez pas annuler l’opération directement en appelant le <xref:System.Data.Common.DbCommand.Cancel%2A> méthode sur le <xref:System.Data.Common.DbCommand> objet exposé par le <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> propriété. Vous pouvez, toutefois, annuler l’opération de base de données en définissant le <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> objet `true`.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment récupérer des données à partir de Microsoft SQL Server et l’afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle et comment utiliser un <xref:System.Web.UI.WebControls.DetailsView> contrôle pour afficher les détails d’une ligne sélectionnée dans le <xref:System.Web.UI.WebControls.GridView> et en tant que formulaire pour insérer de nouveaux enregistrements.  
  
> [!NOTE]
>  Cet exemple montre comment utiliser la syntaxe déclarative pour accéder aux données. Pour plus d’informations sur la façon d’accéder aux données à l’aide de code au lieu du balisage, consultez [l’accès aux données dans Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 Au départ, les données sont affichées dans le <xref:System.Web.UI.WebControls.GridView> contrôle et la ligne sélectionnée de la <xref:System.Web.UI.WebControls.GridView> s’affiche également dans le <xref:System.Web.UI.WebControls.DetailsView> contrôle. Le <xref:System.Web.UI.WebControls.GridView> et <xref:System.Web.UI.WebControls.DetailsView> contrôles utilisent des données différentes des contrôles de source ; celle qui est associé à la <xref:System.Web.UI.WebControls.DetailsView> a le <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> et <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> propriétés, ce qui garantit que la ligne sélectionnée de la <xref:System.Web.UI.WebControls.GridView> est affiché.  
  
 Si vous cliquez sur généré automatiquement **insérer** bouton de la <xref:System.Web.UI.WebControls.DetailsView> (contrôle), la <xref:System.Web.UI.WebControls.DetailsView> affiche une interface utilisateur différente, qui est utilisée pour insérer un nouvel enregistrement. L’exemple utilise une procédure stockée pour insérer des enregistrements et retourne la clé primaire de la ligne insérée. Si vous insérez un enregistrement, le <xref:System.Web.UI.WebControls.DetailsView> remplit automatiquement la <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection avec les valeurs des colonnes dépendantes et appelle la <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> (méthode). Le <xref:System.Web.UI.WebControls.DetailsView> peut déduire les paramètres corrects de n’importe quel <xref:System.Web.UI.WebControls.BoundField> objet et un paramètre pour le <xref:System.Web.UI.WebControls.TemplateField> lorsque la syntaxe de liaison de données bidirectionnelle ASP.NET est utilisée. Dans cet exemple, un paramètre supplémentaire est ajouté dans le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> Gestionnaire d’événements à gérer la clé primaire qui est retournée par la procédure stockée.  
  
 Enfin, une fois que les données sont insérées dans la base de données par le <xref:System.Web.UI.WebControls.DetailsView> (contrôle), le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> Gestionnaire d’événements est appelé pour traiter la <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> événement, la valeur de la clé primaire de la ligne insérée est affichée et le `DataBind` de la (méthode)<xref:System.Web.UI.WebControls.GridView> contrôle est appelée explicitement pour actualiser les données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres qui contient les paramètres utilisés par la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> de l'objet <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> qui est associé au contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> qui contient les paramètres utilisés par la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> récupère de la propriété le <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> propriété contenue par le <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
 Si le <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> propriété contient une requête SQL paramétrable, la <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection contient un <xref:System.Web.UI.WebControls.Parameter> des objets qui correspondent aux espaces réservés de paramètre dans la chaîne SQL.  
  
 Selon le fournisseur ADO.NET, l’ordre des paramètres dans le <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection peut être importante. Le <xref:System.Data.OleDb?displayProperty=nameWithType> et <xref:System.Data.Odbc?displayProperty=nameWithType> fournisseurs associent les paramètres de la collection selon l’ordre dans lequel les paramètres apparaissent dans la requête SQL paramétrable. Le <xref:System.Data.SqlClient?displayProperty=nameWithType> fournisseur, qui est le fournisseur ADO.NET par défaut pour le <xref:System.Web.UI.WebControls.SqlDataSource> contrôler, associe les paramètres de la collection en faisant correspondre le nom du paramètre à un alias d’espace réservé dans la requête SQL. Pour plus d’informations sur les requêtes SQL paramétrées et les commandes, consultez [à l’aide des paramètres avec le contrôle SqlDataSource](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment insérer des données dans une base de données à l’aide de la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle et une page Web Forms simple. Les données actuelles de la table de données s’affiche dans le <xref:System.Web.UI.WebControls.DropDownList> contrôle. Vous pouvez ajouter de nouveaux enregistrements en entrant des valeurs dans le <xref:System.Web.UI.WebControls.TextBox> des contrôles et en cliquant sur le **insérer** bouton. Lorsque le **insérer** bouton est activé, les valeurs spécifiées sont insérées dans la base de données et le <xref:System.Web.UI.WebControls.DropDownList> contrôle est actualisé.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace potentielle pour la sécurité, et les valeurs sont insérées dans les paramètres sans validation, qui est également une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
> [!NOTE]
>  Cet exemple montre comment utiliser la syntaxe déclarative pour accéder aux données. Pour plus d’informations sur la façon d’accéder aux données à l’aide de code au lieu du balisage, consultez [l’accès aux données dans Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">Objet qui représente l'état de <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</param>
        <summary>Charge l'état des propriétés du contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> qui doivent être persistants.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.LoadViewState%2A> méthode est utilisée pour charger l’état d’affichage précédemment enregistré de le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une chaîne de mise en forme à appliquer aux noms de tous les paramètres qui sont passés à la méthode <see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" /> ou <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />.</summary>
        <value>Une chaîne qui représente une chaîne de mise en forme appliquée aux noms de tous les paramètres <paramref name="oldValues" /> passé aux méthodes <see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" /> ou <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />. La valeur par défaut est "{0}".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> chaîne de format s’applique uniquement aux clés primaires, telles que celles qui sont identifiées par le `DataKeyNames` propriété du contrôle lié aux données associé, ou dans la section supprimer et mettre à jour les scénarios où le <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> est définie sur la <xref:System.Web.UI.ConflictOptions.CompareAllValues>et un jeu de `oldValues` sont passés à la méthode de données correspondante. Dans ce cas, la chaîne de format est appliquée à chaque nom de paramètre dans le `oldValues` collection.  
  
 Deux scénarios courants où vous pouvez modifier le <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> propriété sont les suivantes :  
  
-   Faire la différence entre les valeurs anciennes et nouvelles dans les mises à jour. Lorsque le <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> est définie sur le <xref:System.Web.UI.ConflictOptions.CompareAllValues> paramètres de valeur, les valeurs d’origine et nouvelles sont ajoutés à la <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. Sans la chaîne de mise en forme, deux paramètres portant le même nom doit être créés pour chaque champ de données. En modifiant le nom du paramètre de valeur d’origine, vous pouvez comparer les données à la source de données d’origine pour détecter des conflits et comparer des valeurs de clé.  
  
-   Certains concepteurs visuels implémentent un schéma d’affectation de noms particulier pour les clés et des valeurs d’origine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Ajoute un gestionnaire d'événements <see cref="E:System.Web.UI.Page.LoadComplete" /> au contrôle <see cref="T:System.Web.UI.Page" /> qui contient le contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le Gestionnaire d’événements qui est ajouté par le <xref:System.Web.UI.WebControls.SqlDataSource> mises à jour de l’objet le <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> et <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> valeurs. Si les valeurs sont mises à jour, le <xref:System.Web.UI.IDataSource.DataSourceChanged> événement est déclenché, tous les contrôles qui sont liés à la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle lier de nouveau.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public virtual string ProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ProviderName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.WebControls.DataProviderNameConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du fournisseur de données .NET Framework que le contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour se connecter à une source de données sous-jacente.</summary>
        <value>Nom du fournisseur de données utilisé par <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> ; sinon, fournisseur ADO.NET pour Microsoft SQL Server, si aucun fournisseur n'est défini. La valeur par défaut est le fournisseur ADO.NET pour Microsoft SQL Server.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le .NET Framework inclut les fournisseurs de données suivants :  
  
-   Le <xref:System.Data.SqlClient?displayProperty=nameWithType> fournisseur est la valeur par défaut du fournisseur de données .NET Framework pour SQL Server.  
  
-   Le <xref:System.Data.OleDb?displayProperty=nameWithType> fournisseur est le fournisseur de données .NET Framework pour OLE DB.  
  
-   Le <xref:System.Data.Odbc?displayProperty=nameWithType> fournisseur est le fournisseur de données .NET Framework pour ODBC.  
  
-   Le <xref:System.Data.OracleClient?displayProperty=nameWithType> fournisseur est le fournisseur de données .NET Framework pour Oracle.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> propriété n’est jamais définie sur le nom d’un fournisseur ADO.NET non managé, tel que `MSDAORA`. Pour plus d’informations, consultez [sélection des données à l’aide du contrôle SqlDataSource](http://msdn.microsoft.com/library/44623286-ff5a-4148-8a3c-85c56ed545eb).  
  
 Si vous modifiez le <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> propriété, le <xref:System.Web.UI.IDataSource.DataSourceChanged> événement est déclenché, tous les contrôles qui sont liés à la <xref:System.Web.UI.WebControls.SqlDataSource> à relier.  
  
 Une liste des fournisseurs disponibles est spécifiée dans le `DbProviderFactories` sous-section de le `system.data` section du fichier Machine.config.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier code illustre comment se connecter à une base de données SQL Server à l’aide de la valeur par défaut le fournisseur de données .NET Framework pour SQL Server pour le <xref:System.Web.UI.WebControls.SqlDataSource> (contrôle), le <xref:System.Data.SqlClient?displayProperty=nameWithType>. Le deuxième exemple de code montre comment se connecter à une base de données ODBC à l’aide du fournisseur de données .NET Framework pour ODBC, le <xref:System.Data.Odbc?displayProperty=nameWithType>.  
  
 L’exemple de code suivant montre comment se connecter à une base de données SQL Server à l’aide du fournisseur de données par défaut pour le <xref:System.Web.UI.WebControls.SqlDataSource> (contrôle), le <xref:System.Data.SqlClient?displayProperty=nameWithType>. Chaque fois que le <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> propriété n’est pas définie explicitement, le fournisseur par défaut est utilisé. Le <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> propriété est spécifique au fournisseur.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]  
  
 L’exemple de code suivant, qui est fonctionnellement identique à l’exemple de code précédent, montre comment se connecter à une base de données ODBC à l’aide du fournisseur de données .NET Framework pour ODBC, le <xref:System.Data.Odbc?displayProperty=nameWithType>. Le <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> est définie sur le nom d’un nom de source données (DSN) ODBC qui est utilisé pour se connecter à la base de données ODBC.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/CS/odbc1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/VB/odbc1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enregistre l'état d'affichage actuel du contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</summary>
        <returns>Objet qui contient l'état enregistré de <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">Objet <see cref="T:System.Web.UI.DataSourceSelectArguments" /> qui est utilisé pour demander des opérations sur les données allant au-delà de la récupération des données de base.</param>
        <summary>Récupère des données de la base de données sous-jacente à l'aide de la chaîne SQL <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> et des paramètres qui se trouvent dans la collection <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />.</summary>
        <returns>Liste <see cref="T:System.Collections.IEnumerable" /> de lignes de données.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode est appelée automatiquement pendant le <xref:System.Web.UI.Control.PreRender> phase du cycle de vie de page. Elle est appelée par les contrôles liés aux données qui ont été attachées à un <xref:System.Web.UI.WebControls.SqlDataSource> contrôler via leurs <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> propriété.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> méthode retourne un <xref:System.Data.DataView> si l’objet le <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> est définie sur la <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> valeur. Le <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> méthode retourne un <xref:System.Data.IDataReader> si l’objet le <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> est définie sur la <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> valeur. Fermer le <xref:System.Data.IDataReader> lorsque vous avez fini de lire les données de l’objet.  
  
 Avant du <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> opération est effectuée, le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> événement. Vous pouvez gérer cet événement pour examiner les valeurs des paramètres et effectuer tout traitement avant le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> opération.  
  
 Après le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> opération se termine, le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.SqlDataSource.Selected> événement. Vous pouvez gérer cet événement pour examiner les valeurs de retour et les codes d’erreur et effectuer tout post-traitement.  
  
 Si le <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> est définie sur <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=nameWithType> et mise en cache est activée, le <xref:System.Web.UI.WebControls.SqlDataSource> objet récupère les données et enregistre les données dans le cache pendant la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> opération. Le cache est créé, ignoré ou actualisé en fonction du comportement de mise en cache qui est spécifié par la combinaison de la <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> et <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> propriétés.  
  
> [!IMPORTANT]
>  Lorsque vous utilisez l’emprunt d’identité du client avec l’authentification Microsoft Windows, les données mises en cache lorsque le premier utilisateur accède aux données. Si un autre utilisateur demande les mêmes données, les données sont récupérées à partir du cache. Les données ne sont pas récupérées en effectuant un autre appel à la base de données pour vérifier l’accès de l’utilisateur aux données. Si vous prévoyez que plusieurs utilisateurs à accéder aux données et que vous souhaitez que chaque récupération de données devant être vérifiées par les configurations de sécurité pour la base de données, n’utilisez pas la mise en cache.  
  
 Si le <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> est définie sur <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=nameWithType> et un <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> propriété a été spécifiée, l’expression de filtre est évaluée avec n’importe quelle fourni <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> propriétés et le filtre résultant est appliqué à la liste des données pendant la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>opération.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> méthode de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle. Pour effectuer une opération de récupération, la <xref:System.Web.UI.WebControls.SqlDataSourceView> génère une <xref:System.Data.Common.DbCommand> objet à l’aide de la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> texte et associés <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> valeurs, puis exécute le <xref:System.Data.Common.DbCommand> par rapport à la base de données sous-jacente.  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Les exemples suivants montrent comment appeler par programme la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> (méthode) et définir des valeurs en fonction du résultat de la requête. L’exemple suivant montre le code déclaratif pour les contrôles Web.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource.Select#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource.Select#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx#1)]  
  
 L’exemple suivant montre comment appeler par programme la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> (méthode). Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle retourne un entier. La valeur de l’entier est utilisée pour définir le texte d’un <xref:System.Web.UI.WebControls.Label> contrôle et pour déterminer s’il faut afficher un <xref:System.Web.UI.WebControls.HyperLink> contrôle.  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource.Select#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'objet <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> ne peut pas établir de connexion avec la source de données sous-jacente.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public string SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne SQL que le contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour récupérer des données de la base de données sous-jacente.</summary>
        <value>Chaîne SQL ou nom d'une procédure stockée que <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour récupérer des données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété représente une requête SQL ou le nom d’une procédure stockée et est utilisée par le <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> méthode pour récupérer des données à partir d’une base de données SQL Server. Si vous utilisez un astérisque (*) dans la commande Select pour sélectionner toutes les colonnes et si vous utilisez la génération de code automatique pour effectuer la mise à jour ou supprimer des opérations, assurez-vous qu’aucuns colonnes n’ont des espaces dans leur nom.  
  
 Dans la mesure où plusieurs produits de base de données utilisent des variétés différentes de SQL, la syntaxe de la chaîne SQL dépend du fournisseur ADO.NET actuellement utilisé, identifié par la propriété <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>. Si la chaîne SQL est une requête ou une commande paramétrée, l'espace réservé du paramètre dépend également du fournisseur ADO.NET utilisé. Par exemple, si le fournisseur est le <xref:System.Data.SqlClient?displayProperty=nameWithType>, qui est le fournisseur par défaut pour le <xref:System.Web.UI.WebControls.SqlDataSource> classe, l’espace réservé du paramètre est `'@parameterName'`. Toutefois, si le fournisseur est défini sur le <xref:System.Data.Odbc?displayProperty=nameWithType> ou <xref:System.Data.OleDb?displayProperty=nameWithType>, l’espace réservé du paramètre est `'?'`. Pour plus d’informations sur les requêtes SQL paramétrées et les commandes, consultez [à l’aide des paramètres avec le contrôle SqlDataSource](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété peut être une chaîne SQL ou le nom d’une procédure stockée, si la source de données prend en charge les procédures stockées.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
> [!IMPORTANT]
>  Pour des raisons de sécurité, le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété n’est pas stockée est l’état d’affichage. Comme il est possible de décoder le contenu de l’état d’affichage sur le client, le stockage des informations sensibles sur la structure de base de données dans la vue état peut entraîner une vulnérabilité de divulgation d’informations.  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> texte à une requête SQL de base pour récupérer des données d’une base de données compatible ODBC et les afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle. Le deuxième exemple de code montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> texte pour le nom d’une procédure stockée et la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> propriété le <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> valeur pour récupérer des données d’une base de données Microsoft SQL Server et les afficher dans un <xref:System.Web.UI.WebControls.DropDownList> contrôle.  
  
 Dans les deux exemples, il n’est pas nécessaire d’appeler explicitement la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> (méthode), car les contrôles liés aux données qui sont attachés à la source de données de contrôle via le <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> propriété appelle automatiquement la <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> pendant la (méthode)<xref:System.Web.UI.Control.PreRender> phase.  
  
 L’exemple de code suivant montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> texte à une requête SQL de base pour récupérer des données d’une base de données compatible ODBC et les afficher dans un <xref:System.Web.UI.WebControls.GridView> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/CS/odbc4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/VB/odbc4vb.aspx#1)]  
  
 L’exemple de code suivant montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> texte pour le nom d’une procédure stockée et la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> propriété le <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> valeur pour récupérer des données d’une base de données SQL Server et les afficher dans un <xref:System.Web.UI.WebControls.DropDownList> contrôle. Le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété peut être une requête SQL ou le nom d’une procédure stockée, si la source de données prend en charge les procédures stockées.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType SelectCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le texte de la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> est une requête SQL ou le nom d'une procédure stockée.</summary>
        <value>Une des valeurs de <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />. La valeur par défaut est la valeur <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> propriété délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> texte pour le nom d’une procédure stockée et la <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> propriété le <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> valeur, afin de récupérer des données d’une base de données Microsoft SQL Server et l’afficher dans un <xref:System.Web.UI.WebControls.DropDownList> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Selected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une opération de récupération de données est terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.SqlDataSource.Selected> événement pour examiner les valeurs des paramètres de sortie après une opération de récupération de données. Les paramètres de sortie sont disponibles à partir de la <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> objet qui est associé à l’événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As SqlDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération de récupération de données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> événement pour effectuer des opérations d’initialisation supplémentaires qui sont spécifiques à votre application, pour valider les valeurs de paramètres ou pour modifier les valeurs de paramètre avant que le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle effectue l’opération de sélection. Les arguments de sélection sont disponibles à partir de la <xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs> objet qui est associé à l’événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres qui contient les paramètres utilisés par la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> de l'objet <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> qui est associé au contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> qui contient les paramètres utilisés par la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété contient une requête SQL paramétrable, la <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> collection contient un <xref:System.Web.UI.WebControls.Parameter> des objets qui correspondent aux espaces réservés de paramètre dans la chaîne SQL.  
  
 Selon le fournisseur ADO.NET, l’ordre des paramètres dans le <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> collection peut être importante. Le <xref:System.Data.OleDb?displayProperty=nameWithType> et <xref:System.Data.Odbc?displayProperty=nameWithType> fournisseurs associent les paramètres de la collection selon l’ordre dans lequel les paramètres apparaissent dans la requête SQL paramétrable. Le <xref:System.Data.SqlClient?displayProperty=nameWithType> fournisseur, qui est le fournisseur ADO.NET par défaut pour le <xref:System.Web.UI.WebControls.SqlDataSource> contrôler, associe les paramètres de la collection en faisant correspondre le nom du paramètre à un alias d’espace réservé dans la requête SQL. Pour plus d’informations sur les requêtes SQL paramétrées et les commandes, consultez [à l’aide des paramètres avec le contrôle SqlDataSource](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> récupère de la propriété le <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> propriété contenue par le <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment récupérer des données à partir de la base de données Northwind dans Microsoft SQL Server en définissant le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété à une requête SQL. La requête SQL est paramétrée et l’espace réservé dans le <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> propriété mise en correspondance avec la <xref:System.Web.UI.WebControls.ControlParameter> objet qui est ajouté à la <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> collection. Le <xref:System.Web.UI.WebControls.DropDownList> contrôler, ce qui le <xref:System.Web.UI.WebControls.ControlParameter> est lié, agit comme un filtre de ce qui est affiché dans le <xref:System.Web.UI.WebControls.ListBox> contrôle.  
  
 Pour plus d’informations sur d’autres types de paramètres que vous pouvez utiliser, consultez le <xref:System.Web.UI.WebControls.Parameter> vue d’ensemble de la classe.  
  
> [!NOTE]
>  Étant donné que le paramètre est utilisé dans une clause WHERE, l’utilisation de la <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> propriété dans l’exemple de code est fonctionnellement équivalente à l’aide du <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> et <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> propriétés.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom d'un paramètre de procédure stockée qui est utilisé pour trier des données récupérées lorsque la récupération de données est exécutée à l'aide d'une procédure stockée.</summary>
        <value>Le nom d'un paramètre de procédure stockée utilisé pour trier des données récupérées lorsque la récupération de données est exécutée à l'aide d'une procédure stockée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> propriété est évaluée uniquement lorsque la commande SQL qui est contenue par le <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> propriété est le nom d’une procédure stockée. Dans ce cas, si la <xref:System.Web.UI.WebControls.SqlDataSource.SortParameterName%2A> est définie, elle contient le nom d’un paramètre qui est utilisé pour trier les résultats de la procédure stockée.  
  
 Si le <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> propriété est définie, elle est ajoutée à la <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une chaîne délimitée par des points-virgules qui indique les bases de données et les tables à utiliser pour la dépendance de cache Microsoft SQL Server.</summary>
        <value>Chaîne qui indique les bases de données et les tables à utiliser pour la dépendance de cache SQL Server.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle prend en charge une stratégie d’expiration facultative basée sur la <xref:System.Web.Caching.SqlCacheDependency> objet pour le cache de données (le service doit être configuré pour le serveur de base de données).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> chaîne identifie les bases de données et tables selon le même format que celui qui est utilisé par la `@ Page` directive, où la première partie de la chaîne est une chaîne de connexion à une base de données Microsoft SQL Server, suivi de deux-points, et Enfin, le nom de la table de base de données (par exemple, `"connectionstring1:table1"`). Si le <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> propriété dépend de plusieurs tables, les paires de nom de la chaîne et table de connexion sont séparées par des points-virgules (par exemple, `"connectionstring1:table1";connectionstring2:table2"`).  
  
> [!IMPORTANT]
>  Lorsque vous utilisez l’emprunt d’identité du client avec l’authentification Microsoft Windows, les données mises en cache lorsque le premier utilisateur accède aux données. Si un autre utilisateur demande les mêmes données, les données sont récupérées à partir du cache. Les données ne sont pas récupérées en effectuant un autre appel à la base de données pour vérifier l’accès de l’utilisateur aux données. Si vous prévoyez que plusieurs utilisateurs à accéder aux données et que vous souhaitez que chaque récupération de données devant être vérifiées par les configurations de sécurité pour la base de données, n’utilisez pas la mise en cache.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer une dépendance de cache SQL Server et définir le <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> propriété d’un <xref:System.Web.UI.WebControls.SqlDataSource> contrôle. Dans cet exemple, la base de données est interrogé toutes les 120 secondes. Si la table de modifications pendant que les données de Northwind Traders employés du temps, toutes les données qui sont mis en cache par le <xref:System.Web.UI.WebControls.SqlDataSource> contrôler et affichés par le <xref:System.Web.UI.WebControls.GridView> contrôle est actualisé par le <xref:System.Web.UI.WebControls.SqlDataSource> contrôler la prochaine fois que la base de données est interrogé.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/CS/sql23cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/VB/sql23vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Suit les modifications d'état d'affichage apportées au contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> afin que les modifications puissent être stockées dans l'objet <see cref="T:System.Web.UI.StateBag" /> du contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.TrackViewState%2A> méthode est substituée pour marquer le point de départ pour commencer le suivi et l’enregistrement des modifications apportées au contrôle dans le cadre de l’état d’affichage pour le contrôle.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute une opération de mise à jour à l'aide de la chaîne SQL <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> et de tous les paramètres de la collection <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />.</summary>
        <returns>Une valeur qui représente le nombre de lignes mises à jour dans la base de données sous-jacente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> méthode est appelée automatiquement par le <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, et <xref:System.Web.UI.WebControls.FormView> contrôle pendant la publication (postback) si les données ont été modifiées. Pour les données qui a été modifiées dans d’autres contrôles, les <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> méthode peut être appelée explicitement lors de la publication pendant la <xref:System.Windows.Forms.Form.Load> événement.  
  
 Avant du <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> opération est effectuée, le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.SqlDataSource.Updating> événement. Vous pouvez gérer cet événement pour examiner les valeurs des paramètres et effectuer tout prétraitement avant une <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> opération.  
  
 Après le <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> opération se termine, le <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.SqlDataSource.Updated> événement. Vous pouvez gérer cet événement pour examiner les valeurs de retour et les codes d’erreur et effectuer tout post-traitement.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> méthode délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> méthode de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle. Pour effectuer une opération de mise à jour, le <xref:System.Web.UI.WebControls.SqlDataSourceView> génère une <xref:System.Data.Common.DbCommand> à l’aide de l’objet le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> texte et associés <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> propriétés, puis exécute le <xref:System.Data.Common.DbCommand> objet par rapport à la base de données sous-jacente.  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Updating> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.SqlDataSource> contrôle pour afficher des données dans un <xref:System.Web.UI.WebControls.DropDownList> les données de contrôle et de mise à jour lors de la **envoyer** bouton. Le deuxième exemple de code montre comment afficher les données récupérées à partir d’une base de données Microsoft SQL Server dans un <xref:System.Web.UI.WebControls.DropDownList> contrôler et mettre à jour de l’enregistrement à l’aide un <xref:System.Web.UI.WebControls.TextBox> contrôle.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.SqlDataSource> contrôle pour afficher des données dans un <xref:System.Web.UI.WebControls.DropDownList> les données de contrôle et de mise à jour lors de la **envoyer** bouton. Le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> propriété est définie avec une instruction SQL paramétrée et deux <xref:System.Web.UI.WebControls.ControlParameter> paramètres sont ajoutés à la <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. Lorsque le **Submit** bouton est activé, le <xref:System.Web.UI.WebControls.Button.OnClick%2A> événement est géré pour appeler le <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> (méthode) explicitement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 L’exemple de code suivant montre comment afficher les données récupérées à partir d’une base de données SQL Server dans un <xref:System.Web.UI.WebControls.DropDownList> contrôler et mettre à jour de l’enregistrement à l’aide un <xref:System.Web.UI.WebControls.TextBox> contrôle. L’exemple montre comment vous pouvez utiliser un <xref:System.Data.Common.DbTransaction> objet à ajouter le contexte de transaction lors de l’utilisation du <xref:System.Web.UI.WebControls.SqlDataSource> contrôle pour mettre à jour des données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> ne peut pas établir de connexion avec la source de données sous-jacente.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public string UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne SQL que le contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour mettre à jour des données de la base de données sous-jacente.</summary>
        <value>Chaîne SQL que <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> utilise pour mettre à jour des données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> représente une requête SQL ou le nom d’une procédure stockée et est utilisé par le <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> (méthode).  
  
 Dans la mesure où plusieurs produits de base de données utilisent des variétés différentes de SQL, la syntaxe de la chaîne SQL dépend du fournisseur ADO.NET actuellement utilisé, identifié par la propriété <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>. Si la chaîne SQL est une requête ou une commande paramétrée, l'espace réservé du paramètre dépend également du fournisseur ADO.NET utilisé. Par exemple, si le fournisseur est le <xref:System.Data.SqlClient?displayProperty=nameWithType>, qui est le fournisseur par défaut pour le <xref:System.Web.UI.WebControls.SqlDataSource> classe, l’espace réservé du paramètre est `'@parameterName'`. Toutefois, si le fournisseur est défini sur le <xref:System.Data.Odbc?displayProperty=nameWithType> ou <xref:System.Data.OleDb?displayProperty=nameWithType>, l’espace réservé du paramètre est `'?'`. Pour plus d’informations sur les requêtes SQL paramétrées et les commandes, consultez [à l’aide des paramètres avec le contrôle SqlDataSource](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> propriété peut être une chaîne SQL ou le nom d’une procédure stockée, si la source de données prend en charge les procédures stockées.  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> propriété délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
> [!IMPORTANT]
>  Pour des raisons de sécurité, le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> propriété n’est pas stockée est l’état d’affichage. Comme il est possible de décoder le contenu de l’état d’affichage sur le client, le stockage des informations sensibles sur la structure de base de données dans la vue état peut entraîner une vulnérabilité de divulgation d’informations.  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle et mise à jour des données dans une base de données Microsoft SQL Server à l’aide du <xref:System.Web.UI.WebControls.GridView> contrôle. Le deuxième exemple de code montre comment mettre à jour des données dans une base de données ODBC en utilisant la <xref:System.Web.UI.WebControls.GridView> contrôle.  
  
 L’exemple de code suivant montre comment définir la <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSource> contrôle et mise à jour des données dans une base de données SQL Server à l’aide du <xref:System.Web.UI.WebControls.GridView> contrôle. Le <xref:System.Web.UI.WebControls.GridView> remplit automatiquement la <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection, en déduisant les paramètres de la <xref:System.Web.UI.WebControls.BoundField> objets et appelle le <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> (méthode) lorsque le **mise à jour** lien sur le modifiable<xref:System.Web.UI.WebControls.GridView>est sélectionnée. Cet exemple inclut également quelque post-traitement : une fois un enregistrement est mis à jour, un message électronique de notification est envoyé.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/CS/sql7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/VB/sql7vb.aspx#1)]  
  
 L’exemple de code suivant, qui est fonctionnellement identique à l’exemple de code précédent, montre comment mettre à jour des données dans une base de données ODBC en utilisant la <xref:System.Web.UI.WebControls.GridView> contrôle. Le <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> est défini sur le fournisseur ADO.NET pour ODBC, le <xref:System.Data.Odbc?displayProperty=nameWithType>et le <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> est définie sur le nom d’un nom de source de données ODBC (DSN).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType UpdateCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le texte de la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> est une instruction SQL ou le nom d'une procédure stockée.</summary>
        <value>Une des valeurs de <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />. La valeur par défaut est la valeur <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType%2A> propriété délègue à la <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Updated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une opération de mise à jour est terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.SqlDataSource.Updated> événement pour examiner les valeurs des paramètres de sortie après une opération de mise à jour est terminée. Les paramètres de sortie sont disponibles à partir de la <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> objet qui est associé à l’événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment afficher et mettre à jour les données sont récupérées à partir d’une base de données ODBC dans un <xref:System.Web.UI.WebControls.GridView> contrôle. Une fois un enregistrement est correctement mise à jour, le <xref:System.Web.UI.WebControls.SqlDataSource.Updated> événement est géré par un gestionnaire d’événements pour effectuer une étape de post-traitement où une notification par courrier électronique est envoyée.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres qui contient les paramètres utilisés par la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> du contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> qui est associé au contrôle <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> qui contient les paramètres utilisés par la propriété <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> propriété contient une requête SQL paramétrable, la <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection contient un <xref:System.Web.UI.WebControls.Parameter> des objets qui correspondent aux espaces réservés de paramètre dans la chaîne SQL.  
  
 Les noms de paramètres peuvent être affectés par le <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> propriété, en particulier si le nom identifie une clé primaire, telle qu’une clé spécifiée à l’aide de la `DataKeyNames` propriété du contrôle lié aux données, ou dans la section supprimer et mettre à jour les scénarios où le <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> propriété est définie sur le <xref:System.Web.UI.ConflictOptions.CompareAllValues> et un jeu de `oldValues` sont passés à la méthode de données correspondante. Dans ce cas, la chaîne de format est appliquée à chaque nom de paramètre dans le `oldValues` collection.  
  
 L’ordre des paramètres dans le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection peut être importante, selon le fournisseur ADO.NET. Le <xref:System.Data.OleDb?displayProperty=nameWithType> et <xref:System.Data.Odbc?displayProperty=nameWithType> fournisseurs associent les paramètres de la collection selon l’ordre dans lequel les paramètres apparaissent dans la requête SQL paramétrable. Le <xref:System.Data.SqlClient?displayProperty=nameWithType> fournisseur, qui est le fournisseur ADO.NET par défaut pour le <xref:System.Web.UI.WebControls.SqlDataSource> contrôler, associe les paramètres de la collection en faisant correspondre le nom du paramètre à un alias d’espace réservé dans la requête SQL. Pour plus d’informations sur les requêtes SQL paramétrées et les commandes, consultez [à l’aide des paramètres avec le contrôle SqlDataSource](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> récupère de la propriété le <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> propriété contenue par le <xref:System.Web.UI.WebControls.SqlDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle.  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.SqlDataSource> contrôle pour afficher des données dans un <xref:System.Web.UI.WebControls.DropDownList> les données de contrôle et de mise à jour lors de la **envoyer** bouton. Le <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> est définie avec une instruction SQL paramétrée et deux <xref:System.Web.UI.WebControls.ControlParameter> paramètres sont ajoutés à la <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. Lorsque le **Submit** bouton est activé, le <xref:System.Web.UI.WebControls.Button.OnClick%2A> événement est géré pour appeler le <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> (méthode) explicitement.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace potentielle pour la sécurité, et les valeurs sont insérées dans les paramètres sans validation, qui est également une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Updating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération de mise à jour.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.SqlDataSource.Updating> événement pour effectuer des opérations d’initialisation supplémentaires qui sont spécifiques à votre application, pour valider les valeurs de paramètres ou pour modifier les valeurs de paramètre avant que le <xref:System.Web.UI.WebControls.SqlDataSource> contrôle effectue l’opération de mise à jour. La connexion à la source de données sous-jacente n’est pas encore ouverte lorsque le délégué de gestionnaire d’événements est appelé. Par conséquent, vous ne pouvez pas annuler directement le <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> opération de base de données en appelant le <xref:System.Data.Common.DbCommand.Cancel%2A> méthode sur le <xref:System.Data.Common.DbCommand> objet exposé par le <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> objet. Vous pouvez, toutefois, annuler l’opération de base de données en définissant le <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propriété de la <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> à `true`.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
> [!IMPORTANT]
>  Les valeurs sont insérées dans les paramètres sans validation, ce qui constitue une menace potentielle pour la sécurité. Utilisez le <xref:System.Web.UI.WebControls.SqlDataSource.Updating> événements pour valider les valeurs de paramètre avant d’exécuter la requête. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment afficher les données récupérées à partir d’une base de données Microsoft SQL Server dans un <xref:System.Web.UI.WebControls.DropDownList> contrôler et mettre à jour de l’enregistrement à l’aide un <xref:System.Web.UI.WebControls.TextBox> contrôle. L’exemple montre comment vous pouvez utiliser un <xref:System.Data.Common.DbTransaction> objet à ajouter le contexte de transaction lors de l’utilisation du <xref:System.Web.UI.WebControls.SqlDataSource> contrôle pour mettre à jour des données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
  </Members>
</Type>