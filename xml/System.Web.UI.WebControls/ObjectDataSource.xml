<Type Name="ObjectDataSource" FullName="System.Web.UI.WebControls.ObjectDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99dc13d3db1feee20f6dcb5578d7dbb3d3f94433" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37535326" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ObjectDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectDataSource : System::Web::UI::DataSourceControl" />
  <TypeSignature Language="F#" Value="type ObjectDataSource = class&#xA;    inherit DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("TypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un objet métier qui fournit des données aux contrôles liés aux données dans des architectures multicouches d'application Web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans cette rubrique :  
  
-   [Introduction](#introduction)  
  
-   [Objectif](#purpose)  
  
-   [Récupération des données](#retrieving_data)  
  
-   [Exécution d’opérations de données](#performing_data_operations)  
  
-   [Filtrage des données](#filtering_data)  
  
-   [Mise en cache](#caching)  
  
-   [Fonctionnalités](#features)  
  
-   [Vue de données](#data_view)  
  
-   [À l’aide de LINQ to SQL](#using_linq_to_sql)  
  
-   [Syntaxe déclarative](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduction  
 Un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle fonctionne avec une classe que vous créez. Création de méthodes qui récupèrent et mettre à jour des données, et vous fournir les noms de ces méthodes pour la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle dans le balisage. Au cours de rendu ou de traitement de publication (postback), le <xref:System.Web.UI.WebControls.ObjectDataSource> appelle les méthodes que vous avez spécifiées.  
  
 Il n’existe aucun affichage visuel de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Par conséquent, le <xref:System.Web.UI.WebControls.ObjectDataSource> ne prend pas en charge les fonctionnalités de visual telles que la <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> ou <xref:System.Web.UI.DataSourceControl.SkinID%2A> propriété.  
  
<a name="purpose"></a>   
## <a name="purpose"></a>Objectif  
 Une pratique de conception d’application très courante est de séparer la couche de présentation à partir de la logique métier et à encapsuler la logique métier dans les objets métier. Ces objets métier forment une couche distincte entre la couche de présentation et la couche de données, ce qui entraîne une architecture d’application à trois niveaux. Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle permet aux développeurs d’utiliser un contrôle de source de données ASP.NET tout en conservant leur architecture d’application à trois niveaux.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle utilise la réflexion pour créer des instances d’objets métier et d’appeler des méthodes sur ces derniers à récupérer, mettre à jour, insérer et supprimer des données. Le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété identifie le nom de la classe qui le <xref:System.Web.UI.WebControls.ObjectDataSource> fonctionne avec. Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle crée et détruit une instance de la classe pour chaque appel de méthode ; il ne contient pas l’objet en mémoire pour la durée de vie de la demande Web. Il s’agit d’un facteur important si l’objet métier que vous utilisez requiert beaucoup de ressources ou qu’il est coûteux à créer et détruire. À l’aide d’un objet coûteux peut ne pas être un choix de conception optimal, mais vous pouvez contrôler le cycle de vie de l’objet à l’aide de la <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événements.  
  
> [!NOTE]
>  Les méthodes qui sont identifiés par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, et <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriétés peuvent être des méthodes d’instance ou `static` (`Shared` en Visual Basic) méthodes. Si les méthodes sont `static` (`Shared` en Visual Basic), une instance de l’objet métier n’est pas créée et le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> ne sont pas déclenchés.  
  
<a name="retrieving_data"></a>   
## <a name="retrieving-data"></a>Récupération de données  
 Pour récupérer des données à partir d’un objet métier, affectez le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété le nom de la méthode qui Récupère des données. Si la méthode ne retourne pas une <xref:System.Collections.IEnumerable> ou <xref:System.Data.DataSet> de l’objet, l’objet est encapsulé par le runtime dans un <xref:System.Collections.IEnumerable> collection. Si la signature de méthode a des paramètres, vous pouvez ajouter <xref:System.Web.UI.WebControls.Parameter> des objets sur le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection, puis les lier aux valeurs que vous souhaitez passer à la méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété. Dans l’ordre pour le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôler pour utiliser les paramètres, les paramètres doivent correspondre les noms et types des paramètres dans la signature de méthode. Pour plus d’informations, consultez [à l’aide des paramètres avec le contrôle ObjectDataSource](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4).  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle récupère des données chaque fois que le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode est appelée. Cette méthode fournit un accès par programme à la méthode spécifiée par <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété. La méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété est appelée automatiquement par les contrôles qui sont liés à la <xref:System.Web.UI.WebControls.ObjectDataSource> lors de leur `DataBind` méthode est appelée. Si vous définissez le `DataSourceID` propriété d’un contrôle lié aux données, le contrôle automatiquement lié aux données à partir de la source de données, en fonction des besoins. Définition de la `DataSourceID` propriété est la méthode recommandée pour la liaison un <xref:System.Web.UI.WebControls.ObjectDataSource> vers un contrôle lié aux données. Vous pouvez également définir le `DataSource` propriété ; en revanche, vous devez appeler explicitement la `DataBind` méthode du contrôle lié aux données. Vous pouvez appeler la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode par programmation à tout moment pour récupérer des données.  
  
 Pour plus d’informations sur la liaison de contrôles liés aux données aux contrôles de source de données, consultez [liaison de données à l’aide d’un contrôle de Source de données](http://msdn.microsoft.com/library/e41adfff-8fb8-449e-9cd1-9bd49788c5f7).  
  
<a name="performing_data_operations"></a>   
## <a name="performing-data-operations"></a>Exécution d’opérations de données  
 Selon les capacités de l’entreprise de l’objet qui le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle fonctionne avec, vous pouvez effectuer des opérations de données, telles que les mises à jour, insertions et suppressions. Pour effectuer ces opérations de données, définissez le nom de la méthode appropriée et les paramètres associés pour l’opération que vous souhaitez effectuer. Pour une opération de mise à jour, par exemple, définissez la <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété le nom de la méthode d’objet métier qui effectue des mises à jour et ajouter les paramètres requis à la <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. Si le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle est associé à un contrôle lié aux données, les paramètres sont ajoutés par le contrôle lié aux données. Dans ce cas, vous devez vous assurer que les noms des paramètres de la méthode correspondent aux noms de champ dans le contrôle lié aux données. La mise à jour est effectuée lorsque la <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> méthode est appelée, soit explicitement par votre code, ou automatiquement par un contrôle lié aux données. Le même modèle général est suivi pour <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> et <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operations. Les objets métier sont supposés effectuer ces types d’un enregistrement des opérations de données à la fois, plutôt que par lots.  
  
<a name="filtering_data"></a>   
## <a name="filtering-data"></a>Filtrage des données  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle peut filtrer les données récupérées par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété, si les données sont retournées en tant qu’un <xref:System.Data.DataSet> ou <xref:System.Data.DataTable> objet. Vous pouvez définir le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété sur une expression de filtrage à l’aide d’un format de syntaxe de chaîne et valeurs de liaison dans l’expression aux paramètres spécifiés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection.  
  
<a name="caching"></a>   
## <a name="caching"></a>Mise en cache  
 Bien que le <xref:System.Web.UI.WebControls.ObjectDataSource> ne conserve pas l’instance de l’objet métier entre plusieurs demandes, il peut mettre en cache le résultat de l’appel de la méthode identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété. Alors que les données sont mises en cache, les appels suivants à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode retourner les données mises en cache au lieu de créer l’objet métier et en appelant son <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> à l’aide de la réflexion. La mise en cache vous permet de vous évitez de créer l’objet et appelant sa méthode de données au détriment de la mémoire sur le serveur Web. Le <xref:System.Web.UI.WebControls.ObjectDataSource> met automatiquement en cache les données lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> propriété est définie sur `true`et le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> propriété est définie sur le nombre de secondes pendant lesquelles le cache stocke les données avant que le cache est ignoré. Vous pouvez également spécifier un <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> propriété et éventuellement un <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> propriété. Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle vous permet de mettre en cache tous les types de données, mais vous ne devez pas mettre en cache les objets qui conservent les ressources ou un état qui ne peut pas être partagé pour plusieurs demandes de service (par exemple, une ouverture <xref:System.Data.SqlClient.SqlDataReader> objet), car la même instance de l’objet servira à plusieurs demandes de service.  
  
<a name="features"></a>   
## <a name="features"></a>Fonctionnalités  
 Le tableau suivant décrit les fonctionnalités de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
|Fonctionnalité|Configuration requise|  
|----------------|------------------|  
|Sélection|Définir le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> méthode qui sélectionne les données de l’objet propriété le nom de l’entreprise et inclure tous les paramètres nécessaires dans le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection par programme ou à l’aide d’un contrôle lié aux données.|  
|Tri|Définir le <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> propriété le nom du paramètre dans le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> méthode qui retient les critères de tri.|  
|Filtrage|Définir le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété à une expression de filtrage et éventuellement ajouter tous les paramètres à la <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection pour filtrer les données lors de la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode est appelée. La méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété doit retourner un <xref:System.Data.DataSet> ou <xref:System.Data.DataTable>.|  
|Pagination|La pagination de source de données est prise en charge, si le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> méthode contient des paramètres pour le nombre maximal d’enregistrements à récupérer et l’index du premier enregistrement à récupérer. Les noms de ces paramètres doivent être définis le <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> et <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> propriétés, respectivement. Un contrôle lié aux données peut être en mesure d’exécuter la pagination lui-même, même si le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle ne prend pas en charge la pagination directement dans la méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété. La configuration requise pour le contrôle lié aux données être en mesure d’effectuer cela est que la méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété retourner un objet qui implémente le <xref:System.Collections.ICollection> interface.|  
|Mise à jour|Définir le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété le nom de l’entreprise (méthode) qui met à jour des données de l’objet et inclure tous les paramètres nécessaires dans le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection.|  
|Suppression|Définir le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> méthode ou fonction qui supprime des données de l’objet propriété le nom de l’entreprise et inclure tous les paramètres nécessaires dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection.|  
|Insertion|Définir le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> méthode ou fonction qui insère des données de l’objet propriété le nom de l’entreprise et inclure tous les paramètres nécessaires dans le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection.|  
|Mise en cache|Définir le <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> propriété `true`et le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> et <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> propriétés selon le comportement de mise en cache que vous souhaitez pour vos données mises en cache.|  
  
> [!NOTE]
>  Lorsque vous utilisez la <xref:System.Web.UI.WebControls.ObjectDataSource> classe pour mettre à jour ou insérer des données, les chaînes qui sont entrés au niveau du client ne sont pas convertis à partir du format de culture du client automatiquement de la culture du serveur. Par exemple, la culture du client peut spécifier DD/MM/AAAA en tant que le format de date et le format de date sur le serveur peut être MM/jj/aaaa. Dans ce cas, le 5 octobre 2009 sera entré dans un <xref:System.Web.UI.WebControls.TextBox> de contrôle en tant que 5/10/2009 mais sera interprété comme le 10 mai 2009. Le 15 octobre 2009 serait entré comme 15/10/2009 et serait rejeté comme une date non valide.  
  
<a name="data_view"></a>   
## <a name="data-view"></a>Vue de données  
 Comme avec tous les contrôles de source de données, le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle est associé à une classe de vue de source de données. Bien que le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle est l’interface utilisée par le développeur de pages pour travailler avec des données, la <xref:System.Web.UI.WebControls.ObjectDataSourceView> classe est l’interface utilisables avec des contrôles liés aux données. En outre, la <xref:System.Web.UI.WebControls.ObjectDataSourceView> classe décrit les fonctionnalités du contrôle de source de données et effectue le travail réel. Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle possède une seule associés <xref:System.Web.UI.WebControls.ObjectDataSourceView>, et il est toujours nommé `DefaultView`. Bien que le <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet est exposé par le <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> (méthode), la plupart de ses propriétés et méthodes sont encapsulées et exposées directement par le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Dans les coulisses, le <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet effectue toutes les opérations de données, y compris la récupération, insertion, mise à jour, suppression, filtrage et tri des données. Pour plus d'informations, consultez <xref:System.Web.UI.WebControls.ObjectDataSourceView>.  
  
<a name="using_linq_to_sql"></a>   
## <a name="using-linq-to-sql"></a>À l’aide de LINQ to SQL  
 Vous pouvez utiliser la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec une classe LINQ to SQL. Pour ce faire, vous définissez le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété le nom de la classe de contexte de données. Vous définissez également la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, et <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> méthodes aux méthodes dans la classe de contexte de données qui effectuent les opérations correspondantes. Vous devez créer un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événements afin d’annuler la suppression de la classe de contexte de données. Cette étape est nécessaire, car LINQ to SQL prend en charge l’exécution différée, tandis que le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle tente de supprimer le contexte de données après l’opération de sélection. Pour plus d’informations sur la création de LINQ aux classes SQL, consultez [Comment : créer des Classes LINQ to SQL dans un projet Web](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081). Pour obtenir un exemple montrant comment annuler la suppression d’une classe de contexte de données, consultez le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événement.  
  
## <a name="using-the-entity-framework"></a>À l’aide d’Entity Framework  
 Vous pouvez également utiliser le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec Entity Framework. Pour plus d’informations, consultez [à l’aide d’Entity Framework et le contrôle ObjectDataSource](http://go.microsoft.com/fwlink/?LinkId=209117).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Syntaxe déclarative  
  
```  
<asp:ObjectDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConvertNullToDBNull="True|False"  
    DataObjectTypeName="string"  
    DeleteMethod="string"  
    EnableCaching="True|False"  
    EnablePaging="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertMethod="string"  
    MaximumRowsParameterName="string"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnObjectCreated="ObjectCreated event handler"  
    OnObjectCreating="ObjectCreating event handler"  
    OnObjectDisposing="ObjectDisposing event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    runat="server"  
    SelectCountMethod="string"  
    SelectMethod="string"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    StartRowIndexParameterName="string"  
    TypeName="string"  
    UpdateMethod="string"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:ObjectDataSource>  
```  
  
   
  
## Examples  
 Un projet de site Web Visual Studio avec code source est disponible pour accompagner cette rubrique : [télécharger](http://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838).  
  
 Cette section montre un <xref:System.Web.UI.WebControls.ObjectDataSource> dans le balisage dans un .aspx page qui montre les objets métier qu’il fonctionne avec. L’exemple est la page .aspx. Il contient un <xref:System.Web.UI.WebControls.GridView> contrôle qui est lié à un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Le <xref:System.Web.UI.WebControls.ObjectDataSource> balisage de contrôle spécifie le nom de l’objet métier et le nom de la méthode d’objet métier à appeler afin de récupérer des données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 L’exemple suivant montre l’objet métier qui le <xref:System.Web.UI.WebControls.ObjectDataSource> utilise de contrôle dans la page .aspx. (Nombreuses autres <xref:System.Web.UI.WebControls.ObjectDataSource> exemples de code utilisent cet objet métier également.) L’exemple se compose de deux classes de base suivantes :  
  
-   Le `EmployeeLogic` classe est la classe de la logique métier qui le <xref:System.Web.UI.WebControls.ObjectDataSource> utilise.  
  
-   Le `NorthwindEmployee` classe définit l’objet de données qui est retourné par la `GetAllEmployees` méthode de la `EmployeeLogic` classe.  
  
 Un autre `NorthwindDataException` classe est fournie pour des raisons pratiques.  
  
 Cet ensemble d’exemples de classes fonctionne avec la base de données Northwind Traders, qui est disponible avec Microsoft SQL Server et Microsoft Access. Pour obtenir un exemple complet, vous devez compiler et utiliser ces classes avec l’exemple de page .aspx est fourni. Pour plus d’informations sur l’installation de la base de données Northwind Traders, consultez [Comment : installer Sample Databases](http://msdn.microsoft.com/library/ed1291f6-604c-4972-ae22-0345c6dea12e).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource (string typeName, string selectMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, string selectMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, selectMethod As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource(System::String ^ typeName, System::String ^ selectMethod);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.ObjectDataSource : string * string -&gt; System.Web.UI.WebControls.ObjectDataSource" Usage="new System.Web.UI.WebControls.ObjectDataSource (typeName, selectMethod)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="selectMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">Nom de la classe avec laquelle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> fonctionne.</param>
        <param name="selectMethod">Nom de la méthode ou fonction que <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> appelle pour récupérer les données.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> avec le nom du type et le nom de la méthode de récupération de données spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la `typeName` paramètre peut être un type qualifié partiellement pour le code qui se trouve dans le répertoire Bin ou App_Code ou un nom de type qualifié complet pour le code qui est enregistré dans le global assembly cache. Si vous utilisez le global assembly cache, vous devez ajouter la référence appropriée à la `assemblies` section du fichier de configuration Machine.config ou Web.config.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la durée, en secondes, de la mise en cache des données par le contrôle de source de données avant que celles-ci soient récupérées par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />.</summary>
        <value>Nombre de secondes durant lesquelles <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> met en cache le résultat de l'appel d'une propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />. La valeur par défaut est 0. La valeur ne peut pas être négative.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle prend en charge la mise en cache des données. Lors de la mise en cache de données, les appels à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> extraire des données (méthode) à partir du cache, plutôt qu’à partir de l’entreprise de l’objet qui le <xref:System.Web.UI.WebControls.ObjectDataSource> fonctionne avec. Lorsque le cache expire, le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode récupère les données à partir de l’objet métier, puis remet les données.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle met automatiquement en cache les données lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> propriété est définie sur `true` et <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> propriété est définie sur une valeur supérieure à 0, ce qui indique le nombre de secondes pendant lesquelles le cache stocke les données avant l’entrée de cache est ignoré. La valeur 0 indique un cache infiniment long.  
  
 Le cache est réglé par une combinaison de la durée et le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> paramètre. Si le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> propriété est définie sur le <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> valeur, le <xref:System.Web.UI.WebControls.ObjectDataSource> met en cache des données sur le premier appel à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode) et conserve en mémoire pour, au maximum, la quantité de temps spécifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> propriété. Les données peuvent être supprimées avant le délai d’expiration si la mémoire est nécessaire. Puis, le cache est actualisé lors de l’appel suivant à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode). Si le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> propriété est définie sur <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> , le contrôle de source de données met en cache les données sur le premier appel à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode), mais réinitialise la fenêtre de temps dont il contient le cache sur chaque appel suivant à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode). L’expiration du cache s’il n’existe aucune activité pendant une durée qui est égale à la <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> propriété depuis le dernier appel à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment un <xref:System.Web.UI.WebControls.ObjectDataSource> objet prend en charge la mise en cache. Le deuxième exemple de code montre comment implémenter une méthode de wrapper qui retourne un <xref:System.Data.DataSet> objet afin de permettre la mise en cache avec un <xref:System.Web.UI.WebControls.ObjectDataSource> objet.  
  
 L’exemple de code suivant montre comment un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle prend en charge la mise en cache. Pour activer la mise en cache, vous devez implémenter la méthode qui Récupère les données, qui sont identifiées par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété, pour retourner les données en tant qu’un <xref:System.Data.DataSet> objet. Dans cet exemple, le <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> propriété est définie sur `true`et le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> et <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> propriétés sont définies. Le <xref:System.Web.UI.WebControls.ObjectDataSource> met en cache les données retournées par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété pendant 30 secondes.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 L’exemple de code suivant montre comment implémenter une méthode de wrapper qui retourne un <xref:System.Data.DataSet> objet afin de permettre la mise en cache avec un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Dans l’implémentation de base de la `EmployeeLogic` (classe), le `GetAllEmployees` méthode retourne un <xref:System.Collections.ArrayList> objet. Au lieu de la refactorisation de l’objet complètement pour travailler avec le <xref:System.Web.UI.WebControls.ObjectDataSource> sur une page Web Forms, une méthode de wrapper nommée `GetAllEmployeesAsDataSet` est ajoutée et retourne un ensemble de `NorthwindEmployee` données comme un <xref:System.Data.DataSet>.  
  
 Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.WebControls.ObjectDataSource> classe.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le comportement d'expiration du cache qui, lorsqu'il est associé à la durée, décrit le comportement du cache utilisé par le contrôle de source de données.</summary>
        <value>Une des valeurs de <see cref="T:System.Web.UI.DataSourceCacheExpiry" />. La valeur par défaut est <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle prend en charge la mise en cache des données. Lors de la mise en cache de données, les appels à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> extraire des données (méthode) à partir du cache, plutôt qu’à partir de l’entreprise de l’objet qui le <xref:System.Web.UI.WebControls.ObjectDataSource> fonctionne avec. Lorsque le cache expire, le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode récupère les données à partir de l’objet métier, puis remet les données.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle met automatiquement en cache les données lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> propriété est définie sur `true` et <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> propriété est définie sur une valeur supérieure à 0, ce qui indique le nombre de secondes pendant lesquelles le cache stocke les données avant l’entrée de cache est ignoré. La valeur 0 indique une période de cache à l’infini long.  
  
 Le cache est réglé par une combinaison de la durée et le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> paramètre. Si le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> propriété est définie sur le <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> valeur, le <xref:System.Web.UI.WebControls.ObjectDataSource> met en cache des données sur le premier appel à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode) et conserve en mémoire pour, au maximum, la quantité de temps spécifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> propriété. Les données peuvent être supprimées avant le délai d’expiration si la mémoire est nécessaire. Puis, le cache est actualisé lors de l’appel suivant à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode). Si le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> propriété est définie sur le <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> , le contrôle de source de données met en cache les données sur le premier appel à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode), mais réinitialise la fenêtre de temps dont il contient le cache pour chaque appel suivant à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode). L’expiration du cache s’il n’existe aucune activité pendant une durée qui est égale à la <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> propriété depuis le dernier appel à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment un <xref:System.Web.UI.WebControls.ObjectDataSource> objet prend en charge le filtrage et la mise en cache. Le deuxième exemple de code montre comment implémenter une méthode de wrapper qui retourne un <xref:System.Data.DataSet> objet afin de permettre la mise en cache et le filtrage avec un <xref:System.Web.UI.WebControls.ObjectDataSource> objet.  
  
 L’exemple de code suivant montre comment un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle prend en charge le filtrage et la mise en cache. Pour activer le filtrage et la mise en cache, vous devez implémenter la méthode qui Récupère les données, qui sont identifiées par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété, pour retourner les données en tant qu’un <xref:System.Data.DataSet> objet. Dans cet exemple, la mise en cache est activée, car le `EmployeeLogic` objet retourne des données sous un <xref:System.Data.DataSet>, le <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> propriété est définie sur `true`et le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> et <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> propriétés sont définies. Le <xref:System.Web.UI.WebControls.ObjectDataSource> met en cache les données retournées par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété pendant 30 secondes.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 L’exemple de code suivant montre comment implémenter une méthode de wrapper qui retourne un <xref:System.Data.DataSet> objet afin de permettre la mise en cache et le filtrage avec un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Dans l’implémentation de base de la `EmployeeLogic` (classe), le `GetAllEmployees` méthode retourne un <xref:System.Collections.ArrayList>. Au lieu de la refactorisation de l’objet complètement pour travailler avec le <xref:System.Web.UI.WebControls.ObjectDataSource> sur une page Web Forms, une méthode de wrapper nommée `GetAllEmployeesAsDataSet` est ajoutée et retourne un ensemble de `NorthwindEmployee` données comme un <xref:System.Data.DataSet>. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.WebControls.ObjectDataSource> classe.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une dépendance de clé définie par l'utilisateur qui est liée à tous les objets du cache de données créés par le contrôle de source de données.</summary>
        <value>Clé qui identifie tous les objets du cache créés par <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> propriété peut être définie sur n’importe quelle valeur de chaîne arbitraire.  
  
 Tous les objets du cache expirent explicitement lorsque la clé expire. Cela vous permet d’invalider les entrées du cache qui sont créées par le <xref:System.Web.UI.WebControls.ObjectDataSource> à partir de votre propre page de code par programmation.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle prend en charge la mise en cache des données. Lors de la mise en cache de données, les appels à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> extraire des données (méthode) à partir du cache, plutôt qu’à partir de l’entreprise de l’objet qui le <xref:System.Web.UI.WebControls.ObjectDataSource> fonctionne avec. Lorsque le cache expire, le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode récupère les données à partir de l’objet métier, puis remet les données.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle met automatiquement en cache les données lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> propriété est définie sur `true` et <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> propriété est définie sur une valeur supérieure à 0, ce qui indique le nombre de secondes pendant lesquelles le cache stocke les données avant l’entrée de cache est ignoré. La valeur 0 indique un cache infiniment long.  
  
 Vous pouvez définir le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> propriété pour créer une dépendance entre toutes les entrées de cache qui sont créés par le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et la clé. Vous pouvez faire expirer toutes les entrées de cache par programme à tout moment en faisant expirer la clé. Expiration de la clé en utilisant le <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=nameWithType> méthode avec actuel <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> valeur comme paramètre.  
  
 Une entrée de cache unique est créée pour chaque combinaison de la <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, et <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> propriétés. Plusieurs <xref:System.Web.UI.WebControls.ObjectDataSource> contrôles peuvent utiliser les mêmes entrées de cache dans les scénarios où ils chargent les données à l’aide du type, d’une méthode et de paramètres.  
  
   
  
## Examples  
 Les trois exemples suivants montrent une page Web, une classe de page code-behind et une classe d’accès aux données qui extraient des enregistrements à partir de la table Employees de la base de données Northwind.  
  
 Le premier exemple montre une page Web qui contient deux <xref:System.Web.UI.WebControls.ObjectDataSource> contrôles, un <xref:System.Web.UI.WebControls.DropDownList> contrôle et un <xref:System.Web.UI.WebControls.DetailsView> contrôle. La première <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et le <xref:System.Web.UI.WebControls.DropDownList> contrôle sont utilisés pour extraire et afficher les noms des employés à partir de la base de données. La seconde <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et le <xref:System.Web.UI.WebControls.DetailsView> contrôle sont utilisés pour extraire et afficher l’enregistrement d’employé qui est sélectionné par l’utilisateur.  
  
 La mise en cache est activée pour le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Par conséquent, chaque enregistrement est extrait qu’une seule fois à partir de la base de données. Le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> propriété est définie sur « EmployeeDetails », mais n’importe quelle valeur de chaîne peut être utilisé comme la clé. La page Web inclut également un <xref:System.Web.UI.WebControls.Button> contrôle l’utilisateur peut cliquer pour faire expirer les données mises en cache.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 Le deuxième exemple montre un gestionnaire pour le <xref:System.Web.UI.Control.Load> événement et un gestionnaire pour le <xref:System.Web.UI.WebControls.Button.Click> événements de la <xref:System.Web.UI.WebControls.Button> contrôle. Le <xref:System.Web.UI.Control.Load> Gestionnaire d’événements crée un élément de cache avec une clé définie sur le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> valeur. Le <xref:System.Web.UI.WebControls.Button.Click> Gestionnaire d’événements supprime l’élément de cache dont la clé est égale à la <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> valeur. Lorsque l’élément de cache est supprimé, toutes les données mises en cache qui sont dépendantes de la clé a expiré.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 Le troisième exemple montre la classe d’accès aux données qui interagit avec la base de données Northwind. La classe utilise LINQ pour interroger la table Employees. L’exemple requiert une classe LINQ to SQL qui représente la base de données Northwind et la table Employees. Pour plus d’informations, consultez [Comment : créer des Classes LINQ to SQL dans un projet Web](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberSignature Language="F#" Value="member this.ConflictDetection : System.Web.UI.ConflictOptions with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine si seules les nouvelles valeurs sont passées à la méthode <see langword="Update" /> ou si les anciennes et les nouvelles valeurs sont passées à la méthode <see langword="Update" />.</summary>
        <value>Une des valeurs de <see cref="T:System.Web.UI.ConflictOptions" />. La valeur par défaut est <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété détermine si les paramètres pour les valeurs anciennes et nouvelles sont appliqués à la méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété. Par exemple, si la méthode qui est spécifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété retourne un <xref:System.Data.DataTable> contrôle avec les colonnes `Name` et `Number`et le <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> propriété est définie sur le <xref:System.Web.UI.ConflictOptions.OverwriteChanges> champ, les paramètres sont créés pour `Name` et `Number` pour le `Update` (méthode). Si le <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> propriété est définie sur le <xref:System.Web.UI.ConflictOptions.CompareAllValues> , les paramètres sont créés pour `Name`, `Number`, `original_Name`, et `original_Number`. (Le nom exact des paramètres pour les valeurs d’origine varie selon le <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> propriété.) Le <xref:System.Web.UI.WebControls.ObjectDataSource> détermine ensuite si la méthode qui est spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> comporte des paramètres qui correspondent.  
  
 Contrôle d’accès concurrentiel est une technique utilisée par les magasins de données pour contrôler comment les données sont lues et modifiées dans les magasins lorsque plusieurs clients accèdent et manipulent les mêmes données. Par exemple, un client lit les données et présente à un utilisateur, tandis que d’un autre client lit les mêmes données et les présente à un autre utilisateur. Si les deux utilisateurs mettre à jour les données et les envoient au stockage des données, un résultat inattendu peut se produire, car les deux clients risquent de fournir des valeurs différentes pour les mêmes données. Cela est considéré comme un conflit. En définissant le <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> propriété le <xref:System.Web.UI.ConflictOptions.CompareAllValues> valeur, le `Update` méthode peut ensuite comparer les valeurs anciennes et nouvelles pour la source de données d’origine pour détecter les conflits et les gérer en fonction des besoins.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
      </Docs>
    </Member>
    <Member MemberName="ConvertNullToDBNull">
      <MemberSignature Language="C#" Value="public bool ConvertNullToDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertNullToDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertNullToDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertNullToDBNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertNullToDBNull : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les valeurs <see cref="T:System.Web.UI.WebControls.Parameter" /> qui sont passées à une opération de mise à jour, d'insertion ou de suppression sont automatiquement converties de la valeur <see langword="null" /> à la valeur <see cref="F:System.DBNull.Value" /> par le contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
        <value>
          <see langword="true" />, si toutes les valeurs <see langword="null" /> d'objets <see cref="T:System.Web.UI.WebControls.Parameter" /> passés au contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> sont automatiquement converties en valeurs <see cref="F:System.DBNull.Value" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ne pas convertir `null` à la <xref:System.DBNull.Value> valeur peut engendrer des erreurs au moment de l’exécution. Utilisez le <xref:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull%2A> propriété pour indiquer si <xref:System.Web.UI.WebControls.Parameter> valeurs qui sont passées à une mise à jour, une insertion ou une opération de suppression sont automatiquement converties de `null` à la <xref:System.DBNull.Value> valeur par la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DBNull.Value" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="DataObjectTypeName">
      <MemberSignature Language="C#" Value="public string DataObjectTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataObjectTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataObjectTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataObjectTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataObjectTypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom d'une classe utilisée par le contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> pour un paramètre dans une opération de mise à jour, d'insertion ou de suppression, au lieu de passer les valeurs individuelles du contrôle lié aux données.</summary>
        <value>Nom de classe complètement ou partiellement qualifié qui identifie le type de l'objet que <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> peut utiliser comme paramètre pour une opération <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />, <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> ou <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Au lieu de spécifier plusieurs paramètres qui sont passés à la <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, et <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> méthodes, vous pouvez créer un objet qui regroupe plusieurs valeurs de champ de données. Cet objet est passé aux méthodes, au lieu de plusieurs paramètres.  
  
 Le comportement par défaut d’un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle qui est lié à un contrôle lié aux données est que le contrôle lié aux données crée un <xref:System.Web.UI.WebControls.Parameter> objet pour chaque paramètre dans la source de données. Si l’objet métier comporte de nombreux champs, la méthode qui en résulte comporte également de nombreux champs. Le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété vous permet de spécifier un type qui a une propriété pour chaque champ de données. Ensuite, au lieu de passer plusieurs paramètres à la méthode, le runtime crée un objet et définit toutes ses propriétés. Cet objet est ajouté à la collection de paramètres pour l’appel de méthode.  
  
 Le type spécifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété doit avoir un constructeur par défaut qui n’a aucun paramètre, donc la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle peut créer une instance du type. Le type doit également avoir des propriétés paramétrables qui permettent la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle pour remplir l’objet avec des valeurs qui sont passés à partir du contrôle lié aux données. La propriété nom sur le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle doivent correspondre exactement aux noms de paramètres des valeurs qui sont passés par le contrôle lié aux données.  
  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété est définie et la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle est associé à un contrôle lié aux données, les méthodes qui sont spécifiées par le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> et <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriétés doivent tous avoir un paramètre de type qui est spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété. Si le <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> propriété est définie sur le <xref:System.Web.UI.ConflictOptions.OverwriteChanges> valeur, la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété doit avoir un paramètre de type qui est spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété. Si le <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> propriété est définie sur le <xref:System.Web.UI.ConflictOptions.CompareAllValues> valeur, la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété doit avoir deux paramètres du type qui est spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété. Le premier paramètre contient les valeurs d’origine ; le deuxième paramètre contient les nouvelles valeurs.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> qui est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
   
  
## Examples  
 La section contient deux exemples de code. Le premier exemple de code montre comment implémenter un type qui combine toutes les valeurs de paramètre dans un objet, à l’aide de la <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété. Le deuxième exemple de code montre la page Web qui utilise les deux classes qui sont utilisées dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment implémenter un type qui combine toutes les valeurs de paramètre dans un objet, à l’aide de la <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété. La méthode select de la `AggregateData` classe retourne un <xref:System.Data.DataTable> objet avec deux colonnes nommées `Name` et `Number`. De même, le `NewData` classe définit deux propriétés en lecture/écriture, `Name` et `Number`. Le `Insert` méthode de la `AggregateData` classe accepte un paramètre de type `NewData`. Le `TypeName` propriété de la <xref:System.Web.UI.WebControls.ObjectDataSource> a la valeur `AggregateData` et <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété est définie sur `NewData`.  
  
 [!code-csharp[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateData.cs#2)]
 [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateData.vb#2)]  
  
 L’exemple de code suivant montre la page Web qui utilise les deux classes qui sont utilisées dans l’exemple de code précédent.  
  
 [!code-aspx-csharp[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateDataPageCS.aspx#1)]
 [!code-aspx-vb[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateDataPageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberSignature Language="F#" Value="member this.Delete : unit -&gt; int" Usage="objectDataSource.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute une opération de suppression en appelant la méthode identifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> avec tous les paramètres qui figurent dans la collection <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />.</summary>
        <returns>Valeur représentant le nombre de lignes supprimées du stockage de données sous-jacent, si la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows" /> de <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> est définie dans l'événement <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" /> ; sinon, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant du <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> opération est effectuée, le <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement pour examiner les valeurs des paramètres et effectuer tout prétraitement avant une <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> opération. Pour effectuer une opération de suppression, le <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet utilise la réflexion pour créer une instance de l’objet qui est identifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété. Il appelle ensuite la méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété, à l’aide d’associés <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> propriétés. Si les paramètres de suppression proviennent d’un contrôle lié aux données associé, le nom des paramètres est créé en fonction de la <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> propriété. Après le <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> opération se termine, le <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> événement. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> événement pour examiner les valeurs de retour, les paramètres de sortie et les exceptions et effectuer tout traitement.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> méthode délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> méthode de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
## <a name="data-bound-controls"></a>Contrôles liés aux données  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle est associé avec un contrôle lié aux données, telles que la <xref:System.Web.UI.WebControls.GridView> contrôle, il n’est pas nécessaire d’appeler le <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> méthode à partir du code de page. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> méthode est appelée directement par le contrôle lié aux données à la place.  
  
 Pour plus d’informations sur la fusion des paramètres, de la durée de vie et de la résolution de méthode, consultez <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une opération <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> est terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> événement pour examiner les valeurs d’une valeur de retournée ou paramètres de sortie, ou pour déterminer si une exception a été levée après une <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> opération est terminée. La valeur de retour, les paramètres de sortie et les propriétés de gestion des exceptions sont disponibles à partir de la <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> objet qui est associé à l’événement.  
  
 Vous pouvez utiliser la <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> objet pour retourner le nombre de lignes qui ont été supprimés de la <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> (méthode). Pour ce faire, définissez le <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> propriété. Si vous retournez le nombre de lignes supprimées à partir de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété, la valeur est disponible à partir de la <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> objet.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> objet avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Le deuxième exemple de code montre le `EmployeeLogic` classe qui est utilisée dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Initialement, le <xref:System.Web.UI.WebControls.GridView> contrôle affiche un ensemble de tous les employés, à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété pour récupérer les données à partir de la `EmployeeLogic` objet. Étant donné que le <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> propriété est définie sur `true`, le <xref:System.Web.UI.WebControls.GridView> contrôle qui affiche automatiquement une **supprimer** bouton.  
  
 Si vous cliquez sur le **supprimer** bouton, l’opération de suppression est effectuée à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété et tous les paramètres qui sont spécifiés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. Dans cet exemple de code, certaines étapes de prétraitement et de post-traitement sont également effectuées. Le `NorthwindEmployeeDeleting` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement avant que l’opération est effectuée et la `NorthwindEmployeeDeleted` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> événement une fois l’opération terminée pour effectuer la gestion des exceptions. Dans cet exemple de code, si un `NorthwindDataException` est levée, elle est gérée par le `NorthwindEmployeeDeleted` (méthode).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 Le code suivant montre l’exemple le `EmployeeLogic` classe qui est utilisée dans l’exemple de code précédent.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la méthode ou de la fonction que le contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> appelle pour supprimer des données.</summary>
        <value>Chaîne qui représente le nom de la méthode ou de la fonction que <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> utilise pour supprimer des données. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objet métier est supposé pour supprimer un enregistrement de données à la fois, plutôt que dans un lot.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Assurez-vous que les noms de paramètres est configuré pour le <xref:System.Web.UI.WebControls.ObjectDataSource> dans contrôler le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection correspondre aux noms des colonnes retournées par la méthode select.  
  
## <a name="object-lifetime"></a>Durée de vie des objets  
 La méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété peut être une méthode d’instance ou un `static` (`Shared` en Visual Basic) (méthode). Dans le cas d’une méthode d’instance, l’objet métier est créé et détruit chaque fois que le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété est appelée. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> événements fonctionnent avec l’objet métier avant le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété est appelée. Vous pouvez également gérer les <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événement est déclenché après le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété est appelée. Si l’objet métier implémente le <xref:System.IDisposable> interface, le <xref:System.IDisposable.Dispose%2A> méthode est appelée avant que l’objet est détruit. Si la méthode est un `static` (`Shared` en Visual Basic) (méthode), l’objet métier n’est jamais créé et vous ne pouvez pas gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événements.  
  
## <a name="parameter-merging"></a>Fusion des paramètres  
 Paramètres sont ajoutés à la <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection à partir de trois sources :  
  
-   À partir du contrôle lié aux données, en cours d’exécution.  
  
-   À partir de la `DeleteParameters` , élément de façon déclarative.  
  
-   À partir de la `Deleting` , méthode de façon déclarative.  
  
 Tout d’abord, tous les paramètres qui sont générés à partir de contrôles liés aux données sont ajoutés à la <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. Par exemple, si le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle est lié à un <xref:System.Web.UI.WebControls.GridView> contrôle qui comporte les colonnes `Name` et `Number`, les paramètres pour `Name` et `Number` sont ajoutés à la collection. Le nom exact du paramètre varie selon le <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> propriété. Le type de données de ces paramètres est `string`. Ensuite, les paramètres qui sont répertoriées dans le `DeleteParameters` élément sont ajoutées. Si un paramètre dans le `DeleteParameters` élément a été trouvé avec le même nom qu’un paramètre qui se trouve déjà dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection, le paramètre existant est modifiée pour correspondre au paramètre spécifié dans le `DeleteParameters` élément. En règle générale, il est utilisé pour modifier le type des données dans le paramètre. Enfin, vous pouvez ajouter par programmation et supprimer des paramètres dans le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement qui se produit avant la <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> méthode est exécutée. La méthode est résolue une fois que les paramètres sont fusionnés. Résolution de la méthode est décrite dans la section suivante.  
  
## <a name="method-resolution"></a>Résolution de méthode  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> méthode est appelée, les champs de données à partir du contrôle lié aux données, les paramètres qui ont été créés de façon déclarative dans le `DeleteParameters` élément et les paramètres qui ont été ajoutés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> Gestionnaire d’événements sont fusionnés. (Pour plus d’informations, consultez la section précédente.) Le <xref:System.Web.UI.WebControls.ObjectDataSource> objet tente alors de trouver une méthode à appeler. Tout d’abord, il recherche une ou plusieurs méthodes portant le nom spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété. Si aucune correspondance n’est trouvée, une <xref:System.InvalidOperationException> exception est levée. Si une correspondance est trouvée, elle recherche de correspondance des noms de paramètre. Par exemple, supposons que le type spécifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété possède deux méthodes nommées `DeleteARecord`. Un `DeleteARecord` a un paramètre, `ID`et l’autre `DeleteARecord` a deux paramètres, `Name` et `Number`. Si le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection n'a qu’un seul paramètre nommé `ID`, le `DeleteARecord` méthode avec uniquement le `ID` paramètre est appelé. Le type du paramètre n’est pas vérifié dans la résolution des méthodes. L’ordre des paramètres n’a pas d’importance.  
  
 Si le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété est définie, la méthode est résolue dans une autre manière. Le <xref:System.Web.UI.WebControls.ObjectDataSource> recherche une méthode portant le nom spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété qui accepte un paramètre de type qui est spécifiée dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété. Dans ce cas, le nom du paramètre n’a pas d’importance.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> objet avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Le deuxième exemple de code montre le `EmployeeLogic` classe qui est utilisée dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Initialement, le <xref:System.Web.UI.WebControls.GridView> contrôle affiche un ensemble de tous les employés, à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété pour récupérer les données à partir de la `EmployeeLogic` objet. Étant donné que le <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> propriété est définie sur `true`, le <xref:System.Web.UI.WebControls.GridView> contrôle qui affiche automatiquement une **supprimer** bouton.  
  
 Si vous cliquez sur le **supprimer** bouton, l’opération de suppression est effectuée à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété et tous les paramètres qui sont spécifiés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. Dans cet exemple de code, certaines étapes de prétraitement et de post-traitement sont également effectuées. Le `NorthwindEmployeeDeleting` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement avant que l’opération est effectuée et le `NorthwindEmployeeDeleted` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> événement une fois l’opération terminée pour effectuer la gestion des exceptions. Dans cet exemple, si un `NorthwindDataException` est levée, elle est gérée par le `NorthwindDataException` déléguer.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 Le code suivant montre l’exemple le `EmployeeLogic` classe qui est utilisée dans l’exemple de code précédent.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres qui contient les paramètres utilisés par la méthode <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> qui contient les paramètres utilisés par la méthode <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les noms et types des paramètres qui sont contenus dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection doit correspondre les noms et types des paramètres dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> signature de méthode. Les noms de paramètres sont affectés par la <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> propriété et respectent la casse. Les paramètres de la collection dépendent des données qui se trouve dans le contrôle lié aux données, les paramètres spécifiés de manière déclarative et les paramètres qui sont ajoutés par programmation. Pour plus d’informations, consultez « Paramètre fusion » dans <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> et [à l’aide des paramètres avec le contrôle ObjectDataSource](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4).  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> récupère de la propriété le <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> propriété qui est contenue par le <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Pour plus d’informations sur la fusion des paramètres, de la durée de vie et de la résolution de méthode, consultez <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> objet avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Le deuxième exemple de code montre le `EmployeeLogic` classe qui est utilisée dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Initialement, le <xref:System.Web.UI.WebControls.GridView> contrôle affiche un ensemble de tous les employés, à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété pour récupérer les données à partir de la `EmployeeLogic` objet. Étant donné que le <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> propriété est définie sur `true`, le <xref:System.Web.UI.WebControls.GridView> contrôle qui affiche automatiquement une **supprimer** bouton.  
  
 Si vous cliquez sur le **supprimer** bouton, le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement est appelé avec deux paramètres. Un seul paramètre, `EmpID`, provient de la <xref:System.Web.UI.WebControls.DataGrid> contrôler et est basé sur le <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> propriété. L’autre paramètre provient déclaratif <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> propriété. Le `EmployeeLogic` classe surcharges le `DeleteEmployee` (méthode). Une surcharge prend un `NorthwindEmployee` paramètre et l’autre prend un <xref:System.Int32> paramètre nommé `anID`. Dans le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement, les entrées dans le <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> propriété sont ajustées pour n'inclure qu’un seul paramètre nommé `anID` avec la valeur de `original_EmpID`. Lorsque le Gestionnaire d’événements existe, la mise en correspondance `DeleteEmployee` méthode est appelée.  
  
 L’exemple de code suivant montre la page Web qui affiche le <xref:System.Web.UI.WebControls.DataGrid> contrôle et gère le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/objds11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/objds11vb.aspx#1)]  
  
 Le code suivant montre l’exemple le `EmployeeLogic` classe qui est utilisée dans l’exemple de code précédent.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/northwindemployee11.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/northwindemployee11.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement pour effectuer une initialisation supplémentaire qui est spécifique à votre application, pour valider les valeurs de paramètres ou pour modifier les valeurs de paramètre avant le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle effectue l’opération de suppression. Les paramètres sont disponibles en tant qu’un <xref:System.Collections.IDictionary> collection qui est accessible par le <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> propriété, qui est exposée par le <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> objet.  
  
 Vous pouvez annuler l’opération de suppression en définissant le <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> à `true`.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> objet avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Le deuxième exemple de code montre le `EmployeeLogic` classe qui est utilisée dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Initialement, le <xref:System.Web.UI.WebControls.GridView> contrôle affiche un ensemble de tous les employés, à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété pour récupérer les données à partir de la `EmployeeLogic` objet. Étant donné que le <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> propriété est définie sur `true`, le <xref:System.Web.UI.WebControls.GridView> contrôle qui affiche automatiquement une **supprimer** bouton.  
  
 Si vous cliquez sur le **supprimer** bouton, l’opération de suppression est effectuée à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété et tous les paramètres qui sont spécifiés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. Dans cet exemple de code, certaines étapes de prétraitement et de post-traitement sont également effectuées. Le `NorthwindEmployeeDeleting` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement avant que l’opération est effectuée et le `NorthwindEmployeeDeleted` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> événement une fois l’opération terminée pour effectuer la gestion des exceptions. Dans cet exemple de code, si un `NorthwindDataException` est levée, elle est gérée par le `NorthwindEmployeeDeleted` (méthode).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 Le code suivant montre l’exemple le `EmployeeLogic` classe qui est utilisée dans l’exemple de code précédent.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la mise en cache de données du contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> est activée.</summary>
        <value>
          <see langword="true" /> si la mise en cache est activée pour le contrôle de source de données ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle prend en charge la mise en cache des données. Lors de la mise en cache de données, les appels à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode récupérer des données à partir du cache plutôt que <xref:System.Web.UI.WebControls.ObjectDataSource> création d’une instance de l’objet métier et en appelant sa méthode de données. Lorsque le cache expire, le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode récupère les données à partir de l’objet métier, puis remet les données.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle met automatiquement en cache les données lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> propriété est définie sur `true` et <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> propriété est définie sur une valeur supérieure à 0, ce qui indique le nombre de secondes pendant lesquelles le cache stocke les données avant l’entrée de cache est ignoré. La valeur 0 indique un cache infiniment long.  
  
   
  
## Examples  
 Les trois exemples suivants montrent une page Web, une classe de page code-behind et une classe d’accès aux données qui extraient des enregistrements à partir de la table Employees de la base de données Northwind.  
  
 Le premier exemple montre une page Web qui contient deux <xref:System.Web.UI.WebControls.ObjectDataSource> contrôles, un <xref:System.Web.UI.WebControls.DropDownList> contrôle et un <xref:System.Web.UI.WebControls.DetailsView> contrôle. La première <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et le <xref:System.Web.UI.WebControls.DropDownList> contrôle sont utilisés pour extraire et afficher les noms des employés à partir de la base de données. La seconde <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et le <xref:System.Web.UI.WebControls.DetailsView> contrôle sont utilisés pour extraire et afficher l’enregistrement d’employé qui est sélectionné par l’utilisateur.  
  
 La mise en cache est activée pour le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Par conséquent, chaque enregistrement est extrait qu’une seule fois à partir de la base de données. Le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> propriété est définie sur « EmployeeDetails », mais n’importe quelle valeur de chaîne peut être utilisé comme la clé. La page Web inclut également un <xref:System.Web.UI.WebControls.Button> contrôle l’utilisateur peut cliquer pour faire expirer les données mises en cache.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 Le deuxième exemple montre un gestionnaire pour le <xref:System.Web.UI.Control.Load> événement et un gestionnaire pour le <xref:System.Web.UI.WebControls.Button.Click> événements de la <xref:System.Web.UI.WebControls.Button> contrôle. Le <xref:System.Web.UI.Control.Load> Gestionnaire d’événements crée un élément de cache avec une clé définie sur le <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> valeur. Le <xref:System.Web.UI.WebControls.Button.Click> Gestionnaire d’événements supprime l’élément de cache dont la clé est égale à la <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> valeur. Lorsque l’élément de cache est supprimé, toutes les données mises en cache qui sont dépendantes de la clé a expiré.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 Le troisième exemple montre la classe d’accès aux données qui interagit avec la base de données Northwind. La classe utilise LINQ pour interroger la table Employees. L’exemple requiert une classe LINQ to SQL qui représente la base de données Northwind et la table Employees. Pour plus d’informations, consultez [Comment : créer des Classes LINQ to SQL dans un projet Web](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">La propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" /> a la valeur <see langword="true" /> lorsque la méthode spécifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> retourne <see cref="T:System.Data.Common.DbDataReader" />.</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="EnablePaging">
      <MemberSignature Language="C#" Value="public bool EnablePaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePaging" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePaging As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePaging { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePaging : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le contrôle de source de données prend en charge la pagination du groupe de données qu'il récupère.</summary>
        <value>
          <see langword="true" /> si le contrôle de source de données prend en charge la pagination des données qu'il récupère ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La pagination par le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle est géré en définissant le <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>, et <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriétés de la <xref:System.Web.UI.WebControls.ObjectDataSource> et définition d’une méthode de sélection dans l’objet métier avec les paramètres appropriés. Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> propriété est définie sur `true`, le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection inclut deux paramètres supplémentaires pour la première ligne qui est demandée et le nombre de lignes qui sont demandées. Ces deux paramètres sont nommés comme défini par le <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> et <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> propriétés. Le `Select` méthode doit retourner le nombre demandé de lignes, en commençant à l’index spécifié. Étant donné que les données ne peuvent pas diviser uniformément par la taille de page, la dernière page peut contenir moins de lignes. Par conséquent, le nombre de lignes demandé est réellement le nombre maximal de lignes qui sont retournées.  
  
 Lorsque la pagination est activée sur le contrôle lié aux données associé, le contrôle lié aux données appelle la `Select` méthode avec l’index de début et le nombre de lignes qui sont nécessaires. En outre, si la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> est définie, le contrôle lié aux données appelle la méthode avant de restituer les contrôles de pagination. Par exemple, si un <xref:System.Web.UI.WebControls.GridView> contrôle la pagination est activée avec une taille de page de 5 et la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété retourne 20, seules les 4 pages sont affichées dans le pagineur.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet.  
  
   
  
## Examples  
 Les trois exemples suivants montrent une page Web, une classe de page code-behind et une classe d’accès aux données qui permettent aux utilisateurs de choisir le nombre d’enregistrements est affiché dans la page.  
  
 La page Web contient un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle dont <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> propriété est définie sur `true`. Le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété est définie sur le nom d’une méthode qui retourne le nombre total d’enregistrements dans la requête. Le <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> propriété et le <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> sont définies pour les noms des paramètres qui sont utilisés dans la méthode Select. La page contient également un <xref:System.Web.UI.WebControls.DropDownList> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 Le deuxième exemple montre un gestionnaire pour le <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> événements de la <xref:System.Web.UI.WebControls.DropDownList> contrôle. Le code dans le gestionnaire affecte le <xref:System.Web.UI.WebControls.GridView.PageSize%2A> propriété à la sélection de l’utilisateur.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 Le troisième exemple montre la classe d’accès aux données qui Récupère des données à partir de la table Customers. Il inclut une méthode nommée `GetSubsetOfEmployees`, qui est assignée à la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. L’exemple inclut également une méthode nommée `GetEmployeeCount`, qui est assignée à la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. La classe utilise LINQ pour interroger la table Customers. L’exemple requiert une classe LINQ to SQL qui représente la base de données Northwind et la table Customers. Pour plus d’informations, consultez [Comment : créer des Classes LINQ to SQL dans un projet Web](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterExpression : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une expression de filtrage qui est appliquée lorsque la méthode spécifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> est appelée.</summary>
        <value>Chaîne qui représente une expression de filtrage appliquée lorsque les données sont récupérées à l'aide de la méthode ou fonction identifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle prend en charge le filtrage des données uniquement lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode retourne un <xref:System.Data.DataSet> ou <xref:System.Data.DataTable> objet.  
  
 La syntaxe qui est utilisée pour le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété est une expression de chaîne de style de format. La syntaxe d’expression de filtre est la même syntaxe qui est acceptée par le <xref:System.Data.DataColumn.Expression%2A> propriété. Si vous ajoutez des paramètres à la <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection, vous pouvez également inclure des espaces réservés de chaîne de format. Par exemple, inclure `"{0}"` dans l’expression à substituer aux valeurs de paramètre. Les espaces réservés sont remplacés selon l’index du paramètre dans le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection.  
  
 Vous pouvez inclure des paramètres dans le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété. Si le type du paramètre est un type chaîne ou un caractère, placez le paramètre entre guillemets simples. Guillemets ne sont pas requis si le paramètre est un type numérique.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection contient les paramètres qui sont évalués pour les espaces réservés qui sont trouvent dans le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
> [!NOTE]
>  Vous devez valider toute valeur de paramètre de filtre que vous recevez à partir du client. Le runtime substitue simplement la valeur du paramètre dans l’expression de filtre et s’applique à la <xref:System.Data.DataSet> ou <xref:System.Data.DataTable> objet qui est retourné par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode). Si vous utilisez le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété en tant que mesure de sécurité pour limiter le nombre d’éléments qui sont retournés, vous devez valider les valeurs de paramètre avant le filtrage.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment afficher les données filtrées à l’aide un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle à récupérer des données à partir d’un objet métier de couche intermédiaire et un <xref:System.Web.UI.WebControls.GridView> contrôle pour afficher les résultats. Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle peut filtrer les données uniquement lorsque la méthode qui Récupère les données récupère comme un <xref:System.Data.DataSet> ou <xref:System.Data.DataTable> objet. Pour cette raison, le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété identifie une méthode d’objet métier qui Récupère des données comme un <xref:System.Data.DataSet>.  
  
 L’exemple de code se compose d’un <xref:System.Web.UI.WebControls.TextBox> contrôle, un <xref:System.Web.UI.WebControls.GridView> contrôle, le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et un **envoyer** bouton. Par défaut, le <xref:System.Web.UI.WebControls.TextBox> est rempli avec le nom d’un des employés Northwind Traders. Le <xref:System.Web.UI.WebControls.GridView> affiche des informations sur l’employé qui est identifié par le nom dans la <xref:System.Web.UI.WebControls.TextBox>. Pour récupérer des données sur un autre employé, entrez le nom complet de l’employé dans le <xref:System.Web.UI.WebControls.TextBox>, puis cliquez sur le **envoyer** bouton.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété spécifie une expression qui est utilisée pour filtrer les données récupérées par la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété. Il utilise des espaces réservés de paramètre qui sont comparés aux paramètres qui sont contenus dans le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection. Dans cet exemple, l’espace réservé de paramètre est limité par des guillemets simples, car le type du paramètre est un type de chaîne qui peut contenir des espaces. Si le type du paramètre est un type numérique ou date, utilisation de guillemets ne sont pas requis.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte une entrée d'utilisateur, ce qui constitue une menace potentielle pour la sécurité. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 L’exemple de code suivant fournit un exemple d’un objet métier de couche intermédiaire qui utilise l’exemple de code précédent. L’exemple de code se compose de deux classes de base :  
  
-   Le `EmployeeLogic` (classe), qui est une classe qui encapsule la logique métier.  
  
-   Le `NorthwindEmployee` (classe), qui est une classe de modèle qui contient uniquement les fonctionnalités de base qui sont requis pour charger et rendre persistantes des données à partir de la couche données.  
  
 Par souci de simplicité, le `EmployeeLogic` classe crée un ensemble statique de données, au lieu de récupérer les données d’une couche de données. Il est également utile pour cet exemple, étant donné que l’exemple s’appuie sur vous pour fournir le nom complet d’un employé de Northwind Traders pour illustrer le filtrage. Pour obtenir un exemple complet, vous devez compiler et utiliser ces classes avec les exemples de code Web Forms qui sont fournis.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">La propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> a été définie et la méthode <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> ne retourne pas <see cref="T:System.Data.DataSet" /> ou <see cref="T:System.Data.DataTable" />.</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As ObjectDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberSignature Language="F#" Value="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " Usage="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération de filtre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering> événement pour effectuer des opérations de validation sur les valeurs de paramètre de filtre avant du <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle effectue une opération de filtre. Vous pouvez annuler l’opération sélectionnée en définissant le <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> à `true`. L’événement est déclenché uniquement si le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété est définie.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering?displayProperty=nameWithType> événement délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=nameWithType> événements de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> qui est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
> [!IMPORTANT]
>  Vous devez valider toute valeur de paramètre de filtre que vous recevez à partir du client. Le runtime substitue simplement la valeur du paramètre dans l’expression de filtre et s’applique à la <xref:System.Data.DataSet> ou <xref:System.Data.DataTable> objet qui est retourné par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode). Si vous utilisez le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété en tant que mesure de sécurité pour limiter le nombre d’éléments qui sont retournés, vous devez valider les valeurs de paramètre avant le filtrage.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de paramètres qui sont associés aux espaces réservés des paramètres dans la chaîne <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> qui contient un jeu de paramètres associé à n'importe quel espace réservé de paramètre trouvé dans la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle prend en charge le filtrage des données uniquement lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode retourne un <xref:System.Data.DataSet> ou <xref:System.Data.DataTable> objet.  
  
 La syntaxe qui est utilisée pour le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> est une expression de chaîne de style de format. La syntaxe d’expression de filtre est la même syntaxe qui est acceptée par le <xref:System.Data.DataColumn.Expression%2A> propriété. Si vous ajoutez des paramètres à la <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection, vous pouvez également inclure des espaces réservés de chaîne de format. Par exemple, inclure `"{0}"` dans l’expression à substituer aux valeurs de paramètre. Les espaces réservés sont remplacés selon l’index du paramètre dans le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection.  
  
 Vous pouvez inclure des paramètres dans le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété. Si le paramètre est un type chaîne ou un caractère, placez le paramètre entre guillemets simples. Guillemets ne sont pas requis si le paramètre est un type numérique.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> récupère de la propriété le <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> propriété qui est contenue par le <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment afficher les données filtrées à l’aide un <xref:System.Web.UI.WebControls.ObjectDataSource> objet pour récupérer des données à partir d’un objet métier de couche intermédiaire et un <xref:System.Web.UI.WebControls.GridView> contrôle pour afficher les résultats. Le deuxième exemple de code fournit un exemple d’un objet métier de couche intermédiaire qui est utilisé dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment afficher les données filtrées à l’aide un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle à récupérer des données à partir d’un objet métier de couche intermédiaire et un <xref:System.Web.UI.WebControls.GridView> contrôle pour afficher les résultats. Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle peut filtrer les données uniquement lorsque la méthode qui Récupère les données récupère comme un <xref:System.Data.DataSet> ou <xref:System.Data.DataTable> objet. Pour cette raison, le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété identifie une méthode d’objet métier qui Récupère des données comme un <xref:System.Data.DataSet>.  
  
 L’exemple de code se compose d’un <xref:System.Web.UI.WebControls.TextBox> contrôle, un <xref:System.Web.UI.WebControls.GridView> contrôle, le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et un **envoyer** bouton. Par défaut, le <xref:System.Web.UI.WebControls.TextBox> est rempli avec le nom d’un des employés Northwind Traders. Le <xref:System.Web.UI.WebControls.GridView> affiche des informations sur l’employé qui est identifié par le nom dans la <xref:System.Web.UI.WebControls.TextBox>. Pour récupérer des données sur un autre employé, dans le <xref:System.Web.UI.WebControls.TextBox>, entrez le nom complet de l’employé, puis cliquez sur le **envoyer** bouton.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété spécifie une expression qui est utilisée pour filtrer les données récupérées par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété. Il utilise des espaces réservés de paramètre qui sont comparés aux paramètres qui sont contenus dans le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection. Dans cet exemple, l’espace réservé de paramètre est limité par des guillemets simples, car le type du paramètre est un type de chaîne qui peut contenir des espaces. Si le type du paramètre est un type numérique ou date, utilisation de guillemets ne sont pas requis. Le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection contient un seul paramètre, un <xref:System.Web.UI.WebControls.FormParameter> objet qui est lié à la <xref:System.Web.UI.WebControls.TextBox> contrôle.  
  
> [!IMPORTANT]
>  Vous devez valider toute valeur de paramètre de filtre que vous recevez à partir du client. Le runtime substitue simplement la valeur du paramètre dans l’expression de filtre et s’applique à la <xref:System.Data.DataView> objet qui est retourné par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode). Si vous utilisez le <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété en tant que mesure de sécurité pour limiter le nombre d’éléments qui sont retournés, vous devez valider les valeurs de paramètre avant le filtrage.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 L’exemple de code suivant fournit un exemple d’un objet métier de couche intermédiaire qui utilise l’exemple de code précédent. L’exemple de code se compose de deux classes de base :  
  
-   Le `EmployeeLogic` (classe), qui est une classe qui encapsule la logique métier.  
  
-   Le `NorthwindEmployee` (classe), qui est une classe de modèle qui contient uniquement les fonctionnalités de base qui sont requis pour charger et rendre persistantes des données à partir de la couche données.  
  
 Par souci de simplicité, le `EmployeeLogic` classe crée un ensemble statique de données, au lieu de récupérer les données d’une couche de données. Il est également utile pour cet exemple, étant donné que l’exemple s’appuie sur vous pour fournir le nom complet d’un employé de Northwind Traders pour illustrer le filtrage. Pour obtenir un exemple complet, vous devez compiler et utiliser ces classes avec les exemples de code Web Forms qui sont fournis.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">La propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> a été définie et la méthode <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> ne retourne pas <see cref="T:System.Data.DataSet" /> ou <see cref="T:System.Data.DataTable" />.</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="objectDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">Nom de l'affichage à récupérer. Comme <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> ne prend en charge qu’une seule vue, <c>viewName</c> est ignoré.</param>
        <summary>Récupère la vue de source de données associée au contrôle de source de données.</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> nommé <see langword="DefaultView" /> qui est associé au <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle prend en charge la vue de source de données qu’une seule. Comme avec tous les objets de vue de source de données, le <xref:System.Web.UI.WebControls.ObjectDataSourceView> qui est associé avec les données de contrôle de code source définit ses fonctions, effectue tout le travail qui est nécessaire pour récupérer des données à partir du stockage de données sous-jacent et exécute des opérations telles que le tri, Insertion, suppression et la mise à jour.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> méthode est destinée à être appelée par les contrôles liés aux données, pas par le code de page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le <paramref name="viewName" /> spécifié est <see langword="null" /> ou une valeur autre que <see langword="DefaultView" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="objectDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Récupère une collection des noms qui représentent la liste d'objets de vue associée à l'objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> contenant les noms des affichages associés au <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle prend en charge qu’une seule vue, nommée `DefaultView`, sur ses données sous-jacentes. Le <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A> méthode retourne une collection d’élément de ce nom de vue.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A> méthode est destinée à être appelée par les contrôles liés aux données, pas par le code de page.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberSignature Language="F#" Value="member this.Insert : unit -&gt; int" Usage="objectDataSource.Insert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute une opération d'insertion en appelant la méthode qui est identifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> et tous les paramètres dans la collection <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />.</summary>
        <returns>Valeur qui représente le nombre de lignes insérées dans le stockage de données sous-jacent.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant du <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> opération est effectuée, le <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> événement. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> événement pour examiner les valeurs des paramètres et effectuer tout prétraitement avant une <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> opération. Pour effectuer une opération d’insertion, le <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet utilise la réflexion pour créer une instance de l’objet qui est identifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété. Il appelle ensuite la méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété, à l’aide d’associés <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> propriétés. Après le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> opération se termine, le <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> événement. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> événement pour examiner les valeurs de retour, les paramètres de sortie et les exceptions et effectuer tout traitement.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> méthode délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> méthode de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> qui est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Pour plus d’informations sur la fusion des paramètres, de la durée de vie et de la résolution de méthode, consultez <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.  
  
## <a name="data-bound-controls"></a>Contrôles liés aux données  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource> objet est associé un contrôle lié aux données, telles que la <xref:System.Web.UI.WebControls.GridView> contrôle, il n’est pas nécessaire d’appeler le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> méthode à partir du code de page. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> méthode est appelée directement par le contrôle lié aux données à la place.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une opération <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> est terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> événement pour examiner les valeurs d’une valeur de retournée ou paramètres de sortie, ou pour déterminer si une exception a été levée après une <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> opération est terminée. La valeur de retour, les paramètres de sortie et les propriétés de gestion des exceptions sont disponibles à partir de la <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> objet qui est associé à l’événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> événement pour effectuer une initialisation supplémentaire qui est spécifique à votre application, pour valider les valeurs de paramètres ou pour modifier les valeurs de paramètre avant le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle effectue l’opération d’insertion. Les paramètres sont disponibles en tant qu’un <xref:System.Collections.IDictionary> collection qui est accessible par le <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> propriété, qui est exposée par le <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> objet.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> objet avec un objet métier et un <xref:System.Web.UI.WebControls.DetailsView> contrôle pour insérer des données. Le deuxième exemple de code fournit un exemple de l’objet métier de couche intermédiaire qui est utilisé dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.DetailsView> contrôle pour insérer des données. Initialement, le <xref:System.Web.UI.WebControls.DetailsView> affiche une nouvelle `NorthwindEmployee` enregistrements, ainsi que de généré automatiquement **insérer** bouton. Une fois que vous entrez des données dans les champs de la <xref:System.Web.UI.WebControls.DetailsView> contrôler, cliquez sur le **insérer** bouton. Le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété identifie la méthode qui exécute l’opération d’insertion.  
  
 Dans cet exemple, le `UpdateEmployeeInfo` méthode est utilisée pour effectuer une insertion ; Toutefois, il requiert un `NorthwindEmployee` paramètre pour insérer les données. Pour cette raison, la collection de chaînes qui le <xref:System.Web.UI.WebControls.DetailsView> contrôle passe automatiquement n’est pas suffisant. Le `NorthwindEmployeeInserting` délégué est un <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> objet qui gère la <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> événements et vous permet de manipuler les paramètres d’entrée avant la <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> revenu de l’opération. Étant donné que le `UpdateEmployeeInfo` méthode requiert un `NorthwindEmployee` lors de l’objet en tant que paramètre, un est créé à l’aide de la collection de chaînes et est ajouté à la <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection à l’aide d’un nom de paramètre (`ne`) que la méthode attend. Vous pouvez exécuter des étapes comme celles-ci lors de l’utilisation d’un objet de couche intermédiaire existant comme source de données avec les types et méthodes qui ne sont pas conçus spécifiquement pour une utilisation avec le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> opération est effectuée, la méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété est appelée. Si le `Insert` méthode de l’objet a une signature de méthode qui inclut des paramètres, le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection doit contenir un paramètre avec des noms qui correspondent aux paramètres de la signature de méthode pour le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> méthode se termine avec succès.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 L’exemple de code suivant fournit un exemple d’un objet métier de couche intermédiaire qui utilise l’exemple de code précédent. L’exemple de code se compose de deux classes de base :  
  
-   Le `EmployeeLogic` (classe), qui est une classe sans état qui encapsule la logique métier.  
  
-   Le `NorthwindEmployee` (classe), qui est une classe de modèle qui contient uniquement les fonctionnalités de base qui sont requis pour charger et rendre persistantes des données à partir de la couche données.  
  
 Un autre `NorthwindDataException` classe est fournie pour des raisons pratiques. Pour obtenir un exemple complet, vous devez compiler et utiliser ces classes. Le `UpdateEmployeeInfo` méthode n’est pas complètement implémentée, afin de vous ne serez pas insérer des données dans la base de données Northwind Traders, lorsque vous testez cet exemple.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la méthode ou de la fonction que le contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> appelle pour insérer des données.</summary>
        <value>Chaîne qui représente le nom de la méthode ou de la fonction que <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> utilise pour insérer des données. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objet métier est supposé pour insérer un enregistrement de données à la fois, plutôt que dans un lot.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> objet.  
  
## <a name="object-lifetime"></a>Durée de vie des objets  
 La méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété peut être une méthode d’instance ou un `static` (`Shared` en Visual Basic) (méthode). Dans le cas d’une méthode d’instance, l’objet métier est créé et détruit chaque fois que la méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété est appelée. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> événements fonctionnent avec l’objet métier avant le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété est appelée. Vous pouvez également gérer les <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événement est déclenché après la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété est appelée. Si l’objet métier implémente le <xref:System.IDisposable> interface, le <xref:System.IDisposable.Dispose%2A> méthode est appelée avant que l’objet est détruit. Si la méthode est `static` (`Shared` en Visual Basic), l’objet métier n’est jamais créé et vous ne pouvez pas gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événements.  
  
## <a name="parameter-merging"></a>Fusion des paramètres  
 Paramètres sont ajoutés à la <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection à partir de trois sources :  
  
-   À partir du contrôle lié aux données, en cours d’exécution.  
  
-   À partir de la `InsertParameters` , élément de façon déclarative.  
  
-   À partir de la `Inserting` (méthode), par programmation.  
  
 Tout d’abord, tous les paramètres qui sont générés à partir de contrôles liés aux données sont ajoutés à la <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection. Par exemple, si le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle est lié à un <xref:System.Web.UI.WebControls.GridView> contrôle qui comporte les colonnes `Name` et `Number`, les paramètres pour `Name` et `Number` sont ajoutés à la collection. Le type de données de ces paramètres est `string`. Ensuite, les paramètres qui sont répertoriées dans le `InsertParameters` élément sont ajoutées. Si un paramètre dans le `InsertParameters` élément a été trouvé avec le même nom qu’un paramètre qui se trouve déjà dans le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection, le paramètre existant est modifiée pour correspondre au paramètre spécifié dans le `InsertParameters` élément. En règle générale, il est utilisé pour modifier le type des données dans le paramètre. Enfin, vous pouvez ajouter par programmation et supprimer des paramètres dans le <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> événement qui se produit avant la <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> méthode est exécutée. La méthode est résolue une fois que les paramètres sont fusionnés. Résolution de la méthode est décrite dans la section suivante.  
  
> [!IMPORTANT]
>  Vous devez valider toute valeur de paramètre que vous recevez à partir du client. Le runtime substitue simplement la valeur du paramètre dans le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété.  
  
## <a name="method-resolution"></a>Résolution de méthode  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> méthode est appelée, les champs de données à partir du contrôle lié aux données, les paramètres qui ont été créés de façon déclarative dans le `InsertParameters` élément et les paramètres qui ont été ajoutés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> Gestionnaire d’événements sont fusionnés. (Pour plus d’informations, consultez la section précédente.) Le <xref:System.Web.UI.WebControls.ObjectDataSource> objet tente alors de trouver une méthode à appeler. Tout d’abord, il recherche une ou plusieurs méthodes portant le nom spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété. Si aucune correspondance n’est trouvée, une <xref:System.InvalidOperationException> exception est levée. Si une correspondance est trouvée, elle recherche de correspondance des noms de paramètre. Par exemple, un type qui est spécifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété possède deux méthodes nommées `InsertARecord`. Un `InsertARecord` a un paramètre, `ID`et l’autre `InsertARecord` a deux paramètres, `Name` et `Number`. Si le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection n'a qu’un seul paramètre nommé `ID`, le `InsertARecord` méthode avec uniquement le `ID` paramètre est appelé. Le type du paramètre n’est pas vérifié dans la résolution des méthodes. L’ordre des paramètres n’a pas d’importance.  
  
 Si le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété est définie, la méthode est résolue dans une autre manière. Le <xref:System.Web.UI.WebControls.ObjectDataSource> recherche une méthode portant le nom spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété qui accepte un paramètre de type qui est spécifiée dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété. Dans ce cas, le nom du paramètre n’a pas d’importance.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> objet avec un objet métier et un <xref:System.Web.UI.WebControls.DetailsView> contrôle pour insérer des données. Le deuxième exemple de code fournit un exemple de l’objet métier de couche intermédiaire qui est utilisé dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.DetailsView> contrôle pour insérer des données. Initialement, le <xref:System.Web.UI.WebControls.DetailsView> affiche une nouvelle `NorthwindEmployee` enregistrements, ainsi que de généré automatiquement **insérer** bouton. Une fois que vous entrez des données dans les champs de la <xref:System.Web.UI.WebControls.DetailsView> contrôler, cliquez sur le **insérer** bouton. Le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété identifie la méthode qui exécute l’opération d’insertion.  
  
 Dans cet exemple, le `UpdateEmployeeInfo` méthode est utilisée pour effectuer une insertion ; Toutefois, il requiert un `NorthwindEmployee` paramètre pour insérer les données. Pour cette raison, la collection de chaînes qui le <xref:System.Web.UI.WebControls.DetailsView> contrôle passe automatiquement n’est pas suffisant. Le `NorthwindEmployeeInserting` délégué est un <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> objet qui gère la <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> événements et vous permet de manipuler les paramètres d’entrée avant la <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> revenu de l’opération. Étant donné que le `UpdateEmployeeInfo` méthode requiert un `NorthwindEmployee` lors de l’objet en tant que paramètre, un est créé à l’aide de la collection de chaînes et est ajouté à la <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection à l’aide d’un nom de paramètre (`ne`) que la méthode attend. Vous pouvez exécuter des étapes comme celles-ci lors de l’utilisation d’un objet de couche intermédiaire existant comme source de données avec les types et méthodes qui ne sont pas conçus spécifiquement pour une utilisation avec le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> opération est effectuée, la méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété est appelée. Si le `Insert` méthode de l’objet a une signature de méthode qui inclut des paramètres, le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection doit contenir un paramètre avec des noms qui correspondent aux paramètres de la signature de méthode pour le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> méthode se termine avec succès.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 L’exemple de code suivant fournit un exemple d’un objet métier de couche intermédiaire qui utilise l’exemple de code précédent. L’exemple de code se compose de deux classes de base :  
  
-   Le `EmployeeLogic` (classe), qui est une classe sans état qui encapsule la logique métier.  
  
-   Le `NorthwindEmployee` (classe), qui est une classe de modèle qui contient uniquement les fonctionnalités de base qui sont requis pour charger et rendre persistantes des données à partir de la couche données.  
  
 Un autre `NorthwindDataException` classe est fournie pour des raisons pratiques. Pour obtenir un exemple complet, vous devez compiler et utiliser ces classes. Le `UpdateEmployeeInfo` méthode n’est pas complètement implémentée, afin de vous ne serez pas insérer des données dans la base de données Northwind Traders, lorsque vous testez cet exemple.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres qui contient les paramètres utilisés par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> qui contient les paramètres utilisés par la méthode identifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les noms et types des paramètres qui sont contenus dans le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection doit correspondre les noms et types des paramètres qui se trouvent dans le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> signature de propriété. Les noms de paramètres respectent la casse. Lorsque vous travaillez avec des contrôles liés aux données qui fournissent des paramètres, tels que le <xref:System.Web.UI.WebControls.GridView> et <xref:System.Web.UI.WebControls.DetailsView> contrôles, le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle fusionne automatiquement tous les paramètres qui sont explicitement spécifiés dans la collection avec les paramètres qui sont fourni par le contrôle lié aux données. Ceci est important, car les contrôles liés aux données fournissent toujours leurs paramètres en tant que <xref:System.String> types et si la signature de méthode inclut numériques ou types de date, vous devez explicitement incluent un paramètre dans le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection avec le type correct. Sinon, le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle tente d’effectuer un cast des paramètres en fonction du type défini par les paramètres dans la collection. Pour plus d’informations, consultez [à l’aide des paramètres avec le contrôle ObjectDataSource](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4).  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> propriété récupère le <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> propriété qui est contenue par le <xref:System.Web.UI.WebControls.ObjectDataSourceView> qui est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Pour plus d’informations sur la fusion des paramètres, de la durée de vie et de la résolution de méthode, consultez <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> objet avec un objet métier et un <xref:System.Web.UI.WebControls.DetailsView> contrôle pour insérer des données. Le deuxième exemple de code fournit un exemple d’implémentation de la `Insert` méthode qui est utilisée dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.DetailsView> contrôle pour insérer des données. Initialement, le <xref:System.Web.UI.WebControls.DetailsView> affiche les zones de texte dans lequel vous pouvez entrer des données pour un nouveau `NorthwindEmployee` enregistrements, ainsi que de généré automatiquement **insérer** bouton. Une fois que vous entrez des données dans les champs de la <xref:System.Web.UI.WebControls.DetailsView> contrôler, cliquez sur le **insérer** bouton. Le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété identifie la méthode qui exécute l’opération d’insertion.  
  
 Si vous cliquez sur le **insérer** bouton, l’opération est effectuée à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété et tous les paramètres qui sont spécifiés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection. Dans cet exemple de code, un seul paramètre est spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection qui correspond à l’ID. du superviseur Effet, même si l’ID est affiché dans le <xref:System.Web.UI.WebControls.GridView.Rows%2A> collection pour le <xref:System.Web.UI.WebControls.DetailsView> contrôler en tant qu’un <xref:System.Web.UI.WebControls.BoundField> de l’objet, il est passé sous forme de chaîne pour le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. En l’ajoutant explicitement à la <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection avec un <xref:System.Web.UI.WebControls.Parameter.Type%2A> propriété définie sur le <xref:System.TypeCode.Int32> valeur, il sera passé correctement par le <xref:System.Web.UI.WebControls.ObjectDataSource> à la méthode comme un <xref:System.Int32>, et non comme une chaîne.  
  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> opération est effectuée, la méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété est appelée. Si le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> méthode de l’objet a une signature de méthode qui inclut des paramètres, le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection doit contenir des paramètres qui ont des noms qui correspondent aux paramètres de la signature de méthode pour le <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> méthode se termine avec succès.  
  
> [!IMPORTANT]
>  Vous devez valider toute valeur de paramètre que vous recevez à partir du client. Le runtime substitue simplement la valeur du paramètre dans le <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> propriété.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/objds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/objds8vb.aspx#1)]  
  
 L’exemple de code suivant fournit un exemple d’implémentation de la `Insert` méthode qui utilise l’exemple de code précédent. Le `InsertNewEmployeeWrapper` méthode est ajoutée à la `EmployeeLogic` objet de couche intermédiaire qui est fourni dans le <xref:System.Web.UI.WebControls.ObjectDataSource> vue d’ensemble de la classe pour activer l’objet travailler plus facilement avec la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle dans les scénarios Web, sans réécriture substantielle au véritable logique métier.  
  
 Pour exécuter l’exemple, vous devez avoir le `NorthwindEmployee` classe qui est fourni dans le <xref:System.Web.UI.WebControls.ObjectDataSource> vue d’ensemble de la classe. Cet exemple illustre uniquement comment connecter le <xref:System.Web.UI.WebControls.ObjectDataSource> à une méthode d’objet métier qui obtient des données pour un nouvel enregistrement de base de données à l’aide de paramètres. L’exemple n’ajoute pas les enregistrements à la base de données, car le `Save` méthode de la `NorthwindEmployee` classe n’inclut pas de code pour mettre à jour de la base de données.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/northwindemployee8.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/northwindemployee8.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="objectDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">Objet qui contient les valeurs d'état d'affichage enregistrées du contrôle.</param>
        <summary>Charge l'état d'affichage enregistré précédemment du contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est principalement utilisée par l’infrastructure .NET Framework et n’est pas destinée à être utilisée directement depuis votre code. Toutefois, les développeurs de contrôles peuvent substituer cette méthode pour spécifier comment un contrôle serveur personnalisé restaure son état d’affichage. Pour plus d’informations, consultez [ASP.NET State Management Overview](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce).  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.LoadViewState%2A> méthode est utilisée pour charger l’état d’affichage précédemment enregistré de le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Le <see cref="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" /> méthode est principalement utilisée par les développeurs de contrôles lors de l’extension la <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> contrôle.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MaximumRowsParameterName">
      <MemberSignature Language="C#" Value="public string MaximumRowsParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MaximumRowsParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumRowsParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MaximumRowsParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumRowsParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("maximumRows")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du paramètre de la méthode de récupération de l'objet métier qui est utilisé pour indiquer le nombre d'enregistrements à récupérer pour la prise en charge de la pagination de la source de données.</summary>
        <value>Nom du paramètre <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> utilisé pour indiquer le nombre d'enregistrements à récupérer. La valeur par défaut est <c>« maximumRows »</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> propriété est utilisée pour prendre en charge la pagination de source de données. Pour plus d’informations sur la façon dont la pagination est prise en charge par le <xref:System.Web.UI.WebControls.ObjectDataSource> du contrôle, consultez <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
   
  
## Examples  
 Les trois exemples suivants montrent une page Web, une classe de page code-behind et une classe d’accès aux données qui permettent aux utilisateurs de choisir le nombre d’enregistrements est affiché dans la page.  
  
 La page Web contient un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle dont <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> propriété est définie sur `true`. Le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété est définie sur le nom d’une méthode qui retourne le nombre total d’enregistrements dans la requête. Le <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> propriété et le <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> sont définies pour les noms des paramètres qui sont utilisés dans la méthode Select. La page contient également un <xref:System.Web.UI.WebControls.DropDownList> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 Le deuxième exemple montre un gestionnaire pour le <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> événements de la <xref:System.Web.UI.WebControls.DropDownList> contrôle. Le code dans le gestionnaire affecte le <xref:System.Web.UI.WebControls.GridView.PageSize%2A> propriété à la sélection de l’utilisateur.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 Le troisième exemple montre la classe d’accès aux données qui Récupère des données à partir de la table Customers. Il inclut une méthode nommée `GetSubsetOfEmployees`, qui est assignée à la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. L’exemple inclut également une méthode nommée `GetEmployeeCount`, qui est assignée à la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. La classe utilise LINQ pour interroger la table Customers. L’exemple requiert une classe LINQ to SQL qui représente la base de données Northwind et la table Customers. Pour plus d’informations, consultez [Comment : créer des Classes LINQ to SQL dans un projet Web](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreated As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreated;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit après la création de l'objet identifié par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> événement à appeler d’autres méthodes sur l’objet métier, définir des propriétés ou exécuter une autre initialisation spécifique à l’objet métier avant le <xref:System.Web.UI.WebControls.ObjectDataSource> objet appelle la méthode de données d’objet métier pour effectuer une opération de données . Une référence à l’objet est accessible par le <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> propriété, qui est exposée par le <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> objet.  
  
 Si la méthode identifiée pour exécuter l’opération de données est `static` (`Shared` en Visual Basic), la <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> ne sont jamais déclenchés.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreating As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreating;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant la création de l'objet identifié par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la méthode identifiée pour exécuter l’opération de données est `static` (`Shared` en Visual Basic), la <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> ne sont jamais déclenchés.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle appelle automatiquement le constructeur par défaut d’un objet métier pour créer une instance à l’aide de la réflexion. Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> événement explicitement appeler un autre constructeur, afin de définir l’instance de l’objet qui résulte de la <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> propriété associé <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> objet.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> objet avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour afficher des informations. Le deuxième exemple de code fournit l’objet métier de couche intermédiaire qui est utilisé dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour afficher des informations. Vous pouvez travailler avec un objet métier qui est très coûteux à créer (en termes de temps ou de ressources) pour chaque opération de données effectuée par votre page Web. Une façon de travailler avec un objet coûteux peut consister à créer une instance de ce qu’une seule fois, puis le met en cache pour les opérations suivantes au lieu de créer et détruire à chaque opération de données.  
  
> [!NOTE]
>  Dans une application de production, plusieurs demandes peuvent se terminer simultanément à l’aide de la même instance. Par conséquent, l’objet doit être implémentée de manière thread-safe.  
  
 Cet exemple de code illustre ce modèle. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> événement à vérifier d’abord le cache pour un objet et uniquement créer une instance de l’objet, s’il ne s’y ne trouve pas déjà. Gérez ensuite le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événement à mettre en cache l’objet métier pour une utilisation ultérieure, au lieu de sa destruction. Dans cet exemple de code, le <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> objet est défini sur `true` pour diriger le <xref:System.Web.UI.WebControls.ObjectDataSource> à ne pas appeler <xref:System.IDisposable.Dispose%2A> méthode sur l’objet.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 L’exemple de code suivant fournit l’exemple d’objet métier de couche intermédiaire qui utilise l’exemple de code précédent. L’exemple de code se compose d’un objet métier de base défini par le `EmployeeLogic` (classe), qui est une classe avec état qui encapsule la logique métier. Pour obtenir un exemple complet, vous devez compiler ce code en tant que bibliothèque et utiliser ces classes à partir d’une page ASP.NET (fichier .aspx).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnObjectCreating(System.Web.UI.WebControls.ObjectDataSourceEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      </Docs>
    </Member>
    <Member MemberName="ObjectDisposing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectDisposing As ObjectDataSourceDisposingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceDisposingEventHandler ^ ObjectDisposing;" />
      <MemberSignature Language="F#" Value="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " Usage="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant que l'objet identifié par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> ne soit ignoré.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événement est toujours déclenché avant que l’instance de l’objet métier est ignorée. Si l’objet métier implémente le <xref:System.IDisposable> interface, le <xref:System.IDisposable.Dispose%2A> méthode est appelée une fois que cet événement est déclenché.  
  
 Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événement à appeler d’autres méthodes sur l’objet, définir des propriétés ou exécuter un nettoyage spécifique à l’objet avant que l’objet est détruit. Une référence à l’objet est accessible par le <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> propriété, qui est exposée par le <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> objet.  
  
 Lorsque vous utilisez un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec une classe LINQ to SQL, vous devez annuler la suppression de la classe de contexte de données dans un gestionnaire pour le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événement. Cette étape est nécessaire, car LINQ to SQL prend en charge l’exécution différée, tandis que le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle tente de supprimer le contexte de données après l’opération de sélection.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> objet avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour afficher des informations. Le deuxième exemple de code fournit l’objet métier de couche intermédiaire qui est utilisé dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour afficher des informations. Vous pouvez travailler avec un objet métier qui est très coûteux à créer (en termes de temps ou de ressources) pour chaque opération de données effectuée par votre page Web. Une façon de travailler avec un objet coûteux peut consister à créer une instance de ce qu’une seule fois, puis le met en cache pour les opérations suivantes au lieu de créer et détruire à chaque opération de données. Cet exemple illustre ce modèle. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> événement à vérifier d’abord le cache pour un objet et uniquement créer une instance de celui-ci, s’il ne s’y ne trouve pas déjà. Gérez ensuite le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événement à mettre en cache l’objet métier pour une utilisation ultérieure, au lieu de sa destruction. Dans cet exemple de code, le <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> objet est défini sur `true` pour diriger le <xref:System.Web.UI.WebControls.ObjectDataSource> à ne pas appeler le <xref:System.IDisposable.Dispose%2A> méthode sur l’objet.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 L’exemple de code suivant fournit l’exemple d’objet métier de couche intermédiaire qui utilise l’exemple de code précédent. L’exemple de code se compose d’un objet métier de base défini par le `EmployeeLogic` (classe), qui est une classe avec état qui encapsule la logique métier. Pour obtenir un exemple complet, vous devez compiler ce code en tant que bibliothèque et utiliser ces classes à partir d’une page ASP.NET (fichier .aspx).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 L’exemple suivant montre comment gérer les <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événement lorsque vous utilisez un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec une classe LINQ to SQL.  
  
```vb  
Public Sub ExampleObjectDisposing(ByVal sender As Object, _   
        ByVal e As ObjectDataSourceDisposingEventArgs)  
    e.Cancel = True  
End Sub  
```  
  
```csharp  
public void ExampleObjectDisposing(object sender,   
        ObjectDataSourceDisposingEventArgs e)  
{  
    e.Cancel = true;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OldValuesParameterFormatString : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une chaîne de format à appliquer aux noms des paramètres des valeurs d'origine qui sont passées aux méthodes <see langword="Delete" /> ou <see langword="Update" />.</summary>
        <value>Une chaîne qui représente une chaîne de format appliquée aux noms de tout <paramref name="oldValues" /> ou paramètre de clé passé aux méthodes <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> ou <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />. La valeur par défaut est <c>»{0}«</c>, ce qui signifie que le nom du paramètre est le nom du champ.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> propriété est appliquée aux clés primaires uniquement, tels que ceux qui sont identifiés par le `DataKeyNames` propriété d’un contrôle lié aux données, ou dans la section supprimer et mettre à jour les scénarios où le <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> propriété est définie sur le <xref:System.Web.UI.ConflictOptions.CompareAllValues> valeur et l’ensemble de valeurs d’origine sont passés à la méthode de données correspondante.  
  
 Voici deux scénarios courants où vous pouvez modifier le <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> propriété :  
  
-   Vous souhaiterez peut-être modifier la propriété de faire la distinction entre les valeurs anciennes et nouvelles dans les mises à jour. Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> propriété est définie sur le <xref:System.Web.UI.ConflictOptions.CompareAllValues> paramètres de valeur, les valeurs d’origine et nouvelles sont ajoutés à la <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. Sans la chaîne mise en forme, deux paramètres portant le même nom seraient créés pour chaque champ de données. En modifiant le nom du paramètre de valeur d’origine, vous pouvez comparer les données à la source de données d’origine pour détecter des conflits et comparer des valeurs de clé.  
  
-   Certains concepteurs visuels implémentent un schéma d’affectation de noms particulier pour les clés et les valeurs d’origine.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="objectDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Ajoute un gestionnaire d'événements <see cref="E:System.Web.UI.Page.LoadComplete" /> à la page qui contient le contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 La méthode <xref:System.Web.UI.WebControls.ObjectDataSource.OnInit%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors du remplacement de la <see cref="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" /> méthode dans une classe dérivée, veillez à appeler la <see cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" /> méthode pour la classe de base afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ParsingCulture">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ParsingCulture ParsingCulture" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ParsingCulture As ParsingCulture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParsingCulture ParsingCulture { System::Web::UI::WebControls::ParsingCulture get(); void set(System::Web::UI::WebControls::ParsingCulture value); };" />
      <MemberSignature Language="F#" Value="member this.ParsingCulture : System.Web.UI.WebControls.ParsingCulture with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParsingCulture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique les informations culturelles qui sont utilisées lors de la conversion des valeurs de chaînes en types de propriétés réels pour construire un objet du type indiqué par <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />.</summary>
        <value>Informations de culture. La valeur par défaut est <see cref="F:System.Web.UI.WebControls.ParsingCulture.Invariant" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="objectDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enregistre l'état du contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
        <returns>Retourne l'état d'affichage actuel du contrôle serveur ; sinon, retourne <see langword="null" />, si aucun état d'affichage n'est associé au contrôle.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Function Select () As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; System.Collections.IEnumerable" Usage="objectDataSource.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Récupère les données du stockage de données sous-jacent en appelant la méthode qui est identifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> avec les paramètres dans la collection <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />.</summary>
        <returns>Liste <see cref="T:System.Collections.IEnumerable" /> de lignes de données.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode spécifiée peut avoir n’importe quelle signature de méthode, mais elle doit retourner ou être dérivé d’un des types répertoriés dans le tableau suivant pour le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle pour pouvoir l’appeler.  
  
|Type de retour|Action|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|Le <xref:System.Collections.IEnumerable> est retourné par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).|  
|<xref:System.Data.DataTable>|Un <xref:System.Data.DataView> est créé à l’aide de la <xref:System.Data.DataTable> et retournée par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).|  
|<xref:System.Data.DataView>|Le <xref:System.Data.DataView> est retourné par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).|  
|<xref:System.Data.DataSet>|La première <xref:System.Data.DataTable> de la <xref:System.Data.DataSet> est extrait et un <xref:System.Data.DataView> est créée et retournée par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).|  
|<xref:System.Object>|L’objet est encapsulé dans un seul élément <xref:System.Collections.IEnumerable> collection et retournée par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).|  
  
 La méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété peut être une méthode d’instance ou un `static` (`Shared` en Visual Basic) (méthode). Dans le cas d’une méthode d’instance, l’objet métier est créé et détruit chaque fois que la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété est appelée, sauf que la même instance est utilisée pour appeler la méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété et le méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode retourne un <xref:System.Collections.IEnumerable> interface. Toutefois, pour activer la mise en cache et scénarios de filtrage, la valeur de retour doit être un <xref:System.Data.DataSet> objet. Alors que le <xref:System.Data.DataSet> classe n’implémente pas le <xref:System.Collections.IEnumerable> interface, le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle extrait automatiquement la valeur par défaut <xref:System.Data.DataView> contrôler, qui implémente le <xref:System.Collections.IEnumerable>.  
  
 Avant du <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> opération est effectuée, le <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> événement. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> événement pour examiner les valeurs des paramètres et effectuer tout prétraitement avant une <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> opération. Pour effectuer une opération de récupération de données, le <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet utilise la réflexion pour créer une instance de l’objet qui est identifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété. Il appelle ensuite la méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété, à l’aide d’associés <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> propriétés. Après le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> opération se termine, le <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> événement. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> événement pour examiner les valeurs de retour, les paramètres de sortie et les exceptions et effectuer tout traitement.  
  
 Si le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété retourne un <xref:System.Data.DataSet>, <xref:System.Data.DataTable>, ou <xref:System.Data.DataView> objet et la mise en cache est activée, le <xref:System.Web.UI.WebControls.ObjectDataSource> récupère les données et enregistre les données dans le cache pendant la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> opération. Le cache est créé, ignoré ou actualisé en fonction du comportement de mise en cache qui est spécifié par la combinaison de la <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> et <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> propriétés.  
  
 Si le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété retourne un <xref:System.Data.DataSet> ou <xref:System.Data.DataTable> objet et un <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> propriété a été spécifiée, elle est évaluée avec n’importe quel fourni <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> propriétés et le filtre obtenu est appliqué à la liste des données lors de la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> opération.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> méthode de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> qui est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Pour plus d’informations sur la fusion des paramètres, de la durée de vie et de la résolution de méthode, consultez <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>.  
  
## <a name="data-bound-controls"></a>Contrôles liés aux données  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle est associé avec un contrôle lié aux données, telles que la <xref:System.Web.UI.WebControls.GridView> contrôle, il n’est pas nécessaire d’appeler le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode à partir du code de page. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode est appelée directement par le contrôle lié aux données à la place.  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez <xref:System.Web.UI.WebControls.ObjectDataSource>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCountMethod">
      <MemberSignature Language="C#" Value="public string SelectCountMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCountMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCountMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCountMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCountMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la méthode ou de la fonction que le contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> appelle pour récupérer un nombre de lignes.</summary>
        <value>Une chaîne qui représente le nom de la méthode ou de la fonction utilisé par <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> pour récupérer un nombre de lignes. La méthode doit retourner un entier (<see cref="T:System.Int32" />). La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété identifie une méthode d’objet métier qui est utilisée pour récupérer un nombre total de lignes, pour prendre en charge la pagination de source de données. Le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété est évaluée uniquement si la <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> propriété est définie sur `true`.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Pour plus d’informations sur la façon dont la pagination est prise en charge par le <xref:System.Web.UI.WebControls.ObjectDataSource> du contrôle, consultez <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.  
  
   
  
## Examples  
 Les trois exemples suivants montrent une page Web, une classe de page code-behind et une classe d’accès aux données qui permettent aux utilisateurs de choisir le nombre d’enregistrements est affiché dans la page.  
  
 La page Web contient un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle dont <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> propriété est définie sur `true`. Le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété est définie sur le nom d’une méthode qui retourne le nombre total d’enregistrements dans la requête. Le <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> propriété et le <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> sont définies pour les noms des paramètres qui sont utilisés dans la méthode Select. La page contient également un <xref:System.Web.UI.WebControls.DropDownList> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 Le deuxième exemple montre un gestionnaire pour le <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> événements de la <xref:System.Web.UI.WebControls.DropDownList> contrôle. Le code dans le gestionnaire affecte le <xref:System.Web.UI.WebControls.GridView.PageSize%2A> propriété à la sélection de l’utilisateur.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 Le troisième exemple montre la classe d’accès aux données qui Récupère des données à partir de la table Customers. Il inclut une méthode nommée `GetSubsetOfEmployees`, qui est assignée à la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. L’exemple inclut également une méthode nommée `GetEmployeeCount`, qui est assignée à la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. La classe utilise LINQ pour interroger la table Customers. L’exemple requiert une classe LINQ to SQL qui représente la base de données Northwind et la table Customers. Pour plus d’informations, consultez [Comment : créer des Classes LINQ to SQL dans un projet Web](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanRetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une opération <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> est terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> événement pour examiner les valeurs d’une valeur de retournée ou paramètres de sortie, ou pour déterminer si une exception a été levée après une <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> opération est terminée. La valeur de retour, les paramètres de sortie et les propriétés de gestion des exceptions sont disponibles à partir de la <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> objet qui est associé à l’événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Les trois exemples suivants montrent une page Web, une classe de page code-behind et une classe d’accès aux données qui permettent aux utilisateurs de récupérer et mettre à jour des enregistrements dans la table Employees de la base de données Northwind.  
  
 Le premier exemple montre une page Web qui contient deux <xref:System.Web.UI.WebControls.ObjectDataSource> contrôles, un <xref:System.Web.UI.WebControls.DropDownList> contrôle et un <xref:System.Web.UI.WebControls.DetailsView> contrôle. La première <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et le <xref:System.Web.UI.WebControls.DropDownList> contrôle sont utilisés pour extraire et afficher les noms des employés à partir de la base de données. La seconde <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et le <xref:System.Web.UI.WebControls.DetailsView> contrôle servent à récupérer, afficher et modifier les données à partir de l’enregistrement d’employé qui est sélectionné par l’utilisateur.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 Le deuxième exemple montre des gestionnaires pour les <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> et <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> événements. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> Gestionnaire d’événements sérialise l’objet qui contient les données récupérées à partir de la table Employee. L’objet sérialisé est stocké dans l’état d’affichage. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Gestionnaire d’événements désérialise l’objet d’état d’affichage qui contient les données d’origine pour l’enregistrement de données est en cours de mise à jour. L’objet qui contient les données d’origine est passé en tant que paramètre à la méthode de mise à jour. Les données d’origine doivent être passées à la base de données afin qu’il peut être utilisé pour vérifier si les données ont été modifiées par un autre processus.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 Le troisième exemple montre la classe d’accès aux données qui interagit avec la base de données Northwind. La classe utilise LINQ pour interroger et mettre à jour la table Employees. L’exemple requiert une classe LINQ to SQL qui représente la base de données Northwind et la table Employees. Pour plus d’informations, consultez [Comment : créer des Classes LINQ to SQL dans un projet Web](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As ObjectDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " Usage="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> événement pour effectuer une initialisation supplémentaire qui est spécifique à votre application, pour valider les valeurs de paramètres ou pour modifier les valeurs de paramètre avant le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle effectue l’opération de récupération de données. Les paramètres sont disponibles en tant qu’un <xref:System.Collections.IDictionary> collection qui est accessible par le <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> propriété, qui est exposée par le <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> objet.  
  
 Cet événement peut être déclenché deux fois pour un seul appel à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode), si le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété est définie. Le <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> objet est utilisé pour déterminer si select a été appelée pour récupérer les données ou le nombre.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public string SelectMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la méthode ou de la fonction que le contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> appelle pour récupérer des données.</summary>
        <value>Chaîne qui représente le nom de la méthode ou de la fonction que <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> utilise pour récupérer des données. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode spécifiée peut avoir n’importe quelle signature de méthode, mais elle doit retourner un des types indiqués dans le tableau suivant pour le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle pour pouvoir l’appeler.  
  
|Type de retour|Action|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|Le <xref:System.Collections.IEnumerable> est retourné par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).|  
|<xref:System.Data.DataTable>|Un <xref:System.Data.DataView> est créé à l’aide de la <xref:System.Data.DataTable> et retournée par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).|  
|<xref:System.Data.DataView>|Un <xref:System.Data.DataView> est retourné par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).|  
|<xref:System.Data.DataSet>|La première <xref:System.Data.DataTable> de la <xref:System.Data.DataSet> est extraite et un <xref:System.Data.DataView> est créée et retournée par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).|  
|<xref:System.Object>|L’objet est encapsulé dans un seul élément <xref:System.Collections.IEnumerable> collection et retournée par la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode).|  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Lorsque vous utilisez le <xref:System.Web.UI.WebControls.ObjectDataSource> classe à supprimer ou mettre à jour des données, assurez-vous que les noms de paramètres est configuré pour le <xref:System.Web.UI.WebControls.ObjectDataSource> dans contrôler le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection ou <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection correspondre aux noms des colonnes retournées par la méthode select .  
  
## <a name="object-lifetime"></a>Durée de vie des objets  
 La méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété peut être une méthode d’instance ou un `static` (`Shared` en Visual Basic) (méthode). Dans le cas d’une méthode d’instance, l’objet métier est créé et détruit chaque fois que la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété est appelée. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> événements fonctionnent avec l’objet métier avant que la méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété est appelée. Vous pouvez également gérer les <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événement est déclenché après la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété est appelée. Si l’objet métier implémente le <xref:System.IDisposable> interface, le <xref:System.IDisposable.Dispose%2A> méthode est appelée avant que l’objet est détruit. Si la méthode est `static` (`Shared` en Visual Basic), l’objet métier n’est jamais créé et vous ne pouvez pas gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événements.  
  
## <a name="parameter-merging"></a>Fusion des paramètres  
 Paramètres sont ajoutés à la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection à partir de ces sources :  
  
-   De façon déclarative le `SelectParameters` élément.  
  
-   Par programmation à partir du `Selecting` (méthode).  
  
 Tout d’abord, les paramètres répertoriés dans le `SelectParameters` élément sont ajoutées. En second lieu, les paramètres sont par programmation ajoutés et supprimés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> événement qui se produit avant la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode est exécutée. La méthode est résolue une fois que les paramètres sont fusionnés. Résolution de la méthode est décrite dans la section suivante.  
  
> [!IMPORTANT]
>  Vous devez valider toute valeur de paramètre que vous recevez à partir du client. Le runtime substitue simplement la valeur du paramètre dans le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété.  
  
## <a name="method-resolution"></a>Résolution de méthode  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode est appelée, les champs de données à partir du contrôle lié aux données, les paramètres qui ont été créés de façon déclarative dans le `SelectParameters` élément et les paramètres qui ont été ajoutés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Gestionnaire d’événements sont fusionnés. (Pour plus d’informations, consultez la section précédente.) Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôler essaie ensuite de rechercher une méthode à appeler. Tout d’abord, il recherche une ou plusieurs méthodes portant le nom spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété. Si aucune correspondance n’est trouvée, une <xref:System.InvalidOperationException> exception est levée. Si une correspondance est trouvée, elle recherche de correspondance des noms de paramètre. Par exemple, un type qui est spécifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété possède deux méthodes nommées `SelectARecord`. Un `SelectARecord` a un paramètre, `ID`et l’autre `SelectARecord` a deux paramètres, `Name` et `Number`. Si le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection n'a qu’un seul paramètre nommé `ID`, le `SelectARecord` méthode avec uniquement le `ID` paramètre est appelé. Le type du paramètre n’est pas vérifié dans la résolution des méthodes. L’ordre des paramètres n’a pas d’importance.  
  
 Si le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété est définie, la méthode est résolue dans une autre manière. Le <xref:System.Web.UI.WebControls.ObjectDataSource> recherche une méthode portant le nom spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété qui accepte un paramètre de type qui est spécifiée dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété. Dans ce cas, le nom du paramètre n’a pas d’importance.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment un <xref:System.Web.UI.WebControls.GridView> contrôle peut afficher des données à l’aide un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle sur une page Web Forms. Le <xref:System.Web.UI.WebControls.ObjectDataSource> identifie un nom de classe complètement ou partiellement qualifié avec son <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété et une méthode qui est appelée pour récupérer des données avec son <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété. Au moment de l’exécution, l’objet est créé et la méthode est appelée à l’aide de la réflexion. Le <xref:System.Web.UI.WebControls.GridView> contrôle énumère les <xref:System.Collections.IEnumerable> collection retournée par la méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété et affiche les données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection des paramètres utilisés par la méthode spécifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />.</summary>
        <value>Collection des paramètres utilisés par la méthode spécifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> property get le <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Vous ajoutez des paramètres à la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection de façon déclarative à l’aide la `SelectParameters` élément ou par programmation dans le gestionnaire pour le <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> événement. Au moment de l’exécution, les paramètres répertoriés dans le `SelectParameters` élément sont tout d’abord ajouté à la collection. Paramètres de la collection sont ensuite ajoutés ou supprimés par le gestionnaire pour le <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> événement. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> événement est déclenché avant le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode est exécutée.  
  
 Avant du <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode est exécutée, les noms et types des paramètres qui sont contenus dans le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection doit correspondre à la signature de la méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété. Par exemple, si une méthode select nommée `GetEmployeesByStateAndAge` prend un `string` et un entier en tant que paramètres, le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection doit contenir deux paramètres. Le premier paramètre doit être résolue en une chaîne et le deuxième paramètre doit être résolue en un entier. Les deux paramètres peuvent être spécifiés dans le balisage dans le `SelectParameters` élément. Ils peuvent également être peuvent être ajoutés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Gestionnaire d’événements, ou un paramètre peut être ajouté dans le balisage et l’autre peut être ajouté par programme.  
  
 Pour plus d’informations, consultez [à l’aide des paramètres avec le contrôle ObjectDataSource](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4) et <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod> propriété.  
  
> [!IMPORTANT]
>  Dans le code pour le <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Gestionnaire d’événements ou dans la méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété, assurez-vous que vous validez toute valeur de paramètre qui est reçu à partir du client.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment récupérer un enregistrement de données unique à l’aide un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôler et affichez-la dans une <xref:System.Web.UI.WebControls.DetailsView> contrôle. Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle récupère un enregistrement d’employé spécifique en appelant le `GetEmployee` méthode de la `EmployeeLogic` classe. Le `GetEmployee` méthode requiert un paramètre ID d’employé. Le <xref:System.Web.UI.WebControls.ObjectDataSource> de contrôles utilise un `QueryStringParameter` élément dans le balisage pour créer un <xref:System.Web.UI.WebControls.QueryStringParameter> objet qui Récupère la valeur d’un paramètre de chaîne de requête spécifiée à partir de l’URL et transmettez-le à la `GetEmployee` (méthode).  
  
 Autres classes de paramètre peuvent être utilisées pour récupérer des valeurs à partir d’autres sources, telles que les propriétés de contrôle, champs de formulaire, les cookies, les données de profil ASP.NET ou état de session. Vous pouvez également utiliser un objet de paramètre est défini dans le balisage pour transmettre une valeur codée en dur à la méthode select. Pour plus d’informations sur les classes de paramètres qui sont disponibles, consultez [à l’aide des paramètres avec les contrôles de Source de données pour le filtrage](http://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f).  
  
 Pour exécuter cet exemple, vous devrez les éléments suivants :  
  
-   Un site Web qui a une chaîne de connexion nommée `NorthwindConnection` qui se connecte à la base de données Northwind Traders. Pour plus d’informations, consultez le <xref:System.Web.UI.WebControls.ObjectDataSource> vue d’ensemble de la classe.  
  
-   Le `EmployeeLogic` classe est indiquée comme l’un des exemples de code pour le <xref:System.Web.UI.WebControls.ObjectDataSource> vue d’ensemble de la classe. Le fichier de classe doit se trouver dans le dossier App_Code.  
  
-   L’exemple de code permettre être exécuté comme une page .aspx. Si vous demandez la page sans aucun paramètre de chaîne de requête, un message d’erreur s’affiche. Si vous demandez la page à l’aide d’une chaîne de requête comme `?empid=1` après le nom du fichier .aspx, vous verrez les détails pour l’employé demandé.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/CS/objds3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/VB/objds3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SortParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de l'objet métier utilisé par le paramètre <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> pour spécifier une expression de tri pour la prise en charge du tri de la source de données.</summary>
        <value>Nom du paramètre de la méthode utilisé pour indiquer le paramètre permettant de trier les données. La valeur par défaut est une chaîne vide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> propriété est utilisée pour prendre en charge le tri des données source. Lorsqu’un <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> propriété est définie sur le <xref:System.Web.UI.DataSourceSelectArguments> de l’objet et passé à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (méthode), le <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> valeur identifie le nom du paramètre de la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> méthode d’objet métier en fonction desquelles les données sont triées.  
  
 Si le <xref:System.Web.UI.WebControls.ObjectDataSource> est associé à un contrôle lié aux données, les valeurs qui sont passées à ce paramètre prennent la forme de valeurs de champ séparés par une virgule suivie `"ASC"` ou `"DESC"`. Par exemple, la valeur d’un tri croissant sur `Name` serait `"Name ASC"`.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment implémenter un type qui prend en charge le tri. Le deuxième exemple de code montre comment implémenter une expression de tri.  
  
 L’exemple de code suivant montre comment implémenter un type qui prend en charge le tri. Le `SelectMethod` de la `SortingData` classe accepte un paramètre, `sortExpression`. La chaîne est passée à `SelectMethod` est utilisé pour le <xref:System.Data.DataView.Sort%2A> propriété de la <xref:System.Data.DataView> objet qui est retourné par `SelectMethod`.  
  
 [!code-csharp[ObjectDataSourceSorting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingData.cs#1)]
 [!code-vb[ObjectDataSourceSorting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingData.vb#1)]  
  
 L’exemple de code suivant montre comment implémenter une expression de tri. Le code dans la page Web crée une instance de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété est définie sur `SortingData` et <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> propriété est définie sur `sortExpression`. Le <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> propriété de la <xref:System.Web.UI.WebControls.GridView> contrôle est défini sur `true`. Lorsque l’utilisateur clique sur le **tri** bouton, le nom du champ `Name` ou `Number`, est passé à `SelectMethod` dans le paramètre de tri.  
  
 [!code-aspx-csharp[ObjectDataSourceSorting#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingDataExample.aspx#2)]
 [!code-aspx-vb[ObjectDataSourceSorting#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingDataExampleVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanSort" />
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SqlCacheDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une chaîne délimitée par des points-virgules qui indique les bases de données et les tables à utiliser pour la dépendance de cache Microsoft SQL Server.</summary>
        <value>Chaîne qui indique les bases de données et les tables à utiliser pour la dépendance de cache SQL Server.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle prend en charge une stratégie d’expiration facultatif qui est basée sur le <xref:System.Web.Caching.SqlCacheDependency> objet pour le cache de données (le service doit être configuré pour le serveur de base de données).  
  
 SQL Server prend en charge deux mécanismes pour l’invalidation du cache : l’interrogation et la notification. Chaque mécanisme possède une syntaxe différente pour le <xref:System.Web.Caching.SqlCacheDependency> objet.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> prend en charge que l’interrogation. Le <xref:System.Web.Caching.SqlCacheDependency> chaîne est utilisée pour créer un <xref:System.Data.SqlClient.SqlDependency> objet qui est passé à la <xref:System.Data.Common.DbCommand> constructeur avant le <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> méthode est exécutée. Le <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> chaîne identifie les bases de données et tables selon le même format que celui qui est utilisé par la `@ Page` directive, où la première partie de la chaîne est une chaîne de connexion à une base de données SQL Server, suivie de deux-points et enfin le nom de la table de base de données (par exemple, `"connectionstring1:table1"`). Si le <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> propriété dépend de plusieurs tables, les paires de noms de chaîne et la table de connexion sont séparés par des points-virgules (par exemple, `"connectionstring1:table1";connectionstring2:table2"`).  
  
 Pour prendre en charge la notification, vous devez écrire la logique du cache dans l’implémentation de votre <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété et gérer la construction de la <xref:System.Web.Caching.SqlCacheDependency> objet dans votre code.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment créer une dépendance de cache SQL Server et définir le <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> propriété d’un <xref:System.Web.UI.WebControls.ObjectDataSource> objet. Le deuxième exemple de code montre comment implémenter une méthode de wrapper qui retourne un <xref:System.Data.DataSet> objet afin de permettre la mise en cache et le filtrage avec un <xref:System.Web.UI.WebControls.ObjectDataSource> objet.  
  
 L’exemple de code suivant montre comment créer une dépendance de cache SQL Server et définir le <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> propriété d’un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Dans cet exemple, la base de données est interrogé toutes les 120 secondes. Si les données de Northwind Traders employés table de modifications pendant que le temps, toutes les données qui sont mis en cache par le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôler et affichées par le <xref:System.Web.UI.WebControls.GridView> contrôle est arrivé à expiration et un nouveau jeu de données est récupéré à la prochaine demande de la page.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/CS/objds7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/VB/objds7vb.aspx#1)]  
  
 L’exemple de code suivant montre comment implémenter une méthode de wrapper qui retourne un <xref:System.Data.DataSet> objet afin de permettre la mise en cache et le filtrage avec un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Dans l’implémentation de base de la `EmployeeLogic` (classe), le `GetAllEmployees` méthode retourne un <xref:System.Collections.ArrayList> objet. Au lieu de la refactorisation de l’objet complètement pour travailler avec le <xref:System.Web.UI.WebControls.ObjectDataSource> sur une page Web Forms, une méthode de wrapper nommée `GetAllEmployeesAsDataSet` est ajoutée et retourne un ensemble de `NorthwindEmployee` données comme un <xref:System.Data.DataSet>.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="StartRowIndexParameterName">
      <MemberSignature Language="C#" Value="public string StartRowIndexParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StartRowIndexParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property StartRowIndexParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StartRowIndexParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StartRowIndexParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("startRowIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du paramètre de la méthode de récupération de données utilisé pour indiquer la valeur de l'identificateur du premier enregistrement à récupérer pour la prise en charge de la pagination de la source de données.</summary>
        <value>Nom du paramètre de la méthode de l'objet métier utilisé pour indiquer le premier enregistrement à récupérer. Le paramètre doit retourner une valeur entière. La valeur par défaut est <c>« startRowIndex »</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> propriété est utilisée pour prendre en charge la pagination de source de données. Pour plus d’informations sur la façon dont la pagination est prise en charge par le <xref:System.Web.UI.WebControls.ObjectDataSource> du contrôle, consultez <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
   
  
## Examples  
 Les trois exemples suivants montrent une page Web, une classe de page code-behind et une classe d’accès aux données qui permettent aux utilisateurs de choisir le nombre d’enregistrements est affiché dans la page.  
  
 La page Web contient un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle dont <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> propriété est définie sur `true`. Le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété est définie sur le nom d’une méthode qui retourne le nombre total d’enregistrements dans la requête. Le <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> propriété et le <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> sont définies pour les noms des paramètres qui sont utilisés dans la méthode Select. La page contient également un <xref:System.Web.UI.WebControls.DropDownList> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 Le deuxième exemple montre un gestionnaire pour le <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> événements de la <xref:System.Web.UI.WebControls.DropDownList> contrôle. Le code dans le gestionnaire affecte le <xref:System.Web.UI.WebControls.GridView.PageSize%2A> propriété à la sélection de l’utilisateur.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 Le troisième exemple montre la classe d’accès aux données qui Récupère des données à partir de la table Customers. Il inclut une méthode nommée `GetSubsetOfEmployees`, qui est assignée à la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. L’exemple inclut également une méthode nommée `GetEmployeeCount`, qui est assignée à la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. La classe utilise LINQ pour interroger la table Customers. L’exemple requiert une classe LINQ to SQL qui représente la base de données Northwind et la table Customers. Pour plus d’informations, consultez [Comment : créer des Classes LINQ to SQL dans un projet Web](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="objectDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Suit les modifications d'état d'affichage apportées au contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> afin de les stocker dans l'objet <see cref="T:System.Web.UI.StateBag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.TrackViewState%2A> méthode est substituée pour marquer le point de départ pour commencer le suivi et de l’enregistrement des modifications apportées au contrôle dans le cadre de l’état d’affichage pour l’objet.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la classe que l'objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> représente.</summary>
        <value>Nom de classe qualifié complètement ou partiellement qui identifie le type de l'objet que <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> représente. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour créer une instance de l’objet qui le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle se lie, le contrôle utilise la réflexion pour charger le type qui est identifié par le nom de type au moment de l’exécution. Par conséquent, la valeur de la <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété peut être un type qualifié partiellement pour le code qui se trouve dans les répertoires Bin ou App_Code ou un nom de type qualifié complet pour le code qui est enregistré dans le global assembly cache. Si vous utilisez le global assembly cache, vous devez ajouter la référence appropriée à la `assemblies` section du fichier Machine.config ou Web.config.  
  
 Le type doit avoir un constructeur par défaut, sauf si vous gérez le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> événement pour créer une instance de celui-ci vous-même. Une instance du type est créée pour chaque appel à la <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, et <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> méthodes, si les méthodes sur le type de membre sont. Une instance n’est pas créée si les méthodes sont `static` (`Shared` en Visual Basic). Si le type implémente le <xref:System.IDisposable> interface, le <xref:System.IDisposable.Dispose%2A> méthode est appelée avant que l’objet est détruit.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment un <xref:System.Web.UI.WebControls.GridView> contrôle peut afficher des données en utilisant un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle sur une page Web Forms. Le <xref:System.Web.UI.WebControls.ObjectDataSource> identifie un nom de classe complètement ou partiellement qualifié avec son <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété et une méthode qui est appelée pour récupérer des données avec son <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété. Au moment de l’exécution, l’objet est créé et la méthode est appelée à l’aide de la réflexion. Le <xref:System.Web.UI.WebControls.GridView> contrôle énumère les <xref:System.Collections.IEnumerable> collection retournée par la <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété et affiche les données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 L’exemple suivant montre la classe qui le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> valeur de propriété fait référence à.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; int" Usage="objectDataSource.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute une opération de mise à jour en appelant la méthode identifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> et tous les paramètres qui figurent dans la collection <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />.</summary>
        <returns>Valeur qui représente le nombre de lignes mises à jour dans le stockage de données sous-jacent.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objet métier est supposé pour mettre à jour un enregistrement de données à la fois, plutôt que dans un lot.  
  
 Avant du <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> opération est effectuée, le <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> événement. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> événement pour examiner les valeurs des paramètres et effectuer tout prétraitement avant une <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> opération. Pour effectuer une opération de mise à jour, le <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet utilise la réflexion pour créer une instance de l’objet qui est identifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété. Il appelle ensuite la méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété, à l’aide d’associés <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> propriétés. Après le <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> opération se termine, le <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> méthode est appelée pour déclencher le <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> événement. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> événement pour examiner les valeurs de retour, les paramètres de sortie et les exceptions et effectuer tout traitement.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> méthode délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> méthode de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> qui est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Pour plus d’informations sur la fusion des paramètres, de la durée de vie et de la résolution de méthode, consultez <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.  
  
> [!IMPORTANT]
>  Vous devez valider toute valeur de paramètre que vous recevez à partir du client. Le runtime substitue simplement la valeur du paramètre dans le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété.  
  
## <a name="data-bound-controls"></a>Contrôles liés aux données  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle est associé avec un contrôle lié aux données, telles que la <xref:System.Web.UI.WebControls.GridView> contrôle, il n’est pas nécessaire d’appeler le <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> méthode à partir du code de page. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> méthode est appelée directement par le contrôle lié aux données à la place.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.DropDownList> contrôle, <xref:System.Web.UI.WebControls.TextBox> contrôles et plusieurs <xref:System.Web.UI.WebControls.ObjectDataSource> objets à mettre à jour des données. Le deuxième exemple de code montre le `EmployeeLogic` classe qui est utilisée dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.DropDownList> contrôle, <xref:System.Web.UI.WebControls.TextBox> contrôles et plusieurs <xref:System.Web.UI.WebControls.ObjectDataSource> contrôles pour mettre à jour des données. Le <xref:System.Web.UI.WebControls.DropDownList> affiche le nom d’un employé de Northwind, tandis que le <xref:System.Web.UI.WebControls.TextBox> contrôles sont utilisés pour entrer et mettre à jour les informations d’adresse. Étant donné que le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection contient un <xref:System.Web.UI.WebControls.ControlParameter> objet qui est lié à la valeur sélectionnée de la <xref:System.Web.UI.WebControls.DropDownList>, le bouton déclenche la <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> opération est activée uniquement après sélection d’un employé.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte une entrée d'utilisateur, ce qui constitue une menace potentielle pour la sécurité. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 Le code suivant montre l’exemple le `EmployeeLogic` classe qui est utilisée dans l’exemple de code précédent.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une opération <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> est terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> événement pour examiner les valeurs d’une valeur de retournée ou paramètres de sortie, ou pour déterminer si une exception a été levée après une <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> opération est terminée. La valeur de retour, les paramètres de sortie et les propriétés de gestion des exceptions sont disponibles à partir de la <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> objet qui est associé à l’événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la méthode ou de la fonction que le contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> appelle pour mettre à jour des données.</summary>
        <value>Chaîne qui représente le nom de la méthode ou de la fonction que <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> utilise pour mettre à jour des données. La valeur par défaut est une chaîne vide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle part du principe que la méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété effectue des mises à jour un à la fois, plutôt que dans un lot.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété délègue à la <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> propriété de la <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Assurez-vous que les noms de paramètres est configuré pour le <xref:System.Web.UI.WebControls.ObjectDataSource> dans contrôler le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection correspondre aux noms des colonnes retournées par la méthode select.  
  
## <a name="object-lifetime"></a>Durée de vie des objets  
 La méthode qui est identifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété peut être une méthode d’instance ou un `static` (`Shared` en Visual Basic) (méthode). Dans le cas d’une méthode d’instance, l’objet métier est créé et détruit chaque fois que la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété est appelée. Vous pouvez gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> événements fonctionnent avec l’objet métier avant que la méthode spécifiée par la <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété est appelée. Vous pouvez également gérer les <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événement est déclenché après la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété est appelée. Si l’objet métier implémente le <xref:System.IDisposable> interface, le <xref:System.IDisposable.Dispose%2A> méthode est appelée avant que l’objet est détruit. Si la méthode est `static` (`Shared` en Visual Basic), l’objet métier n’est jamais créé et vous ne pouvez pas gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, et <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> événements.  
  
## <a name="parameter-merging"></a>Fusion des paramètres  
 Paramètres sont ajoutés à la <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection à partir de trois sources :  
  
-   À partir du contrôle lié aux données, en cours d’exécution.  
  
-   À partir de la `UpdateParameters` , élément de façon déclarative.  
  
-   À partir de la <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Gestionnaire d’événements, par programmation.  
  
 Tout d’abord, tous les paramètres qui sont générés à partir de contrôles liés aux données sont ajoutés à la <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. Par exemple, si le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle est lié à un <xref:System.Web.UI.WebControls.GridView> contrôle qui comporte les colonnes `Name` et `Number`, les paramètres pour `Name` et `Number` sont ajoutés à la collection. Le nom exact du paramètre varie selon le <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> propriété. Le type de données de ces paramètres est `string`. Ensuite, les paramètres qui sont répertoriées dans le `UpdateParameters` élément sont ajoutées. Si un paramètre dans le `UpdateParameters` élément a été trouvé avec le même nom qu’un paramètre qui se trouve déjà dans le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection, le paramètre existant est modifiée pour correspondre au paramètre spécifié dans le `UpdateParameters` élément. En règle générale, il est utilisé pour modifier le type des données dans le paramètre. Enfin, vous pouvez ajouter par programmation et supprimer des paramètres dans le <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> événement qui se produit avant la <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> méthode est exécutée. La méthode est résolue une fois que les paramètres sont fusionnés. Résolution de la méthode est décrite dans la section suivante.  
  
> [!IMPORTANT]
>  Vous devez valider toute valeur de paramètre que vous recevez à partir du client. Le runtime substitue simplement la valeur du paramètre dans le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété.  
  
## <a name="method-resolution"></a>Résolution de méthode  
 Lorsque le <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> méthode est appelée, les champs de données à partir du contrôle lié aux données, les paramètres qui ont été créés de façon déclarative dans le `UpdateParameters` élément et les paramètres qui ont été ajoutés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Gestionnaire d’événements sont fusionnés. (Pour plus d’informations, consultez la section précédente.) Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôler essaie ensuite de rechercher une méthode à appeler. Tout d’abord, il recherche une ou plusieurs méthodes portant le nom spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété. Si aucune correspondance n’est trouvée, une <xref:System.InvalidOperationException> exception est levée. Si une correspondance est trouvée, elle recherche de correspondance des noms de paramètre. Par exemple, un type qui est spécifié par le <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> propriété possède deux méthodes nommées `UpdateARecord`. Un `UpdateARecord` a un paramètre, `ID`et l’autre `UpdateARecord` a deux paramètres, `Name` et `Number`. Si le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection n'a qu’un seul paramètre nommé `ID`, le `UpdateARecord` méthode avec uniquement le `ID` paramètre est appelé. Le type du paramètre n’est pas vérifié dans la résolution des méthodes. L’ordre des paramètres n’a pas d’importance.  
  
 Si le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété est définie, la méthode est résolue dans une autre manière. Le <xref:System.Web.UI.WebControls.ObjectDataSource> recherche une méthode portant le nom spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété qui accepte un paramètre de type qui est spécifiée dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> propriété. Dans ce cas, le nom du paramètre n’a pas d’importance.  
  
   
  
## Examples  
 Les trois exemples suivants montrent une page Web, une classe de page code-behind et une classe d’accès aux données qui permettent aux utilisateurs de récupérer et mettre à jour des enregistrements dans la table Employees de la base de données Northwind.  
  
 Le premier exemple montre une page Web qui contient deux <xref:System.Web.UI.WebControls.ObjectDataSource> contrôles, un <xref:System.Web.UI.WebControls.DropDownList> contrôle et un <xref:System.Web.UI.WebControls.DetailsView> contrôle. La première <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et le <xref:System.Web.UI.WebControls.DropDownList> contrôle sont utilisés pour extraire et afficher les noms des employés à partir de la base de données. La seconde <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et le <xref:System.Web.UI.WebControls.DetailsView> contrôle servent à récupérer, afficher et modifier les données à partir de l’enregistrement d’employé qui est sélectionné par l’utilisateur.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 Le deuxième exemple montre des gestionnaires pour les <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> et <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> événements. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> Gestionnaire d’événements sérialise l’objet qui contient les données récupérées à partir de la table Employee. L’objet sérialisé est stocké dans l’état d’affichage. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Gestionnaire d’événements désérialise l’objet d’état d’affichage qui contient les données d’origine pour l’enregistrement de données est en cours de mise à jour. L’objet qui contient les données d’origine est passé en tant que paramètre à la méthode de mise à jour. Les données d’origine doivent être passées à la base de données afin qu’il peut être utilisé pour vérifier si les données ont été modifiées par un autre processus.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 Le troisième exemple montre la classe d’accès aux données qui interagit avec la base de données Northwind. La classe utilise LINQ pour interroger et mettre à jour la table Employees. L’exemple requiert une classe LINQ to SQL qui représente la base de données Northwind et la table Employees. Pour plus d’informations, consultez [Comment : créer des Classes LINQ to SQL dans un projet Web](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres qui contient les paramètres utilisés par la méthode spécifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> qui contient les paramètres utilisés par la méthode spécifiée par la propriété <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les noms et types des paramètres qui sont contenus dans le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection doit correspondre les noms et types des paramètres dans le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> signature de méthode. Les noms de paramètres sont affectés par la <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> propriété et respectent la casse. Les paramètres de la collection dépendent des données dans le contrôle lié aux données, les paramètres spécifiés de manière déclarative et les paramètres qui sont ajoutés par programmation. Pour plus d’informations, consultez la section « Fusion de paramètre » dans <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> et [à l’aide des paramètres avec le contrôle ObjectDataSource](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4).  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> récupère de la propriété le <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> propriété qui est contenue par le <xref:System.Web.UI.WebControls.ObjectDataSourceView> objet auquel est associé le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle.  
  
 Pour plus d’informations sur la fusion des paramètres, de la durée de vie et de la résolution de méthode, consultez <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.  
  
> [!IMPORTANT]
>  Vous devez valider toute valeur de paramètre que vous recevez à partir du client. Le runtime substitue simplement la valeur du paramètre dans le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> propriété.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.DropDownList> contrôle, <xref:System.Web.UI.WebControls.TextBox> contrôles et plusieurs <xref:System.Web.UI.WebControls.ObjectDataSource> objets à mettre à jour des données. Le deuxième exemple de code montre le `EmployeeLogic` classe qui est utilisée dans le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.DropDownList> contrôle, <xref:System.Web.UI.WebControls.TextBox> contrôles et plusieurs <xref:System.Web.UI.WebControls.ObjectDataSource> contrôles pour mettre à jour des données. Le <xref:System.Web.UI.WebControls.DropDownList> affiche le nom d’un employé de Northwind, tandis que le <xref:System.Web.UI.WebControls.TextBox> contrôles sont utilisés pour entrer et mettre à jour les informations d’adresse. Étant donné que le <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection contient un <xref:System.Web.UI.WebControls.ControlParameter> qui est lié à la valeur sélectionnée de la <xref:System.Web.UI.WebControls.DropDownList>, le bouton déclenche la <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> opération est activée uniquement après sélection d’un employé.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte une entrée d'utilisateur, ce qui constitue une menace potentielle pour la sécurité. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 Le code suivant montre l’exemple le `EmployeeLogic` classe qui est utilisée dans l’exemple de code précédent.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> événement pour effectuer une initialisation supplémentaire qui est spécifique à votre application, pour valider les valeurs de paramètres ou pour modifier les valeurs de paramètre avant le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle effectue l’opération de mise à jour. Les paramètres sont disponibles en tant qu’un <xref:System.Collections.IDictionary> collection qui est accessible par le <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> propriété, qui est exposée par le <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> objet.  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Les trois exemples suivants montrent une page Web, une classe de page code-behind et une classe d’accès aux données qui permettent aux utilisateurs de récupérer et mettre à jour des enregistrements dans la table Employees de la base de données Northwind.  
  
 Le premier exemple montre une page Web qui contient deux <xref:System.Web.UI.WebControls.ObjectDataSource> contrôles, un <xref:System.Web.UI.WebControls.DropDownList> contrôle et un <xref:System.Web.UI.WebControls.DetailsView> contrôle. La première <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et le <xref:System.Web.UI.WebControls.DropDownList> contrôle sont utilisés pour extraire et afficher les noms des employés à partir de la base de données. La seconde <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle et le <xref:System.Web.UI.WebControls.DetailsView> contrôle servent à récupérer, afficher et modifier les données à partir de l’enregistrement d’employé qui est sélectionné par l’utilisateur.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 Le deuxième exemple montre des gestionnaires pour les <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> et <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> événements. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> Gestionnaire d’événements sérialise l’objet qui contient les données récupérées à partir de la table Employee. L’objet sérialisé est stocké dans l’état d’affichage. Le <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Gestionnaire d’événements désérialise l’objet d’état d’affichage qui contient les données d’origine pour l’enregistrement de données est en cours de mise à jour. L’objet qui contient les données d’origine est passé en tant que paramètre à la méthode de mise à jour. Les données d’origine doivent être passées à la base de données afin qu’il peut être utilisé pour vérifier si les données ont été modifiées par un autre processus.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 Le troisième exemple montre la classe d’accès aux données qui interagit avec la base de données Northwind. La classe utilise LINQ pour interroger et mettre à jour la table Employees. L’exemple requiert une classe LINQ to SQL qui représente la base de données Northwind et la table Employees. Pour plus d’informations, consultez [Comment : créer des Classes LINQ to SQL dans un projet Web](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
  </Members>
</Type>