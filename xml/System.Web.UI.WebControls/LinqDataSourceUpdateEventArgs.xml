<Type Name="LinqDataSourceUpdateEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ad4de834753cb8cf7c08131b0ca92f63c49de8d7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30598313" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceUpdateEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceUpdateEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceUpdateEventArgs : System::ComponentModel::CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des données pour l'événement <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> objet est passé à un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement. Vous pouvez utiliser la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> objet pour examiner les données avant d’exécuter l’opération de mise à jour dans la source de données. Vous pouvez ensuite valider les données, examinez les exceptions de validation levées par la classe de données ou modifier une valeur avant la mise à jour. Vous pouvez également annuler l’opération de mise à jour.  
  
 Le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> objet contient les données qui n’a été récupérées à partir de la source de données. Le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> objet contient les données qui seront enregistrées dans la source de données pendant l’opération de mise à jour.  
  
 Si l’objet qui représente la source de données lève une exception de validation avant de mettre à jour les données, le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> propriété contient une instance de la <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> classe. Vous pouvez récupérer toutes les exceptions de validation via la <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> propriété. Si aucune exception de validation n’est levée, le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> propriété contient `null`. Si vous gérez les exceptions de validation et que vous ne voulez pas que l’exception levée de nouveau, définissez la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> propriété `true`.  
  
 Par défaut, le <xref:System.Web.UI.WebControls.LinqDataSource> magasins contrôle les valeurs d’origine à partir de la source de données dans la vue d’état dans la page Web, à l’exception de ceux dont <xref:System.Data.Linq.Mapping.ColumnAttribute> attribut est marqué comme `UpdateCheck.Never`. LINQ to SQL vérifie automatiquement l’intégrité des données avant de mettre à jour les données. Pour ce faire, il compare les valeurs en cours dans la source de données avec les valeurs d’origine stockées dans l’état d’affichage. LINQ to SQL lève une exception si les valeurs dans la source de données ont changé. Vous pouvez effectuer la validation des données supplémentaires en créant un gestionnaire pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement.  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement. L’exemple montre comment comparer les propriétés de la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété et la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété pour déterminer si la valeur dans le `Category` propriété a changé. Dans ce cas, le `CategoryChanged` propriété de l’objet dans le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> est définie sur `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement. Il affiche les messages d’exception de validation en utilisant un <xref:System.Web.UI.WebControls.Label> contrôle.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception">Exception qui s'est produite lors de la validation des données à mettre à jour.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> avec l'exception spécifiée.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object originalObject, object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (originalObject As Object, newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Object ^ originalObject, System::Object ^ newObject);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="originalObject" Type="System.Object" />
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="originalObject">Un objet du type spécifié dans la propriété <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> qui contient les valeurs d'origine récupérées à partir de la source de données.</param>
        <param name="newObject">Objet du type spécifié dans la propriété <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> qui contient les valeurs initiales qui seront enregistrées dans la source de données.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'exception levée lors de la validation des données avant l'opération de mise à jour.</summary>
        <value>L'exception, si une erreur s'est produit ; sinon, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si une exception de validation est levée avant l’opération de mise à jour est effectuée, elle est stockée dans le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> propriété. Dans un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement, vous pouvez récupérer l’exception par le biais du <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement. Il affiche les messages d’exception de validation en utilisant un <xref:System.Web.UI.WebControls.Label> contrôle.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si l'exception a été gérée et qu'elle ne doit plus être levée.</summary>
        <value>
          <see langword="true" /> si l'exception a été gérée ; sinon <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez créer un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement afin d’examiner les exceptions de validation qui se sont produites avant l’opération de mise à jour. Si vous gérez l’exception et que vous ne souhaitez pas qu’il soit plus levée, définissez la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> propriété `true`. Si vous ne définissez pas le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> propriété `true`, l’exception sera propagée au gestionnaire d’événements suivant dans la pile des appels.  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement. Il affiche les messages d’exception de validation en utilisant un <xref:System.Web.UI.WebControls.Label> contrôle.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet contenant les valeurs qui seront enregistrées dans la source de données.</summary>
        <value>Objet du type spécifié dans la propriété <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> qui contient les données à enregistrer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Créer un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement et récupérer le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété à valider les données. Vous pouvez également modifier les données ou annuler l’opération de mise à jour.  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement. L’exemple montre comment comparer les propriétés de la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété et la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété pour déterminer si la valeur dans le `Category` propriété a changé. Dans ce cas, le `CategoryChanged` propriété de l’objet dans le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> est définie sur `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalObject">
      <MemberSignature Language="C#" Value="public object OriginalObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet qui contient les valeurs récupérées à l'origine de la source de données.</summary>
        <value>Objet du type spécifié dans la propriété <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> qui contient les données récupérées de la source de données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété pour vérifier les valeurs d’origine sur les valeurs actuelles dans la source de données et pour annuler l’opération de mise à jour ou effectuer une autre action.  
  
 Le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété contient des valeurs pour que les propriétés sont rendues persistantes dans la vue de l’état de la page Web. Une propriété est persistante dans ces circonstances :  
  
-   Lorsqu’il est affiché dans un contrôle lié aux données.  
  
-   Lorsque le <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> propriété de la <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> attribut a la valeur `Always` ou `WhenChanged`.  
  
 Si le <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> est définie sur `Never` et la valeur n’est pas affichée dans un contrôle lié aux données, la valeur n’est pas stockée dans la page Web. Dans ce cas, il ne peut pas être affecté à la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement. L’exemple montre comment comparer les propriétés de la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété et la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété pour déterminer si la valeur dans le `Category` propriété a changé. Dans ce cas, le `CategoryChanged` propriété de l’objet dans le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> est définie sur `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>