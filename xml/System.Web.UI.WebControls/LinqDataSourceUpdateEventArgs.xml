<Type Name="LinqDataSourceUpdateEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="26c4a4c800f2c511c215ea68c572e8abf6bcaba4" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37534760" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceUpdateEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceUpdateEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceUpdateEventArgs : System::ComponentModel::CancelEventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceUpdateEventArgs = class&#xA;    inherit CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="5f816-101">Fournit des données pour l'événement <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5f816-101">Provides data for the <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f816-102">Le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> objet est passé à n’importe quel gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement.</span><span class="sxs-lookup"><span data-stu-id="5f816-102">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="5f816-103">Vous pouvez utiliser le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> objet pour examiner les données avant l’exécution de l’opération de mise à jour dans la source de données.</span><span class="sxs-lookup"><span data-stu-id="5f816-103">You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object to examine the data before the update operation is executed in the data source.</span></span> <span data-ttu-id="5f816-104">Vous pouvez ensuite valider les données, examiner les exceptions de validation levées par la classe de données ou modifier une valeur avant la mise à jour.</span><span class="sxs-lookup"><span data-stu-id="5f816-104">You can then validate the data, examine validation exceptions thrown by the data class, or change a value before the update.</span></span> <span data-ttu-id="5f816-105">Vous pouvez également annuler l’opération de mise à jour.</span><span class="sxs-lookup"><span data-stu-id="5f816-105">You can also cancel the update operation.</span></span>  
  
 <span data-ttu-id="5f816-106">Le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> objet contient les données récupérées à l’origine de la source de données.</span><span class="sxs-lookup"><span data-stu-id="5f816-106">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> object contains the data that was originally retrieved from the data source.</span></span> <span data-ttu-id="5f816-107">Le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> objet contient les données qui seront enregistrées dans la source de données pendant l’opération de mise à jour.</span><span class="sxs-lookup"><span data-stu-id="5f816-107">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> object contains the data that will be saved in the data source during the update operation.</span></span>  
  
 <span data-ttu-id="5f816-108">Si l’objet qui représente la source de données lève une exception de validation avant la mise à jour les données, le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> propriété contient une instance de la <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> classe.</span><span class="sxs-lookup"><span data-stu-id="5f816-108">If the object that represents the data source throws a validation exception before updating the data, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span> <span data-ttu-id="5f816-109">Vous pouvez récupérer toutes les exceptions de validation via la <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="5f816-109">You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.</span></span> <span data-ttu-id="5f816-110">Si aucune exception de validation est levée, le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> contient de la propriété `null`.</span><span class="sxs-lookup"><span data-stu-id="5f816-110">If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains `null`.</span></span> <span data-ttu-id="5f816-111">Si vous gérez les exceptions de validation et que vous ne souhaitez pas que l’exception levée de nouveau, définissez la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> propriété `true`.</span><span class="sxs-lookup"><span data-stu-id="5f816-111">If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="5f816-112">Par défaut, le <xref:System.Web.UI.WebControls.LinqDataSource> stocke de contrôle les valeurs d’origine à partir de la source de données dans la vue état dans la page Web, à l’exception de ceux dont la propriété <xref:System.Data.Linq.Mapping.ColumnAttribute> attribut est marqué comme `UpdateCheck.Never`.</span><span class="sxs-lookup"><span data-stu-id="5f816-112">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values from the data source in view state on the Web page, except those whose <xref:System.Data.Linq.Mapping.ColumnAttribute> attribute is marked as `UpdateCheck.Never`.</span></span> <span data-ttu-id="5f816-113">LINQ to SQL vérifie automatiquement l’intégrité des données avant la mise à jour les données.</span><span class="sxs-lookup"><span data-stu-id="5f816-113">LINQ to SQL automatically checks the integrity of the data before updating the data.</span></span> <span data-ttu-id="5f816-114">Il effectue cela en comparant les valeurs actuelles dans la source de données avec les valeurs d’origine stockées dans l’état d’affichage.</span><span class="sxs-lookup"><span data-stu-id="5f816-114">It does this by comparing the current values in the data source with the original values stored in view state.</span></span> <span data-ttu-id="5f816-115">LINQ to SQL lève une exception si les valeurs dans la source de données ont changé.</span><span class="sxs-lookup"><span data-stu-id="5f816-115">LINQ to SQL raises an exception if the values in the data source have changed.</span></span> <span data-ttu-id="5f816-116">Vous pouvez effectuer la validation des données supplémentaires en créant un gestionnaire pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement.</span><span class="sxs-lookup"><span data-stu-id="5f816-116">You can perform additional data validation by creating a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f816-117">L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement.</span><span class="sxs-lookup"><span data-stu-id="5f816-117">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="5f816-118">L’exemple montre comment comparer les propriétés de la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété et la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété afin de déterminer si la valeur dans le `Category` propriété a été modifiée.</span><span class="sxs-lookup"><span data-stu-id="5f816-118">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="5f816-119">Dans ce cas, le `CategoryChanged` propriété de l’objet dans le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété est définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="5f816-119">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="5f816-120">L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement.</span><span class="sxs-lookup"><span data-stu-id="5f816-120">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="5f816-121">Il affiche les messages d’exception de validation en utilisant un <xref:System.Web.UI.WebControls.Label> contrôle.</span><span class="sxs-lookup"><span data-stu-id="5f816-121">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5f816-122">Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-122">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs : System.Web.UI.WebControls.LinqDataSourceValidationException -&gt; System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="5f816-123">Exception qui s'est produite lors de la validation des données à mettre à jour.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-123">The exception that occurred when validating the data to update.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5f816-124">Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> avec l'exception spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-124">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class with the specified exception.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object originalObject, object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (originalObject As Object, newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Object ^ originalObject, System::Object ^ newObject);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs : obj * obj -&gt; System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs (originalObject, newObject)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="originalObject" Type="System.Object" />
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="originalObject">
          <span data-ttu-id="5f816-125">Un objet du type spécifié dans la propriété <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> qui contient les valeurs d'origine récupérées à partir de la source de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-125">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the initial values that were retrieved from the data source.</span>
          </span>
        </param>
        <param name="newObject">
          <span data-ttu-id="5f816-126">Objet du type spécifié dans la propriété <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> qui contient les valeurs initiales qui seront enregistrées dans la source de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-126">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the values that will be saved in the data source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5f816-127">Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-127">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5f816-128">Obtient l'exception levée lors de la validation des données avant l'opération de mise à jour.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-128">Gets the exception that was thrown while the data was being validated before the update operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5f816-129">L'exception, si une erreur s'est produit ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-129">The exception, if an error occurred; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f816-130">Si une exception de validation est levée avant l’opération de mise à jour est effectuée, elle est stockée dans le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="5f816-130">If a validation exception is raised before the update operation is performed, the exception is stored in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.</span></span> <span data-ttu-id="5f816-131">Dans un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement, vous pouvez récupérer l’exception par le biais du <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="5f816-131">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the exception through the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f816-132">L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement.</span><span class="sxs-lookup"><span data-stu-id="5f816-132">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="5f816-133">Il affiche les messages d’exception de validation en utilisant un <xref:System.Web.UI.WebControls.Label> contrôle.</span><span class="sxs-lookup"><span data-stu-id="5f816-133">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5f816-134">Obtient ou définit une valeur qui indique si l'exception a été gérée et qu'elle ne doit plus être levée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-134">Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5f816-135">
            <see langword="true" /> si l'exception a été gérée ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-135">
              <see langword="true" /> if the exception was handled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f816-136">Vous pouvez créer un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événements afin d’examiner les exceptions de validation qui se sont produites avant l’opération de mise à jour.</span><span class="sxs-lookup"><span data-stu-id="5f816-136">You can create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to examine validation exceptions that occurred before the update operation.</span></span> <span data-ttu-id="5f816-137">Si vous gérez l’exception et que vous ne voulez pas qu’il soit plus levée, définissez le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> propriété `true`.</span><span class="sxs-lookup"><span data-stu-id="5f816-137">If you handle the exception and do not want it to be thrown again, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.</span></span> <span data-ttu-id="5f816-138">Si vous ne définissez pas la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> propriété `true`, l’exception est propagée au gestionnaire d’événements suivant dans la pile des appels.</span><span class="sxs-lookup"><span data-stu-id="5f816-138">If you do not set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`, the exception will be propagated to the next event handler in the call stack.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f816-139">L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement.</span><span class="sxs-lookup"><span data-stu-id="5f816-139">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="5f816-140">Il affiche les messages d’exception de validation en utilisant un <xref:System.Web.UI.WebControls.Label> contrôle.</span><span class="sxs-lookup"><span data-stu-id="5f816-140">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5f816-141">Obtient l'objet contenant les valeurs qui seront enregistrées dans la source de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-141">Gets the object that contains the values that will be saved in the data source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5f816-142">Objet du type spécifié dans la propriété <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> qui contient les données à enregistrer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-142">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the data to save.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f816-143">Créer un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement et récupérer le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété à valider les données.</span><span class="sxs-lookup"><span data-stu-id="5f816-143">Create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event and retrieve the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to validate the data.</span></span> <span data-ttu-id="5f816-144">Vous pouvez également modifier les données ou annuler l’opération de mise à jour.</span><span class="sxs-lookup"><span data-stu-id="5f816-144">You can also change the data or cancel the update operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f816-145">L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement.</span><span class="sxs-lookup"><span data-stu-id="5f816-145">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="5f816-146">L’exemple montre comment comparer les propriétés de la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété et la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété afin de déterminer si la valeur dans le `Category` propriété a été modifiée.</span><span class="sxs-lookup"><span data-stu-id="5f816-146">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="5f816-147">Dans ce cas, le `CategoryChanged` propriété de l’objet dans le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété est définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="5f816-147">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalObject">
      <MemberSignature Language="C#" Value="public object OriginalObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5f816-148">Obtient l'objet qui contient les valeurs récupérées à l'origine de la source de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-148">Gets the object that contains the values that were originally retrieved from the data source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5f816-149">Objet du type spécifié dans la propriété <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> qui contient les données récupérées de la source de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f816-149">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the data that was retrieved from the data source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f816-150">Vous pouvez utiliser le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété pour vérifier les valeurs d’origine sur les valeurs actuelles dans la source de données et pour annuler l’opération de mise à jour ou effectuer une autre action.</span><span class="sxs-lookup"><span data-stu-id="5f816-150">You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property to check the original values against the current values in the data source and to cancel the update operation or take other action.</span></span>  
  
 <span data-ttu-id="5f816-151">Le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété contient des valeurs pour que les propriétés sont rendues persistantes dans la vue d’état dans la page Web.</span><span class="sxs-lookup"><span data-stu-id="5f816-151">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property contains values for only the properties that are persisted in view state in the Web page.</span></span> <span data-ttu-id="5f816-152">Une propriété est persistante dans ces circonstances :</span><span class="sxs-lookup"><span data-stu-id="5f816-152">A property is persisted under these circumstances:</span></span>  
  
-   <span data-ttu-id="5f816-153">Lorsqu’il est affiché dans un contrôle lié aux données.</span><span class="sxs-lookup"><span data-stu-id="5f816-153">When it is displayed in a data-bound control.</span></span>  
  
-   <span data-ttu-id="5f816-154">Lorsque le <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> propriété de la <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> attribut a la valeur `Always` ou `WhenChanged`.</span><span class="sxs-lookup"><span data-stu-id="5f816-154">When the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> property of the <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> attribute is set to `Always` or `WhenChanged`.</span></span>  
  
 <span data-ttu-id="5f816-155">Si le <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> propriété est définie sur `Never` et la valeur n’est pas affichée dans un contrôle lié aux données, la valeur n’est pas stockée dans la page Web.</span><span class="sxs-lookup"><span data-stu-id="5f816-155">If the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> property is set to `Never` and the value is not displayed in a data-bound control, the value is not stored in the Web page.</span></span> <span data-ttu-id="5f816-156">Dans ce cas, il ne peut pas être assigné à la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="5f816-156">In that case, it cannot be assigned to the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f816-157">L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement.</span><span class="sxs-lookup"><span data-stu-id="5f816-157">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="5f816-158">L’exemple montre comment comparer les propriétés de la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété et la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété afin de déterminer si la valeur dans le `Category` propriété a été modifiée.</span><span class="sxs-lookup"><span data-stu-id="5f816-158">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="5f816-159">Dans ce cas, le `CategoryChanged` propriété de l’objet dans le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété est définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="5f816-159">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>