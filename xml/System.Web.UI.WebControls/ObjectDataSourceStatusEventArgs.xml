<Type Name="ObjectDataSourceStatusEventArgs" FullName="System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6be5f9df6974b7b3fb5bbba8760a9bf8bd7106ac" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37591704" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectDataSourceStatusEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectDataSourceStatusEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ObjectDataSourceStatusEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des données pour les événements <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />, <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />, <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Updated" /> et <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" /> du contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> classe est utilisée dans le <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A>, <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A>, <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A>, et <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> méthodes pour fournir l’accès aux paramètres de sortie, les valeurs de retour et les exceptions levées par la méthode est appelée par le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. Ils sont accessibles par le <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.OutputParameters%2A>, <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A>, et <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.Exception%2A> propriétés, respectivement. En ajoutant un délégué pour gérer les <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>, <xref:System.Web.UI.WebControls.ObjectDataSource.Updated>, <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>, ou <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> événements, vous pouvez examiner ces données et effectuer tout post-traitement supplémentaire est nécessaire.  
  
 Le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle expose plusieurs événements que vous pouvez gérer pour travailler avec l’objet métier sous-jacent à différents moments dans son cycle de vie. Le tableau suivant répertorie les événements et associé <xref:System.EventArgs> classes et les délégués de gestionnaire d’événements.  
  
|événement|EventArgs|EventHandler|  
|-----------|---------------|------------------|  
|<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>.<br /><br /> Se produit immédiatement avant la création de l’instance de l’objet métier.|<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>|<xref:System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler>|  
|<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>.<br /><br /> Se produit immédiatement après la création de l’instance de l’objet métier.|<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>|<xref:System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler>|  
|<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>.<br /><br /> Se produit avant que les données sont récupérées.|<xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs>|<xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler>|  
|<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>, <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> et <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>.<br /><br /> Se produit avant une insertion, mise à jour ou opération de suppression est effectuée.|<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>|<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler>|  
|<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>.<br /><br /> Se produit une fois que les données sont récupérées.|<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>|<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler>|  
|<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>, <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> et <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>.<br /><br /> Se produit après l’insertion, mise à jour ou opération de suppression est terminée.|<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>|<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler>|  
|<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>.<br /><br /> Se produit avant la destruction d’un objet métier.|<xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs>|<xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler>|  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Le deuxième exemple de code fournit un exemple d’objet métier de couche intermédiaire qui utilise le premier exemple de code.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Le <xref:System.Web.UI.WebControls.GridView> affiche initialement un jeu de tous les employés, à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété pour récupérer les données à partir de la `EmployeeLogic` objet. Étant donné que le <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> propriété est définie sur `true`, le <xref:System.Web.UI.WebControls.GridView> contrôle qui affiche automatiquement une **supprimer** bouton.  
  
 Si vous cliquez sur le **supprimer** bouton, le <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> action est effectuée à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété et tous les paramètres qui sont spécifiés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. Dans cet exemple de code, un seul paramètre est spécifié dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection qui correspond à l’ID d’employé. Il s’agit, car bien que l’ID est inclus dans le <xref:System.Windows.Forms.DataGridView.Columns%2A> collection sous la forme un <xref:System.Web.UI.WebControls.BoundField> de l’objet, il sera passé sous forme de chaîne pour le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle. En l’ajoutant explicitement à la <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection avec un <xref:System.Web.UI.WebControls.Parameter.Type%2A> propriété définie sur le <xref:System.TypeCode.Int32> valeur, il passera correctement par le <xref:System.Web.UI.WebControls.ObjectDataSource> à la méthode en tant qu’entier, et non en tant que chaîne.  
  
 Dans cet exemple de code, certaines étapes de prétraitement et de post-traitement sont également effectuées. Le `NorthwindEmployeeDeleting` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement avant la <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> action est effectuée et le `NorthwindEmployeeDeleted` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> événement après la <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> action terminée, afin de gérer les exceptions qui se sont produites. Le `NorthwindEmployeeDeleted` délégué accède aux exceptions qui sont levées par l’objet métier qui utilise le <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> objet. Dans cet exemple, si un `NorthwindDataException` est levée, elle est gérée par ce délégué.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 L’exemple de code suivant fournit un exemple d’objet métier de couche intermédiaire qui utilise l’exemple de code précédent. La liste suivante décrit les deux classes principales qui sont définies dans l’exemple de code :  
  
-   Le `EmployeeLogic` est une classe qui ne conserve pas l’état et encapsule la logique métier.  
  
-   Le `NorthwindEmployee` classe est une classe de modèle qui contient uniquement les fonctionnalités de base qui sont requis pour charger et rendre persistantes des données à partir de la couche données.  
  
 En outre, un `NorthwindDataException` classe est fournie pour des raisons pratiques.  
  
 Cet ensemble d’exemples de classes utilise la base de données Northwind Traders, qui est une base de données exemple est disponible avec Microsoft SQL Server et Microsoft Access. Pour obtenir un exemple complet, vous devez compiler ce code comme une bibliothèque et ensuite utiliser ces classes à partir d’une page ASP. La page ASP qui est fournie dans l’exemple précédent est configurée pour fonctionner avec cette bibliothèque de classes.  Le `UpdateEmployeeInfo` méthode n’est pas complètement implémentée, afin de vous ne serez pas insérer des données dans la base de données Northwind Traders, lorsque vous testez cet exemple.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSourceStatusEventArgs (object returnValue, System.Collections.IDictionary outputParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object returnValue, class System.Collections.IDictionary outputParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.#ctor(System.Object,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (returnValue As Object, outputParameters As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSourceStatusEventArgs(System::Object ^ returnValue, System::Collections::IDictionary ^ outputParameters);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs : obj * System.Collections.IDictionary -&gt; System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs (returnValue, outputParameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="outputParameters" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="returnValue">Objet qui représente une valeur de retour une fois l'opération de base de données terminée.</param>
        <param name="outputParameters">
          <see cref="T:System.Collections.IDictionary" /> de paires nom/valeur d'objets de paramètre.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> à l'aide des paramètres de sortie et de la valeur de retour spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `returnValue` paramètre peut être n’importe quel objet qui est retourné par un appel à la méthode de données d’objet métier. Le `outputParameters` paramètre est un <xref:System.Collections.IDictionary> collection de paires nom/valeur qui correspondent à ceux de la signature de méthode et sont passés par référence.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.OutputParameters" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSourceStatusEventArgs (object returnValue, System.Collections.IDictionary outputParameters, Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object returnValue, class System.Collections.IDictionary outputParameters, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.#ctor(System.Object,System.Collections.IDictionary,System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSourceStatusEventArgs(System::Object ^ returnValue, System::Collections::IDictionary ^ outputParameters, Exception ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs : obj * System.Collections.IDictionary * Exception -&gt; System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs (returnValue, outputParameters, exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="outputParameters" Type="System.Collections.IDictionary" />
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="returnValue">Objet qui représente une valeur de retour une fois l'opération de base de données terminée.</param>
        <param name="outputParameters">
          <see cref="T:System.Collections.IDictionary" /> de paires nom/valeur d'objets de paramètre.</param>
        <param name="exception">
          <see cref="T:System.Exception" /> qui encapsule les exceptions internes levées lors de l'appel de méthode.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> à l'aide des paramètres de sortie, de la valeur de retour et de l'exception spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `returnValue` paramètre peut être n’importe quel objet qui est retourné par un appel à la méthode de données d’objet métier. Le `outputParameters` paramètre est un <xref:System.Collections.IDictionary> collection de paires nom/valeur qui correspondent à ceux de la signature de méthode et sont passés par référence. Le `exception` paramètre est un <xref:System.Exception> exception qui encapsule les exceptions levées par la méthode est appelée par le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle pendant une opération de données. Si l’exception n’est pas gérée par un <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A>, <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A>, <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A>, ou <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> (méthode), elle est levée par le <xref:System.Web.UI.WebControls.ObjectDataSource> contrôler après le retour de l’opération de données.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.OutputParameters" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="AffectedRows">
      <MemberSignature Language="C#" Value="public int AffectedRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AffectedRows" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectedRows As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AffectedRows { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AffectedRows : int with get, set" Usage="System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nombre de lignes affectées par l'opération de données.</summary>
        <value>Nombre de lignes affectées par l'opération de données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> valeur pour vérifier que le nombre attendu de lignes a été affecté.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un wrapper pour toute exception levée par la méthode appelée par le contrôle <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> lors d'une opération de données.</summary>
        <value>
          <see cref="T:System.Exception" /> qui encapsule les exceptions levées par l'objet métier dans son <see cref="P:System.Exception.InnerException" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Exception> exception ne représente pas l’exception réelle qui est levée par la méthode de données d’objet métier. Vous pouvez utiliser le <xref:System.Exception.InnerException%2A> propriété pour accéder à l’exception levée.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Le <xref:System.Web.UI.WebControls.GridView> affiche initialement un jeu de tous les employés, à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété pour récupérer les données à partir de la `EmployeeLogic` objet. Étant donné que le <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> propriété est définie sur `true`, le <xref:System.Web.UI.WebControls.GridView> contrôle qui affiche automatiquement une **supprimer** bouton.  
  
 Si vous cliquez sur le **supprimer** bouton, le <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> action est effectuée à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété et tous les paramètres qui sont spécifiés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection.  
  
 Dans cet exemple de code, certaines étapes de prétraitement et de post-traitement sont également effectuées. Le `NorthwindEmployeeDeleting` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement avant la <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> action est effectuée et le `NorthwindEmployeeDeleted` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> événement après la <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> action terminée, pour effectuer toute la gestion des exceptions. Dans cet exemple, si un `NorthwindDataException` est levée, elle est gérée par le `NorthwindEmployeeDeleted` déléguer.  
  
 Pour examiner l’implémentation de la `EmployeeLogic` objet métier de couche intermédiaire utilisé par cet exemple de code, consultez la vue d’ensemble de la classe dans <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si une exception qui a été levée par l'objet métier a été gérée.</summary>
        <value>
          <see langword="true" /> si une exception levée par l'objet métier a été gérée et ne doit pas être levée par <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’objet métier lève une exception, le <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ExceptionHandled%2A> propriété est définie sur `false` et l’exception est encapsulée par la <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.Exception%2A> propriété. Si vous utilisez un <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler> de l’objet, vous pouvez vérifier le <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.Exception%2A> propriété et gérer l’exception. Si vous gérez l’exception, affectez la <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ExceptionHandled%2A> propriété `true` ou <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle lèvera une exception.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.ObjectDataSource> contrôle avec un objet métier et un <xref:System.Web.UI.WebControls.GridView> contrôle pour supprimer des données. Le <xref:System.Web.UI.WebControls.GridView> affiche initialement un jeu de tous les employés, à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> propriété pour récupérer les données à partir de la `EmployeeLogic` objet. Étant donné que le <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> propriété est définie sur `true`, le <xref:System.Web.UI.WebControls.GridView> contrôle qui affiche automatiquement une **supprimer** bouton.  
  
 Si vous cliquez sur le **supprimer** bouton, le <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> action est effectuée à l’aide de la méthode qui est spécifiée par le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> propriété et tous les paramètres qui sont spécifiés dans le <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. Dans cet exemple de code, certaines étapes de prétraitement et de post-traitement sont également effectuées. Le `NorthwindEmployeeDeleting` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> événement avant la <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> action est effectuée et le `NorthwindEmployeeDeleted` délégué est appelé pour gérer le <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> événement après la <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> action terminée, afin de gérer les exceptions qui se sont produites. Dans cet exemple, si un `NorthwindDataException` est levée, elle est gérée par le `NorthwindEmployeeDeleted` déléguer.  
  
 Pour examiner l’implémentation de la `EmployeeLogic` objet métier de couche intermédiaire utilisé par cet exemple de code, consultez la vue d’ensemble de la classe dans <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.Exception" />
      </Docs>
    </Member>
    <Member MemberName="OutputParameters">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary OutputParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary OutputParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.OutputParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputParameters As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IDictionary ^ OutputParameters { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputParameters : System.Collections.IDictionary" Usage="System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.OutputParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection qui contient les paramètres de la méthode de l'objet métier et leurs valeurs.</summary>
        <value>
          <see cref="T:System.Collections.IDictionary" /> des paires nom/valeur qui représentent les paramètres de la méthode de l'objet métier et leurs valeurs correspondantes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tous les paramètres qui sont passés à la méthode d’objet métier par référence sont retournés dans le <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.OutputParameters%2A> collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnValue">
      <MemberSignature Language="C#" Value="public object ReturnValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ReturnValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReturnValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ReturnValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnValue : obj" Usage="System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur de retour retournée par la méthode de l'objet métier, le cas échéant, sous forme d'objet.</summary>
        <value>Objet qui représente la valeur de retour retournée par la méthode de l'objet métier ; sinon, <see langword="null" />, si la méthode de l'objet métier ne retourne aucune valeur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> propriété est définie dans le <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> constructeur. La valeur est définie sur la valeur de retour de l’appel de méthode objet métier, qui est appelée à l’aide de la réflexion. Si la méthode métier ne retourne aucune valeur (par exemple lorsque la méthode d’objet métier retourne `void`), la <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> propriété évaluée à `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>