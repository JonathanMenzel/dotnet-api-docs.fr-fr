<Type Name="Button" FullName="System.Web.UI.WebControls.Button">
  <Metadata><Meta Name="ms.openlocfilehash" Value="97835c334aeb6983aa3c9003c8dd43555415c178" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55323396" /></Metadata><TypeSignature Language="C#" Value="public class Button : System.Web.UI.WebControls.WebControl, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Button extends System.Web.UI.WebControls.WebControl implements class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Button" />
  <TypeSignature Language="VB.NET" Value="Public Class Button&#xA;Inherits WebControl&#xA;Implements IButtonControl, IPostBackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class Button : System::Web::UI::WebControls::WebControl, System::Web::UI::IPostBackEventHandler, System::Web::UI::WebControls::IButtonControl" />
  <TypeSignature Language="F#" Value="type Button = class&#xA;    inherit WebControl&#xA;    interface IButtonControl&#xA;    interface IPostBackEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IButtonControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:Button runat="server" Text="Button"&gt;&lt;/{0}:Button&gt;")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ButtonDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:Button runat=server Text="Button"&gt;&lt;/{0}:Button&gt;")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ButtonDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Affiche un contrôle bouton de commande sur la page web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans cette rubrique :  
  
-   [Introduction](#Introduction)  
  
-   [Comportement de publication (postback) de bouton et les événements de serveur](#ButtonPostbackBehaviorandServerEvents)  
  
-   [Gestion des événements de bouton dans le Script Client](#HandlingButtonEventsinClientScript)  
  
-   [Contrôles de bouton et une Validation](#ButtonControlsAndValidation)  
  
-   [Boutons dans les contrôles de données](#ButtonsInDataControls)  
  
-   [Liaison de données aux contrôles](#BindingDataToTheControls)  
  
-   [À l’aide des boutons avec les contrôles UpdatePanel](#UsingButtonsWithUpdatePanelControls)  
  
-   [Syntaxe déclarative](#DeclarativeSyntax)  
  
<a name="Introduction"></a>   
## <a name="introduction"></a>Introduction  
 Utilisez le <xref:System.Web.UI.WebControls.Button> contrôle pour créer un bouton de commande sur la page Web qui permet aux utilisateurs de publier une page sur le serveur. Le contrôle déclenche un événement dans le code de serveur que vous pouvez gérer pour répondre à la publication (postback). Il peut également déclencher un événement dans le script client que vous pouvez gérer avant que la page est publiée ou qui peut exécuter puis annuler la soumission de la page.  
  
> [!NOTE]
>  ASP.NET inclut plusieurs types de contrôles de bouton, qui apparaissent différemment sur les pages Web. Ils sont le <xref:System.Web.UI.WebControls.Button> contrôle, ce qui est rendu sous la forme d’un bouton de commande ; la <xref:System.Web.UI.WebControls.LinkButton> contrôle, qui est restitué sous forme de lien ; et le <xref:System.Web.UI.WebControls.ImageButton> contrôle, qui est restitué en tant qu’image ; et le <xref:System.Web.UI.WebControls.ImageMap> contrôle, ce qui vous permet de créer un graphique avec des zones réactives que les utilisateurs peuvent cliquer. Par défaut, tous les contrôles de bouton envoient la page lorsque vous cliquez sur. Vous pouvez également utiliser le <xref:System.Web.UI.HtmlControls.HtmlButton> et <xref:System.Web.UI.HtmlControls.HtmlInputButton> pour créer des boutons sur la page, les contrôles qui sont programmables dans le code serveur. Pour plus d’informations sur les différences entre les contrôles serveur HTML et Web, consultez [vue d’ensemble des contrôles serveur Web ASP.NET](https://msdn.microsoft.com/library/0d4854a3-6e79-4b7b-a27f-ac57cd9c2a84).  
  
 Par défaut, un <xref:System.Web.UI.WebControls.Button> contrôle est un bouton Envoyer. Un bouton d’envoi n’a pas un nom de commande (spécifié par le <xref:System.Web.UI.WebControls.Button.CommandName%2A> propriété) associées avec le bouton et les billets simplement de la page Web au serveur. Vous pouvez fournir un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.Button.Click> événement afin de contrôler par programme les actions effectuées lorsque l’utilisateur clique sur le bouton Envoyer.  
  
 Un bouton de commande a un nom de commande associé, comme avec le bouton, `Sort`, en définissant le <xref:System.Web.UI.WebControls.Button.CommandName%2A> propriété. Cela vous permet de créer plusieurs <xref:System.Web.UI.WebControls.Button> page de contrôles sur un serveur Web et déterminer par programmation qui <xref:System.Web.UI.WebControls.Button> clic sur le contrôle. Vous pouvez également utiliser le <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> propriété avec un bouton de commande pour fournir des informations supplémentaires sur la commande à effectuer, telle que `Ascending`. Vous pouvez fournir un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.Button.Command> événement afin de contrôler par programme les actions effectuées lorsque l’utilisateur clique sur le bouton de commande.  
  
<a name="ButtonPostbackBehaviorandServerEvents"></a>   
## <a name="button-postback-behavior-and-server-events"></a>Comportement de publication (postback) de bouton et les événements de serveur  
 Lorsqu’un utilisateur clique sur un bouton de contrôle de serveur Web, la page est envoyée au serveur. Cela provoque la page Web à traiter et des événements en attente pour être déclenché dans le code serveur. Lorsque tous les de page et de contrôler le traitement est terminé, la page s’affiche à nouveau dans le navigateur.  
  
 Les boutons peuvent déclencher leurs propres <xref:System.Web.UI.WebControls.Button.Click> événements ou <xref:System.Web.UI.WebControls.Button.Command> événement, que vous pouvez gérer à l’aide de code basé sur le serveur. Cela est différent de celui des événements dans des pages HTML traditionnelles ou des applications Web client, où un bouton de `onclick` événement est géré à l’aide de JavaScript qui s’exécute dans le client. Pour plus d’informations, consultez [modèle d’événement ASP.NET Web Forms Server contrôle](https://msdn.microsoft.com/library/6304bff7-1b0e-4641-8acb-6d3b0badc4a3).  
  
 Lorsque les utilisateurs cliquent sur un contrôle de bouton, la page est publiée sur le serveur. Par défaut, la page est publiée vers elle-même.  
  
 Vous pouvez configurer des boutons pour publier la page actuelle vers une autre page. Cela peut être utile pour créer des formulaires de plusieurs pages. Pour plus d’informations, consultez [plusieurs pages de validation dans ASP.NET Web Forms](https://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b).  
  
<a name="HandlingButtonEventsinClientScript"></a>   
## <a name="handling-button-events-in-client-script"></a>Gestion des événements de bouton dans le Script Client  
 Contrôles de bouton peuvent déclencher des événements de serveur et les événements client. Événements de serveur se produisent après la publication (postback), et elles sont gérées dans le code côté serveur que vous écrivez pour la page. Événements de client sont gérées dans le script client, généralement ECMAScript (JavaScript) et sont déclenchés avant la soumission de la page. En ajoutant des événements côté client aux contrôles de bouton ASP.NET, vous pouvez effectuer des tâches telles que l’affichage des boîtes de dialogue de confirmation avant d’envoyer la page et éventuellement annuler l’envoi. Pour plus d’informations, consultez [Script Client dans ASP.NET Web Pages](https://msdn.microsoft.com/library/13edb6b9-2dea-43c6-b8c1-a47207de19aa) et [Comment : Répondre aux événements de contrôle de serveur Web bouton dans le Script Client](https://msdn.microsoft.com/library/1ab97f0b-1c38-4897-85b0-ac915f6a182b).  
  
 Vous pouvez également souhaiter la <xref:System.Web.UI.WebControls.Button> contrôle également utiliser le script client pour effectuer la publication (au lieu de simplement une opération HTTP POST). Cela peut être utile si vous souhaitez manipuler par programme la publication (postback), par exemple y attacher à d’autres éléments sur la page. Vous pouvez définir le <xref:System.Web.UI.WebControls.Button> du contrôle <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> propriété `true` pour provoquer le <xref:System.Web.UI.WebControls.Button> publication basée sur le contrôle à utiliser le script client.  
  
<a name="ButtonControlsAndValidation"></a>   
## <a name="button-controls-and-validation"></a>Contrôles de bouton et une Validation  
 Si une page contient des contrôles de validateur ASP.NET, par défaut, en cliquant sur un contrôle bouton provoque le contrôle du programme de validation à effectuer son contrôle. Si la validation côté client est activée pour un contrôle de validateur, la page n’est pas envoyée si une vérification de validation a échoué.  
  
 Le tableau suivant décrit les propriétés prises en charge par les contrôles de bouton qui vous permettent de contrôler le processus de validation plus précisément.  
  
|Property|Description |  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.Button.CausesValidation%2A>|Indique si le bouton effectue également une vérification de validation. Définissez cette propriété sur `false` pour empêcher une vérification de validation.|  
|<xref:System.Web.UI.WebControls.Button.ValidationGroup%2A>|Vous permet de spécifier les validateurs de la page sont appelées lorsque le bouton est activé. Si aucun groupe de validation n’est établies, un clic de bouton appelle tous les validateurs qui se trouvent sur la page.|  
  
 Pour plus d’informations, consultez [Validation des entrées d’utilisateur dans des pages Web ASP.NET](https://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
<a name="ButtonsInDataControls"></a>   
## <a name="buttons-in-data-controls"></a>Boutons dans les contrôles de données  
 Les contrôles serveur Web de bouton sont souvent utilisés dans les contrôles de données, comme dans le <xref:System.Web.UI.WebControls.DataList>, <xref:System.Web.UI.WebControls.GridView>, et <xref:System.Web.UI.WebControls.Repeater> contrôles de liste. Dans ce cas, vous ne répondez généralement pas directement sur le bouton événement click. Au lieu de cela, un bouton dans un contrôle de données déclenche un événement qui est spécifique au contrôle de données. Par exemple, dans le <xref:System.Web.UI.WebControls.DataList> contrôle, un bouton peut déclencher la <xref:System.Web.UI.WebControls.DataList> du contrôle <xref:System.Web.UI.WebControls.DataList.ItemCommand> événements au lieu de déclencher le <xref:System.Web.UI.WebControls.Button> du contrôle <xref:System.Web.UI.WebControls.Button.Click> événement.  
  
 Étant donné que les contrôles de liste lié aux données peuvent contenir de nombreux boutons, vous pouvez définir le bouton <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> propriété pour spécifier une valeur à passer dans le cadre de l’événement. Vous pouvez ensuite tester cet argument voir quel bouton l’utilisateur a cliqué.  
  
<a name="BindingDataToTheControls"></a>   
## <a name="binding-data-to-the-controls"></a>Liaison de données aux contrôles  
 Vous pouvez lier les contrôles de serveur Web bouton à une source de données afin de contrôler les paramètres de la propriété dynamiquement. Par exemple, vous pouvez définir un bouton de <xref:System.Web.UI.WebControls.Button.Text%2A> propriété à l’aide de la liaison de données.  
  
<a name="UsingButtonsWithUpdatePanelControls"></a>   
## <a name="using-buttons-with-updatepanel-controls"></a>À l’aide des boutons avec les contrôles UpdatePanel  
 Rendu de page partielle permet d’actualiser des parties d’une page sans une publication (postback). <xref:System.Web.UI.UpdatePanel> contrôles permettent de marquer des parties de la page qui participent au rendu de page partiel. Par défaut, le comportement des contrôles à l’intérieur d’un <xref:System.Web.UI.UpdatePanel> contrôler, y compris <xref:System.Web.UI.WebControls.Button> contrôle, consiste à effectuer une publication (postback) asynchrone au lieu d’une publication (postback). Cette action actualise uniquement le contenu de la <xref:System.Web.UI.UpdatePanel> contrôler à partir de laquelle provient la publication.  
  
 Outre le scénario d’un <xref:System.Web.UI.WebControls.Button> contrôle qui se trouve dans un <xref:System.Web.UI.UpdatePanel> contrôle, vous pouvez utiliser <xref:System.Web.UI.WebControls.Button> contrôle avec <xref:System.Web.UI.UpdatePanel> contrôles dans les scénarios suivants :  
  
-   Définissant un <xref:System.Web.UI.WebControls.Button> contrôle qui n’est pas un <xref:System.Web.UI.UpdatePanel> contrôler en tant qu’un <xref:System.Web.UI.AsyncPostBackTrigger> contrôle pour ce panneau. Lorsque le bouton est activé, il effectue une publication (postback) asynchrone et actualise le contenu du panneau.  
  
-   Définition d’un <xref:System.Web.UI.WebControls.Button> contrôle qui se trouve dans un <xref:System.Web.UI.UpdatePanel> contrôler en tant qu’un <xref:System.Web.UI.PostBackTrigger> pour le panneau. Lorsque le bouton est activé, il effectue une publication (postback) bien qu’il soit à l’intérieur d’un <xref:System.Web.UI.UpdatePanel> contrôle.  
  
 Pour plus d’informations sur la page partielle de rendu et à l’aide de <xref:System.Web.UI.UpdatePanel> contrôles, consultez [vue d’ensemble du contrôle UpdatePanel](https://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a) et [vue d’ensemble du rendu de Page partielle](https://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Syntaxe déclarative  
  
```  
<asp:Button  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CausesValidation="True|False"  
    CommandArgument="string"  
    CommandName="string"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnClick="Click event handler"  
    OnClientClick="string"  
    OnCommand="Command event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    PostBackUrl="uri"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    Text="string"  
    ToolTip="string"  
    UseSubmitBehavior="True|False"  
    ValidationGroup="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer un envoi <xref:System.Web.UI.WebControls.Button> contrôle qui publie du contenu sur le serveur de la page Web.  
  
 [!code-aspx-csharp[Classic Button Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Button Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic Button Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Button Example/VB/sourcevb.aspx#1)]  
  
 L’exemple de code suivant montre comment créer une commande <xref:System.Web.UI.WebControls.Button> contrôle qui trie une liste.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
    <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
    <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Button ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Button();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez ce constructeur pour créer et initialiser une nouvelle instance de la <xref:System.Web.UI.WebControls.Button> classe.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer et initialiser une nouvelle instance de la <xref:System.Web.UI.WebControls.Button> classe.  
  
 [!code-aspx-csharp[ButtonCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCtor/CS/buttonctorcs.aspx#1)]
 [!code-aspx-vb[ButtonCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCtor/VB/buttonctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="button.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Web.UI.HtmlTextWriter" /> qui contient le flux de sortie à rendre sur le client.</param>
        <summary>Ajoute les attributs du contrôle <see cref="T:System.Web.UI.WebControls.Button" /> au flux de sortie pour le rendre sur le client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.WebControls.Button.AddAttributesToRender%2A> méthode dans un contrôle serveur personnalisé, afin que le <xref:System.Web.UI.WebControls.Button> affiche toujours la valeur texte en rouge.  
  
 [!code-aspx-csharp[CustomButtonAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/CS/custombuttonaddattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomButtonAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/VB/custombuttonaddattributestorendervb.aspx#1)]  
[!code-csharp[CustomButtonAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/CS/custombuttonaddattributestorender.cs#2)]
[!code-vb[CustomButtonAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/VB/custombuttonaddattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public virtual bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CausesValidation" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CausesValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CausesValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CausesValidation : bool with get, set" Usage="System.Web.UI.WebControls.Button.CausesValidation" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CausesValidation</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si une validation est effectuée suite à un clic sur le contrôle <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <value><see langword="true" /> si une validation est effectuée suite à un clic sur le contrôle <see cref="T:System.Web.UI.WebControls.Button" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, la validation de la page est effectuée lorsqu’un <xref:System.Web.UI.WebControls.Button> clic sur le contrôle. Validation de la page détermine si les contrôles d’entrée associé à un contrôle de validation sur la page que passent toutes les règles de validation spécifiées par le contrôle de validation.  
  
 Vous pouvez spécifier ou déterminer si une validation est effectuée sur le client et le serveur quand un <xref:System.Web.UI.WebControls.Button> clic sur le contrôle à l’aide de la <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> propriété. Pour empêcher l’exécution de la validation, définissez la <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> propriété `false`.  
  
> [!NOTE]
>  Vous devez définir le <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> propriété `false` lorsque vous utilisez le <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> propriété de publication sur une autre page. Vous devez vérifier explicitement la validation lors de la validation sur une autre page. Pour obtenir un exemple, consultez la section Notes de la <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> propriété.  
  
 Cette propriété est généralement définie `false` pour un `reset` ou `clear` bouton pour empêcher la validation en cours d’exécution lorsque le bouton est activé.  
  
 Lorsque la valeur de la <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> propriété est définie sur `true`, vous pouvez également utiliser le <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> propriété pour spécifier le nom du groupe de validation pour lequel le <xref:System.Web.UI.WebControls.Button> contrôle entraîne une validation.  
  
 Cette propriété ne peut pas être définie par les thèmes ou les thèmes de feuille de style. Pour plus d’informations, consultez <xref:System.Web.UI.ThemeableAttribute> et [thèmes ASP.NET et des apparences](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> propriété pour empêcher la validation de page. Notez que le <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> méthode activation indépendante de chaque contrôle de validation.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte une entrée d'utilisateur, ce qui constitue une menace potentielle pour la sécurité. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[ButtonControlCausesValidation#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonControlCausesValidation/CS/buttoncausesvalidationcs.aspx#1)]
 [!code-aspx-vb[ButtonControlCausesValidation#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonControlCausesValidation/VB/buttoncausesvalidationvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.Button.ValidationGroup" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Button.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.WebControls.IButtonControl.Click</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit suite à un clic sur le contrôle <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Button.Click> événement est déclenché lorsque le <xref:System.Web.UI.WebControls.Button> clic sur le contrôle. Cet événement est généralement utilisé quand aucun nom de commande n’est associée à la <xref:System.Web.UI.WebControls.Button> contrôle (par exemple, avec un bouton d’envoi).  
  
 Pour plus d'informations sur la gestion des événements, voir [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment spécifier et coder un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.Button.Click> événement afin d’afficher un message sur le Web page lorsque le <xref:System.Web.UI.WebControls.Button> clic sur le contrôle.  
  
 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.CommandEventHandler Command;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.CommandEventHandler Command" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Button.Command" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Command As CommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Web::UI::WebControls::CommandEventHandler ^ Command;" />
      <MemberSignature Language="F#" Value="member this.Command : System.Web.UI.WebControls.CommandEventHandler " Usage="member this.Command : System.Web.UI.WebControls.CommandEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.WebControls.IButtonControl.Command</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.CommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit suite à un clic sur le contrôle <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Button.Command> événement est déclenché lorsque le <xref:System.Web.UI.WebControls.Button> clic sur le contrôle. Cet événement est couramment utilisé lorsqu’un nom de commande, tel que `Sort`, est associé le <xref:System.Web.UI.WebControls.Button> contrôle. Cela vous permet de créer plusieurs <xref:System.Web.UI.WebControls.Button> page de contrôles sur un serveur Web et déterminer par programmation qui <xref:System.Web.UI.WebControls.Button> clic sur le contrôle.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.WebControls.Button.Command> événement est déclenché au moyen de la hiérarchie des contrôles sous la forme de la `BubbleEvent`.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment spécifier et coder un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.Button.Command> événements pour trier une liste lorsque le <xref:System.Web.UI.WebControls.Button> clic sur le contrôle. Cet exemple spécifie le Gestionnaire d’événements de manière déclarative, en utilisant le <xref:System.Web.UI.WebControls.Button.OnClick%2A> propriété de la <xref:System.Web.UI.WebControls.Button> contrôle.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 L’exemple de code suivant montre comment spécifier le Gestionnaire d’événements et l’ajouter par programme à l’événement dans le `Page_Load` (méthode).  
  
 [!code-aspx-csharp[ButtonCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-aspx-vb[ButtonCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="public string CommandArgument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandArgument" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CommandArgument" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandArgument As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandArgument { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandArgument : string with get, set" Usage="System.Web.UI.WebControls.Button.CommandArgument" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CommandArgument</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un paramètre optionnel passé à l'événement <see cref="E:System.Web.UI.WebControls.Button.Command" /> avec la propriété <see cref="P:System.Web.UI.WebControls.Button.CommandName" /> associée.</summary>
        <value>Paramètre optionnel passé à l'événement <see cref="E:System.Web.UI.WebControls.Button.Command" /> avec la propriété <see cref="P:System.Web.UI.WebControls.Button.CommandName" /> associée. La valeur par défaut est <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> propriété pour spécifier un paramètre qui complète la <xref:System.Web.UI.WebControls.Button.CommandName%2A> propriété.  
  
> [!NOTE]
>  Bien que vous pouvez définir le <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> propriété par lui-même, il est normalement utilisé uniquement lorsque le <xref:System.Web.UI.WebControls.Button.CommandName%2A> est également définie.  
  
 Le <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> propriété complète le <xref:System.Web.UI.WebControls.Button.CommandName%2A> propriété en vous permettant de fournir des informations supplémentaires sur la commande à exécuter. Par exemple, si vous définissez la <xref:System.Web.UI.WebControls.Button.CommandName%2A> propriété `Sort` et <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> propriété `Ascending`, vous spécifiez une commande pour trier par ordre croissant.  
  
 Cette propriété ne peut pas être définie par les thèmes ou les thèmes de feuille de style. Pour plus d’informations, consultez <xref:System.Web.UI.ThemeableAttribute> et [thèmes ASP.NET et des apparences](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> propriété pour créer un <xref:System.Web.UI.WebControls.Button> contrôle qui trie une liste dans l’ordre croissant.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public string CommandName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CommandName" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandName : string with get, set" Usage="System.Web.UI.WebControls.Button.CommandName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CommandName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la commande associé au contrôle <see cref="T:System.Web.UI.WebControls.Button" /> qui est passé à l'événement <see cref="E:System.Web.UI.WebControls.Button.Command" />.</summary>
        <value>Nom de commande du contrôle <see cref="T:System.Web.UI.WebControls.Button" />. La valeur par défaut est <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quand vous avez plusieurs <xref:System.Web.UI.WebControls.Button> contrôles sur une page Web, utilisez le <xref:System.Web.UI.WebControls.Button.CommandName%2A> propriété pour spécifier ou déterminer le nom de commande associées à chaque <xref:System.Web.UI.WebControls.Button> contrôle. Vous pouvez définir le <xref:System.Web.UI.WebControls.Button.CommandName%2A> propriété avec n’importe quelle chaîne qui identifie la commande à exécuter. Vous pouvez ensuite déterminer par programme le nom de commande le <xref:System.Web.UI.WebControls.Button> contrôler et d’effectuer les actions appropriées.  
  
 Des informations supplémentaires sur la commande, telles que `Ascending`, peut être spécifié à l’aide de la <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> propriété.  
  
 Cette propriété ne peut pas être définie par les thèmes ou les thèmes de feuille de style. Pour plus d’informations, consultez <xref:System.Web.UI.ThemeableAttribute> et [thèmes ASP.NET et des apparences](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.Button.CommandName%2A> propriété pour créer un <xref:System.Web.UI.WebControls.Button> contrôle qui trie une liste.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackOptions">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.PostBackOptions GetPostBackOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.PostBackOptions GetPostBackOptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.GetPostBackOptions" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetPostBackOptions () As PostBackOptions" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::PostBackOptions ^ GetPostBackOptions();" />
      <MemberSignature Language="F#" Value="abstract member GetPostBackOptions : unit -&gt; System.Web.UI.PostBackOptions&#xA;override this.GetPostBackOptions : unit -&gt; System.Web.UI.PostBackOptions" Usage="button.GetPostBackOptions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée un objet <see cref="T:System.Web.UI.PostBackOptions" /> qui représente le comportement du contrôle <see cref="T:System.Web.UI.WebControls.Button" /> lors de la publication.</summary>
        <returns><see cref="T:System.Web.UI.PostBackOptions" /> qui représente le comportement du contrôle <see cref="T:System.Web.UI.WebControls.Button" /> lors de la publication.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Button.GetPostBackOptions%2A> méthode crée un <xref:System.Web.UI.PostBackOptions> objet qui représente le <xref:System.Web.UI.WebControls.Button> comportement de publication (postback) du contrôle. Le <xref:System.Web.UI.PostBackOptions> objet est ensuite généralement passé à la <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%29?displayProperty=nameWithType> (méthode), qui est utilisé pour obtenir une référence à une fonction de script côté client qui, lorsqu’elle est appelée, entraîne le serveur de publication sur la page.  
  
 Cette méthode est utilisée principalement par les développeurs de contrôles lors de l’extension la <xref:System.Web.UI.WebControls.Button> classe.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Vous pouvez remplacer le <see cref="M:System.Web.UI.WebControls.Button.GetPostBackOptions" /> méthode dans votre classe dérivée pour modifier les options de publication (postback) pour le contrôle de bouton ou pour appeler le script côté client lorsque le bouton est activé. Veillez à appeler la classe de base <see cref="M:System.Web.UI.WebControls.Button.GetPostBackOptions" /> méthode afin que les options de publication (postback) standards sont définies.</para></block>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
        <related type="Article" href="https://msdn.microsoft.com/library/13edb6b9-2dea-43c6-b8c1-a47207de19aa">Script client dans les Pages Web ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClick : EventArgs -&gt; unit&#xA;override this.OnClick : EventArgs -&gt; unit" Usage="button.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Web.UI.WebControls.Button.Click" /> du contrôle <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Button.Click> événement est déclenché lorsque le <xref:System.Web.UI.WebControls.Button> clic sur le contrôle. Cet événement est généralement utilisé quand aucun nom de commande n’est associée à la <xref:System.Web.UI.WebControls.Button> contrôle (par exemple, avec un bouton d’envoi).  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Web.UI.WebControls.Button.OnClick%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment spécifier et coder un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.Button.Click> événement afin d’afficher un message simple sur la page Web.  
  
 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Lors de la substitution de <see cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="T:System.EventArgs" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="OnClientClick">
      <MemberSignature Language="C#" Value="public virtual string OnClientClick { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnClientClick" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.OnClientClick" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property OnClientClick As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OnClientClick { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OnClientClick : string with get, set" Usage="System.Web.UI.WebControls.Button.OnClientClick" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le script côté client qui s'exécute lorsque l'événement <see cref="T:System.Web.UI.WebControls.Button" /> d'un contrôle <see cref="E:System.Web.UI.WebControls.Button.Click" /> est déclenché.</summary>
        <value>Script côté client qui s'exécute lorsque l'événement <see cref="T:System.Web.UI.WebControls.Button" /> d'un contrôle <see cref="E:System.Web.UI.WebControls.Button.Click" /> est déclenché.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> propriété pour spécifier le script côté client supplémentaire qui s’exécute quand un <xref:System.Web.UI.WebControls.Button> du contrôle <xref:System.Web.UI.WebControls.Button.Click> événement est déclenché. Le script que vous spécifiez pour cette propriété est rendu dans le <xref:System.Web.UI.WebControls.Button> du contrôle `OnClick` attribut en plus du contrôle prédéfinis de script côté client.  
  
 Cette propriété ne peut pas être définie par les thèmes ou les thèmes de feuille de style. Pour plus d’informations, consultez <xref:System.Web.UI.ThemeableAttribute> et [thèmes ASP.NET et des apparences](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Un projet de site Web Visual Studio avec code source est disponible pour accompagner cette rubrique : [Télécharger](https://go.microsoft.com/fwlink/?LinkId=192871).  
  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> propriété pour spécifier le script côté client supplémentaire qui s’exécute quand un <xref:System.Web.UI.WebControls.Button> clic sur le contrôle.  
  
 [!code-aspx-csharp[Button.OnClientClick#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.OnClientClick/cs/button.onclientclickcs.aspx#1)]
 [!code-aspx-vb[Button.OnClientClick#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.OnClientClick/vb/button.onclientclickvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="OnCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCommand (System.Web.UI.WebControls.CommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCommand(class System.Web.UI.WebControls.CommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCommand (e As CommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCommand(System::Web::UI::WebControls::CommandEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCommand : System.Web.UI.WebControls.CommandEventArgs -&gt; unit&#xA;override this.OnCommand : System.Web.UI.WebControls.CommandEventArgs -&gt; unit" Usage="button.OnCommand e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.CommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Web.UI.WebControls.Button.Command" /> du contrôle <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Button.Command> événement est déclenché lorsque le <xref:System.Web.UI.WebControls.Button> clic sur le contrôle. Cet événement est couramment utilisé lorsqu’un nom de commande, tel que `Sort`, est associé le <xref:System.Web.UI.WebControls.Button> contrôle. Cela vous permet de créer plusieurs <xref:System.Web.UI.WebControls.Button> page de contrôles sur un serveur Web et déterminer par programmation qui <xref:System.Web.UI.WebControls.Button> clic sur le contrôle.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.WebControls.Button.Command> événement est déclenché au moyen de la hiérarchie des contrôles sous la forme de la `BubbleEvent`.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Web.UI.WebControls.Button.OnCommand%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment spécifier et coder un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.Button.Command> événements pour trier une liste lorsque le <xref:System.Web.UI.WebControls.Button> clic sur le contrôle. Cet exemple spécifie le Gestionnaire d’événements de manière déclarative, en utilisant le <xref:System.Web.UI.WebControls.Button.OnClick%2A> propriété de la <xref:System.Web.UI.WebControls.Button> contrôle.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 L’exemple de code suivant montre comment spécifier le Gestionnaire d’événements et l’ajouter par programme à l’événement dans le `Page_Load` (méthode).  
  
 [!code-aspx-csharp[ButtonCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-aspx-vb[ButtonCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Lors de la substitution de <see cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventArgs" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="button.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Données d'événement.</param>
        <summary>Détermine si un clic a été effectué sur le bouton avant son affichage sur le client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Button.OnPreRender%2A> méthode est principalement utilisée par les développeurs de contrôles lorsque vous dérivez une classe personnalisée à partir de la <xref:System.Web.UI.WebControls.Button> contrôle.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="PostBackUrl">
      <MemberSignature Language="C#" Value="public virtual string PostBackUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostBackUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.PostBackUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PostBackUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ PostBackUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PostBackUrl : string with get, set" Usage="System.Web.UI.WebControls.Button.PostBackUrl" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.PostBackUrl</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.UrlProperty("*.aspx")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'URL de la page sur laquelle publier à partir de la page actuelle suite à un clic sur le contrôle <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <value>URL de la page Web sur laquelle publier à partir de la page actuelle suite à un clic sur le contrôle <see cref="T:System.Web.UI.WebControls.Button" />. La valeur par défaut est une chaîne vide ("") qui provoque la publication de la page sur elle-même.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> propriété vous permet d’effectuer une publication à l’aide de plusieurs pages le <xref:System.Web.UI.WebControls.Button> contrôle.  
  
> [!NOTE]
>  Les chemins d’accès correctement spécifiés uniquement fonctionnent avec cette propriété. Par exemple, chemins d’accès relatifs (test/default.aspx), les chemins d’accès absolus (https://localhost/WebApp/default.aspx) et virtuels (~ \Test\default.aspx) fonctionnent correctement. Incorrect tel que les chemins d’accès « / test/default.aspx » ou « \Test\default.aspx » ne fonctionnent pas. Consultez [chemins de projet Web ASP.NET](https://msdn.microsoft.com/library/2447f50c-b849-483c-8093-85ed53e7a5bd) pour une discussion sur la création de chemins d’accès corrects.  
  
 Définir le <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> URL à la propriété de la page Web à publier sur lorsque le <xref:System.Web.UI.WebControls.Button> clic sur le contrôle. Par exemple, la spécification `Page2.aspx` , la page qui contienne le <xref:System.Web.UI.WebControls.Button> contrôle à valider dans `Page2.aspx`. Si vous ne spécifiez pas une valeur pour le <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> propriété, la page est publiée sur elle-même.  
  
> [!IMPORTANT]
>  Lorsque vous effectuez une publication (postback) entre pages avec des contrôles avec validation côté serveur, vous devez vous assurer que la page <xref:System.Web.UI.Page.IsValid%2A> propriété est `true` avant le traitement de la publication (postback). Dans le cas d’une publication (postback) entre pages, la page à vérifier est la <xref:System.Web.UI.Page.PreviousPage%2A>. Le code Visual Basic suivant montre comment procéder :  
  
```  
Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load  
        If Page.PreviousPage.IsValid Then  
            ' Handle the post back  
        Else  
            Response.Write("Invalid")  
        End If  
End Sub  
```  
  
 Pour plus d’informations sur les techniques de validation de plusieurs pages, consultez [plusieurs pages de validation dans ASP.NET Web Forms](https://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b).  
  
 Cette propriété ne peut pas être définie par les thèmes ou les thèmes de feuille de style. Pour plus d’informations, consultez <xref:System.Web.UI.ThemeableAttribute> et [thèmes ASP.NET et des apparences](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> propriété pour effectuer une publication de plusieurs pages. Lorsque l’utilisateur clique sur le <xref:System.Web.UI.WebControls.Button> , la page de publication (postback) la valeur entrée dans la zone de texte à la page cible spécifiée par le <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> propriété. Pour exécuter cet exemple, vous devez également créer un fichier pour la page cible dans le même répertoire que cet exemple de code. Le code pour la page cible est fourni dans l’exemple suivant.  
  
 [!code-aspx-csharp[Button.PostBackUrlProperty#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.PostBackUrlProperty/CS/button.postbackurlpropertycs.aspx#1)]
 [!code-aspx-vb[Button.PostBackUrlProperty#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.PostBackUrlProperty/VB/button.postbackurlpropertyvb.aspx#1)]  
  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.Page.PreviousPage%2A?displayProperty=nameWithType> propriété pour accéder à une valeur qui a été validée à partir d’une autre page à l’aide du <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> propriété. Cette page Obtient la chaîne qui a été validée à partir de la page précédente et l’affiche à l’utilisateur. Si vous essayez d’exécuter cet exemple de code directement, vous obtiendrez une erreur, car la valeur de la `text` champ sera `null`. À la place, utiliser ce code pour créer une page cible et placez le fichier dans le même répertoire que le code pour l’exemple précédent. Le nom du fichier doit correspondre à la valeur spécifiée pour le <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> propriété dans l’exemple précédent. Lorsque vous exécutez le code pour l’exemple précédent, cette page s’exécutera automatiquement lors de la publication entre pages.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte une entrée d'utilisateur, ce qui constitue une menace potentielle pour la sécurité. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Button.PostBackUrlPage2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.PostBackUrlPage2/CS/button.postbackurlpage2cs.aspx#1)]
 [!code-aspx-vb[Button.PostBackUrlPage2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.PostBackUrlPage2/VB/button.postbackurlpage2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.PreviousPage" />
        <related type="Article" href="https://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b">Publication sur plusieurs pages dans une Page Web ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaisePostBackEvent : string -&gt; unit&#xA;override this.RaisePostBackEvent : string -&gt; unit" Usage="button.RaisePostBackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Argument pour l'événement.</param>
        <summary>Déclenche des événements pour le contrôle <see cref="T:System.Web.UI.WebControls.Button" /> pendant la publication sur le serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est utilisé en interne par le <xref:System.Web.UI.WebControls.Button> contrôle, lorsque vous cliquez dessus, pour déclencher un <xref:System.Web.UI.WebControls.Button.Click> événement et s’il est défini, un <xref:System.Web.UI.WebControls.Button.Command> événement.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected internal override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RenderContents (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RenderContents(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.RenderContents : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="button.RenderContents writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Objet <see cref="T:System.Web.UI.HtmlTextWriter" /> qui représente le flux de sortie utilisé pour rendre le contenu HTML sur le client.</param>
        <summary>Génère le rendu du contenu du contrôle via le writer spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.WebControls.Button.RenderContents%2A> méthode dans un serveur personnalisé contrôle afin qu’il affiche toujours texte après un personnalisé <xref:System.Web.UI.WebControls.Button> contrôle serveur.  
  
 [!code-aspx-csharp[CustomButtonRenderContents#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRenderContents/CS/custombuttonrendercontentscs.aspx#1)]
 [!code-aspx-vb[CustomButtonRenderContents#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRenderContents/VB/custombuttonrendercontentsvb.aspx#1)]  
[!code-csharp[CustomButtonRenderContents#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRenderContents/CS/custombuttonrendercontents.cs#2)]
[!code-vb[CustomButtonRenderContents#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRenderContents/VB/custombuttonrendercontents.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Argument pour l'événement.</param>
        <summary>Déclenche des événements pour le contrôle <see cref="T:System.Web.UI.WebControls.Button" /> pendant la publication sur le serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est utilisé en interne par le <xref:System.Web.UI.WebControls.Button> contrôle, lorsque vous cliquez dessus, pour déclencher un <xref:System.Web.UI.WebControls.Button.Click> événement et s’il est défini, un <xref:System.Web.UI.WebControls.Button.Command> événement.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.WebControls.Button.System%23Web%23UI%23IPostBackEventHandler%23RaisePostBackEvent%2A> méthode afin qu’elle déclenche toujours le <xref:System.Web.UI.WebControls.Button.OnClick%2A> événement personnalisé <xref:System.Web.UI.WebControls.Button> contrôle.  
  
 [!code-csharp[CustomButtonRaisePostBackEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRaisePostBackEvent/CS/custombuttonraisepostbackevent.cs#2)]
 [!code-vb[CustomButtonRaisePostBackEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRaisePostBackEvent/VB/custombuttonraisepostbackevent.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.WebControls.Button.Text" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la légende de texte affichée dans le contrôle <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <value>Légende de texte affichée dans le contrôle <see cref="T:System.Web.UI.WebControls.Button" />. La valeur par défaut est <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.Button.Text%2A> propriété pour spécifier ou déterminer la légende à afficher dans le <xref:System.Web.UI.WebControls.Button> contrôle.  
  
 La valeur de cette propriété, quand elle est définie, peut être enregistrée automatiquement dans un fichier de ressources à l’aide d’un outil de concepteur. Pour plus d’informations, consultez <xref:System.ComponentModel.LocalizableAttribute> et [globalisation et localisation](https://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.Button.Text%2A> propriété pour spécifier la légende affichée dans le <xref:System.Web.UI.WebControls.Button> contrôle.  
  
 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
    <Member MemberName="UseSubmitBehavior">
      <MemberSignature Language="C#" Value="public virtual bool UseSubmitBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSubmitBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.UseSubmitBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UseSubmitBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool UseSubmitBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseSubmitBehavior : bool with get, set" Usage="System.Web.UI.WebControls.Button.UseSubmitBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le contrôle <see cref="T:System.Web.UI.WebControls.Button" /> utilise le mécanisme d'envoi du navigateur client ou le mécanisme de publication ASP.NET.</summary>
        <value><see langword="true" /> si le contrôle utilise le mécanisme d'envoi du navigateur client ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> propriété pour spécifier si un <xref:System.Web.UI.WebControls.Button> contrôle utilise le client d’envoi du navigateur mécanisme ou le mécanisme de publication ASP.NET. Par défaut la valeur de cette propriété est `true`, ce qui provoque le <xref:System.Web.UI.WebControls.Button> mécanisme d’envoi contrôle à utiliser le navigateur. Si vous spécifiez `false`, l’infrastructure de page ASP.NET ajoute le script côté client à la page pour publier le formulaire sur le serveur.  
  
 Lorsque le <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> propriété est `false`, contrôle les développeurs peuvent utiliser le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> événement de publication de méthode pour retourner le client le <xref:System.Web.UI.WebControls.Button>. La chaîne retournée par la <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> méthode contient le texte de l’appel de fonction côté client et peuvent être insérée dans un gestionnaire d’événements côté client.  
  
 Cette propriété ne peut pas être définie par les thèmes ou les thèmes de feuille de style. Pour plus d’informations, consultez <xref:System.Web.UI.ThemeableAttribute> et [thèmes ASP.NET et des apparences](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> propriété pour spécifier le mécanisme d’envoi qui un <xref:System.Web.UI.WebControls.Button> contrôle utilise lors de la publication sur le serveur. Le <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> propriété est définie sur `false`, mécanisme de publication à l’origine le bouton à utiliser ASP.NET. Si vous affichez le code source pour la page rendue à l’aide de la commande d’afficher la Source de votre navigateur, vous verrez que le script côté client a été ajouté par l’infrastructure de page ASP.NET pour publier le formulaire sur le serveur.  
  
 [!code-aspx-csharp[Button.UseSubmitBehavior#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.UseSubmitBehavior/CS/button.usesubmitbehaviorcs.aspx#1)]
 [!code-aspx-vb[Button.UseSubmitBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.UseSubmitBehavior/VB/button.usesubmitbehaviorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
        <related type="Article" href="https://msdn.microsoft.com/library/13edb6b9-2dea-43c6-b8c1-a47207de19aa">Script client dans les Pages Web ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationGroup : string with get, set" Usage="System.Web.UI.WebControls.Button.ValidationGroup" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.ValidationGroup</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le groupe de contrôles pour lequel le contrôle <see cref="T:System.Web.UI.WebControls.Button" /> provoque la validation lors de la publication sur le serveur.</summary>
        <value>Groupe de contrôles dont le contrôle <see cref="T:System.Web.UI.WebControls.Button" /> provoque la validation lors de la publication sur le serveur. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Groupes de contrôle permettent d’affecter des contrôles de validation sur une page à une catégorie spécifique. Chaque groupe de validation peut être validé indépendamment des autres groupes de validation de la page. Utilisez le <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> propriété pour spécifier le nom du groupe de validation pour lequel le <xref:System.Web.UI.WebControls.Button> contrôle provoque la validation lors de la publication sur le serveur.  
  
 Cette propriété a un effet uniquement lorsque la valeur de la <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> propriété est définie sur `true`. Lorsque vous spécifiez une valeur pour le <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> propriété, seuls les contrôles de validation qui font partie du groupe spécifié sont validés lorsque le <xref:System.Web.UI.WebControls.Button> publication (postback) sur le serveur. Si vous ne spécifiez pas une valeur pour cette propriété et la <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> propriété est définie sur `true`, tous les contrôles de validation sur la page qui ne sont pas affectés à un groupe de validation sont validés lors de la publication (postback) sur le serveur.  
  
 Cette propriété ne peut pas être définie par les thèmes ou les thèmes de feuille de style. Pour plus d’informations, consultez <xref:System.Web.UI.ThemeableAttribute> et [thèmes ASP.NET et des apparences](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> propriété pour spécifier les contrôles à valider quand un <xref:System.Web.UI.WebControls.Button> publication (postback) sur le serveur. La page contient trois zones de texte pour capturer des données à partir de l’utilisateur et trois <xref:System.Web.UI.WebControls.RequiredFieldValidator> contrôles pour vous assurer que l’utilisateur ne laisse pas une zone de texte vide. Le <xref:System.Web.UI.WebControls.RequiredFieldValidator> contrôle pour tout d’abord deux zones de texte sont dans le `PersonalInfoGroup` groupe de validation et la <xref:System.Web.UI.WebControls.RequiredFieldValidator> contrôler pour la troisième zone de texte se trouve dans le `LocationInfoGroup` groupe de validation. Lorsque `Button1` est activé, seuls les contrôles de groupe de validation `PersonalInfoGroup` sont validés. Lorsque `Button2` est activé, seul le contrôle de groupe de validation `LocationInfoGroup` est validé.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte une entrée d'utilisateur, ce qui constitue une menace potentielle pour la sécurité. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Button.ValidationGroup#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.ValidationGroup/CS/button.validationgroupcs.aspx#1)]
 [!code-aspx-vb[Button.ValidationGroup#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.ValidationGroup/VB/button.validationgroupvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Button.CausesValidation" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">Contrôles serveur Web Button</related>
      </Docs>
    </Member>
  </Members>
</Type>