<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="43113d93d80de9936c4290c834d8d861c9f352d4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36581610" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permet l’utilisation de LINQ (Language-Integrated Query) dans une page web ASP.NET dans du texte de balisage pour récupérer et modifier des données à partir d’un objet de données.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans cette rubrique :  
  
-   [Introduction](#introduction)  
  
-   [Ordre des opérations](#order_of_operations)  
  
-   [Classer des données](#ordering_data)  
  
-   [Regroupement de données](#grouping_data)  
  
-   [Modifications de données](#data_modifications)  
  
-   [Évaluation de valeurs au moment de l’exécution](#evaluating_value_at_run_time)  
  
-   [Utilisation des procédures stockées](#working_with_stored_procedures)  
  
-   [Syntaxe déclarative](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduction  
 Language-Integrated Query (LINQ) est une syntaxe de requête qui définit un ensemble d’opérateurs de requête qui permettent d’exprimer de manière déclarative dans une des opérations parcours, de filtre et de projection. Langage de programmation NET. L’objet de données peut être une collection de données en mémoire ou un objet qui représente les données d’une base de données. Vous pouvez récupérer ou modifier les données sans avoir à écrire des commandes SQL pour chaque opération.  
  
 Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle vous permet d’utiliser LINQ dans une page Web ASP.NET en définissant des propriétés dans le texte de balisage. Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle utilise LINQ to SQL pour générer automatiquement les commandes de données. Pour plus d’informations sur LINQ to SQL, consultez [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 Lorsque vous récupérez des données à partir d’une collection de données en mémoire, vous définissez le <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propriété à la classe qui contient la collection de données. Vous définissez le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété à la propriété ou un champ qui retourne la collection de données. Par exemple, vous pouvez avoir une classe nommée `Person` qui contient une propriété nommée `FavoriteCities` qui retourne un tableau de valeurs de chaîne. Dans ce cas, vous définissez la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propriété `Person` et définir le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété `FavoriteCities`.  
  
 Lorsque vous interrogez une base de données, vous devez d’abord créer des classes d’entité qui représentent la base de données et ses tables. Vous pouvez utiliser la [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] ou l’utilitaire SqlMetal.exe pour générer ces classes. Vous définissez ensuite la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propriété à la classe qui représente la base de données et définir le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété à la propriété qui représente la table de base de données.  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a>Ordre des opérations  
 Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle applique des opérations de données dans l’ordre suivant :  
  
1.  Où (spécifier les enregistrements de données à retourner).  
  
2.  Order By (tri).  
  
3.  Group By (enregistrements de données d’agrégation qui partagent des valeurs).  
  
4.  Ordre des groupes par (trie les données groupées).  
  
5.  Sélectionnez (spécifier quels champs ou propriétés à retourner).  
  
6.  Tri automatique (trier les enregistrements de données par une propriété de l’utilisateur a sélectionné).  
  
7.  Page automatique (récupérer un sous-ensemble d’enregistrements de données qui ont été sélectionnés par l’utilisateur).  
  
 Vous pouvez ajouter des conditions à la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété à filtrer les enregistrements de données qui sont retournées par une requête. Si le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété n’est pas définie, la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle récupère tous les enregistrements à partir de l’objet de données.  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a>Classer des données  
 Vous utilisez le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> pour spécifier les noms des propriétés des données retournées à trier.  
  
> [!NOTE]
>  Lorsque vous utilisez la <xref:System.Web.UI.WebControls.LinqDataSource> contrôler avec [!INCLUDE[ss2k](~/includes/ss2k-md.md)] ou [!INCLUDE[ssEW](~/includes/ssew-md.md)] et <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> est définie sur `true`, vous devez fournir une valeur dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété. Par défaut, le <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> propriété est `true`. Si vous affectez une valeur à la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété, vous devez également inclure toutes les colonnes d’identité dans la liste des propriétés qui est retournée dans la requête.  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a>Regroupement de données  
 Vous utilisez le <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> pour spécifier les propriétés utilisées pour consolider des enregistrements de données qui ont les mêmes valeurs de propriété. Lorsque vous regroupez des données, vous pouvez inclure `Key` et `It`, qui sont créé de façon dynamique des propriétés, dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété. Le `Key` propriété fait référence aux valeurs dans les propriétés qui ont été utilisées pour regrouper les données. Par exemple, si vous groupez par une propriété nommée `Category`, le `Key` propriété contiendra toutes les valeurs uniques dans le `Category` propriété. Le `It` propriété fait référence à une collection d’enregistrements individuels dans un regroupement de données. Vous pouvez parcourir le `It` propriété à récupérer les enregistrements individuels qui ont été consolidées dans l’opération de regroupement. Par exemple, si vous groupez par une propriété nommée `Category`, le `It` propriété contient tous les enregistrements individuels qui partagent une valeur commune dans le `Category` propriété.  
  
 Vous utilisez le <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propriété pour spécifier les propriétés à utiliser pour trier les données groupées. Lorsque vous regroupez des données, le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété spécifie comment les enregistrements individuels dans les données groupées sont triées.  
  
 Par défaut, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle extrait les valeurs de toutes les propriétés d’un objet de données. Vous utilisez le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> pour spécifier les propriétés à retourner si vous souhaitez utiliser un sous-ensemble des propriétés disponibles. L’opération Select est appliquée après les clauses Where, Order By et Group By operations. Par conséquent, si vous créez un nom d’alias dans une clause Select, l’alias n’est pas disponible dans les autres clauses.  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a>Modifications de données  
 Vous pouvez spécifier si les modifications de données sont activées à l’aide de la <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, et <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> propriétés. L’interface utilisateur pour la modification des données d’une <xref:System.Web.UI.WebControls.LinqDataSource> contrôle est généralement fourni via un contrôle lié aux données, comme un <xref:System.Web.UI.WebControls.DetailsView> contrôle. En plus du paramètre <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, ou <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> à `true`, les conditions suivantes sont requises pour activer la modification automatique des données :  
  
-   Le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> une valeur ne peut pas être attribuée à la propriété.  
  
-   Le <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> une valeur ne peut pas être attribuée à la propriété.  
  
-   La classe qui est affectée à la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propriété doit dériver de <xref:System.Data.Linq.DataContext>.  
  
-   La propriété qui est affectée à la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété doit dériver de <xref:System.Data.Linq.Table%601>.  
  
 Vous pouvez limiter les propriétés affichées dans un contrôle lié aux données de deux manières. Vous pouvez soit définir la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété à un sous-ensemble de propriétés, ou vous pouvez définir les champs d’un contrôle lié aux données en ajoutant <xref:System.Web.UI.WebControls.DataControlField> contrôles. Toutefois, si vous définissez le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété, cela signifie que les opérations delete, insert et mise à jour automatique ne peut pas être activées. Si vous souhaitez activer la modification automatique des données pendant que vous travaillez avec un sous-ensemble de propriétés disponibles, ne définissez pas le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété. Au lieu de cela, extraire toutes les propriétés de l’objet de données et gérer ceux qui est affichées à l’aide du contrôle lié aux données. Lorsque vous utilisez la <xref:System.Web.UI.WebControls.DetailsView> contrôle ou <xref:System.Web.UI.WebControls.GridView> (contrôle), vous devez également définir le <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> ou <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> propriétés à `false`. Cela empêche le contrôle lié aux données à partir de l’ajout automatique de boutons pour la modification et la suppression des données. Toutes les valeurs qui ne sont pas affichés dans le contrôle lié aux données stockées dans l’état d’affichage. Elles sont transmises sans modification à la source de données lors de la mise à jour des données est effectuée.  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a>Évaluation de valeurs au moment de l’exécution  
 Si vous disposez évaluer des valeurs en cours d’exécution pour le tri, le filtrage, ou de valeurs de regroupement, vous pouvez ajouter des paramètres pour le <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, ou <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collections.  
  
 Si vous souhaitez spécifier des valeurs par défaut, vous pouvez ajouter des paramètres pour le <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection.  
  
 Si vous souhaitez examiner ou modifier des valeurs avant l’exécution de l’opération de données, vous pouvez gérer le <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, ou <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événements. Vous pouvez également gérer ces événements afin d’annuler l’opération de données ou pour examiner les erreurs de validation qui s’est produite lorsque vous définissez les propriétés de la classe de données en fonction de l’entrée d’utilisateur.  
  
 Pour examiner les valeurs une fois l’opération de données terminée, gérez le <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, ou <xref:System.Web.UI.WebControls.LinqDataSource.Updated> événements.  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a>Utilisation des procédures stockées  
 Vous utilisez la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle pour récupérer des données à partir d’une procédure stockée en créant un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> événement. Dans l’événement gestionnaire, vous appelez la méthode de la classe de contexte de données qui représente la procédure stockée et définir le résultat de la <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> propriété de la <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> objet. Si vous souhaitez activer la mise à jour automatique, insert et les opérations de suppression pour les données, le type qui est retourné à partir de la méthode doit correspondre au type spécifié dans le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété. Pour plus d’informations sur la création de méthodes de contexte de données, consultez [Comment : créer un DataContext, méthodes mappées aux procédures stockées et fonctions (Concepteur O/R)](http://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Syntaxe déclarative  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôle qui Récupère des données à partir d’une classe d’entité nommée `Products`. La classe d’entité peut avoir été générée à l’aide de la [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] ou l’utilitaire SqlMetal.exe. Le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété est configurée pour retourner uniquement les enregistrements qui ont une valeur dans le `Price` propriété supérieure à 50. A <xref:System.Web.UI.WebControls.GridView> contrôle est lié à la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle pour afficher les données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôle qui permet aux utilisateurs de mettre à jour, supprimer et insérer des enregistrements dans la source de données. A <xref:System.Web.UI.WebControls.DetailsView> contrôle est lié à la <xref:System.Web.UI.WebControls.LinqDataSource> contrôler et permet aux utilisateurs d’afficher et modifier les données. Notez que les commandes SQL sont nécessaires afin de sélectionner, mettre à jour, supprimer ou insérer des enregistrements.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> basés sur les événements qui définit l’objet de données sur une valeur dans la page Web.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôle qui est configuré pour regrouper en deux colonnes. Le `Key` propriété fait référence à un objet qui a deux propriétés, `ProductCategory` et `Color`. L’objet représenté par `It` est renommé (alias) à `Products`. Le texte renommé `Products` objet contient une collection d’enregistrements individuels dans un regroupement. Chaque instance contiendra toutes les colonnes de la `Products` table.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 L’exemple suivant montre deux <xref:System.Web.UI.WebControls.ListView> les contrôles qui affichent les données à partir de la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle dans l’exemple précédent. Un <xref:System.Web.UI.WebControls.ListView> contrôle affiche les données groupées et l’autre <xref:System.Web.UI.WebControls.ListView> contrôle affiche les noms individuels des produits qui appartiennent à ce groupe. Le contrôle lié aux données imbriqué <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> est définie sur `Products`, qui est l’alias de la `It` objet.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le contrôle <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> crée dynamiquement une clause Order By en fonction des valeurs dans la collection <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />.</summary>
        <value>
          <see langword="true" /> Si le <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> contrôle crée la clause Order By ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous définissez la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> propriété `true`, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle crée dynamiquement une clause Order By est basée sur les valeurs dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection. Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle trie les données par le premier paramètre, puis les données de chaque paramètre supplémentaire. Paramètres qui contiennent `null` ou une valeur vide ne sont pas inclus dans la clause Order By.  
  
 Vous ne définissez pas le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété lorsque le <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> a la valeur `true`, car l’analyseur crée dynamiquement la clause Order By. Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle lève une exception si le <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> a la valeur `true` et <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> valeurs est assignée à la propriété.  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôler avec la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> la valeur `true`. Un paramètre est inclus dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection qui organise les données en fonction de la propriété de nom d’un utilisateur sélectionne à partir d’un <xref:System.Web.UI.WebControls.DropDownList> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le contrôle <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> crée dynamiquement une clause Where basée sur les valeurs définies dans la collection <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />.</summary>
        <value>
          <see langword="true" /> si le contrôle <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> crée la clause Where ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous définissez la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propriété `true`, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle crée dynamiquement dont la clause à partir des paramètres dans le <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. Chaque paramètre que vous ajoutez à la <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection doit avoir son <xref:System.Web.UI.WebControls.Parameter.Name%2A> propriété une valeur qui correspond à une propriété de l’objet de données qui est interrogée. Généré automatiquement où clause vérifie si la valeur spécifiée dans le <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection égal à la valeur de la propriété correspondante dans l’objet de données. Si vous fournissez plusieurs paramètres, ils sont liés à un opérateur logique `AND` opération. Paramètres qui contiennent `null` ou une valeur vide ne sont pas incluses dans Where clause.  
  
 Généré automatiquement <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> clause peut uniquement tester l’égalité et peut lier les paramètres qu’avec le `AND` opération. Ne définissez pas le <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propriété `true` si vous devez ajouter une condition qui ne teste pas l’égalité ou si vous devez lier des paramètres à la `OR` opération. Vous pouvez accomplir ces tâches en définissant le <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propriété `false` et en ajoutant des espaces réservés dans les <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété pour chaque paramètre dans le <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. Dans le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété, faites précéder chaque nom avec le symbole @.  
  
 Vous ne définissez pas le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété lorsque le <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propriété est `true`, car l’analyseur crée dynamiquement l’emplacement où clause. Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle lève une exception si le <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propriété est `true` et <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> valeurs est assignée à la propriété.  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôler avec la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> la valeur `true`. A <xref:System.Web.UI.WebControls.GridView> contrôle est lié à la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle pour afficher les données qui sont retournées par la requête. A <xref:System.Web.UI.WebControls.DropDownList> contrôle est fourni, qui est rempli avec trois valeurs. Un paramètre est inclus dans le <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection avec le nom de la valeur `Category,` qui correspond à une des propriétés de l’objet de données. Son <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> est définie sur l’ID de la <xref:System.Web.UI.WebControls.DropDownList> contrôle. Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle crée automatiquement le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété à filtrer les enregistrements en fonction de la valeur que l’utilisateur sélectionne dans la <xref:System.Web.UI.WebControls.DropDownList> contrôle. La requête retourne les enregistrements dont `Category` propriété correspond à la valeur que l’utilisateur a sélectionné à partir de la <xref:System.Web.UI.WebControls.DropDownList> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le contrôle <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> prend en charge la navigation dans les sections de données lors de l’exécution.</summary>
        <value>
          <see langword="true" /> si l’utilisateur peut parcourir les données ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définir le <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> propriété `true` pour activer la pagination dans le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle. Pour autoriser l’utilisateur à parcourir les données, connectez-vous à un contrôle lié aux données qui fournit l’interface pour la pagination le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle. Lorsque le <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> est définie sur `true`, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle récupère uniquement le nombre d’enregistrements suffisant pour une page dans le contrôle lié aux données. Elle utilise le <xref:System.Linq.Enumerable.Skip%2A> et <xref:System.Linq.Enumerable.Take%2A> méthodes pour récupérer les enregistrements pour la page actuelle.  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôler avec la <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> propriété `true` et un <xref:System.Web.UI.WebControls.GridView> contrôle qui est lié à la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle. Le <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> propriété de la <xref:System.Web.UI.WebControls.GridView> contrôle est défini sur `true` pour fournir l’interface qui permet aux utilisateurs de parcourir les données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Récupère ou définit une valeur qui indique si le contrôle <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> prend en charge le tri des données lors de l’exécution.</summary>
        <value>
          <see langword="true" /> si l’utilisateur peut trier les données ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle prend en charge deux approches de tri des données. Vous pouvez utiliser la <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> propriété pour activer le tri de l’exécution, ou vous pouvez définir le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété pour définir l’ordre de tri au moment du design.  
  
 Définir le <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> propriété `true` pour activer le tri dans une <xref:System.Web.UI.WebControls.LinqDataSource> contrôle basé sur l’expression de tri d’un contrôle lié aux données. Le contrôle lié aux données fournit l’interface pour permettre à l’utilisateur de sélectionner au moment de l’exécution de la propriété à utiliser pour le tri.  
  
 Vous pouvez définir par programme l’ordre dans lequel les données sont retournées en définissant le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété pour les propriétés utilisées pour le tri. Lorsque le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> est définie sur une propriété et la <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> propriété est `true`, l’expression de tri du contrôle lié aux données est appliquée après l’expression dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété. Par conséquent, ce paramètre détermine le dernier tri des données.  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôler avec la <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> propriété `true` et un <xref:System.Web.UI.WebControls.GridView> contrôle qui est lié à la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle. Le <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> propriété de la <xref:System.Web.UI.WebControls.GridView> contrôle est défini sur `true` pour fournir l’interface qui permet aux utilisateurs de trier les données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit après la création d'une instance du type d'objet de contexte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> événement à examiner l’objet de type de contexte ou les exceptions levées pendant la création de l’objet. Vous récupérez l’objet de type de contexte à partir de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> propriété de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objet associé à cet événement. Vous récupérez l’exception a été levée pendant l’opération de données à partir de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propriété.  
  
 L’objet de type de contexte est créé au cours de select, update, insert et opérations de suppression et est réutilisé dans l’ensemble de la demande.  
  
 Il existe une seule fois lorsque l’événement n’est pas déclenché. C’est lorsque vous affectez par programme la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> propriété à un objet pendant le <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> événement. Une condition supplémentaire est inutile de soit les valeurs d’origine à stocker dans l’état d’affichage, soit l’objet dans le <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> propriété implémente la <xref:System.Data.Linq.ITable> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant la création d'une instance du type d'objet de contexte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle crée une instance du type qui est spécifié dans le <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propriété. Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle appelle le constructeur par défaut de l’objet de contexte de données pour créer une instance de l’objet. Il est possible que vous devez utiliser un constructeur par défaut, ou vous devez créer un objet qui est différente de celle spécifiée dans le <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propriété. Dans ce cas, vous devez gérer le <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> événement et créer manuellement l’objet de contexte de données.  
  
 L’objet de type de contexte est créé au cours de select, update, insert et opérations de suppression.  
  
 Il existe une seule fois lorsque l’événement n’est pas déclenché. C’est lorsque vous affectez par programme la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> propriété à un objet dans un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> événement. Une condition supplémentaire est inutile de soit les valeurs d’origine à stocker dans l’état d’affichage, soit l’objet dans le <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> propriété implémente la <xref:System.Data.Linq.ITable> interface.  
  
   
  
## Examples  
 L’exemple suivant montre comment créer l’objet de contexte de données à l’aide d’un constructeur par défaut lors de la <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> événement. Le code assigne l’objet à le <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> propriété.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant la suppression du type d'objet de contexte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous gérez le <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> événement à supprimer l’objet manuellement, ou pour effectuer un nettoyage spécifique à l’objet avant la destruction de l’objet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du type qui contient la propriété dont la valeur correspond aux données que vous souhaitez récupérer.</summary>
        <value>Nom de la classe à partir de laquelle récupérer les données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous utilisez la <xref:System.Web.UI.WebControls.LinqDataSource> contrôler pour récupérer des données à partir d’une collection de données en mémoire ou d’une base de données, vous devez spécifier deux propriétés. La première est une classe de contexte de données qui représente la source de données. Le deuxième est une propriété de la classe de contexte de données qui contient les données. Vous définissez la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propriété le nom de la classe de contexte de données et vous affectez le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété à la collection de données qui contient les données.  
  
 Par exemple, lorsque vous récupérez des données à partir d’une base de données, définissez la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> nom à la propriété de la classe qui représente la base de données. Définissez également le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété à la propriété qui représente la table dans la base de données. Pour générer des classes à partir d’une base de données, utilisez la [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] ou l’utilitaire SqlMetal.exe pour générer automatiquement ces classes.  
  
 Lorsque vous récupérez des données à partir d’une collection de données en mémoire comme un tableau, définir le <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> nom à la propriété de la classe qui contient la propriété du tableau. Définissez ensuite le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété à la propriété qui obtient le tableau.  
  
 Pour activer la mise à jour automatique, insérer ou supprimer des opérations via la <xref:System.Web.UI.WebControls.LinqDataSource> contrôler, la classe assignée à la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propriété doit dériver de <xref:System.Data.Linq.DataContext>. En outre, la propriété assignée à la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété doit dériver de <xref:System.Data.Linq.Table%601>. Si vous ne pas besoin pour activer la mise à jour automatique, insérez ou les opérations de suppression, vous pouvez attribuer le nom de n’importe quel type de classe pour le <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propriété.  
  
 Pour plus d’informations sur la sélection des données à partir d’une instance d’une classe, consultez la <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant montre comment définir le <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propriété à une classe qui contient un tableau de chaînes. Il montre également comment définir la propriété à une classe (générée par le [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]) qui représente une base de données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 La classe nommée `ExampleDataContext` que représente la table de base de données ne figure pas dans cet exemple. Pour cet exemple fonctionne, vous devez créer cette classe en ajoutant une classe LINQ To SQL appelée Example.dbml et en faisant glisser une table appelée Movie vers le [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Une classe nommée `ExampleDataContext` avec une propriété nommée `Movies` est généré.  
  
 L’exemple suivant montre la classe nommée `MovieLibrary` qui est référencé dans le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un affichage pouvant être interrogé.</summary>
        <returns>Affichage pouvant être interrogé.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> associée à ce contrôle.</summary>
        <returns>Objet qui joue le rôle d'interface pour les contrôles liés aux données.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour fournir un affichage personnalisé, vous pouvez substituer cette méthode dans une classe dérivée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Valeurs de clés de ligne des enregistrements à supprimer.</param>
        <param name="oldValues">Valeurs de ligne évaluées pour détecter les conflits de données.</param>
        <summary>Exécute une opération de suppression.</summary>
        <returns>Nombre d'enregistrements affectés par l'opération de suppression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, vous n’avez pas à appeler le <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> méthode depuis votre code. Lorsque vous utilisez un <xref:System.Web.UI.WebControls.LinqDataSource> contrôle avec un contrôle lié aux données, le contrôle lié aux données appelle automatiquement la <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> méthode lorsque l’utilisateur exécute l’action pour supprimer un enregistrement. Vous appelez explicitement le <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> méthode lorsque vous souhaitez créer votre propre processus de suppression des données. Par exemple, vous pouvez appeler la <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> méthode lorsque vous souhaitez supprimer un enregistrement basée sur un événement en dehors du contrôle lié aux données.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit une fois l'opération de suppression terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> événement pour intercepter toute exception de l’opération de suppression ou examiner les paramètres de sortie une fois l’opération terminée. Vous pouvez récupérer les paramètres de sortie à partir de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objet qui est passé aux gestionnaires d’événements.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cette propriété n'est pas utilisée par la classe <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>Collection de paramètres.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération de suppression.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> événements pour valider l’objet à supprimer, pour examiner les erreurs de validation de données à partir de la classe de données, pour modifier une valeur avant la suppression ou pour annuler l’opération de suppression. Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle passe une <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> objet aux gestionnaires d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> événement. Le <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> objet contient les données qui seront supprimées et vous permet d’annuler l’opération de suppression. Si la classe de données lève une <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> exception, le <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> objet contient une exception dans le <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> propriété.  
  
 Si une exception est levée dans un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> événement, vous devez gérer l’exception dans ce gestionnaire d’événements. Exception ne sera pas être passé à un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> événement (via la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propriété de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objet). Le <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propriété contient uniquement les exceptions levées après le <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> événement.  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> événement. Le code annule l’opération de suppression basée sur une propriété dans le <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> propriété et une valeur à partir de la page Web. Dans l’exemple, lorsque le `OnSale` est définie sur `true`, l’utilisateur doit sélectionner un <xref:System.Web.UI.WebControls.CheckBox> contrôle pour confirmer qu’un enregistrement doit être supprimé.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les enregistrements de données peuvent être supprimés via le contrôle <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" /> si les opérations de suppression automatique sont activées ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définir le <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> propriété `true` lorsque vous souhaitez permettre aux utilisateurs de supprimer un enregistrement de données via le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle. Lorsque <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> est `true`, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle utilise LINQ to SQL pour créer automatiquement la commande pour supprimer les données. Vous devez inclure une interface qui permet aux utilisateurs de sélectionner un enregistrement à supprimer, par exemple un <xref:System.Web.UI.WebControls.DetailsView> contrôle.  
  
 Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle ne prend pas en charge les opérations de suppression automatique lorsque le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété ou la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> est définie. Dans ce cas, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle lève une exception si une opération de suppression est tentée.  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôle a <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> la valeur `true`. A <xref:System.Web.UI.WebControls.DetailsView> contrôle affiche les données et crée un bouton qui permet aux utilisateurs de supprimer un enregistrement de données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les enregistrements de données peuvent être insérés via le contrôle <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" /> si les opérations d'insertion automatique sont activées ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définir le <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> propriété `true` lorsque vous souhaitez permettre aux utilisateurs d’insérer un nouvel enregistrement de données via le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle. Lorsque <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> est `true`, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle utilise LINQ to SQL pour créer automatiquement la commande pour insérer les données. Vous devez inclure une interface qui permet aux utilisateurs d’insérer un nouvel enregistrement, comme un <xref:System.Web.UI.WebControls.DetailsView> contrôle.  
  
 Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle ne prend pas en charge les opérations d’insertion automatique lorsque le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété ou la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> est définie. Dans ce cas, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle lève une exception si une opération d’insertion est tentée.  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôle a <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> la valeur `true`. A <xref:System.Web.UI.WebControls.DetailsView> contrôle affiche les données et affiche un bouton qui bascule le contrôle pour insérer le mode dans lequel les utilisateurs peuvent créer et enregistrer un nouvel enregistrement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur qui indique si les modifications apportées à l'objet de contexte de données font l'objet d'un suivi.</summary>
        <value>
          <see langword="true" /> si les modifications apportées à l'objet de contexte de données font l'objet d'un suivi ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> propriété est utilisée uniquement lors de la sélection des données à partir d’un objet de contexte de données LINQ To SQL.  
  
 Lorsque vous interagissez avec des données en lecture seule, définissez la <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> propriété `false` améliore les performances, car les données ne sont pas mis en cache pour déterminer si elle a changé. Toutefois, elle désactive également l’exécution de requête différée. Cette propriété doit être définie `true` si vous souhaitez utiliser l’exécution de requête différée.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les enregistrements de données peuvent être mis à jour via le contrôle <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" /> si les opérations de mise à jour automatique sont activées ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définir le <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> propriété `true` lorsque vous souhaitez permettre aux utilisateurs de mettre à jour un enregistrement de données à l’aide de la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle. Lorsque <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> est `true`, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle utilise LINQ to SQL pour créer automatiquement la commande pour mettre à jour les données. Vous devez inclure une interface qui permet aux utilisateurs de mettre à jour d’un enregistrement, comme un <xref:System.Web.UI.WebControls.DetailsView> contrôle.  
  
 Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle ne prend pas en charge les opérations de mise à jour automatique lorsque le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété ou la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> est définie. Dans ce cas, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle lève une exception si une opération de mise à jour est tentée.  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôle a <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> la valeur `true`. A <xref:System.Web.UI.WebControls.DetailsView> contrôle affiche les données et crée un bouton qui permet aux utilisateurs de mettre à jour un enregistrement de données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui spécifie les propriétés utilisées pour regrouper les données récupérées.</summary>
        <value>Chaîne qui est utilisée pour créer la clause Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous utilisez le <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> pour spécifier les propriétés utilisées pour consolider des enregistrements de données qui ont les mêmes valeurs de propriété. Par exemple, si vous définissez la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propriété `Name`, tous les enregistrements dans la requête qui ont le même `Name` valeur de propriété sont retournées en tant qu’un seul enregistrement consolidé.  
  
 Vous pouvez affecter plusieurs propriétés pour le <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propriété en plaçant toutes les propriétés de la `new` (fonction) et en séparant chaque propriété à l’aide d’une virgule. Par exemple, pour regrouper les propriétés `Name` , puis `Category`, définissez le <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propriété `new(Name, Category)`.  
  
 Les valeurs dans la propriété qui sont utilisées pour le regroupement sont retournées via une propriété générée nommée `Key`. Vous incluez la `Key` propriété dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété à récupérer les valeurs groupées. Vous pouvez définir le `Key` propriété à un alias à l’aide de la `As` (mot clé), mais vous ne doivent pas utiliser un alias. Par exemple, vous pouvez définir le <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propriété à une propriété nommée `Category`. Vous pouvez récupérer les valeurs consolidées depuis la `Category` propriété en définissant le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété `new(Key As ProductCategory)`.  
  
 Vous pouvez accéder à des enregistrements individuels dans un regroupement en incluant la `It` propriété dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété. Le `It` propriété contient une collection d’enregistrements qui partagent une valeur dans la propriété groupée. Vous pouvez parcourir le `It` propriété à récupérer les enregistrements individuels.  
  
 Le <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propriété est souvent utilisée avec les méthodes d’agrégation. Vous pouvez utiliser les méthodes d’agrégation suivantes :  
  
-   `Count()`  
  
-   `Average(` *Colonne* `)`  
  
-   `Sum(` *Colonne* `)`  
  
-   `Max(` *Colonne* `)`  
  
-   `Min(` *Colonne* `)`  
  
-   `Where(` *Condition* `)`  
  
-   `Any()`  
  
-   `All(` *Condition* `)`  
  
 Pour plus d’informations, consultez [NIB : vue d’ensemble du contrôle serveur Web LinqDataSource](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) et [Comment : groupe et données agrégées à l’aide du contrôle LinqDataSource](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôle qui regroupe les données retournées par une propriété nommée `Category`. Il retourne les valeurs partagées et calcule le prix moyen pour les enregistrements groupés.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôle qui est configuré pour regrouper en deux colonnes. Le `Key` propriété fait référence à un objet qui a deux propriétés, `ProductCategory` et `Color`. L’objet représenté par `It` est renommé `Products`. Le texte renommé `Products` objet contient une collection d’enregistrements individuels dans un regroupement, et chaque instance contient toutes les colonnes de la table Products.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 L’exemple suivant montre deux <xref:System.Web.UI.WebControls.ListView> contrôles pour afficher les données à partir de la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle dans l’exemple précédent. Un <xref:System.Web.UI.WebControls.ListView> contrôle affiche les données groupées et l’autre <xref:System.Web.UI.WebControls.ListView> contrôle affiche les noms individuels des produits qui appartiennent à ce groupe. Le contrôle lié aux données imbriqué <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> est définie sur `Products`, qui est l’alias de la `It` objet.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres utilisés pour créer la clause Group By.</summary>
        <value>Les paramètres qui sont utilisés pour créer la clause Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle utilise des paramètres de la <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection pour créer la clause Group By au moment de l’exécution. En général, vous utiliserez pas les <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection pour regrouper les données. Au lieu de cela, vous pouvez utiliser le <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propriété. Vous utilisez la <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection uniquement lorsqu’une valeur dans la clause Group By doit être définie au moment de l’exécution, et cette valeur n’est pas un nom de propriété. Par exemple, utiliser le <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> regroupement pour regrouper des données basé sur le fait que le `LastName` propriété dans les enregistrements de données est égal à une valeur fournie par l’utilisateur.  
  
 Si vous souhaitez regrouper les données par une propriété et que cette propriété ne doit pas être définie au moment de l’exécution, vous pouvez définir la propriété de regroupement dans le <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propriété. Par exemple, pour retourner des valeurs à partir d’une table de base de données regroupées par `LastName`, définissez <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> « LastName » sans paramètres. Si vous souhaitez regrouper dynamiquement des données par une propriété, créez un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> événement et personnaliser le <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propriété en fonction des besoins.  
  
 Vous ne pouvez pas affecter le nom d’une propriété comme valeur pour un paramètre dans le <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection. Vous ajoutez des paramètres à la <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection lorsque vous souhaitez ajouter une condition à la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propriété doit être définie au moment de l’exécution.  
  
 Pour définir des valeurs dans le <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection, vous attribuez un nom à chaque paramètre et puis ajoutez un espace réservé dans le <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propriété pour ce paramètre. Dans la clause Group By, faites précéder chaque nom de paramètre avec le symbole @.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">Valeurs de ligne à insérer dans la source de données.</param>
        <summary>Exécute une opération d'insertion.</summary>
        <returns>Nombre de lignes affectées par l'opération d'insertion.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, vous n’avez pas à appeler le <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> méthode depuis votre code. Le contrôle lié aux données appelle automatiquement la <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> méthode lorsque l’utilisateur exécute l’action pour insérer un nouvel enregistrement. Vous appelez explicitement le <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> méthode lorsque vous souhaitez créer votre propre processus d’insertion de données.  
  
   
  
## Examples  
 L’exemple suivant montre comment insérer par programme un nouvel enregistrement dans la source de données une fois que l’utilisateur clique sur un bouton. Le code transmet une <xref:System.Collections.Specialized.ListDictionary> valeurs de l’objet qui contient la valeur par défaut à la <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> (méthode).  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 L’exemple suivant montre le balisage de l’exemple précédent.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit une fois l'opération d'insertion terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> événement pour intercepter toute exception de l’opération d’insertion ou examiner les valeurs une fois l’opération d’insertion est terminée. Vous pouvez récupérer les nouvelles valeurs via le <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objet qui est passé aux gestionnaires d’événements. Par exemple, vous pouvez utiliser la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objet à récupérer la propriété d’identité générée par une base de données pour un nouvel enregistrement de données.  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> événement qui vérifie les exceptions et récupère la propriété d’identité pour le nouvel enregistrement.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération d'insertion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> événements pour valider l’objet à insérer, pour examiner les erreurs de validation de données à partir de la classe de données, pour modifier une valeur avant l’opération d’insertion ou pour annuler l’opération d’insertion. Le <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> objet passé aux gestionnaires d’événements pour cet événement contient le nouvel objet à insérer dans la source de données.  
  
 Si une erreur de validation se produit pendant l’opération d’insertion, le <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> objet contient les exceptions de validation qui sont levées par la classe de données. Une erreur de validation se produit si une valeur à insérer ne correspond pas le type de la propriété dans la classe de données, ou si elle ne transmet pas d’une vérification de validation personnalisée. Dans un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> événement, vous pouvez récupérer les exceptions de validation et prenez les mesures appropriées.  
  
 Si une exception est levée dans un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> événement, vous devez gérer l’exception dans ce gestionnaire d’événements. Exception ne sera pas être passé à un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> événement (via la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propriété de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objet). Le <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propriété contient uniquement les exceptions levées après le <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> événement.  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> événement qui modifie les données avant l’opération d’insertion. L’objet à partir de la <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> propriété est castée en un type nommé `Product`. Le `DateModified` propriété de la `Product` objet est défini à la date et heure actuelles.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> événement qui Récupère les exceptions de validation.  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 L’exemple précédent récupère les exceptions de validation. Une exception peut être levée si une valeur ne correspond pas au type de la propriété. Il peut également être générée à partir d’un contrôle personnalisé tel que celui dans l’exemple suivant. Le `OnAgeChanging` méthode vérifie que le nombre pour la `Age` propriété n’est pas négative.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres utilisés lors d'une opération d'insertion.</summary>
        <value>Paramètres utilisés lors d'une opération d'insertion.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En général, les valeurs qui sont nécessaires pour une opération d’insertion sont passées à la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle par le contrôle lié aux données. Vous spécifiez des paramètres d’insertion lorsque vous souhaitez fournir une valeur par défaut la valeur ou définissent s’il faut convertir les valeurs vides à `null`. Il est inutile de fournir un paramètre pour chaque valeur qui sera inséré, uniquement pour les valeurs qui doivent être traitées lorsque l’utilisateur ne fournit pas de valeur.  
  
 Les valeurs que vous fournissez dans le <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection sont utilisés uniquement pour les champs qui sont définis dans la source de données, mais qui ne sont pas liés dans le contrôle de données. Par exemple, supposons qu’une table de base de données a des colonnes qui portent le nom, adresse et code postal, mais un <xref:System.Web.UI.WebControls.ListView> contrôle qui est lié à la table est lié uniquement pour les champs nom et adresse. Les valeurs dans le <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection servira uniquement pour le champ PostalCode. Ils ne seront pas être utilisés pour le champ nom et l’adresse. Cela est vrai même si aucune valeur n’est entrée pour ces champs. Si les contrôle lié aux données génère automatiquement les champs pour tous les champs dans les données ne source, aucune valeur de la <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection sera utilisée.  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.WebControls.LinqDataSource> contrôle avec un paramètre qui fournit une valeur par défaut dans le <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection. Si l’utilisateur ne fournit pas une valeur pour le `Category` propriété, la valeur par défaut qui est fournie par le paramètre est enregistrée dans la base de données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Données d'événement.</param>
        <summary>Initialise l'objet <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnload : EventArgs -&gt; unit&#xA;override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Web.UI.Control.Unload" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui spécifie les champs utilisés pour classer les données récupérées.</summary>
        <value>Chaîne qui est utilisée pour créer la clause Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous utilisez le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété pour spécifier les propriétés des données retournées à utiliser pour le tri. La propriété de tri des données doit exister dans la source de données d’origine, mais il n’a pas à être inclus dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété. Vous pouvez ajouter un espace et `Ascending`, `ASC`, `Descending`, ou `DESC` à une propriété dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> chaîne afin de spécifier comment les données classées sont retournées.  
  
 Vous pouvez fournir plusieurs propriétés dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété en séparant chaque propriété à l’aide d’une virgule. Par exemple, pour classer des propriétés appelées `LastName` et `FirstName`, définissez le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété « FirstName, LastName ».  
  
> [!NOTE]
>  Lorsque vous utilisez la <xref:System.Web.UI.WebControls.LinqDataSource> contrôler avec [!INCLUDE[ss2k](~/includes/ss2k-md.md)] ou [!INCLUDE[ssEW](~/includes/ssew-md.md)] et <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> est définie sur `true`, vous devez fournir une valeur dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété. Par défaut, le <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> propriété est `true`. Si vous affectez une valeur à la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété, vous devez également inclure toutes les colonnes d’identité dans la liste des propriétés qui est retournée dans la requête.  
  
 Si le <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> est définie sur `true`, un contrôle lié aux données peut passer une expression de tri à la <xref:System.Web.UI.WebControls.LinqDataSource> un contrôle au moment de l’exécution. Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle s’applique à l’expression de tri du contrôle lié aux données après avoir appliqué le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété. Par conséquent, les données sont retournées en fonction de l’expression de tri du contrôle lié aux données.  
  
   
  
## Examples  
 L’exemple suivant retourne des données dans l’ordre alphabétique inverse selon les valeurs dans le `Category` propriété.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres utilisés pour créer la clause Order By.</summary>
        <value>Les paramètres qui sont utilisés pour créer la clause Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle utilise des paramètres de la <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection pour créer la clause Order By au moment de l’exécution. En général vous définissez le <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> propriété `true` lorsque vous ajoutez des paramètres à la <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection. Lorsque le <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> est définie sur `true`, chaque paramètre dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection est ajoutée à la clause Order By de la séquence qui sont spécifiés dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection. Lorsque le <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> propriété est `true`, les paramètres ne doivent pas être nommés, car ils sont appliqués de manière séquentielle et ne correspondent pas à un espace réservé.  
  
 Si vous n’êtes pas obligé de définir une valeur au moment de l’exécution dans la clause Order By, vous n’avez pas à utiliser le <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection. Vous pouvez définir les champs à utiliser pour classer les données dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété. Par exemple, pour retourner des valeurs à partir d’une table de base de données classés par `LastName`, définissez <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> « LastName » sans paramètres.  
  
 Vous pouvez définir des paramètres dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection et faire correspondre les paramètres aux espaces réservés dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propriété, mais cette approche a une application limitée. Lorsque vous utilisez cette approche, les paramètres de la <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection ne peut pas représenter un nom de colonne. Vous pouvez définir un paramètre à une valeur et ensuite comparer cette valeur aux valeurs d’une propriété. Par exemple, vous pouvez trier les données selon que les valeurs dans une propriété sont inférieures à la valeur d’exécution représentée par le paramètre.  
  
   
  
## Examples  
 L'exemple suivant présente un contrôle <xref:System.Web.UI.WebControls.LinqDataSource> dont la valeur de la propriété <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> est `true`. Un paramètre est inclus dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection qui organise les données en fonction de la propriété de nom d’un utilisateur sélectionne à partir d’un <xref:System.Web.UI.WebControls.DropDownList> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les champs utilisés pour trier des données groupées.</summary>
        <value>Une chaîne qui est utilisée pour créer la clause Order Groups By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous utilisez le <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propriété pour spécifier la façon dont les groupes de données sont triés. Par exemple, vous pouvez regrouper par le `CategoryID` propriété et trier chaque ID de catégorie groupe par la moyenne de la `Price` propriété.  
  
 Vous pouvez définir le <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propriété uniquement lorsque vous avez regroupé des données. Si vous définissez la <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propriété sans paramètre la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propriété, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle lève une exception.  
  
 La propriété qui est utilisée pour trier les données doit être une propriété qui sert à regrouper les données, ou le résultat d’une fonction d’agrégation sur les données groupées. Pour spécifier la façon dont les données sont triées, vous pouvez ajouter un espace et la chaîne « Ascending », « ASC », « Descending » ou « DESC » à un nom de propriété dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> chaîne.  
  
 Vous pouvez spécifier plusieurs propriétés dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propriété. Séparez chaque propriété à l’aide d’une virgule.  
  
   
  
## Examples  
 L’exemple suivant montre comment regrouper les données à l’aide de deux propriétés et comment trier les données groupées en utilisant l’une de ces propriétés. Les données à partir d’une table nommée `Products` sont regroupées à l’aide des propriétés nommées `CategoryID` et `Discontinued`. Les données groupées sont triées par la `CategoryID` propriété.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 L’exemple suivant montre comment regrouper les données à l’aide d’une propriété et comment effectuer un tri selon les résultats d’une fonction d’agrégation. Les données à partir de la `Products` table est regroupée à l’aide de la `CategoryID` propriété. Il est trié selon la moyenne de la `UnitPrice` propriété au sein de chaque groupe.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres utilisés pour créer la clause Order Groups By.</summary>
        <value>Les paramètres qui sont utilisés pour créer la clause Order Groups By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle utilise des paramètres de la <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection pour créer la clause Order Groups By au moment de l’exécution.  
  
 Ajouter des valeurs pour le <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection uniquement lorsque vous devez définir des valeurs en cours d’exécution dans la clause Order Groups By. Vous pouvez définir les champs qui sont utilisés pour trier les données à l’aide de la <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propriété.  
  
 Vous pouvez définir des paramètres dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection et faire correspondre les paramètres aux espaces réservés dans le <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propriété. Toutefois, lorsque vous utilisez cette approche, les paramètres de la <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection ne peut pas représenter un nom de colonne ; ils doivent représenter les valeurs. Vous pouvez définir un paramètre à une valeur et ensuite comparer cette valeur à une propriété. Par exemple, vous pouvez trier les données selon que les valeurs dans une propriété sont inférieures à la valeur d’exécution représentée par le paramètre.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les propriétés et les valeurs calculées incluses dans les données récupérées.</summary>
        <value>Chaîne utilisée pour créer la clause Select.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous ne définissez pas le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle récupère toutes les propriétés (colonnes de données) à partir de l’objet de données. Vous utilisez le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété pour récupérer un sous-ensemble des propriétés de l’objet ou pour calculer les nouvelles valeurs lorsque les données sont récupérées.  
  
 Vous spécifiez les propriétés à récupérer en définissant le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété aux noms des propriétés que vous souhaitez inclure dans les données retournées.  
  
 Si vous récupérez un sous-ensemble de propriétés de l’objet de données, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle crée dynamiquement une classe qui contient uniquement les propriétés que vous spécifiez dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété. Une classe est également créée dynamiquement si vous calculez des propriétés qui ne sont pas des propriétés de l’objet de données. Dans ce cas, l’objet retourné par la requête n’est pas une instance de la classe qui est spécifiée dans le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété. Au lieu de cela, vous devez utiliser le `new` méthode dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété pour indiquer qu’une nouvelle classe est retournée à partir de la requête. Par exemple, pour retourner uniquement les `FirstName` et `LastName` propriétés d’un objet qui contient plus de ces propriétés, définissez la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété `new(FirstName, LastName)`. Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle crée dynamiquement la nouvelle classe que vous avez spécifié dans le `new` (méthode).  
  
 Vous pouvez utiliser la `As` (mot clé) pour assigner un alias à une valeur sélectionnée. Si vous assignez un alias, vous devez inclure les propriétés d’alias dans le `new` (méthode). N’importe quel contrôle lié aux données qui lie les résultats à partir de la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle doit faire référence à la propriété par l’alias. Par exemple, si vous définissez la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, le contrôle lié aux données peut accéder aux deux propriétés, `SalesRegion` et `RevenueThousands`.  
  
 Vous utilisez la `new` de fonction dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété conformément aux conditions répertoriées dans le tableau suivant.  
  
|Sélectionner|Utilisation de new|Exemple|  
|------------|----------------|-------------|  
|Propriété unique.|`new` non nécessaire.|`Select="Category"`|  
|Plusieurs propriétés.|`new` Si nécessaire.|`Select="new(Cateogry, Name)"`|  
|Un ou plusieurs propriétés qui ont un alias.|`new` Si nécessaire.|`Select="new(Category As CategoryGroup)"`|  
  
 Si vous souhaitez activer les modifications de données automatiques, mais vous ne souhaitez pas afficher toutes les propriétés de l’objet de données, ne définissez pas le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété. Gérez plutôt l’affichage via le contrôle lié aux données. Lorsque vous utilisez la <xref:System.Web.UI.WebControls.DetailsView> contrôle ou la <xref:System.Web.UI.WebControls.GridView> (contrôle), vous devez également définir le <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> ou <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> propriété `false`. Toutes les valeurs qui ne sont pas affichés dans le contrôle lié aux données stockées dans l’état d’affichage. Elles sont transmises sans modification à la source de données lors de la mise à jour des données est effectuée.  
  
 Lorsque vous regroupez les données dans la requête, vous pouvez inclure des méthodes d’agrégation dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété. Vous pouvez utiliser les méthodes d’agrégation suivantes :  
  
-   `Count()`  
  
-   `Average(` *Colonne* `)`  
  
-   `Sum(` *Colonne* `)`  
  
-   `Max(` *Colonne* `)`  
  
-   `Min(` *Colonne* `)`  
  
-   `Where(` *Condition* `)`  
  
-   `Any()`  
  
-   `All(` *Condition* `)`  
  
 Pour plus d’informations, consultez [NIB : vue d’ensemble du contrôle serveur Web LinqDataSource](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) et [Comment : groupe et données agrégées à l’aide du contrôle LinqDataSource](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).  
  
 Lorsque vous regroupez des données, vous pouvez inclure `Key` et `It`, qui sont créé de façon dynamique des propriétés, dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété. Le `Key` propriété fait référence aux valeurs dans les propriétés qui ont été utilisées pour regrouper les données. Par exemple, si vous groupez par une propriété nommée `Category`, le `Key` propriété contient chaque valeur unique dans le `Category` propriété. Le `It` propriété fait référence à une collection d’enregistrements individuels dans un regroupement de données. Vous pouvez parcourir le `It` propriété à récupérer les enregistrements individuels qui ont été consolidées dans l’opération de regroupement. Par exemple, si vous groupez par une propriété nommée `Category`, le `It` propriété contient tous les enregistrements individuels qui partagent une valeur commune dans le `Category` propriété.  
  
 Si vous incluez le `It` mot clé dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété lorsque vous regroupez des données, vous devez affecter un alias à la `It` (mot clé). Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle lève une exception si `It` n’a pas d’alias. Vous pouvez assigner un alias à la `Key` (mot clé), mais cela n’est pas requis.  
  
   
  
## Examples  
 L’exemple suivant montre comment définir le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété à un sous-ensemble de propriétés de l’objet de données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 L’exemple suivant montre comment récupérer des valeurs dans une propriété qui a été utilisé pour regrouper les données et récupérer la moyenne des enregistrements groupés. Le `Key` (mot clé) contient la propriété qui a été utilisée pour regrouper des données. Dans cet exemple, `Key` doit contenir les valeurs de partagé à partir de la `ProductCategory` propriété.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit une fois l'opération de récupération de données terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.LinqDataSource.Selected> événement pour intercepter toute exception de l’opération de récupération de données ou examiner l’objet de données une fois l’opération de récupération terminée. L’objet est disponible à partir de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objet qui est passé aux gestionnaires d’événements.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération de récupération de données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> événement afin d’effectuer les tâches suivantes :  
  
-   Modifier les paramètres de récupération des données.  
  
-   Générer la requête par programme.  
  
-   Modifiez les valeurs de tri et de pagination.  
  
-   Effectuer un tri personnalisé ou la pagination.  
  
-   Annuler l’opération de récupération de données.  
  
 Le <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> objet qui est passé aux gestionnaires d’événements pour cet événement contient les paramètres pour l’opération de récupération de données. Vous pouvez modifier les paramètres dans le <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Gestionnaire d’événements avant l’exécution de la requête, ou vous pouvez créer un nouveau jeu de résultats et affecter à la <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> propriété.  
  
 Votre capacité à implémenter le tri personnalisé ou la pagination dans les gestionnaires pour cet événement peut être limitée par le contrôle est lié à la <xref:System.Web.UI.WebControls.LinqDataSource>. Par exemple, lorsque l’en-tête de colonne d’un <xref:System.Web.UI.WebControls.GridView> un clic sur le contrôle, le contrôle effectue un tri automatique qui peut substituer quel ordre que vous établissez dans l’événement gestionnaire.  
  
 Si une exception est levée dans un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> événement, vous devez gérer l’exception dans ce gestionnaire d’événements. Exception ne sera pas être passé à un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Selected> événement (via la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propriété de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objet). Le <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propriété contient uniquement les exceptions levées après le <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> événement.  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> événement. Le gestionnaire crée une requête qui Récupère les valeurs d’un tableau de valeurs de chaîne dans la page Web.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 L’exemple suivant montre comment affecter le <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> propriété à l’objet qui est retourné à partir d’une méthode qui représente une procédure stockée.  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres utilisés lors d'une opération de récupération de données.</summary>
        <value>Paramètres utilisés pour créer la clause Select.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle utilise des paramètres de la <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection pour créer la clause Select au moment de l’exécution. Vous ajoutez des paramètres à la <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection lorsque vous souhaitez utiliser des valeurs d’exécution dans la clause Select. Par exemple, vous pouvez ajouter un paramètre à la <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection pour représenter une propriété dans le profil utilisateur. Vous pouvez ensuite utiliser cette propriété et une valeur à partir de la source de données pour calculer la nouvelle valeur.  
  
 Si vous n’êtes pas obligé de définir une valeur au moment de l’exécution dans la clause Select, vous n’avez pas à utiliser le <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection. Vous pouvez définir les propriétés à récupérer dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété. Par exemple, pour retourner le `FirstName` et `LastName` à partir d’une table de base de données, la valeur <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> « FirstName, LastName » sans paramètres.  
  
 Pour définir des valeurs dans le <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection, vous ajoutez un espace réservé dans le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété pour le paramètre nommé. Dans la clause Select, faites précéder chaque nom de paramètre avec le symbole @.  
  
 Vous ne pouvez pas utiliser un paramètre dans le <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection pour représenter un nom de propriété. Pour définir dynamiquement le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> nom à la propriété d’une propriété, créez un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> événement et personnaliser le <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propriété en fonction des besoins.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser une valeur fournie par l’utilisateur pour calculer une valeur dans les données retournées. L’utilisateur peut entrer une valeur dans la zone de texte qui représente le nombre de jours de fabrication. Cette valeur est divisée par une valeur à partir d’une base de données qui représente le nombre de jours de fabrication d’un produit. La valeur retournée indique combien de produits peut être fabriqués pendant le nombre de jours spécifié. L’entrée de l’utilisateur est inclus dans la commande Select via le <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les données de la source de données doivent être stockées dans l'état d'affichage pour s'assurer que les données n'ont pas été modifiées par un autre processus avant leur mise à jour ou leur suppression.</summary>
        <value>
          <see langword="true" /> si les valeurs doivent être stockées dans l'état d'affichage ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, lorsque la mise à jour et les opérations de suppression ont été activées, les <xref:System.Web.UI.WebControls.LinqDataSource> contrôle stocke les valeurs d’origine pour tous les enregistrements d’état dans la vue. Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle stocke les valeurs pour toutes les clés primaires et toutes les propriétés non marquées avec `UpdateCheck.Never` dans le `Column` attribut. Vous définissez la `UpdateCheck` propriété de la `Column` d’attribut dans le [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].  
  
 Avant de LINQ to SQL met à jour ou supprime des données, il vérifie l’état d’affichage sur les valeurs actuelles dans la source de données de valeurs. Si les valeurs ne correspondent pas, l’enregistrement de source de données a changé. Dans ce cas, LINQ to SQL lève une exception et ne pas poursuivre la mise à jour ou l’opération de suppression. Pour plus d’informations sur LINQ to SQL, consultez [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 Stocker les valeurs d’origine dans la vue état peut entraîner la taille de page à devenir inutilement volumineuse et peut exposer des données sensibles à un utilisateur malveillant. Vous pouvez désactiver le stockage des valeurs de l’état d’affichage en définissant le <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> propriété `false`. Si vous faites cela, vous devez fournir votre propre méthode pour vous assurer que les données n’ont pas changé. Si vous définissez la <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> propriété `false`, les valeurs d’origine ne sont pas conservées dans l’état d’affichage pour le contrôle lié aux données. Dans ce cas, LINQ to SQL ne peut pas vérifier l’intégrité des données. LINQ to SQL lève une exception qui indique un conflit de données même si les données dans la source de données n’a pas réellement modifié.  
  
 Si la source de données sous-jacente contient un champ d’horodatage qui est automatiquement mis à jour pendant une mise à jour, vous pouvez stocker cette valeur dans la vue d’état. Dans ce cas, la propriété timestamp dans la classe d’entité est définie `IsVersion=true` et toutes les propriétés sont définies sur `UpdateCheck.Never`. Un champ d’horodatage est automatiquement mis à jour par la base de données chaque fois que les données de cet enregistrement changent, LINQ to SQL détermine à partir de cette valeur si les données ont changé. Cela permet de réduire la taille de l’état d’affichage, et aucune donnée sensible n’est exposée. LINQ to SQL vérifie la cohérence des données en comparant la valeur timestamp dans la vue état avec la valeur timestamp dans la base de données. Pour plus d’informations, consultez [procédure pas à pas : utilisation d’un horodatage avec le contrôle LinqDataSource pour vérifier l’intégrité des données](http://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System.Web.DynamicData.IDynamicDataSource.ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Type associé à la classe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut uniquement être utilisé lorsque l'instance de <xref:System.Web.UI.WebControls.LinqDataSource> est castée en interface <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System.Web.DynamicData.IDynamicDataSource.EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Nom de l'entité.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut uniquement être utilisé lorsque l'instance de <xref:System.Web.UI.WebControls.LinqDataSource> est castée en interface <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la propriété ou du champ de la classe de contexte de données qui représente une collection de données.</summary>
        <value>Chaîne comportant le nom de la propriété qui contient la collection de données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définir le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> nom à la propriété de la propriété ou un champ qui représente les données que vous souhaitez récupérer. Lorsque vous vous connectez à une table de base de données, le nom de la propriété est généralement le même que le nom de la table. Lorsque vous vous connectez à une collection de données en mémoire, définissez la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> nom à la propriété de la propriété ou un champ qui retourne la collection de données.  
  
 Vous pouvez assigner une propriété qui retourne tous les types dans le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété pour des opérations d’extraction. Si l’objet qui est représenté par la propriété n’implémente pas <xref:System.Collections.IEnumerable>, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle encapsule automatiquement l’objet dans une instance d’un <xref:System.Collections.IEnumerable> objet.  
  
 Pour activer la mise à jour automatique, insérer ou supprimer des opérations, la classe qui est affectée à la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propriété doit dériver de <xref:System.Data.Linq.DataContext> et la propriété qui est affectée à la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propriété doit dériver de <xref:System.Data.Linq.Table%601>.  
  
 Pour plus d’informations sur la sélection des données à partir d’une instance d’une classe, consultez la <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant montre deux <xref:System.Web.UI.WebControls.LinqDataSource> contrôles. Dans un <xref:System.Web.UI.WebControls.LinqDataSource> (contrôle), le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> est définie sur une propriété dans une classe. Cette propriété retourne un tableau de chaînes. Dans l’autre <xref:System.Web.UI.WebControls.LinqDataSource> (contrôle), le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> est définie sur une propriété qui représente une table de base de données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 La classe nommée `ExampleDataContext` que représente la table de base de données ne figure pas dans cet exemple. Pour cet exemple fonctionne, vous devez créer cette classe en ajoutant une LINQ pour la classe SQL appelée Example.dbml et en faisant glisser une table appelée Movie vers le [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Une classe nommée `ExampleDataContext` avec une propriété nommée `Movies` est généré.  
  
 L’exemple suivant montre la classe nommée `MovieLibrary` qui est référencé dans le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Valeurs de clés de ligne des enregistrements à mettre à jour.</param>
        <param name="values">Valeurs de ligne à mettre à jour dans la source de données.</param>
        <param name="oldValues">Valeurs de ligne évaluées pour détecter les conflits de données.</param>
        <summary>Exécute une opération de mise à jour.</summary>
        <returns>Nombre d'enregistrements affectés par l'opération de mise à jour.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, vous n’avez pas à appeler le <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> méthode depuis votre code. Le contrôle lié aux données appelle automatiquement la <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> méthode lorsque l’utilisateur met à jour un enregistrement. Vous appelez explicitement le <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> méthode lorsque vous souhaitez créer votre propre processus de mise à jour des données.  
  
   
  
## Examples  
 L’exemple suivant illustre la mise à jour par programme un enregistrement dans la source de données une fois que l’utilisateur clique sur un bouton. Le code transmet une <xref:System.Collections.Specialized.ListDictionary> objet qui contient la valeur de clé, un <xref:System.Collections.Specialized.ListDictionary> objet qui contient les valeurs d’origine, et un <xref:System.Collections.Specialized.ListDictionary> objet qui contient les nouvelles valeurs à la <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> (méthode).  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 L’exemple suivant montre le balisage de l’exemple précédent.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit une fois l'opération de mise à jour terminée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.LinqDataSource.Updated> événement pour intercepter toute exception de l’opération de mise à jour ou examiner les valeurs des paramètres de sortie une fois l’opération de mise à jour terminée. Les paramètres de sortie sont disponibles à partir de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objet qui est passé aux gestionnaires d’événements.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cette collection n'est pas utilisée par la classe <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>Collection de paramètres.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant une opération de mise à jour.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer les <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événements pour valider l’objet à mettre à jour, pour examiner les erreurs de validation de données à partir de la classe de données, pour modifier une valeur avant l’opération de mise à jour ou pour annuler l’opération de mise à jour. Le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> objet qui est passé aux gestionnaires d’événements contient l’objet d’origine et l’objet mis à jour.  
  
 Si une erreur de validation se produit pendant l’opération de mise à jour, le <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> objet contient les exceptions de validation qui sont levées par la classe de données. Une erreur de validation se produit si une valeur mise à jour ne correspond pas le type de la propriété dans la classe de données, ou si elle ne transmet pas d’une vérification de validation personnalisée. Dans un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement, vous pouvez récupérer les exceptions de validation et prenez les mesures appropriées.  
  
 Si une exception est levée dans un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement, vous devez gérer l’exception dans ce gestionnaire d’événements. Exception ne sera pas être passé à un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updated> événement (via la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propriété de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objet). Le <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propriété contient uniquement les exceptions levées après le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement.  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement. Le code compare les propriétés de la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propriété et le <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propriété pour voir si une valeur a changé. Si la valeur a changé, une valeur de la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> est définie sur `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Web.UI.WebControls.LinqDataSource.Updating> événement qui Récupère les exceptions de validation.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 L’exemple précédent récupère les exceptions de validation. Une exception peut être levée si une valeur ne correspond pas au type de la propriété. Il peut également être générée à partir d’un contrôle personnalisé tel que celui dans l’exemple suivant. Le `OnAgeChanging` méthode vérifie que le nombre pour la `Age` propriété n’est pas négative.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui spécifie les conditions qui doivent être remplies pour qu'un enregistrement soit inclus dans les données récupérées.</summary>
        <value>Chaîne utilisée pour créer la clause Where.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous utilisez le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété pour spécifier les conditions pour l’enregistrement à retourner à partir d’une requête. La syntaxe pour le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété est identique à la syntaxe pour une clause Where LINQ en c#.  
  
 Vous spécifiez une expression qui donne une valeur booléenne, et si l’expression prend la valeur de `true` pour une ligne donnée, la ligne est incluse dans le jeu de résultats. Les expressions sont composées de noms de colonnes, les opérateurs de comparaison et les valeurs à comparer, comme indiqué dans l’exemple suivant :  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 Pour spécifier plusieurs expressions liées par la logique `AND` ou `OR` opérateurs, vous utilisez `&&` comme un opérateur logique AND et `||` comme un opérateur logique OR, comme indiqué dans l’exemple suivant :  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 Si vous souhaitez tester une propriété par rapport à une valeur de chaîne littérale, la valeur de chaîne littérale doit figurer entre guillemets doubles. Pour ce faire, dans le balisage, placez le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> valeur de la clause de guillemets simples, comme indiqué dans l’exemple suivant :  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 Pour tester par rapport à une valeur de chaîne littérale dans le code, utilisez des caractères d’échappement qui sont appropriées à la langue que vous utilisez pour insérer des guillemets doubles, comme indiqué dans l’exemple suivant :  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 Si vous souhaitez tester si une chaîne est supérieure ou inférieure à une autre chaîne, vous devez utiliser les méthodes de la <xref:System.String> classe au lieu d’utiliser `<` ou `>` opérateurs entre le nom de colonne et la valeur de chaîne. Les exemples suivants montrent comment sélectionner les lignes qui ont des valeurs de catégorie qui sont inférieur à, inférieur ou égal à, supérieur à, ou supérieur ou égal à « Sports » :  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 Vous pouvez également utiliser d’autres méthodes de la <xref:System.String> class, telle que <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, et <xref:System.String.Contains%2A>. Pour plus d’informations sur la comparaison de chaînes, consultez [comparaison de chaînes](~/docs/standard/base-types/comparing.md). Pour plus d’informations sur l’emplacement de syntaxe de la clause, consultez [opérateurs c#](http://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) et [où clause](~/docs/csharp/language-reference/keywords/where-clause.md).  
  
 En plus de filtrer en fonction des valeurs statiques que vous définissez lorsque vous créez la page Web, vous pouvez filtrer en fonction des valeurs dynamiques qui sont évaluées au moment de l’exécution. Dans ce cas, vous incluez un paramètre nommé dans le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété qui agit comme un espace réservé pour la valeur. Vous ajoutez ensuite un paramètre qui a le nom correspondant à la <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.  
  
 Vous pouvez également définir le <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propriété `true` et définir les paramètres dans le <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. Lorsque le <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propriété est `true`, il est inutile d’inclure les paramètres nommés dans le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété. Au lieu de cela, le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle génère automatiquement Where clause à partir des paramètres dans le <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> propriété.  
  
 Pour plus d’informations sur comment filtrer les données, consultez [procédure pas à pas : sélection et filtrage d’un sous-ensemble de données avec les contrôles LinqDataSource et GridView](http://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205).  
  
   
  
## Examples  
 L’exemple suivant montre comment filtrer les données retournées par une requête selon une condition statique.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 L’exemple suivant montre comment filtrer les données selon une valeur qui est fournie par l’utilisateur au moment de l’exécution. Dans cet exemple un <xref:System.Web.UI.WebControls.DropDownList> contrôle et un <xref:System.Web.UI.WebControls.GridView> contrôle sont affichés sur la page. Lorsque l’utilisateur sélectionne une des valeurs dans le <xref:System.Web.UI.WebControls.DropDownList> (contrôle), le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle sélectionne à partir de la `Products` table uniquement les lignes qui ont `UserPrice` des valeurs égales à la valeur sélectionnée. Le <xref:System.Web.UI.WebControls.GridView> contrôle affiche ensuite les données filtrées.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de paramètres utilisée pour créer la clause Where.</summary>
        <value>Collection des paramètres utilisés pour créer la clause Where dans la propriété <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle utilise des paramètres de la <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection pour créer l’emplacement où clause au moment de l’exécution. Vous ajoutez des paramètres à la <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection lorsque vous souhaitez définir par programme un ou plusieurs des conditions dont la clause. Par exemple, vous pouvez rechercher une table de base de données pour les enregistrements avec un nom égal à la valeur d’un <xref:System.Web.UI.WebControls.TextBox> contrôle. Dans ce cas, vous ajoutez un paramètre à la <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection pour la valeur de zone de texte.  
  
 Si vous n’avez pas à définir une valeur en cours d’exécution dont la clause, vous n’avez pas à utiliser le <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. Vous pouvez définir les champs à récupérer dans le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété. Par exemple, pour retourner des valeurs à partir d’une table de base de données où `LastName` est égal à « Adams » dans le balisage, définissez la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété `'LastName = "Adams"'` sans aucun paramètre.  
  
 Pour définir des valeurs dans le <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection, vous attribuez un nom à chaque paramètre et puis ajoutez un espace réservé dans le <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propriété pour ce paramètre. Dont la clause, faites précéder chaque nom de paramètre avec le symbole @.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection pour créer dynamiquement Where clause. Le <xref:System.Web.UI.WebControls.LinqDataSource> contrôle renvoie tous les enregistrements avec une valeur dans la `Price` colonne est supérieure à la valeur sélectionnée par l’utilisateur dans un <xref:System.Web.UI.WebControls.DropDownList> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>