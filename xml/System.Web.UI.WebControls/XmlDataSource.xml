<Type Name="XmlDataSource" FullName="System.Web.UI.WebControls.XmlDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="86b729c8a5965965316ecf6ffead7f52ce244e6d" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51882173" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataSource extends System.Web.UI.HierarchicalDataSourceControl implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.XmlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataSource&#xA;Inherits HierarchicalDataSourceControl&#xA;Implements IDataSource, IListSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataSource : System::Web::UI::HierarchicalDataSourceControl, System::ComponentModel::IListSource, System::Web::UI::IDataSource" />
  <TypeSignature Language="F#" Value="type XmlDataSource = class&#xA;    inherit HierarchicalDataSourceControl&#xA;    interface IDataSource&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HierarchicalDataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("Transforming")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultProperty("DataFile")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente une source de données XML pour les contrôles liés aux données.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans cette rubrique :  
  
-   [Introduction](#introduction)  
  
-   [Sources de données XML](#source_of_xml_data)  
  
-   [La mise à jour des données XML](#updating_xml_data)  
  
-   [Spécification d’une Transformation XSL](#specifying_an_xsl_transformation)  
  
-   [Filtrage à l’aide d’une Expression XPath](#filtering_using_an_xpath_expression)  
  
-   [Mise en cache](#caching)  
  
-   [Fonctionnalités supplémentaires](#additional_features)  
  
-   [Objet de vue de données](#data_view_object)  
  
-   [Syntaxe déclarative](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduction  
 Le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle est un contrôle de source de données qui présente les données XML à des contrôles liés aux données. Le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle peut être utilisé par les contrôles liés aux données pour afficher des données hiérarchiques et sous forme de tableau. Le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle est généralement utilisé pour afficher les données XML hiérarchiques dans des scénarios en lecture seule. Étant donné que le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle s’étend la <xref:System.Web.UI.HierarchicalDataSourceControl> classe, il fonctionne avec des données hiérarchiques. Le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle également implémente le <xref:System.Web.UI.IDataSource> interface et fonctionne avec tabulaire, ou liste de style, les données.  
  
> [!NOTE]
>  Pour des raisons de sécurité, aucune de la <xref:System.Web.UI.WebControls.XmlDataSource> des propriétés de contrôle sont stockées dans l’état d’affichage. Dans la mesure où il est techniquement possible de décoder le contenu de l’état d’affichage sur le client, stocker des informations sensibles sur la structure de données ou son contenu pourrait vous exposer à une menace de divulgation d’informations. Notez que si vous avez besoin stocker des informations telles que <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> propriété dans l’état d’affichage, vous pouvez activer le chiffrement protéger le contenu en définissant <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> sur la `@ Page` directive.  
  
 Développeurs de pages utilisent le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle pour afficher des données XML à l’aide de contrôles liés aux données.  
  
<a name="source_of_xml_data"></a>   
## <a name="sources-of-xml-data"></a>Sources de données XML  
 Le <xref:System.Web.UI.WebControls.XmlDataSource> charge généralement les données XML à partir d’un fichier XML, qui est spécifié par le <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> propriété. Données XML peuvent également être stockées directement par le contrôle de source de données dans la forme de chaîne à l’aide du <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriété. Si vous souhaitez transformer les données XML avant qu’il est affiché par un contrôle lié aux données, vous pouvez fournir une feuille de style de feuille de style XSL (Extensible Language) pour la transformation. Comme avec les données XML, vous chargez en général la feuille de style à partir d’un fichier, indiquée par le <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> propriété, mais vous pouvez également le stocker sous forme de chaîne directement à l’aide de la <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> propriété.  
  
<a name="updating_xml_data"></a>   
## <a name="updating-xml-data"></a>La mise à jour des données XML  
 Le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle est couramment utilisé dans les scénarios de données en lecture seule où un contrôle lié aux données affiche les données XML. Toutefois, vous pouvez également utiliser le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle à modifier les données XML. Pour modifier les données XML, appelez le <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> méthode pour récupérer un <xref:System.Xml.XmlDataDocument> objet qui est une représentation en mémoire des données XML. Vous pouvez utiliser le modèle objet exposé par le <xref:System.Xml.XmlDataDocument> et <xref:System.Xml.XmlNode> les objets qu’il contient, ou utiliser une expression de filtre XPath pour manipuler des données dans le document. Lorsque vous avez apporté des modifications à la représentation en mémoire des données XML, vous pouvez l’enregistrer sur le disque en appelant le <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> (méthode).  
  
 Il existe certaines restrictions, les fonctions d’édition de la <xref:System.Web.UI.WebControls.XmlDataSource> contrôle :  
  
-   Les données XML doivent être chargées à partir d’un fichier XML qui est indiqué par le <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> propriété, et non à partir de XML inline spécifié dans le <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriété.  
  
-   Aucune transformation XSLT ne peut être spécifiée dans le <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> ou <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> propriétés.  
  
-   Le <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> méthode ne gère pas opérations de sauvegarde simultanées par différentes requêtes. Si plusieurs utilisateurs modifient un fichier XML par le biais du <xref:System.Web.UI.WebControls.XmlDataSource>, il n’existe aucune garantie que tous les utilisateurs utilisent les mêmes données. Il est également possible pour un <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> opération échoue en raison de ces mêmes problèmes d’accès concurrentiel.  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>Spécification d’une Transformation XSL  
 Une opération courante effectuée avec des données XML est transformant à partir d’un jeu de données XML en un autre. Le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle prend en charge les transformations XML avec le <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> et <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> propriétés qui spécifient une feuille de style XSL à appliquer aux données XML avant d’être passé à un contrôle lié aux données, et le <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> propriété, qui vous permet de fournir les arguments de feuille de style dynamiques XSLT à utiliser par une feuille de style XSL lors de la transformation. Si vous spécifiez un XPath à l’aide de l’expression de filtrage le <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> propriété, il est appliqué après la transformation a lieu.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.WebControls.XmlDataSource> classe utilise déconseillées <xref:System.Xml.Xsl.XslTransform> classe pour effectuer des transformations XSL. Si vous souhaitez utiliser les fonctionnalités de feuille de style qui ont été introduites après le <xref:System.Xml.Xsl.XslTransform> classe a été déconseillée, appliquer les transformations manuellement à l’aide de la <xref:System.Xml.Xsl.XslCompiledTransform> classe.  
  
<a name="filtering_using_an_xpath_expression"></a>   
## <a name="filtering-using-an-xpath-expression"></a>Filtrage à l’aide d’une Expression XPath  
 Par défaut, le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle charge toutes les données XML dans le fichier XML identifié par le <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> propriété ou trouvé inline dans le <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriété, mais vous pouvez filtrer les données à l’aide d’une expression XPath. Le <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> propriété prend en charge un filtre de syntaxe XPath qui est appliqué après que les données XML sont chargées et transformées.  
  
<a name="caching"></a>   
## <a name="caching"></a>Mise en cache  
 Pour des raisons de performances, la mise en cache est activée pour le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle par défaut. Ouverture et la lecture d’un fichier XML sur le serveur chaque fois qu’une page demandée peuvent réduire les performances de votre application. Elle permet de réduire la charge de traitement sur votre serveur au détriment de la mémoire sur le serveur Web ; dans la plupart des cas il s’agit d’un bon compromis. Le <xref:System.Web.UI.WebControls.XmlDataSource> met automatiquement en cache les données lorsque le <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> propriété est définie sur `true`et le <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> propriété est définie sur le nombre de secondes pendant lesquelles le cache stocke les données avant que le cache est invalidé. Vous pouvez utiliser le <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> pour affiner le comportement de mise en cache du contrôle de source de données.  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>Fonctionnalités supplémentaires  
 Le tableau suivant répertorie les fonctionnalités supplémentaires qui sont prises en charge par le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle.  
  
|Fonctionnalité|Description |  
|----------------|-----------------|  
|Tri|Non pris en charge par le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle.|  
|Filtrage|Le <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> propriété peut être utilisée pour filtrer les données XML à l’aide d’une expression XPath appropriée.|  
|Pagination|Non pris en charge par le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle.|  
|Mise à jour|Prise en charge en manipulant le <xref:System.Xml.XmlDataDocument> directement, puis en appelant le <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> (méthode).|  
|Suppression|Prise en charge en manipulant le <xref:System.Xml.XmlDataDocument> directement, puis en appelant le <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> (méthode).|  
|Insertion|Prise en charge en manipulant le <xref:System.Xml.XmlDataDocument> directement, puis en appelant le <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> (méthode).|  
|Mise en cache|Activé par défaut, avec le <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> propriété est définie sur 0 (infini) et le <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> propriété définie sur <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>.|  
  
<a name="data_view_object"></a>   
## <a name="data-view-object"></a>Objet de vue de données  
 Étant donné que le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle prend en charge les contrôles liés aux données qui affichent des données hiérarchiques, ainsi que des contrôles qui affichent des données tabulaires, le contrôle de source de données prend en charge plusieurs types d’objets de vue de source de données sur ses données XML sous-jacentes. Le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle récupère un nom unique <xref:System.Web.UI.WebControls.XmlDataSourceView> objet lorsqu’il est utilisé avec un contrôle lié aux données qui affiche des données tabulaires. La <xref:System.Web.UI.IDataSource.GetViewNames%2A> méthode identifie cet unique nommé affichage. Lorsqu’il est utilisé avec un contrôle lié aux données qui affiche des données hiérarchiques, le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle récupère un <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> pour n’importe quel chemin d’accès hiérarchique unique passé à la <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> (méthode).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Syntaxe déclarative  
  
```  
<asp:XmlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    DataFile="string"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTransforming="Transforming event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformArgumentList="string"  
    TransformFile="string"  
    Visible="True|False"  
    XPath="string"  
>  
    <Data>string</Data>  
    <Transform>string</Transform>  
</asp:XmlDataSource>  
```  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôler avec un <xref:System.Web.UI.WebControls.TreeView> contrôle pour afficher les données XML à partir de l’exemple de fichier XML. Le deuxième exemple montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôle avec un basé sur un modèle <xref:System.Web.UI.WebControls.Repeater> contrôle pour afficher les données XML.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôler avec un <xref:System.Web.UI.WebControls.TreeView> contrôle pour afficher les données XML. Le <xref:System.Web.UI.WebControls.XmlDataSource> charge les données XML à partir du fichier XML identifié par le <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> propriété.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôle avec un basé sur un modèle <xref:System.Web.UI.WebControls.Repeater> contrôle pour afficher les données XML. Le <xref:System.Web.UI.WebControls.Repeater> contrôle utilise une expression de liaison de données XPath à lier aux données des éléments dans le code XML de document qui le <xref:System.Web.UI.WebControls.XmlDataSource> représente. Pour plus d’informations sur `XPath` et `XPathSelect` syntaxe de liaison de données, consultez la <xref:System.Web.UI.XPathBinder> classe.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/CS/xmlds14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/VB/xmlds14vb.aspx#1)]  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>John</firstn>  
         <lastn>Smith</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Crée une instance de la classe <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la durée, en secondes, de la mise en cache par le contrôle de source de données des données qu'il a récupérées.</summary>
        <value>Nombre de secondes de la mise en cache par le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> des résultats d'une opération de récupération de données. La valeur par défaut est 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle place automatiquement des données lorsque les éléments suivants s’applique :  
  
-   La propriété <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> a la valeur `true`.  
  
-   Le <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> propriété est définie sur une valeur supérieure à 0, ce qui indique le nombre de secondes pendant lesquelles le cache stocke les données avant que le cache est invalidé.  
  
 Toute modification apportée à la <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriété ou le contenu du fichier qui contient les données XML, le cache est invalidé.  
  
 Par défaut, le <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> propriété est définie sur 0, ce qui indique un cache indéfini, et la source de données met en cache données jusqu'à ce que le fichier XML dont elle dépend est modifié.  
  
 Le comportement du cache est régi par une combinaison de la durée et le <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> paramètre. Si <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> a la valeur <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle met en cache des données sur la première opération de récupération de données, il conserve en mémoire pendant la durée spécifiée par <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>et il invalide une fois le délai écoulé. Puis, le cache est actualisé à l’opération suivante. Si <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> est défini sur <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, le contrôle de source de données met en cache des données sur la première opération de récupération de données, mais réinitialise la fenêtre de temps qu’il détient le cache à chaque opération suivante. Expiration du cache uniquement si aucune activité n’est pour une durée égale à la <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> depuis la dernière récupération de données.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment activer la mise en cache lorsque vous utilisez le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle pour afficher les données contenues dans un fichier XML. Mise en cache est activée lorsque la <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> propriété est définie sur `true` et <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> est défini sur le nombre de secondes pendant lesquelles les données sont mis en cache par le contrôle de source de données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la stratégie d'expiration du cache combinée à la durée de mise en cache, pour décrire le comportement de mise en cache du cache que le contrôle de source de données utilise.</summary>
        <value>Une des valeurs de <see cref="T:System.Web.UI.DataSourceCacheExpiry" />. Le paramètre de stratégie d'expiration du cache par défaut est <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le comportement du cache est régi par une combinaison de la <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> et <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> paramètres. Si le <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> a la valeur <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, le <xref:System.Web.UI.WebControls.XmlDataSource> met en cache des données sur la première opération de récupération de données, il conserve en mémoire pendant la durée spécifiée par <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>et il invalide une fois le délai écoulé. Puis, le cache est actualisé à l’opération suivante. Si le <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> est défini sur <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, le contrôle de source de données met en cache des données sur la première opération de récupération de données, mais réinitialise la fenêtre de temps qu’il détient le cache à chaque opération suivante. Le cache expirera uniquement si aucune activité n’est pour une durée égale à la <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> depuis la dernière récupération de données.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment activer la mise en cache lorsque vous utilisez le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle pour afficher les données contenues dans un fichier XML. Mise en cache est activée lorsque la <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> propriété est définie sur `true` et <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> est défini sur le nombre de secondes pendant lesquelles les données sont mis en cache par le contrôle de source de données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyContext">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyContext : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur de la clé de cache pour le contrôle de source de données à partir de l'état d'affichage, ou ajoute la clé de cache à l'état d'affichage.</summary>
        <value>Valeur de la clé de cache, ou chaîne vide si la clé de cache n'est pas dans l'état d'affichage.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext%2A> propriété vous permet de créer manuellement une clé de cache pour le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle. Cela est nécessaire uniquement si vous assignez un objet qui contient des données XML ou XSLT pour le contrôle au lieu de spécifier un fichier qui contient les données. Lorsque vous affectez des données au contrôle, les données ne sont pas utilisées pour générer la clé de cache. Au lieu de cela, vous devez générer une clé de cache unique manuellement si vous envisagez de mettre à jour de l’objet de données.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une dépendance de clé définie par l'utilisateur qui est liée à tous les objets cache de données créés par le contrôle de source de données. Tous les objets mis en cache expirent explicitement lorsque la clé expire.</summary>
        <value>Une clé qui identifie tous les objets cache créés par le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle prend en charge la mise en cache des données. Bien que la mise en cache de données, le <xref:System.Web.UI.WebControls.XmlDataSource> récupère les données à partir du cache plutôt qu’à partir du fichier de données sous-jacent. Lorsque le cache expire, il récupère des données à partir du fichier sous-jacent et remet en cache les données.  
  
 Vous pouvez définir le <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> propriété pour créer une dépendance entre toutes les entrées de cache créés par le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle et la clé. Vous pouvez par programmation invalider toutes les entrées de cache à tout moment en faisant expirer la clé.  
  
 En raison des propriétés utilisées pour créer le <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>, il est possible que plusieurs <xref:System.Web.UI.WebControls.XmlDataSource> contrôles peuvent utiliser le même cache dans les scénarios dans lesquels ils chargent les mêmes données à partir du même fichier XML et de transformer le fichier et ont les mêmes <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> et <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>définie.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Data { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Data : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un bloc de données XML avec lequel le contrôle de source de données crée une liaison.</summary>
        <value>Chaîne de code XML inline avec laquelle le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> crée une liaison. La valeur par défaut est <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans les scénarios déclaratifs, les <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriété est spécifiée comme une propriété interne multiligne de le <xref:System.Web.UI.WebControls.XmlDataSource> objet. La propriété interne est compatible avec les données XML, car il vous permet de mettre en forme les données XML en aucune façon et ignorer les problèmes de remplissage de caractères, tels que le remplissage des guillemets.  
  
 Si les deux le <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> et <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriétés sont définies, le <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> propriété a la priorité et les données dans le fichier XML sont utilisées à la place les données XML spécifiées dans le <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriété.  
  
 Si vous modifiez la valeur de la <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriété, le <xref:System.Web.UI.IDataSource.DataSourceChanged> événement est déclenché. Si la mise en cache est activée et que vous modifiez la valeur de <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>, le cache est invalidé.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôle pour afficher des données XML inline contenues par la <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriété avec un <xref:System.Web.UI.WebControls.TreeView> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/CS/xmlds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/VB/xmlds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le document est en cours de chargement.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Spécifie le nom d'un fichier XML auquel la source de données est liée.</summary>
        <value>Chemin d'accès physique absolu ou chemin d'accès relatif du fichier XML qui contient les données que le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> représente. La valeur par défaut est <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si les deux le <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> et <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriétés sont définies, le <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> propriété a la priorité et les données dans le fichier XML sont utilisées à la place les données XML spécifiées dans le <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriété.  
  
 Si vous modifiez la valeur de la <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> propriété, le <xref:System.Web.UI.IDataSource.DataSourceChanged> événement est déclenché. Si la mise en cache est activée et que vous modifiez la valeur de <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>, le cache est invalidé.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôle pour afficher les données XML contenues dans un fichier avec un <xref:System.Web.UI.WebControls.TreeView> contrôle.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le document est en cours de chargement.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la mise en cache de données du contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> est activée.</summary>
        <value>
          <see langword="true" /> si la mise en cache est activée pour le contrôle de source de données ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle met automatiquement en cache les données lorsque le <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> propriété est définie sur `true`. Par défaut, le <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> propriété est définie sur 0, ce qui indique un cache indéfini, et la source de données met en cache données jusqu'à ce que le fichier XML dont elle dépend est modifié. Si vous définissez le <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> propriété une valeur supérieure à 0, le cache stocke les données pour le nombre de secondes spécifié avant de récupérer un nouveau jeu.  
  
 Si le <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> propriété est définie sur `true` et <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> est définie, les entrées du cache ne sont pas invalidées automatiquement lorsque les paramètres changent dans la liste d’arguments de transformations. Dans ce cas, vous devez écrire du code pour invalider le cache en définissant le <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment activer la mise en cache lorsque vous utilisez le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle pour afficher les données contenues dans un fichier XML. Mise en cache est activée lorsque la <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> propriété est définie sur `true` et <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> est défini sur le nombre de secondes pendant lesquelles les données sont mis en cache par le contrôle de source de données.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.HierarchicalDataSourceView GetHierarchicalView(string viewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetHierarchicalView (viewPath As String) As HierarchicalDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::HierarchicalDataSourceView ^ GetHierarchicalView(System::String ^ viewPath);" />
      <MemberSignature Language="F#" Value="override this.GetHierarchicalView : string -&gt; System.Web.UI.HierarchicalDataSourceView" Usage="xmlDataSource.GetHierarchicalView viewPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewPath">Expression XPath qui identifie un nœud à partir duquel l'affichage hiérarchique actuel est construit.</param>
        <summary>Obtient l'objet de vue de source de données pour le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" />. Le paramètre <paramref name="viewPath" /> peut constituer une expression XPath.</summary>
        <returns>Retourne un objet <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" /> qui représente un affichage unique des données en commençant par le nœud de données identifié par <paramref name="viewPath" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez appeler la <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> méthode pour récupérer un <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> objet associé à la <xref:System.Web.UI.WebControls.XmlDataSource> contrôle. Si vous spécifiez `viewPath` valeur, le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle retourne un objet de vue de source de données qui représente la vue sur le nœud identifié par `viewPath`, ainsi que tous ses nœuds enfants. Si vous définissez `viewPath` à <xref:System.String.Empty?displayProperty=nameWithType>, le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle vérifie la <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> propriété afin de déterminer le nœud racine à partir duquel générer la vue de source de données. Si le <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> propriété est définie, le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle utilise pour retourner une vue de source de données de la même façon, le `viewPath` expression est utilisée. Si le <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> propriété n’est pas définie, le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle retourne une vue de tous les nœuds de données dans les données XML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlDocument GetXmlDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlDocument () As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlDocument ^ GetXmlDocument();" />
      <MemberSignature Language="F#" Value="member this.GetXmlDocument : unit -&gt; System.Xml.XmlDocument" Usage="xmlDataSource.GetXmlDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Charge les données XML en mémoire, soit directement du stockage des données sous-jacent ou soit du cache, et les retourne sous la forme d'un objet <see cref="T:System.Xml.XmlDataDocument" />.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlDataDocument" /> qui représente le XML spécifié dans la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> ou dans le fichier identifié par la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />, avec toutes les transformations et les requêtes <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> appliquées.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> méthode pour un accès direct à une représentation en mémoire des données XML sous-jacentes.  
  
 Vous pouvez manipuler retourné <xref:System.Xml.XmlDataDocument> de l’objet, puis appelez <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> pour conserver vos modifications dans le fichier XML spécifié par le <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> propriété. Plusieurs conditions doivent être remplies avant le <xref:System.Xml.XmlDataDocument> objet peut être enregistré avec succès. Pour plus d'informations, voir la méthode <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôler avec un <xref:System.Web.UI.WebControls.TreeView> contrôle pour afficher et modifier des données XML contenues dans un fichier XML. Le deuxième exemple montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôle avec un basé sur un modèle <xref:System.Web.UI.WebControls.Repeater> contrôle pour afficher et modifier des données XML contenues dans un fichier XML.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôler avec un <xref:System.Web.UI.WebControls.TreeView> contrôle pour afficher et modifier des données XML contenues dans un fichier XML. Les données sont manipulées en mémoire à l’aide du <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> méthode chaque fois que vous sélectionnez un <xref:System.Web.UI.WebControls.TreeView> nœud et est ensuite enregistré dans le fichier XML. Enfin, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> est appelée sur le <xref:System.Web.UI.WebControls.TreeView> contrôle pour actualiser les données qu’il affiche.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôle avec un basé sur un modèle <xref:System.Web.UI.WebControls.Repeater> contrôle pour afficher et modifier des données XML contenues dans un fichier XML. Comme avec l’exemple précédent, les données sont manipulées en mémoire à l’aide du <xref:System.Xml.XmlDataDocument> récupérées par le <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> (méthode). Enfin, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> est appelée sur le <xref:System.Web.UI.WebControls.TreeView> contrôle pour actualiser les données qu’il affiche.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Le fichier XML dans les exemples de code possède les données suivantes :  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une URL est spécifiée pour la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> ; toutefois, le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> ne dispose pas des autorisations correctes pour la ressource Web.</exception>
        <exception cref="T:System.NotSupportedException">Une URL est spécifiée pour la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> ; toutefois, ce n'est pas une URL basée sur HTTP.  
  
\- ou - 
Un chemin d'accès relatif au moment du design n'a pas été mappé correctement par le concepteur avant l'utilisation du contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.  
  
\- ou - 
La mise en cache et l'emprunt d'identité client sont activés tous les deux. Le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> ne prend pas en charge la mise en cache lorsque l'emprunt d'identité client est activé.</exception>
        <exception cref="T:System.Web.HttpException">L'accès est refusé au chemin d'accès spécifié pour la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.Save" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      </Docs>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTransforming(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTransforming (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTransforming(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTransforming : EventArgs -&gt; unit&#xA;override this.OnTransforming : EventArgs -&gt; unit" Usage="xmlDataSource.OnTransforming e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Élève l'événement <see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" /> avant que le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> exécute une transformation XSLT sur ses données XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôler avec un <xref:System.Web.UI.WebControls.TreeView> contrôle pour afficher les données XML transformées. La transformation XML est effectuée à l’aide de la feuille de style indiquée par la <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> propriété. En outre, la feuille de style utilise des arguments de transformation qui sont passés au contrôle de source de données dans un <xref:System.Xml.Xsl.XsltArgumentList> objet lors de l’exécution. L’exemple de code montre comment passer le <xref:System.Xml.Xsl.XsltArgumentList> objet pour le contrôle de source de données en gérant la <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> événement avec un gestionnaire d’événements personnalisé, qui est identifié par le nom de la méthode définie pour la <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> (méthode).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 La transformation XML est effectuée à l’aide de la feuille de style suivante.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> méthode de la classe de base afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.Save" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; unit" Usage="xmlDataSource.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enregistre sur disque les données XML contenues en mémoire par le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> si la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> est définie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bien que le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle est généralement utilisé dans les scénarios de liaison de données en lecture seule, vous pouvez utiliser la <xref:System.Web.UI.WebControls.XmlDataSource> contrôle à modifier les données XML dans le fichier de données XML sous-jacent. Dans ces scénarios, les données XML sont chargées à partir d’un fichier XML par le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle. Vous modifiez le <xref:System.Xml.XmlDataDocument> dans la mémoire à l’aide du <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> (méthode), puis l’enregistrer dans le fichier de données XML en appelant le <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> (méthode). Ce scénario XML modifiable est possible lorsque les conditions suivantes sont remplies :  
  
-   Les données XML sont chargées à partir d’un fichier XML indiqué par la <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> propriété, et non à partir des données XML inline spécifiées dans le <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> propriété.  
  
-   Aucune transformation XSLT n’est spécifiée dans le <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> ou <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> propriétés.  
  
 Le <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> méthode ne gère pas opérations de sauvegarde simultanées par différentes requêtes. Si plusieurs utilisateurs modifient un fichier XML par le biais du <xref:System.Web.UI.WebControls.XmlDataSource> contrôler, il n’existe aucune garantie que tous les utilisateurs utilisent les mêmes données. Il est également possible pour un <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> opération échoue en raison de ces mêmes problèmes d’accès concurrentiel.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôler avec un <xref:System.Web.UI.WebControls.TreeView> contrôle pour afficher et modifier des données XML contenues dans un fichier XML. Le deuxième exemple de code montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôle avec un basé sur un modèle <xref:System.Web.UI.WebControls.Repeater> contrôle pour afficher et modifier des données XML contenues dans un fichier XML.  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôler avec un <xref:System.Web.UI.WebControls.TreeView> contrôle pour afficher et modifier des données XML contenues dans un fichier XML. Les données sont manipulées en mémoire à l’aide du <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> méthode chaque fois que vous sélectionnez un <xref:System.Web.UI.WebControls.TreeView> nœud et est ensuite enregistré dans le fichier XML. Enfin, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> est appelée sur le <xref:System.Web.UI.WebControls.TreeView> contrôle pour actualiser les données qu’il affiche.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôle avec un basé sur un modèle <xref:System.Web.UI.WebControls.Repeater> contrôle pour afficher et modifier des données XML contenues dans un fichier XML. Comme avec l’exemple précédent, les données sont manipulées en mémoire à l’aide du <xref:System.Xml.XmlDataDocument> objet récupéré par le <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> (méthode). Enfin, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> est appelée sur le <xref:System.Web.UI.WebControls.TreeView> contrôle pour actualiser les données qu’il affiche.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Le fichier XML dans les exemples de code possède les données suivantes :  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Les données XML ont été chargées à l'aide de la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> plutôt que la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />.  
  
\- ou - 
Une URL est spécifiée pour la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> ; toutefois, le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> ne dispose pas des autorisations correctes pour la ressource Web.</exception>
        <exception cref="T:System.NotSupportedException">Une URL est spécifiée pour la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> ; toutefois, ce n'est pas une URL basée sur HTTP.  
  
\- ou - 
Un chemin d'accès relatif au moment du design n'a pas été mappé correctement par le concepteur avant l'utilisation du contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</exception>
        <exception cref="T:System.Web.HttpException">L'accès est refusé au chemin d'accès spécifié pour la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
        <value>
          <see langword="true" /> si la collection est une collection d'objets <see cref="T:System.Collections.IList" /> ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut être utilisé uniquement lorsque le <xref:System.Web.UI.WebControls.XmlDataSource> instance est convertie dans le <xref:System.ComponentModel.IListSource> interface.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
        <returns>Objet qui implémente <see cref="T:System.Collections.IList" /> qui peut être lié à une source de données.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut être utilisé uniquement lorsque le <xref:System.Web.UI.WebControls.XmlDataSource> instance est convertie dans le <xref:System.ComponentModel.IListSource> interface.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler System.Web.UI.IDataSource.DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event DataSourceChanged As EventHandler Implements System.Web.UI.IDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.IDataSource.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="E:System.Web.UI.IDataSource.DataSourceChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut être utilisé uniquement lorsque le <xref:System.Web.UI.WebControls.XmlDataSource> instance est convertie dans le <xref:System.Web.UI.IDataSource> interface.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (viewName As String) As DataSourceView Implements IDataSource.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::DataSourceView ^ System.Web.UI.IDataSource.GetView(System::String ^ viewName) = System::Web::UI::IDataSource::GetView;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">Nom de l'affichage à récupérer. Si <see cref="F:System.String.Empty" /> est spécifié, l'affichage par défaut du contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> est récupéré.</param>
        <summary>Obtient l'affichage de source de données associé au contrôle de source de données.</summary>
        <returns>Retourne l'objet nommé <see cref="T:System.Web.UI.WebControls.XmlDataSourceView" /> associé au contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Function GetViewNames () As ICollection Implements IDataSource.GetViewNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.Web.UI.IDataSource.GetViewNames() = System::Web::UI::IDataSource::GetViewNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.Web.UI.IDataSource.GetViewNames" />.</summary>
        <returns>Objet implémentant un <see cref="T:System.Collections.ICollection" /> contenant des noms qui représentent la liste d'objets de vue associée à l'objet <see cref="T:System.Web.UI.IDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut être utilisé uniquement lorsque le <xref:System.Web.UI.WebControls.XmlDataSource> instance est convertie dans le <xref:System.Web.UI.IDataSource> interface.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual string Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transform As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Transform { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un bloc des données XSL (Extensible Stylesheet Language) qui définit une transformation XSLT à exécuter sur les données XML gérées par le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</summary>
        <value>Une chaîne de XSL inline qui définit une transformation XML à exécuter sur les données contenues dans les propriétés <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> ou <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />. La valeur par défaut est <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans les scénarios déclaratifs, les <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> propriété est spécifiée comme une propriété interne multiligne de le <xref:System.Web.UI.WebControls.XmlDataSource> objet. La propriété interne est compatible avec les données de feuille de style XSL, car elle vous permet de mettre en forme la feuille de style de quelque manière et ignorer les problèmes de remplissage de caractères tels que le remplissage des guillemets.  
  
 Si les deux le <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> et <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> propriétés sont définies, le <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> propriété a la priorité et les données dans le fichier de feuille de style XSL (.xsl) sont utilisées à la place les éléments de feuille de style spécifiés dans le <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> propriété. Si une expression XPath est définie à l’aide de la <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> propriété, elle est appliquée une fois les données XML transformées.  
  
 Si vous modifiez la valeur de la <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> propriété, le <xref:System.Web.UI.IDataSource.DataSourceChanged> événement est déclenché. Si la mise en cache est activée et que vous modifiez la valeur de <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, le cache est invalidé.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.WebControls.XmlDataSource> classe utilise déconseillées <xref:System.Xml.Xsl.XslTransform> classe pour effectuer des transformations XSL. Si vous souhaitez utiliser les fonctionnalités de feuille de style qui ont été introduites après le <xref:System.Xml.Xsl.XslTransform> classe a été déconseillée, appliquer les transformations manuellement à l’aide de la <xref:System.Xml.Xsl.XslCompiledTransform> classe.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôle avec un basé sur un modèle <xref:System.Web.UI.WebControls.Repeater> contrôle pour afficher les données XML transformées. La feuille de style qui exécute la transformation est définie inline par le <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> propriété du contrôle de source de données.  
  
  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>Todd</firstn>  
         <lastn>Rowe</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le document est en cours de chargement.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformArgumentList : System.Xml.Xsl.XsltArgumentList with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Fournit une liste d'arguments XSLT utilisés avec la feuille de style définie par la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> ou <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> pour exécuter une transformation sur les données XML.</summary>
        <value>Objet <see cref="T:System.Xml.Xsl.XsltArgumentList" /> qui contient les paramètres XSLT et les objets à appliquer aux données XML lorsqu'elles sont chargées par le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" />. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définir le <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> propriété lorsque le <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> événement est déclenché pour vérifier les paramètres XSLT sont disponibles au moment de la transformation XSLT est appliquée aux données XML.  
  
 Si le <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> propriété est définie sur `true` et <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> est définie, les entrées du cache ne sont pas invalidées automatiquement lorsque les paramètres changent dans la liste d’arguments de transformations. Dans ce cas, vous devez écrire du code pour invalider le cache en définissant le <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> avec un <xref:System.Web.UI.WebControls.TreeView> contrôle pour afficher les données XML transformées. La transformation XML est effectuée à l’aide de la feuille de style indiquée par la <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> propriété. En outre, la feuille de style utilise des arguments de transformation qui sont passés au contrôle de source de données dans un <xref:System.Xml.Xsl.XsltArgumentList> objet en cours d’exécution. L’exemple de code montre comment passer le <xref:System.Xml.Xsl.XsltArgumentList> au contrôle de source de données en gérant la <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> événement avec un gestionnaire d’événements personnalisé.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 La transformation des données XML est exécutée avec la feuille de style suivante.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="TransformFile">
      <MemberSignature Language="C#" Value="public virtual string TransformFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TransformFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Spécifie le nom d'un fichier XSL (Extensible Stylesheet Language) (.xsl) qui définit une transformation XSLT à exécuter sur les données XML gérées par le contrôle <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</summary>
        <value>Le chemin d'accès physique absolu ou le chemin d'accès relatif du fichier de feuille de style XSL qui définit une transformation XML à exécuter sur les données contenues dans les propriétés <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> ou <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />. La valeur par défaut est <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si les deux le <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> et <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> propriétés sont définies, le <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> propriété a la priorité et les données dans le fichier de feuille de style XSL (.xsl) sont utilisées à la place les éléments de feuille de style spécifiés dans le <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> propriété. Si une expression XPath est définie à l’aide de la <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> propriété, elle est appliquée une fois les données XML transformées.  
  
 Si vous modifiez la valeur de la <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> propriété, le <xref:System.Web.UI.IDataSource.DataSourceChanged> événement est déclenché. Si la mise en cache est activée et que vous modifiez la valeur de <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, le cache est invalidé.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.WebControls.XmlDataSource> classe utilise déconseillées <xref:System.Xml.Xsl.XslTransform> classe pour effectuer des transformations XSL. Si vous souhaitez utiliser les fonctionnalités de feuille de style qui ont été introduites après le <xref:System.Xml.Xsl.XslTransform> classe a été déconseillée, appliquer les transformations manuellement à l’aide de la <xref:System.Xml.Xsl.XslCompiledTransform> classe.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôle et un <xref:System.Web.UI.WebControls.TreeView> contrôle pour afficher les données XML transformées dans un formulaire Web. La transformation est effectuée à l’aide de la feuille de style indiquée par la <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> propriété. Vous pouvez éventuellement fournir des arguments de transformation pour la feuille de style à l’aide un <xref:System.Xml.Xsl.XsltArgumentList>. Pour plus d'informations, consultez la propriété <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/CS/xmlds5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/VB/xmlds5vb.aspx#1)]  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 La feuille de style XSL qui exécute la transformation XML a la structure suivante :  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
     </xsl:attribute>  
     <xsl:attribute name="price">  
       <xsl:value-of select="price"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le document est en cours de chargement.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="Transforming">
      <MemberSignature Language="C#" Value="public event EventHandler Transforming;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Transforming" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Transforming As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Transforming;" />
      <MemberSignature Language="F#" Value="member this.Transforming : EventHandler " Usage="member this.Transforming : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant que la feuille de style qui est définie par la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> ou identifiée par la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> soit appliquée aux données XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérer le <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> événement pour définir le <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> propriété avec une <xref:System.Xml.Xsl.XsltArgumentList> de l’objet avant le <xref:System.Web.UI.WebControls.XmlDataSource> contrôle effectue une transformation XML.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôler avec un <xref:System.Web.UI.WebControls.TreeView> contrôle pour afficher les données XML transformées. La transformation XML est effectuée à l’aide de la feuille de style indiquée par la <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> propriété. En outre, la feuille de style utilise des arguments de transformation qui sont passés au contrôle de source de données dans un <xref:System.Xml.Xsl.XsltArgumentList> en cours d’exécution. L’exemple de code montre comment passer le <xref:System.Xml.Xsl.XsltArgumentList> objet pour le contrôle de source de données en gérant la <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> événement avec un gestionnaire d’événements personnalisé.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 La transformation des données XML est exécutée avec la feuille de style suivante :  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public virtual string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Spécifie une expression XPath à appliquer aux données XML contenues par la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> ou par le fichier XML indiqué par la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />.</summary>
        <value>Chaîne qui représente une expression XPath qui peut être utilisée pour filtrer les données contenues par la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> ou par le fichier XML indiqué par la propriété <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />. La valeur par défaut est <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur les expressions de liaison de données XPath, consultez [liaison d’un contrôle tabulaire au contrôle XmlDataSource](https://msdn.microsoft.com/library/d6bf202f-6454-45fd-9424-e17f6c7eafe8).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.Web.UI.WebControls.XmlDataSource> contrôle avec un basé sur un modèle <xref:System.Web.UI.WebControls.Repeater> contrôle pour afficher les données XML qui a été filtrées à l’aide d’une expression XPath. Dans cet exemple, la syntaxe XPath est utilisée pour filtrer les données XML lorsque le <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> propriété du contrôle de source de données est définie et lie également les éléments de la <xref:System.Web.UI.WebControls.Repeater> modèle de contrôle aux données XML.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/CS/xmlds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/VB/xmlds8vb.aspx#1)]  
  
 Le fichier XML dans l’exemple de code présente les données suivantes :  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le document est en cours de chargement.</exception>
      </Docs>
    </Member>
  </Members>
</Type>