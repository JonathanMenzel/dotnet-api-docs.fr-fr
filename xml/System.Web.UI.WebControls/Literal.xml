<Type Name="Literal" FullName="System.Web.UI.WebControls.Literal">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="da4756060716171494e14cbbe327cdb95c3164c2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36580499" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Literal : System.Web.UI.Control, System.Web.UI.ITextControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Literal extends System.Web.UI.Control implements class System.Web.UI.ITextControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Literal" />
  <TypeSignature Language="VB.NET" Value="Public Class Literal&#xA;Inherits Control&#xA;Implements ITextControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Literal : System::Web::UI::Control, System::Web::UI::ITextControl" />
  <TypeSignature Language="F#" Value="type Literal = class&#xA;    inherit Control&#xA;    interface ITextControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.ITextControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LiteralDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.WebControls.LiteralControlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Réserve un emplacement sur la page web pour afficher du texte statique.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans cette rubrique :  
  
-   [Introduction](#introduction)  
  
-   [Syntaxe déclarative](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduction  
 Utilisez la <xref:System.Web.UI.WebControls.Literal?displayProperty=nameWithType> contrôle pour réserver un emplacement sur la page Web pour afficher le texte. Le <xref:System.Web.UI.WebControls.Literal> contrôle est semblable à la <xref:System.Web.UI.WebControls.Label> (contrôle), sauf le <xref:System.Web.UI.WebControls.Literal> contrôle ne vous permet pas d’appliquer un style au texte affiché. Vous pouvez contrôler par programme le texte affiché dans le contrôle en définissant le <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété.  
  
> [!CAUTION]
>  Ce contrôle peut être utilisé pour afficher l’entrée d’utilisateur, ce qui peut inclure un script client malveillant. Vérifiez toutes les informations envoyées par un client de script exécutable, des instructions SQL ou autre code avant de les afficher dans votre application. ASP.NET fournit une fonctionnalité de validation de demande d’entrée pour bloquer les scripts et le HTML dans l’entrée d’utilisateur. Contrôles serveur de validation sont également fournis pour valider l’entrée d’utilisateur.  
  
 Pour plus d’informations sur la sécurité, consultez [sécurisation des contrôles Standard](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [Comment : protéger contre les attaques de Script dans une Application Web en utilisant l’encodage HTML en chaînes](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), et [ Validation des entrées d’utilisateur dans les Pages Web ASP.NET](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Syntaxe déclarative  
  
```  
<asp:Literal  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    Mode="Transform|PassThrough|Encode"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Text="string"  
    Visible="True|False"  
/>  
```  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser la <xref:System.Web.UI.WebControls.Literal> contrôle à afficher du texte statique.  
  
> [!NOTE]
>  L’exemple suivant utilise le modèle de code de fichier unique et peut ne pas fonctionne correctement si copiées directement dans un fichier code-behind. Cet exemple de code doit être copié dans un fichier texte vide qui a une extension .aspx. Pour plus d’informations sur le modèle de code Web Forms, consultez [modèle de Code de Page ASP.NET Web Forms](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[Literal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Literal/CS/literalcs.aspx#1)]
 [!code-aspx-vb[Literal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal/VB/literalvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.Label" />
    <altmember cref="P:System.Web.UI.WebControls.Literal.Text" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Literal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Literal();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.AddParsedSubObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddParsedSubObject (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddParsedSubObject(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.AddParsedSubObject : obj -&gt; unit" Usage="literal.AddParsedSubObject obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Object" /> qui représente l’élément analysé.</param>
        <summary>Avertit le contrôle <see cref="T:System.Web.UI.WebControls.Literal" /> qu’un élément XML ou HTML a été analysé et ajoute cet élément à la <see cref="T:System.Web.UI.ControlCollection" /> du contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.WebControls.Literal.AddParsedSubObject%2A> contrôler la méthode dans un serveur personnalisé afin qu’elle affecte toujours la <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété à l’objet analysé `Text` propriété, si l’objet analysé est une <xref:System.Web.UI.WebControls.Literal>et vide `string` dans le cas contraire.  
  
 [!code-aspx-csharp[CustomLiteralAddParsedSubObject#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/CS/custom_literal_addparsedsubobjectcs.aspx#1)]
 [!code-aspx-vb[CustomLiteralAddParsedSubObject#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/VB/custom_literal_addparsedsubobjectvb.aspx#1)]  
  
 [!code-csharp[CustomLiteralAddParsedSubObject#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/CS/custom_literal_addparsedsubobject.cs#2)]
 [!code-vb[CustomLiteralAddParsedSubObject#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/VB/custom_literal_addparsedsubobject.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="obj" /> n'est pas de type <see cref="T:System.Web.UI.LiteralControl" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberSignature Language="F#" Value="override this.CreateControlCollection : unit -&gt; System.Web.UI.ControlCollection" Usage="literal.CreateControlCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée un objet <see cref="T:System.Web.UI.EmptyControlCollection" /> pour l’instance actuelle du contrôle <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <returns>Objet <see cref="T:System.Web.UI.ControlCollection" /> pour contenir les contrôles serveur enfants du contrôle serveur actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.WebControls.Literal.CreateControlCollection%2A> contrôler la méthode dans un serveur personnalisé afin qu’il retourne toujours une instance de la <xref:System.Web.UI.EmptyControlCollection> de classes pour la <xref:System.Web.UI.WebControls.Literal> objet.  
  
 [!code-aspx-csharp[CustomLiteralCreateControlCollection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/CS/custom_literal_createcontrolcollectioncs.aspx#1)]
 [!code-aspx-vb[CustomLiteralCreateControlCollection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/VB/custom_literal_createcontrolcollectionvb.aspx#1)]  
  
 [!code-csharp[CustomLiteralCreateControlCollection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/CS/custom_literal_createcontrolcollection.cs#2)]
 [!code-vb[CustomLiteralCreateControlCollection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/VB/custom_literal_createcontrolcollection.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Focus();" />
      <MemberSignature Language="F#" Value="override this.Focus : unit -&gt; unit" Usage="literal.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attribuez un contrôle au focus d'entrée ; la méthode de contrôle de base <see cref="M:System.Web.UI.WebControls.Literal.Focus" /> n'est pas prise en charge sur un contrôle <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Literal> remplacements de contrôler la <xref:System.Web.UI.Control.Focus%2A> méthode de la classe de base. Le <xref:System.Web.UI.WebControls.Literal.Focus%2A> méthode d’un <xref:System.Web.UI.WebControls.Literal> contrôle lève toujours une exception pour indiquer que le <xref:System.Web.UI.WebControls.Literal.Focus%2A> méthode n’est pas prise en charge sur un <xref:System.Web.UI.WebControls.Literal> contrôle.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Le <see cref="M:System.Web.UI.WebControls.Literal.Focus" /> a été appelé sur un <see cref="T:System.Web.UI.WebControls.Literal" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LiteralMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.LiteralMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Literal.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As LiteralMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LiteralMode Mode { System::Web::UI::WebControls::LiteralMode get(); void set(System::Web::UI::WebControls::LiteralMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Web.UI.WebControls.LiteralMode with get, set" Usage="System.Web.UI.WebControls.Literal.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LiteralMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur d'énumération qui spécifie comment le contenu du contrôle <see cref="T:System.Web.UI.WebControls.Literal" /> est rendu.</summary>
        <value>Une des valeurs d'énumération <see cref="T:System.Web.UI.WebControls.LiteralMode" />. La valeur par défaut est <see langword="Transform" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.Literal.Mode%2A> propriété pour spécifier comment le contenu d’un <xref:System.Web.UI.WebControls.Literal> contrôle doit être restitué. Cette propriété est définie à l’aide d’un de le <xref:System.Web.UI.WebControls.LiteralMode> valeurs d’énumération. Le tableau suivant répertorie les valeurs possibles.  
  
|Value|Description |  
|-----------|-----------------|  
|`PassThrough`|Le contenu du contrôle n’est pas modifié.|  
|`Encode`|Le contenu du contrôle est converti en une chaîne encodée au format HTML.|  
|`Transform`|Les éléments de langage de balisage non pris en charge sont supprimés à partir du contenu du contrôle. Si le <xref:System.Web.UI.WebControls.Literal> contrôle est restitué sur un navigateur qui prend en charge HTML ou XHTML, le contenu du contrôle n’est pas modifié.|  
  
 Si vous spécifiez `PassThrough`, tout le contenu de la <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété sont passés à l’appareil ou navigateur sans apporter de modifications. Par exemple, si le <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété d’un <xref:System.Web.UI.WebControls.Literal> contrôle contient un `<hr>` balise, il est envoyé à tous les appareils et navigateurs si elle est prise en charge ou non.  
  
 Si vous spécifiez `Encode`, le contenu pour le <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété sont converties en une chaîne codée en HTML avant d’être restituées. Par exemple, si le <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété d’un <xref:System.Web.UI.WebControls.Literal> contrôle contient un `<hr>` balise, il est converti en `&lt;Hr&gt;` et envoyées à l’appareil ou navigateur.  
  
 Si vous spécifiez `Transform`, le comportement de rendu le <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété varie selon le type de balise restitué. Lorsque le <xref:System.Web.UI.WebControls.Literal> contrôle est restitué pour un périphérique ou un navigateur qui prend en charge HTML ou XHTML, en spécifiant <xref:System.Web.UI.WebControls.LiteralMode.Transform> produit le même comportement que la spécification <xref:System.Web.UI.WebControls.LiteralMode.PassThrough>. Toutes les balises et les éléments pour le <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété sont rendus pour le navigateur demandeur.  
  
 Lorsque le <xref:System.Web.UI.WebControls.Literal> contrôle est restitué pour un langage de balisage autre que HTML ou XHTML, par exemple WML ou cHTML, vous pouvez utiliser la <xref:System.Web.UI.WebControls.LiteralMode.Transform> valeur à supprimer des éléments de balisage non pris en charge. Dans ce cas, des éléments de langage de balisage de la <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété qui ne sont pas pris en charge dans le langage de balisage ciblé ne sont pas rendus pour le contrôle. Par exemple, si le <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété d’un <xref:System.Web.UI.WebControls.Literal> contrôle contient un `<hr>` balise, la balise est supprimée avant que le contenu est envoyé à un périphérique WML. Si une balise non prise en charge contient du contenu, seule la balise est supprimée et le contenu est envoyé à l’appareil ou navigateur. Par exemple, si le <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété contient le contenu `<XYZ>Test</XYZ>`, le `<XYZ>` et `</XYZ>` sont supprimées et le texte « Test » est envoyé à l’appareil ou navigateur.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment définir un <xref:System.Web.UI.WebControls.Literal> du contrôle <xref:System.Web.UI.WebControls.Literal.Mode%2A> propriété. Le <xref:System.Web.UI.WebControls.Literal.Mode%2A> est initialement définie sur `Encode` dans la syntaxe déclarative pour le contrôle. Après le chargement de la page, l’utilisateur peut cliquer sur un bouton pour définir le <xref:System.Web.UI.WebControls.Literal.Mode%2A> propriété `PassThrough`. Ainsi, le contenu de la <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété rendu différemment.  
  
> [!NOTE]
>  L’exemple suivant utilise le modèle de code de fichier unique et peut ne pas fonctionne correctement si copiées directement dans un fichier code-behind. Cet exemple de code doit être copié dans un fichier texte vide qui a une extension .aspx. Pour plus d’informations sur le modèle de code Web Forms, consultez [modèle de Code de Page ASP.NET Web Forms](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-vb[Literal.Mode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal.Mode/VB/literal.modevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Le type spécifié ne fait pas partie des valeurs d'énumération <see cref="T:System.Web.UI.WebControls.LiteralMode" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.LiteralMode" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="literal.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Objet <see cref="T:System.Web.UI.HtmlTextWriter" /> qui reçoit le contenu du contrôle serveur.</param>
        <summary>Envoie le contenu du contrôle serveur à un objet <see cref="T:System.Web.UI.HtmlTextWriter" />, qui écrit le contenu à rendre sur le client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.WebControls.Literal.Render%2A> contrôler la méthode dans un serveur personnalisé afin qu’un texte spécifique est toujours affiché avant le <xref:System.Web.UI.WebControls.Literal>.  
  
 [!code-aspx-csharp[CustomLiteralRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralRender/CS/custom_literal_rendercs.aspx#1)]
 [!code-aspx-vb[CustomLiteralRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralRender/VB/custom_literal_rendervb.aspx#1)]  
[!code-csharp[CustomLiteralRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralRender/CS/custom_literal_render.cs#2)]
[!code-vb[CustomLiteralRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralRender/VB/custom_literal_render.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Literal.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.WebControls.Literal.Text" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.ITextControl.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la légende affichée dans le contrôle <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <value>Légende affichée dans le contrôle <see cref="T:System.Web.UI.WebControls.Literal" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété pour spécifier ou déterminer la légende affichée dans le <xref:System.Web.UI.WebControls.Literal> contrôle. Cela vous permet de modifier par programmation la légende en cours d’exécution.  
  
 La légende est décodée en HTML en fonction de la façon dont vous attribuer une valeur à cette propriété. Si vous affectez une valeur à un attribut de la <xref:System.Web.UI.WebControls.Literal> (contrôle), la valeur est décodée en HTML avant qu’il s’affiche. Par exemple, `<asp:Literal id="DisplayLiteral" Text="A&nbsp;B"/>` est rendu en tant que « A B » dans le navigateur. Toutefois, si vous définissez cette propriété par programme ou en plaçant le texte entre les balises d’ouverture et de fermeture du contrôle, la légende n’est pas décodée en HTML. Par exemple, `<asp:Literal id="DisplayLiteral"> A&nbsp;B </asp:Literal>` est restitué sous la forme « A&nbsp;B ».  
  
> [!CAUTION]
>  Ce contrôle peut être utilisé pour afficher l’entrée d’utilisateur, ce qui peut inclure un script client malveillant. Vérifiez toutes les informations envoyées par un client de script exécutable, des instructions SQL ou autre code avant de les afficher dans votre application. ASP.NET fournit une fonctionnalité de validation de demande d’entrée pour bloquer les scripts et le HTML dans l’entrée d’utilisateur. Contrôles serveur de validation sont également fournis pour valider l’entrée d’utilisateur. Pour plus d’informations, consultez [syntaxe des contrôles serveur de Validation](http://msdn.microsoft.com/library/96d2c59e-693c-4079-9b53-b3ff0d9e9133).  
  
 La valeur de cette propriété, si la valeur, peut être enregistrée automatiquement dans un fichier de ressources à l’aide d’un outil de conception. Pour plus d’informations, consultez <xref:System.ComponentModel.LocalizableAttribute> et [globalisation et localisation](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.Literal.Text%2A> propriété pour modifier par programme la légende affichée dans le <xref:System.Web.UI.WebControls.Literal> contrôle.  
  
> [!NOTE]
>  L’exemple suivant utilise le modèle de code de fichier unique et peut ne pas fonctionne correctement si copiées directement dans un fichier code-behind. Cet exemple de code doit être copié dans un fichier texte vide qui a une extension .aspx. Pour plus d’informations sur le modèle de code Web Forms, consultez [modèle de Code de Page ASP.NET Web Forms](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[Literal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Literal/CS/literalcs.aspx#1)]
 [!code-aspx-vb[Literal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal/VB/literalvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>