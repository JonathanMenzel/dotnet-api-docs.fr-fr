<Type Name="StrongNameIdentityPermission" FullName="System.Security.Permissions.StrongNameIdentityPermission">
  <Metadata><Meta Name="ms.openlocfilehash" Value="847dd5923e1089121bccd2c5c8fafbdb46c5b2e3" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56777625" /></Metadata><TypeSignature Language="C#" Value="public sealed class StrongNameIdentityPermission : System.Security.CodeAccessPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit StrongNameIdentityPermission extends System.Security.CodeAccessPermission" />
  <TypeSignature Language="DocId" Value="T:System.Security.Permissions.StrongNameIdentityPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StrongNameIdentityPermission&#xA;Inherits CodeAccessPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class StrongNameIdentityPermission sealed : System::Security::CodeAccessPermission" />
  <TypeSignature Language="F#" Value="type StrongNameIdentityPermission = class&#xA;    inherit CodeAccessPermission" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit l'autorisation d'identité pour les noms forts. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  En commençant par le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], les autorisations d’identité ne sont pas utilisées.  
>   
>  Dans les versions 1.0 et 1.1 du .NET Framework, les autorisations d’identité ne peut pas avoir un <xref:System.Security.Permissions.PermissionState.Unrestricted> valeur d’état d’autorisation. Dans le .NET Framework version 2.0 et versions ultérieure, les autorisations d’identité peuvent avoir n’importe quelle valeur d’état autorisation.  Cela signifie que dans la version 2.0 et versions ultérieures, les autorisations d’identité ont le même comportement que les autorisations qui implémentent le <xref:System.Security.Permissions.IUnrestrictedPermission> interface. Autrement dit, une demande pour une identité toujours aboutit, quel que soit l’identité de l’assembly, si l’assembly a été accordé une confiance totale.  
  
 Utilisez <xref:System.Security.Permissions.StrongNameIdentityPermission> pour confirmer que le code appelant est dans un assembly de code à nom fort particulier. Demandes complètes de <xref:System.Security.Permissions.StrongNameIdentityPermission> réussit uniquement si tous les assemblys dans la pile disposent des preuves correctes de satisfaire la demande. Demandes de liaison qui utilisent le <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attribut réussit uniquement si l’appelant immédiat possède la preuve correcte.  
  
 Une identité de nom fort est basée sur une clé de chiffrement publique appelée un objet binaire volumineux (BLOB), qui est éventuellement combiné avec le nom et la version d’un assembly spécifique. La clé définit un espace de noms unique et fournit une vérification forte que le nom est authentique, étant donné que la définition du nom doit être dans un assembly est signé par la clé privée correspondante.  
  
 Notez que la validité de la clé de nom fort n’est pas dépendante sur une relation d’approbation ou sur n’importe quel certificat émis obligatoirement pour la clé.  
  
 Dans les versions 1.0 et 1.1 du .NET Framework, les demandes sur les autorisations d’identité sont efficaces même lorsque l’assembly appelant est entièrement fiable. Autrement dit, même si l’assembly appelant bénéficie d’une confiance totale, une demande pour une autorisation d’identité échoue si l’assembly ne répond pas aux critères demandés. Dans le .NET Framework version 2.0 et ultérieures, les demandes pour les autorisations d’identité sont inefficaces si l’assembly appelant bénéficie d’une confiance totale. Cela garantit la cohérence pour toutes les autorisations et évite le traitement des autorisations d’identité comme un cas particulier.  
  
 Pour obtenir une description complète des noms forts, consultez le <xref:System.Security.Policy.StrongName> page de référence. Pour plus d’informations sur les assemblys avec nom fort, consultez [assemblys avec nom fort](~/docs/framework/app-domains/strong-named-assemblies.md).  
  
 Le <xref:System.Security.Permissions.StrongNameIdentityPermission> classe est utilisée pour définir les exigences de nom fort pour l’accès aux membres publics d’un type. Le <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attribut peut être utilisé pour définir les exigences de nom fort au niveau de l’assembly. Dans le .NET Framework version 2.0 et versions ultérieure, vous pouvez également utiliser le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribut pour spécifier que tous les types non publics dans cet assembly sont visibles à un autre assembly. Pour plus d’informations, consultez [Assemblys friend](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.Permissions.StrongNameIdentityPermission" />
    <altmember cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" />
    <altmember cref="T:System.Security.Policy.StrongName" />
    <altmember cref="T:System.Security.Policy.StrongNameMembershipCondition" />
    <related type="Article" href="https://msdn.microsoft.com/library/d4a80263-f3e0-4d81-9b61-f0cbeae3797b">Assemblys avec nom fort</related>
    <related type="Article" href="https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd">Assemblys friend</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StrongNameIdentityPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As PermissionState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StrongNameIdentityPermission(System::Security::Permissions::PermissionState state);" />
      <MemberSignature Language="F#" Value="new System.Security.Permissions.StrongNameIdentityPermission : System.Security.Permissions.PermissionState -&gt; System.Security.Permissions.StrongNameIdentityPermission" Usage="new System.Security.Permissions.StrongNameIdentityPermission state" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">Une des valeurs de <see cref="T:System.Security.Permissions.PermissionState" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> avec le <see cref="T:System.Security.Permissions.PermissionState" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Crée un complètement restreinte (`None`) ou `Unrestricted` autorisation.  
  
> [!NOTE]
>  Dans les versions 1.0 et 1.1 du .NET Framework, les autorisations d’identité ne peut pas avoir un <xref:System.Security.Permissions.PermissionState.Unrestricted> valeur d’état d’autorisation. Dans le .NET Framework version 2.0 et versions ultérieure, les autorisations d’identité peuvent avoir n’importe quelle valeur d’état autorisation.  Cela signifie que dans la version 2.0 et versions ultérieures, les autorisations d’identité ont le même comportement que les autorisations qui implémentent le <xref:System.Security.Permissions.IUnrestrictedPermission> interface. Autrement dit, une demande pour une identité toujours aboutit, quel que soit l’identité de l’assembly, si l’assembly a été accordé une confiance totale.  
  
 Dans les versions 1.0 et 1.1 du .NET Framework, les demandes sur les autorisations d’identité sont efficaces, même lorsque l’assembly appelant est entièrement fiable. Autrement dit, bien que l’assembly appelant dispose d’une confiance totale, une demande pour une autorisation d’identité échoue si l’assembly ne répond pas aux critères demandés. Dans le .NET Framework version 2.0 et ultérieures, les demandes pour les autorisations d’identité sont inefficaces si l’assembly appelant bénéficie d’une confiance totale. Cela garantit la cohérence entre toutes les autorisations, éliminant le traitement des autorisations d’identité comme un cas particulier.  
  
 Utilisez ce constructeur avec une valeur d’état d’autorisation <xref:System.Security.Permissions.PermissionState.None> pour créer une autorisation d’identité qui correspond à aucun des noms forts. Si vous définissez par la suite la <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> et <xref:System.Security.Permissions.StrongNameIdentityPermission.Version%2A> propriétés, une identité de nom fort spécifique peuvent être représentées par l’autorisation.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Security.Permissions.StrongNameIdentityPermission.%23ctor%2A> constructeur.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#7)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#7)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="state" /> n’est pas une valeur valide d’<see cref="T:System.Security.Permissions.PermissionState" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StrongNameIdentityPermission (System.Security.Permissions.StrongNamePublicKeyBlob blob, string name, Version version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Permissions.StrongNamePublicKeyBlob blob, string name, class System.Version version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StrongNameIdentityPermission(System::Security::Permissions::StrongNamePublicKeyBlob ^ blob, System::String ^ name, Version ^ version);" />
      <MemberSignature Language="F#" Value="new System.Security.Permissions.StrongNameIdentityPermission : System.Security.Permissions.StrongNamePublicKeyBlob * string * Version -&gt; System.Security.Permissions.StrongNameIdentityPermission" Usage="new System.Security.Permissions.StrongNameIdentityPermission (blob, name, version)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blob" Type="System.Security.Permissions.StrongNamePublicKeyBlob" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="blob">Clé publique définissant l'espace de noms pour l'identité de nom fort.</param>
        <param name="name">Nom simple faisant partie de l'identité de nom fort. Cela correspond au nom de l'assembly.</param>
        <param name="version">Numéro de version de l'identité.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> pour l'identité de nom fort spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `name` et `version` paramètres peuvent être `null` uniquement lorsque la clé publique est utilisée pour identifier l’assembly. Une chaîne vide (" ») ne doit pas être utilisé à la place de `null`. Si `name` est une chaîne vide, un <xref:System.ArgumentException> est levée.  
  
 Pour plus d’informations sur les noms et numéros de version des assemblys, consultez [assemblys avec nom fort](~/docs/framework/app-domains/strong-named-assemblies.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Security.Permissions.StrongNameIdentityPermission.%23ctor%2A> constructeur.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#8)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#8)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="blob" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="name" /> est une chaîne vide ("").</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Security.IPermission" Usage="strongNameIdentityPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée et retourne une copie identique de l’autorisation actuelle.</summary>
        <returns>Copie de l’autorisation actuelle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une copie d’une autorisation représente le même accès aux ressources que l’autorisation d’origine.  
  
   
  
## Examples  
 L’exemple de code suivant montre le comportement de la <xref:System.Security.Permissions.StrongNameIdentityPermission.Copy%2A> (méthode). Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Security.Permissions.StrongNameIdentityPermission> classe. Le meilleur parti de cet exemple consiste à générer et exécuter l’exemple complet et afficher sa sortie.  
  
> [!NOTE]
>  L’exemple de code vise à montrer le comportement de la méthode, et non son utilisation. En règle générale, les méthodes des classes d’autorisation sont utilisées par l’infrastructure de sécurité ; ils sont généralement pas utilisés dans les applications.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#5)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#5)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXml (e As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXml(System::Security::SecurityElement ^ e);" />
      <MemberSignature Language="F#" Value="override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="strongNameIdentityPermission.FromXml e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="e">Encodage XML à utiliser pour reconstruire l’autorisation.</param>
        <summary>Reconstruit une autorisation avec un état spécifié à partir d'un encodage XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’est pas utilisée par le code d’application.  
  
   
  
## Examples  
 L’exemple de code suivant montre le comportement de la <xref:System.Security.Permissions.StrongNameIdentityPermission.FromXml%2A> (méthode). Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Security.Permissions.StrongNameIdentityPermission> classe. Le meilleur parti de cet exemple consiste à générer et exécuter l’exemple complet et afficher sa sortie.  
  
> [!NOTE]
>  L’exemple de code vise à montrer le comportement de la méthode, et non son utilisation. En règle générale, les méthodes des classes d’autorisation sont utilisées par l’infrastructure de sécurité ; ils sont généralement pas utilisés dans les applications.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#6)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#6)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="e" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="e" /> n'est pas un élément d'autorisation valide.  
  
ou 
Le numéro de version du paramètre <paramref name="e" /> n'est pas valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="strongNameIdentityPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Autorisation à croiser avec l'autorisation en cours. Elle doit être du même type que l’autorisation actuelle.</param>
        <summary>Crée et retourne une autorisation qui est l'intersection entre l'autorisation actuelle et l'autorisation spécifiée.</summary>
        <returns>Nouvelle autorisation qui représente l'intersection entre l'autorisation actuelle et l'autorisation spécifiée, ou <see langword="null" /> si l'intersection est vide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’intersection de deux autorisations est une autorisation qui décrit l’ensemble des opérations qu’elles décrivent en commun. Seule une demande qui passe les deux autorisations d’origine transmettra l’intersection.  
  
 L’intersection de deux autorisations d’identité de nom fort identiques est la même autorisation. L’intersection de deux différentes (non génériques) expressions est une autorisation vide. L’intersection entre une expression générique et un nom fort correspondant est le nom fort. L’intersection de deux expressions génériques qui correspondent aux est plus longue, plus spécifique des deux expressions.  
  
   
  
## Examples  
 L’exemple de code suivant montre les résultats de l’utilisation de la <xref:System.Security.Permissions.StrongNameIdentityPermission.Intersect%2A> (méthode), pas l’utilisation de la méthode. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Security.Permissions.StrongNameIdentityPermission> classe. Le meilleur parti de cet exemple consiste à générer et exécuter l’exemple complet et afficher sa sortie.  
  
> [!NOTE]
>  L’exemple de code vise à montrer le comportement de la méthode, et non son utilisation. En règle générale, les méthodes des classes d’autorisation sont utilisées par l’infrastructure de sécurité ; ils sont généralement pas utilisés dans les applications.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#4)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#4)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="target" /> n'est pas <see langword="null" /> et n'est pas du même type que l'autorisation en cours.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="strongNameIdentityPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Autorisation qui doit être testée pour la relation de sous-ensemble. Cette autorisation doit être du même type que l'autorisation en cours.</param>
        <summary>Détermine si l'autorisation en cours est un sous-ensemble de l'autorisation spécifiée.</summary>
        <returns><see langword="true" /> si l'autorisation en cours est un sous-ensemble de l'autorisation spécifiée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’autorisation actuelle est un sous-ensemble de l’autorisation spécifiée si l’autorisation en cours spécifie un ensemble d’opérations qui est entièrement contenu par l’autorisation spécifiée. Par exemple, les autres propriétés étant égales, une identité avec le <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> propriété contenant l’expression générique MaSociété.MonService est identifiée comme un sous-ensemble d’une identité avec le <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> propriété est MaSociété.MonService.MonFichier .  
  
   
  
## Examples  
 L’exemple de code suivant montre les résultats de l’utilisation de la <xref:System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf%2A> (méthode), pas l’utilisation de la méthode. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Security.Permissions.StrongNameIdentityPermission> classe. Le meilleur parti de cet exemple consiste à générer et exécuter l’exemple complet et afficher sa sortie.  
  
> [!NOTE]
>  L’exemple de code vise à montrer le comportement de la méthode, et non son utilisation. En règle générale, les méthodes des classes d’autorisation sont utilisées par l’infrastructure de sécurité ; ils sont généralement pas utilisés dans les applications.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#2)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#2)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="target" /> n'est pas <see langword="null" /> et n'est pas du même type que l'autorisation en cours.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Security.Permissions.StrongNameIdentityPermission.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Security.Permissions.StrongNameIdentityPermission.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la portion nom simple de l'identité de nom fort.</summary>
        <value>Nom simple faisant partie de l'identité.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> propriété peut être un nom exact ou peut être modifiée par un caractère générique dans la dernière position ; par exemple, MaSociété.MonService.MonFichier et MaSociété.MonService sont des noms valides. Si vous tentez de définir la <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> propriété sur une chaîne vide (« »), un <xref:System.ArgumentException> est levée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur est une chaîne vide ("").</exception>
        <exception cref="T:System.NotSupportedException">La valeur de la propriété ne peut pas être récupérée, car elle contient une identité ambiguë.</exception>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.StrongNamePublicKeyBlob PublicKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Permissions.StrongNamePublicKeyBlob PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Permissions.StrongNameIdentityPermission.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public Property PublicKey As StrongNamePublicKeyBlob" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Permissions::StrongNamePublicKeyBlob ^ PublicKey { System::Security::Permissions::StrongNamePublicKeyBlob ^ get(); void set(System::Security::Permissions::StrongNamePublicKeyBlob ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PublicKey : System.Security.Permissions.StrongNamePublicKeyBlob with get, set" Usage="System.Security.Permissions.StrongNameIdentityPermission.PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.StrongNamePublicKeyBlob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet binaire volumineux (BLOB) de clé publique qui définit l'espace de noms pour l'identité de nom fort.</summary>
        <value><see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> qui contient la clé publique de l'identité, ou <see langword="null" /> s'il n'existe aucune clé.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">La propriété a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">La valeur de la propriété ne peut pas être récupérée, car elle contient une identité ambiguë.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="strongNameIdentityPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée un encodage XML de l'autorisation et de son état actuel.</summary>
        <returns>Codage XML de l'autorisation, y compris les informations d'état.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, cette méthode n’est pas utilisée par code d’application.  
  
   
  
## Examples  
 L’exemple de code suivant montre le comportement de la <xref:System.Security.Permissions.StrongNameIdentityPermission.ToXml%2A> (méthode).  
  
> [!NOTE]
>  L’exemple de code vise à montrer le comportement de la méthode, et non son utilisation. En règle générale, les méthodes des classes d’autorisation sont utilisées par l’infrastructure de sécurité ; ils sont généralement pas utilisés dans les applications.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#6)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#6)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="strongNameIdentityPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Autorisation à combiner avec l’autorisation actuelle. Elle doit être du même type que l’autorisation actuelle.</param>
        <summary>Crée une autorisation qui est l’union de l’autorisation actuelle et de l’autorisation spécifiée.</summary>
        <returns>Nouvelle autorisation qui représente l’union de l’autorisation actuelle et de l’autorisation spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le résultat d’un appel à <xref:System.Security.Permissions.StrongNameIdentityPermission.Union%2A> est une autorisation qui représente toutes les opérations représentées par l’autorisation actuelle et l’autorisation spécifiée. Toutes les demandes qui transmet une autorisation passent leur union.  
  
 L’union d’une autorisation et `null` est l’autorisation qui n’est pas `null`. L’union d’une autorisation et un sous-ensemble de cette autorisation sont l’autorisation qui contient l’autre. Toute autre combinaison entraîne une <xref:System.ArgumentException> levée d’exception.  
  
   
  
## Examples  
 L’exemple de code suivant montre les résultats de l’utilisation de la <xref:System.Security.Permissions.StrongNameIdentityPermission.Union%2A> (méthode), pas l’utilisation de la méthode. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Security.Permissions.StrongNameIdentityPermission> classe. Le meilleur parti de cet exemple consiste à générer et exécuter l’exemple complet et afficher sa sortie.  
  
> [!NOTE]
>  L’exemple de code vise à montrer le comportement de la méthode, et non son utilisation. En règle générale, les méthodes des classes d’autorisation sont utilisées par l’infrastructure de sécurité ; ils sont généralement pas utilisés dans les applications.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#3)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#3)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="target" /> n'est pas <see langword="null" /> et n'est pas du même type que l'autorisation en cours.  
  
ou 
Les deux autorisations ne sont pas égales et l'une est un sous-ensemble de l'autre.</exception>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public Version Version { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version Version" />
      <MemberSignature Language="DocId" Value="P:System.Security.Permissions.StrongNameIdentityPermission.Version" />
      <MemberSignature Language="VB.NET" Value="Public Property Version As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ Version { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Version : Version with get, set" Usage="System.Security.Permissions.StrongNameIdentityPermission.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le numéro de version de l'identité.</summary>
        <value>Version de l'identité.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">La valeur de la propriété ne peut pas être récupérée, car elle contient une identité ambiguë.</exception>
      </Docs>
    </Member>
  </Members>
</Type>