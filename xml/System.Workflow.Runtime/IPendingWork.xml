<Type Name="IPendingWork" FullName="System.Workflow.Runtime.IPendingWork">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a519061d31a9ba6f2445be7c69497c588a08f3af" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48721348" /></Metadata><TypeSignature Language="C#" Value="public interface IPendingWork" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPendingWork" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.IPendingWork" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPendingWork" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPendingWork" />
  <TypeSignature Language="F#" Value="type IPendingWork = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit des méthodes permettant de participer à un travail en traitement par lots.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 L'interface <xref:System.Workflow.Runtime.IPendingWork> est fournie pour les services souhaitant participer au mécanisme de traitement par lots du moteur d'exécution de workflow. Ce mécanisme de traitement par lots est particulièrement utile pour les services qui utilisent un magasin durable. Dans ces situations, il est souvent important de maintenir la cohérence entre le magasin durable utilisé par le service et l'état interne du moteur d'exécution de workflow.  
  
 Si vous souhaitez que votre service participe au traitement par lots de la transaction de workflow fournie par la <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, vous devez implémenter les méthodes définies par l'interface <xref:System.Workflow.Runtime.IPendingWork>. Le moteur d'exécution de workflow doit appeler la méthode <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> à votre service pour valider le lot.  
  
 La classe <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> implémente l'interface <xref:System.Workflow.Runtime.IPendingWork>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (System.Transactions.Transaction transaction, System.Collections.ICollection items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(class System.Transactions.Transaction transaction, class System.Collections.ICollection items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.IPendingWork.Commit(System.Transactions.Transaction,System.Collections.ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit(System::Transactions::Transaction ^ transaction, System::Collections::ICollection ^ items);" />
      <MemberSignature Language="F#" Value="abstract member Commit : System.Transactions.Transaction * System.Collections.ICollection -&gt; unit" Usage="iPendingWork.Commit (transaction, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
        <Parameter Name="items" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="transaction"><see cref="T:System.Transactions.Transaction" /> associée au travail en attente.</param>
        <param name="items">Éléments de travail à valider.</param>
        <summary>Valide la liste d'éléments de travail en utilisant l'objet <see cref="T:System.Transactions.Transaction" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le moteur d'exécution de workflow appelle la méthode <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> lorsque sa syntaxe ordonne que le travail en attente dans le travail en traitement par lots soit validé. Lorsqu'il atteint un point de validation, le moteur d'exécution de workflow appelle la méthode <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> sur chaque objet <xref:System.Workflow.Runtime.IPendingWork> de travail en traitement par lots ; le moteur d'exécution de workflow passe la méthode <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> que la collection d'éléments a associée à cet objet <xref:System.Workflow.Runtime.IPendingWork>. Soit tout le travail d'un lot réussit, soit aucun. Vous devez lever une exception si aucun des éléments de travail passé à la méthode <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> dans votre implémentation ne peut être validé. Selon votre implémentation, vous pouvez exécuter la restauration de votre méthode <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> si elle ne peut pas valider ses éléments de travail. Si le moteur d'exécution de workflow valide avec succès toutes les tâches du travail en traitement par lots, il appelle <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> avec le paramètre `succeeded` défini à `true` ; sinon, il appelle <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> avec `succeeded` défini à `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete (bool succeeded, System.Collections.ICollection items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete(bool succeeded, class System.Collections.ICollection items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.IPendingWork.Complete(System.Boolean,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete (succeeded As Boolean, items As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete(bool succeeded, System::Collections::ICollection ^ items);" />
      <MemberSignature Language="F#" Value="abstract member Complete : bool * System.Collections.ICollection -&gt; unit" Usage="iPendingWork.Complete (succeeded, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="succeeded" Type="System.Boolean" />
        <Parameter Name="items" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="succeeded"><see langword="true" /> si la transaction est réussie ; sinon <see langword="false" />.</param>
        <param name="items"><see cref="T:System.Collections.ICollection" /> d'éléments de travail.</param>
        <summary>Appelé lorsque la transaction est effectuée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `succeeded` est `true`, la transaction est réussie et toutes les ressources utilisées par le travail en traitement par lots peuvent être diffusées. Si `succeeded` est `false`, la transaction a échoué. Selon votre implémentation, vous pouvez exécuter la restauration des tâches du travail en traitement par lots lorsque la transaction échoue.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MustCommit">
      <MemberSignature Language="C#" Value="public bool MustCommit (System.Collections.ICollection items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MustCommit(class System.Collections.ICollection items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.IPendingWork.MustCommit(System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function MustCommit (items As ICollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MustCommit(System::Collections::ICollection ^ items);" />
      <MemberSignature Language="F#" Value="abstract member MustCommit : System.Collections.ICollection -&gt; bool" Usage="iPendingWork.MustCommit items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="items"><see cref="T:System.Collections.ICollection" /> d'éléments de travail.</param>
        <summary>Autorise les éléments du travail en traitement par lots à indiquer s’ils doivent valider immédiatement.</summary>
        <returns><see langword="true" /> si tout élément de la collection doit être validé immédiatement ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Workflow.Runtime.IPendingWork.MustCommit%2A> renvoie `false`, le travail peut être remis à un futur point de validation. Si l'un des éléments doit être validé, renvoyez `true` et tous les éléments seront validés au point de validation actuel. Pour une discussion concernant les possibilités de points de validation, consultez la classe <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>