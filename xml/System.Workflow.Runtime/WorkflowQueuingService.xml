<Type Name="WorkflowQueuingService" FullName="System.Workflow.Runtime.WorkflowQueuingService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cf97ac74c2c97120fc5e510068a6cb6a1a000982" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30719773" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WorkflowQueuingService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WorkflowQueuingService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowQueuingService" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowQueuingService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowQueuingService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit les services pour la gestion d'objets <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.WorkflowQueuingService> fournit des méthodes que vous pouvez utiliser pour gérer les files d'attente du workflow associées à une instance de workflow.  
  
   
  
## Examples  
 L'exemple de code suivant montre une méthode, nommée `CreateQueue`, qui initialise un objet <xref:System.Workflow.Runtime.WorkflowQueuingService> en appelant la méthode <xref:System.Workflow.ComponentModel.ActivityExecutionContext.GetService%2A?displayProperty=nameWithType>. Le code utilise ensuite la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.Exists%2A> pour déterminer si une <xref:System.Workflow.Runtime.WorkflowQueue> portant un nom donné existe. Si l'élément n'existe pas, le code appelle la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A> ; s'il existe, le code appelle la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A>.  
  
 Cet exemple de code fait partie de l'exemple du Kit de développement logiciel File Watcher Activity (SDK) et provient du fichier FileSystemEvent.cs. Pour plus d’informations, consultez [activité de l’Observateur de système de fichier](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#223](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#223)]
 [!code-vb[WF_Samples#223](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#223)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateWorkflowQueue">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowQueue CreateWorkflowQueue (IComparable queueName, bool transactional);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowQueue CreateWorkflowQueue(class System.IComparable queueName, bool transactional) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue(System.IComparable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflowQueue (queueName As IComparable, transactional As Boolean) As WorkflowQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowQueue ^ CreateWorkflowQueue(IComparable ^ queueName, bool transactional);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowQueue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="transactional" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="queueName">Nom de la file d'attente.</param>
        <param name="transactional">Valeur qui spécifie si la <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> est visible à l'extérieur de la portée de la transaction actuelle.</param>
        <summary>Crée une <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> en utilisant le nom spécifié et la portée transactionnelle.</summary>
        <returns>Objet <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une <xref:System.Workflow.Runtime.WorkflowQueue> a été créée avec le `queueName` spécifié. Si transactionnel est `true`, la <xref:System.Workflow.Runtime.WorkflowQueue> est uniquement visible au sein de la transaction actuelle.  
  
   
  
## Examples  
 L'exemple de code suivant montre une méthode, nommée `CreateQueue`, qui initialise un objet <xref:System.Workflow.Runtime.WorkflowQueuingService> en appelant la méthode <xref:System.Workflow.ComponentModel.ActivityExecutionContext.GetService%2A?displayProperty=nameWithType>. Le code utilise ensuite la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.Exists%2A> pour déterminer si une <xref:System.Workflow.Runtime.WorkflowQueue> portant un nom donné existe. Si l'élément n'existe pas, le code appelle la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A> ; s'il existe, le code appelle la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A>.  
  
 Cet exemple de code fait partie de l'exemple du Kit de développement logiciel File Watcher Activity (SDK) et provient du fichier FileSystemEvent.cs. Pour plus d’informations, consultez [activité de l’Observateur de système de fichier](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#223](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#223)]
 [!code-vb[WF_Samples#223](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#223)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueName" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Une <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> portant le même nom défini par <paramref name="queueName" /> existe déjà.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteWorkflowQueue">
      <MemberSignature Language="C#" Value="public void DeleteWorkflowQueue (IComparable queueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteWorkflowQueue(class System.IComparable queueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueuingService.DeleteWorkflowQueue(System.IComparable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteWorkflowQueue (queueName As IComparable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteWorkflowQueue(IComparable ^ queueName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
      </Parameters>
      <Docs>
        <param name="queueName">Nom de la <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> à supprimer.</param>
        <summary>Supprime la <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple de code suivant présente une méthode permettant d'écrire une chaîne sur la console et de créer une instance de <xref:System.Workflow.Runtime.WorkflowQueuingService> en appelant la méthode <xref:System.Workflow.ComponentModel.ActivityExecutionContext.GetService%2A?displayProperty=nameWithType>. Enfin, le code appelle la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.DeleteWorkflowQueue%2A> pour supprimer la file d'attente associée à une propriété `QueueName` dans le workflow actuel.  
  
 Cet exemple de code fait partie de l'exemple du Kit de développement logiciel File Watcher Activity (SDK) et provient du fichier FileSystemEvent.cs. Pour plus d’informations, consultez [activité de l’Observateur de système de fichier](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#224](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#224)]
 [!code-vb[WF_Samples#224](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#224)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueName" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists (IComparable queueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Exists(class System.IComparable queueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueuingService.Exists(System.IComparable)" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists (queueName As IComparable) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Exists(IComparable ^ queueName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
      </Parameters>
      <Docs>
        <param name="queueName">Nom du <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
        <summary>Teste l'existence de la <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> spécifiée.</summary>
        <returns>
          <see langword="true" /> si la <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> existe ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple de code suivant montre une méthode, nommée `CreateQueue`, qui initialise un objet <xref:System.Workflow.Runtime.WorkflowQueuingService> en appelant la méthode <xref:System.Workflow.ComponentModel.ActivityExecutionContext.GetService%2A?displayProperty=nameWithType>. Le code utilise ensuite la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.Exists%2A> pour déterminer si une <xref:System.Workflow.Runtime.WorkflowQueue> portant un nom donné existe. Si l'élément n'existe pas, le code appelle la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A> ; s'il existe, le code appelle la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A>.  
  
 Cet exemple de code fait partie de l'exemple du Kit de développement logiciel File Watcher Activity (SDK) et provient du fichier FileSystemEvent.cs. Pour plus d’informations, consultez [activité de l’Observateur de système de fichier](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#223](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#223)]
 [!code-vb[WF_Samples#223](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#223)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueName" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowQueue">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowQueue GetWorkflowQueue (IComparable queueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowQueue GetWorkflowQueue(class System.IComparable queueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue(System.IComparable)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowQueue (queueName As IComparable) As WorkflowQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowQueue ^ GetWorkflowQueue(IComparable ^ queueName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowQueue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
      </Parameters>
      <Docs>
        <param name="queueName">Nom de la <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> à récupérer.</param>
        <summary>Récupère le <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> spécifié.</summary>
        <returns>Objet <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple de code suivant montre une méthode, nommée `CreateQueue`, qui initialise un objet <xref:System.Workflow.Runtime.WorkflowQueuingService> en appelant la méthode <xref:System.Workflow.ComponentModel.ActivityExecutionContext.GetService%2A?displayProperty=nameWithType>. Le code utilise ensuite la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.Exists%2A> pour déterminer si une <xref:System.Workflow.Runtime.WorkflowQueue> portant un nom donné existe. Si l'élément n'existe pas, le code appelle la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A> ; s'il existe, le code appelle la méthode <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A>.  
  
 Cet exemple de code fait partie de l'exemple du Kit de développement logiciel File Watcher Activity (SDK) et provient du fichier FileSystemEvent.cs. Pour plus d’informations, consultez [activité de l’Observateur de système de fichier](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#223](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#223)]
 [!code-vb[WF_Samples#223](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#223)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueName" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">La <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> spécifiée n'a pas été trouvée.</exception>
      </Docs>
    </Member>
    <Member MemberName="PendingMessagesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty PendingMessagesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty PendingMessagesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Runtime.WorkflowQueuingService.PendingMessagesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PendingMessagesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Workflow::ComponentModel::DependencyProperty ^ PendingMessagesProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contient les éléments non utilisés dans les files d'attente de workflow associées à ce <see cref="T:System.Workflow.Runtime.WorkflowQueuingService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu'une instance de workflow se termine ou s'arrête, tous les éléments non utilisés de ses files d'attente dans le workflow associées à ce <xref:System.Workflow.Runtime.WorkflowQueuingService> sont déplacés dans <xref:System.Workflow.Runtime.WorkflowQueuingService.PendingMessagesProperty>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>