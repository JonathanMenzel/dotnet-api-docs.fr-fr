<Type Name="WorkflowRuntime" FullName="System.Workflow.Runtime.WorkflowRuntime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="268bae235884026d5832c6a363a2f1a115287728" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48663764" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WorkflowRuntime extends System.Object implements class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowRuntime" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowRuntime&#xA;Implements IDisposable, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="F#" Value="type WorkflowRuntime = class&#xA;    interface IServiceProvider&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente l'environnement d'exécution configurable fourni par le moteur d'exécution de workflow.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 L'objet <xref:System.Workflow.Runtime.WorkflowRuntime> expose les fonctionnalités requises par une application et des services hôtes pour configurer et contrôler le moteur d'exécution de workflow et pour être notifié des modifications apportées au moteur d'exécution de workflow et à toutes ses instances de workflow.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Il fournit des exemples sur l'utilisation du constructeur <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> et du <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>et des méthodes <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. Ce code présente également la manière recommandée pour créer un objet <xref:System.Workflow.Runtime.WorkflowInstance> dans un hôte de workflow à l'aide de la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>. Il indique aussi comment définir des gestionnaires d'événements pour les événements <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled>et <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>.  
  
 Cet exemple de code fait partie de la [annulation d’un Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) exemple.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ce type est thread-safe.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Workflow.Runtime.WorkflowRuntime> est initialisé avec les valeurs de propriété par défaut et contient les services principaux par défaut. Pour configurer également le moteur d'exécution de workflow, vous pouvez ajouter et supprimer des services à l'aide des méthodes <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> et <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>, et vous pouvez définir la propriété <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>. Après avoir configuré l'objet <xref:System.Workflow.Runtime.WorkflowRuntime>, appelez la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> pour démarrer le moteur d'exécution de workflow et ses services.  
  
 Le tableau suivant indique les valeurs de propriétés initiales d'une instance de la classe <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
|Property|Valeur initiale|  
|--------------|-------------------|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>|"WorkflowRuntime"|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>|`false`|  
  
 Les services principaux par défaut sont les objets <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> et <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService>.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment vous pouvez utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Il fournit un exemple sur l'utilisation du constructeur <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> pour créer une instance de <xref:System.Workflow.Runtime.WorkflowRuntime> et accéder à ses méthodes et événements.  
  
 Cet exemple de code fait partie de la [annulation d’un Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) exemple.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (string configSectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configSectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configSectionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::String ^ configSectionName);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : string -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime configSectionName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configSectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configSectionName">Nom d'une section <see langword="workflowSettings" /> valide dans le fichier de configuration de l'application.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> en utilisant la section spécifiée du fichier de configuration de l'application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Workflow.Runtime.WorkflowRuntime> est initialisé d'après les paramètres dans la section spécifiée par `configSectionName` dans le fichier de configuration de l'application. `configSectionName` doit correspondre à un élément valide `workflowSettings` section d’un fichier de configuration.  
  
 Lorsque le moteur d’exécution de workflow est configuré à l’aide d’un fichier de configuration d’application, il charge et instancie les classes des types répertoriés dans le `Services` section du fichier de configuration. Lorsque le moteur d'exécution de workflow construit ces classes, il recherche des constructeurs de classe avec les signatures suivantes dans l'ordre suivant :  
  
1.  Service(exécution WorkflowRuntime, paramètres NameValueCollection)  
  
2.  Service(exécution WorkflowRuntime)  
  
3.  Service(paramètres NameValueCollection)  
  
4.  Service()  
  
 Toutes les classes de service chargées à partir d’un fichier de configuration doivent implémenter au moins l’une de ces signatures de constructeur.  
  
 Pour plus d'informations, consultez <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="configSectionName" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">Une section <see langword="workflowSettings" /> valide n'a pas pu être trouvée dans le fichier de configuration de l'application.</exception>
        <exception cref="T:System.InvalidOperationException">Il existe déjà un <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> pour ce domaine d'application.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.Workflow.Runtime.Configuration.WorkflowRuntimeSection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As WorkflowRuntimeSection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::Workflow::Runtime::Configuration::WorkflowRuntimeSection ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : System.Workflow.Runtime.Configuration.WorkflowRuntimeSection -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime settings" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />
      </Parameters>
      <Docs>
        <param name="settings">
          <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />
        </param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> en utilisant les paramètres de la <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" /> spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur fournit un mécanisme pour configurer le moteur d'exécution de workflow à l'aide d'un appel de méthode unique pour les hôtes qui n'utilisent pas de fichier de configuration d'application. Il existe de nombreuses raisons pour lesquelles ne pas utiliser le fichier de configuration d'application. Un hôte peut s'exécuter dans un environnement qui n'autorise pas l'utilisation de fichiers de configuration ; par exemple, dans les environnements approuvés qui n'autorisent pas la lecture du fichier de configuration d'application pour des raisons de sécurité. De plus, un hôte peut utiliser un mécanisme de configuration privé ; par exemple, l'hôte peut stocker les paramètres de configuration du moteur d'exécution de workflow dans une base de données SQL.  
  
 Le moteur d'exécution de workflow charge et instancie les classes des types contenus dans la propriété <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Services%2A?displayProperty=nameWithType>. Lorsque le moteur d'exécution de workflow construit ces classes, il recherche des constructeurs de classe avec les signatures suivantes dans l'ordre suivant :  
  
1.  Service(exécution WorkflowRuntime, paramètres NameValueCollection)  
  
2.  Service(exécution WorkflowRuntime)  
  
3.  Service(paramètres NameValueCollection)  
  
4.  Service()  
  
 Toutes les classes de service spécifiées dans `settings` doivent implémenter au moins l'une de ces signatures de constructeur.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="settings" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Il existe déjà un <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> pour ce domaine d'application.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.AddService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.AddService : obj -&gt; unit" Usage="workflowRuntime.AddService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Objet représentant l'instance de service à ajouter.</param>
        <summary>Ajoute le service spécifié au moteur d'exécution de workflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez configurer le moteur d'exécution de workflow en ajoutant des services principaux. Les services principaux sont ceux qui dérivent de chacune des classes de service de base suivantes : <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> et <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Services principaux peuvent être ajoutés uniquement lorsque le moteur d’exécution de workflow n’est pas en cours d’exécution ; Autrement dit, lorsque <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> est `false`. L'objet <xref:System.Workflow.Runtime.WorkflowRuntime> peut également être utilisé comme conteneur de stockage pour d'autres services qui peuvent être utilisés par d'autres workflows ou par les applications s'exécutant sur un hôte. Si vous ajoutez un service non principal qui dérive de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> après avoir démarré le moteur d'exécution de workflow, la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> appelle la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> implémentée par ce service.  
  
> [!NOTE]
>  La méthode <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> applique la restriction selon laquelle deux services partageant le même objet <xref:System.Type> ne peuvent être ajoutés à l'objet <xref:System.Workflow.Runtime.WorkflowRuntime>. Toutefois, vous pouvez ajouter plusieurs services qui dérivent de la même classe de base.  Il ne peut y avoir qu'un seul service dérivé de chacune des classes de service de base suivantes dans <xref:System.Workflow.Runtime.WorkflowRuntime> : <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> et <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService>.  Si vous ajoutez plusieurs services dérivés de l'une de ces classes (par exemple, deux services de persistance), la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> lève <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Il fournit un exemple d'utilisation de la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> pour ajouter des objets <xref:System.Workflow.Activities.ExternalDataExchangeService> et <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> au moteur d'exécution de workflow.  
  
 Cet exemple de code fait partie de la [l’annulation d’un flux de travail](http://go.microsoft.com/fwlink/?LinkId=157346) exemple.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> est supprimé.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="service" /> est déjà enregistré auprès du moteur d'exécution de workflow.  
  
- ou - 
 <paramref name="service" /> est un service principal et le moteur d'exécution de flux de travail est déjà en cours d'exécution (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> est <see langword="true" />).</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateWorkflow">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crée une instance de workflow en utilisant les paramètres spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le moteur d'exécution de workflow n'a pas été démarré, les méthodes <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> appellent la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Pour obtenir la liste des exceptions possibles, consultez <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Après avoir créé l'instance de workflow, appelez <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A?displayProperty=nameWithType> à l'objet <xref:System.Workflow.Runtime.WorkflowInstance> retourné par la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> pour commencer son exécution.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="workflowType">
          <see cref="T:System.Type" /> de workflow à créer.</param>
        <summary>Crée une nouvelle instance de workflow en utilisant le workflow <see cref="T:System.Type" /> spécifié.</summary>
        <returns>Instance de workflow créée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant que la <xref:System.Workflow.Runtime.WorkflowInstance> soit créée, elle fait l'objet d'une validation. En cas d'erreurs de validation, la <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> est levée. Cela fonctionne bien pour les scénarios simples, mais dans un environnement de serveur, la revalidation d'un workflow pour chaque activation peut s'avérer être un traitement inutile.  
  
 Pour plus d’informations sur la désactivation de la validation, consultez <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 L'exemple de code suivant montre la méthode recommandée pour créer un objet <xref:System.Workflow.Runtime.WorkflowInstance> dans un hôte de workflow à l'aide de la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>.  
  
 Cet exemple de code fait partie de la [annulation d’un Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) exemple.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowDefinitionReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">Une classe <see cref="T:System.Xml.XmlReader" /> qui contient la définition du workflow.</param>
        <summary>Crée une instance de workflow en utilisant le <see cref="T:System.Xml.XmlReader" /> spécifié.</summary>
        <returns>Instance de workflow créée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'instance de workflow est créée à partir d'un fichier de définition du workflow XAML référencé par le <xref:System.Xml.XmlReader>.  
  
 Avant que la <xref:System.Workflow.Runtime.WorkflowInstance> soit créée, elle fait l'objet d'une validation. En cas d'erreurs de validation, la <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> est levée. Cela fonctionne bien pour les scénarios simples, mais dans un environnement de serveur, la revalidation d'un workflow pour chaque activation peut s'avérer être un traitement inutile.  
  
 Pour plus d’informations sur la désactivation de la validation, consultez <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 L'exemple suivant montre comment créer un workflow avec une définition de workflow basée sur XAML.  
  
```  
static void Main(string[] args)  
{  
    using (WorkflowRuntime workflowRuntime = new WorkflowRuntime())  
    {  
        AutoResetEvent waitHandle = new AutoResetEvent(false);  
        workflowRuntime.WorkflowCompleted += delegate(object sender, WorkflowCompletedEventArgs e)  
        {  
            waitHandle.Set();  
        };  
        workflowRuntime.WorkflowTerminated += delegate(object sender, WorkflowTerminatedEventArgs e)  
        {  
            Console.WriteLine(e.Exception.Message);  
            waitHandle.Set();  
        };  
  
        TypeProvider typeProvider = new TypeProvider(null);  
        // Add referenced assemblies, if needed  
        // typeProvider.AddAssembly(...);  
        workflowRuntime.AddService(typeProvider);  
  
        using (XmlReader reader = XmlReader.Create("Workflow1.xoml"))  
        {  
            WorkflowInstance instance = workflowRuntime.CreateWorkflow(reader);  
            instance.Start();  
        }  
  
        waitHandle.WaitOne();  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> est supprimé.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowType">
          <see cref="T:System.Type" /> de workflow à créer.</param>
        <param name="namedArgumentValues">Objet <see cref="T:System.Collections.Generic.Dictionary`2" /> d'objets indexé par une chaîne qui représente les arguments passés au workflow.</param>
        <summary>Crée une instance de workflow en utilisant le <see cref="T:System.Type" /> de workflow spécifié et les arguments au workflow contenus dans le <see cref="T:System.Collections.Generic.Dictionary`2" /> spécifié.</summary>
        <returns>Instance de workflow créée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant que la <xref:System.Workflow.Runtime.WorkflowInstance> soit créée, elle fait l'objet d'une validation. En cas d'erreurs de validation, la <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> est levée. Cela fonctionne bien pour les scénarios simples, mais dans un environnement de serveur, la revalidation d'un workflow pour chaque activation peut s'avérer être un traitement inutile.  
  
 Pour plus d’informations sur la désactivation de la validation, consultez <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Pour obtenir un exemple de passage de paramètres à `CreateWorkflow`, consultez [Workflow with Parameters, exemple](http://go.microsoft.com/fwlink/?LinkId=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowType">
          <see cref="T:System.Type" /> de workflow à créer.</param>
        <param name="namedArgumentValues">Objet <see cref="T:System.Collections.Generic.Dictionary`2" /> d'objets indexé par une chaîne qui représente les arguments passés au workflow.</param>
        <param name="instanceId">
          <see cref="T:System.Guid" /> de la <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> spécifique à créer.</param>
        <summary>Crée une instance de workflow en utilisant les paramètres spécifiés.</summary>
        <returns>Instance de workflow créée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant que la <xref:System.Workflow.Runtime.WorkflowInstance> soit créée, elle fait l'objet d'une validation. En cas d'erreurs de validation, la <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> est levée. Cela fonctionne bien pour les scénarios simples, mais dans un environnement de serveur, la revalidation d'un workflow pour chaque activation peut s'avérer être un traitement inutile.  
  
 Pour plus d’informations sur la désactivation de la validation, consultez <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 L'`instanceId` de workflow pour tous les workflows en cours chargés par le <xref:System.Workflow.Runtime.WorkflowRuntime> doit être unique. Si vous passez un `instanceId` pour créer un workflow et qu'un workflow en cours d'exécution utilise déjà cet `instanceId`, une exception <xref:System.InvalidOperationException> est levée.  
  
 Pour obtenir un exemple de passage de paramètres à `CreateWorkflow`, consultez [Workflow with Parameters, exemple](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">Une classe <see cref="T:System.Xml.XmlReader" /> qui contient la définition du workflow.</param>
        <param name="rulesReader">Élément <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">Objet <see cref="T:System.Collections.Generic.Dictionary`2" /> d'objets indexé par une chaîne qui représente les arguments passés au workflow.</param>
        <summary>Crée une instance de workflow en utilisant les objets <see cref="T:System.Xml.XmlReader" /> spécifiés et les arguments contenus dans le <see cref="T:System.Collections.Generic.Dictionary`2" /> spécifié.</summary>
        <returns>Instance de workflow créée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'instance de workflow est créée à partir de la définition de workflow référencée par le <xref:System.Xml.XmlReader> et les arguments fournis par `namedArgumentValues`.  
  
 Avant que la <xref:System.Workflow.Runtime.WorkflowInstance> soit créée, elle fait l'objet d'une validation. En cas d'erreurs de validation, la <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> est levée. Cela fonctionne bien pour les scénarios simples, mais dans un environnement de serveur, la revalidation d'un workflow pour chaque activation peut s'avérer être un traitement inutile.  
  
 Pour plus d’informations sur la désactivation de la validation, consultez <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Pour obtenir un exemple de passage de paramètres à `CreateWorkflow`, consultez [Workflow with Parameters, exemple](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Pour obtenir un exemple d’utilisation des règles définies dans XML, consultez [IfElse with Rules, exemple](http://go.microsoft.com/fwlink/?LinkId=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> est supprimé.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">Une classe <see cref="T:System.Xml.XmlReader" /> qui contient la définition du workflow.</param>
        <param name="rulesReader">Élément <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">Objet <see cref="T:System.Collections.Generic.Dictionary`2" /> d'objets indexé par une chaîne qui représente les arguments passés au workflow.</param>
        <param name="instanceId">
          <see cref="T:System.Guid" /> de la <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> spécifique à créer.</param>
        <summary>Crée une instance de workflow en utilisant les paramètres spécifiés.</summary>
        <returns>Instance de workflow créée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant que la <xref:System.Workflow.Runtime.WorkflowInstance> soit créée, elle fait l'objet d'une validation. En cas d'erreurs de validation, la <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> est levée. Cela fonctionne bien pour les scénarios simples, mais dans un environnement de serveur, la revalidation d'un workflow pour chaque activation peut s'avérer être un traitement inutile.  
  
 Pour plus d’informations sur la désactivation de la validation, consultez <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 L'`instanceId` de workflow pour tous les workflows en cours chargés par le <xref:System.Workflow.Runtime.WorkflowRuntime> doit être unique. Si vous passez un `instanceId` pour créer un workflow et qu'un workflow en cours d'exécution utilise déjà cet `instanceId`, une exception <xref:System.InvalidOperationException> est levée.  
  
 Pour obtenir un exemple de passage de paramètres à `CreateWorkflow`, consultez [Workflow with Parameters, exemple](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Pour obtenir un exemple d’utilisation des règles définies dans XML, consultez [IfElse with Rules, exemple](http://go.microsoft.com/fwlink/?LinkID=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="workflowRuntime.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère les ressources utilisées par le <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour arrêter l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> de façon appropriée, vous ne devez appeler la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> qu'après avoir appelé la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. En effet, l'appel de la seule méthode <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> rend <xref:System.Workflow.Runtime.WorkflowRuntime> inutilisable. <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> libère les ressources utilisées par l'exécution en fermant les handles de fichiers ouverts, les connexions de la base de données et ainsi de suite, mais elle ne décharge pas d'instances de workflow, n'arrête pas les services ni aucune autre action exécutée par <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  
  
 La méthode <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> doit être appelée uniquement lorsque l'application hôte doit libérer les ressources utilisées par l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> avant qu'elles ne soient libérées automatiquement par le garbage collector. Pour des informations générales sur <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
   
  
## Examples  
 L'exemple suivant montre comment appeler <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> à un objet <xref:System.Workflow.Runtime.WorkflowRuntime>. Dans cet exemple, la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> est appelée à partir du gestionnaire d'événements FormClosing pour le formulaire principal de l'application ; cela garantit que les objets créés par le runtime sont nettoyés correctement lorsque l'application s’arrête. Cet exemple est issu le [Speech Application exemple](http://go.microsoft.com/fwlink/?LinkId=157405).  
  
 [!code-csharp[WF_Samples#108](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#108)]
 [!code-vb[WF_Samples#108](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;object&gt; GetAllServices (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;object&gt; GetAllServices(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices (serviceType As Type) As ReadOnlyCollection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Object ^&gt; ^ GetAllServices(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : Type -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;obj&gt;" Usage="workflowRuntime.GetAllServices serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Objet <see cref="T:System.Type" /> que les services doivent implémenter pour être retournés.</param>
        <summary>Récupère tous les services ajoutés au moteur d'exécution de workflow qui implémentent ou dérivent de l'objet <see cref="T:System.Type" /> spécifié.</summary>
        <returns>Services qui implémentent ou dérivent de l'objet <see cref="T:System.Type" /> spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un objet <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> vide indique qu'aucun service qui implémente ou dérive de l'objet <xref:System.Type> spécifié n'a été ajouté au moteur d'exécution de workflow.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment récupérer tous les services d'un type donné à partir d'un objet <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#19](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#19)]
 [!code-vb[WF_Samples#19](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> est supprimé.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; GetAllServices&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; GetAllServices&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices(Of T) () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ GetAllServices();" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="workflowRuntime.GetAllServices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Type de service.</typeparam>
        <summary>Récupère tous les services ajoutés au moteur d'exécution de workflow qui implémentent ou dérivent d'un type générique spécifié.</summary>
        <returns>Services qui implémentent ou dérivent du type générique spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un objet <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> vide indique qu'aucun service n'a été ajouté au moteur d'exécution de workflow qui implémente le type générique spécifié ou est dérivé de ce type.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment récupérer tous les services d'un type donné à partir d'un objet <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#6](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#6)]
 [!code-vb[WF_Samples#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> est supprimé.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedWorkflows">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetLoadedWorkflows" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLoadedWorkflows () As ReadOnlyCollection(Of WorkflowInstance)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowInstance ^&gt; ^ GetLoadedWorkflows();" />
      <MemberSignature Language="F#" Value="member this.GetLoadedWorkflows : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;" Usage="workflowRuntime.GetLoadedWorkflows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient une collection contenant toutes les instances de workflow chargées actuellement en mémoire.</summary>
        <returns>Objet <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> pour chaque instance de workflow actuellement chargée en mémoire.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il est à noter que, contrairement à <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>, cette méthode ne lève pas <xref:System.InvalidOperationException> si le runtime n'est pas démarré.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment récupérer une collection de workflows chargés à partir d'un objet <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#18](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#18)]
 [!code-vb[WF_Samples#18](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> est supprimé.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="workflowRuntime.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <see cref="T:System.Type" /> du service à récupérer.</param>
        <summary>Récupère un service de l'objet <see cref="T:System.Type" /> spécifié à partir du moteur d'exécution de workflow.</summary>
        <returns>Service de l'objet <see cref="T:System.Type" /> spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> lève une <xref:System.InvalidOperationException> si plusieurs services existent pour le <xref:System.Type> spécifié. Par conséquent, vous devez utiliser l'une des méthodes surchargées de <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> s'il est possible que plusieurs services du type spécifié soient présents dans l'objet <xref:System.Workflow.Runtime.WorkflowRuntime>. Par exemple, le moteur d'exécution de workflow peut disposer de plusieurs services de suivi. Si vous demandez un service de suivi en spécifiant la classe de base <xref:System.Workflow.Runtime.Tracking.TrackingService>, il est possible qu'une exception soit levée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> est déjà supprimé.</exception>
        <exception cref="T:System.InvalidOperationException">Plusieurs services de type <paramref name="serviceType" /> ont été trouvés.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetService&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetService&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetService();" />
      <MemberSignature Language="F#" Value="member this.GetService : unit -&gt; 'T" Usage="workflowRuntime.GetService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Type de service.</typeparam>
        <summary>Récupère un service du type générique spécifié du moteur d'exécution de workflow.</summary>
        <returns>Service unique du type générique spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> lève une <xref:System.InvalidOperationException> si plusieurs services existent pour le type générique spécifié. Par conséquent, vous devez utiliser l'une des méthodes surchargées de <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> s'il est possible que plusieurs services du type générique soient présents dans l'objet <xref:System.Workflow.Runtime.WorkflowRuntime>. Par exemple, le moteur d'exécution de workflow peut disposer de plusieurs services de suivi. Si vous demandez un service de suivi en spécifiant la classe de base <xref:System.Workflow.Runtime.Tracking.TrackingService>, il est possible qu'une exception soit levée.  
  
   
  
## Examples  
 L'exemple suivant montre comment récupérer un service unique à partir d'un objet <xref:System.Workflow.Runtime.WorkflowRuntime>, dans le cas présent, un service de type <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService>. Cet exemple est issu le [Workflow Threading, exemple](http://go.microsoft.com/fwlink/?LinkId=157350).  
  
 [!code-csharp[WF_Samples#28](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#28)]
 [!code-vb[WF_Samples#28](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> a déjà été supprimé.</exception>
        <exception cref="T:System.InvalidOperationException">Plusieurs services de type générique ont été trouvés.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance GetWorkflow (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance GetWorkflow(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflow (instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ GetWorkflow(Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.GetWorkflow : Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.GetWorkflow instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">
          <see cref="T:System.Guid" /> d'une instance de workflow.</param>
        <summary>Récupère l'instance de workflow contenant le <see cref="T:System.Guid" /> spécifié.</summary>
        <returns>
          <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> ayant le <see cref="T:System.Guid" /> spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `instanceId` spécifie une instance de workflow qui n'est pas actuellement en mémoire, celle-ci est chargée en mémoire et planifiée en vue d'une exécution. Par exemple, après avoir abandonné une instance de workflow, vous pouvez appeler la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> pour la charger à nouveau en mémoire. Dans ce cas, le dernier état rendu persistant de l'instance de workflow est chargé en mémoire par le service de persistance.  
  
   
  
## Examples  
 L'exemple de code suivant présente une méthode `ReloadWorkflow` permettant d'appeler la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>. La méthode `ReloadWorkflow` fait partie d'une classe plus grande ayant une propriété `Runtime` permettant d'accéder à toutes les méthodes, propriétés et événements de la classe <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 Cet exemple de code fait partie de la [exemple de Service de persistance personnalisé](http://go.microsoft.com/fwlink/?LinkId=157351) exemple.  
  
> [!NOTE]
>  Dans cet exemple, l'appel à <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> est redondant du fait que les deux méthodes <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> et <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> utilisent la même méthode d'application d'assistance interne pour charger l'instance de workflow en mémoire.  
  
 [!code-csharp[WF_Samples#265](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#265)]
 [!code-vb[WF_Samples#265](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#265)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'exécution du workflow n'a pas démarré.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsStarted">
      <MemberSignature Language="C#" Value="public bool IsStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStarted" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStarted : bool" Usage="System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si le moteur d'exécution de workflow a été démarré.</summary>
        <value>
          <see langword="true" /> si le moteur d'exécution de workflow a été démarré ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propriété <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> indique que les services de moteur d'exécution de workflow s'exécutent. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> est `false` jusqu'à ce que l’hôte appelle <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Il reste `true` jusqu'à ce que l'hôte appelle <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  
  
> [!NOTE]
>  Vous ne pouvez pas ajouter de services principaux au moteur d'exécution de workflow pendant qu'il s'exécute. Les services principaux sont des services qui dérivent des classes <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> et <xref:System.Workflow.Runtime.Tracking.TrackingService>.  
  
   
  
## Examples  
 L'exemple suivant montre comment accéder à la propriété <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> d'un objet <xref:System.Workflow.Runtime.WorkflowRuntime>. Dans cet exemple, si l'exécution est démarrée, un message s'imprime sur la console.  
  
 [!code-csharp[WF_Samples#21](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#21)]
 [!code-vb[WF_Samples#21](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom associé au <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <value>Nom associé à ce <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous ne pouvez pas définir <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> pendant le flux de travail le moteur d’exécution est en cours d’exécution (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> est `true`).  
  
   
  
## Examples  
 L'exemple suivant montre comment accéder à la propriété <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> d'un objet <xref:System.Workflow.Runtime.WorkflowRuntime>. Dans cet exemple, le nom de l'exécution a pour valeur "exécution Main".  
  
 [!code-csharp[WF_Samples#20](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#20)]
 [!code-vb[WF_Samples#20](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Une tentative de définition de <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> sur un <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> disposé se produit.</exception>
        <exception cref="T:System.InvalidOperationException">Une tentative de définition de la propriété <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> se produit lorsque le moteur d'exécution de workflow s'exécute.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.RemoveService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.RemoveService : obj -&gt; unit" Usage="workflowRuntime.RemoveService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Objet représentant l'instance de service à supprimer.</param>
        <summary>Supprime le service spécifié du moteur d'exécution de workflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous ne pouvez pas supprimer un service principal pendant que le moteur d’exécution de workflow est en cours d’exécution (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> est `true`). Les services principaux sont des services qui dérivent des classes <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> ou <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Si `service` dérive de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> appelle la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> implémentée par `service`.  
  
   
  
## Examples  
 Dans l'exemple suivant, une <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> est ajoutée et supprimée du <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#16](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#16)]
 [!code-vb[WF_Samples#16](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> est déjà supprimé.</exception>
        <exception cref="T:System.InvalidOperationException">Le moteur d'exécution du flux de travail a démarré (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> est <see langword="true" />) et <paramref name="service" /> est un service principal.  
  
\- ou - 
 <paramref name="service" /> n'est pas enregistré auprès du moteur d'exécution de workflow.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicesExceptionNotHandled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />
      <MemberSignature Language="VB.NET" Value="Public Event ServicesExceptionNotHandled As EventHandler(Of ServicesExceptionNotHandledEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::ServicesExceptionNotHandledEventArgs ^&gt; ^ ServicesExceptionNotHandled;" />
      <MemberSignature Language="F#" Value="member this.ServicesExceptionNotHandled : EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " Usage="member this.ServicesExceptionNotHandled : System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'un service dérivé de la classe <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> appelle <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un service dérivé de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> peut appeler la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> pour informer des abonnés à l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> qu'une exception qu'il ne pouvait pas gérer s'est produite pendant son exécution. Vous pouvez vous abonner à cet événement pour implémenter un mécanisme de récupération.  
  
 Cet événement est déclenché lorsqu'une instance de workflow n'a pas encore été créée par le moteur d'exécution de workflow et qu'une exception se produit. Dans ce scénario, la seule méthode pour informer une application hôte qu'une exception a eu lieu est de déclencher cet événement. Toutefois, le moteur d'exécution de workflow ne l'appelle pas directement. À la place, le moteur d'exécution de workflow remet une exception à l'instance de workflow ou, s'il n'y a aucune instance, renvoie à l'appelant, qui dans ce cas est réellement le service qui déclenche cet événement. Si vous créez votre propre service de persistance ou de planificateur, vous devez implémenter cet événement vous-même à l'aide de la méthode de base <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.  
  
 Pour l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled>, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime>, et l'objet <xref:System.Workflow.Runtime.WorkflowEventArgs> contient l'objet <xref:System.Guid> de l'instance de workflow qui utilisait le service et l'objet <xref:System.Exception> qui n'a pas pu être géré.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> à un gestionnaire d'événements, une méthode nommée `OnExceptionNotHandled`.  
  
 Cet exemple de code fait partie de la [exemple de Service de persistance personnalisé](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Started" />
      <MemberSignature Language="VB.NET" Value="Public Event Started As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Started;" />
      <MemberSignature Language="F#" Value="member this.Started : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Started : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le moteur d'exécution de workflow est démarré.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> méthode déclenche la <xref:System.Workflow.Runtime.WorkflowRuntime.Started> événement après qu’il a validé la configuration du service de moteur d’exécution de workflow, core a appelé le <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> méthode implémentée par chacun de ses services qui dérivent de la <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> (classe), et a la valeur <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> à `true`. L'ordre de démarrage des services qui dérivent de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> suivi par le moteur d'exécution de workflow n'est pas garanti et certains de ces services de moteur d'exécution de workflow peuvent dépendre de fonctionnalités fournies par d'autres services afin d'effectuer leurs tâches de démarrage. Les services de moteur d'exécution de workflow peuvent substituer la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=nameWithType> pour effectuer toutes les tâches de démarrage finales qui requièrent la prise en charge d'autres services de moteur d'exécution de workflow lorsque l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Started> est déclenché.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Dans l'exemple suivant, un gestionnaire d'événements est ajouté à l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Started> de l'objet <xref:System.Workflow.Runtime.WorkflowRuntime>. Dans cet exemple, le gestionnaire est une méthode anonyme qui imprime un message simple sur la console.  
  
 [!code-csharp[WF_Samples#15](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#15)]
 [!code-vb[WF_Samples#15](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartRuntime">
      <MemberSignature Language="C#" Value="public void StartRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartRuntime();" />
      <MemberSignature Language="F#" Value="member this.StartRuntime : unit -&gt; unit" Usage="workflowRuntime.StartRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Démarre le moteur d'exécution de workflow et ses services.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode vérifie qu'un jeu de services principaux valide existe, puis démarre tous les services qui dérivent de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Il doit y avoir un seul et unique de chacun des services principaux suivants : un flux de travail `CommitWorkBatch` service dérivé le <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> classe de base et un service de planificateur dérivé de la <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> classe de base.  Si les deux de ces services centraux sont manquantes, le moteur d’exécution de workflow fournit le service par défaut approprié : <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> pour le flux de travail `CommitWorkBatch` service et <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService> pour le service de planificateur. Un service de persistance est facultatif, mais il ne peut y avoir qu'un seul du service de persistance présent. Après avoir validé la configuration du service, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> appelle <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> pour tous les services dérivés de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Enfin, le moteur d'exécution de workflow définit la propriété <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> et déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Started>.  
  
 Vous ne pouvez pas ajouter ou supprimer des services principaux après le démarrage du moteur d'exécution de workflow. Les services principaux sont des services qui dérivent des classes <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> ou <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Si vous appelez la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> pendant que le moteur d'exécution de workflow s'exécute, aucune action n'est effectuée.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code appelle la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> après que le <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> ait créé une instance <xref:System.Workflow.Runtime.WorkflowRuntime> et qu'il ait appelé <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> pour ajouter des services à l'exécution. Il appelle également <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> avant que tout autre traitement se produise.  
  
 Cet exemple de code fait partie de la [annulation d’un Workflow](http://go.microsoft.com/fwlink/?LinkId=157346) exemple.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> est supprimé.</exception>
        <exception cref="T:System.InvalidOperationException">Il existe plusieurs services de flux de travail <see langword="CommitWorkBatch" /> enregistrés auprès de ce <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
- ou - 
Il y a plusieurs services de planificateur enregistrés auprès de ce <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
- ou - 
Il y a plusieurs services de persistance enregistrés auprès de ce <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />
      <MemberSignature Language="VB.NET" Value="Public Event Stopped As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Stopped;" />
      <MemberSignature Language="F#" Value="member this.Stopped : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Stopped : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le moteur d'exécution de workflow est arrêté.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> après qu'il ait appelé la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> implémentée par chacun de ses services dérivant de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  L'ordre d'arrêt de ces services de moteur d'exécution de workflow n'est pas garanti et certains de ces services peuvent avoir besoin de conserver quelques fonctionnalités dont dépendent d'autres services jusqu'à ce qu'ils soient également arrêtés. Ces services peuvent substituer la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A?displayProperty=nameWithType> pour exécuter tout arrêt résiduel logique lorsque l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> est déclenché.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Dans l'exemple suivant, un gestionnaire d'événements est ajouté à l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> de l'objet <xref:System.Workflow.Runtime.WorkflowRuntime>. Dans cet exemple, le gestionnaire est une méthode anonyme qui imprime un message simple sur la console.  
  
 [!code-csharp[WF_Samples#14](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#14)]
 [!code-vb[WF_Samples#14](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopRuntime">
      <MemberSignature Language="C#" Value="public void StopRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StopRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopRuntime();" />
      <MemberSignature Language="F#" Value="member this.StopRuntime : unit -&gt; unit" Usage="workflowRuntime.StopRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arrête le moteur d'exécution de workflow et ses services.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode provoque le moteur d’exécution de flux de travail décharger chacune de ses instances de flux de travail, d’arrêter tous ses services qui sont dérivés de la <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> classe, définissez <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> à `false`et déclencher la <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> événement.  
  
 Pour arrêter l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> de façon appropriée, appelez la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> avant d'appeler la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
 Pour plus d'informations, voir la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. La méthode <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> est appelée après que l'hôte a terminé tout autre traitement associé au runtime.  
  
 Cet exemple de code fait partie de la [annulation d’un Workflow](http://go.microsoft.com/fwlink/?LinkId=157346) exemple.  
  
 [!code-csharp[WF_Samples#259](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#259)]
 [!code-vb[WF_Samples#259](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#259)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> est déjà supprimé.</exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowAborted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowAborted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowAborted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowAborted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowAborted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une instance de workflow est abandonnée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> se produit après que tout le travail en attente de l'instance de workflow a été effacé, mais avant que cette dernière n'ait été invalidée dans la mémoire. Vous pouvez abandonner une instance de workflow en appelant <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A?displayProperty=nameWithType>.  
  
 Pour cet événement, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> et l'objet <xref:System.Workflow.Runtime.WorkflowEventArgs> contient l'objet <xref:System.Workflow.Runtime.WorkflowInstance> associé à l'événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> à un gestionnaire d'événements, méthode qui est nommée `OnWorkflowAborted`.  
  
 Cet exemple de code fait partie de la [annulation d’un Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) exemple.  
  
 [!code-csharp[WF_Samples#141](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#141)]
 [!code-vb[WF_Samples#141](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#141)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCompleted As EventHandler(Of WorkflowCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowCompletedEventArgs ^&gt; ^ WorkflowCompleted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCompleted : EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " Usage="member this.WorkflowCompleted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une instance de workflow a été effectuée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> est déclenché après que l'instance de workflow ait été effectuée mais avant qu'elle ait été invalidée dans la mémoire.  
  
 Pour l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> et l'objet <xref:System.Workflow.Runtime.WorkflowCompletedEventArgs> contient l'objet <xref:System.Workflow.Runtime.WorkflowInstance> et ses paramètres de sortie.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> à un gestionnaire d'événements, méthode qui est nommée `OnWorkflowCompleted`.  
  
 Cet exemple de code fait partie de la [annulation d’un Workflow](http://go.microsoft.com/fwlink/?LinkId=157346) exemple.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCreated As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowCreated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCreated : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowCreated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une instance de workflow est créée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le moteur d'exécution de workflow déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> après que l'instance de workflow a été complètement construite mais avant que les activités ne soient traitées. Pour cet événement, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> et l'objet <xref:System.Workflow.Runtime.WorkflowEventArgs> contient l'objet <xref:System.Workflow.Runtime.WorkflowInstance> associé à l'événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> à un gestionnaire d'événements, méthode qui est nommée `OnWorkflowCreated`.  
  
 Cet exemple de code fait partie de la [exemple de Service de persistance personnalisé](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowIdled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowIdled As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowIdled;" />
      <MemberSignature Language="F#" Value="member this.WorkflowIdled : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowIdled : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une instance de workflow entre en état d'inactivité.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le moteur d'exécution de workflow déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> lorsque l'instance de workflow entre dans l'état d'inactivité ; par exemple, lorsque le workflow attend qu'une activité <xref:System.Workflow.Activities.DelayActivity> se termine.  
  
 Pour cet événement, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> et l'objet <xref:System.Workflow.Runtime.WorkflowEventArgs> contient l'objet <xref:System.Workflow.Runtime.WorkflowInstance> associé à l'événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](https://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67(v=vs.100)).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> à un gestionnaire d'événements, méthode qui est nommée `OnWorkflowIdled`.  
  
 Cet exemple de code fait partie de la [annulation d’un Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) exemple.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowLoaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowLoaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowLoaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowLoaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'instance de workflow est chargée dans la mémoire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> se produit après que le service de persistance a restauré l'instance de workflow, mais avant que le moteur d'exécution de workflow ne commence à exécuter une autre activité.  
  
 Pour l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> et l'objet <xref:System.Workflow.Runtime.WorkflowEventArgs> contient l'objet <xref:System.Workflow.Runtime.WorkflowInstance> associé à l'événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> à un gestionnaire d'événements, méthode qui est nommée `OnWorkflowLoad`.  
  
 Cet exemple de code fait partie de la [Custom Persistence Service](http://go.microsoft.com/fwlink/?LinkID=157351) exemple.  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowPersisted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowPersisted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowPersisted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowPersisted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowPersisted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'état d'une instance de workflow est rendu persistant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'instance de workflow peut être rendue persistante pour de nombreuses raisons. Par exemple, l'hôte peut appeler la méthode <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> sur une instance de workflow ou le moteur d'exécution de workflow peut rendre une instance de workflow persistante parce que l'instance est inactive ou parce qu'une étendue atomique a été effectuée. Si un service de persistance est présent dans l'objet <xref:System.Workflow.Runtime.WorkflowRuntime>, l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> est déclenché par le runtime après que l'état de l'instance de workflow a été enregistré en mémoire. Si aucun service de persistance n'est présent, l'événement est tout de même déclenché, mais l'état de l'instance n'est pas enregistré. Si l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> se produit parce que l'instance de workflow est déchargée, il est suivi par un événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>.  
  
 Pour l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> et l'objet <xref:System.Workflow.Runtime.WorkflowEventArgs> contient l'objet <xref:System.Workflow.Runtime.WorkflowInstance> associé à l'événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment vous pouvez utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> à un gestionnaire d'événements, méthode qui est nommée `OnWorkflowPersisted`.  
  
 Cet exemple de code fait partie de la [exemple de Service de persistance personnalisé](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#279](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#279)]
 [!code-vb[WF_Samples#279](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#279)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowResumed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowResumed As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowResumed;" />
      <MemberSignature Language="F#" Value="member this.WorkflowResumed : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowResumed : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'exécution d'une instance de workflow est reprise suite à un arrêt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le moteur d'exécution de workflow déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> juste avant la planification de l'instance de workflow. L'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> est habituellement déclenché à cause d'un appel explicite à <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType>. Toutefois, le moteur d'exécution de workflow peut interrompre temporairement une instance pour effectuer une opération (par exemple, pour appliquer une modification de workflow). Dans ce cas, l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> est déclenché lorsque le runtime reprend l'exécution de l'instance de workflow à la suite de l'opération.  
  
 Pour l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> et l'objet <xref:System.Workflow.Runtime.WorkflowEventArgs> contient l'objet <xref:System.Workflow.Runtime.WorkflowInstance> associé à l'événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment vous pouvez utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> à un gestionnaire d'événements, méthode qui est nommée `OnWorkflowResume`.  
  
 Cet exemple de code fait partie de la [suspendre et arrêter un exemple](http://go.microsoft.com/fwlink/?LinkId=157402).  
  
 [!code-csharp[WF_Samples#171](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#171)]
 [!code-vb[WF_Samples#171](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#171)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowStarted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowStarted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowStarted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowStarted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors du démarrage d'une instance de workflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le moteur d'exécution de workflow déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> après que l'instance de workflow a été démarrée en planifiant l'activité racine à des fins d'exécution. Pour cet événement, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> et l'objet <xref:System.Workflow.Runtime.WorkflowEventArgs> contient l'objet <xref:System.Workflow.Runtime.WorkflowInstance> associé à l'événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> à un gestionnaire d'événements, méthode qui est nommée `OnWorkflowStarted`.  
  
 Cet exemple de code fait partie de la [Host Communication, exemple](http://go.microsoft.com/fwlink/?LinkId=157406).  
  
 [!code-csharp[WF_Samples#297](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets38.cs#297)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowSuspended">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowSuspended As EventHandler(Of WorkflowSuspendedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowSuspendedEventArgs ^&gt; ^ WorkflowSuspended;" />
      <MemberSignature Language="F#" Value="member this.WorkflowSuspended : EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " Usage="member this.WorkflowSuspended : System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une instance de workflow est interrompue.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'instance de workflow peut être interrompue par l'hôte via un appel à la méthode <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A>, par une activité <xref:System.Workflow.ComponentModel.SuspendActivity> ou implicitement par le moteur d'exécution de workflow. Par exemple, le moteur d'exécution de workflow interrompt temporairement l'instance lorsqu'il lui applique des modifications dynamiques.  
  
 Pour l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime>, et l'objet <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> contient l'objet <xref:System.Workflow.Runtime.WorkflowInstance> et une chaîne qui décrit la raison de l'interruption de l'instance.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> à un gestionnaire d'événements, méthode qui est nommée `OnWorkflowSuspended`.  
  
 Cet exemple de code fait partie de la [suspendre et arrêter un exemple](http://go.microsoft.com/fwlink/?LinkID=157402).  
  
 [!code-csharp[WF_Samples#170](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#170)]
 [!code-vb[WF_Samples#170](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowTerminated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowTerminated As EventHandler(Of WorkflowTerminatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowTerminatedEventArgs ^&gt; ^ WorkflowTerminated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowTerminated : EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " Usage="member this.WorkflowTerminated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une instance de workflow est arrêtée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le workflow peut être arrêté par l'hôte via un appel à la méthode <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>, par une activité <xref:System.Workflow.ComponentModel.TerminateActivity> ou par le moteur d'exécution de workflow lorsqu'une exception non prise en charge se produit. Le moteur d'exécution de workflow déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> après avoir arrêté l'instance de workflow, mais avant qu'elle ne soit invalidée dans la mémoire.  
  
 Pour l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime>, et l'objet <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> contient l'objet <xref:System.Workflow.Runtime.WorkflowInstance> et les informations sur la raison de l'arrêt de l'instance dans la propriété <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs.Exception%2A?displayProperty=nameWithType>.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> à un gestionnaire d'événements, méthode qui est nommée `OnWorkflowCompleted`.  
  
 Cet exemple de code fait partie de la [annulation d’un Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) exemple.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowUnloaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowUnloaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowUnloaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowUnloaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowUnloaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'instance de workflow est déchargée de la mémoire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une instance de workflow peut être déchargée de la mémoire par un appel explicite à la méthode <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> ou implicitement par le moteur d'exécution de workflow, en fonction de sa propre sémantique. Par exemple, le moteur d’exécution de workflow décharge une instance de workflow si l’instance devient inactive et que le runtime a un <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> ajouté pour lequel <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle%2A> est `true`.  
  
 Le moteur d'exécution de workflow déclenche  
  
 l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> après que l'état de l'instance de workflow ait pu être rendu persistant, mais avant que l'instance ait été invalidée dans la mémoire. Par conséquent, un événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> précède l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>.  
  
 Pour l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>, l'expéditeur contient l'objet <xref:System.Workflow.Runtime.WorkflowRuntime> et l'objet <xref:System.Workflow.Runtime.WorkflowEventArgs> contient l'objet <xref:System.Workflow.Runtime.WorkflowInstance> associé à l'événement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [consommation d’événements](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser les fonctionnalités <xref:System.Workflow.Runtime.WorkflowRuntime> d'un hôte de workflow. Le code associe l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> à un gestionnaire d'événements, méthode qui est nommée `OnWorkflowUnload`.  
  
 Cet exemple de code fait partie de la [exemple de Service de persistance personnalisé](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>