<Type Name="IVsaCodeItem" FullName="Microsoft.Vsa.IVsaCodeItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="77ff688e28e7f70d70b9a98d3b23d3fb27c73f18" /><Meta Name="ms.sourcegitcommit" Value="d8bd5d494445ce3fcad1321267cb87548d23a45b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/15/2018" /><Meta Name="ms.locfileid" Value="53446133" /></Metadata><TypeSignature Language="C#" Value="public interface IVsaCodeItem : Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IVsaCodeItem implements class Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Vsa.IVsaCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVsaCodeItem&#xA;Implements IVsaItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IVsaCodeItem : Microsoft::Vsa::IVsaItem" />
  <TypeSignature Language="F#" Value="type IVsaCodeItem = interface&#xA;    interface IVsaItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Vsa</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Vsa.IVsaItem</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Obsolete("Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.Guid("E0C0FFE7-7eea-4ee5-b7e4-0080c7eb0b74")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un élément de code qui doit être compilé par le moteur de script.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks  
L’élément de code spécifié peut contenir des classes, des modules ou des autres types de texte source.

Aucune autorisation n’est requise pour appeler les membres de l’interface IVsaCodeItem.

Le moteur de script implémente cette interface afin d’ajouter des éléments de code.

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddEventSource">
      <MemberSignature Language="C#" Value="public void AddEventSource (string eventSourceName, string eventSourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventSource(string eventSourceName, string eventSourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEventSource (eventSourceName As String, eventSourceType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEventSource(System::String ^ eventSourceName, System::String ^ eventSourceType);" />
      <MemberSignature Language="F#" Value="abstract member AddEventSource : string * string -&gt; unit" Usage="iVsaCodeItem.AddEventSource (eventSourceName, eventSourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
        <Parameter Name="eventSourceType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Nom de programmation de la source de l'événement.</param>
        <param name="eventSourceType">Nom de type de la source de l'événement.</param>
        <summary>Ajoute une source d'événement à l'élément de code. L'élément de code utilise la source de l'événement pour raccorder un événement à la source d'événement nommée en appelant la méthode IVsaSite.GetEventSourceInstance, qui est implémentée par l'hôte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Le moteur de script utilise les informations fournies par la méthode AddEventSource pour raccorder des événements à la source d’événement nommé. Il obtient les sources d’événements en appelant la méthode IVsaSite.GetEventSourceInstance, qui est implémentée par l’hôte. La méthode AddEventSource crée une classe qui gère les événements déclenchés par un objet fourni par l’hôte.

> [!NOTE]
> Le moteur de script JScript .NET ne prend pas en charge cette méthode. Dans les cas où le moteur JScript .NET doit raccorder un événement, vous devez le faire à l’aide d’un élément global. Plutôt que des sources d’événements, le moteur JScript .NET utilise les types d’éléments AppGlobal. Pour plus d’informations, consultez VsaItemType.


Dans l’élément de code, vous pouvez accéder à l’objet source d’événement par nom et, une fois accessible, vous pouvez écrire des gestionnaires d’événements par rapport à l’objet. Le type de source d’événement est passé en tant que chaîne plutôt que comme un objet de Type pour faciliter l’implémentation des sources d’événements par des hôtes non managés.

Le compilateur utilise le paramètre eventSourceType pour lier aux méthodes fournies par le type. Il est également utilisé plus tard lorsque le moteur de script appelle la méthode IVsaSite.GetEventSourceInstance pour demander une instance de l’objet de Type.

Pour plus d’informations sur les mécanismes permettant de raccorder des événements pour le moteur de script, consultez la méthode IVsaSite.GetEventSourceInstance.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSourceText">
      <MemberSignature Language="C#" Value="public void AppendSourceText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendSourceText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AppendSourceText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSourceText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSourceText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AppendSourceText : string -&gt; unit" Usage="iVsaCodeItem.AppendSourceText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texte à ajouter à l'élément de code.</param>
        <summary>Ajoute le texte spécifié à la fin de l'élément de code.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Texte source ajouté n’est pas soumis à la validation. Pour cette raison, les erreurs, le cas échéant, affichera lors du prochain appel à la méthode IVsaEngine.Compile.

Le texte source ajouté est fourni sous forme de chaîne unique. La chaîne nécessite de mise en forme, vous devez fournir vous-même.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeDOM">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeObject CodeDOM { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeObject CodeDOM" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDOM As CodeObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeObject ^ CodeDOM { System::CodeDom::CodeObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDOM : System.CodeDom.CodeObject" Usage="Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le modèle CodeDOM (Code Document Object Model) représenté dans l’élément de code.</summary>
        <value>Le CodeDOM pour l’élément de code.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
La propriété CodeDOM est généralement générée dans le cadre de l’étape de compilation du moteur de script, donc il n’est disponible qu’après un appel à la méthode IVsaEngine.Compile. Certaines implémentations de VSA peuvent être en mesure de fournir le CodeDOM dynamiquement, sans la nécessité d’une étape de compilation explicite, mais les hôtes ne peuvent pas reposer sur ce comportement. Certains moteurs de script, par exemple, le moteur de script JScript .NET, ne prennent pas en charge ce comportement.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventSource">
      <MemberSignature Language="C#" Value="public void RemoveEventSource (string eventSourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventSource(string eventSourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventSource (eventSourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEventSource(System::String ^ eventSourceName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventSource : string -&gt; unit" Usage="iVsaCodeItem.RemoveEventSource eventSourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Nom de programmation de la source de l'événement à supprimer.</param>
        <summary>Supprime la source d'événement spécifiée de l'élément de code.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Suppression d’une source d’événement ne supprime pas le Gestionnaire d’événements sous-jacent du texte source. Au lieu de cela, les événements ne déclenchent plus de notifications au gestionnaire d’événements. Par conséquent, vous obtiendrez une erreur du compilateur si vous supprimez une source d’événements en conservant la fonction sous-jacente dans le code source.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceText">
      <MemberSignature Language="C#" Value="public string SourceText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceText : string with get, set" Usage="Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Définit ou obtient le texte d'un élément de code spécifié, y compris du code généré automatiquement, le cas échéant.</summary>
        <value>Le texte de la source de l’élément de code.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Lorsque vous définissez cette propriété, le texte n’est pas soumis à la validation. Pour cette raison, les erreurs, le cas échéant, affichera lors du prochain appel à la méthode IVsaEngine.Compile.

La propriété de texte source retourne le texte source dans une seule grande chaîne, y compris les caractères de mise en forme telles que chariot retourne.

Pour obtenir cette propriété le moteur ne doit pas être fermé. Pour définir cette propriété le moteur ne doit pas être fermé et il se peut que le moteur ne doit pas en cours d’exécution.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>