<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc0de35fff36a636e335a171d1b43b734cc9184b" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52907869" /></Metadata><TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fournit l'implémentation personnalisée du type défini par l'utilisateur et la sérialisation et la désérialisation d'agrégats définis par l'utilisateur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Types définis par l’utilisateur (UDT) et des agrégats définis par l’utilisateur sont nécessaires pour définir un format de stockage, ce qui peut être soit <xref:Microsoft.SqlServer.Server.Format>.`Native` ou <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.  
  
 <xref:Microsoft.SqlServer.Server.Format>.`Native` permet à SQL Server gérer la sérialisation et désérialisation automatiquement, mais le format est limité quant au type de types qu’il peut gérer. <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` permet de gérer leur propre sérialisation des types définis par l’utilisateur et des agrégats. Types définis par l’utilisateur et les agrégats doivent être marqués avec <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` dans le `SqlUserDefinedType` ou `SqlUserDefinedAggregate` d’attribut et doit implémenter le <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.  
  
 Notez que même avec la sérialisation personnalisée, la taille totale de chaque instance doit être sous la limite maximale autorisée, actuellement 8 000 octets.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">Flux <see cref="T:System.IO.BinaryReader" /> duquel l’objet est désérialisé.</param>
        <summary>Génère un type ou un agrégat défini par l'utilisateur à partir de sa forme binaire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> méthode doit reconstituer votre objet à l’aide des informations écrites par le <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant montre l’implémentation de la <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> méthode d’un UDT, qui utilise un <xref:System.IO.BinaryReader> pour désérialiser un UDT rendue persistant auparavant. Cet exemple suppose que l’UDT a deux propriétés de données : `StringValue` et `DoubleValue`.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">Flux <see cref="T:System.IO.BinaryWriter" /> dans lequel le type ou l'agrégat défini par l'utilisateur est sérialisé.</param>
        <summary>Convertit un type ou un agrégat défini par l'utilisateur en son format binaire pour le rendre persistant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Écrire des informations suffisantes dans le flux binaire autorise la <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> méthode à reconstituer votre type ou l’agrégat défini par l’utilisateur.  
  
   
  
## Examples  
 L’exemple suivant montre l’implémentation de la <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> méthode d’un UDT, qui utilise un <xref:System.IO.BinaryWriter> pour sérialiser l’UDT dans le format binaire défini par l’utilisateur. L’objectif de la marge intérieure de caractère null est pour vous assurer que la valeur de chaîne est complètement séparée de la valeur double, afin qu’un UDT est comparé à un autre dans le code Transact-SQL, les octets de chaîne sont comparés aux octets de chaîne et deux octets sont comparées à double octets.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>