<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa6d2af7371832ccbdde5ed90bb40f43e554dba4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30338263" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="21227-101">Fournit l'implémentation personnalisée du type défini par l'utilisateur et la sérialisation et la désérialisation d'agrégats définis par l'utilisateur.</span>
      <span class="sxs-lookup">
        <span data-stu-id="21227-101">Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21227-102">Types définis par l’utilisateur (UDT) et des agrégats définis par l’utilisateur sont requis pour définir un format de stockage, qui peut être <xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="21227-102">User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="21227-103">ou <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span><span class="sxs-lookup"><span data-stu-id="21227-103">or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span></span>  
  
 <span data-ttu-id="21227-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="21227-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="21227-105">permet à SQL Server gérer la sérialisation et désérialisation automatiquement, mais le format est soumise aux restrictions sur le type de types qu’il peut gérer.</span><span class="sxs-lookup"><span data-stu-id="21227-105">allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle.</span></span> <span data-ttu-id="21227-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="21227-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="21227-107">permet de gérer leur propre sérialisation des types définis par l’utilisateur et des agrégats.</span><span class="sxs-lookup"><span data-stu-id="21227-107">allows user-defined types and aggregates to handle their own serialization.</span></span> <span data-ttu-id="21227-108">Agrégats et les types définis par l’utilisateur doivent être marqués avec <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="21227-108">User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="21227-109">dans le `SqlUserDefinedType` ou `SqlUserDefinedAggregate` d’attribut et vous devez implémenter la <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span><span class="sxs-lookup"><span data-stu-id="21227-109">in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span></span>  
  
 <span data-ttu-id="21227-110">Notez que même avec la sérialisation personnalisée, la taille totale de chaque instance doit être sous la limite maximale autorisée, actuellement 8 000 octets.</span><span class="sxs-lookup"><span data-stu-id="21227-110">Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">
          <span data-ttu-id="21227-111">
            <see cref="T:System.IO.BinaryReader" /> source à partir de laquelle l'objet est désérialisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21227-111">The <see cref="T:System.IO.BinaryReader" /> stream from which the object is deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21227-112">Génère un type ou un agrégat défini par l'utilisateur à partir de sa forme binaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21227-112">Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21227-113">Le <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> méthode doit reconstituer votre objet à l’aide des informations écrites par le <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="21227-113">The <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21227-114">L’exemple suivant illustre l’implémentation de la <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> méthode d’un UDT, qui utilise un <xref:System.IO.BinaryReader> désérialiser un UDT conservée précédemment.</span><span class="sxs-lookup"><span data-stu-id="21227-114">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT.</span></span> <span data-ttu-id="21227-115">Cet exemple suppose que l’UDT a deux propriétés de données : `StringValue` et `DoubleValue`.</span><span class="sxs-lookup"><span data-stu-id="21227-115">This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">
          <span data-ttu-id="21227-116">Flux <see cref="T:System.IO.BinaryWriter" /> dans lequel le type ou l'agrégat défini par l'utilisateur est sérialisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21227-116">The <see cref="T:System.IO.BinaryWriter" /> stream to which the UDT or user-defined aggregate is serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21227-117">Convertit un type ou un agrégat défini par l'utilisateur en son format binaire pour le rendre persistant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21227-117">Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21227-118">Rédigez des informations suffisantes pour le flux binaire autorise la <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> méthode à reconstituer votre type ou l’agrégat défini par l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="21227-118">Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21227-119">L’exemple suivant illustre l’implémentation de la <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> méthode d’un UDT, qui utilise un <xref:System.IO.BinaryWriter> pour sérialiser l’UDT dans le format binaire défini par l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="21227-119">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format.</span></span> <span data-ttu-id="21227-120">L’objectif du remplissage de caractère null est pour vous assurer que la valeur de chaîne est complètement séparée de la valeur double, afin qu’un UDT est comparé à un autre dans le code Transact-SQL, les octets de chaîne sont comparés aux octets de la chaîne et octets doubles sont comparés en double octets.</span><span class="sxs-lookup"><span data-stu-id="21227-120">The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>