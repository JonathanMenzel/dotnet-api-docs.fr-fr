<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c591e65fa92805a7a1e5c96fa03d5a45d1f410bb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30339753" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Permet aux procédures stockées managées s'exécutant intra processus sur une base de données SQL Server de retourner des résultats à l'appelant. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une instance de cette classe est rendue disponible aux procédures stockées managées par le biais du <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> propriété de la <xref:Microsoft.SqlServer.Server.SqlContext> classe.  
  
   
  
## Examples  
 L’exemple suivant utilise <xref:System.Data.SqlClient.SqlConnection> et <xref:System.Data.SqlClient.SqlCommand> pour sélectionner les lignes à partir d’une source de données dans une procédure stockée. L’exemple utilise ensuite un <xref:Microsoft.SqlServer.Server.SqlPipe> pour exécuter la commande et envoyer les résultats au client.  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">Objet <see cref="T:System.Data.SqlClient.SqlCommand" /> à exécuter.</param>
        <summary>Exécute la commande passée en tant que paramètre et envoie les résultats au client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En plus de tous les résultats réels, les autres messages et les erreurs sont également envoyés directement au client.  
  
 Paramètres de sortie et les valeurs de retour ne sont pas envoyées au client ; elles sont accessibles à l’appelant, via la collection de paramètres de l’objet de commande.  
  
 Si la commande n’est pas liée à une connexion in-process, un <xref:System.InvalidOperationException> est levée. Cette méthode n'est pas prise en charge sur les commandes liées aux connexions extra processus.  
  
 S’il existe des erreurs dans le <xref:System.Data.SqlClient.SqlCommand> objet qui a été soumis, les exceptions sont envoyées au canal, mais une copie est également envoyée au code managé appelant. Si le code appelant n’intercepte l’exception, il se propager en remontant la pile dans le code Transact-SQL et apparaît deux fois dans la sortie. Si le code appelant intercepte l’exception, le consommateur du canal s’affiche toujours l’erreur, mais il ne sera pas une erreur en double.  
  
   
  
## Examples  
 L’exemple suivant utilise <xref:System.Data.SqlClient.SqlConnection> et <xref:System.Data.SqlClient.SqlCommand> pour sélectionner les lignes à partir d’une source de données dans une procédure stockée. L’exemple utilise ensuite un <xref:Microsoft.SqlServer.Server.SqlPipe> pour exécuter la commande et envoyer les résultats au client.  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Cette méthode n'est pas prise en charge sur les commandes liées aux connexions extra processus.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> est en mode d'envoi de jeux de résultats uniques au client. Cette propriété est en lecture seule.</summary>
        <value>
          <see langword="true" /> si la méthode <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> a été appelée et que <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> est en mode d'envoi de jeux de résultats uniques au client ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envoie les résultats directement au client ou au consommateur de sortie actuel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le **envoyer** méthode envoie des données directement le client ou l’appelant. Il est généralement le client qui utilise la sortie de la **canal** (méthode), mais dans le cas de CLR imbriquée des procédures stockées au consommateur de sortie peut également être une procédure stockée. Par exemple, Procedure1 appelle <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> avec le texte de commande « EXEC Procedure2 ». Procedure2 est également une procédure stockée managée. Si Procedure2 appelle maintenant <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, la ligne est envoyée au lecteur de Procedure1, pas au client.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Jeu de résultats à une seule ligne envoyé au client : un objet <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />.</param>
        <summary>Envoie un jeu de résultats à une seule ligne directement au client ou au consommateur de sortie actuel.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Jeu de résultats multiligne à envoyer au client : un objet <see cref="T:System.Data.SqlClient.SqlDataReader" />.</param>
        <summary>Envoie un jeu de résultats multiligne directement au client ou au consommateur de sortie actuel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Data.SqlClient.SqlDataReader> objet passé comme un paramètre a des colonnes masquées, ces colonnes ne sont pas propagées au jeu de résultats envoyé au client.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Chaîne de message à envoyer au client.</param>
        <summary>Envoie un message de type chaîne directement au client ou au consommateur de sortie actuel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de message est envoyée au client en tant qu’un message d’information. Les applications clientes peuvent écouter des messages par le biais des mécanismes différents, selon le données accès API (API) qu’ils utilisent. Par exemple, si le client utilise ADO.NET, les messages transmettent via le <xref:System.Data.SqlClient.SqlConnection.InfoMessage> événement.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> méthode pour envoyer une chaîne de message directement au client.  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le <paramref name="message" /> comporte plus de 4 000 caractères.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marque la fin d'un jeu de résultats et retourne l'instance de <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> à son état initial.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les procédures stockées managées peuvent envoyer des jeux de résultats aux clients qui n’implémentent pas un <xref:System.Data.SqlClient.SqlDataReader>. Cette méthode, avec <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> et <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, permet aux procédures stockées d’envoyer des jeux de résultats personnalisés au client.  
  
   
  
## Examples  
 L’exemple suivant crée un nouveau <xref:Microsoft.SqlServer.Server.SqlDataRecord> et son <xref:Microsoft.SqlServer.Server.SqlMetaData>. L’exemple marque ensuite le début d’un jeu de résultats le <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> méthode, envoie des enregistrements avec les données d’exemple au client à l’aide de la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> (méthode) et marque la fin du résultat définie avec la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> (méthode).  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> n'a pas été appelée au préalable.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Objet <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> avec les valeurs de colonne pour la ligne à envoyer au client. Le schéma de l'enregistrement doit correspondre au schéma décrit par les métadonnées de <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> passées à la méthode <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</param>
        <summary>Renvoie une ligne unique de données au client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les procédures stockées managées peuvent envoyer des jeux de résultats aux clients qui n’implémentent pas un <xref:System.Data.SqlClient.SqlDataReader>. Cette méthode, avec <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> et <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, permet aux procédures stockées d’envoyer des jeux de résultats personnalisés au client.  
  
 Le <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> méthode envoie une ligne unique de données au client. Lignes peuvent être retournées par la suite à l’appelant en appelant <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, une fois pour chaque ligne qui est envoyée. Une fois que toutes les lignes ont été envoyés, un appel à la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> méthode est requise pour marquer la fin du jeu de résultats.  
  
   
  
## Examples  
 L’exemple suivant crée un nouveau <xref:Microsoft.SqlServer.Server.SqlDataRecord> et son <xref:Microsoft.SqlServer.Server.SqlMetaData>. L’exemple marque ensuite le début d’un jeu de résultats le <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> méthode, envoie des enregistrements avec les données d’exemple au client à l’aide de la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> (méthode) et marque la fin du résultat définie avec la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> (méthode).  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> n'a pas été appelée au préalable.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Objet <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> à partir duquel les métadonnées sont extraites ; utilisé pour décrire le jeu de résultats.</param>
        <summary>Marque le début d'un jeu de résultats à renvoyer au client et utilise le paramètre d'enregistrement pour construire les métadonnées qui décrivent le jeu de résultats.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les procédures stockées managées peuvent envoyer des jeux de résultats aux clients qui n’implémentent pas un <xref:System.Data.SqlClient.SqlDataReader>. Cette méthode, avec <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> et <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, permet aux procédures stockées d’envoyer des jeux de résultats personnalisés au client.  
  
 Le <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> méthode marque le début d’un jeu de résultats et utilise le paramètre d’enregistrement pour construire les métadonnées qui décrivent le jeu de résultats. Toutes les lignes suivantes, envoyées à l’aide de la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> méthode, doit correspondre à cette définition de métadonnées.  
  
 Notez qu’après l’appel <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>, seule <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> et <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> peut être appelée. Toute autre méthode dans la même instance de <xref:Microsoft.SqlServer.Server.SqlPipe> lève une <xref:System.InvalidOperationException>. <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> définit <xref:Microsoft.SqlServer.Server.SqlPipe> à l’état initial où d’autres méthodes peuvent être appelées.  
  
 Une fois que le contrôle retourne à Transact-SQL à partir de l’exécution du CLR, n’essayez pas d’utiliser une variable statique ou locale initialisée sur la mémoire CLR. Par exemple, ne stockez pas une instance d’un processus dans la classe, par exemple `SQLDataRecord`, qui sera utilisé après le retour de contrôle du CLR. Une exception est le `SQLMetaData` dans la classe de processus.  
  
   
  
## Examples  
 L’exemple suivant crée un nouveau <xref:Microsoft.SqlServer.Server.SqlDataRecord> et son <xref:Microsoft.SqlServer.Server.SqlMetaData>. L’exemple marque ensuite le début d’un jeu de résultats le <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> méthode, envoie des enregistrements avec les données d’exemple au client à l’aide de la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> (méthode) et marque la fin du résultat définie avec la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> (méthode).  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="record" /> n'a pas de colonnes ou n'a pas été initialisé.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode autre que <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> ou <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> a été appelée après la méthode <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>