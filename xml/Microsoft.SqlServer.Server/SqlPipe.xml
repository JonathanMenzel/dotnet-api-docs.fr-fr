<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7d2492efd855dc4576dfb178dcc4a5f1819b815" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36729846" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <TypeSignature Language="F#" Value="type SqlPipe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="94a96-101">Permet aux procédures stockées managées s'exécutant intra processus sur une base de données SQL Server de retourner des résultats à l'appelant.</span>
      <span class="sxs-lookup">
        <span data-stu-id="94a96-101">Allows managed stored procedures running in-process on a SQL Server database to return results back to the caller.</span>
      </span>
      <span data-ttu-id="94a96-102">Cette classe ne peut pas être héritée.</span>
      <span class="sxs-lookup">
        <span data-stu-id="94a96-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94a96-103">Une instance de cette classe est rendue disponible aux procédures stockées managées par le biais du <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> propriété de la <xref:Microsoft.SqlServer.Server.SqlContext> classe.</span><span class="sxs-lookup"><span data-stu-id="94a96-103">An instance of this class is made available to managed stored procedures through the <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> property of the <xref:Microsoft.SqlServer.Server.SqlContext> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94a96-104">L’exemple suivant utilise <xref:System.Data.SqlClient.SqlConnection> et <xref:System.Data.SqlClient.SqlCommand> pour sélectionner les lignes à partir d’une source de données dans une procédure stockée.</span><span class="sxs-lookup"><span data-stu-id="94a96-104">The following example uses <xref:System.Data.SqlClient.SqlConnection> and <xref:System.Data.SqlClient.SqlCommand> to select rows from a data source in a stored procedure.</span></span> <span data-ttu-id="94a96-105">L’exemple utilise ensuite un <xref:Microsoft.SqlServer.Server.SqlPipe> pour exécuter la commande et envoyer les résultats au client.</span><span class="sxs-lookup"><span data-stu-id="94a96-105">The example then uses a <xref:Microsoft.SqlServer.Server.SqlPipe> to execute the command and send the results back to the client.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAndSend : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="sqlPipe.ExecuteAndSend command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="94a96-106">Objet <see cref="T:System.Data.SqlClient.SqlCommand" /> à exécuter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-106">The <see cref="T:System.Data.SqlClient.SqlCommand" /> object to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94a96-107">Exécute la commande passée en tant que paramètre et envoie les résultats au client.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-107">Executes the command passed as a parameter and sends the results to the client.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94a96-108">En plus de tous les résultats réels, les autres messages et les erreurs sont également envoyés directement au client.</span><span class="sxs-lookup"><span data-stu-id="94a96-108">In addition to any actual results, other messages and errors are also sent directly to the client.</span></span>  
  
 <span data-ttu-id="94a96-109">Paramètres de sortie et les valeurs de retour ne sont pas envoyées au client ; elles sont accessibles à l’appelant, via la collection de paramètres de l’objet de commande.</span><span class="sxs-lookup"><span data-stu-id="94a96-109">Output parameters and return values are not sent to the client; these are available to the caller, through the parameters collection of the command object.</span></span>  
  
 <span data-ttu-id="94a96-110">Si la commande n’est pas liée à une connexion in-process, un <xref:System.InvalidOperationException> est levée.</span><span class="sxs-lookup"><span data-stu-id="94a96-110">If the command is not bound to an in-process connection, an <xref:System.InvalidOperationException> is thrown.</span></span> <span data-ttu-id="94a96-111">Cette méthode n'est pas prise en charge sur les commandes liées aux connexions extra processus.</span><span class="sxs-lookup"><span data-stu-id="94a96-111">This method is not supported on commands bound to out-of-process connections.</span></span>  
  
 <span data-ttu-id="94a96-112">S’il existe des erreurs dans le <xref:System.Data.SqlClient.SqlCommand> objet qui a été soumis, les exceptions sont envoyées au canal, mais une copie est également envoyée au code managé appelant.</span><span class="sxs-lookup"><span data-stu-id="94a96-112">If there are errors in the <xref:System.Data.SqlClient.SqlCommand> object that was submitted, exceptions are sent to the pipe, but a copy is also sent to calling managed code.</span></span> <span data-ttu-id="94a96-113">Si le code appelant n’intercepte l’exception, il se propager en remontant la pile dans le code Transact-SQL et apparaît deux fois dans la sortie.</span><span class="sxs-lookup"><span data-stu-id="94a96-113">If the calling code doesn't catch the exception, it will propagate up the stack to the Transact-SQL code and appear in the output twice.</span></span> <span data-ttu-id="94a96-114">Si le code appelant intercepte l’exception, le consommateur du canal s’affiche toujours l’erreur, mais il ne sera pas une erreur en double.</span><span class="sxs-lookup"><span data-stu-id="94a96-114">If the calling code does catch the exception, the pipe consumer will still see the error, but there will not be a duplicate error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94a96-115">L’exemple suivant utilise <xref:System.Data.SqlClient.SqlConnection> et <xref:System.Data.SqlClient.SqlCommand> pour sélectionner les lignes à partir d’une source de données dans une procédure stockée.</span><span class="sxs-lookup"><span data-stu-id="94a96-115">The following example uses <xref:System.Data.SqlClient.SqlConnection> and <xref:System.Data.SqlClient.SqlCommand> to select rows from a data source in a stored procedure.</span></span> <span data-ttu-id="94a96-116">L’exemple utilise ensuite un <xref:Microsoft.SqlServer.Server.SqlPipe> pour exécuter la commande et envoyer les résultats au client.</span><span class="sxs-lookup"><span data-stu-id="94a96-116">The example then uses a <xref:Microsoft.SqlServer.Server.SqlPipe> to execute the command and send the results back to the client.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="94a96-117">
            <paramref name="command" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-117">The <paramref name="command" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="94a96-118">Cette méthode n'est pas prise en charge sur les commandes liées aux connexions extra processus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-118">This method is not supported on commands bound to out-of-process connections.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSendingResults : bool" Usage="Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="94a96-119">Obtient une valeur qui indique si <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> est en mode d'envoi de jeux de résultats uniques au client.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-119">Gets a value that indicates whether the <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> is in the mode of sending single result sets back to the client.</span>
          </span>
          <span data-ttu-id="94a96-120">Cette propriété est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-120">This property is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="94a96-121">
            <see langword="true" /> si la méthode <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> a été appelée et que <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> est en mode d'envoi de jeux de résultats uniques au client ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-121">
              <see langword="true" /> if the <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> method has been called and the <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> is in the mode of sending single result sets back to the client; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="94a96-122">Envoie les résultats directement au client ou au consommateur de sortie actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-122">Sends results directly to the client or current output consumer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94a96-123">Le **envoyer** méthode envoie des données directement le client ou l’appelant.</span><span class="sxs-lookup"><span data-stu-id="94a96-123">The **Send** method sends data straight to the client or caller.</span></span> <span data-ttu-id="94a96-124">Il est généralement le client qui utilise la sortie de la **canal** (méthode), mais dans le cas de CLR imbriquée des procédures stockées au consommateur de sortie peut également être une procédure stockée.</span><span class="sxs-lookup"><span data-stu-id="94a96-124">It is usually the client that consumes the output from the **Pipe** method, but in the case of nested CLR stored procedures the output consumer can also be a stored procedure.</span></span> <span data-ttu-id="94a96-125">Par exemple, Procedure1 appelle <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> avec le texte de commande « EXEC Procedure2 ».</span><span class="sxs-lookup"><span data-stu-id="94a96-125">For example, Procedure1 calls <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> with the command text "EXEC Procedure2".</span></span> <span data-ttu-id="94a96-126">Procedure2 est également une procédure stockée managée.</span><span class="sxs-lookup"><span data-stu-id="94a96-126">Procedure2 is also a managed stored procedure.</span></span> <span data-ttu-id="94a96-127">Si Procedure2 appelle maintenant <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, la ligne est envoyée au lecteur de Procedure1, pas au client.</span><span class="sxs-lookup"><span data-stu-id="94a96-127">If Procedure2 now calls <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, the row is sent to Procedure1's reader, not to the client.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.Send record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">
          <span data-ttu-id="94a96-128">Jeu de résultats à une seule ligne envoyé au client : un objet <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-128">The single-row result set sent to the client: a <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94a96-129">Envoie un jeu de résultats à une seule ligne directement au client ou au consommateur de sortie actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-129">Sends a single-row result set directly to the client or current output consumer.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="94a96-130">
            <paramref name="record" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-130">The <paramref name="record" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Data.SqlClient.SqlDataReader -&gt; unit" Usage="sqlPipe.Send reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="94a96-131">Jeu de résultats multiligne à envoyer au client : un objet <see cref="T:System.Data.SqlClient.SqlDataReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-131">The multirow result set to be sent to the client: a <see cref="T:System.Data.SqlClient.SqlDataReader" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94a96-132">Envoie un jeu de résultats multiligne directement au client ou au consommateur de sortie actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-132">Sends a multirow result set directly to the client or current output consumer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94a96-133">Si le <xref:System.Data.SqlClient.SqlDataReader> objet passé comme un paramètre a des colonnes masquées, ces colonnes ne sont pas propagées au jeu de résultats envoyé au client.</span><span class="sxs-lookup"><span data-stu-id="94a96-133">If the <xref:System.Data.SqlClient.SqlDataReader> object passed in as a parameter has hidden columns, those columns are not propagated to the result set sent to the client.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="94a96-134">
            <paramref name="reader" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-134">The <paramref name="reader" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; unit" Usage="sqlPipe.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="94a96-135">Chaîne de message à envoyer au client.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-135">The message string to be sent to the client.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94a96-136">Envoie un message de type chaîne directement au client ou au consommateur de sortie actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-136">Sends a string message directly to the client or current output consumer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94a96-137">La chaîne de message est envoyée au client en tant qu’un message d’information.</span><span class="sxs-lookup"><span data-stu-id="94a96-137">The message string is sent as an informational message to the client.</span></span> <span data-ttu-id="94a96-138">Les applications clientes peuvent écouter des messages par le biais des mécanismes différents, selon le données accès API (API) qu’ils utilisent.</span><span class="sxs-lookup"><span data-stu-id="94a96-138">Client applications can listen to messages through different mechanisms, depending on the data access application programming interface (API) that they use.</span></span> <span data-ttu-id="94a96-139">Par exemple, si le client utilise ADO.NET, les messages transmettent via le <xref:System.Data.SqlClient.SqlConnection.InfoMessage> événement.</span><span class="sxs-lookup"><span data-stu-id="94a96-139">For example, if the client is using ADO.NET, the messages transmit through the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94a96-140">L’exemple suivant utilise la <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> méthode pour envoyer une chaîne de message directement au client.</span><span class="sxs-lookup"><span data-stu-id="94a96-140">The following example uses the <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> method to send a message string directly to the client.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="94a96-141">Le <paramref name="message" /> comporte plus de 4 000 caractères.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-141">The <paramref name="message" /> is greater than 4,000 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="94a96-142">
            <paramref name="message" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-142">The <paramref name="message" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberSignature Language="F#" Value="member this.SendResultsEnd : unit -&gt; unit" Usage="sqlPipe.SendResultsEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="94a96-143">Marque la fin d'un jeu de résultats et retourne l'instance de <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> à son état initial.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-143">Marks the end of a result set, and returns the <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> instance back to the initial state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94a96-144">Les procédures stockées managées peuvent envoyer des jeux de résultats aux clients qui n’implémentent pas un <xref:System.Data.SqlClient.SqlDataReader>.</span><span class="sxs-lookup"><span data-stu-id="94a96-144">Managed stored procedures can send result sets to clients that are not implementing a <xref:System.Data.SqlClient.SqlDataReader>.</span></span> <span data-ttu-id="94a96-145">Cette méthode, avec <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> et <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, permet aux procédures stockées d’envoyer des jeux de résultats personnalisés au client.</span><span class="sxs-lookup"><span data-stu-id="94a96-145">This method, along with <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> and <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, allow stored procedures to send custom result sets to the client.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94a96-146">L’exemple suivant crée un nouveau <xref:Microsoft.SqlServer.Server.SqlDataRecord> et son <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span><span class="sxs-lookup"><span data-stu-id="94a96-146">The following example creates a new <xref:Microsoft.SqlServer.Server.SqlDataRecord> and its <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span></span> <span data-ttu-id="94a96-147">L’exemple marque ensuite le début d’un jeu de résultats le <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> méthode, envoie des enregistrements avec les données d’exemple au client à l’aide de la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> (méthode) et marque la fin du résultat définie avec la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="94a96-147">The example then marks the beginning of a result set using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method, sends records with example data back to the client using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, and marks the end of the result set with the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="94a96-148">La méthode <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> n'a pas été appelée au préalable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-148">The <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> method was not previously called.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsRow : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsRow record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">
          <span data-ttu-id="94a96-149">Objet <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> avec les valeurs de colonne pour la ligne à envoyer au client.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-149">A <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> object with the column values for the row to be sent to the client.</span>
          </span>
          <span data-ttu-id="94a96-150">Le schéma de l'enregistrement doit correspondre au schéma décrit par les métadonnées de <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> passées à la méthode <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-150">The schema for the record must match the schema described by the metadata of the <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> passed to the <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94a96-151">Renvoie une ligne unique de données au client.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-151">Sends a single row of data back to the client.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94a96-152">Les procédures stockées managées peuvent envoyer des jeux de résultats aux clients qui n’implémentent pas un <xref:System.Data.SqlClient.SqlDataReader>.</span><span class="sxs-lookup"><span data-stu-id="94a96-152">Managed stored procedures can send result sets to clients that are not implementing a <xref:System.Data.SqlClient.SqlDataReader>.</span></span> <span data-ttu-id="94a96-153">Cette méthode, avec <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> et <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, permet aux procédures stockées d’envoyer des jeux de résultats personnalisés au client.</span><span class="sxs-lookup"><span data-stu-id="94a96-153">This method, along with <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> and <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, allows stored procedures to send custom result sets to the client.</span></span>  
  
 <span data-ttu-id="94a96-154">Le <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> méthode envoie une ligne unique de données au client.</span><span class="sxs-lookup"><span data-stu-id="94a96-154">The <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method sends a single row of data back to the client.</span></span> <span data-ttu-id="94a96-155">Lignes peuvent être retournées par la suite à l’appelant en appelant <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, une fois pour chaque ligne qui est envoyée.</span><span class="sxs-lookup"><span data-stu-id="94a96-155">Rows can subsequently be returned to the caller by calling <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, one time for each row being sent.</span></span> <span data-ttu-id="94a96-156">Une fois que toutes les lignes ont été envoyés, un appel à la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> méthode est requise pour marquer la fin du jeu de résultats.</span><span class="sxs-lookup"><span data-stu-id="94a96-156">After all the rows have been sent, a call to the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method is required to mark the end of the result set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94a96-157">L’exemple suivant crée un nouveau <xref:Microsoft.SqlServer.Server.SqlDataRecord> et son <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span><span class="sxs-lookup"><span data-stu-id="94a96-157">The following example creates a new <xref:Microsoft.SqlServer.Server.SqlDataRecord> and its <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span></span> <span data-ttu-id="94a96-158">L’exemple marque ensuite le début d’un jeu de résultats le <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> méthode, envoie des enregistrements avec les données d’exemple au client à l’aide de la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> (méthode) et marque la fin du résultat définie avec la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="94a96-158">The example then marks the beginning of a result set using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method, sends records with example data back to the client using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, and marks the end of the result set with the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="94a96-159">
            <paramref name="record" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-159">The <paramref name="record" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="94a96-160">La méthode <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> n'a pas été appelée au préalable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-160">The <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> method was not previously called.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsStart : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsStart record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">
          <span data-ttu-id="94a96-161">Objet <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> à partir duquel les métadonnées sont extraites ; utilisé pour décrire le jeu de résultats.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-161">A <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> object from which metadata is extracted and used to describe the result set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94a96-162">Marque le début d'un jeu de résultats à renvoyer au client et utilise le paramètre d'enregistrement pour construire les métadonnées qui décrivent le jeu de résultats.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-162">Marks the beginning of a result set to be sent back to the client, and uses the record parameter to construct the metadata that describes the result set.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94a96-163">Les procédures stockées managées peuvent envoyer des jeux de résultats aux clients qui n’implémentent pas un <xref:System.Data.SqlClient.SqlDataReader>.</span><span class="sxs-lookup"><span data-stu-id="94a96-163">Managed stored procedures can send result sets to clients that are not implementing a <xref:System.Data.SqlClient.SqlDataReader>.</span></span> <span data-ttu-id="94a96-164">Cette méthode, avec <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> et <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, permet aux procédures stockées d’envoyer des jeux de résultats personnalisés au client.</span><span class="sxs-lookup"><span data-stu-id="94a96-164">This method, along with <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> and <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, allow stored procedures to send custom result sets to the client.</span></span>  
  
 <span data-ttu-id="94a96-165">Le <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> méthode marque le début d’un jeu de résultats et utilise le paramètre d’enregistrement pour construire les métadonnées qui décrivent le jeu de résultats.</span><span class="sxs-lookup"><span data-stu-id="94a96-165">The <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method marks the beginning of a result set, and uses the record parameter to construct the metadata that describes the result set.</span></span> <span data-ttu-id="94a96-166">Toutes les lignes suivantes, envoyées à l’aide de la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> méthode, doit correspondre à cette définition de métadonnées.</span><span class="sxs-lookup"><span data-stu-id="94a96-166">All the subsequent rows, sent using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, must match that metadata definition.</span></span>  
  
 <span data-ttu-id="94a96-167">Notez qu’après l’appel <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>, seule <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> et <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> peut être appelée.</span><span class="sxs-lookup"><span data-stu-id="94a96-167">Note that after calling <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>, only <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> and <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> can be called.</span></span> <span data-ttu-id="94a96-168">Toute autre méthode dans la même instance de <xref:Microsoft.SqlServer.Server.SqlPipe> lève une <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="94a96-168">Any other method in the same instance of <xref:Microsoft.SqlServer.Server.SqlPipe> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="94a96-169"><xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> définit <xref:Microsoft.SqlServer.Server.SqlPipe> à l’état initial où d’autres méthodes peuvent être appelées.</span><span class="sxs-lookup"><span data-stu-id="94a96-169"><xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> sets <xref:Microsoft.SqlServer.Server.SqlPipe> back to the initial state where other methods can be called.</span></span>  
  
 <span data-ttu-id="94a96-170">Une fois que le contrôle retourne à Transact-SQL à partir de l’exécution du CLR, n’essayez pas d’utiliser une variable statique ou locale initialisée sur la mémoire CLR.</span><span class="sxs-lookup"><span data-stu-id="94a96-170">After control returns to Transact-SQL from CLR execution, do not attempt to use a static or local variable initialized to CLR memory.</span></span> <span data-ttu-id="94a96-171">Par exemple, ne stockez pas une instance d’un processus dans la classe, par exemple `SQLDataRecord`, qui sera utilisé après le retour de contrôle du CLR.</span><span class="sxs-lookup"><span data-stu-id="94a96-171">For example, do not store an instance of an in process class, for example `SQLDataRecord`, which will be used after control returns from CLR.</span></span> <span data-ttu-id="94a96-172">Une exception est le `SQLMetaData` dans la classe de processus.</span><span class="sxs-lookup"><span data-stu-id="94a96-172">One exception is the `SQLMetaData` in process class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94a96-173">L’exemple suivant crée un nouveau <xref:Microsoft.SqlServer.Server.SqlDataRecord> et son <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span><span class="sxs-lookup"><span data-stu-id="94a96-173">The following example creates a new <xref:Microsoft.SqlServer.Server.SqlDataRecord> and its <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span></span> <span data-ttu-id="94a96-174">L’exemple marque ensuite le début d’un jeu de résultats le <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> méthode, envoie des enregistrements avec les données d’exemple au client à l’aide de la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> (méthode) et marque la fin du résultat définie avec la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="94a96-174">The example then marks the beginning of a result set using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method, sends records with example data back to the client using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, and marks the end of the result set with the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="94a96-175">
            <paramref name="record" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-175">The <paramref name="record" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="94a96-176">
            <paramref name="record" /> n'a pas de colonnes ou n'a pas été initialisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-176">The <paramref name="record" /> has no columns or has not been initialized.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="94a96-177">Une méthode autre que <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> ou <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> a été appelée après la méthode <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94a96-177">A method other than <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> or <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> was called after the <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> method.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>